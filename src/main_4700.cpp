// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/LayerLayout
#include "GlobalNamespace/OVRPlugin_LayerLayout.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/LayerLayout Stereo
::GlobalNamespace::OVRPlugin::LayerLayout GlobalNamespace::OVRPlugin::LayerLayout::_get_Stereo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerLayout::_get_Stereo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::LayerLayout>("", "OVRPlugin/LayerLayout", "Stereo"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/LayerLayout Stereo
void GlobalNamespace::OVRPlugin::LayerLayout::_set_Stereo(::GlobalNamespace::OVRPlugin::LayerLayout value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerLayout::_set_Stereo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/LayerLayout", "Stereo", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/LayerLayout Mono
::GlobalNamespace::OVRPlugin::LayerLayout GlobalNamespace::OVRPlugin::LayerLayout::_get_Mono() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerLayout::_get_Mono");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::LayerLayout>("", "OVRPlugin/LayerLayout", "Mono"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/LayerLayout Mono
void GlobalNamespace::OVRPlugin::LayerLayout::_set_Mono(::GlobalNamespace::OVRPlugin::LayerLayout value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerLayout::_set_Mono");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/LayerLayout", "Mono", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/LayerLayout DoubleWide
::GlobalNamespace::OVRPlugin::LayerLayout GlobalNamespace::OVRPlugin::LayerLayout::_get_DoubleWide() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerLayout::_get_DoubleWide");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::LayerLayout>("", "OVRPlugin/LayerLayout", "DoubleWide"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/LayerLayout DoubleWide
void GlobalNamespace::OVRPlugin::LayerLayout::_set_DoubleWide(::GlobalNamespace::OVRPlugin::LayerLayout value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerLayout::_set_DoubleWide");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/LayerLayout", "DoubleWide", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/LayerLayout Array
::GlobalNamespace::OVRPlugin::LayerLayout GlobalNamespace::OVRPlugin::LayerLayout::_get_Array() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerLayout::_get_Array");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::LayerLayout>("", "OVRPlugin/LayerLayout", "Array"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/LayerLayout Array
void GlobalNamespace::OVRPlugin::LayerLayout::_set_Array(::GlobalNamespace::OVRPlugin::LayerLayout value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerLayout::_set_Array");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/LayerLayout", "Array", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/LayerLayout EnumSize
::GlobalNamespace::OVRPlugin::LayerLayout GlobalNamespace::OVRPlugin::LayerLayout::_get_EnumSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerLayout::_get_EnumSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::LayerLayout>("", "OVRPlugin/LayerLayout", "EnumSize"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/LayerLayout EnumSize
void GlobalNamespace::OVRPlugin::LayerLayout::_set_EnumSize(::GlobalNamespace::OVRPlugin::LayerLayout value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerLayout::_set_EnumSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/LayerLayout", "EnumSize", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::LayerLayout::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerLayout::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/LayerFlags
#include "GlobalNamespace/OVRPlugin_LayerFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/LayerFlags Static
::GlobalNamespace::OVRPlugin::LayerFlags GlobalNamespace::OVRPlugin::LayerFlags::_get_Static() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::_get_Static");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::LayerFlags>("", "OVRPlugin/LayerFlags", "Static"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/LayerFlags Static
void GlobalNamespace::OVRPlugin::LayerFlags::_set_Static(::GlobalNamespace::OVRPlugin::LayerFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::_set_Static");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/LayerFlags", "Static", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/LayerFlags LoadingScreen
::GlobalNamespace::OVRPlugin::LayerFlags GlobalNamespace::OVRPlugin::LayerFlags::_get_LoadingScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::_get_LoadingScreen");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::LayerFlags>("", "OVRPlugin/LayerFlags", "LoadingScreen"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/LayerFlags LoadingScreen
void GlobalNamespace::OVRPlugin::LayerFlags::_set_LoadingScreen(::GlobalNamespace::OVRPlugin::LayerFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::_set_LoadingScreen");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/LayerFlags", "LoadingScreen", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/LayerFlags SymmetricFov
::GlobalNamespace::OVRPlugin::LayerFlags GlobalNamespace::OVRPlugin::LayerFlags::_get_SymmetricFov() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::_get_SymmetricFov");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::LayerFlags>("", "OVRPlugin/LayerFlags", "SymmetricFov"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/LayerFlags SymmetricFov
void GlobalNamespace::OVRPlugin::LayerFlags::_set_SymmetricFov(::GlobalNamespace::OVRPlugin::LayerFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::_set_SymmetricFov");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/LayerFlags", "SymmetricFov", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/LayerFlags TextureOriginAtBottomLeft
::GlobalNamespace::OVRPlugin::LayerFlags GlobalNamespace::OVRPlugin::LayerFlags::_get_TextureOriginAtBottomLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::_get_TextureOriginAtBottomLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::LayerFlags>("", "OVRPlugin/LayerFlags", "TextureOriginAtBottomLeft"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/LayerFlags TextureOriginAtBottomLeft
void GlobalNamespace::OVRPlugin::LayerFlags::_set_TextureOriginAtBottomLeft(::GlobalNamespace::OVRPlugin::LayerFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::_set_TextureOriginAtBottomLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/LayerFlags", "TextureOriginAtBottomLeft", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/LayerFlags ChromaticAberrationCorrection
::GlobalNamespace::OVRPlugin::LayerFlags GlobalNamespace::OVRPlugin::LayerFlags::_get_ChromaticAberrationCorrection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::_get_ChromaticAberrationCorrection");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::LayerFlags>("", "OVRPlugin/LayerFlags", "ChromaticAberrationCorrection"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/LayerFlags ChromaticAberrationCorrection
void GlobalNamespace::OVRPlugin::LayerFlags::_set_ChromaticAberrationCorrection(::GlobalNamespace::OVRPlugin::LayerFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::_set_ChromaticAberrationCorrection");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/LayerFlags", "ChromaticAberrationCorrection", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/LayerFlags NoAllocation
::GlobalNamespace::OVRPlugin::LayerFlags GlobalNamespace::OVRPlugin::LayerFlags::_get_NoAllocation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::_get_NoAllocation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::LayerFlags>("", "OVRPlugin/LayerFlags", "NoAllocation"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/LayerFlags NoAllocation
void GlobalNamespace::OVRPlugin::LayerFlags::_set_NoAllocation(::GlobalNamespace::OVRPlugin::LayerFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::_set_NoAllocation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/LayerFlags", "NoAllocation", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/LayerFlags ProtectedContent
::GlobalNamespace::OVRPlugin::LayerFlags GlobalNamespace::OVRPlugin::LayerFlags::_get_ProtectedContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::_get_ProtectedContent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::LayerFlags>("", "OVRPlugin/LayerFlags", "ProtectedContent"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/LayerFlags ProtectedContent
void GlobalNamespace::OVRPlugin::LayerFlags::_set_ProtectedContent(::GlobalNamespace::OVRPlugin::LayerFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::_set_ProtectedContent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/LayerFlags", "ProtectedContent", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/LayerFlags AndroidSurfaceSwapChain
::GlobalNamespace::OVRPlugin::LayerFlags GlobalNamespace::OVRPlugin::LayerFlags::_get_AndroidSurfaceSwapChain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::_get_AndroidSurfaceSwapChain");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::LayerFlags>("", "OVRPlugin/LayerFlags", "AndroidSurfaceSwapChain"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/LayerFlags AndroidSurfaceSwapChain
void GlobalNamespace::OVRPlugin::LayerFlags::_set_AndroidSurfaceSwapChain(::GlobalNamespace::OVRPlugin::LayerFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::_set_AndroidSurfaceSwapChain");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/LayerFlags", "AndroidSurfaceSwapChain", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/LayerFlags BicubicFiltering
::GlobalNamespace::OVRPlugin::LayerFlags GlobalNamespace::OVRPlugin::LayerFlags::_get_BicubicFiltering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::_get_BicubicFiltering");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::LayerFlags>("", "OVRPlugin/LayerFlags", "BicubicFiltering"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/LayerFlags BicubicFiltering
void GlobalNamespace::OVRPlugin::LayerFlags::_set_BicubicFiltering(::GlobalNamespace::OVRPlugin::LayerFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::_set_BicubicFiltering");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/LayerFlags", "BicubicFiltering", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::LayerFlags::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerFlags::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/LayerDesc
#include "GlobalNamespace/OVRPlugin_LayerDesc.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public OVRPlugin/OverlayShape Shape
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::OverlayShape& GlobalNamespace::OVRPlugin::LayerDesc::dyn_Shape() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerDesc::dyn_Shape");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Shape"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::OverlayShape*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRPlugin/LayerLayout Layout
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::LayerLayout& GlobalNamespace::OVRPlugin::LayerDesc::dyn_Layout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerDesc::dyn_Layout");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Layout"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::LayerLayout*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRPlugin/Sizei TextureSize
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Sizei& GlobalNamespace::OVRPlugin::LayerDesc::dyn_TextureSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerDesc::dyn_TextureSize");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TextureSize"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::Sizei*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 MipLevels
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::LayerDesc::dyn_MipLevels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerDesc::dyn_MipLevels");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MipLevels"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 SampleCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::LayerDesc::dyn_SampleCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerDesc::dyn_SampleCount");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SampleCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRPlugin/EyeTextureFormat Format
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::EyeTextureFormat& GlobalNamespace::OVRPlugin::LayerDesc::dyn_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerDesc::dyn_Format");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Format"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::EyeTextureFormat*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 LayerFlags
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::LayerDesc::dyn_LayerFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerDesc::dyn_LayerFlags");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LayerFlags"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRPlugin/Fovf[] Fov
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRPlugin::Fovf>& GlobalNamespace::OVRPlugin::LayerDesc::dyn_Fov() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerDesc::dyn_Fov");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Fov"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::OVRPlugin::Fovf>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRPlugin/Rectf[] VisibleRect
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRPlugin::Rectf>& GlobalNamespace::OVRPlugin::LayerDesc::dyn_VisibleRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerDesc::dyn_VisibleRect");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "VisibleRect"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::OVRPlugin::Rectf>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRPlugin/Sizei MaxViewportSize
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Sizei& GlobalNamespace::OVRPlugin::LayerDesc::dyn_MaxViewportSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerDesc::dyn_MaxViewportSize");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MaxViewportSize"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::Sizei*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRPlugin/EyeTextureFormat DepthFormat
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::EyeTextureFormat& GlobalNamespace::OVRPlugin::LayerDesc::dyn_DepthFormat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerDesc::dyn_DepthFormat");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DepthFormat"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::EyeTextureFormat*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRPlugin/EyeTextureFormat MotionVectorFormat
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::EyeTextureFormat& GlobalNamespace::OVRPlugin::LayerDesc::dyn_MotionVectorFormat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerDesc::dyn_MotionVectorFormat");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MotionVectorFormat"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::EyeTextureFormat*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRPlugin/EyeTextureFormat MotionVectorDepthFormat
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::EyeTextureFormat& GlobalNamespace::OVRPlugin::LayerDesc::dyn_MotionVectorDepthFormat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerDesc::dyn_MotionVectorDepthFormat");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MotionVectorDepthFormat"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::EyeTextureFormat*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRPlugin/Sizei MotionVectorTextureSize
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Sizei& GlobalNamespace::OVRPlugin::LayerDesc::dyn_MotionVectorTextureSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerDesc::dyn_MotionVectorTextureSize");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MotionVectorTextureSize"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::Sizei*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRPlugin/LayerDesc.ToString
::StringW GlobalNamespace::OVRPlugin::LayerDesc::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::LayerDesc::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/BlendFactor
#include "GlobalNamespace/OVRPlugin_BlendFactor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BlendFactor Zero
::GlobalNamespace::OVRPlugin::BlendFactor GlobalNamespace::OVRPlugin::BlendFactor::_get_Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BlendFactor::_get_Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BlendFactor>("", "OVRPlugin/BlendFactor", "Zero"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BlendFactor Zero
void GlobalNamespace::OVRPlugin::BlendFactor::_set_Zero(::GlobalNamespace::OVRPlugin::BlendFactor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BlendFactor::_set_Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BlendFactor", "Zero", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BlendFactor One
::GlobalNamespace::OVRPlugin::BlendFactor GlobalNamespace::OVRPlugin::BlendFactor::_get_One() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BlendFactor::_get_One");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BlendFactor>("", "OVRPlugin/BlendFactor", "One"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BlendFactor One
void GlobalNamespace::OVRPlugin::BlendFactor::_set_One(::GlobalNamespace::OVRPlugin::BlendFactor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BlendFactor::_set_One");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BlendFactor", "One", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BlendFactor SrcAlpha
::GlobalNamespace::OVRPlugin::BlendFactor GlobalNamespace::OVRPlugin::BlendFactor::_get_SrcAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BlendFactor::_get_SrcAlpha");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BlendFactor>("", "OVRPlugin/BlendFactor", "SrcAlpha"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BlendFactor SrcAlpha
void GlobalNamespace::OVRPlugin::BlendFactor::_set_SrcAlpha(::GlobalNamespace::OVRPlugin::BlendFactor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BlendFactor::_set_SrcAlpha");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BlendFactor", "SrcAlpha", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BlendFactor OneMinusSrcAlpha
::GlobalNamespace::OVRPlugin::BlendFactor GlobalNamespace::OVRPlugin::BlendFactor::_get_OneMinusSrcAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BlendFactor::_get_OneMinusSrcAlpha");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BlendFactor>("", "OVRPlugin/BlendFactor", "OneMinusSrcAlpha"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BlendFactor OneMinusSrcAlpha
void GlobalNamespace::OVRPlugin::BlendFactor::_set_OneMinusSrcAlpha(::GlobalNamespace::OVRPlugin::BlendFactor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BlendFactor::_set_OneMinusSrcAlpha");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BlendFactor", "OneMinusSrcAlpha", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BlendFactor DstAlpha
::GlobalNamespace::OVRPlugin::BlendFactor GlobalNamespace::OVRPlugin::BlendFactor::_get_DstAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BlendFactor::_get_DstAlpha");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BlendFactor>("", "OVRPlugin/BlendFactor", "DstAlpha"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BlendFactor DstAlpha
void GlobalNamespace::OVRPlugin::BlendFactor::_set_DstAlpha(::GlobalNamespace::OVRPlugin::BlendFactor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BlendFactor::_set_DstAlpha");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BlendFactor", "DstAlpha", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BlendFactor OneMinusDstAlpha
::GlobalNamespace::OVRPlugin::BlendFactor GlobalNamespace::OVRPlugin::BlendFactor::_get_OneMinusDstAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BlendFactor::_get_OneMinusDstAlpha");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BlendFactor>("", "OVRPlugin/BlendFactor", "OneMinusDstAlpha"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BlendFactor OneMinusDstAlpha
void GlobalNamespace::OVRPlugin::BlendFactor::_set_OneMinusDstAlpha(::GlobalNamespace::OVRPlugin::BlendFactor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BlendFactor::_set_OneMinusDstAlpha");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BlendFactor", "OneMinusDstAlpha", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::BlendFactor::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BlendFactor::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/TrackingConfidence
#include "GlobalNamespace/OVRPlugin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/TrackingConfidence Low
::GlobalNamespace::OVRPlugin::TrackingConfidence GlobalNamespace::OVRPlugin::TrackingConfidence::_get_Low() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::TrackingConfidence::_get_Low");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::TrackingConfidence>("", "OVRPlugin/TrackingConfidence", "Low"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/TrackingConfidence Low
void GlobalNamespace::OVRPlugin::TrackingConfidence::_set_Low(::GlobalNamespace::OVRPlugin::TrackingConfidence value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::TrackingConfidence::_set_Low");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/TrackingConfidence", "Low", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/TrackingConfidence High
::GlobalNamespace::OVRPlugin::TrackingConfidence GlobalNamespace::OVRPlugin::TrackingConfidence::_get_High() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::TrackingConfidence::_get_High");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::TrackingConfidence>("", "OVRPlugin/TrackingConfidence", "High"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/TrackingConfidence High
void GlobalNamespace::OVRPlugin::TrackingConfidence::_set_High(::GlobalNamespace::OVRPlugin::TrackingConfidence value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::TrackingConfidence::_set_High");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/TrackingConfidence", "High", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::TrackingConfidence::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::TrackingConfidence::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/Hand
#include "GlobalNamespace/OVRPlugin_Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Hand None
::GlobalNamespace::OVRPlugin::Hand GlobalNamespace::OVRPlugin::Hand::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Hand::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Hand>("", "OVRPlugin/Hand", "None"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Hand None
void GlobalNamespace::OVRPlugin::Hand::_set_None(::GlobalNamespace::OVRPlugin::Hand value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Hand::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Hand", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Hand HandLeft
::GlobalNamespace::OVRPlugin::Hand GlobalNamespace::OVRPlugin::Hand::_get_HandLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Hand::_get_HandLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Hand>("", "OVRPlugin/Hand", "HandLeft"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Hand HandLeft
void GlobalNamespace::OVRPlugin::Hand::_set_HandLeft(::GlobalNamespace::OVRPlugin::Hand value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Hand::_set_HandLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Hand", "HandLeft", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Hand HandRight
::GlobalNamespace::OVRPlugin::Hand GlobalNamespace::OVRPlugin::Hand::_get_HandRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Hand::_get_HandRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Hand>("", "OVRPlugin/Hand", "HandRight"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Hand HandRight
void GlobalNamespace::OVRPlugin::Hand::_set_HandRight(::GlobalNamespace::OVRPlugin::Hand value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Hand::_set_HandRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Hand", "HandRight", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::Hand::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Hand::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/HandStatus
#include "GlobalNamespace/OVRPlugin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/HandStatus HandTracked
::GlobalNamespace::OVRPlugin::HandStatus GlobalNamespace::OVRPlugin::HandStatus::_get_HandTracked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandStatus::_get_HandTracked");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::HandStatus>("", "OVRPlugin/HandStatus", "HandTracked"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/HandStatus HandTracked
void GlobalNamespace::OVRPlugin::HandStatus::_set_HandTracked(::GlobalNamespace::OVRPlugin::HandStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandStatus::_set_HandTracked");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/HandStatus", "HandTracked", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/HandStatus InputStateValid
::GlobalNamespace::OVRPlugin::HandStatus GlobalNamespace::OVRPlugin::HandStatus::_get_InputStateValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandStatus::_get_InputStateValid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::HandStatus>("", "OVRPlugin/HandStatus", "InputStateValid"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/HandStatus InputStateValid
void GlobalNamespace::OVRPlugin::HandStatus::_set_InputStateValid(::GlobalNamespace::OVRPlugin::HandStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandStatus::_set_InputStateValid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/HandStatus", "InputStateValid", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/HandStatus SystemGestureInProgress
::GlobalNamespace::OVRPlugin::HandStatus GlobalNamespace::OVRPlugin::HandStatus::_get_SystemGestureInProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandStatus::_get_SystemGestureInProgress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::HandStatus>("", "OVRPlugin/HandStatus", "SystemGestureInProgress"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/HandStatus SystemGestureInProgress
void GlobalNamespace::OVRPlugin::HandStatus::_set_SystemGestureInProgress(::GlobalNamespace::OVRPlugin::HandStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandStatus::_set_SystemGestureInProgress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/HandStatus", "SystemGestureInProgress", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/HandStatus DominantHand
::GlobalNamespace::OVRPlugin::HandStatus GlobalNamespace::OVRPlugin::HandStatus::_get_DominantHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandStatus::_get_DominantHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::HandStatus>("", "OVRPlugin/HandStatus", "DominantHand"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/HandStatus DominantHand
void GlobalNamespace::OVRPlugin::HandStatus::_set_DominantHand(::GlobalNamespace::OVRPlugin::HandStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandStatus::_set_DominantHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/HandStatus", "DominantHand", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/HandStatus MenuPressed
::GlobalNamespace::OVRPlugin::HandStatus GlobalNamespace::OVRPlugin::HandStatus::_get_MenuPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandStatus::_get_MenuPressed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::HandStatus>("", "OVRPlugin/HandStatus", "MenuPressed"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/HandStatus MenuPressed
void GlobalNamespace::OVRPlugin::HandStatus::_set_MenuPressed(::GlobalNamespace::OVRPlugin::HandStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandStatus::_set_MenuPressed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/HandStatus", "MenuPressed", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::HandStatus::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandStatus::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/BoneId
#include "GlobalNamespace/OVRPlugin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Invalid
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Invalid"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Invalid
void GlobalNamespace::OVRPlugin::BoneId::_set_Invalid(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Invalid", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_Start
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Start");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_Start"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_Start
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Start(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Start");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_Start", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_WristRoot
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_WristRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_WristRoot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_WristRoot"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_WristRoot
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_WristRoot(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_WristRoot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_WristRoot", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_ForearmStub
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_ForearmStub() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_ForearmStub");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_ForearmStub"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_ForearmStub
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_ForearmStub(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_ForearmStub");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_ForearmStub", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_Thumb0
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Thumb0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Thumb0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_Thumb0"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_Thumb0
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Thumb0(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Thumb0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_Thumb0", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_Thumb1
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Thumb1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Thumb1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_Thumb1"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_Thumb1
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Thumb1(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Thumb1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_Thumb1", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_Thumb2
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Thumb2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Thumb2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_Thumb2"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_Thumb2
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Thumb2(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Thumb2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_Thumb2", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_Thumb3
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Thumb3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Thumb3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_Thumb3"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_Thumb3
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Thumb3(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Thumb3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_Thumb3", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_Index1
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Index1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Index1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_Index1"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_Index1
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Index1(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Index1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_Index1", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_Index2
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Index2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Index2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_Index2"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_Index2
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Index2(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Index2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_Index2", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_Index3
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Index3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Index3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_Index3"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_Index3
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Index3(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Index3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_Index3", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_Middle1
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Middle1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Middle1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_Middle1"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_Middle1
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Middle1(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Middle1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_Middle1", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_Middle2
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Middle2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Middle2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_Middle2"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_Middle2
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Middle2(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Middle2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_Middle2", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_Middle3
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Middle3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Middle3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_Middle3"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_Middle3
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Middle3(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Middle3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_Middle3", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_Ring1
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Ring1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Ring1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_Ring1"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_Ring1
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Ring1(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Ring1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_Ring1", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_Ring2
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Ring2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Ring2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_Ring2"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_Ring2
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Ring2(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Ring2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_Ring2", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_Ring3
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Ring3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Ring3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_Ring3"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_Ring3
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Ring3(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Ring3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_Ring3", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_Pinky0
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Pinky0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Pinky0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_Pinky0"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_Pinky0
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Pinky0(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Pinky0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_Pinky0", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_Pinky1
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Pinky1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Pinky1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_Pinky1"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_Pinky1
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Pinky1(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Pinky1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_Pinky1", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_Pinky2
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Pinky2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Pinky2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_Pinky2"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_Pinky2
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Pinky2(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Pinky2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_Pinky2", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_Pinky3
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Pinky3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_Pinky3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_Pinky3"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_Pinky3
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Pinky3(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_Pinky3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_Pinky3", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_MaxSkinnable
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_MaxSkinnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_MaxSkinnable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_MaxSkinnable"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_MaxSkinnable
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_MaxSkinnable(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_MaxSkinnable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_MaxSkinnable", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_ThumbTip
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_ThumbTip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_ThumbTip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_ThumbTip"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_ThumbTip
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_ThumbTip(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_ThumbTip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_ThumbTip", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_IndexTip
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_IndexTip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_IndexTip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_IndexTip"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_IndexTip
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_IndexTip(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_IndexTip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_IndexTip", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_MiddleTip
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_MiddleTip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_MiddleTip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_MiddleTip"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_MiddleTip
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_MiddleTip(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_MiddleTip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_MiddleTip", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_RingTip
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_RingTip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_RingTip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_RingTip"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_RingTip
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_RingTip(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_RingTip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_RingTip", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_PinkyTip
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_PinkyTip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_PinkyTip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_PinkyTip"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_PinkyTip
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_PinkyTip(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_PinkyTip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_PinkyTip", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Hand_End
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Hand_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Hand_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Hand_End"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Hand_End
void GlobalNamespace::OVRPlugin::BoneId::_set_Hand_End(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Hand_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Hand_End", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/BoneId Max
::GlobalNamespace::OVRPlugin::BoneId GlobalNamespace::OVRPlugin::BoneId::_get_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_get_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::BoneId>("", "OVRPlugin/BoneId", "Max"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/BoneId Max
void GlobalNamespace::OVRPlugin::BoneId::_set_Max(::GlobalNamespace::OVRPlugin::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::_set_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/BoneId", "Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::BoneId::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::BoneId::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/HandFinger
#include "GlobalNamespace/OVRPlugin_HandFinger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/HandFinger Thumb
::GlobalNamespace::OVRPlugin::HandFinger GlobalNamespace::OVRPlugin::HandFinger::_get_Thumb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFinger::_get_Thumb");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::HandFinger>("", "OVRPlugin/HandFinger", "Thumb"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/HandFinger Thumb
void GlobalNamespace::OVRPlugin::HandFinger::_set_Thumb(::GlobalNamespace::OVRPlugin::HandFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFinger::_set_Thumb");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/HandFinger", "Thumb", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/HandFinger Index
::GlobalNamespace::OVRPlugin::HandFinger GlobalNamespace::OVRPlugin::HandFinger::_get_Index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFinger::_get_Index");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::HandFinger>("", "OVRPlugin/HandFinger", "Index"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/HandFinger Index
void GlobalNamespace::OVRPlugin::HandFinger::_set_Index(::GlobalNamespace::OVRPlugin::HandFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFinger::_set_Index");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/HandFinger", "Index", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/HandFinger Middle
::GlobalNamespace::OVRPlugin::HandFinger GlobalNamespace::OVRPlugin::HandFinger::_get_Middle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFinger::_get_Middle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::HandFinger>("", "OVRPlugin/HandFinger", "Middle"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/HandFinger Middle
void GlobalNamespace::OVRPlugin::HandFinger::_set_Middle(::GlobalNamespace::OVRPlugin::HandFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFinger::_set_Middle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/HandFinger", "Middle", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/HandFinger Ring
::GlobalNamespace::OVRPlugin::HandFinger GlobalNamespace::OVRPlugin::HandFinger::_get_Ring() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFinger::_get_Ring");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::HandFinger>("", "OVRPlugin/HandFinger", "Ring"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/HandFinger Ring
void GlobalNamespace::OVRPlugin::HandFinger::_set_Ring(::GlobalNamespace::OVRPlugin::HandFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFinger::_set_Ring");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/HandFinger", "Ring", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/HandFinger Pinky
::GlobalNamespace::OVRPlugin::HandFinger GlobalNamespace::OVRPlugin::HandFinger::_get_Pinky() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFinger::_get_Pinky");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::HandFinger>("", "OVRPlugin/HandFinger", "Pinky"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/HandFinger Pinky
void GlobalNamespace::OVRPlugin::HandFinger::_set_Pinky(::GlobalNamespace::OVRPlugin::HandFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFinger::_set_Pinky");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/HandFinger", "Pinky", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/HandFinger Max
::GlobalNamespace::OVRPlugin::HandFinger GlobalNamespace::OVRPlugin::HandFinger::_get_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFinger::_get_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::HandFinger>("", "OVRPlugin/HandFinger", "Max"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/HandFinger Max
void GlobalNamespace::OVRPlugin::HandFinger::_set_Max(::GlobalNamespace::OVRPlugin::HandFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFinger::_set_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/HandFinger", "Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::HandFinger::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFinger::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/HandFingerPinch
#include "GlobalNamespace/OVRPlugin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/HandFingerPinch Thumb
::GlobalNamespace::OVRPlugin::HandFingerPinch GlobalNamespace::OVRPlugin::HandFingerPinch::_get_Thumb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFingerPinch::_get_Thumb");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::HandFingerPinch>("", "OVRPlugin/HandFingerPinch", "Thumb"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/HandFingerPinch Thumb
void GlobalNamespace::OVRPlugin::HandFingerPinch::_set_Thumb(::GlobalNamespace::OVRPlugin::HandFingerPinch value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFingerPinch::_set_Thumb");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/HandFingerPinch", "Thumb", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/HandFingerPinch Index
::GlobalNamespace::OVRPlugin::HandFingerPinch GlobalNamespace::OVRPlugin::HandFingerPinch::_get_Index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFingerPinch::_get_Index");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::HandFingerPinch>("", "OVRPlugin/HandFingerPinch", "Index"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/HandFingerPinch Index
void GlobalNamespace::OVRPlugin::HandFingerPinch::_set_Index(::GlobalNamespace::OVRPlugin::HandFingerPinch value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFingerPinch::_set_Index");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/HandFingerPinch", "Index", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/HandFingerPinch Middle
::GlobalNamespace::OVRPlugin::HandFingerPinch GlobalNamespace::OVRPlugin::HandFingerPinch::_get_Middle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFingerPinch::_get_Middle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::HandFingerPinch>("", "OVRPlugin/HandFingerPinch", "Middle"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/HandFingerPinch Middle
void GlobalNamespace::OVRPlugin::HandFingerPinch::_set_Middle(::GlobalNamespace::OVRPlugin::HandFingerPinch value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFingerPinch::_set_Middle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/HandFingerPinch", "Middle", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/HandFingerPinch Ring
::GlobalNamespace::OVRPlugin::HandFingerPinch GlobalNamespace::OVRPlugin::HandFingerPinch::_get_Ring() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFingerPinch::_get_Ring");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::HandFingerPinch>("", "OVRPlugin/HandFingerPinch", "Ring"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/HandFingerPinch Ring
void GlobalNamespace::OVRPlugin::HandFingerPinch::_set_Ring(::GlobalNamespace::OVRPlugin::HandFingerPinch value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFingerPinch::_set_Ring");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/HandFingerPinch", "Ring", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/HandFingerPinch Pinky
::GlobalNamespace::OVRPlugin::HandFingerPinch GlobalNamespace::OVRPlugin::HandFingerPinch::_get_Pinky() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFingerPinch::_get_Pinky");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::HandFingerPinch>("", "OVRPlugin/HandFingerPinch", "Pinky"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/HandFingerPinch Pinky
void GlobalNamespace::OVRPlugin::HandFingerPinch::_set_Pinky(::GlobalNamespace::OVRPlugin::HandFingerPinch value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFingerPinch::_set_Pinky");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/HandFingerPinch", "Pinky", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::HandFingerPinch::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::HandFingerPinch::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/SkeletonConstants
#include "GlobalNamespace/OVRPlugin_SkeletonConstants.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/SkeletonConstants MaxHandBones
::GlobalNamespace::OVRPlugin::SkeletonConstants GlobalNamespace::OVRPlugin::SkeletonConstants::_get_MaxHandBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::SkeletonConstants::_get_MaxHandBones");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::SkeletonConstants>("", "OVRPlugin/SkeletonConstants", "MaxHandBones"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/SkeletonConstants MaxHandBones
void GlobalNamespace::OVRPlugin::SkeletonConstants::_set_MaxHandBones(::GlobalNamespace::OVRPlugin::SkeletonConstants value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::SkeletonConstants::_set_MaxHandBones");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/SkeletonConstants", "MaxHandBones", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/SkeletonConstants MaxBones
::GlobalNamespace::OVRPlugin::SkeletonConstants GlobalNamespace::OVRPlugin::SkeletonConstants::_get_MaxBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::SkeletonConstants::_get_MaxBones");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::SkeletonConstants>("", "OVRPlugin/SkeletonConstants", "MaxBones"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/SkeletonConstants MaxBones
void GlobalNamespace::OVRPlugin::SkeletonConstants::_set_MaxBones(::GlobalNamespace::OVRPlugin::SkeletonConstants value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::SkeletonConstants::_set_MaxBones");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/SkeletonConstants", "MaxBones", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/SkeletonConstants MaxBoneCapsules
::GlobalNamespace::OVRPlugin::SkeletonConstants GlobalNamespace::OVRPlugin::SkeletonConstants::_get_MaxBoneCapsules() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::SkeletonConstants::_get_MaxBoneCapsules");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::SkeletonConstants>("", "OVRPlugin/SkeletonConstants", "MaxBoneCapsules"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/SkeletonConstants MaxBoneCapsules
void GlobalNamespace::OVRPlugin::SkeletonConstants::_set_MaxBoneCapsules(::GlobalNamespace::OVRPlugin::SkeletonConstants value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::SkeletonConstants::_set_MaxBoneCapsules");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/SkeletonConstants", "MaxBoneCapsules", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::SkeletonConstants::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::SkeletonConstants::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/SkeletonType
#include "GlobalNamespace/OVRPlugin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/SkeletonType None
::GlobalNamespace::OVRPlugin::SkeletonType GlobalNamespace::OVRPlugin::SkeletonType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::SkeletonType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::SkeletonType>("", "OVRPlugin/SkeletonType", "None"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/SkeletonType None
void GlobalNamespace::OVRPlugin::SkeletonType::_set_None(::GlobalNamespace::OVRPlugin::SkeletonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::SkeletonType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/SkeletonType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/SkeletonType HandLeft
::GlobalNamespace::OVRPlugin::SkeletonType GlobalNamespace::OVRPlugin::SkeletonType::_get_HandLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::SkeletonType::_get_HandLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::SkeletonType>("", "OVRPlugin/SkeletonType", "HandLeft"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/SkeletonType HandLeft
void GlobalNamespace::OVRPlugin::SkeletonType::_set_HandLeft(::GlobalNamespace::OVRPlugin::SkeletonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::SkeletonType::_set_HandLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/SkeletonType", "HandLeft", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/SkeletonType HandRight
::GlobalNamespace::OVRPlugin::SkeletonType GlobalNamespace::OVRPlugin::SkeletonType::_get_HandRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::SkeletonType::_get_HandRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::SkeletonType>("", "OVRPlugin/SkeletonType", "HandRight"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/SkeletonType HandRight
void GlobalNamespace::OVRPlugin::SkeletonType::_set_HandRight(::GlobalNamespace::OVRPlugin::SkeletonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::SkeletonType::_set_HandRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/SkeletonType", "HandRight", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::SkeletonType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::SkeletonType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/MeshConstants
#include "GlobalNamespace/OVRPlugin_MeshConstants.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/MeshConstants MaxVertices
::GlobalNamespace::OVRPlugin::MeshConstants GlobalNamespace::OVRPlugin::MeshConstants::_get_MaxVertices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::MeshConstants::_get_MaxVertices");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::MeshConstants>("", "OVRPlugin/MeshConstants", "MaxVertices"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/MeshConstants MaxVertices
void GlobalNamespace::OVRPlugin::MeshConstants::_set_MaxVertices(::GlobalNamespace::OVRPlugin::MeshConstants value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::MeshConstants::_set_MaxVertices");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/MeshConstants", "MaxVertices", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/MeshConstants MaxIndices
::GlobalNamespace::OVRPlugin::MeshConstants GlobalNamespace::OVRPlugin::MeshConstants::_get_MaxIndices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::MeshConstants::_get_MaxIndices");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::MeshConstants>("", "OVRPlugin/MeshConstants", "MaxIndices"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/MeshConstants MaxIndices
void GlobalNamespace::OVRPlugin::MeshConstants::_set_MaxIndices(::GlobalNamespace::OVRPlugin::MeshConstants value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::MeshConstants::_set_MaxIndices");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/MeshConstants", "MaxIndices", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::MeshConstants::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::MeshConstants::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/MeshType
#include "GlobalNamespace/OVRPlugin_MeshType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/MeshType None
::GlobalNamespace::OVRPlugin::MeshType GlobalNamespace::OVRPlugin::MeshType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::MeshType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::MeshType>("", "OVRPlugin/MeshType", "None"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/MeshType None
void GlobalNamespace::OVRPlugin::MeshType::_set_None(::GlobalNamespace::OVRPlugin::MeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::MeshType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/MeshType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/MeshType HandLeft
::GlobalNamespace::OVRPlugin::MeshType GlobalNamespace::OVRPlugin::MeshType::_get_HandLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::MeshType::_get_HandLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::MeshType>("", "OVRPlugin/MeshType", "HandLeft"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/MeshType HandLeft
void GlobalNamespace::OVRPlugin::MeshType::_set_HandLeft(::GlobalNamespace::OVRPlugin::MeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::MeshType::_set_HandLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/MeshType", "HandLeft", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/MeshType HandRight
::GlobalNamespace::OVRPlugin::MeshType GlobalNamespace::OVRPlugin::MeshType::_get_HandRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::MeshType::_get_HandRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::MeshType>("", "OVRPlugin/MeshType", "HandRight"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/MeshType HandRight
void GlobalNamespace::OVRPlugin::MeshType::_set_HandRight(::GlobalNamespace::OVRPlugin::MeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::MeshType::_set_HandRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/MeshType", "HandRight", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::MeshType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::MeshType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/Mesh
#include "GlobalNamespace/OVRPlugin_Mesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public OVRPlugin/MeshType Type
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::MeshType& GlobalNamespace::OVRPlugin::Mesh::dyn_Type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Mesh::dyn_Type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Type"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::MeshType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 NumVertices
[[deprecated("Use field access instead!")]] uint& GlobalNamespace::OVRPlugin::Mesh::dyn_NumVertices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Mesh::dyn_NumVertices");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NumVertices"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 NumIndices
[[deprecated("Use field access instead!")]] uint& GlobalNamespace::OVRPlugin::Mesh::dyn_NumIndices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Mesh::dyn_NumIndices");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NumIndices"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRPlugin/Vector3f[] VertexPositions
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRPlugin::Vector3f>& GlobalNamespace::OVRPlugin::Mesh::dyn_VertexPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Mesh::dyn_VertexPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "VertexPositions"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::OVRPlugin::Vector3f>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int16[] Indices
[[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& GlobalNamespace::OVRPlugin::Mesh::dyn_Indices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Mesh::dyn_Indices");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Indices"))->offset;
  return *reinterpret_cast<::ArrayW<int16_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRPlugin/Vector3f[] VertexNormals
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRPlugin::Vector3f>& GlobalNamespace::OVRPlugin::Mesh::dyn_VertexNormals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Mesh::dyn_VertexNormals");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "VertexNormals"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::OVRPlugin::Vector3f>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRPlugin/Vector2f[] VertexUV0
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRPlugin::Vector2f>& GlobalNamespace::OVRPlugin::Mesh::dyn_VertexUV0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Mesh::dyn_VertexUV0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "VertexUV0"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::OVRPlugin::Vector2f>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRPlugin/Vector4s[] BlendIndices
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRPlugin::Vector4s>& GlobalNamespace::OVRPlugin::Mesh::dyn_BlendIndices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Mesh::dyn_BlendIndices");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BlendIndices"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::OVRPlugin::Vector4s>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRPlugin/Vector4f[] BlendWeights
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRPlugin::Vector4f>& GlobalNamespace::OVRPlugin::Mesh::dyn_BlendWeights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Mesh::dyn_BlendWeights");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BlendWeights"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::OVRPlugin::Vector4f>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/ColorSpace
#include "GlobalNamespace/OVRPlugin_ColorSpace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/ColorSpace Unknown
::GlobalNamespace::OVRPlugin::ColorSpace GlobalNamespace::OVRPlugin::ColorSpace::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::ColorSpace>("", "OVRPlugin/ColorSpace", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/ColorSpace Unknown
void GlobalNamespace::OVRPlugin::ColorSpace::_set_Unknown(::GlobalNamespace::OVRPlugin::ColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/ColorSpace", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/ColorSpace Unmanaged
::GlobalNamespace::OVRPlugin::ColorSpace GlobalNamespace::OVRPlugin::ColorSpace::_get_Unmanaged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::_get_Unmanaged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::ColorSpace>("", "OVRPlugin/ColorSpace", "Unmanaged"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/ColorSpace Unmanaged
void GlobalNamespace::OVRPlugin::ColorSpace::_set_Unmanaged(::GlobalNamespace::OVRPlugin::ColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::_set_Unmanaged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/ColorSpace", "Unmanaged", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/ColorSpace Rec_2020
::GlobalNamespace::OVRPlugin::ColorSpace GlobalNamespace::OVRPlugin::ColorSpace::_get_Rec_2020() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::_get_Rec_2020");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::ColorSpace>("", "OVRPlugin/ColorSpace", "Rec_2020"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/ColorSpace Rec_2020
void GlobalNamespace::OVRPlugin::ColorSpace::_set_Rec_2020(::GlobalNamespace::OVRPlugin::ColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::_set_Rec_2020");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/ColorSpace", "Rec_2020", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/ColorSpace Rec_709
::GlobalNamespace::OVRPlugin::ColorSpace GlobalNamespace::OVRPlugin::ColorSpace::_get_Rec_709() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::_get_Rec_709");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::ColorSpace>("", "OVRPlugin/ColorSpace", "Rec_709"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/ColorSpace Rec_709
void GlobalNamespace::OVRPlugin::ColorSpace::_set_Rec_709(::GlobalNamespace::OVRPlugin::ColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::_set_Rec_709");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/ColorSpace", "Rec_709", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/ColorSpace Rift_CV1
::GlobalNamespace::OVRPlugin::ColorSpace GlobalNamespace::OVRPlugin::ColorSpace::_get_Rift_CV1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::_get_Rift_CV1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::ColorSpace>("", "OVRPlugin/ColorSpace", "Rift_CV1"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/ColorSpace Rift_CV1
void GlobalNamespace::OVRPlugin::ColorSpace::_set_Rift_CV1(::GlobalNamespace::OVRPlugin::ColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::_set_Rift_CV1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/ColorSpace", "Rift_CV1", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/ColorSpace Rift_S
::GlobalNamespace::OVRPlugin::ColorSpace GlobalNamespace::OVRPlugin::ColorSpace::_get_Rift_S() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::_get_Rift_S");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::ColorSpace>("", "OVRPlugin/ColorSpace", "Rift_S"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/ColorSpace Rift_S
void GlobalNamespace::OVRPlugin::ColorSpace::_set_Rift_S(::GlobalNamespace::OVRPlugin::ColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::_set_Rift_S");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/ColorSpace", "Rift_S", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/ColorSpace Quest
::GlobalNamespace::OVRPlugin::ColorSpace GlobalNamespace::OVRPlugin::ColorSpace::_get_Quest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::_get_Quest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::ColorSpace>("", "OVRPlugin/ColorSpace", "Quest"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/ColorSpace Quest
void GlobalNamespace::OVRPlugin::ColorSpace::_set_Quest(::GlobalNamespace::OVRPlugin::ColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::_set_Quest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/ColorSpace", "Quest", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/ColorSpace P3
::GlobalNamespace::OVRPlugin::ColorSpace GlobalNamespace::OVRPlugin::ColorSpace::_get_P3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::_get_P3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::ColorSpace>("", "OVRPlugin/ColorSpace", "P3"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/ColorSpace P3
void GlobalNamespace::OVRPlugin::ColorSpace::_set_P3(::GlobalNamespace::OVRPlugin::ColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::_set_P3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/ColorSpace", "P3", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/ColorSpace Adobe_RGB
::GlobalNamespace::OVRPlugin::ColorSpace GlobalNamespace::OVRPlugin::ColorSpace::_get_Adobe_RGB() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::_get_Adobe_RGB");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::ColorSpace>("", "OVRPlugin/ColorSpace", "Adobe_RGB"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/ColorSpace Adobe_RGB
void GlobalNamespace::OVRPlugin::ColorSpace::_set_Adobe_RGB(::GlobalNamespace::OVRPlugin::ColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::_set_Adobe_RGB");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/ColorSpace", "Adobe_RGB", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::ColorSpace::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::ColorSpace::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/EventType
#include "GlobalNamespace/OVRPlugin_EventType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/EventType Unknown
::GlobalNamespace::OVRPlugin::EventType GlobalNamespace::OVRPlugin::EventType::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::EventType::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::EventType>("", "OVRPlugin/EventType", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/EventType Unknown
void GlobalNamespace::OVRPlugin::EventType::_set_Unknown(::GlobalNamespace::OVRPlugin::EventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::EventType::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/EventType", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/EventType DisplayRefreshRateChanged
::GlobalNamespace::OVRPlugin::EventType GlobalNamespace::OVRPlugin::EventType::_get_DisplayRefreshRateChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::EventType::_get_DisplayRefreshRateChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::EventType>("", "OVRPlugin/EventType", "DisplayRefreshRateChanged"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/EventType DisplayRefreshRateChanged
void GlobalNamespace::OVRPlugin::EventType::_set_DisplayRefreshRateChanged(::GlobalNamespace::OVRPlugin::EventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::EventType::_set_DisplayRefreshRateChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/EventType", "DisplayRefreshRateChanged", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::EventType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::EventType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/InsightPassthroughColorMapType
#include "GlobalNamespace/OVRPlugin_InsightPassthroughColorMapType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/InsightPassthroughColorMapType None
::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType>("", "OVRPlugin/InsightPassthroughColorMapType", "None"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/InsightPassthroughColorMapType None
void GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType::_set_None(::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/InsightPassthroughColorMapType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/InsightPassthroughColorMapType MonoToRgba
::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType::_get_MonoToRgba() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType::_get_MonoToRgba");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType>("", "OVRPlugin/InsightPassthroughColorMapType", "MonoToRgba"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/InsightPassthroughColorMapType MonoToRgba
void GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType::_set_MonoToRgba(::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType::_set_MonoToRgba");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/InsightPassthroughColorMapType", "MonoToRgba", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/InsightPassthroughColorMapType MonoToMono
::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType::_get_MonoToMono() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType::_get_MonoToMono");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType>("", "OVRPlugin/InsightPassthroughColorMapType", "MonoToMono"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/InsightPassthroughColorMapType MonoToMono
void GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType::_set_MonoToMono(::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType::_set_MonoToMono");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/InsightPassthroughColorMapType", "MonoToMono", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/InsightPassthroughStyleFlags
#include "GlobalNamespace/OVRPlugin_InsightPassthroughStyleFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/InsightPassthroughStyleFlags HasTextureOpacityFactor
::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags::_get_HasTextureOpacityFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags::_get_HasTextureOpacityFactor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags>("", "OVRPlugin/InsightPassthroughStyleFlags", "HasTextureOpacityFactor"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/InsightPassthroughStyleFlags HasTextureOpacityFactor
void GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags::_set_HasTextureOpacityFactor(::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags::_set_HasTextureOpacityFactor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/InsightPassthroughStyleFlags", "HasTextureOpacityFactor", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/InsightPassthroughStyleFlags HasEdgeColor
::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags::_get_HasEdgeColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags::_get_HasEdgeColor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags>("", "OVRPlugin/InsightPassthroughStyleFlags", "HasEdgeColor"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/InsightPassthroughStyleFlags HasEdgeColor
void GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags::_set_HasEdgeColor(::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags::_set_HasEdgeColor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/InsightPassthroughStyleFlags", "HasEdgeColor", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/InsightPassthroughStyleFlags HasTextureColorMap
::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags::_get_HasTextureColorMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags::_get_HasTextureColorMap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags>("", "OVRPlugin/InsightPassthroughStyleFlags", "HasTextureColorMap"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/InsightPassthroughStyleFlags HasTextureColorMap
void GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags::_set_HasTextureColorMap(::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags::_set_HasTextureColorMap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/InsightPassthroughStyleFlags", "HasTextureColorMap", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/Media
#include "GlobalNamespace/OVRPlugin_Media.hpp"
// Including type: OVRPlugin/Media/MrcActivationMode
#include "GlobalNamespace/OVRPlugin_Media_MrcActivationMode.hpp"
// Including type: OVRPlugin/Media/PlatformCameraMode
#include "GlobalNamespace/OVRPlugin_Media_PlatformCameraMode.hpp"
// Including type: OVRPlugin/Media/InputVideoBufferType
#include "GlobalNamespace/OVRPlugin_Media_InputVideoBufferType.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Texture2D cachedTexture
::UnityEngine::Texture2D* GlobalNamespace::OVRPlugin::Media::_get_cachedTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::_get_cachedTexture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Texture2D*>("", "OVRPlugin/Media", "cachedTexture"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Texture2D cachedTexture
void GlobalNamespace::OVRPlugin::Media::_set_cachedTexture(::UnityEngine::Texture2D* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::_set_cachedTexture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Media", "cachedTexture", value));
}
// Autogenerated method: OVRPlugin/Media..cctor
void GlobalNamespace::OVRPlugin::Media::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/Media.Initialize
bool GlobalNamespace::OVRPlugin::Media::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/Media.Shutdown
bool GlobalNamespace::OVRPlugin::Media::Shutdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::Shutdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "Shutdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/Media.GetInitialized
bool GlobalNamespace::OVRPlugin::Media::GetInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::GetInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "GetInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/Media.Update
bool GlobalNamespace::OVRPlugin::Media::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/Media.GetMrcActivationMode
::GlobalNamespace::OVRPlugin::Media::MrcActivationMode GlobalNamespace::OVRPlugin::Media::GetMrcActivationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::GetMrcActivationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "GetMrcActivationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Media::MrcActivationMode, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/Media.SetMrcActivationMode
bool GlobalNamespace::OVRPlugin::Media::SetMrcActivationMode(::GlobalNamespace::OVRPlugin::Media::MrcActivationMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::SetMrcActivationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "SetMrcActivationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, mode);
}
// Autogenerated method: OVRPlugin/Media.SetPlatformInitialized
bool GlobalNamespace::OVRPlugin::Media::SetPlatformInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::SetPlatformInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "SetPlatformInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/Media.GetPlatformCameraMode
::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode GlobalNamespace::OVRPlugin::Media::GetPlatformCameraMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::GetPlatformCameraMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "GetPlatformCameraMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/Media.SetPlatformCameraMode
bool GlobalNamespace::OVRPlugin::Media::SetPlatformCameraMode(::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::SetPlatformCameraMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "SetPlatformCameraMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, mode);
}
// Autogenerated method: OVRPlugin/Media.IsMrcEnabled
bool GlobalNamespace::OVRPlugin::Media::IsMrcEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::IsMrcEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "IsMrcEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/Media.IsMrcActivated
bool GlobalNamespace::OVRPlugin::Media::IsMrcActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::IsMrcActivated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "IsMrcActivated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/Media.UseMrcDebugCamera
bool GlobalNamespace::OVRPlugin::Media::UseMrcDebugCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::UseMrcDebugCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "UseMrcDebugCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/Media.SetMrcInputVideoBufferType
bool GlobalNamespace::OVRPlugin::Media::SetMrcInputVideoBufferType(::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType videoBufferType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::SetMrcInputVideoBufferType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "SetMrcInputVideoBufferType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(videoBufferType)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, videoBufferType);
}
// Autogenerated method: OVRPlugin/Media.GetMrcInputVideoBufferType
::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType GlobalNamespace::OVRPlugin::Media::GetMrcInputVideoBufferType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::GetMrcInputVideoBufferType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "GetMrcInputVideoBufferType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/Media.SetMrcFrameSize
bool GlobalNamespace::OVRPlugin::Media::SetMrcFrameSize(int frameWidth, int frameHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::SetMrcFrameSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "SetMrcFrameSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frameWidth), ::il2cpp_utils::ExtractType(frameHeight)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, frameWidth, frameHeight);
}
// Autogenerated method: OVRPlugin/Media.GetMrcFrameSize
void GlobalNamespace::OVRPlugin::Media::GetMrcFrameSize(ByRef<int> frameWidth, ByRef<int> frameHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::GetMrcFrameSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "GetMrcFrameSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(frameWidth), byref(frameHeight));
}
// Autogenerated method: OVRPlugin/Media.SetMrcAudioSampleRate
bool GlobalNamespace::OVRPlugin::Media::SetMrcAudioSampleRate(int sampleRate) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::SetMrcAudioSampleRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "SetMrcAudioSampleRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sampleRate)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sampleRate);
}
// Autogenerated method: OVRPlugin/Media.GetMrcAudioSampleRate
int GlobalNamespace::OVRPlugin::Media::GetMrcAudioSampleRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::GetMrcAudioSampleRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "GetMrcAudioSampleRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/Media.SetMrcFrameImageFlipped
bool GlobalNamespace::OVRPlugin::Media::SetMrcFrameImageFlipped(bool imageFlipped) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::SetMrcFrameImageFlipped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "SetMrcFrameImageFlipped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(imageFlipped)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, imageFlipped);
}
// Autogenerated method: OVRPlugin/Media.GetMrcFrameImageFlipped
bool GlobalNamespace::OVRPlugin::Media::GetMrcFrameImageFlipped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::GetMrcFrameImageFlipped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "GetMrcFrameImageFlipped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/Media.EncodeMrcFrame
bool GlobalNamespace::OVRPlugin::Media::EncodeMrcFrame(::System::IntPtr textureHandle, ::System::IntPtr fgTextureHandle, ::ArrayW<float> audioData, int audioFrames, int audioChannels, double timestamp, double poseTime, ByRef<int> outSyncId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::EncodeMrcFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "EncodeMrcFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textureHandle), ::il2cpp_utils::ExtractType(fgTextureHandle), ::il2cpp_utils::ExtractType(audioData), ::il2cpp_utils::ExtractType(audioFrames), ::il2cpp_utils::ExtractType(audioChannels), ::il2cpp_utils::ExtractType(timestamp), ::il2cpp_utils::ExtractType(poseTime), ::il2cpp_utils::ExtractType(outSyncId)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, textureHandle, fgTextureHandle, audioData, audioFrames, audioChannels, timestamp, poseTime, byref(outSyncId));
}
// Autogenerated method: OVRPlugin/Media.EncodeMrcFrame
bool GlobalNamespace::OVRPlugin::Media::EncodeMrcFrame(::UnityEngine::RenderTexture* frame, ::ArrayW<float> audioData, int audioFrames, int audioChannels, double timestamp, double poseTime, ByRef<int> outSyncId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::EncodeMrcFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "EncodeMrcFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frame), ::il2cpp_utils::ExtractType(audioData), ::il2cpp_utils::ExtractType(audioFrames), ::il2cpp_utils::ExtractType(audioChannels), ::il2cpp_utils::ExtractType(timestamp), ::il2cpp_utils::ExtractType(poseTime), ::il2cpp_utils::ExtractType(outSyncId)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, frame, audioData, audioFrames, audioChannels, timestamp, poseTime, byref(outSyncId));
}
// Autogenerated method: OVRPlugin/Media.SyncMrcFrame
bool GlobalNamespace::OVRPlugin::Media::SyncMrcFrame(int syncId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::SyncMrcFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "SyncMrcFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(syncId)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, syncId);
}
// Autogenerated method: OVRPlugin/Media.SetAvailableQueueIndexVulkan
bool GlobalNamespace::OVRPlugin::Media::SetAvailableQueueIndexVulkan(uint queueIndexVk) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::SetAvailableQueueIndexVulkan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "SetAvailableQueueIndexVulkan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(queueIndexVk)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, queueIndexVk);
}
// Autogenerated method: OVRPlugin/Media.SetMrcHeadsetControllerPose
bool GlobalNamespace::OVRPlugin::Media::SetMrcHeadsetControllerPose(::GlobalNamespace::OVRPlugin::Posef headsetPose, ::GlobalNamespace::OVRPlugin::Posef leftControllerPose, ::GlobalNamespace::OVRPlugin::Posef rightControllerPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::SetMrcHeadsetControllerPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "SetMrcHeadsetControllerPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headsetPose), ::il2cpp_utils::ExtractType(leftControllerPose), ::il2cpp_utils::ExtractType(rightControllerPose)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, headsetPose, leftControllerPose, rightControllerPose);
}
// Autogenerated method: OVRPlugin/Media.IsCastingToRemoteClient
bool GlobalNamespace::OVRPlugin::Media::IsCastingToRemoteClient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::IsCastingToRemoteClient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Media", "IsCastingToRemoteClient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/Media/MrcActivationMode
#include "GlobalNamespace/OVRPlugin_Media_MrcActivationMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Media/MrcActivationMode Automatic
::GlobalNamespace::OVRPlugin::Media::MrcActivationMode GlobalNamespace::OVRPlugin::Media::MrcActivationMode::_get_Automatic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::MrcActivationMode::_get_Automatic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Media::MrcActivationMode>("", "OVRPlugin/Media/MrcActivationMode", "Automatic"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Media/MrcActivationMode Automatic
void GlobalNamespace::OVRPlugin::Media::MrcActivationMode::_set_Automatic(::GlobalNamespace::OVRPlugin::Media::MrcActivationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::MrcActivationMode::_set_Automatic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Media/MrcActivationMode", "Automatic", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Media/MrcActivationMode Disabled
::GlobalNamespace::OVRPlugin::Media::MrcActivationMode GlobalNamespace::OVRPlugin::Media::MrcActivationMode::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::MrcActivationMode::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Media::MrcActivationMode>("", "OVRPlugin/Media/MrcActivationMode", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Media/MrcActivationMode Disabled
void GlobalNamespace::OVRPlugin::Media::MrcActivationMode::_set_Disabled(::GlobalNamespace::OVRPlugin::Media::MrcActivationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::MrcActivationMode::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Media/MrcActivationMode", "Disabled", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Media/MrcActivationMode EnumSize
::GlobalNamespace::OVRPlugin::Media::MrcActivationMode GlobalNamespace::OVRPlugin::Media::MrcActivationMode::_get_EnumSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::MrcActivationMode::_get_EnumSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Media::MrcActivationMode>("", "OVRPlugin/Media/MrcActivationMode", "EnumSize"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Media/MrcActivationMode EnumSize
void GlobalNamespace::OVRPlugin::Media::MrcActivationMode::_set_EnumSize(::GlobalNamespace::OVRPlugin::Media::MrcActivationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::MrcActivationMode::_set_EnumSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Media/MrcActivationMode", "EnumSize", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::Media::MrcActivationMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::MrcActivationMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/Media/PlatformCameraMode
#include "GlobalNamespace/OVRPlugin_Media_PlatformCameraMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Media/PlatformCameraMode Disabled
::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode>("", "OVRPlugin/Media/PlatformCameraMode", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Media/PlatformCameraMode Disabled
void GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_Disabled(::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Media/PlatformCameraMode", "Disabled", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Media/PlatformCameraMode Initialized
::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_Initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_Initialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode>("", "OVRPlugin/Media/PlatformCameraMode", "Initialized"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Media/PlatformCameraMode Initialized
void GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_Initialized(::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_Initialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Media/PlatformCameraMode", "Initialized", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Media/PlatformCameraMode UserControlled
::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_UserControlled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_UserControlled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode>("", "OVRPlugin/Media/PlatformCameraMode", "UserControlled"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Media/PlatformCameraMode UserControlled
void GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_UserControlled(::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_UserControlled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Media/PlatformCameraMode", "UserControlled", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Media/PlatformCameraMode SmartNavigated
::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_SmartNavigated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_SmartNavigated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode>("", "OVRPlugin/Media/PlatformCameraMode", "SmartNavigated"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Media/PlatformCameraMode SmartNavigated
void GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_SmartNavigated(::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_SmartNavigated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Media/PlatformCameraMode", "SmartNavigated", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Media/PlatformCameraMode StabilizedPoV
::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_StabilizedPoV() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_StabilizedPoV");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode>("", "OVRPlugin/Media/PlatformCameraMode", "StabilizedPoV"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Media/PlatformCameraMode StabilizedPoV
void GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_StabilizedPoV(::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_StabilizedPoV");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Media/PlatformCameraMode", "StabilizedPoV", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Media/PlatformCameraMode RemoteDroneControlled
::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_RemoteDroneControlled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_RemoteDroneControlled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode>("", "OVRPlugin/Media/PlatformCameraMode", "RemoteDroneControlled"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Media/PlatformCameraMode RemoteDroneControlled
void GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_RemoteDroneControlled(::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_RemoteDroneControlled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Media/PlatformCameraMode", "RemoteDroneControlled", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Media/PlatformCameraMode RemoteSpatialMapped
::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_RemoteSpatialMapped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_RemoteSpatialMapped");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode>("", "OVRPlugin/Media/PlatformCameraMode", "RemoteSpatialMapped"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Media/PlatformCameraMode RemoteSpatialMapped
void GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_RemoteSpatialMapped(::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_RemoteSpatialMapped");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Media/PlatformCameraMode", "RemoteSpatialMapped", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Media/PlatformCameraMode SpectatorMode
::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_SpectatorMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_SpectatorMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode>("", "OVRPlugin/Media/PlatformCameraMode", "SpectatorMode"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Media/PlatformCameraMode SpectatorMode
void GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_SpectatorMode(::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_SpectatorMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Media/PlatformCameraMode", "SpectatorMode", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Media/PlatformCameraMode MobileMRC
::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_MobileMRC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_MobileMRC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode>("", "OVRPlugin/Media/PlatformCameraMode", "MobileMRC"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Media/PlatformCameraMode MobileMRC
void GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_MobileMRC(::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_MobileMRC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Media/PlatformCameraMode", "MobileMRC", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Media/PlatformCameraMode EnumSize
::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_EnumSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_get_EnumSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode>("", "OVRPlugin/Media/PlatformCameraMode", "EnumSize"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Media/PlatformCameraMode EnumSize
void GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_EnumSize(::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::_set_EnumSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Media/PlatformCameraMode", "EnumSize", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/Media/InputVideoBufferType
#include "GlobalNamespace/OVRPlugin_Media_InputVideoBufferType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Media/InputVideoBufferType Memory
::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType GlobalNamespace::OVRPlugin::Media::InputVideoBufferType::_get_Memory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType::_get_Memory");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType>("", "OVRPlugin/Media/InputVideoBufferType", "Memory"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Media/InputVideoBufferType Memory
void GlobalNamespace::OVRPlugin::Media::InputVideoBufferType::_set_Memory(::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType::_set_Memory");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Media/InputVideoBufferType", "Memory", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Media/InputVideoBufferType TextureHandle
::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType GlobalNamespace::OVRPlugin::Media::InputVideoBufferType::_get_TextureHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType::_get_TextureHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType>("", "OVRPlugin/Media/InputVideoBufferType", "TextureHandle"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Media/InputVideoBufferType TextureHandle
void GlobalNamespace::OVRPlugin::Media::InputVideoBufferType::_set_TextureHandle(::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType::_set_TextureHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Media/InputVideoBufferType", "TextureHandle", value));
}
// Autogenerated static field getter
// Get static field: static public OVRPlugin/Media/InputVideoBufferType EnumSize
::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType GlobalNamespace::OVRPlugin::Media::InputVideoBufferType::_get_EnumSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType::_get_EnumSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType>("", "OVRPlugin/Media/InputVideoBufferType", "EnumSize"));
}
// Autogenerated static field setter
// Set static field: static public OVRPlugin/Media/InputVideoBufferType EnumSize
void GlobalNamespace::OVRPlugin::Media::InputVideoBufferType::_set_EnumSize(::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType::_set_EnumSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/Media/InputVideoBufferType", "EnumSize", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlugin::Media::InputVideoBufferType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/Ktx
#include "GlobalNamespace/OVRPlugin_Ktx.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRPlugin/Ktx.LoadKtxFromMemory
::System::IntPtr GlobalNamespace::OVRPlugin::Ktx::LoadKtxFromMemory(::System::IntPtr dataPtr, uint length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Ktx::LoadKtxFromMemory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Ktx", "LoadKtxFromMemory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataPtr), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dataPtr, length);
}
// Autogenerated method: OVRPlugin/Ktx.GetKtxTextureWidth
uint GlobalNamespace::OVRPlugin::Ktx::GetKtxTextureWidth(::System::IntPtr texture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Ktx::GetKtxTextureWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Ktx", "GetKtxTextureWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, texture);
}
// Autogenerated method: OVRPlugin/Ktx.GetKtxTextureHeight
uint GlobalNamespace::OVRPlugin::Ktx::GetKtxTextureHeight(::System::IntPtr texture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Ktx::GetKtxTextureHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Ktx", "GetKtxTextureHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, texture);
}
// Autogenerated method: OVRPlugin/Ktx.TranscodeKtxTexture
bool GlobalNamespace::OVRPlugin::Ktx::TranscodeKtxTexture(::System::IntPtr texture, uint format) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Ktx::TranscodeKtxTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Ktx", "TranscodeKtxTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture), ::il2cpp_utils::ExtractType(format)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, texture, format);
}
// Autogenerated method: OVRPlugin/Ktx.GetKtxTextureSize
uint GlobalNamespace::OVRPlugin::Ktx::GetKtxTextureSize(::System::IntPtr texture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Ktx::GetKtxTextureSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Ktx", "GetKtxTextureSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, texture);
}
// Autogenerated method: OVRPlugin/Ktx.GetKtxTextureData
bool GlobalNamespace::OVRPlugin::Ktx::GetKtxTextureData(::System::IntPtr texture, ::System::IntPtr textureData, uint bufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Ktx::GetKtxTextureData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Ktx", "GetKtxTextureData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture), ::il2cpp_utils::ExtractType(textureData), ::il2cpp_utils::ExtractType(bufferSize)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, texture, textureData, bufferSize);
}
// Autogenerated method: OVRPlugin/Ktx.DestroyKtxTexture
bool GlobalNamespace::OVRPlugin::Ktx::DestroyKtxTexture(::System::IntPtr texture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::Ktx::DestroyKtxTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/Ktx", "DestroyKtxTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, texture);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_0_1_0
#include "GlobalNamespace/OVRPlugin_OVRP_0_1_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Sizei
#include "GlobalNamespace/OVRPlugin_Sizei.hpp"
// Including type: OVRPlugin/Eye
#include "GlobalNamespace/OVRPlugin_Eye.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_0_1_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_1_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_0_1_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_0_1_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_1_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_0_1_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_0_1_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_0_1_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_1_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_0_1_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_0_1_0.ovrp_GetEyeTextureSize
::GlobalNamespace::OVRPlugin::Sizei GlobalNamespace::OVRPlugin::OVRP_0_1_0::ovrp_GetEyeTextureSize(::GlobalNamespace::OVRPlugin::Eye eyeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_1_0::ovrp_GetEyeTextureSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_0_1_0", "ovrp_GetEyeTextureSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eyeId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Sizei, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, eyeId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_0_1_1
#include "GlobalNamespace/OVRPlugin_OVRP_0_1_1.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/Vector3f
#include "GlobalNamespace/OVRPlugin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_0_1_1::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_1_1::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_0_1_1", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_0_1_1::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_1_1::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_0_1_1", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_0_1_1..cctor
void GlobalNamespace::OVRPlugin::OVRP_0_1_1::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_1_1::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_0_1_1", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_0_1_1.ovrp_SetOverlayQuad2
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_0_1_1::ovrp_SetOverlayQuad2(::GlobalNamespace::OVRPlugin::Bool onTop, ::GlobalNamespace::OVRPlugin::Bool headLocked, ::System::IntPtr texture, ::System::IntPtr device, ::GlobalNamespace::OVRPlugin::Posef pose, ::GlobalNamespace::OVRPlugin::Vector3f scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_1_1::ovrp_SetOverlayQuad2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_0_1_1", "ovrp_SetOverlayQuad2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(onTop), ::il2cpp_utils::ExtractType(headLocked), ::il2cpp_utils::ExtractType(texture), ::il2cpp_utils::ExtractType(device), ::il2cpp_utils::ExtractType(pose), ::il2cpp_utils::ExtractType(scale)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, onTop, headLocked, texture, device, pose, scale);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_0_1_2
#include "GlobalNamespace/OVRPlugin_OVRP_0_1_2.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Node
#include "GlobalNamespace/OVRPlugin_Node.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_0_1_2::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_1_2::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_0_1_2", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_0_1_2::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_1_2::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_0_1_2", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_0_1_2..cctor
void GlobalNamespace::OVRPlugin::OVRP_0_1_2::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_1_2::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_0_1_2", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_0_1_2.ovrp_GetNodePose
::GlobalNamespace::OVRPlugin::Posef GlobalNamespace::OVRPlugin::OVRP_0_1_2::ovrp_GetNodePose(::GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_1_2::ovrp_GetNodePose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_0_1_2", "ovrp_GetNodePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Posef, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, nodeId);
}
// Autogenerated method: OVRPlugin/OVRP_0_1_2.ovrp_SetControllerVibration
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_0_1_2::ovrp_SetControllerVibration(uint controllerMask, float frequency, float amplitude) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_1_2::ovrp_SetControllerVibration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_0_1_2", "ovrp_SetControllerVibration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controllerMask), ::il2cpp_utils::ExtractType(frequency), ::il2cpp_utils::ExtractType(amplitude)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, controllerMask, frequency, amplitude);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_0_1_3
#include "GlobalNamespace/OVRPlugin_OVRP_0_1_3.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Node
#include "GlobalNamespace/OVRPlugin_Node.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_0_1_3::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_1_3::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_0_1_3", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_0_1_3::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_1_3::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_0_1_3", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_0_1_3..cctor
void GlobalNamespace::OVRPlugin::OVRP_0_1_3::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_1_3::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_0_1_3", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_0_1_3.ovrp_GetNodeVelocity
::GlobalNamespace::OVRPlugin::Posef GlobalNamespace::OVRPlugin::OVRP_0_1_3::ovrp_GetNodeVelocity(::GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_1_3::ovrp_GetNodeVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_0_1_3", "ovrp_GetNodeVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Posef, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, nodeId);
}
// Autogenerated method: OVRPlugin/OVRP_0_1_3.ovrp_GetNodeAcceleration
::GlobalNamespace::OVRPlugin::Posef GlobalNamespace::OVRPlugin::OVRP_0_1_3::ovrp_GetNodeAcceleration(::GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_1_3::ovrp_GetNodeAcceleration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_0_1_3", "ovrp_GetNodeAcceleration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Posef, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, nodeId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_0_5_0
#include "GlobalNamespace/OVRPlugin_OVRP_0_5_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_0_5_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_5_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_0_5_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_0_5_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_5_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_0_5_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_0_5_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_0_5_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_0_5_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_0_5_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_0_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_0_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/TrackingOrigin
#include "GlobalNamespace/OVRPlugin_TrackingOrigin.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_0_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_0_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_0_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_0_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_0_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_0_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_0_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_0_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_0_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_0_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_0_0.ovrp_GetTrackingOriginType
::GlobalNamespace::OVRPlugin::TrackingOrigin GlobalNamespace::OVRPlugin::OVRP_1_0_0::ovrp_GetTrackingOriginType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_0_0::ovrp_GetTrackingOriginType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_0_0", "ovrp_GetTrackingOriginType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::TrackingOrigin, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_0_0.ovrp_SetTrackingOriginType
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_0_0::ovrp_SetTrackingOriginType(::GlobalNamespace::OVRPlugin::TrackingOrigin originType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_0_0::ovrp_SetTrackingOriginType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_0_0", "ovrp_SetTrackingOriginType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(originType)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, originType);
}
// Autogenerated method: OVRPlugin/OVRP_1_0_0.ovrp_GetTrackingCalibratedOrigin
::GlobalNamespace::OVRPlugin::Posef GlobalNamespace::OVRPlugin::OVRP_1_0_0::ovrp_GetTrackingCalibratedOrigin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_0_0::ovrp_GetTrackingCalibratedOrigin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_0_0", "ovrp_GetTrackingCalibratedOrigin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Posef, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_0_0.ovrp_RecenterTrackingOrigin
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_0_0::ovrp_RecenterTrackingOrigin(uint flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_0_0::ovrp_RecenterTrackingOrigin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_0_0", "ovrp_RecenterTrackingOrigin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, flags);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_1_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_1_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/Node
#include "GlobalNamespace/OVRPlugin_Node.hpp"
// Including type: OVRPlugin/Frustumf
#include "GlobalNamespace/OVRPlugin_Frustumf.hpp"
// Including type: OVRPlugin/ControllerState
#include "GlobalNamespace/OVRPlugin_ControllerState.hpp"
// Including type: OVRPlugin/BatteryStatus
#include "GlobalNamespace/OVRPlugin_BatteryStatus.hpp"
// Including type: OVRPlugin/PlatformUI
#include "GlobalNamespace/OVRPlugin_PlatformUI.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_1_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_1_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_1_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_1_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_1_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetInitialized
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0._ovrp_GetVersion
::System::IntPtr GlobalNamespace::OVRPlugin::OVRP_1_1_0::_ovrp_GetVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::_ovrp_GetVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "_ovrp_GetVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetVersion
::StringW GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0._ovrp_GetNativeSDKVersion
::System::IntPtr GlobalNamespace::OVRPlugin::OVRP_1_1_0::_ovrp_GetNativeSDKVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::_ovrp_GetNativeSDKVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "_ovrp_GetNativeSDKVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetNativeSDKVersion
::StringW GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetNativeSDKVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetNativeSDKVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetNativeSDKVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetAudioOutId
::System::IntPtr GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetAudioOutId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetAudioOutId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetAudioOutId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetAudioInId
::System::IntPtr GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetAudioInId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetAudioInId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetAudioInId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetEyeTextureScale
float GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetEyeTextureScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetEyeTextureScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetEyeTextureScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_SetEyeTextureScale
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_SetEyeTextureScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_SetEyeTextureScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_SetEyeTextureScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetTrackingOrientationSupported
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetTrackingOrientationSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetTrackingOrientationSupported");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetTrackingOrientationSupported", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetTrackingOrientationEnabled
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetTrackingOrientationEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetTrackingOrientationEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetTrackingOrientationEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_SetTrackingOrientationEnabled
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_SetTrackingOrientationEnabled(::GlobalNamespace::OVRPlugin::Bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_SetTrackingOrientationEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_SetTrackingOrientationEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetTrackingPositionSupported
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetTrackingPositionSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetTrackingPositionSupported");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetTrackingPositionSupported", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetTrackingPositionEnabled
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetTrackingPositionEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetTrackingPositionEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetTrackingPositionEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_SetTrackingPositionEnabled
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_SetTrackingPositionEnabled(::GlobalNamespace::OVRPlugin::Bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_SetTrackingPositionEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_SetTrackingPositionEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetNodePresent
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetNodePresent(::GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetNodePresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetNodePresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, nodeId);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetNodeOrientationTracked
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetNodeOrientationTracked(::GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetNodeOrientationTracked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetNodeOrientationTracked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, nodeId);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetNodePositionTracked
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetNodePositionTracked(::GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetNodePositionTracked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetNodePositionTracked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, nodeId);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetNodeFrustum
::GlobalNamespace::OVRPlugin::Frustumf GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetNodeFrustum(::GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetNodeFrustum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetNodeFrustum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Frustumf, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, nodeId);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetControllerState
::GlobalNamespace::OVRPlugin::ControllerState GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetControllerState(uint controllerMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetControllerState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetControllerState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controllerMask)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::ControllerState, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, controllerMask);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetSystemCpuLevel
int GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemCpuLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemCpuLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetSystemCpuLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_SetSystemCpuLevel
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_SetSystemCpuLevel(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_SetSystemCpuLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_SetSystemCpuLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetSystemGpuLevel
int GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemGpuLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemGpuLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetSystemGpuLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_SetSystemGpuLevel
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_SetSystemGpuLevel(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_SetSystemGpuLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_SetSystemGpuLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetSystemPowerSavingMode
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemPowerSavingMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemPowerSavingMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetSystemPowerSavingMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetSystemDisplayFrequency
float GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemDisplayFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemDisplayFrequency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetSystemDisplayFrequency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetSystemVSyncCount
int GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemVSyncCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemVSyncCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetSystemVSyncCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetSystemVolume
float GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetSystemVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetSystemBatteryStatus
::GlobalNamespace::OVRPlugin::BatteryStatus GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemBatteryStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemBatteryStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetSystemBatteryStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::BatteryStatus, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetSystemBatteryLevel
float GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemBatteryLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemBatteryLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetSystemBatteryLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetSystemBatteryTemperature
float GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemBatteryTemperature() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemBatteryTemperature");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetSystemBatteryTemperature", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0._ovrp_GetSystemProductName
::System::IntPtr GlobalNamespace::OVRPlugin::OVRP_1_1_0::_ovrp_GetSystemProductName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::_ovrp_GetSystemProductName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "_ovrp_GetSystemProductName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetSystemProductName
::StringW GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemProductName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetSystemProductName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetSystemProductName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_ShowSystemUI
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_ShowSystemUI(::GlobalNamespace::OVRPlugin::PlatformUI ui) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_ShowSystemUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_ShowSystemUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ui)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ui);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetAppMonoscopic
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetAppMonoscopic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetAppMonoscopic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetAppMonoscopic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_SetAppMonoscopic
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_SetAppMonoscopic(::GlobalNamespace::OVRPlugin::Bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_SetAppMonoscopic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_SetAppMonoscopic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetAppHasVrFocus
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetAppHasVrFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetAppHasVrFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetAppHasVrFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetAppShouldQuit
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetAppShouldQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetAppShouldQuit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetAppShouldQuit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetAppShouldRecenter
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetAppShouldRecenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetAppShouldRecenter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetAppShouldRecenter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0._ovrp_GetAppLatencyTimings
::System::IntPtr GlobalNamespace::OVRPlugin::OVRP_1_1_0::_ovrp_GetAppLatencyTimings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::_ovrp_GetAppLatencyTimings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "_ovrp_GetAppLatencyTimings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetAppLatencyTimings
::StringW GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetAppLatencyTimings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetAppLatencyTimings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetAppLatencyTimings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetUserPresent
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetUserPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetUserPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetUserPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetUserIPD
float GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetUserIPD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetUserIPD");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetUserIPD", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_SetUserIPD
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_SetUserIPD(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_SetUserIPD");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_SetUserIPD", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetUserEyeDepth
float GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetUserEyeDepth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetUserEyeDepth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetUserEyeDepth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_SetUserEyeDepth
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_SetUserEyeDepth(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_SetUserEyeDepth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_SetUserEyeDepth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_GetUserEyeHeight
float GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetUserEyeHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_GetUserEyeHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_GetUserEyeHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_1_0.ovrp_SetUserEyeHeight
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_SetUserEyeHeight(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_1_0::ovrp_SetUserEyeHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_1_0", "ovrp_SetUserEyeHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_2_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_2_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_2_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_2_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_2_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_2_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_2_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_2_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_2_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_2_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_2_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_2_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_2_0.ovrp_SetSystemVSyncCount
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_2_0::ovrp_SetSystemVSyncCount(int vsyncCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_2_0::ovrp_SetSystemVSyncCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_2_0", "ovrp_SetSystemVSyncCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vsyncCount)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, vsyncCount);
}
// Autogenerated method: OVRPlugin/OVRP_1_2_0.ovrpi_SetTrackingCalibratedOrigin
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_2_0::ovrpi_SetTrackingCalibratedOrigin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_2_0::ovrpi_SetTrackingCalibratedOrigin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_2_0", "ovrpi_SetTrackingCalibratedOrigin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_3_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_3_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_3_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_3_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_3_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_3_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_3_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_3_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_3_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_3_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_3_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_3_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_3_0.ovrp_GetEyeOcclusionMeshEnabled
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_3_0::ovrp_GetEyeOcclusionMeshEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_3_0::ovrp_GetEyeOcclusionMeshEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_3_0", "ovrp_GetEyeOcclusionMeshEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_3_0.ovrp_SetEyeOcclusionMeshEnabled
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_3_0::ovrp_SetEyeOcclusionMeshEnabled(::GlobalNamespace::OVRPlugin::Bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_3_0::ovrp_SetEyeOcclusionMeshEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_3_0", "ovrp_SetEyeOcclusionMeshEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_3_0.ovrp_GetSystemHeadphonesPresent
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_3_0::ovrp_GetSystemHeadphonesPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_3_0::ovrp_GetSystemHeadphonesPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_3_0", "ovrp_GetSystemHeadphonesPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_5_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_5_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/SystemRegion
#include "GlobalNamespace/OVRPlugin_SystemRegion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_5_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_5_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_5_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_5_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_5_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_5_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_5_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_5_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_5_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_5_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_5_0.ovrp_GetSystemRegion
::GlobalNamespace::OVRPlugin::SystemRegion GlobalNamespace::OVRPlugin::OVRP_1_5_0::ovrp_GetSystemRegion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_5_0::ovrp_GetSystemRegion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_5_0", "ovrp_GetSystemRegion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::SystemRegion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_6_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_6_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/HapticsDesc
#include "GlobalNamespace/OVRPlugin_HapticsDesc.hpp"
// Including type: OVRPlugin/HapticsState
#include "GlobalNamespace/OVRPlugin_HapticsState.hpp"
// Including type: OVRPlugin/HapticsBuffer
#include "GlobalNamespace/OVRPlugin_HapticsBuffer.hpp"
// Including type: OVRPlugin/Vector3f
#include "GlobalNamespace/OVRPlugin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_6_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_6_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_6_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_6_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_6_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_6_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_6_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_6_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0.ovrp_GetTrackingIPDEnabled
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetTrackingIPDEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetTrackingIPDEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", "ovrp_GetTrackingIPDEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0.ovrp_SetTrackingIPDEnabled
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_SetTrackingIPDEnabled(::GlobalNamespace::OVRPlugin::Bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_SetTrackingIPDEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", "ovrp_SetTrackingIPDEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0.ovrp_GetControllerHapticsDesc
::GlobalNamespace::OVRPlugin::HapticsDesc GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetControllerHapticsDesc(uint controllerMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetControllerHapticsDesc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", "ovrp_GetControllerHapticsDesc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controllerMask)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::HapticsDesc, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, controllerMask);
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0.ovrp_GetControllerHapticsState
::GlobalNamespace::OVRPlugin::HapticsState GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetControllerHapticsState(uint controllerMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetControllerHapticsState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", "ovrp_GetControllerHapticsState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controllerMask)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::HapticsState, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, controllerMask);
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0.ovrp_SetControllerHaptics
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_SetControllerHaptics(uint controllerMask, ::GlobalNamespace::OVRPlugin::HapticsBuffer hapticsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_SetControllerHaptics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", "ovrp_SetControllerHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controllerMask), ::il2cpp_utils::ExtractType(hapticsBuffer)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, controllerMask, hapticsBuffer);
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0.ovrp_SetOverlayQuad3
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_SetOverlayQuad3(uint flags, ::System::IntPtr textureLeft, ::System::IntPtr textureRight, ::System::IntPtr device, ::GlobalNamespace::OVRPlugin::Posef pose, ::GlobalNamespace::OVRPlugin::Vector3f scale, int layerIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_SetOverlayQuad3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", "ovrp_SetOverlayQuad3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(textureLeft), ::il2cpp_utils::ExtractType(textureRight), ::il2cpp_utils::ExtractType(device), ::il2cpp_utils::ExtractType(pose), ::il2cpp_utils::ExtractType(scale), ::il2cpp_utils::ExtractType(layerIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, flags, textureLeft, textureRight, device, pose, scale, layerIndex);
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0.ovrp_GetEyeRecommendedResolutionScale
float GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetEyeRecommendedResolutionScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetEyeRecommendedResolutionScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", "ovrp_GetEyeRecommendedResolutionScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0.ovrp_GetAppCpuStartToGpuEndTime
float GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetAppCpuStartToGpuEndTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetAppCpuStartToGpuEndTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", "ovrp_GetAppCpuStartToGpuEndTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0.ovrp_GetSystemRecommendedMSAALevel
int GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetSystemRecommendedMSAALevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetSystemRecommendedMSAALevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", "ovrp_GetSystemRecommendedMSAALevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_7_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_7_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_7_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_7_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_7_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_7_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_7_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_7_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_7_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_7_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_7_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_7_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_7_0.ovrp_GetAppChromaticCorrection
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_7_0::ovrp_GetAppChromaticCorrection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_7_0::ovrp_GetAppChromaticCorrection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_7_0", "ovrp_GetAppChromaticCorrection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_7_0.ovrp_SetAppChromaticCorrection
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_7_0::ovrp_SetAppChromaticCorrection(::GlobalNamespace::OVRPlugin::Bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_7_0::ovrp_SetAppChromaticCorrection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_7_0", "ovrp_SetAppChromaticCorrection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_8_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_8_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/BoundaryTestResult
#include "GlobalNamespace/OVRPlugin_BoundaryTestResult.hpp"
// Including type: OVRPlugin/Node
#include "GlobalNamespace/OVRPlugin_Node.hpp"
// Including type: OVRPlugin/BoundaryType
#include "GlobalNamespace/OVRPlugin_BoundaryType.hpp"
// Including type: OVRPlugin/Vector3f
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: OVRPlugin/BoundaryGeometry
#include "GlobalNamespace/OVRPlugin_BoundaryGeometry.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_8_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_8_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_8_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_8_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_8_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_8_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_8_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_8_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_GetBoundaryConfigured
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryConfigured() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryConfigured");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_GetBoundaryConfigured", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_TestBoundaryNode
::GlobalNamespace::OVRPlugin::BoundaryTestResult GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_TestBoundaryNode(::GlobalNamespace::OVRPlugin::Node nodeId, ::GlobalNamespace::OVRPlugin::BoundaryType boundaryType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_TestBoundaryNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_TestBoundaryNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractType(boundaryType)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::BoundaryTestResult, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, nodeId, boundaryType);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_TestBoundaryPoint
::GlobalNamespace::OVRPlugin::BoundaryTestResult GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_TestBoundaryPoint(::GlobalNamespace::OVRPlugin::Vector3f point, ::GlobalNamespace::OVRPlugin::BoundaryType boundaryType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_TestBoundaryPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_TestBoundaryPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point), ::il2cpp_utils::ExtractType(boundaryType)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::BoundaryTestResult, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, point, boundaryType);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_GetBoundaryGeometry
::GlobalNamespace::OVRPlugin::BoundaryGeometry GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryGeometry(::GlobalNamespace::OVRPlugin::BoundaryType boundaryType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryGeometry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_GetBoundaryGeometry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boundaryType)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::BoundaryGeometry, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boundaryType);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_GetBoundaryDimensions
::GlobalNamespace::OVRPlugin::Vector3f GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryDimensions(::GlobalNamespace::OVRPlugin::BoundaryType boundaryType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryDimensions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_GetBoundaryDimensions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boundaryType)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Vector3f, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boundaryType);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_GetBoundaryVisible
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_GetBoundaryVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_SetBoundaryVisible
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_SetBoundaryVisible(::GlobalNamespace::OVRPlugin::Bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_SetBoundaryVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_SetBoundaryVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_Update2
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_Update2(int stateId, int frameIndex, double predictionSeconds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_Update2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_Update2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateId), ::il2cpp_utils::ExtractType(frameIndex), ::il2cpp_utils::ExtractType(predictionSeconds)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, stateId, frameIndex, predictionSeconds);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_GetNodePose2
::GlobalNamespace::OVRPlugin::Posef GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetNodePose2(int stateId, ::GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetNodePose2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_GetNodePose2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateId), ::il2cpp_utils::ExtractType(nodeId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Posef, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, stateId, nodeId);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_GetNodeVelocity2
::GlobalNamespace::OVRPlugin::Posef GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetNodeVelocity2(int stateId, ::GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetNodeVelocity2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_GetNodeVelocity2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateId), ::il2cpp_utils::ExtractType(nodeId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Posef, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, stateId, nodeId);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_GetNodeAcceleration2
::GlobalNamespace::OVRPlugin::Posef GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetNodeAcceleration2(int stateId, ::GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetNodeAcceleration2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_GetNodeAcceleration2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateId), ::il2cpp_utils::ExtractType(nodeId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Posef, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, stateId, nodeId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_9_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_9_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/SystemHeadset
#include "GlobalNamespace/OVRPlugin_SystemHeadset.hpp"
// Including type: OVRPlugin/Controller
#include "GlobalNamespace/OVRPlugin_Controller.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/BoundaryType
#include "GlobalNamespace/OVRPlugin_BoundaryType.hpp"
// Including type: OVRPlugin/AppPerfStats
#include "GlobalNamespace/OVRPlugin_AppPerfStats.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_9_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_9_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_9_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_9_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_9_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_9_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_9_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_9_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_9_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_9_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_9_0.ovrp_GetSystemHeadsetType
::GlobalNamespace::OVRPlugin::SystemHeadset GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetSystemHeadsetType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetSystemHeadsetType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_9_0", "ovrp_GetSystemHeadsetType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::SystemHeadset, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_9_0.ovrp_GetActiveController
::GlobalNamespace::OVRPlugin::Controller GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetActiveController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetActiveController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_9_0", "ovrp_GetActiveController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Controller, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_9_0.ovrp_GetConnectedControllers
::GlobalNamespace::OVRPlugin::Controller GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetConnectedControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetConnectedControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_9_0", "ovrp_GetConnectedControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Controller, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_9_0.ovrp_GetBoundaryGeometry2
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetBoundaryGeometry2(::GlobalNamespace::OVRPlugin::BoundaryType boundaryType, ::System::IntPtr points, ByRef<int> pointsCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetBoundaryGeometry2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_9_0", "ovrp_GetBoundaryGeometry2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boundaryType), ::il2cpp_utils::ExtractType(points), ::il2cpp_utils::ExtractType(pointsCount)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, boundaryType, points, byref(pointsCount));
}
// Autogenerated method: OVRPlugin/OVRP_1_9_0.ovrp_GetAppPerfStats
::GlobalNamespace::OVRPlugin::AppPerfStats GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetAppPerfStats() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetAppPerfStats");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_9_0", "ovrp_GetAppPerfStats", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::AppPerfStats, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_9_0.ovrp_ResetAppPerfStats
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_ResetAppPerfStats() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_ResetAppPerfStats");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_9_0", "ovrp_ResetAppPerfStats", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_10_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_10_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_10_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_10_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_10_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_10_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_10_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_10_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_10_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_10_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_10_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_10_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_11_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_11_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/EyeTextureFormat
#include "GlobalNamespace/OVRPlugin_EyeTextureFormat.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_11_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_11_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_11_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_11_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_11_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_11_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_11_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_11_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_11_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_11_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_11_0.ovrp_SetDesiredEyeTextureFormat
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_11_0::ovrp_SetDesiredEyeTextureFormat(::GlobalNamespace::OVRPlugin::EyeTextureFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_11_0::ovrp_SetDesiredEyeTextureFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_11_0", "ovrp_SetDesiredEyeTextureFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_11_0.ovrp_GetDesiredEyeTextureFormat
::GlobalNamespace::OVRPlugin::EyeTextureFormat GlobalNamespace::OVRPlugin::OVRP_1_11_0::ovrp_GetDesiredEyeTextureFormat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_11_0::ovrp_GetDesiredEyeTextureFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_11_0", "ovrp_GetDesiredEyeTextureFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::EyeTextureFormat, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_12_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_12_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/PoseStatef
#include "GlobalNamespace/OVRPlugin_PoseStatef.hpp"
// Including type: OVRPlugin/Step
#include "GlobalNamespace/OVRPlugin_Step.hpp"
// Including type: OVRPlugin/Node
#include "GlobalNamespace/OVRPlugin_Node.hpp"
// Including type: OVRPlugin/ControllerState2
#include "GlobalNamespace/OVRPlugin_ControllerState2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_12_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_12_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_12_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_12_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_12_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_12_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_12_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_12_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_12_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_12_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_12_0.ovrp_GetAppFramerate
float GlobalNamespace::OVRPlugin::OVRP_1_12_0::ovrp_GetAppFramerate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_12_0::ovrp_GetAppFramerate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_12_0", "ovrp_GetAppFramerate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_12_0.ovrp_GetNodePoseState
::GlobalNamespace::OVRPlugin::PoseStatef GlobalNamespace::OVRPlugin::OVRP_1_12_0::ovrp_GetNodePoseState(::GlobalNamespace::OVRPlugin::Step stepId, ::GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_12_0::ovrp_GetNodePoseState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_12_0", "ovrp_GetNodePoseState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stepId), ::il2cpp_utils::ExtractType(nodeId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::PoseStatef, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, stepId, nodeId);
}
// Autogenerated method: OVRPlugin/OVRP_1_12_0.ovrp_GetControllerState2
::GlobalNamespace::OVRPlugin::ControllerState2 GlobalNamespace::OVRPlugin::OVRP_1_12_0::ovrp_GetControllerState2(uint controllerMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_12_0::ovrp_GetControllerState2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_12_0", "ovrp_GetControllerState2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controllerMask)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::ControllerState2, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, controllerMask);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_15_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_15_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/CameraIntrinsics
#include "GlobalNamespace/OVRPlugin_CameraIntrinsics.hpp"
// Including type: OVRPlugin/CameraExtrinsics
#include "GlobalNamespace/OVRPlugin_CameraExtrinsics.hpp"
// Including type: OVRPlugin/OverlayShape
#include "GlobalNamespace/OVRPlugin_OverlayShape.hpp"
// Including type: OVRPlugin/LayerLayout
#include "GlobalNamespace/OVRPlugin_LayerLayout.hpp"
// Including type: OVRPlugin/Sizei
#include "GlobalNamespace/OVRPlugin_Sizei.hpp"
// Including type: OVRPlugin/EyeTextureFormat
#include "GlobalNamespace/OVRPlugin_EyeTextureFormat.hpp"
// Including type: OVRPlugin/LayerDesc
#include "GlobalNamespace/OVRPlugin_LayerDesc.hpp"
// Including type: OVRPlugin/Eye
#include "GlobalNamespace/OVRPlugin_Eye.hpp"
// Including type: OVRPlugin/Vector3f
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: OVRPlugin/Node
#include "GlobalNamespace/OVRPlugin_Node.hpp"
// Including type: OVRPlugin/Frustumf2
#include "GlobalNamespace/OVRPlugin_Frustumf2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_15_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_15_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_15_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_15_0", "version", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 OVRP_EXTERNAL_CAMERA_NAME_SIZE
int GlobalNamespace::OVRPlugin::OVRP_1_15_0::_get_OVRP_EXTERNAL_CAMERA_NAME_SIZE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::_get_OVRP_EXTERNAL_CAMERA_NAME_SIZE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRPlugin/OVRP_1_15_0", "OVRP_EXTERNAL_CAMERA_NAME_SIZE"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 OVRP_EXTERNAL_CAMERA_NAME_SIZE
void GlobalNamespace::OVRPlugin::OVRP_1_15_0::_set_OVRP_EXTERNAL_CAMERA_NAME_SIZE(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::_set_OVRP_EXTERNAL_CAMERA_NAME_SIZE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_15_0", "OVRP_EXTERNAL_CAMERA_NAME_SIZE", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_15_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_InitializeMixedReality
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_InitializeMixedReality() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_InitializeMixedReality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_InitializeMixedReality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_ShutdownMixedReality
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_ShutdownMixedReality() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_ShutdownMixedReality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_ShutdownMixedReality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_GetMixedRealityInitialized
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetMixedRealityInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetMixedRealityInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_GetMixedRealityInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_UpdateExternalCamera
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_UpdateExternalCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_UpdateExternalCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_UpdateExternalCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_GetExternalCameraCount
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraCount(ByRef<int> cameraCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_GetExternalCameraCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(cameraCount));
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_GetExternalCameraName
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraName(int cameraId, ::ArrayW<::Il2CppChar> cameraName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_GetExternalCameraName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraId), ::il2cpp_utils::ExtractType(cameraName)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cameraId, cameraName);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_GetExternalCameraIntrinsics
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraIntrinsics(int cameraId, ByRef<::GlobalNamespace::OVRPlugin::CameraIntrinsics> cameraIntrinsics) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraIntrinsics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_GetExternalCameraIntrinsics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraId), ::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::CameraIntrinsics&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cameraId, byref(cameraIntrinsics));
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_GetExternalCameraExtrinsics
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraExtrinsics(int cameraId, ByRef<::GlobalNamespace::OVRPlugin::CameraExtrinsics> cameraExtrinsics) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraExtrinsics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_GetExternalCameraExtrinsics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraId), ::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::CameraExtrinsics&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cameraId, byref(cameraExtrinsics));
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_CalculateLayerDesc
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_CalculateLayerDesc(::GlobalNamespace::OVRPlugin::OverlayShape shape, ::GlobalNamespace::OVRPlugin::LayerLayout layout, ByRef<::GlobalNamespace::OVRPlugin::Sizei> textureSize, int mipLevels, int sampleCount, ::GlobalNamespace::OVRPlugin::EyeTextureFormat format, int layerFlags, ByRef<::GlobalNamespace::OVRPlugin::LayerDesc> layerDesc) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_CalculateLayerDesc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_CalculateLayerDesc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shape), ::il2cpp_utils::ExtractType(layout), ::il2cpp_utils::ExtractType(textureSize), ::il2cpp_utils::ExtractType(mipLevels), ::il2cpp_utils::ExtractType(sampleCount), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(layerFlags), ::il2cpp_utils::ExtractType(layerDesc)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, shape, layout, byref(textureSize), mipLevels, sampleCount, format, layerFlags, byref(layerDesc));
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_EnqueueSetupLayer
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_EnqueueSetupLayer(ByRef<::GlobalNamespace::OVRPlugin::LayerDesc> desc, ::System::IntPtr layerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_EnqueueSetupLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_EnqueueSetupLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(desc), ::il2cpp_utils::ExtractType(layerId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(desc), layerId);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_EnqueueDestroyLayer
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_EnqueueDestroyLayer(::System::IntPtr layerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_EnqueueDestroyLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_EnqueueDestroyLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, layerId);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_GetLayerTextureStageCount
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetLayerTextureStageCount(int layerId, ByRef<int> layerTextureStageCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetLayerTextureStageCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_GetLayerTextureStageCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerId), ::il2cpp_utils::ExtractType(layerTextureStageCount)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, layerId, byref(layerTextureStageCount));
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_GetLayerTexturePtr
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetLayerTexturePtr(int layerId, int stage, ::GlobalNamespace::OVRPlugin::Eye eyeId, ByRef<::System::IntPtr> textureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetLayerTexturePtr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_GetLayerTexturePtr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerId), ::il2cpp_utils::ExtractType(stage), ::il2cpp_utils::ExtractType(eyeId), ::il2cpp_utils::ExtractType(textureHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, layerId, stage, eyeId, byref(textureHandle));
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_EnqueueSubmitLayer
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_EnqueueSubmitLayer(uint flags, ::System::IntPtr textureLeft, ::System::IntPtr textureRight, int layerId, int frameIndex, ByRef<::GlobalNamespace::OVRPlugin::Posef> pose, ByRef<::GlobalNamespace::OVRPlugin::Vector3f> scale, int layerIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_EnqueueSubmitLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_EnqueueSubmitLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(textureLeft), ::il2cpp_utils::ExtractType(textureRight), ::il2cpp_utils::ExtractType(layerId), ::il2cpp_utils::ExtractType(frameIndex), ::il2cpp_utils::ExtractType(pose), ::il2cpp_utils::ExtractType(scale), ::il2cpp_utils::ExtractType(layerIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, flags, textureLeft, textureRight, layerId, frameIndex, byref(pose), byref(scale), layerIndex);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_GetNodeFrustum2
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetNodeFrustum2(::GlobalNamespace::OVRPlugin::Node nodeId, ByRef<::GlobalNamespace::OVRPlugin::Frustumf2> nodeFrustum) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetNodeFrustum2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_GetNodeFrustum2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Frustumf2&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, nodeId, byref(nodeFrustum));
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_GetEyeTextureArrayEnabled
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetEyeTextureArrayEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetEyeTextureArrayEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_GetEyeTextureArrayEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_16_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_16_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/CameraDevice
#include "GlobalNamespace/OVRPlugin_CameraDevice.hpp"
// Including type: OVRPlugin/Sizei
#include "GlobalNamespace/OVRPlugin_Sizei.hpp"
// Including type: OVRPlugin/ControllerState4
#include "GlobalNamespace/OVRPlugin_ControllerState4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_16_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_16_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_16_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_16_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_16_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_16_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_16_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_16_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_UpdateCameraDevices
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_UpdateCameraDevices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_UpdateCameraDevices");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_UpdateCameraDevices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_IsCameraDeviceAvailable
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_IsCameraDeviceAvailable(::GlobalNamespace::OVRPlugin::CameraDevice cameraDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_IsCameraDeviceAvailable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_IsCameraDeviceAvailable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraDevice)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cameraDevice);
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_SetCameraDevicePreferredColorFrameSize
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_SetCameraDevicePreferredColorFrameSize(::GlobalNamespace::OVRPlugin::CameraDevice cameraDevice, ::GlobalNamespace::OVRPlugin::Sizei preferredColorFrameSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_SetCameraDevicePreferredColorFrameSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_SetCameraDevicePreferredColorFrameSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraDevice), ::il2cpp_utils::ExtractType(preferredColorFrameSize)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cameraDevice, preferredColorFrameSize);
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_OpenCameraDevice
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_OpenCameraDevice(::GlobalNamespace::OVRPlugin::CameraDevice cameraDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_OpenCameraDevice");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_OpenCameraDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraDevice)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cameraDevice);
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_CloseCameraDevice
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_CloseCameraDevice(::GlobalNamespace::OVRPlugin::CameraDevice cameraDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_CloseCameraDevice");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_CloseCameraDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraDevice)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cameraDevice);
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_HasCameraDeviceOpened
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_HasCameraDeviceOpened(::GlobalNamespace::OVRPlugin::CameraDevice cameraDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_HasCameraDeviceOpened");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_HasCameraDeviceOpened", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraDevice)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cameraDevice);
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_IsCameraDeviceColorFrameAvailable
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_IsCameraDeviceColorFrameAvailable(::GlobalNamespace::OVRPlugin::CameraDevice cameraDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_IsCameraDeviceColorFrameAvailable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_IsCameraDeviceColorFrameAvailable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraDevice)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cameraDevice);
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_GetCameraDeviceColorFrameSize
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_GetCameraDeviceColorFrameSize(::GlobalNamespace::OVRPlugin::CameraDevice cameraDevice, ByRef<::GlobalNamespace::OVRPlugin::Sizei> colorFrameSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_GetCameraDeviceColorFrameSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_GetCameraDeviceColorFrameSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraDevice), ::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Sizei&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cameraDevice, byref(colorFrameSize));
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_GetCameraDeviceColorFrameBgraPixels
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_GetCameraDeviceColorFrameBgraPixels(::GlobalNamespace::OVRPlugin::CameraDevice cameraDevice, ByRef<::System::IntPtr> colorFrameBgraPixels, ByRef<int> colorFrameRowPitch) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_GetCameraDeviceColorFrameBgraPixels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_GetCameraDeviceColorFrameBgraPixels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraDevice), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cameraDevice, byref(colorFrameBgraPixels), byref(colorFrameRowPitch));
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_GetControllerState4
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_GetControllerState4(uint controllerMask, ByRef<::GlobalNamespace::OVRPlugin::ControllerState4> controllerState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_GetControllerState4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_GetControllerState4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controllerMask), ::il2cpp_utils::ExtractType(controllerState)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, controllerMask, byref(controllerState));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_17_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_17_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_17_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_17_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_17_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_17_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_17_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_17_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_17_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_17_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_17_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_17_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_18_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_18_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_18_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_18_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_18_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_18_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_18_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_18_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_18_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_18_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_18_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_18_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_18_0.ovrp_SetHandNodePoseStateLatency
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_18_0::ovrp_SetHandNodePoseStateLatency(double latencyInSeconds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_18_0::ovrp_SetHandNodePoseStateLatency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_18_0", "ovrp_SetHandNodePoseStateLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(latencyInSeconds)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, latencyInSeconds);
}
// Autogenerated method: OVRPlugin/OVRP_1_18_0.ovrp_GetHandNodePoseStateLatency
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_18_0::ovrp_GetHandNodePoseStateLatency(ByRef<double> latencyInSeconds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_18_0::ovrp_GetHandNodePoseStateLatency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_18_0", "ovrp_GetHandNodePoseStateLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(latencyInSeconds));
}
// Autogenerated method: OVRPlugin/OVRP_1_18_0.ovrp_GetAppHasInputFocus
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_18_0::ovrp_GetAppHasInputFocus(ByRef<::GlobalNamespace::OVRPlugin::Bool> appHasInputFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_18_0::ovrp_GetAppHasInputFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_18_0", "ovrp_GetAppHasInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(appHasInputFocus));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_19_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_19_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_19_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_19_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_19_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_19_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_19_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_19_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_19_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_19_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_19_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_19_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_21_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_21_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/FixedFoveatedRenderingLevel
#include "GlobalNamespace/OVRPlugin_FixedFoveatedRenderingLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_21_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_21_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_21_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_21_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_21_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_21_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_21_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_21_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0.ovrp_GetTiledMultiResSupported
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetTiledMultiResSupported(ByRef<::GlobalNamespace::OVRPlugin::Bool> foveationSupported) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetTiledMultiResSupported");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", "ovrp_GetTiledMultiResSupported", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(foveationSupported));
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0.ovrp_GetTiledMultiResLevel
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetTiledMultiResLevel(ByRef<::GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel> level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetTiledMultiResLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", "ovrp_GetTiledMultiResLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(level));
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0.ovrp_SetTiledMultiResLevel
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_SetTiledMultiResLevel(::GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_SetTiledMultiResLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", "ovrp_SetTiledMultiResLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, level);
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0.ovrp_GetGPUUtilSupported
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetGPUUtilSupported(ByRef<::GlobalNamespace::OVRPlugin::Bool> gpuUtilSupported) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetGPUUtilSupported");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", "ovrp_GetGPUUtilSupported", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(gpuUtilSupported));
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0.ovrp_GetGPUUtilLevel
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetGPUUtilLevel(ByRef<float> gpuUtil) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetGPUUtilLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", "ovrp_GetGPUUtilLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(gpuUtil));
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0.ovrp_GetSystemDisplayFrequency2
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetSystemDisplayFrequency2(ByRef<float> systemDisplayFrequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetSystemDisplayFrequency2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", "ovrp_GetSystemDisplayFrequency2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(systemDisplayFrequency));
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0.ovrp_GetSystemDisplayAvailableFrequencies
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetSystemDisplayAvailableFrequencies(::System::IntPtr systemDisplayAvailableFrequencies, ByRef<int> numFrequencies) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetSystemDisplayAvailableFrequencies");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", "ovrp_GetSystemDisplayAvailableFrequencies", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(systemDisplayAvailableFrequencies), ::il2cpp_utils::ExtractType(numFrequencies)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, systemDisplayAvailableFrequencies, byref(numFrequencies));
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0.ovrp_SetSystemDisplayFrequency
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_SetSystemDisplayFrequency(float requestedFrequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_SetSystemDisplayFrequency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", "ovrp_SetSystemDisplayFrequency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestedFrequency)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, requestedFrequency);
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0.ovrp_GetAppAsymmetricFov
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetAppAsymmetricFov(ByRef<::GlobalNamespace::OVRPlugin::Bool> useAsymmetricFov) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetAppAsymmetricFov");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", "ovrp_GetAppAsymmetricFov", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(useAsymmetricFov));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_28_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_28_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Handedness
#include "GlobalNamespace/OVRPlugin_Handedness.hpp"
// Including type: OVRPlugin/LayerDesc
#include "GlobalNamespace/OVRPlugin_LayerDesc.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_28_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_28_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_28_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_28_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_28_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_28_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_28_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_28_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_28_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_28_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_28_0.ovrp_GetDominantHand
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_28_0::ovrp_GetDominantHand(ByRef<::GlobalNamespace::OVRPlugin::Handedness> dominantHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_28_0::ovrp_GetDominantHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_28_0", "ovrp_GetDominantHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Handedness&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(dominantHand));
}
// Autogenerated method: OVRPlugin/OVRP_1_28_0.ovrp_SendEvent
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_28_0::ovrp_SendEvent(::StringW name, ::StringW param) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_28_0::ovrp_SendEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_28_0", "ovrp_SendEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(param)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, name, param);
}
// Autogenerated method: OVRPlugin/OVRP_1_28_0.ovrp_EnqueueSetupLayer2
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_28_0::ovrp_EnqueueSetupLayer2(ByRef<::GlobalNamespace::OVRPlugin::LayerDesc> desc, int compositionDepth, ::System::IntPtr layerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_28_0::ovrp_EnqueueSetupLayer2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_28_0", "ovrp_EnqueueSetupLayer2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(desc), ::il2cpp_utils::ExtractType(compositionDepth), ::il2cpp_utils::ExtractType(layerId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(desc), compositionDepth, layerId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_29_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_29_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Vector3f
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: OVRPlugin/Step
#include "GlobalNamespace/OVRPlugin_Step.hpp"
// Including type: OVRPlugin/Node
#include "GlobalNamespace/OVRPlugin_Node.hpp"
// Including type: OVRPlugin/PoseStatef
#include "GlobalNamespace/OVRPlugin_PoseStatef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_29_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_29_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_29_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_29_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_29_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_29_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_29_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_29_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_29_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_29_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_29_0.ovrp_GetLayerAndroidSurfaceObject
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_29_0::ovrp_GetLayerAndroidSurfaceObject(int layerId, ByRef<::System::IntPtr> surfaceObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_29_0::ovrp_GetLayerAndroidSurfaceObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_29_0", "ovrp_GetLayerAndroidSurfaceObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerId), ::il2cpp_utils::ExtractType(surfaceObject)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, layerId, byref(surfaceObject));
}
// Autogenerated method: OVRPlugin/OVRP_1_29_0.ovrp_SetHeadPoseModifier
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_29_0::ovrp_SetHeadPoseModifier(ByRef<::GlobalNamespace::OVRPlugin::Quatf> relativeRotation, ByRef<::GlobalNamespace::OVRPlugin::Vector3f> relativeTranslation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_29_0::ovrp_SetHeadPoseModifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_29_0", "ovrp_SetHeadPoseModifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(relativeRotation), ::il2cpp_utils::ExtractType(relativeTranslation)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(relativeRotation), byref(relativeTranslation));
}
// Autogenerated method: OVRPlugin/OVRP_1_29_0.ovrp_GetHeadPoseModifier
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_29_0::ovrp_GetHeadPoseModifier(ByRef<::GlobalNamespace::OVRPlugin::Quatf> relativeRotation, ByRef<::GlobalNamespace::OVRPlugin::Vector3f> relativeTranslation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_29_0::ovrp_GetHeadPoseModifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_29_0", "ovrp_GetHeadPoseModifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Quatf&>(), ::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Vector3f&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(relativeRotation), byref(relativeTranslation));
}
// Autogenerated method: OVRPlugin/OVRP_1_29_0.ovrp_GetNodePoseStateRaw
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_29_0::ovrp_GetNodePoseStateRaw(::GlobalNamespace::OVRPlugin::Step stepId, int frameIndex, ::GlobalNamespace::OVRPlugin::Node nodeId, ByRef<::GlobalNamespace::OVRPlugin::PoseStatef> nodePoseState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_29_0::ovrp_GetNodePoseStateRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_29_0", "ovrp_GetNodePoseStateRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stepId), ::il2cpp_utils::ExtractType(frameIndex), ::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::PoseStatef&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, stepId, frameIndex, nodeId, byref(nodePoseState));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_30_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_30_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/PerfMetrics
#include "GlobalNamespace/OVRPlugin_PerfMetrics.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_30_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_30_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_30_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_30_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_30_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_30_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_30_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_30_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_30_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_30_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_30_0.ovrp_GetCurrentTrackingTransformPose
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_GetCurrentTrackingTransformPose(ByRef<::GlobalNamespace::OVRPlugin::Posef> trackingTransformPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_GetCurrentTrackingTransformPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_30_0", "ovrp_GetCurrentTrackingTransformPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Posef&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(trackingTransformPose));
}
// Autogenerated method: OVRPlugin/OVRP_1_30_0.ovrp_GetTrackingTransformRawPose
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_GetTrackingTransformRawPose(ByRef<::GlobalNamespace::OVRPlugin::Posef> trackingTransformRawPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_GetTrackingTransformRawPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_30_0", "ovrp_GetTrackingTransformRawPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Posef&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(trackingTransformRawPose));
}
// Autogenerated method: OVRPlugin/OVRP_1_30_0.ovrp_SendEvent2
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_SendEvent2(::StringW name, ::StringW param, ::StringW source) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_SendEvent2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_30_0", "ovrp_SendEvent2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(param), ::il2cpp_utils::ExtractType(source)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, name, param, source);
}
// Autogenerated method: OVRPlugin/OVRP_1_30_0.ovrp_IsPerfMetricsSupported
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_IsPerfMetricsSupported(::GlobalNamespace::OVRPlugin::PerfMetrics perfMetrics, ByRef<::GlobalNamespace::OVRPlugin::Bool> isSupported) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_IsPerfMetricsSupported");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_30_0", "ovrp_IsPerfMetricsSupported", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(perfMetrics), ::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, perfMetrics, byref(isSupported));
}
// Autogenerated method: OVRPlugin/OVRP_1_30_0.ovrp_GetPerfMetricsFloat
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_GetPerfMetricsFloat(::GlobalNamespace::OVRPlugin::PerfMetrics perfMetrics, ByRef<float> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_GetPerfMetricsFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_30_0", "ovrp_GetPerfMetricsFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(perfMetrics), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, perfMetrics, byref(value));
}
// Autogenerated method: OVRPlugin/OVRP_1_30_0.ovrp_GetPerfMetricsInt
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_GetPerfMetricsInt(::GlobalNamespace::OVRPlugin::PerfMetrics perfMetrics, ByRef<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_GetPerfMetricsInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_30_0", "ovrp_GetPerfMetricsInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(perfMetrics), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, perfMetrics, byref(value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_31_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_31_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_31_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_31_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_31_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_31_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_31_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_31_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_31_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_31_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_31_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_31_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_31_0.ovrp_GetTimeInSeconds
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_31_0::ovrp_GetTimeInSeconds(ByRef<double> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_31_0::ovrp_GetTimeInSeconds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_31_0", "ovrp_GetTimeInSeconds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(value));
}
// Autogenerated method: OVRPlugin/OVRP_1_31_0.ovrp_SetColorScaleAndOffset
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_31_0::ovrp_SetColorScaleAndOffset(::UnityEngine::Vector4 colorScale, ::UnityEngine::Vector4 colorOffset, ::GlobalNamespace::OVRPlugin::Bool applyToAllLayers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_31_0::ovrp_SetColorScaleAndOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_31_0", "ovrp_SetColorScaleAndOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorScale), ::il2cpp_utils::ExtractType(colorOffset), ::il2cpp_utils::ExtractType(applyToAllLayers)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, colorScale, colorOffset, applyToAllLayers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_32_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_32_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_32_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_32_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_32_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_32_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_32_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_32_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_32_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_32_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_32_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_32_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_32_0.ovrp_AddCustomMetadata
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_32_0::ovrp_AddCustomMetadata(::StringW name, ::StringW param) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_32_0::ovrp_AddCustomMetadata");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_32_0", "ovrp_AddCustomMetadata", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(param)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, name, param);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_34_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_34_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Vector3f
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/TextureRectMatrixf
#include "GlobalNamespace/OVRPlugin_TextureRectMatrixf.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_34_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_34_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_34_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_34_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_34_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_34_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_34_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_34_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_34_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_34_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_34_0.ovrp_EnqueueSubmitLayer2
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_34_0::ovrp_EnqueueSubmitLayer2(uint flags, ::System::IntPtr textureLeft, ::System::IntPtr textureRight, int layerId, int frameIndex, ByRef<::GlobalNamespace::OVRPlugin::Posef> pose, ByRef<::GlobalNamespace::OVRPlugin::Vector3f> scale, int layerIndex, ::GlobalNamespace::OVRPlugin::Bool overrideTextureRectMatrix, ByRef<::GlobalNamespace::OVRPlugin::TextureRectMatrixf> textureRectMatrix, ::GlobalNamespace::OVRPlugin::Bool overridePerLayerColorScaleAndOffset, ByRef<::UnityEngine::Vector4> colorScale, ByRef<::UnityEngine::Vector4> colorOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_34_0::ovrp_EnqueueSubmitLayer2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_34_0", "ovrp_EnqueueSubmitLayer2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(textureLeft), ::il2cpp_utils::ExtractType(textureRight), ::il2cpp_utils::ExtractType(layerId), ::il2cpp_utils::ExtractType(frameIndex), ::il2cpp_utils::ExtractType(pose), ::il2cpp_utils::ExtractType(scale), ::il2cpp_utils::ExtractType(layerIndex), ::il2cpp_utils::ExtractType(overrideTextureRectMatrix), ::il2cpp_utils::ExtractType(textureRectMatrix), ::il2cpp_utils::ExtractType(overridePerLayerColorScaleAndOffset), ::il2cpp_utils::ExtractType(colorScale), ::il2cpp_utils::ExtractType(colorOffset)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, flags, textureLeft, textureRight, layerId, frameIndex, byref(pose), byref(scale), layerIndex, overrideTextureRectMatrix, byref(textureRectMatrix), overridePerLayerColorScaleAndOffset, byref(colorScale), byref(colorOffset));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_35_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_35_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_35_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_35_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_35_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_35_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_35_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_35_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_35_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_35_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_35_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_35_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_36_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_36_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_36_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_36_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_36_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_36_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_36_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_36_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_36_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_36_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_36_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_36_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_37_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_37_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_37_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_37_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_37_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_37_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_37_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_37_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_37_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_37_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_37_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_37_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_38_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_38_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/TrackingOrigin
#include "GlobalNamespace/OVRPlugin_TrackingOrigin.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/Media/MrcActivationMode
#include "GlobalNamespace/OVRPlugin_Media_MrcActivationMode.hpp"
// Including type: OVRPlugin/Media/InputVideoBufferType
#include "GlobalNamespace/OVRPlugin_Media_InputVideoBufferType.hpp"
// Including type: OVRPlugin/Node
#include "GlobalNamespace/OVRPlugin_Node.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_38_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_38_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_38_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_38_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_38_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_GetTrackingTransformRelativePose
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_GetTrackingTransformRelativePose(ByRef<::GlobalNamespace::OVRPlugin::Posef> trackingTransformRelativePose, ::GlobalNamespace::OVRPlugin::TrackingOrigin trackingOrigin) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_GetTrackingTransformRelativePose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_GetTrackingTransformRelativePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(trackingTransformRelativePose), ::il2cpp_utils::ExtractType(trackingOrigin)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(trackingTransformRelativePose), trackingOrigin);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_Initialize
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_Shutdown
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_Shutdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_Shutdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_Shutdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_GetInitialized
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetInitialized(ByRef<::GlobalNamespace::OVRPlugin::Bool> initialized) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_GetInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(initialized));
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_Update
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_GetMrcActivationMode
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcActivationMode(ByRef<::GlobalNamespace::OVRPlugin::Media::MrcActivationMode> activationMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcActivationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_GetMrcActivationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Media::MrcActivationMode&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(activationMode));
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_SetMrcActivationMode
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcActivationMode(::GlobalNamespace::OVRPlugin::Media::MrcActivationMode activationMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcActivationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_SetMrcActivationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(activationMode)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, activationMode);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_IsMrcEnabled
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_IsMrcEnabled(ByRef<::GlobalNamespace::OVRPlugin::Bool> mrcEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_IsMrcEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_IsMrcEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(mrcEnabled));
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_IsMrcActivated
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_IsMrcActivated(ByRef<::GlobalNamespace::OVRPlugin::Bool> mrcActivated) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_IsMrcActivated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_IsMrcActivated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(mrcActivated));
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_UseMrcDebugCamera
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_UseMrcDebugCamera(ByRef<::GlobalNamespace::OVRPlugin::Bool> useMrcDebugCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_UseMrcDebugCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_UseMrcDebugCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(useMrcDebugCamera));
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_SetMrcInputVideoBufferType
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcInputVideoBufferType(::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType inputVideoBufferType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcInputVideoBufferType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_SetMrcInputVideoBufferType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inputVideoBufferType)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, inputVideoBufferType);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_GetMrcInputVideoBufferType
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcInputVideoBufferType(ByRef<::GlobalNamespace::OVRPlugin::Media::InputVideoBufferType> inputVideoBufferType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcInputVideoBufferType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_GetMrcInputVideoBufferType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inputVideoBufferType)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(inputVideoBufferType));
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_SetMrcFrameSize
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcFrameSize(int frameWidth, int frameHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcFrameSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_SetMrcFrameSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frameWidth), ::il2cpp_utils::ExtractType(frameHeight)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, frameWidth, frameHeight);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_GetMrcFrameSize
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcFrameSize(ByRef<int> frameWidth, ByRef<int> frameHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcFrameSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_GetMrcFrameSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frameWidth), ::il2cpp_utils::ExtractType(frameHeight)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(frameWidth), byref(frameHeight));
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_SetMrcAudioSampleRate
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcAudioSampleRate(int sampleRate) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcAudioSampleRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_SetMrcAudioSampleRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sampleRate)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sampleRate);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_GetMrcAudioSampleRate
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcAudioSampleRate(ByRef<int> sampleRate) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcAudioSampleRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_GetMrcAudioSampleRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sampleRate)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(sampleRate));
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_SetMrcFrameImageFlipped
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcFrameImageFlipped(::GlobalNamespace::OVRPlugin::Bool flipped) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcFrameImageFlipped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_SetMrcFrameImageFlipped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flipped)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, flipped);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_GetMrcFrameImageFlipped
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcFrameImageFlipped(ByRef<::GlobalNamespace::OVRPlugin::Bool> flipped) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcFrameImageFlipped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_GetMrcFrameImageFlipped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flipped)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(flipped));
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_EncodeMrcFrame
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_EncodeMrcFrame(::System::IntPtr rawBuffer, ::System::IntPtr audioDataPtr, int audioDataLen, int audioChannels, double timestamp, ByRef<int> outSyncId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_EncodeMrcFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_EncodeMrcFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rawBuffer), ::il2cpp_utils::ExtractType(audioDataPtr), ::il2cpp_utils::ExtractType(audioDataLen), ::il2cpp_utils::ExtractType(audioChannels), ::il2cpp_utils::ExtractType(timestamp), ::il2cpp_utils::ExtractType(outSyncId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, rawBuffer, audioDataPtr, audioDataLen, audioChannels, timestamp, byref(outSyncId));
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_EncodeMrcFrameWithDualTextures
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_EncodeMrcFrameWithDualTextures(::System::IntPtr backgroundTextureHandle, ::System::IntPtr foregroundTextureHandle, ::System::IntPtr audioData, int audioDataLen, int audioChannels, double timestamp, ByRef<int> outSyncId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_EncodeMrcFrameWithDualTextures");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_EncodeMrcFrameWithDualTextures", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(backgroundTextureHandle), ::il2cpp_utils::ExtractType(foregroundTextureHandle), ::il2cpp_utils::ExtractType(audioData), ::il2cpp_utils::ExtractType(audioDataLen), ::il2cpp_utils::ExtractType(audioChannels), ::il2cpp_utils::ExtractType(timestamp), ::il2cpp_utils::ExtractType(outSyncId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, backgroundTextureHandle, foregroundTextureHandle, audioData, audioDataLen, audioChannels, timestamp, byref(outSyncId));
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_SyncMrcFrame
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SyncMrcFrame(int syncId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SyncMrcFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_SyncMrcFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(syncId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, syncId);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_SetDeveloperMode
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_SetDeveloperMode(::GlobalNamespace::OVRPlugin::Bool active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_SetDeveloperMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_SetDeveloperMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(active)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, active);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_GetNodeOrientationValid
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_GetNodeOrientationValid(::GlobalNamespace::OVRPlugin::Node nodeId, ByRef<::GlobalNamespace::OVRPlugin::Bool> nodeOrientationValid) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_GetNodeOrientationValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_GetNodeOrientationValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractType(nodeOrientationValid)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, nodeId, byref(nodeOrientationValid));
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_GetNodePositionValid
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_GetNodePositionValid(::GlobalNamespace::OVRPlugin::Node nodeId, ByRef<::GlobalNamespace::OVRPlugin::Bool> nodePositionValid) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_GetNodePositionValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_GetNodePositionValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractType(nodePositionValid)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, nodeId, byref(nodePositionValid));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_39_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_39_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_39_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_39_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_39_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_39_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_39_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_39_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_39_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_39_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_39_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_39_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_40_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_40_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_40_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_40_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_40_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_40_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_40_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_40_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_40_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_40_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_40_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_40_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_41_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_41_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_41_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_41_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_41_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_41_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_41_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_41_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_41_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_41_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_41_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_41_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_42_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_42_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_42_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_42_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_42_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_42_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_42_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_42_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_42_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_42_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_42_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_42_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_42_0.ovrp_GetAdaptiveGpuPerformanceScale2
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_42_0::ovrp_GetAdaptiveGpuPerformanceScale2(ByRef<float> adaptiveGpuPerformanceScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_42_0::ovrp_GetAdaptiveGpuPerformanceScale2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_42_0", "ovrp_GetAdaptiveGpuPerformanceScale2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(adaptiveGpuPerformanceScale)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(adaptiveGpuPerformanceScale));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_43_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_43_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_43_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_43_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_43_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_43_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_43_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_43_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_43_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_43_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_43_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_43_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_44_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_44_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/Step
#include "GlobalNamespace/OVRPlugin_Step.hpp"
// Including type: OVRPlugin/Hand
#include "GlobalNamespace/OVRPlugin_Hand.hpp"
// Including type: OVRPlugin/MeshType
#include "GlobalNamespace/OVRPlugin_MeshType.hpp"
// Including type: OVRPlugin/Fovf
#include "GlobalNamespace/OVRPlugin_Fovf.hpp"
// Including type: OVRPlugin/CameraIntrinsics
#include "GlobalNamespace/OVRPlugin_CameraIntrinsics.hpp"
// Including type: OVRPlugin/CameraExtrinsics
#include "GlobalNamespace/OVRPlugin_CameraExtrinsics.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_44_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_44_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_44_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_44_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_44_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_44_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_44_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_44_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_GetHandTrackingEnabled
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetHandTrackingEnabled(ByRef<::GlobalNamespace::OVRPlugin::Bool> handTrackingEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetHandTrackingEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_GetHandTrackingEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handTrackingEnabled)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(handTrackingEnabled));
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_GetHandState
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetHandState(::GlobalNamespace::OVRPlugin::Step stepId, ::GlobalNamespace::OVRPlugin::Hand hand, ByRef<::GlobalNamespace::OVRPlugin::HandStateInternal> handState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetHandState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_GetHandState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stepId), ::il2cpp_utils::ExtractType(hand), ::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::HandStateInternal&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, stepId, hand, byref(handState));
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_GetSkeleton
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetSkeleton(::GlobalNamespace::OVRPlugin::SkeletonType skeletonType, ByRef<::GlobalNamespace::OVRPlugin::Skeleton> skeleton) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetSkeleton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_GetSkeleton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(skeletonType), ::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Skeleton&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, skeletonType, byref(skeleton));
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_GetMesh
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetMesh(::GlobalNamespace::OVRPlugin::MeshType meshType, ::System::IntPtr meshPtr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_GetMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(meshType), ::il2cpp_utils::ExtractType(meshPtr)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, meshType, meshPtr);
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_OverrideExternalCameraFov
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_OverrideExternalCameraFov(int cameraId, ::GlobalNamespace::OVRPlugin::Bool useOverriddenFov, ByRef<::GlobalNamespace::OVRPlugin::Fovf> fov) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_OverrideExternalCameraFov");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_OverrideExternalCameraFov", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraId), ::il2cpp_utils::ExtractType(useOverriddenFov), ::il2cpp_utils::ExtractType(fov)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cameraId, useOverriddenFov, byref(fov));
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_GetUseOverriddenExternalCameraFov
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetUseOverriddenExternalCameraFov(int cameraId, ByRef<::GlobalNamespace::OVRPlugin::Bool> useOverriddenFov) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetUseOverriddenExternalCameraFov");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_GetUseOverriddenExternalCameraFov", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraId), ::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cameraId, byref(useOverriddenFov));
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_OverrideExternalCameraStaticPose
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_OverrideExternalCameraStaticPose(int cameraId, ::GlobalNamespace::OVRPlugin::Bool useOverriddenPose, ByRef<::GlobalNamespace::OVRPlugin::Posef> poseInStageOrigin) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_OverrideExternalCameraStaticPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_OverrideExternalCameraStaticPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraId), ::il2cpp_utils::ExtractType(useOverriddenPose), ::il2cpp_utils::ExtractType(poseInStageOrigin)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cameraId, useOverriddenPose, byref(poseInStageOrigin));
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_GetUseOverriddenExternalCameraStaticPose
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetUseOverriddenExternalCameraStaticPose(int cameraId, ByRef<::GlobalNamespace::OVRPlugin::Bool> useOverriddenStaticPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetUseOverriddenExternalCameraStaticPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_GetUseOverriddenExternalCameraStaticPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraId), ::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cameraId, byref(useOverriddenStaticPose));
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_ResetDefaultExternalCamera
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_ResetDefaultExternalCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_ResetDefaultExternalCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_ResetDefaultExternalCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_SetDefaultExternalCamera
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_SetDefaultExternalCamera(::StringW cameraName, ByRef<::GlobalNamespace::OVRPlugin::CameraIntrinsics> cameraIntrinsics, ByRef<::GlobalNamespace::OVRPlugin::CameraExtrinsics> cameraExtrinsics) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_SetDefaultExternalCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_SetDefaultExternalCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraName), ::il2cpp_utils::ExtractType(cameraIntrinsics), ::il2cpp_utils::ExtractType(cameraExtrinsics)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cameraName, byref(cameraIntrinsics), byref(cameraExtrinsics));
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_GetLocalTrackingSpaceRecenterCount
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetLocalTrackingSpaceRecenterCount(ByRef<int> recenterCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetLocalTrackingSpaceRecenterCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_GetLocalTrackingSpaceRecenterCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(recenterCount)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(recenterCount));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_45_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_45_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_45_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_45_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_45_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_45_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_45_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_45_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_45_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_45_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_45_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_45_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_45_0.ovrp_GetSystemHmd3DofModeEnabled
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_45_0::ovrp_GetSystemHmd3DofModeEnabled(ByRef<::GlobalNamespace::OVRPlugin::Bool> enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_45_0::ovrp_GetSystemHmd3DofModeEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_45_0", "ovrp_GetSystemHmd3DofModeEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enabled)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(enabled));
}
// Autogenerated method: OVRPlugin/OVRP_1_45_0.ovrp_Media_SetAvailableQueueIndexVulkan
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_45_0::ovrp_Media_SetAvailableQueueIndexVulkan(uint queueIndexVk) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_45_0::ovrp_Media_SetAvailableQueueIndexVulkan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_45_0", "ovrp_Media_SetAvailableQueueIndexVulkan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(queueIndexVk)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, queueIndexVk);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_46_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_46_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_46_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_46_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_46_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_46_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_46_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_46_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_46_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_46_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_46_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_46_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_46_0.ovrp_GetTiledMultiResDynamic
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_46_0::ovrp_GetTiledMultiResDynamic(ByRef<::GlobalNamespace::OVRPlugin::Bool> isDynamic) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_46_0::ovrp_GetTiledMultiResDynamic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_46_0", "ovrp_GetTiledMultiResDynamic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(isDynamic));
}
// Autogenerated method: OVRPlugin/OVRP_1_46_0.ovrp_SetTiledMultiResDynamic
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_46_0::ovrp_SetTiledMultiResDynamic(::GlobalNamespace::OVRPlugin::Bool isDynamic) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_46_0::ovrp_SetTiledMultiResDynamic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_46_0", "ovrp_SetTiledMultiResDynamic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isDynamic)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, isDynamic);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_47_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_47_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_47_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_47_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_47_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_47_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_47_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_47_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_47_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_47_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_47_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_47_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_48_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_48_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/CameraIntrinsics
#include "GlobalNamespace/OVRPlugin_CameraIntrinsics.hpp"
// Including type: OVRPlugin/CameraExtrinsics
#include "GlobalNamespace/OVRPlugin_CameraExtrinsics.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_48_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_48_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_48_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_48_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_48_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_48_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_48_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_48_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_48_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_48_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_48_0.ovrp_SetExternalCameraProperties
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_48_0::ovrp_SetExternalCameraProperties(::StringW cameraName, ByRef<::GlobalNamespace::OVRPlugin::CameraIntrinsics> cameraIntrinsics, ByRef<::GlobalNamespace::OVRPlugin::CameraExtrinsics> cameraExtrinsics) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_48_0::ovrp_SetExternalCameraProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_48_0", "ovrp_SetExternalCameraProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraName), ::il2cpp_utils::ExtractType(cameraIntrinsics), ::il2cpp_utils::ExtractType(cameraExtrinsics)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cameraName, byref(cameraIntrinsics), byref(cameraExtrinsics));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_49_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_49_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/ColorSpace
#include "GlobalNamespace/OVRPlugin_ColorSpace.hpp"
// Including type: OVRPlugin/CameraAnchorType
#include "GlobalNamespace/OVRPlugin_CameraAnchorType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_49_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_49_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_49_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_49_0", "version", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 OVRP_ANCHOR_NAME_SIZE
int GlobalNamespace::OVRPlugin::OVRP_1_49_0::_get_OVRP_ANCHOR_NAME_SIZE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::_get_OVRP_ANCHOR_NAME_SIZE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRPlugin/OVRP_1_49_0", "OVRP_ANCHOR_NAME_SIZE"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 OVRP_ANCHOR_NAME_SIZE
void GlobalNamespace::OVRPlugin::OVRP_1_49_0::_set_OVRP_ANCHOR_NAME_SIZE(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::_set_OVRP_ANCHOR_NAME_SIZE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_49_0", "OVRP_ANCHOR_NAME_SIZE", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_49_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_SetClientColorDesc
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_SetClientColorDesc(::GlobalNamespace::OVRPlugin::ColorSpace colorSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_SetClientColorDesc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_SetClientColorDesc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorSpace)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, colorSpace);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_GetHmdColorDesc
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_GetHmdColorDesc(ByRef<::GlobalNamespace::OVRPlugin::ColorSpace> colorSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_GetHmdColorDesc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_GetHmdColorDesc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorSpace)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(colorSpace));
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_EncodeMrcFrameWithPoseTime
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_EncodeMrcFrameWithPoseTime(::System::IntPtr rawBuffer, ::System::IntPtr audioDataPtr, int audioDataLen, int audioChannels, double timestamp, double poseTime, ByRef<int> outSyncId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_EncodeMrcFrameWithPoseTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_EncodeMrcFrameWithPoseTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rawBuffer), ::il2cpp_utils::ExtractType(audioDataPtr), ::il2cpp_utils::ExtractType(audioDataLen), ::il2cpp_utils::ExtractType(audioChannels), ::il2cpp_utils::ExtractType(timestamp), ::il2cpp_utils::ExtractType(poseTime), ::il2cpp_utils::ExtractType(outSyncId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, rawBuffer, audioDataPtr, audioDataLen, audioChannels, timestamp, poseTime, byref(outSyncId));
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime(::System::IntPtr backgroundTextureHandle, ::System::IntPtr foregroundTextureHandle, ::System::IntPtr audioData, int audioDataLen, int audioChannels, double timestamp, double poseTime, ByRef<int> outSyncId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(backgroundTextureHandle), ::il2cpp_utils::ExtractType(foregroundTextureHandle), ::il2cpp_utils::ExtractType(audioData), ::il2cpp_utils::ExtractType(audioDataLen), ::il2cpp_utils::ExtractType(audioChannels), ::il2cpp_utils::ExtractType(timestamp), ::il2cpp_utils::ExtractType(poseTime), ::il2cpp_utils::ExtractType(outSyncId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, backgroundTextureHandle, foregroundTextureHandle, audioData, audioDataLen, audioChannels, timestamp, poseTime, byref(outSyncId));
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_SetHeadsetControllerPose
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_SetHeadsetControllerPose(::GlobalNamespace::OVRPlugin::Posef headsetPose, ::GlobalNamespace::OVRPlugin::Posef leftControllerPose, ::GlobalNamespace::OVRPlugin::Posef rightControllerPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_SetHeadsetControllerPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_SetHeadsetControllerPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headsetPose), ::il2cpp_utils::ExtractType(leftControllerPose), ::il2cpp_utils::ExtractType(rightControllerPose)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, headsetPose, leftControllerPose, rightControllerPose);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_EnumerateCameraAnchorHandles
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_EnumerateCameraAnchorHandles(ByRef<int> anchorCount, ByRef<::System::IntPtr> CameraAnchorHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_EnumerateCameraAnchorHandles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_EnumerateCameraAnchorHandles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorCount), ::il2cpp_utils::ExtractType(CameraAnchorHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(anchorCount), byref(CameraAnchorHandle));
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_GetCurrentCameraAnchorHandle
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCurrentCameraAnchorHandle(ByRef<::System::IntPtr> anchorHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCurrentCameraAnchorHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_GetCurrentCameraAnchorHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(anchorHandle));
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_GetCameraAnchorName
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraAnchorName(::System::IntPtr anchorHandle, ::ArrayW<::Il2CppChar> cameraName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraAnchorName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_GetCameraAnchorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorHandle), ::il2cpp_utils::ExtractType(cameraName)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, anchorHandle, cameraName);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_GetCameraAnchorHandle
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraAnchorHandle(::System::IntPtr anchorName, ByRef<::System::IntPtr> anchorHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraAnchorHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_GetCameraAnchorHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorName), ::il2cpp_utils::ExtractType(anchorHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, anchorName, byref(anchorHandle));
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_GetCameraAnchorType
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraAnchorType(::System::IntPtr anchorHandle, ByRef<::GlobalNamespace::OVRPlugin::CameraAnchorType> anchorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraAnchorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_GetCameraAnchorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorHandle), ::il2cpp_utils::ExtractType(anchorType)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, anchorHandle, byref(anchorType));
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_CreateCustomCameraAnchor
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_CreateCustomCameraAnchor(::System::IntPtr anchorName, ByRef<::System::IntPtr> anchorHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_CreateCustomCameraAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_CreateCustomCameraAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorName), ::il2cpp_utils::ExtractType(anchorHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, anchorName, byref(anchorHandle));
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_DestroyCustomCameraAnchor
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_DestroyCustomCameraAnchor(::System::IntPtr anchorHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_DestroyCustomCameraAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_DestroyCustomCameraAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, anchorHandle);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_GetCustomCameraAnchorPose
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCustomCameraAnchorPose(::System::IntPtr anchorHandle, ByRef<::GlobalNamespace::OVRPlugin::Posef> pose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCustomCameraAnchorPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_GetCustomCameraAnchorPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorHandle), ::il2cpp_utils::ExtractType(pose)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, anchorHandle, byref(pose));
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_SetCustomCameraAnchorPose
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_SetCustomCameraAnchorPose(::System::IntPtr anchorHandle, ::GlobalNamespace::OVRPlugin::Posef pose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_SetCustomCameraAnchorPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_SetCustomCameraAnchorPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorHandle), ::il2cpp_utils::ExtractType(pose)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, anchorHandle, pose);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_GetCameraMinMaxDistance
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraMinMaxDistance(::System::IntPtr anchorHandle, ByRef<double> minDistance, ByRef<double> maxDistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraMinMaxDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_GetCameraMinMaxDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorHandle), ::il2cpp_utils::ExtractType(minDistance), ::il2cpp_utils::ExtractType(maxDistance)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, anchorHandle, byref(minDistance), byref(maxDistance));
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_SetCameraMinMaxDistance
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_SetCameraMinMaxDistance(::System::IntPtr anchorHandle, double minDistance, double maxDistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_SetCameraMinMaxDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_SetCameraMinMaxDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorHandle), ::il2cpp_utils::ExtractType(minDistance), ::il2cpp_utils::ExtractType(maxDistance)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, anchorHandle, minDistance, maxDistance);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_50_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_50_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_50_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_50_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_50_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_50_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_50_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_50_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_50_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_50_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_50_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_50_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_51_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_51_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_51_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_51_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_51_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_51_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_51_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_51_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_51_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_51_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_51_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_51_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_52_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_52_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_52_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_52_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_52_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_52_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_52_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_52_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_52_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_52_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_52_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_52_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_53_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_53_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_53_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_53_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_53_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_53_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_53_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_53_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_53_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_53_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_53_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_53_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_54_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_54_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_54_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_54_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_54_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_54_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_54_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_54_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_54_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_54_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_54_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_54_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_54_0.ovrp_Media_SetPlatformInitialized
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_54_0::ovrp_Media_SetPlatformInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_54_0::ovrp_Media_SetPlatformInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_54_0", "ovrp_Media_SetPlatformInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_55_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_55_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/EventDataBuffer
#include "GlobalNamespace/OVRPlugin_EventDataBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_55_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_55_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_55_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_55_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_55_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_55_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_55_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_55_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_55_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_55_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_55_0.ovrp_GetSkeleton2
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_55_0::ovrp_GetSkeleton2(::GlobalNamespace::OVRPlugin::SkeletonType skeletonType, ByRef<::GlobalNamespace::OVRPlugin::Skeleton2Internal> skeleton) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_55_0::ovrp_GetSkeleton2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_55_0", "ovrp_GetSkeleton2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(skeletonType), ::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Skeleton2Internal&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, skeletonType, byref(skeleton));
}
// Autogenerated method: OVRPlugin/OVRP_1_55_0.ovrp_PollEvent
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_55_0::ovrp_PollEvent(ByRef<::GlobalNamespace::OVRPlugin::EventDataBuffer> eventDataBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_55_0::ovrp_PollEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_55_0", "ovrp_PollEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventDataBuffer)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(eventDataBuffer));
}
// Autogenerated method: OVRPlugin/OVRP_1_55_0.ovrp_GetNativeXrApiType
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_55_0::ovrp_GetNativeXrApiType(ByRef<::GlobalNamespace::OVRPlugin::XrApi> xrApi) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_55_0::ovrp_GetNativeXrApiType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_55_0", "ovrp_GetNativeXrApiType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::XrApi&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(xrApi));
}
// Autogenerated method: OVRPlugin/OVRP_1_55_0.ovrp_GetNativeOpenXRHandles
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_55_0::ovrp_GetNativeOpenXRHandles(ByRef<uint64_t> xrInstance, ByRef<uint64_t> xrSession) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_55_0::ovrp_GetNativeOpenXRHandles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_55_0", "ovrp_GetNativeOpenXRHandles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(xrInstance), byref(xrSession));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_55_1
#include "GlobalNamespace/OVRPlugin_OVRP_1_55_1.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/EventType
#include "GlobalNamespace/OVRPlugin_EventType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_55_1::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_55_1::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_55_1", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_55_1::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_55_1::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_55_1", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_55_1..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_55_1::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_55_1::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_55_1", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_55_1.ovrp_PollEvent2
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_55_1::ovrp_PollEvent2(ByRef<::GlobalNamespace::OVRPlugin::EventType> eventType, ByRef<::System::IntPtr> eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_55_1::ovrp_PollEvent2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_55_1", "ovrp_PollEvent2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(eventData)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(eventType), byref(eventData));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_56_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_56_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_56_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_56_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_56_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_56_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_56_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_56_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_56_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_56_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_56_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_56_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_57_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_57_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Media/PlatformCameraMode
#include "GlobalNamespace/OVRPlugin_Media_PlatformCameraMode.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/Vector2f
#include "GlobalNamespace/OVRPlugin_Vector2f.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_57_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_57_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_57_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_57_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_57_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_57_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_57_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_57_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_57_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_57_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_57_0.ovrp_Media_GetPlatformCameraMode
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_Media_GetPlatformCameraMode(ByRef<::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode> platformCameraMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_Media_GetPlatformCameraMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_57_0", "ovrp_Media_GetPlatformCameraMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(platformCameraMode));
}
// Autogenerated method: OVRPlugin/OVRP_1_57_0.ovrp_Media_SetPlatformCameraMode
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_Media_SetPlatformCameraMode(::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode platformCameraMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_Media_SetPlatformCameraMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_57_0", "ovrp_Media_SetPlatformCameraMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(platformCameraMode)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, platformCameraMode);
}
// Autogenerated method: OVRPlugin/OVRP_1_57_0.ovrp_SetEyeFovPremultipliedAlphaMode
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_SetEyeFovPremultipliedAlphaMode(::GlobalNamespace::OVRPlugin::Bool enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_SetEyeFovPremultipliedAlphaMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_57_0", "ovrp_SetEyeFovPremultipliedAlphaMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enabled)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, enabled);
}
// Autogenerated method: OVRPlugin/OVRP_1_57_0.ovrp_GetEyeFovPremultipliedAlphaMode
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_GetEyeFovPremultipliedAlphaMode(ByRef<::GlobalNamespace::OVRPlugin::Bool> enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_GetEyeFovPremultipliedAlphaMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_57_0", "ovrp_GetEyeFovPremultipliedAlphaMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enabled)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(enabled));
}
// Autogenerated method: OVRPlugin/OVRP_1_57_0.ovrp_SetKeyboardOverlayUV
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_SetKeyboardOverlayUV(::GlobalNamespace::OVRPlugin::Vector2f uv) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_SetKeyboardOverlayUV");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_57_0", "ovrp_SetKeyboardOverlayUV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uv)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, uv);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_58_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_58_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_58_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_58_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_58_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_58_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_58_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_58_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_58_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_58_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_58_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_58_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_59_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_59_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_59_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_59_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_59_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_59_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_59_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_59_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_59_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_59_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_59_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_59_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_60_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_60_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_60_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_60_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_60_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_60_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_60_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_60_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_60_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_60_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_60_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_60_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_61_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_61_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_61_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_61_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_61_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_61_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_61_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_61_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_61_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_61_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_61_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_61_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_62_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_62_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_62_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_62_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_62_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_62_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_62_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_62_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_62_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_62_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_62_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_62_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_63_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_63_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/InsightPassthroughStyle
#include "GlobalNamespace/OVRPlugin_InsightPassthroughStyle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_63_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_63_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_63_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_63_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_63_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_63_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_63_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_63_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_63_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_63_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_63_0.ovrp_InitializeInsightPassthrough
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_63_0::ovrp_InitializeInsightPassthrough() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_63_0::ovrp_InitializeInsightPassthrough");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_63_0", "ovrp_InitializeInsightPassthrough", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_63_0.ovrp_ShutdownInsightPassthrough
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_63_0::ovrp_ShutdownInsightPassthrough() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_63_0::ovrp_ShutdownInsightPassthrough");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_63_0", "ovrp_ShutdownInsightPassthrough", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_63_0.ovrp_GetInsightPassthroughInitialized
::GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_63_0::ovrp_GetInsightPassthroughInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_63_0::ovrp_GetInsightPassthroughInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_63_0", "ovrp_GetInsightPassthroughInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_63_0.ovrp_SetInsightPassthroughStyle
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_63_0::ovrp_SetInsightPassthroughStyle(int layerId, ::GlobalNamespace::OVRPlugin::InsightPassthroughStyle style) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_63_0::ovrp_SetInsightPassthroughStyle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_63_0", "ovrp_SetInsightPassthroughStyle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerId), ::il2cpp_utils::ExtractType(style)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, layerId, style);
}
// Autogenerated method: OVRPlugin/OVRP_1_63_0.ovrp_CreateInsightTriangleMesh
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_63_0::ovrp_CreateInsightTriangleMesh(int layerId, ::System::IntPtr vertices, int vertexCount, ::System::IntPtr triangles, int triangleCount, ByRef<uint64_t> meshHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_63_0::ovrp_CreateInsightTriangleMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_63_0", "ovrp_CreateInsightTriangleMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerId), ::il2cpp_utils::ExtractType(vertices), ::il2cpp_utils::ExtractType(vertexCount), ::il2cpp_utils::ExtractType(triangles), ::il2cpp_utils::ExtractType(triangleCount), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, layerId, vertices, vertexCount, triangles, triangleCount, byref(meshHandle));
}
// Autogenerated method: OVRPlugin/OVRP_1_63_0.ovrp_DestroyInsightTriangleMesh
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_63_0::ovrp_DestroyInsightTriangleMesh(uint64_t meshHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_63_0::ovrp_DestroyInsightTriangleMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_63_0", "ovrp_DestroyInsightTriangleMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(meshHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, meshHandle);
}
// Autogenerated method: OVRPlugin/OVRP_1_63_0.ovrp_AddInsightPassthroughSurfaceGeometry
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_63_0::ovrp_AddInsightPassthroughSurfaceGeometry(int layerId, uint64_t meshHandle, ::UnityEngine::Matrix4x4 T_world_model, ByRef<uint64_t> geometryInstanceHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_63_0::ovrp_AddInsightPassthroughSurfaceGeometry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_63_0", "ovrp_AddInsightPassthroughSurfaceGeometry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerId), ::il2cpp_utils::ExtractType(meshHandle), ::il2cpp_utils::ExtractType(T_world_model), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, layerId, meshHandle, T_world_model, byref(geometryInstanceHandle));
}
// Autogenerated method: OVRPlugin/OVRP_1_63_0.ovrp_DestroyInsightPassthroughGeometryInstance
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_63_0::ovrp_DestroyInsightPassthroughGeometryInstance(uint64_t geometryInstanceHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_63_0::ovrp_DestroyInsightPassthroughGeometryInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_63_0", "ovrp_DestroyInsightPassthroughGeometryInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometryInstanceHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometryInstanceHandle);
}
// Autogenerated method: OVRPlugin/OVRP_1_63_0.ovrp_UpdateInsightPassthroughGeometryTransform
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_63_0::ovrp_UpdateInsightPassthroughGeometryTransform(uint64_t geometryInstanceHandle, ::UnityEngine::Matrix4x4 T_world_model) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_63_0::ovrp_UpdateInsightPassthroughGeometryTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_63_0", "ovrp_UpdateInsightPassthroughGeometryTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometryInstanceHandle), ::il2cpp_utils::ExtractType(T_world_model)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometryInstanceHandle, T_world_model);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_64_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_64_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_64_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_64_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_64_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_64_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_64_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_64_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_64_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_64_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_64_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_64_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_65_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_65_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_65_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_65_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_65_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_65_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_65_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_65_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_65_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_65_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_65_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_65_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_65_0.ovrp_KtxLoadFromMemory
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_65_0::ovrp_KtxLoadFromMemory(ByRef<::System::IntPtr> data, uint length, ByRef<::System::IntPtr> texture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_65_0::ovrp_KtxLoadFromMemory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_65_0", "ovrp_KtxLoadFromMemory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(texture)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(data), length, byref(texture));
}
// Autogenerated method: OVRPlugin/OVRP_1_65_0.ovrp_KtxTextureWidth
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_65_0::ovrp_KtxTextureWidth(::System::IntPtr texture, ByRef<uint> width) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_65_0::ovrp_KtxTextureWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_65_0", "ovrp_KtxTextureWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture), ::il2cpp_utils::ExtractType(width)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, texture, byref(width));
}
// Autogenerated method: OVRPlugin/OVRP_1_65_0.ovrp_KtxTextureHeight
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_65_0::ovrp_KtxTextureHeight(::System::IntPtr texture, ByRef<uint> height) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_65_0::ovrp_KtxTextureHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_65_0", "ovrp_KtxTextureHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture), ::il2cpp_utils::ExtractType(height)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, texture, byref(height));
}
// Autogenerated method: OVRPlugin/OVRP_1_65_0.ovrp_KtxTranscode
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_65_0::ovrp_KtxTranscode(::System::IntPtr texture, uint format) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_65_0::ovrp_KtxTranscode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_65_0", "ovrp_KtxTranscode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture), ::il2cpp_utils::ExtractType(format)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, texture, format);
}
// Autogenerated method: OVRPlugin/OVRP_1_65_0.ovrp_KtxGetTextureData
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_65_0::ovrp_KtxGetTextureData(::System::IntPtr texture, ::System::IntPtr data, uint bufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_65_0::ovrp_KtxGetTextureData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_65_0", "ovrp_KtxGetTextureData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(bufferSize)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, texture, data, bufferSize);
}
// Autogenerated method: OVRPlugin/OVRP_1_65_0.ovrp_KtxTextureSize
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_65_0::ovrp_KtxTextureSize(::System::IntPtr texture, ByRef<uint> size) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_65_0::ovrp_KtxTextureSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_65_0", "ovrp_KtxTextureSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture), ::il2cpp_utils::ExtractType(size)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, texture, byref(size));
}
// Autogenerated method: OVRPlugin/OVRP_1_65_0.ovrp_KtxDestroy
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_65_0::ovrp_KtxDestroy(::System::IntPtr texture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_65_0::ovrp_KtxDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_65_0", "ovrp_KtxDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, texture);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_66_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_66_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
::System::Version* GlobalNamespace::OVRPlugin::OVRP_1_66_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_66_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Version*>("", "OVRPlugin/OVRP_1_66_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_66_0::_set_version(::System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_66_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_66_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_66_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_66_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_66_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_66_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_66_0.ovrp_GetInsightPassthroughInitializationState
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_66_0::ovrp_GetInsightPassthroughInitializationState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_66_0::ovrp_GetInsightPassthroughInitializationState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_66_0", "ovrp_GetInsightPassthroughInitializationState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_66_0.ovrp_Media_IsCastingToRemoteClient
::GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_66_0::ovrp_Media_IsCastingToRemoteClient(ByRef<::GlobalNamespace::OVRPlugin::Bool> isCasting) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::OVRP_1_66_0::ovrp_Media_IsCastingToRemoteClient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_66_0", "ovrp_Media_IsCastingToRemoteClient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(isCasting));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRProfile
#include "GlobalNamespace/OVRProfile.hpp"
// Including type: OVRProfile/State
#include "GlobalNamespace/OVRProfile_State.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRProfile.get_id
::StringW GlobalNamespace::OVRProfile::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProfile::get_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: OVRProfile.get_userName
::StringW GlobalNamespace::OVRProfile::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProfile::get_userName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: OVRProfile.get_locale
::StringW GlobalNamespace::OVRProfile::get_locale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProfile::get_locale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_locale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: OVRProfile.get_ipd
float GlobalNamespace::OVRProfile::get_ipd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProfile::get_ipd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ipd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRProfile.get_eyeHeight
float GlobalNamespace::OVRProfile::get_eyeHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProfile::get_eyeHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eyeHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRProfile.get_eyeDepth
float GlobalNamespace::OVRProfile::get_eyeDepth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProfile::get_eyeDepth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eyeDepth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRProfile.get_neckHeight
float GlobalNamespace::OVRProfile::get_neckHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProfile::get_neckHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_neckHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRProfile.get_state
::GlobalNamespace::OVRProfile::State GlobalNamespace::OVRProfile::get_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProfile::get_state");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRProfile::State, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRProfile/State
#include "GlobalNamespace/OVRProfile_State.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRProfile/State NOT_TRIGGERED
::GlobalNamespace::OVRProfile::State GlobalNamespace::OVRProfile::State::_get_NOT_TRIGGERED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProfile::State::_get_NOT_TRIGGERED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRProfile::State>("", "OVRProfile/State", "NOT_TRIGGERED"));
}
// Autogenerated static field setter
// Set static field: static public OVRProfile/State NOT_TRIGGERED
void GlobalNamespace::OVRProfile::State::_set_NOT_TRIGGERED(::GlobalNamespace::OVRProfile::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProfile::State::_set_NOT_TRIGGERED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRProfile/State", "NOT_TRIGGERED", value));
}
// Autogenerated static field getter
// Get static field: static public OVRProfile/State LOADING
::GlobalNamespace::OVRProfile::State GlobalNamespace::OVRProfile::State::_get_LOADING() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProfile::State::_get_LOADING");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRProfile::State>("", "OVRProfile/State", "LOADING"));
}
// Autogenerated static field setter
// Set static field: static public OVRProfile/State LOADING
void GlobalNamespace::OVRProfile::State::_set_LOADING(::GlobalNamespace::OVRProfile::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProfile::State::_set_LOADING");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRProfile/State", "LOADING", value));
}
// Autogenerated static field getter
// Get static field: static public OVRProfile/State READY
::GlobalNamespace::OVRProfile::State GlobalNamespace::OVRProfile::State::_get_READY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProfile::State::_get_READY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRProfile::State>("", "OVRProfile/State", "READY"));
}
// Autogenerated static field setter
// Set static field: static public OVRProfile/State READY
void GlobalNamespace::OVRProfile::State::_set_READY(::GlobalNamespace::OVRProfile::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProfile::State::_set_READY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRProfile/State", "READY", value));
}
// Autogenerated static field getter
// Get static field: static public OVRProfile/State ERROR
::GlobalNamespace::OVRProfile::State GlobalNamespace::OVRProfile::State::_get_ERROR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProfile::State::_get_ERROR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRProfile::State>("", "OVRProfile/State", "ERROR"));
}
// Autogenerated static field setter
// Set static field: static public OVRProfile/State ERROR
void GlobalNamespace::OVRProfile::State::_set_ERROR(::GlobalNamespace::OVRProfile::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProfile::State::_set_ERROR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRProfile/State", "ERROR", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRProfile::State::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProfile::State::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRResources
#include "GlobalNamespace/OVRResources.hpp"
// Including type: OVRResources/<>c__DisplayClass2_0
#include "GlobalNamespace/OVRResources_--c__DisplayClass2_0.hpp"
// Including type: OVRResources/<>c__DisplayClass3_0`1
#include "GlobalNamespace/OVRResources_--c__DisplayClass3_0_1.hpp"
// Including type: UnityEngine.AssetBundle
#include "UnityEngine/AssetBundle.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.AssetBundle resourceBundle
::UnityEngine::AssetBundle* GlobalNamespace::OVRResources::_get_resourceBundle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRResources::_get_resourceBundle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AssetBundle*>("", "OVRResources", "resourceBundle"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.AssetBundle resourceBundle
void GlobalNamespace::OVRResources::_set_resourceBundle(::UnityEngine::AssetBundle* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRResources::_set_resourceBundle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRResources", "resourceBundle", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<System.String> assetNames
::System::Collections::Generic::List_1<::StringW>* GlobalNamespace::OVRResources::_get_assetNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRResources::_get_assetNames");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::StringW>*>("", "OVRResources", "assetNames"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<System.String> assetNames
void GlobalNamespace::OVRResources::_set_assetNames(::System::Collections::Generic::List_1<::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRResources::_set_assetNames");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRResources", "assetNames", value));
}
// Autogenerated method: OVRResources.Load
::UnityEngine::Object* GlobalNamespace::OVRResources::Load(::StringW path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRResources::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRResources", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Object*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, path);
}
// Autogenerated method: OVRResources.SetResourceBundle
void GlobalNamespace::OVRResources::SetResourceBundle(::UnityEngine::AssetBundle* bundle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRResources::SetResourceBundle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRResources", "SetResourceBundle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bundle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bundle);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRResources/<>c__DisplayClass2_0
#include "GlobalNamespace/OVRResources_--c__DisplayClass2_0.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String path
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::OVRResources::$$c__DisplayClass2_0::dyn_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRResources::$$c__DisplayClass2_0::dyn_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRResources/<>c__DisplayClass2_0.<Load>b__0
bool GlobalNamespace::OVRResources::$$c__DisplayClass2_0::$Load$b__0(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRResources::$$c__DisplayClass2_0::<Load>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Load>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, s);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRRuntimeSettings
#include "GlobalNamespace/OVRRuntimeSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public OVRManager/ColorSpace colorSpace
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_ColorSpace& GlobalNamespace::OVRRuntimeSettings::dyn_colorSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRuntimeSettings::dyn_colorSpace");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorSpace"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_ColorSpace*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRRuntimeSettings.GetRuntimeSettings
::GlobalNamespace::OVRRuntimeSettings* GlobalNamespace::OVRRuntimeSettings::GetRuntimeSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRuntimeSettings::GetRuntimeSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRRuntimeSettings", "GetRuntimeSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRRuntimeSettings*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSceneLoader
#include "GlobalNamespace/OVRSceneLoader.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: OVRSceneLoader/<DelayCanvasPosUpdate>d__24
#include "GlobalNamespace/OVRSceneLoader_-DelayCanvasPosUpdate-d__24.hpp"
// Including type: OVRSceneLoader/<onCheckSceneCoroutine>d__25
#include "GlobalNamespace/OVRSceneLoader_-onCheckSceneCoroutine-d__25.hpp"
// Including type: UnityEngine.Canvas
#include "UnityEngine/Canvas.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: UnityEngine.AsyncOperation
#include "UnityEngine/AsyncOperation.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.AssetBundle
#include "UnityEngine/AssetBundle.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String externalStoragePath
::StringW GlobalNamespace::OVRSceneLoader::_get_externalStoragePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::_get_externalStoragePath");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "OVRSceneLoader", "externalStoragePath"));
}
// Autogenerated static field setter
// Set static field: static public System.String externalStoragePath
void GlobalNamespace::OVRSceneLoader::_set_externalStoragePath(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::_set_externalStoragePath");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSceneLoader", "externalStoragePath", value));
}
// Autogenerated static field getter
// Get static field: static public System.String sceneLoadDataName
::StringW GlobalNamespace::OVRSceneLoader::_get_sceneLoadDataName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::_get_sceneLoadDataName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "OVRSceneLoader", "sceneLoadDataName"));
}
// Autogenerated static field setter
// Set static field: static public System.String sceneLoadDataName
void GlobalNamespace::OVRSceneLoader::_set_sceneLoadDataName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::_set_sceneLoadDataName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSceneLoader", "sceneLoadDataName", value));
}
// Autogenerated static field getter
// Get static field: static public System.String resourceBundleName
::StringW GlobalNamespace::OVRSceneLoader::_get_resourceBundleName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::_get_resourceBundleName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "OVRSceneLoader", "resourceBundleName"));
}
// Autogenerated static field setter
// Set static field: static public System.String resourceBundleName
void GlobalNamespace::OVRSceneLoader::_set_resourceBundleName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::_set_resourceBundleName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSceneLoader", "resourceBundleName", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Single sceneCheckIntervalSeconds
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSceneLoader::dyn_sceneCheckIntervalSeconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::dyn_sceneCheckIntervalSeconds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sceneCheckIntervalSeconds"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single logCloseTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSceneLoader::dyn_logCloseTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::dyn_logCloseTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "logCloseTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Canvas mainCanvas
[[deprecated("Use field access instead!")]] ::UnityEngine::Canvas*& GlobalNamespace::OVRSceneLoader::dyn_mainCanvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::dyn_mainCanvas");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mainCanvas"))->offset;
  return *reinterpret_cast<::UnityEngine::Canvas**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Text logTextBox
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::OVRSceneLoader::dyn_logTextBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::dyn_logTextBox");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "logTextBox"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AsyncOperation loadSceneOperation
[[deprecated("Use field access instead!")]] ::UnityEngine::AsyncOperation*& GlobalNamespace::OVRSceneLoader::dyn_loadSceneOperation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::dyn_loadSceneOperation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loadSceneOperation"))->offset;
  return *reinterpret_cast<::UnityEngine::AsyncOperation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String formattedLogText
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::OVRSceneLoader::dyn_formattedLogText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::dyn_formattedLogText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "formattedLogText"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single closeLogTimer
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSceneLoader::dyn_closeLogTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::dyn_closeLogTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "closeLogTimer"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean closeLogDialogue
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSceneLoader::dyn_closeLogDialogue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::dyn_closeLogDialogue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "closeLogDialogue"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean canvasPosUpdated
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSceneLoader::dyn_canvasPosUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::dyn_canvasPosUpdated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "canvasPosUpdated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String scenePath
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::OVRSceneLoader::dyn_scenePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::dyn_scenePath");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scenePath"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String sceneLoadDataPath
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::OVRSceneLoader::dyn_sceneLoadDataPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::dyn_sceneLoadDataPath");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sceneLoadDataPath"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.AssetBundle> loadedAssetBundles
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::AssetBundle*>*& GlobalNamespace::OVRSceneLoader::dyn_loadedAssetBundles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::dyn_loadedAssetBundles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loadedAssetBundles"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::AssetBundle*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRSceneLoader/SceneInfo currentSceneInfo
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSceneLoader::SceneInfo& GlobalNamespace::OVRSceneLoader::dyn_currentSceneInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::dyn_currentSceneInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentSceneInfo"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRSceneLoader::SceneInfo*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRSceneLoader.Awake
void GlobalNamespace::OVRSceneLoader::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader.Start
void GlobalNamespace::OVRSceneLoader::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader.LoadScene
void GlobalNamespace::OVRSceneLoader::LoadScene(::GlobalNamespace::OVRSceneLoader::SceneInfo sceneInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::LoadScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sceneInfo);
}
// Autogenerated method: OVRSceneLoader.LoadSceneOperation_completed
void GlobalNamespace::OVRSceneLoader::LoadSceneOperation_completed(::UnityEngine::AsyncOperation* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::LoadSceneOperation_completed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadSceneOperation_completed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: OVRSceneLoader.Update
void GlobalNamespace::OVRSceneLoader::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader.UpdateCanvasPosition
void GlobalNamespace::OVRSceneLoader::UpdateCanvasPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::UpdateCanvasPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCanvasPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader.GetSceneInfo
::GlobalNamespace::OVRSceneLoader::SceneInfo GlobalNamespace::OVRSceneLoader::GetSceneInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::GetSceneInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSceneInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRSceneLoader::SceneInfo, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader.DelayCanvasPosUpdate
::System::Collections::IEnumerator* GlobalNamespace::OVRSceneLoader::DelayCanvasPosUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::DelayCanvasPosUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DelayCanvasPosUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader.onCheckSceneCoroutine
::System::Collections::IEnumerator* GlobalNamespace::OVRSceneLoader::onCheckSceneCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::onCheckSceneCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "onCheckSceneCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader.DestroyAllGameObjects
void GlobalNamespace::OVRSceneLoader::DestroyAllGameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::DestroyAllGameObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyAllGameObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSceneLoader/SceneInfo
#include "GlobalNamespace/OVRSceneLoader.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.String> scenes
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& GlobalNamespace::OVRSceneLoader::SceneInfo::dyn_scenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::SceneInfo::dyn_scenes");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scenes"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int64 version
[[deprecated("Use field access instead!")]] int64_t& GlobalNamespace::OVRSceneLoader::SceneInfo::dyn_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::SceneInfo::dyn_version");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "version"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRSceneLoader/SceneInfo..ctor
// ABORTED elsewhere.  GlobalNamespace::OVRSceneLoader::SceneInfo::SceneInfo(::System::Collections::Generic::List_1<::StringW>* sceneList, int64_t currentSceneEpochVersion)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRSceneLoader/<DelayCanvasPosUpdate>d__24
#include "GlobalNamespace/OVRSceneLoader_-DelayCanvasPosUpdate-d__24.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRSceneLoader <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSceneLoader*& GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRSceneLoader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRSceneLoader/<DelayCanvasPosUpdate>d__24.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader/<DelayCanvasPosUpdate>d__24.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader/<DelayCanvasPosUpdate>d__24.System.IDisposable.Dispose
void GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader/<DelayCanvasPosUpdate>d__24.MoveNext
bool GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader/<DelayCanvasPosUpdate>d__24.System.Collections.IEnumerator.Reset
void GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRSceneLoader/<onCheckSceneCoroutine>d__25
#include "GlobalNamespace/OVRSceneLoader_-onCheckSceneCoroutine-d__25.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRSceneLoader <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSceneLoader*& GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRSceneLoader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRSceneLoader/<onCheckSceneCoroutine>d__25.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader/<onCheckSceneCoroutine>d__25.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader/<onCheckSceneCoroutine>d__25.System.IDisposable.Dispose
void GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader/<onCheckSceneCoroutine>d__25.MoveNext
bool GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader/<onCheckSceneCoroutine>d__25.System.Collections.IEnumerator.Reset
void GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRTracker
#include "GlobalNamespace/OVRTracker.hpp"
// Including type: OVRTracker/Frustum
#include "GlobalNamespace/OVRTracker_Frustum.hpp"
// Including type: OVRPose
#include "GlobalNamespace/OVRPose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRTracker.get_isPresent
bool GlobalNamespace::OVRTracker::get_isPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTracker::get_isPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRTracker.get_isPositionTracked
bool GlobalNamespace::OVRTracker::get_isPositionTracked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTracker::get_isPositionTracked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPositionTracked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRTracker.get_isEnabled
bool GlobalNamespace::OVRTracker::get_isEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTracker::get_isEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRTracker.set_isEnabled
void GlobalNamespace::OVRTracker::set_isEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTracker::set_isEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRTracker.get_count
int GlobalNamespace::OVRTracker::get_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTracker::get_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OVRTracker.GetFrustum
::GlobalNamespace::OVRTracker::Frustum GlobalNamespace::OVRTracker::GetFrustum(int tracker) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTracker::GetFrustum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFrustum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tracker)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRTracker::Frustum, false>(this, ___internal__method, tracker);
}
// Autogenerated method: OVRTracker.GetPose
::GlobalNamespace::OVRPose GlobalNamespace::OVRTracker::GetPose(int tracker) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTracker::GetPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tracker)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPose, false>(this, ___internal__method, tracker);
}
// Autogenerated method: OVRTracker.GetPoseValid
bool GlobalNamespace::OVRTracker::GetPoseValid(int tracker) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTracker::GetPoseValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoseValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tracker)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, tracker);
}
// Autogenerated method: OVRTracker.GetPresent
bool GlobalNamespace::OVRTracker::GetPresent(int tracker) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTracker::GetPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tracker)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, tracker);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusXRPlugin
#include "GlobalNamespace/OculusXRPlugin.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OculusXRPlugin.SetColorScale
void GlobalNamespace::OculusXRPlugin::SetColorScale(float x, float y, float z, float w) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusXRPlugin::SetColorScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OculusXRPlugin", "SetColorScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(z), ::il2cpp_utils::ExtractType(w)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, y, z, w);
}
// Autogenerated method: OculusXRPlugin.SetColorOffset
void GlobalNamespace::OculusXRPlugin::SetColorOffset(float x, float y, float z, float w) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusXRPlugin::SetColorOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OculusXRPlugin", "SetColorOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(z), ::il2cpp_utils::ExtractType(w)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, y, z, w);
}
// Autogenerated method: OculusXRPlugin.SetSpaceWarp
void GlobalNamespace::OculusXRPlugin::SetSpaceWarp(::GlobalNamespace::OVRPlugin::Bool on) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusXRPlugin::SetSpaceWarp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OculusXRPlugin", "SetSpaceWarp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(on)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, on);
}
// Autogenerated method: OculusXRPlugin.SetAppSpacePosition
void GlobalNamespace::OculusXRPlugin::SetAppSpacePosition(float x, float y, float z) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusXRPlugin::SetAppSpacePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OculusXRPlugin", "SetAppSpacePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(z)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, y, z);
}
// Autogenerated method: OculusXRPlugin.SetAppSpaceRotation
void GlobalNamespace::OculusXRPlugin::SetAppSpaceRotation(float x, float y, float z, float w) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusXRPlugin::SetAppSpaceRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OculusXRPlugin", "SetAppSpaceRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(z), ::il2cpp_utils::ExtractType(w)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, y, z, w);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRAudioSourceTest
#include "GlobalNamespace/OVRAudioSourceTest.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single period
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRAudioSourceTest::dyn_period() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRAudioSourceTest::dyn_period");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "period"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single nextActionTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRAudioSourceTest::dyn_nextActionTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRAudioSourceTest::dyn_nextActionTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nextActionTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRAudioSourceTest.Start
void GlobalNamespace::OVRAudioSourceTest::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRAudioSourceTest::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRAudioSourceTest.Update
void GlobalNamespace::OVRAudioSourceTest::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRAudioSourceTest::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRAutoDestroyInMRC
#include "GlobalNamespace/OVRAutoDestroyInMRC.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRAutoDestroyInMRC.Start
void GlobalNamespace::OVRAutoDestroyInMRC::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRAutoDestroyInMRC::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRAutoDestroyInMRC.Update
void GlobalNamespace::OVRAutoDestroyInMRC::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRAutoDestroyInMRC::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRChromaticAberration
#include "GlobalNamespace/OVRChromaticAberration.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public OVRInput/RawButton toggleButton
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawButton& GlobalNamespace::OVRChromaticAberration::dyn_toggleButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRChromaticAberration::dyn_toggleButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "toggleButton"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRInput::RawButton*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean chromatic
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRChromaticAberration::dyn_chromatic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRChromaticAberration::dyn_chromatic");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chromatic"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRChromaticAberration.Start
void GlobalNamespace::OVRChromaticAberration::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRChromaticAberration::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRChromaticAberration.Update
void GlobalNamespace::OVRChromaticAberration::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRChromaticAberration::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRControllerHelper
#include "GlobalNamespace/OVRControllerHelper.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject m_modelOculusTouchQuestAndRiftSLeftController
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRControllerHelper::dyn_m_modelOculusTouchQuestAndRiftSLeftController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::dyn_m_modelOculusTouchQuestAndRiftSLeftController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_modelOculusTouchQuestAndRiftSLeftController"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject m_modelOculusTouchQuestAndRiftSRightController
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRControllerHelper::dyn_m_modelOculusTouchQuestAndRiftSRightController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::dyn_m_modelOculusTouchQuestAndRiftSRightController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_modelOculusTouchQuestAndRiftSRightController"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject m_modelOculusTouchRiftLeftController
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRControllerHelper::dyn_m_modelOculusTouchRiftLeftController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::dyn_m_modelOculusTouchRiftLeftController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_modelOculusTouchRiftLeftController"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject m_modelOculusTouchRiftRightController
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRControllerHelper::dyn_m_modelOculusTouchRiftRightController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::dyn_m_modelOculusTouchRiftRightController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_modelOculusTouchRiftRightController"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject m_modelOculusTouchQuest2LeftController
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRControllerHelper::dyn_m_modelOculusTouchQuest2LeftController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::dyn_m_modelOculusTouchQuest2LeftController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_modelOculusTouchQuest2LeftController"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject m_modelOculusTouchQuest2RightController
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRControllerHelper::dyn_m_modelOculusTouchQuest2RightController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::dyn_m_modelOculusTouchQuest2RightController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_modelOculusTouchQuest2RightController"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRInput/Controller m_controller
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Controller& GlobalNamespace::OVRControllerHelper::dyn_m_controller() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::dyn_m_controller");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_controller"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRInput::Controller*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animator m_animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& GlobalNamespace::OVRControllerHelper::dyn_m_animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::dyn_m_animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRControllerHelper/ControllerType activeControllerType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRControllerHelper::ControllerType& GlobalNamespace::OVRControllerHelper::dyn_activeControllerType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::dyn_activeControllerType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activeControllerType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRControllerHelper::ControllerType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_prevControllerConnected
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRControllerHelper::dyn_m_prevControllerConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::dyn_m_prevControllerConnected");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_prevControllerConnected"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_prevControllerConnectedCached
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRControllerHelper::dyn_m_prevControllerConnectedCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::dyn_m_prevControllerConnectedCached");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_prevControllerConnectedCached"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRControllerHelper.Start
void GlobalNamespace::OVRControllerHelper::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerHelper.Update
void GlobalNamespace::OVRControllerHelper::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRControllerHelper/ControllerType
#include "GlobalNamespace/OVRControllerHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRControllerHelper/ControllerType QuestAndRiftS
::GlobalNamespace::OVRControllerHelper::ControllerType GlobalNamespace::OVRControllerHelper::ControllerType::_get_QuestAndRiftS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::ControllerType::_get_QuestAndRiftS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerHelper::ControllerType>("", "OVRControllerHelper/ControllerType", "QuestAndRiftS"));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerHelper/ControllerType QuestAndRiftS
void GlobalNamespace::OVRControllerHelper::ControllerType::_set_QuestAndRiftS(::GlobalNamespace::OVRControllerHelper::ControllerType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::ControllerType::_set_QuestAndRiftS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRControllerHelper/ControllerType", "QuestAndRiftS", value));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerHelper/ControllerType Rift
::GlobalNamespace::OVRControllerHelper::ControllerType GlobalNamespace::OVRControllerHelper::ControllerType::_get_Rift() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::ControllerType::_get_Rift");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerHelper::ControllerType>("", "OVRControllerHelper/ControllerType", "Rift"));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerHelper/ControllerType Rift
void GlobalNamespace::OVRControllerHelper::ControllerType::_set_Rift(::GlobalNamespace::OVRControllerHelper::ControllerType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::ControllerType::_set_Rift");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRControllerHelper/ControllerType", "Rift", value));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerHelper/ControllerType Quest2
::GlobalNamespace::OVRControllerHelper::ControllerType GlobalNamespace::OVRControllerHelper::ControllerType::_get_Quest2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::ControllerType::_get_Quest2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerHelper::ControllerType>("", "OVRControllerHelper/ControllerType", "Quest2"));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerHelper/ControllerType Quest2
void GlobalNamespace::OVRControllerHelper::ControllerType::_set_Quest2(::GlobalNamespace::OVRControllerHelper::ControllerType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::ControllerType::_set_Quest2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRControllerHelper/ControllerType", "Quest2", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRControllerHelper::ControllerType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::ControllerType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRControllerTest
#include "GlobalNamespace/OVRControllerTest.hpp"
// Including type: OVRControllerTest/BoolMonitor
#include "GlobalNamespace/OVRControllerTest_BoolMonitor.hpp"
// Including type: OVRControllerTest/<>c
#include "GlobalNamespace/OVRControllerTest_--c.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String prevConnected
::StringW GlobalNamespace::OVRControllerTest::_get_prevConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::_get_prevConnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "OVRControllerTest", "prevConnected"));
}
// Autogenerated static field setter
// Set static field: static private System.String prevConnected
void GlobalNamespace::OVRControllerTest::_set_prevConnected(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::_set_prevConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRControllerTest", "prevConnected", value));
}
// Autogenerated static field getter
// Get static field: static private OVRControllerTest/BoolMonitor controllers
::GlobalNamespace::OVRControllerTest::BoolMonitor* GlobalNamespace::OVRControllerTest::_get_controllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::_get_controllers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor*>("", "OVRControllerTest", "controllers"));
}
// Autogenerated static field setter
// Set static field: static private OVRControllerTest/BoolMonitor controllers
void GlobalNamespace::OVRControllerTest::_set_controllers(::GlobalNamespace::OVRControllerTest::BoolMonitor* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::_set_controllers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRControllerTest", "controllers", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Text uiText
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::OVRControllerTest::dyn_uiText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::dyn_uiText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "uiText"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<OVRControllerTest/BoolMonitor> monitors
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::OVRControllerTest::BoolMonitor*>*& GlobalNamespace::OVRControllerTest::dyn_monitors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::dyn_monitors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "monitors"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::OVRControllerTest::BoolMonitor*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Text.StringBuilder data
[[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& GlobalNamespace::OVRControllerTest::dyn_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::dyn_data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "data"))->offset;
  return *reinterpret_cast<::System::Text::StringBuilder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRControllerTest..cctor
void GlobalNamespace::OVRControllerTest::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRControllerTest", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRControllerTest.Start
void GlobalNamespace::OVRControllerTest::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest.Update
void GlobalNamespace::OVRControllerTest::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRControllerTest/BoolMonitor
#include "GlobalNamespace/OVRControllerTest_BoolMonitor.hpp"
// Including type: OVRControllerTest/BoolMonitor/BoolGenerator
#include "GlobalNamespace/OVRControllerTest_BoolMonitor_BoolGenerator.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String m_name
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::OVRControllerTest::BoolMonitor::dyn_m_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::BoolMonitor::dyn_m_name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRControllerTest/BoolMonitor/BoolGenerator m_generator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*& GlobalNamespace::OVRControllerTest::BoolMonitor::dyn_m_generator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::BoolMonitor::dyn_m_generator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_generator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_prevValue
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRControllerTest::BoolMonitor::dyn_m_prevValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::BoolMonitor::dyn_m_prevValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_prevValue"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_currentValue
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRControllerTest::BoolMonitor::dyn_m_currentValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::BoolMonitor::dyn_m_currentValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_currentValue"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_currentValueRecentlyChanged
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRControllerTest::BoolMonitor::dyn_m_currentValueRecentlyChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::BoolMonitor::dyn_m_currentValueRecentlyChanged");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_currentValueRecentlyChanged"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_displayTimeout
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRControllerTest::BoolMonitor::dyn_m_displayTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::BoolMonitor::dyn_m_displayTimeout");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_displayTimeout"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_displayTimer
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRControllerTest::BoolMonitor::dyn_m_displayTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::BoolMonitor::dyn_m_displayTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_displayTimer"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRControllerTest/BoolMonitor.Update
void GlobalNamespace::OVRControllerTest::BoolMonitor::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::BoolMonitor::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/BoolMonitor.AppendToStringBuilder
void GlobalNamespace::OVRControllerTest::BoolMonitor::AppendToStringBuilder(ByRef<::System::Text::StringBuilder*> sb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::BoolMonitor::AppendToStringBuilder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendToStringBuilder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sb)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(sb));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRControllerTest/BoolMonitor/BoolGenerator
#include "GlobalNamespace/OVRControllerTest_BoolMonitor_BoolGenerator.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRControllerTest/BoolMonitor/BoolGenerator.Invoke
bool GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/BoolMonitor/BoolGenerator.BeginInvoke
::System::IAsyncResult* GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVRControllerTest/BoolMonitor/BoolGenerator.EndInvoke
bool GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRControllerTest/<>c
#include "GlobalNamespace/OVRControllerTest_--c.hpp"
// Including type: OVRControllerTest/BoolMonitor/BoolGenerator
#include "GlobalNamespace/OVRControllerTest_BoolMonitor_BoolGenerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly OVRControllerTest/<>c <>9
::GlobalNamespace::OVRControllerTest::$$c* GlobalNamespace::OVRControllerTest::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::$$c*>("", "OVRControllerTest/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly OVRControllerTest/<>c <>9
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9(::GlobalNamespace::OVRControllerTest::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_0
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_0")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_0
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_0(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_0", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_1
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_1")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_1
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_1(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_1", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_2
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_2")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_2
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_2(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_2", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_3
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_3")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_3
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_3(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_3");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_3", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_4
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_4");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_4")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_4
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_4(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_4");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_4", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_5
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_5");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_5")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_5
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_5(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_5");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_5", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_6
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_6");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_6")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_6
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_6(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_6");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_6", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_7
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_7() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_7");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_7")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_7
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_7(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_7");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_7", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_8
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_8() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_8");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_8")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_8
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_8(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_8");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_8", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_9
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_9")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_9
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_9(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_9", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_10
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_10() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_10");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_10")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_10
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_10(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_10");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_10", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_11
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_11() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_11");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_11")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_11
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_11(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_11");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_11", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_12
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_12() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_12");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_12")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_12
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_12(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_12");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_12", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_13
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_13() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_13");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_13")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_13
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_13(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_13");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_13", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_14
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_14() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_14");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_14")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_14
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_14(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_14");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_14", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_15
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_15() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_15");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_15")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_15
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_15(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_15");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_15", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_16
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_16() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_16");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_16")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_16
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_16(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_16");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_16", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_17
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_17() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_17");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_17")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_17
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_17(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_17");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_17", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_18
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_18() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_18");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_18")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_18
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_18(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_18");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_18", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_19
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_19() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_19");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_19")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_19
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_19(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_19");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_19", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_20
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_20() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_20");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_20")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_20
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_20(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_20");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_20", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_21
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_21() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_21");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_21")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_21
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_21(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_21");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_21", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_22
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_22() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_22");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_22")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_22
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_22(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_22");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_22", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_23
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_23() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_23");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_23")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_23
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_23(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_23");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_23", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_24
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_24() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_24");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_24")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_24
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_24(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_24");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_24", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_25
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_25() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_25");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_25")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_25
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_25(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_25");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_25", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_26
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_26() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_26");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_26")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_26
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_26(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_26");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_26", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_27
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_27() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_27");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_27")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_27
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_27(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_27");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_27", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_28
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_28() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_28");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_28")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_28
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_28(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_28");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_28", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_29
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_29() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_29");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_29")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_29
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_29(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_29");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_29", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_30
::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_30() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_30");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_30")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_30
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_30(::GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_30");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_30", value)));
}
// Autogenerated method: OVRControllerTest/<>c..cctor
void GlobalNamespace::OVRControllerTest::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRControllerTest/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_0
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_1
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_2
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_3
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_4
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_5
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_5");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_5", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_6
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_6");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_6", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_7
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_7() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_7");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_7", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_8
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_8() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_8");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_8", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_9
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_9");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_9", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_10
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_10() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_10");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_10", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_11
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_11() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_12
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_12() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_12");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_12", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_13
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_13() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_13");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_13", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_14
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_14() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_14");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_14", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_15
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_15() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_15");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_15", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_16
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_16() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_16");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_16", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_17
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_17() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_17");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_17", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_18
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_18() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_18");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_18", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_19
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_19() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_19");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_19", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_20
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_20() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_20");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_20", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_21
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_21() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_21");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_21", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_22
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_22() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_22");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_22", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_23
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_23() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_23");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_23", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_24
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_24() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_24");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_24", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_25
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_25() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_25");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_25", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_26
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_26() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_26");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_26", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_27
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_27() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_27");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_27", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_28
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_28() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_28");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_28", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_29
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_29() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_29");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_29", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_30
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_30() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_30");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_30", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<.cctor>b__9_0
bool GlobalNamespace::OVRControllerTest::$$c::$_cctor$b__9_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerTest::$$c::<.cctor>b__9_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__9_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRCubemapCapture
#include "GlobalNamespace/OVRCubemapCapture.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Cubemap
#include "UnityEngine/Cubemap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean autoTriggerAfterLaunch
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRCubemapCapture::dyn_autoTriggerAfterLaunch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCubemapCapture::dyn_autoTriggerAfterLaunch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "autoTriggerAfterLaunch"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single autoTriggerDelay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRCubemapCapture::dyn_autoTriggerDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCubemapCapture::dyn_autoTriggerDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "autoTriggerDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single autoTriggerElapse
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRCubemapCapture::dyn_autoTriggerElapse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCubemapCapture::dyn_autoTriggerElapse");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "autoTriggerElapse"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.KeyCode triggeredByKey
[[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& GlobalNamespace::OVRCubemapCapture::dyn_triggeredByKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCubemapCapture::dyn_triggeredByKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "triggeredByKey"))->offset;
  return *reinterpret_cast<::UnityEngine::KeyCode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String pathName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::OVRCubemapCapture::dyn_pathName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCubemapCapture::dyn_pathName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pathName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 cubemapSize
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRCubemapCapture::dyn_cubemapSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCubemapCapture::dyn_cubemapSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cubemapSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRCubemapCapture.Update
void GlobalNamespace::OVRCubemapCapture::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCubemapCapture::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRCubemapCapture.TriggerCubemapCapture
void GlobalNamespace::OVRCubemapCapture::TriggerCubemapCapture(::UnityEngine::Vector3 capturePos, int cubemapSize, ::StringW pathName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCubemapCapture::TriggerCubemapCapture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRCubemapCapture", "TriggerCubemapCapture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(capturePos), ::il2cpp_utils::ExtractType(cubemapSize), ::il2cpp_utils::ExtractType(pathName)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, capturePos, cubemapSize, pathName);
}
// Autogenerated method: OVRCubemapCapture.RenderIntoCubemap
void GlobalNamespace::OVRCubemapCapture::RenderIntoCubemap(::UnityEngine::Camera* ownerCamera, ::UnityEngine::Cubemap* outCubemap) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCubemapCapture::RenderIntoCubemap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRCubemapCapture", "RenderIntoCubemap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ownerCamera), ::il2cpp_utils::ExtractType(outCubemap)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ownerCamera, outCubemap);
}
// Autogenerated method: OVRCubemapCapture.SaveCubemapCapture
bool GlobalNamespace::OVRCubemapCapture::SaveCubemapCapture(::UnityEngine::Cubemap* cubemap, ::StringW pathName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCubemapCapture::SaveCubemapCapture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRCubemapCapture", "SaveCubemapCapture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cubemap), ::il2cpp_utils::ExtractType(pathName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cubemap, pathName);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRCursor
#include "GlobalNamespace/OVRCursor.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRCursor.SetCursorRay
void GlobalNamespace::OVRCursor::SetCursorRay(::UnityEngine::Transform* ray) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCursor::SetCursorRay");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRCursor*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ray);
}
// Autogenerated method: OVRCursor.SetCursorStartDest
void GlobalNamespace::OVRCursor::SetCursorStartDest(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 dest, ::UnityEngine::Vector3 normal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCursor::SetCursorStartDest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRCursor*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, start, dest, normal);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRCustomSkeleton
#include "GlobalNamespace/OVRCustomSkeleton.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean _applyBoneTranslations
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRCustomSkeleton::dyn__applyBoneTranslations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCustomSkeleton::dyn__applyBoneTranslations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_applyBoneTranslations"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.Transform> _customBones_V2
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Transform*>*& GlobalNamespace::OVRCustomSkeleton::dyn__customBones_V2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCustomSkeleton::dyn__customBones_V2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_customBones_V2"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Transform*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRCustomSkeleton.get_CustomBones
::System::Collections::Generic::List_1<::UnityEngine::Transform*>* GlobalNamespace::OVRCustomSkeleton::get_CustomBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCustomSkeleton::get_CustomBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CustomBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::UnityEngine::Transform*>*, false>(this, ___internal__method);
}
// Autogenerated method: OVRCustomSkeleton.InitializeBones
void GlobalNamespace::OVRCustomSkeleton::InitializeBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCustomSkeleton::InitializeBones");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSkeleton*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRDebugInfo
#include "GlobalNamespace/OVRDebugInfo.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject debugUIManager
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRDebugInfo::dyn_debugUIManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_debugUIManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugUIManager"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject debugUIObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRDebugInfo::dyn_debugUIObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_debugUIObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugUIObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject riftPresent
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRDebugInfo::dyn_riftPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_riftPresent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "riftPresent"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject fps
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRDebugInfo::dyn_fps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_fps");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fps"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject ipd
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRDebugInfo::dyn_ipd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_ipd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ipd"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject fov
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRDebugInfo::dyn_fov() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_fov");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fov"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject height
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRDebugInfo::dyn_height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_height");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "height"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject depth
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRDebugInfo::dyn_depth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_depth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "depth"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject resolutionEyeTexture
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRDebugInfo::dyn_resolutionEyeTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_resolutionEyeTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "resolutionEyeTexture"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject latencies
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRDebugInfo::dyn_latencies() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_latencies");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "latencies"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject texts
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRDebugInfo::dyn_texts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_texts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "texts"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String strRiftPresent
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::OVRDebugInfo::dyn_strRiftPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_strRiftPresent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strRiftPresent"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String strFPS
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::OVRDebugInfo::dyn_strFPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_strFPS");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strFPS"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String strIPD
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::OVRDebugInfo::dyn_strIPD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_strIPD");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strIPD"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String strFOV
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::OVRDebugInfo::dyn_strFOV() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_strFOV");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strFOV"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String strHeight
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::OVRDebugInfo::dyn_strHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_strHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strHeight"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String strDepth
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::OVRDebugInfo::dyn_strDepth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_strDepth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strDepth"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String strResolutionEyeTexture
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::OVRDebugInfo::dyn_strResolutionEyeTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_strResolutionEyeTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strResolutionEyeTexture"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String strLatencies
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::OVRDebugInfo::dyn_strLatencies() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_strLatencies");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strLatencies"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single updateInterval
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRDebugInfo::dyn_updateInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_updateInterval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "updateInterval"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single accum
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRDebugInfo::dyn_accum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_accum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "accum"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 frames
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRDebugInfo::dyn_frames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_frames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frames"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single timeLeft
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRDebugInfo::dyn_timeLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_timeLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeLeft"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean initUIComponent
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRDebugInfo::dyn_initUIComponent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_initUIComponent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initUIComponent"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isInited
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRDebugInfo::dyn_isInited() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_isInited");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isInited"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single offsetY
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRDebugInfo::dyn_offsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_offsetY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "offsetY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single riftPresentTimeout
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRDebugInfo::dyn_riftPresentTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_riftPresentTimeout");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "riftPresentTimeout"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean showVRVars
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRDebugInfo::dyn_showVRVars() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::dyn_showVRVars");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "showVRVars"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRDebugInfo.Awake
void GlobalNamespace::OVRDebugInfo::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.Update
void GlobalNamespace::OVRDebugInfo::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.OnDestroy
void GlobalNamespace::OVRDebugInfo::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.InitUIComponents
void GlobalNamespace::OVRDebugInfo::InitUIComponents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::InitUIComponents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitUIComponents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.UpdateVariable
void GlobalNamespace::OVRDebugInfo::UpdateVariable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::UpdateVariable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVariable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.UpdateStrings
void GlobalNamespace::OVRDebugInfo::UpdateStrings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::UpdateStrings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateStrings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.RiftPresentGUI
void GlobalNamespace::OVRDebugInfo::RiftPresentGUI(::UnityEngine::GameObject* guiMainOBj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::RiftPresentGUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RiftPresentGUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(guiMainOBj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, guiMainOBj);
}
// Autogenerated method: OVRDebugInfo.UpdateDeviceDetection
void GlobalNamespace::OVRDebugInfo::UpdateDeviceDetection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::UpdateDeviceDetection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDeviceDetection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.VariableObjectManager
::UnityEngine::GameObject* GlobalNamespace::OVRDebugInfo::VariableObjectManager(::UnityEngine::GameObject* gameObject, ::StringW name, float posY, ::StringW str, int fontSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::VariableObjectManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VariableObjectManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(posY), ::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(fontSize)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method, gameObject, name, posY, str, fontSize);
}
// Autogenerated method: OVRDebugInfo.ComponentComposition
::UnityEngine::GameObject* GlobalNamespace::OVRDebugInfo::ComponentComposition(::UnityEngine::GameObject* GO) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::ComponentComposition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComponentComposition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(GO)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method, GO);
}
// Autogenerated method: OVRDebugInfo.UpdateIPD
void GlobalNamespace::OVRDebugInfo::UpdateIPD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::UpdateIPD");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateIPD", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.UpdateEyeHeightOffset
void GlobalNamespace::OVRDebugInfo::UpdateEyeHeightOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::UpdateEyeHeightOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateEyeHeightOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.UpdateEyeDepthOffset
void GlobalNamespace::OVRDebugInfo::UpdateEyeDepthOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::UpdateEyeDepthOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateEyeDepthOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.UpdateFOV
void GlobalNamespace::OVRDebugInfo::UpdateFOV() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::UpdateFOV");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFOV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.UpdateResolutionEyeTexture
void GlobalNamespace::OVRDebugInfo::UpdateResolutionEyeTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::UpdateResolutionEyeTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateResolutionEyeTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.UpdateLatencyValues
void GlobalNamespace::OVRDebugInfo::UpdateLatencyValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::UpdateLatencyValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLatencyValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.UpdateFPS
void GlobalNamespace::OVRDebugInfo::UpdateFPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugInfo::UpdateFPS");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFPS", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRGazePointer
#include "GlobalNamespace/OVRGazePointer.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: OVRProgressIndicator
#include "GlobalNamespace/OVRProgressIndicator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private OVRGazePointer _instance
::GlobalNamespace::OVRGazePointer* GlobalNamespace::OVRGazePointer::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRGazePointer*>("", "OVRGazePointer", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private OVRGazePointer _instance
void GlobalNamespace::OVRGazePointer::_set__instance(::GlobalNamespace::OVRGazePointer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRGazePointer", "_instance", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform gazeIcon
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OVRGazePointer::dyn_gazeIcon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::dyn_gazeIcon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gazeIcon"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean hideByDefault
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRGazePointer::dyn_hideByDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::dyn_hideByDefault");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hideByDefault"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single showTimeoutPeriod
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRGazePointer::dyn_showTimeoutPeriod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::dyn_showTimeoutPeriod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "showTimeoutPeriod"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single hideTimeoutPeriod
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRGazePointer::dyn_hideTimeoutPeriod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::dyn_hideTimeoutPeriod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hideTimeoutPeriod"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean dimOnHideRequest
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRGazePointer::dyn_dimOnHideRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::dyn_dimOnHideRequest");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dimOnHideRequest"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single depthScaleMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRGazePointer::dyn_depthScaleMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::dyn_depthScaleMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "depthScaleMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean matchNormalOnPhysicsColliders
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRGazePointer::dyn_matchNormalOnPhysicsColliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::dyn_matchNormalOnPhysicsColliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "matchNormalOnPhysicsColliders"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rayTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OVRGazePointer::dyn_rayTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::dyn_rayTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rayTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <hidden>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRGazePointer::dyn_$hidden$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::dyn_$hidden$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<hidden>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <currentScale>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRGazePointer::dyn_$currentScale$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::dyn_$currentScale$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<currentScale>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single depth
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRGazePointer::dyn_depth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::dyn_depth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "depth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single hideUntilTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRGazePointer::dyn_hideUntilTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::dyn_hideUntilTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hideUntilTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 positionSetsThisFrame
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRGazePointer::dyn_positionSetsThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::dyn_positionSetsThisFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "positionSetsThisFrame"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lastShowRequestTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRGazePointer::dyn_lastShowRequestTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::dyn_lastShowRequestTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastShowRequestTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lastHideRequestTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRGazePointer::dyn_lastHideRequestTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::dyn_lastHideRequestTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastHideRequestTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRProgressIndicator progressIndicator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRProgressIndicator*& GlobalNamespace::OVRGazePointer::dyn_progressIndicator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::dyn_progressIndicator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "progressIndicator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRProgressIndicator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRGazePointer.get_hidden
bool GlobalNamespace::OVRGazePointer::get_hidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::get_hidden");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hidden", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.set_hidden
void GlobalNamespace::OVRGazePointer::set_hidden(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::set_hidden");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hidden", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRGazePointer.get_currentScale
float GlobalNamespace::OVRGazePointer::get_currentScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::get_currentScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.set_currentScale
void GlobalNamespace::OVRGazePointer::set_currentScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::set_currentScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_currentScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRGazePointer.get_instance
::GlobalNamespace::OVRGazePointer* GlobalNamespace::OVRGazePointer::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRGazePointer", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRGazePointer*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRGazePointer.get_visibilityStrength
float GlobalNamespace::OVRGazePointer::get_visibilityStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::get_visibilityStrength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_visibilityStrength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.get_SelectionProgress
float GlobalNamespace::OVRGazePointer::get_SelectionProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::get_SelectionProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SelectionProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.set_SelectionProgress
void GlobalNamespace::OVRGazePointer::set_SelectionProgress(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::set_SelectionProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SelectionProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRGazePointer.Awake
void GlobalNamespace::OVRGazePointer::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.Update
void GlobalNamespace::OVRGazePointer::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.LateUpdate
void GlobalNamespace::OVRGazePointer::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.RequestHide
void GlobalNamespace::OVRGazePointer::RequestHide() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::RequestHide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestHide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.RequestShow
void GlobalNamespace::OVRGazePointer::RequestShow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::RequestShow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestShow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.Hide
void GlobalNamespace::OVRGazePointer::Hide() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::Hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.Show
void GlobalNamespace::OVRGazePointer::Show() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::Show");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Show", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.SetCursorStartDest
void GlobalNamespace::OVRGazePointer::SetCursorStartDest(::UnityEngine::Vector3 _, ::UnityEngine::Vector3 pos, ::UnityEngine::Vector3 normal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::SetCursorStartDest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRCursor*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, _, pos, normal);
}
// Autogenerated method: OVRGazePointer.SetCursorRay
void GlobalNamespace::OVRGazePointer::SetCursorRay(::UnityEngine::Transform* ray) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGazePointer::SetCursorRay");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRCursor*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ray);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRGearVrControllerTest
#include "GlobalNamespace/OVRGearVrControllerTest.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRGrabbable
#include "GlobalNamespace/OVRGrabbable.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: OVRGrabber
#include "GlobalNamespace/OVRGrabber.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected System.Boolean m_allowOffhandGrab
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRGrabbable::dyn_m_allowOffhandGrab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::dyn_m_allowOffhandGrab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_allowOffhandGrab"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean m_snapPosition
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRGrabbable::dyn_m_snapPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::dyn_m_snapPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_snapPosition"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean m_snapOrientation
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRGrabbable::dyn_m_snapOrientation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::dyn_m_snapOrientation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_snapOrientation"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Transform m_snapOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OVRGrabbable::dyn_m_snapOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::dyn_m_snapOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_snapOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Collider[] m_grabPoints
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& GlobalNamespace::OVRGrabbable::dyn_m_grabPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::dyn_m_grabPoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_grabPoints"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Collider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean m_grabbedKinematic
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRGrabbable::dyn_m_grabbedKinematic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::dyn_m_grabbedKinematic");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_grabbedKinematic"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Collider m_grabbedCollider
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& GlobalNamespace::OVRGrabbable::dyn_m_grabbedCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::dyn_m_grabbedCollider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_grabbedCollider"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected OVRGrabber m_grabbedBy
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRGrabber*& GlobalNamespace::OVRGrabbable::dyn_m_grabbedBy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::dyn_m_grabbedBy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_grabbedBy"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRGrabber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRGrabbable.get_allowOffhandGrab
bool GlobalNamespace::OVRGrabbable::get_allowOffhandGrab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::get_allowOffhandGrab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allowOffhandGrab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.get_isGrabbed
bool GlobalNamespace::OVRGrabbable::get_isGrabbed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::get_isGrabbed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isGrabbed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.get_snapPosition
bool GlobalNamespace::OVRGrabbable::get_snapPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::get_snapPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_snapPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.get_snapOrientation
bool GlobalNamespace::OVRGrabbable::get_snapOrientation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::get_snapOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_snapOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.get_snapOffset
::UnityEngine::Transform* GlobalNamespace::OVRGrabbable::get_snapOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::get_snapOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_snapOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.get_grabbedBy
::GlobalNamespace::OVRGrabber* GlobalNamespace::OVRGrabbable::get_grabbedBy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::get_grabbedBy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_grabbedBy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRGrabber*, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.get_grabbedTransform
::UnityEngine::Transform* GlobalNamespace::OVRGrabbable::get_grabbedTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::get_grabbedTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_grabbedTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.get_grabbedRigidbody
::UnityEngine::Rigidbody* GlobalNamespace::OVRGrabbable::get_grabbedRigidbody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::get_grabbedRigidbody");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_grabbedRigidbody", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Rigidbody*, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.get_grabPoints
::ArrayW<::UnityEngine::Collider*> GlobalNamespace::OVRGrabbable::get_grabPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::get_grabPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_grabPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Collider*>, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.GrabBegin
void GlobalNamespace::OVRGrabbable::GrabBegin(::GlobalNamespace::OVRGrabber* hand, ::UnityEngine::Collider* grabPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::GrabBegin");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRGrabbable*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand, grabPoint);
}
// Autogenerated method: OVRGrabbable.GrabEnd
void GlobalNamespace::OVRGrabbable::GrabEnd(::UnityEngine::Vector3 linearVelocity, ::UnityEngine::Vector3 angularVelocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::GrabEnd");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRGrabbable*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, linearVelocity, angularVelocity);
}
// Autogenerated method: OVRGrabbable.Awake
void GlobalNamespace::OVRGrabbable::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.Start
void GlobalNamespace::OVRGrabbable::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRGrabbable*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.OnDestroy
void GlobalNamespace::OVRGrabbable::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabbable::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRGrabber
#include "GlobalNamespace/OVRGrabber.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: OVRGrabbable
#include "GlobalNamespace/OVRGrabbable.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: OVRCameraRig
#include "GlobalNamespace/OVRCameraRig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single grabBegin
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRGrabber::dyn_grabBegin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_grabBegin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabBegin"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single grabEnd
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRGrabber::dyn_grabEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_grabEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabEnd"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean m_parentHeldObject
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRGrabber::dyn_m_parentHeldObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_m_parentHeldObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_parentHeldObject"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean m_moveHandPosition
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRGrabber::dyn_m_moveHandPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_m_moveHandPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_moveHandPosition"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Transform m_gripTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OVRGrabber::dyn_m_gripTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_m_gripTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_gripTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Collider[] m_grabVolumes
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& GlobalNamespace::OVRGrabber::dyn_m_grabVolumes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_m_grabVolumes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_grabVolumes"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Collider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected OVRInput/Controller m_controller
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Controller& GlobalNamespace::OVRGrabber::dyn_m_controller() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_m_controller");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_controller"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRInput::Controller*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Transform m_parentTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OVRGrabber::dyn_m_parentTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_m_parentTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_parentTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.GameObject m_player
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRGrabber::dyn_m_player() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_m_player");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_player"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean m_grabVolumeEnabled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRGrabber::dyn_m_grabVolumeEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_m_grabVolumeEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_grabVolumeEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Vector3 m_lastPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::OVRGrabber::dyn_m_lastPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_m_lastPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_lastPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Quaternion m_lastRot
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::OVRGrabber::dyn_m_lastRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_m_lastRot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_lastRot"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Quaternion m_anchorOffsetRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::OVRGrabber::dyn_m_anchorOffsetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_m_anchorOffsetRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_anchorOffsetRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Vector3 m_anchorOffsetPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::OVRGrabber::dyn_m_anchorOffsetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_m_anchorOffsetPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_anchorOffsetPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single m_prevFlex
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRGrabber::dyn_m_prevFlex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_m_prevFlex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_prevFlex"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected OVRGrabbable m_grabbedObj
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRGrabbable*& GlobalNamespace::OVRGrabber::dyn_m_grabbedObj() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_m_grabbedObj");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_grabbedObj"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRGrabbable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Vector3 m_grabbedObjectPosOff
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::OVRGrabber::dyn_m_grabbedObjectPosOff() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_m_grabbedObjectPosOff");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_grabbedObjectPosOff"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Quaternion m_grabbedObjectRotOff
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::OVRGrabber::dyn_m_grabbedObjectRotOff() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_m_grabbedObjectRotOff");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_grabbedObjectRotOff"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Collections.Generic.Dictionary`2<OVRGrabbable,System.Int32> m_grabCandidates
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::OVRGrabbable*, int>*& GlobalNamespace::OVRGrabber::dyn_m_grabCandidates() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_m_grabCandidates");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_grabCandidates"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::GlobalNamespace::OVRGrabbable*, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean m_operatingWithoutOVRCameraRig
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRGrabber::dyn_m_operatingWithoutOVRCameraRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::dyn_m_operatingWithoutOVRCameraRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_operatingWithoutOVRCameraRig"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRGrabber.get_grabbedObject
::GlobalNamespace::OVRGrabbable* GlobalNamespace::OVRGrabber::get_grabbedObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::get_grabbedObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_grabbedObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRGrabbable*, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabber.ForceRelease
void GlobalNamespace::OVRGrabber::ForceRelease(::GlobalNamespace::OVRGrabbable* grabbable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::ForceRelease");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceRelease", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(grabbable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, grabbable);
}
// Autogenerated method: OVRGrabber.Awake
void GlobalNamespace::OVRGrabber::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::Awake");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRGrabber*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabber.Start
void GlobalNamespace::OVRGrabber::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRGrabber*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabber.Update
void GlobalNamespace::OVRGrabber::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::Update");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRGrabber*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabber.OnUpdatedAnchors
void GlobalNamespace::OVRGrabber::OnUpdatedAnchors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::OnUpdatedAnchors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdatedAnchors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabber.OnDestroy
void GlobalNamespace::OVRGrabber::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabber.OnTriggerEnter
void GlobalNamespace::OVRGrabber::OnTriggerEnter(::UnityEngine::Collider* otherCollider) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(otherCollider)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, otherCollider);
}
// Autogenerated method: OVRGrabber.OnTriggerExit
void GlobalNamespace::OVRGrabber::OnTriggerExit(::UnityEngine::Collider* otherCollider) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(otherCollider)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, otherCollider);
}
// Autogenerated method: OVRGrabber.CheckForGrabOrRelease
void GlobalNamespace::OVRGrabber::CheckForGrabOrRelease(float prevFlex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::CheckForGrabOrRelease");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckForGrabOrRelease", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prevFlex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, prevFlex);
}
// Autogenerated method: OVRGrabber.GrabBegin
void GlobalNamespace::OVRGrabber::GrabBegin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::GrabBegin");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRGrabber*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabber.MoveGrabbedObject
void GlobalNamespace::OVRGrabber::MoveGrabbedObject(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot, bool forceTeleport) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::MoveGrabbedObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRGrabber*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, rot, forceTeleport);
}
// Autogenerated method: OVRGrabber.GrabEnd
void GlobalNamespace::OVRGrabber::GrabEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::GrabEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GrabEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabber.GrabbableRelease
void GlobalNamespace::OVRGrabber::GrabbableRelease(::UnityEngine::Vector3 linearVelocity, ::UnityEngine::Vector3 angularVelocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::GrabbableRelease");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GrabbableRelease", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(linearVelocity), ::il2cpp_utils::ExtractType(angularVelocity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, linearVelocity, angularVelocity);
}
// Autogenerated method: OVRGrabber.GrabVolumeEnable
void GlobalNamespace::OVRGrabber::GrabVolumeEnable(bool enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::GrabVolumeEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRGrabber*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enabled);
}
// Autogenerated method: OVRGrabber.OffhandGrabbed
void GlobalNamespace::OVRGrabber::OffhandGrabbed(::GlobalNamespace::OVRGrabbable* grabbable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::OffhandGrabbed");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRGrabber*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, grabbable);
}
// Autogenerated method: OVRGrabber.SetPlayerIgnoreCollision
void GlobalNamespace::OVRGrabber::SetPlayerIgnoreCollision(::UnityEngine::GameObject* grabbable, bool ignore) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::SetPlayerIgnoreCollision");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayerIgnoreCollision", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(grabbable), ::il2cpp_utils::ExtractType(ignore)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, grabbable, ignore);
}
// Autogenerated method: OVRGrabber.<Awake>b__23_0
void GlobalNamespace::OVRGrabber::$Awake$b__23_0(::GlobalNamespace::OVRCameraRig* r) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGrabber::<Awake>b__23_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__23_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(r)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, r);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRGridCube
#include "GlobalNamespace/OVRGridCube.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: OVRCameraRig
#include "GlobalNamespace/OVRCameraRig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.KeyCode GridKey
[[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& GlobalNamespace::OVRGridCube::dyn_GridKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGridCube::dyn_GridKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "GridKey"))->offset;
  return *reinterpret_cast<::UnityEngine::KeyCode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject CubeGrid
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRGridCube::dyn_CubeGrid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGridCube::dyn_CubeGrid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CubeGrid"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean CubeGridOn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRGridCube::dyn_CubeGridOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGridCube::dyn_CubeGridOn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CubeGridOn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean CubeSwitchColorOld
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRGridCube::dyn_CubeSwitchColorOld() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGridCube::dyn_CubeSwitchColorOld");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CubeSwitchColorOld"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean CubeSwitchColor
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRGridCube::dyn_CubeSwitchColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGridCube::dyn_CubeSwitchColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CubeSwitchColor"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 gridSizeX
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRGridCube::dyn_gridSizeX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGridCube::dyn_gridSizeX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gridSizeX"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 gridSizeY
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRGridCube::dyn_gridSizeY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGridCube::dyn_gridSizeY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gridSizeY"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 gridSizeZ
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRGridCube::dyn_gridSizeZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGridCube::dyn_gridSizeZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gridSizeZ"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single gridScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRGridCube::dyn_gridScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGridCube::dyn_gridScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gridScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single cubeScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRGridCube::dyn_cubeScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGridCube::dyn_cubeScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cubeScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRCameraRig CameraController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRCameraRig*& GlobalNamespace::OVRGridCube::dyn_CameraController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGridCube::dyn_CameraController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CameraController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRCameraRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRGridCube.Update
void GlobalNamespace::OVRGridCube::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGridCube::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGridCube.SetOVRCameraController
void GlobalNamespace::OVRGridCube::SetOVRCameraController(ByRef<::GlobalNamespace::OVRCameraRig*> cameraController) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGridCube::SetOVRCameraController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOVRCameraController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraController)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(cameraController));
}
// Autogenerated method: OVRGridCube.UpdateCubeGrid
void GlobalNamespace::OVRGridCube::UpdateCubeGrid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGridCube::UpdateCubeGrid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCubeGrid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGridCube.CreateCubeGrid
void GlobalNamespace::OVRGridCube::CreateCubeGrid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGridCube::CreateCubeGrid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCubeGrid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGridCube.CubeGridSwitchColor
void GlobalNamespace::OVRGridCube::CubeGridSwitchColor(bool CubeSwitchColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGridCube::CubeGridSwitchColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CubeGridSwitchColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(CubeSwitchColor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, CubeSwitchColor);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRHand
#include "GlobalNamespace/OVRHand.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: OVRHand/HandFinger
#include "GlobalNamespace/OVRHand_HandFinger.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: OVRPlugin/Step
#include "GlobalNamespace/OVRPlugin_Step.hpp"
// Including type: OVRSkeleton/SkeletonPoseData
#include "GlobalNamespace/OVRSkeleton_SkeletonPoseData.hpp"
// Including type: OVRSkeletonRenderer/SkeletonRendererData
#include "GlobalNamespace/OVRSkeletonRenderer_SkeletonRendererData.hpp"
// Including type: OVRMeshRenderer/MeshRendererData
#include "GlobalNamespace/OVRMeshRenderer_MeshRendererData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private OVRHand/Hand HandType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRHand::Hand& GlobalNamespace::OVRHand::dyn_HandType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::dyn_HandType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "HandType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRHand::Hand*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _pointerPoseRoot
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OVRHand::dyn__pointerPoseRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::dyn__pointerPoseRoot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pointerPoseRoot"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _pointerPoseGO
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRHand::dyn__pointerPoseGO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::dyn__pointerPoseGO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pointerPoseGO"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRPlugin/HandState _handState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::HandState& GlobalNamespace::OVRHand::dyn__handState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::dyn__handState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::HandState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsDataValid>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRHand::dyn_$IsDataValid$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::dyn_$IsDataValid$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsDataValid>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsDataHighConfidence>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRHand::dyn_$IsDataHighConfidence$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::dyn_$IsDataHighConfidence$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsDataHighConfidence>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsTracked>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRHand::dyn_$IsTracked$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::dyn_$IsTracked$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsTracked>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsSystemGestureInProgress>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRHand::dyn_$IsSystemGestureInProgress$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::dyn_$IsSystemGestureInProgress$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsSystemGestureInProgress>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsPointerPoseValid>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRHand::dyn_$IsPointerPoseValid$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::dyn_$IsPointerPoseValid$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsPointerPoseValid>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform <PointerPose>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OVRHand::dyn_$PointerPose$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::dyn_$PointerPose$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PointerPose>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <HandScale>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRHand::dyn_$HandScale$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::dyn_$HandScale$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<HandScale>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRHand/TrackingConfidence <HandConfidence>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRHand::TrackingConfidence& GlobalNamespace::OVRHand::dyn_$HandConfidence$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::dyn_$HandConfidence$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<HandConfidence>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRHand::TrackingConfidence*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsDominantHand>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRHand::dyn_$IsDominantHand$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::dyn_$IsDominantHand$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsDominantHand>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRHand.get_IsDataValid
bool GlobalNamespace::OVRHand::get_IsDataValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::get_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_IsDataValid
void GlobalNamespace::OVRHand::set_IsDataValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::set_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_IsDataHighConfidence
bool GlobalNamespace::OVRHand::get_IsDataHighConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::get_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_IsDataHighConfidence
void GlobalNamespace::OVRHand::set_IsDataHighConfidence(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::set_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_IsTracked
bool GlobalNamespace::OVRHand::get_IsTracked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::get_IsTracked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsTracked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_IsTracked
void GlobalNamespace::OVRHand::set_IsTracked(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::set_IsTracked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsTracked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_IsSystemGestureInProgress
bool GlobalNamespace::OVRHand::get_IsSystemGestureInProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::get_IsSystemGestureInProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsSystemGestureInProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_IsSystemGestureInProgress
void GlobalNamespace::OVRHand::set_IsSystemGestureInProgress(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::set_IsSystemGestureInProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsSystemGestureInProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_IsPointerPoseValid
bool GlobalNamespace::OVRHand::get_IsPointerPoseValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::get_IsPointerPoseValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsPointerPoseValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_IsPointerPoseValid
void GlobalNamespace::OVRHand::set_IsPointerPoseValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::set_IsPointerPoseValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsPointerPoseValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_PointerPose
::UnityEngine::Transform* GlobalNamespace::OVRHand::get_PointerPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::get_PointerPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PointerPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_PointerPose
void GlobalNamespace::OVRHand::set_PointerPose(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::set_PointerPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PointerPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_HandScale
float GlobalNamespace::OVRHand::get_HandScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::get_HandScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HandScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_HandScale
void GlobalNamespace::OVRHand::set_HandScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::set_HandScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HandScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_HandConfidence
::GlobalNamespace::OVRHand::TrackingConfidence GlobalNamespace::OVRHand::get_HandConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::get_HandConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HandConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRHand::TrackingConfidence, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_HandConfidence
void GlobalNamespace::OVRHand::set_HandConfidence(::GlobalNamespace::OVRHand::TrackingConfidence value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::set_HandConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HandConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_IsDominantHand
bool GlobalNamespace::OVRHand::get_IsDominantHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::get_IsDominantHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDominantHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_IsDominantHand
void GlobalNamespace::OVRHand::set_IsDominantHand(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::set_IsDominantHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsDominantHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.Awake
void GlobalNamespace::OVRHand::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.Update
void GlobalNamespace::OVRHand::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.FixedUpdate
void GlobalNamespace::OVRHand::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.GetHandState
void GlobalNamespace::OVRHand::GetHandState(::GlobalNamespace::OVRPlugin::Step step) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::GetHandState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHandState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(step)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, step);
}
// Autogenerated method: OVRHand.GetFingerIsPinching
bool GlobalNamespace::OVRHand::GetFingerIsPinching(::GlobalNamespace::OVRHand::HandFinger finger) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::GetFingerIsPinching");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFingerIsPinching", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finger)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, finger);
}
// Autogenerated method: OVRHand.GetFingerPinchStrength
float GlobalNamespace::OVRHand::GetFingerPinchStrength(::GlobalNamespace::OVRHand::HandFinger finger) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::GetFingerPinchStrength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFingerPinchStrength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finger)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, finger);
}
// Autogenerated method: OVRHand.GetFingerConfidence
::GlobalNamespace::OVRHand::TrackingConfidence GlobalNamespace::OVRHand::GetFingerConfidence(::GlobalNamespace::OVRHand::HandFinger finger) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::GetFingerConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFingerConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finger)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRHand::TrackingConfidence, false>(this, ___internal__method, finger);
}
// Autogenerated method: OVRHand.OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonType
::GlobalNamespace::OVRSkeleton::SkeletonType GlobalNamespace::OVRHand::OVRSkeleton_IOVRSkeletonDataProvider_GetSkeletonType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRHand*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRSkeleton::SkeletonType, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonPoseData
::GlobalNamespace::OVRSkeleton::SkeletonPoseData GlobalNamespace::OVRHand::OVRSkeleton_IOVRSkeletonDataProvider_GetSkeletonPoseData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonPoseData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRHand*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRSkeleton::SkeletonPoseData, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.OVRSkeletonRenderer.IOVRSkeletonRendererDataProvider.GetSkeletonRendererData
::GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData GlobalNamespace::OVRHand::OVRSkeletonRenderer_IOVRSkeletonRendererDataProvider_GetSkeletonRendererData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::OVRSkeletonRenderer.IOVRSkeletonRendererDataProvider.GetSkeletonRendererData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRHand*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.OVRMesh.IOVRMeshDataProvider.GetMeshType
::GlobalNamespace::OVRMesh::MeshType GlobalNamespace::OVRHand::OVRMesh_IOVRMeshDataProvider_GetMeshType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::OVRMesh.IOVRMeshDataProvider.GetMeshType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRHand*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRMesh::MeshType, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.OVRMeshRenderer.IOVRMeshRendererDataProvider.GetMeshRendererData
::GlobalNamespace::OVRMeshRenderer::MeshRendererData GlobalNamespace::OVRHand::OVRMeshRenderer_IOVRMeshRendererDataProvider_GetMeshRendererData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::OVRMeshRenderer.IOVRMeshRendererDataProvider.GetMeshRendererData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRHand*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRMeshRenderer::MeshRendererData, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRHand/Hand
#include "GlobalNamespace/OVRHand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRHand/Hand None
::GlobalNamespace::OVRHand::Hand GlobalNamespace::OVRHand::Hand::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::Hand::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRHand::Hand>("", "OVRHand/Hand", "None"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/Hand None
void GlobalNamespace::OVRHand::Hand::_set_None(::GlobalNamespace::OVRHand::Hand value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::Hand::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/Hand", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OVRHand/Hand HandLeft
::GlobalNamespace::OVRHand::Hand GlobalNamespace::OVRHand::Hand::_get_HandLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::Hand::_get_HandLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRHand::Hand>("", "OVRHand/Hand", "HandLeft"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/Hand HandLeft
void GlobalNamespace::OVRHand::Hand::_set_HandLeft(::GlobalNamespace::OVRHand::Hand value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::Hand::_set_HandLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/Hand", "HandLeft", value));
}
// Autogenerated static field getter
// Get static field: static public OVRHand/Hand HandRight
::GlobalNamespace::OVRHand::Hand GlobalNamespace::OVRHand::Hand::_get_HandRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::Hand::_get_HandRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRHand::Hand>("", "OVRHand/Hand", "HandRight"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/Hand HandRight
void GlobalNamespace::OVRHand::Hand::_set_HandRight(::GlobalNamespace::OVRHand::Hand value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::Hand::_set_HandRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/Hand", "HandRight", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRHand::Hand::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::Hand::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRHand/HandFinger
#include "GlobalNamespace/OVRHand_HandFinger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRHand/HandFinger Thumb
::GlobalNamespace::OVRHand::HandFinger GlobalNamespace::OVRHand::HandFinger::_get_Thumb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::HandFinger::_get_Thumb");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRHand::HandFinger>("", "OVRHand/HandFinger", "Thumb"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/HandFinger Thumb
void GlobalNamespace::OVRHand::HandFinger::_set_Thumb(::GlobalNamespace::OVRHand::HandFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::HandFinger::_set_Thumb");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/HandFinger", "Thumb", value));
}
// Autogenerated static field getter
// Get static field: static public OVRHand/HandFinger Index
::GlobalNamespace::OVRHand::HandFinger GlobalNamespace::OVRHand::HandFinger::_get_Index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::HandFinger::_get_Index");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRHand::HandFinger>("", "OVRHand/HandFinger", "Index"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/HandFinger Index
void GlobalNamespace::OVRHand::HandFinger::_set_Index(::GlobalNamespace::OVRHand::HandFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::HandFinger::_set_Index");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/HandFinger", "Index", value));
}
// Autogenerated static field getter
// Get static field: static public OVRHand/HandFinger Middle
::GlobalNamespace::OVRHand::HandFinger GlobalNamespace::OVRHand::HandFinger::_get_Middle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::HandFinger::_get_Middle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRHand::HandFinger>("", "OVRHand/HandFinger", "Middle"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/HandFinger Middle
void GlobalNamespace::OVRHand::HandFinger::_set_Middle(::GlobalNamespace::OVRHand::HandFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::HandFinger::_set_Middle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/HandFinger", "Middle", value));
}
// Autogenerated static field getter
// Get static field: static public OVRHand/HandFinger Ring
::GlobalNamespace::OVRHand::HandFinger GlobalNamespace::OVRHand::HandFinger::_get_Ring() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::HandFinger::_get_Ring");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRHand::HandFinger>("", "OVRHand/HandFinger", "Ring"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/HandFinger Ring
void GlobalNamespace::OVRHand::HandFinger::_set_Ring(::GlobalNamespace::OVRHand::HandFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::HandFinger::_set_Ring");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/HandFinger", "Ring", value));
}
// Autogenerated static field getter
// Get static field: static public OVRHand/HandFinger Pinky
::GlobalNamespace::OVRHand::HandFinger GlobalNamespace::OVRHand::HandFinger::_get_Pinky() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::HandFinger::_get_Pinky");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRHand::HandFinger>("", "OVRHand/HandFinger", "Pinky"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/HandFinger Pinky
void GlobalNamespace::OVRHand::HandFinger::_set_Pinky(::GlobalNamespace::OVRHand::HandFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::HandFinger::_set_Pinky");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/HandFinger", "Pinky", value));
}
// Autogenerated static field getter
// Get static field: static public OVRHand/HandFinger Max
::GlobalNamespace::OVRHand::HandFinger GlobalNamespace::OVRHand::HandFinger::_get_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::HandFinger::_get_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRHand::HandFinger>("", "OVRHand/HandFinger", "Max"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/HandFinger Max
void GlobalNamespace::OVRHand::HandFinger::_set_Max(::GlobalNamespace::OVRHand::HandFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::HandFinger::_set_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/HandFinger", "Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRHand::HandFinger::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::HandFinger::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRHand/TrackingConfidence
#include "GlobalNamespace/OVRHand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRHand/TrackingConfidence Low
::GlobalNamespace::OVRHand::TrackingConfidence GlobalNamespace::OVRHand::TrackingConfidence::_get_Low() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::TrackingConfidence::_get_Low");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRHand::TrackingConfidence>("", "OVRHand/TrackingConfidence", "Low"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/TrackingConfidence Low
void GlobalNamespace::OVRHand::TrackingConfidence::_set_Low(::GlobalNamespace::OVRHand::TrackingConfidence value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::TrackingConfidence::_set_Low");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/TrackingConfidence", "Low", value));
}
// Autogenerated static field getter
// Get static field: static public OVRHand/TrackingConfidence High
::GlobalNamespace::OVRHand::TrackingConfidence GlobalNamespace::OVRHand::TrackingConfidence::_get_High() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::TrackingConfidence::_get_High");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRHand::TrackingConfidence>("", "OVRHand/TrackingConfidence", "High"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/TrackingConfidence High
void GlobalNamespace::OVRHand::TrackingConfidence::_set_High(::GlobalNamespace::OVRHand::TrackingConfidence value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::TrackingConfidence::_set_High");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/TrackingConfidence", "High", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRHand::TrackingConfidence::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHand::TrackingConfidence::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRHandTest
#include "GlobalNamespace/OVRHandTest.hpp"
// Including type: OVRHandTest/BoolMonitor
#include "GlobalNamespace/OVRHandTest_BoolMonitor.hpp"
// Including type: OVRHandTest/<>c
#include "GlobalNamespace/OVRHandTest_--c.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVRPlugin/Mesh
#include "GlobalNamespace/OVRPlugin_Mesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String prevConnected
::StringW GlobalNamespace::OVRHandTest::_get_prevConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::_get_prevConnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "OVRHandTest", "prevConnected"));
}
// Autogenerated static field setter
// Set static field: static private System.String prevConnected
void GlobalNamespace::OVRHandTest::_set_prevConnected(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::_set_prevConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHandTest", "prevConnected", value));
}
// Autogenerated static field getter
// Get static field: static private OVRHandTest/BoolMonitor controllers
::GlobalNamespace::OVRHandTest::BoolMonitor* GlobalNamespace::OVRHandTest::_get_controllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::_get_controllers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRHandTest::BoolMonitor*>("", "OVRHandTest", "controllers"));
}
// Autogenerated static field setter
// Set static field: static private OVRHandTest/BoolMonitor controllers
void GlobalNamespace::OVRHandTest::_set_controllers(::GlobalNamespace::OVRHandTest::BoolMonitor* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::_set_controllers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHandTest", "controllers", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Text uiText
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::OVRHandTest::dyn_uiText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::dyn_uiText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "uiText"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<OVRHandTest/BoolMonitor> monitors
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::OVRHandTest::BoolMonitor*>*& GlobalNamespace::OVRHandTest::dyn_monitors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::dyn_monitors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "monitors"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::OVRHandTest::BoolMonitor*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Text.StringBuilder data
[[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& GlobalNamespace::OVRHandTest::dyn_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::dyn_data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "data"))->offset;
  return *reinterpret_cast<::System::Text::StringBuilder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRPlugin/HandState hs_LH
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::HandState& GlobalNamespace::OVRHandTest::dyn_hs_LH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::dyn_hs_LH");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hs_LH"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::HandState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRPlugin/HandState hs_RH
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::HandState& GlobalNamespace::OVRHandTest::dyn_hs_RH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::dyn_hs_RH");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hs_RH"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::HandState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRPlugin/Skeleton skel_LH
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Skeleton& GlobalNamespace::OVRHandTest::dyn_skel_LH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::dyn_skel_LH");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "skel_LH"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::Skeleton*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRPlugin/Skeleton skel_RH
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Skeleton& GlobalNamespace::OVRHandTest::dyn_skel_RH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::dyn_skel_RH");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "skel_RH"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::Skeleton*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRPlugin/Mesh mesh_LH
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Mesh*& GlobalNamespace::OVRHandTest::dyn_mesh_LH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::dyn_mesh_LH");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mesh_LH"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRPlugin/Mesh mesh_RH
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Mesh*& GlobalNamespace::OVRHandTest::dyn_mesh_RH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::dyn_mesh_RH");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mesh_RH"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean result_skel_LH
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRHandTest::dyn_result_skel_LH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::dyn_result_skel_LH");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "result_skel_LH"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean result_skel_RH
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRHandTest::dyn_result_skel_RH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::dyn_result_skel_RH");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "result_skel_RH"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean result_mesh_LH
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRHandTest::dyn_result_mesh_LH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::dyn_result_mesh_LH");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "result_mesh_LH"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean result_mesh_RH
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRHandTest::dyn_result_mesh_RH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::dyn_result_mesh_RH");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "result_mesh_RH"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRHandTest..cctor
void GlobalNamespace::OVRHandTest::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRHandTest", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRHandTest.Start
void GlobalNamespace::OVRHandTest::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRHandTest.Update
void GlobalNamespace::OVRHandTest::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRHandTest/BoolMonitor
#include "GlobalNamespace/OVRHandTest_BoolMonitor.hpp"
// Including type: OVRHandTest/BoolMonitor/BoolGenerator
#include "GlobalNamespace/OVRHandTest_BoolMonitor_BoolGenerator.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String m_name
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::OVRHandTest::BoolMonitor::dyn_m_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::BoolMonitor::dyn_m_name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRHandTest/BoolMonitor/BoolGenerator m_generator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator*& GlobalNamespace::OVRHandTest::BoolMonitor::dyn_m_generator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::BoolMonitor::dyn_m_generator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_generator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_prevValue
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRHandTest::BoolMonitor::dyn_m_prevValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::BoolMonitor::dyn_m_prevValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_prevValue"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_currentValue
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRHandTest::BoolMonitor::dyn_m_currentValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::BoolMonitor::dyn_m_currentValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_currentValue"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_currentValueRecentlyChanged
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRHandTest::BoolMonitor::dyn_m_currentValueRecentlyChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::BoolMonitor::dyn_m_currentValueRecentlyChanged");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_currentValueRecentlyChanged"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_displayTimeout
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRHandTest::BoolMonitor::dyn_m_displayTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::BoolMonitor::dyn_m_displayTimeout");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_displayTimeout"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_displayTimer
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRHandTest::BoolMonitor::dyn_m_displayTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::BoolMonitor::dyn_m_displayTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_displayTimer"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRHandTest/BoolMonitor.Update
void GlobalNamespace::OVRHandTest::BoolMonitor::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::BoolMonitor::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRHandTest/BoolMonitor.AppendToStringBuilder
void GlobalNamespace::OVRHandTest::BoolMonitor::AppendToStringBuilder(ByRef<::System::Text::StringBuilder*> sb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::BoolMonitor::AppendToStringBuilder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendToStringBuilder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sb)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(sb));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRHandTest/BoolMonitor/BoolGenerator
#include "GlobalNamespace/OVRHandTest_BoolMonitor_BoolGenerator.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRHandTest/BoolMonitor/BoolGenerator.Invoke
bool GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHandTest/BoolMonitor/BoolGenerator.BeginInvoke
::System::IAsyncResult* GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVRHandTest/BoolMonitor/BoolGenerator.EndInvoke
bool GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRHandTest/<>c
#include "GlobalNamespace/OVRHandTest_--c.hpp"
// Including type: OVRHandTest/BoolMonitor/BoolGenerator
#include "GlobalNamespace/OVRHandTest_BoolMonitor_BoolGenerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly OVRHandTest/<>c <>9
::GlobalNamespace::OVRHandTest::$$c* GlobalNamespace::OVRHandTest::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRHandTest::$$c*>("", "OVRHandTest/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly OVRHandTest/<>c <>9
void GlobalNamespace::OVRHandTest::$$c::_set_$$9(::GlobalNamespace::OVRHandTest::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRHandTest/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRHandTest/BoolMonitor/BoolGenerator <>9__14_0
::GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRHandTest::$$c::_get_$$9__14_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::$$c::_get_$$9__14_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator*>("", "OVRHandTest/<>c", "<>9__14_0")));
}
// Autogenerated static field setter
// Set static field: static public OVRHandTest/BoolMonitor/BoolGenerator <>9__14_0
void GlobalNamespace::OVRHandTest::$$c::_set_$$9__14_0(::GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::$$c::_set_$$9__14_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRHandTest/<>c", "<>9__14_0", value)));
}
// Autogenerated method: OVRHandTest/<>c..cctor
void GlobalNamespace::OVRHandTest::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRHandTest/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRHandTest/<>c.<Start>b__14_0
bool GlobalNamespace::OVRHandTest::$$c::$Start$b__14_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::$$c::<Start>b__14_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__14_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHandTest/<>c.<.cctor>b__19_0
bool GlobalNamespace::OVRHandTest::$$c::$_cctor$b__19_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRHandTest::$$c::<.cctor>b__19_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__19_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMesh
#include "GlobalNamespace/OVRMesh.hpp"
// Including type: OVRMesh/IOVRMeshDataProvider
#include "GlobalNamespace/OVRMesh_IOVRMeshDataProvider.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private OVRMesh/IOVRMeshDataProvider _dataProvider
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRMesh::IOVRMeshDataProvider*& GlobalNamespace::OVRMesh::dyn__dataProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMesh::dyn__dataProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dataProvider"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRMesh::IOVRMeshDataProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRMesh/MeshType _meshType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRMesh::MeshType& GlobalNamespace::OVRMesh::dyn__meshType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMesh::dyn__meshType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRMesh::MeshType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Mesh _mesh
[[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& GlobalNamespace::OVRMesh::dyn__mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMesh::dyn__mesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mesh"))->offset;
  return *reinterpret_cast<::UnityEngine::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsInitialized>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRMesh::dyn_$IsInitialized$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMesh::dyn_$IsInitialized$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsInitialized>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRMesh.get_IsInitialized
bool GlobalNamespace::OVRMesh::get_IsInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMesh::get_IsInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMesh.set_IsInitialized
void GlobalNamespace::OVRMesh::set_IsInitialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMesh::set_IsInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMesh.get_Mesh
::UnityEngine::Mesh* GlobalNamespace::OVRMesh::get_Mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMesh::get_Mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: OVRMesh.Awake
void GlobalNamespace::OVRMesh::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMesh::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRMesh.ShouldInitialize
bool GlobalNamespace::OVRMesh::ShouldInitialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMesh::ShouldInitialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldInitialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMesh.Initialize
void GlobalNamespace::OVRMesh::Initialize(::GlobalNamespace::OVRMesh::MeshType meshType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMesh::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(meshType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, meshType);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMesh/IOVRMeshDataProvider
#include "GlobalNamespace/OVRMesh_IOVRMeshDataProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRMesh/IOVRMeshDataProvider.GetMeshType
::GlobalNamespace::OVRMesh::MeshType GlobalNamespace::OVRMesh::IOVRMeshDataProvider::GetMeshType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMesh::IOVRMeshDataProvider::GetMeshType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMesh::IOVRMeshDataProvider*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRMesh::MeshType, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMesh/MeshType
#include "GlobalNamespace/OVRMesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRMesh/MeshType None
::GlobalNamespace::OVRMesh::MeshType GlobalNamespace::OVRMesh::MeshType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMesh::MeshType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRMesh::MeshType>("", "OVRMesh/MeshType", "None"));
}
// Autogenerated static field setter
// Set static field: static public OVRMesh/MeshType None
void GlobalNamespace::OVRMesh::MeshType::_set_None(::GlobalNamespace::OVRMesh::MeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMesh::MeshType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMesh/MeshType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OVRMesh/MeshType HandLeft
::GlobalNamespace::OVRMesh::MeshType GlobalNamespace::OVRMesh::MeshType::_get_HandLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMesh::MeshType::_get_HandLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRMesh::MeshType>("", "OVRMesh/MeshType", "HandLeft"));
}
// Autogenerated static field setter
// Set static field: static public OVRMesh/MeshType HandLeft
void GlobalNamespace::OVRMesh::MeshType::_set_HandLeft(::GlobalNamespace::OVRMesh::MeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMesh::MeshType::_set_HandLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMesh/MeshType", "HandLeft", value));
}
// Autogenerated static field getter
// Get static field: static public OVRMesh/MeshType HandRight
::GlobalNamespace::OVRMesh::MeshType GlobalNamespace::OVRMesh::MeshType::_get_HandRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMesh::MeshType::_get_HandRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRMesh::MeshType>("", "OVRMesh/MeshType", "HandRight"));
}
// Autogenerated static field setter
// Set static field: static public OVRMesh/MeshType HandRight
void GlobalNamespace::OVRMesh::MeshType::_set_HandRight(::GlobalNamespace::OVRMesh::MeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMesh::MeshType::_set_HandRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMesh/MeshType", "HandRight", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRMesh::MeshType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMesh::MeshType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMeshRenderer
#include "GlobalNamespace/OVRMeshRenderer.hpp"
// Including type: OVRMeshRenderer/IOVRMeshRendererDataProvider
#include "GlobalNamespace/OVRMeshRenderer_IOVRMeshRendererDataProvider.hpp"
// Including type: OVRMeshRenderer/MeshRendererData
#include "GlobalNamespace/OVRMeshRenderer_MeshRendererData.hpp"
// Including type: UnityEngine.SkinnedMeshRenderer
#include "UnityEngine/SkinnedMeshRenderer.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: OVRMesh
#include "GlobalNamespace/OVRMesh.hpp"
// Including type: OVRSkeleton
#include "GlobalNamespace/OVRSkeleton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private OVRMeshRenderer/IOVRMeshRendererDataProvider _dataProvider
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRMeshRenderer::IOVRMeshRendererDataProvider*& GlobalNamespace::OVRMeshRenderer::dyn__dataProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::dyn__dataProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dataProvider"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRMeshRenderer::IOVRMeshRendererDataProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRMesh _ovrMesh
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRMesh*& GlobalNamespace::OVRMeshRenderer::dyn__ovrMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::dyn__ovrMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ovrMesh"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRMesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRSkeleton _ovrSkeleton
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSkeleton*& GlobalNamespace::OVRMeshRenderer::dyn__ovrSkeleton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::dyn__ovrSkeleton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ovrSkeleton"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRSkeleton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRMeshRenderer/ConfidenceBehavior _confidenceBehavior
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior& GlobalNamespace::OVRMeshRenderer::dyn__confidenceBehavior() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::dyn__confidenceBehavior");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_confidenceBehavior"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRMeshRenderer/SystemGestureBehavior _systemGestureBehavior
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior& GlobalNamespace::OVRMeshRenderer::dyn__systemGestureBehavior() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::dyn__systemGestureBehavior");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_systemGestureBehavior"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _systemGestureMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::OVRMeshRenderer::dyn__systemGestureMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::dyn__systemGestureMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_systemGestureMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _originalMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::OVRMeshRenderer::dyn__originalMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::dyn__originalMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_originalMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.SkinnedMeshRenderer _skinnedMeshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& GlobalNamespace::OVRMeshRenderer::dyn__skinnedMeshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::dyn__skinnedMeshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_skinnedMeshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::SkinnedMeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsInitialized>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRMeshRenderer::dyn_$IsInitialized$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::dyn_$IsInitialized$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsInitialized>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsDataValid>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRMeshRenderer::dyn_$IsDataValid$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::dyn_$IsDataValid$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsDataValid>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsDataHighConfidence>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRMeshRenderer::dyn_$IsDataHighConfidence$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::dyn_$IsDataHighConfidence$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsDataHighConfidence>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <ShouldUseSystemGestureMaterial>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRMeshRenderer::dyn_$ShouldUseSystemGestureMaterial$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::dyn_$ShouldUseSystemGestureMaterial$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ShouldUseSystemGestureMaterial>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRMeshRenderer.get_IsInitialized
bool GlobalNamespace::OVRMeshRenderer::get_IsInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::get_IsInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer.set_IsInitialized
void GlobalNamespace::OVRMeshRenderer::set_IsInitialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::set_IsInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMeshRenderer.get_IsDataValid
bool GlobalNamespace::OVRMeshRenderer::get_IsDataValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::get_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer.set_IsDataValid
void GlobalNamespace::OVRMeshRenderer::set_IsDataValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::set_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMeshRenderer.get_IsDataHighConfidence
bool GlobalNamespace::OVRMeshRenderer::get_IsDataHighConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::get_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer.set_IsDataHighConfidence
void GlobalNamespace::OVRMeshRenderer::set_IsDataHighConfidence(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::set_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMeshRenderer.get_ShouldUseSystemGestureMaterial
bool GlobalNamespace::OVRMeshRenderer::get_ShouldUseSystemGestureMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::get_ShouldUseSystemGestureMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer.set_ShouldUseSystemGestureMaterial
void GlobalNamespace::OVRMeshRenderer::set_ShouldUseSystemGestureMaterial(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::set_ShouldUseSystemGestureMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMeshRenderer.Awake
void GlobalNamespace::OVRMeshRenderer::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer.Start
void GlobalNamespace::OVRMeshRenderer::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer.ShouldInitialize
bool GlobalNamespace::OVRMeshRenderer::ShouldInitialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::ShouldInitialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldInitialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer.Initialize
void GlobalNamespace::OVRMeshRenderer::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer.Update
void GlobalNamespace::OVRMeshRenderer::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMeshRenderer/IOVRMeshRendererDataProvider
#include "GlobalNamespace/OVRMeshRenderer_IOVRMeshRendererDataProvider.hpp"
// Including type: OVRMeshRenderer/MeshRendererData
#include "GlobalNamespace/OVRMeshRenderer_MeshRendererData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRMeshRenderer/IOVRMeshRendererDataProvider.GetMeshRendererData
::GlobalNamespace::OVRMeshRenderer::MeshRendererData GlobalNamespace::OVRMeshRenderer::IOVRMeshRendererDataProvider::GetMeshRendererData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::IOVRMeshRendererDataProvider::GetMeshRendererData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMeshRenderer::IOVRMeshRendererDataProvider*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRMeshRenderer::MeshRendererData, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMeshRenderer/MeshRendererData
#include "GlobalNamespace/OVRMeshRenderer_MeshRendererData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsDataValid>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRMeshRenderer::MeshRendererData::dyn_$IsDataValid$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::MeshRendererData::dyn_$IsDataValid$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsDataValid>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsDataHighConfidence>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRMeshRenderer::MeshRendererData::dyn_$IsDataHighConfidence$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::MeshRendererData::dyn_$IsDataHighConfidence$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsDataHighConfidence>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <ShouldUseSystemGestureMaterial>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRMeshRenderer::MeshRendererData::dyn_$ShouldUseSystemGestureMaterial$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::MeshRendererData::dyn_$ShouldUseSystemGestureMaterial$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ShouldUseSystemGestureMaterial>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRMeshRenderer/MeshRendererData.get_IsDataValid
bool GlobalNamespace::OVRMeshRenderer::MeshRendererData::get_IsDataValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::MeshRendererData::get_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer/MeshRendererData.set_IsDataValid
void GlobalNamespace::OVRMeshRenderer::MeshRendererData::set_IsDataValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::MeshRendererData::set_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMeshRenderer/MeshRendererData.get_IsDataHighConfidence
bool GlobalNamespace::OVRMeshRenderer::MeshRendererData::get_IsDataHighConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::MeshRendererData::get_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer/MeshRendererData.set_IsDataHighConfidence
void GlobalNamespace::OVRMeshRenderer::MeshRendererData::set_IsDataHighConfidence(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::MeshRendererData::set_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMeshRenderer/MeshRendererData.get_ShouldUseSystemGestureMaterial
bool GlobalNamespace::OVRMeshRenderer::MeshRendererData::get_ShouldUseSystemGestureMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::MeshRendererData::get_ShouldUseSystemGestureMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer/MeshRendererData.set_ShouldUseSystemGestureMaterial
void GlobalNamespace::OVRMeshRenderer::MeshRendererData::set_ShouldUseSystemGestureMaterial(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::MeshRendererData::set_ShouldUseSystemGestureMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMeshRenderer/ConfidenceBehavior
#include "GlobalNamespace/OVRMeshRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRMeshRenderer/ConfidenceBehavior None
::GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior>("", "OVRMeshRenderer/ConfidenceBehavior", "None"));
}
// Autogenerated static field setter
// Set static field: static public OVRMeshRenderer/ConfidenceBehavior None
void GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior::_set_None(::GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMeshRenderer/ConfidenceBehavior", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OVRMeshRenderer/ConfidenceBehavior ToggleRenderer
::GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior::_get_ToggleRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior::_get_ToggleRenderer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior>("", "OVRMeshRenderer/ConfidenceBehavior", "ToggleRenderer"));
}
// Autogenerated static field setter
// Set static field: static public OVRMeshRenderer/ConfidenceBehavior ToggleRenderer
void GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior::_set_ToggleRenderer(::GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior::_set_ToggleRenderer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMeshRenderer/ConfidenceBehavior", "ToggleRenderer", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMeshRenderer/SystemGestureBehavior
#include "GlobalNamespace/OVRMeshRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRMeshRenderer/SystemGestureBehavior None
::GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior>("", "OVRMeshRenderer/SystemGestureBehavior", "None"));
}
// Autogenerated static field setter
// Set static field: static public OVRMeshRenderer/SystemGestureBehavior None
void GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior::_set_None(::GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMeshRenderer/SystemGestureBehavior", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OVRMeshRenderer/SystemGestureBehavior SwapMaterial
::GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior::_get_SwapMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior::_get_SwapMaterial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior>("", "OVRMeshRenderer/SystemGestureBehavior", "SwapMaterial"));
}
// Autogenerated static field setter
// Set static field: static public OVRMeshRenderer/SystemGestureBehavior SwapMaterial
void GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior::_set_SwapMaterial(::GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior::_set_SwapMaterial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMeshRenderer/SystemGestureBehavior", "SwapMaterial", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMixedRealityCaptureConfiguration
#include "GlobalNamespace/OVRMixedRealityCaptureConfiguration.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: OVRManager/CompositionMethod
#include "GlobalNamespace/OVRManager_CompositionMethod.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: OVRManager/CameraDevice
#include "GlobalNamespace/OVRManager_CameraDevice.hpp"
// Including type: OVRManager/DepthQuality
#include "GlobalNamespace/OVRManager_DepthQuality.hpp"
// Including type: OVRManager/VirtualGreenScreenType
#include "GlobalNamespace/OVRManager_VirtualGreenScreenType.hpp"
// Including type: OVRManager/MrcActivationMode
#include "GlobalNamespace/OVRManager_MrcActivationMode.hpp"
// Including type: OVRManager/InstantiateMrcCameraDelegate
#include "GlobalNamespace/OVRManager_InstantiateMrcCameraDelegate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_enableMixedReality
bool GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_enableMixedReality() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_enableMixedReality");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_enableMixedReality
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_enableMixedReality(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_enableMixedReality");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_extraHiddenLayers
::UnityEngine::LayerMask GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_extraHiddenLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_extraHiddenLayers");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::LayerMask, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_extraHiddenLayers
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_extraHiddenLayers(::UnityEngine::LayerMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_extraHiddenLayers");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_extraVisibleLayers
::UnityEngine::LayerMask GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_extraVisibleLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_extraVisibleLayers");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::LayerMask, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_extraVisibleLayers
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_extraVisibleLayers(::UnityEngine::LayerMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_extraVisibleLayers");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_dynamicCullingMask
bool GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_dynamicCullingMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_dynamicCullingMask");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_dynamicCullingMask
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_dynamicCullingMask(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_dynamicCullingMask");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_compositionMethod
::GlobalNamespace::OVRManager_CompositionMethod GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_compositionMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_compositionMethod");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_CompositionMethod, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_compositionMethod
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_compositionMethod(::GlobalNamespace::OVRManager_CompositionMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_compositionMethod");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorRift
::UnityEngine::Color GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_externalCompositionBackdropColorRift() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_externalCompositionBackdropColorRift");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorRift
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_externalCompositionBackdropColorRift(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_externalCompositionBackdropColorRift");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorQuest
::UnityEngine::Color GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_externalCompositionBackdropColorQuest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_externalCompositionBackdropColorQuest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorQuest
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_externalCompositionBackdropColorQuest(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_externalCompositionBackdropColorQuest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_capturingCameraDevice
::GlobalNamespace::OVRManager_CameraDevice GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_capturingCameraDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_capturingCameraDevice");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_CameraDevice, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_capturingCameraDevice
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_capturingCameraDevice(::GlobalNamespace::OVRManager_CameraDevice value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_capturingCameraDevice");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_flipCameraFrameHorizontally
bool GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_flipCameraFrameHorizontally() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_flipCameraFrameHorizontally");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_flipCameraFrameHorizontally
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_flipCameraFrameHorizontally(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_flipCameraFrameHorizontally");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_flipCameraFrameVertically
bool GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_flipCameraFrameVertically() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_flipCameraFrameVertically");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_flipCameraFrameVertically
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_flipCameraFrameVertically(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_flipCameraFrameVertically");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_handPoseStateLatency
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_handPoseStateLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_handPoseStateLatency");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_handPoseStateLatency
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_handPoseStateLatency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_handPoseStateLatency");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_sandwichCompositionRenderLatency
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_sandwichCompositionRenderLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_sandwichCompositionRenderLatency");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_sandwichCompositionRenderLatency
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_sandwichCompositionRenderLatency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_sandwichCompositionRenderLatency");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_sandwichCompositionBufferedFrames
int GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_sandwichCompositionBufferedFrames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_sandwichCompositionBufferedFrames");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_sandwichCompositionBufferedFrames
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_sandwichCompositionBufferedFrames(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_sandwichCompositionBufferedFrames");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_chromaKeyColor
::UnityEngine::Color GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_chromaKeyColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_chromaKeyColor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_chromaKeyColor
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_chromaKeyColor(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_chromaKeyColor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_chromaKeySimilarity
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_chromaKeySimilarity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_chromaKeySimilarity");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_chromaKeySimilarity
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_chromaKeySimilarity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_chromaKeySimilarity");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_chromaKeySmoothRange
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_chromaKeySmoothRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_chromaKeySmoothRange");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_chromaKeySmoothRange
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_chromaKeySmoothRange(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_chromaKeySmoothRange");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_chromaKeySpillRange
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_chromaKeySpillRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_chromaKeySpillRange");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_chromaKeySpillRange
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_chromaKeySpillRange(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_chromaKeySpillRange");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_useDynamicLighting
bool GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_useDynamicLighting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_useDynamicLighting");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_useDynamicLighting
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_useDynamicLighting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_useDynamicLighting");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_depthQuality
::GlobalNamespace::OVRManager_DepthQuality GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_depthQuality() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_depthQuality");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_DepthQuality, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_depthQuality
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_depthQuality(::GlobalNamespace::OVRManager_DepthQuality value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_depthQuality");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_dynamicLightingSmoothFactor
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_dynamicLightingSmoothFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_dynamicLightingSmoothFactor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_dynamicLightingSmoothFactor
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_dynamicLightingSmoothFactor(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_dynamicLightingSmoothFactor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_dynamicLightingDepthVariationClampingValue
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_dynamicLightingDepthVariationClampingValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_dynamicLightingDepthVariationClampingValue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_dynamicLightingDepthVariationClampingValue
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_dynamicLightingDepthVariationClampingValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_dynamicLightingDepthVariationClampingValue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenType
::GlobalNamespace::OVRManager_VirtualGreenScreenType GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_VirtualGreenScreenType, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenType
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenType(::GlobalNamespace::OVRManager_VirtualGreenScreenType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenTopY
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenTopY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenTopY");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenTopY
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenTopY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenTopY");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenBottomY
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenBottomY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenBottomY");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenBottomY
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenBottomY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenBottomY");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenApplyDepthCulling
bool GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenApplyDepthCulling() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenApplyDepthCulling");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenApplyDepthCulling
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenApplyDepthCulling(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenApplyDepthCulling");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenDepthTolerance
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenDepthTolerance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenDepthTolerance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenDepthTolerance
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenDepthTolerance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenDepthTolerance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_mrcActivationMode
::GlobalNamespace::OVRManager_MrcActivationMode GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_mrcActivationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_mrcActivationMode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_MrcActivationMode, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_mrcActivationMode
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_mrcActivationMode(::GlobalNamespace::OVRManager_MrcActivationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_mrcActivationMode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_instantiateMixedRealityCameraGameObject
::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_instantiateMixedRealityCameraGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_instantiateMixedRealityCameraGameObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_instantiateMixedRealityCameraGameObject
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_instantiateMixedRealityCameraGameObject(::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_instantiateMixedRealityCameraGameObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMixedRealityCaptureConfigurationExtensions
#include "GlobalNamespace/OVRMixedRealityCaptureConfigurationExtensions.hpp"
// Including type: OVRMixedRealityCaptureConfiguration
#include "GlobalNamespace/OVRMixedRealityCaptureConfiguration.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRMixedRealityCaptureConfigurationExtensions.ApplyTo
void GlobalNamespace::OVRMixedRealityCaptureConfigurationExtensions::ApplyTo(::GlobalNamespace::OVRMixedRealityCaptureConfiguration* dest, ::GlobalNamespace::OVRMixedRealityCaptureConfiguration* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfigurationExtensions::ApplyTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRMixedRealityCaptureConfigurationExtensions", "ApplyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(source)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dest, source);
}
// Autogenerated method: OVRMixedRealityCaptureConfigurationExtensions.ReadFrom
void GlobalNamespace::OVRMixedRealityCaptureConfigurationExtensions::ReadFrom(::GlobalNamespace::OVRMixedRealityCaptureConfiguration* dest, ::GlobalNamespace::OVRMixedRealityCaptureConfiguration* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureConfigurationExtensions::ReadFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRMixedRealityCaptureConfigurationExtensions", "ReadFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(source)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dest, source);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMixedRealityCaptureSettings
#include "GlobalNamespace/OVRMixedRealityCaptureSettings.hpp"
// Including type: OVRManager/InstantiateMrcCameraDelegate
#include "GlobalNamespace/OVRManager_InstantiateMrcCameraDelegate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean enableMixedReality
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_enableMixedReality() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_enableMixedReality");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enableMixedReality"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask extraHiddenLayers
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_extraHiddenLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_extraHiddenLayers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "extraHiddenLayers"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask extraVisibleLayers
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_extraVisibleLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_extraVisibleLayers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "extraVisibleLayers"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean dynamicCullingMask
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_dynamicCullingMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_dynamicCullingMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dynamicCullingMask"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRManager/CompositionMethod compositionMethod
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_CompositionMethod& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_compositionMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_compositionMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "compositionMethod"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_CompositionMethod*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color externalCompositionBackdropColorRift
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_externalCompositionBackdropColorRift() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_externalCompositionBackdropColorRift");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "externalCompositionBackdropColorRift"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color externalCompositionBackdropColorQuest
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_externalCompositionBackdropColorQuest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_externalCompositionBackdropColorQuest");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "externalCompositionBackdropColorQuest"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRManager/CameraDevice capturingCameraDevice
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_CameraDevice& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_capturingCameraDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_capturingCameraDevice");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "capturingCameraDevice"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_CameraDevice*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean flipCameraFrameHorizontally
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_flipCameraFrameHorizontally() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_flipCameraFrameHorizontally");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flipCameraFrameHorizontally"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean flipCameraFrameVertically
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_flipCameraFrameVertically() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_flipCameraFrameVertically");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flipCameraFrameVertically"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single handPoseStateLatency
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_handPoseStateLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_handPoseStateLatency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handPoseStateLatency"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single sandwichCompositionRenderLatency
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_sandwichCompositionRenderLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_sandwichCompositionRenderLatency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sandwichCompositionRenderLatency"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 sandwichCompositionBufferedFrames
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_sandwichCompositionBufferedFrames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_sandwichCompositionBufferedFrames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sandwichCompositionBufferedFrames"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color chromaKeyColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_chromaKeyColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_chromaKeyColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chromaKeyColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single chromaKeySimilarity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_chromaKeySimilarity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_chromaKeySimilarity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chromaKeySimilarity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single chromaKeySmoothRange
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_chromaKeySmoothRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_chromaKeySmoothRange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chromaKeySmoothRange"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single chromaKeySpillRange
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_chromaKeySpillRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_chromaKeySpillRange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chromaKeySpillRange"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean useDynamicLighting
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_useDynamicLighting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_useDynamicLighting");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useDynamicLighting"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRManager/DepthQuality depthQuality
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_DepthQuality& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_depthQuality() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_depthQuality");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "depthQuality"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_DepthQuality*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single dynamicLightingSmoothFactor
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_dynamicLightingSmoothFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_dynamicLightingSmoothFactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dynamicLightingSmoothFactor"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single dynamicLightingDepthVariationClampingValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_dynamicLightingDepthVariationClampingValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_dynamicLightingDepthVariationClampingValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dynamicLightingDepthVariationClampingValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRManager/VirtualGreenScreenType virtualGreenScreenType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_VirtualGreenScreenType& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_virtualGreenScreenType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_virtualGreenScreenType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "virtualGreenScreenType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_VirtualGreenScreenType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single virtualGreenScreenTopY
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_virtualGreenScreenTopY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_virtualGreenScreenTopY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "virtualGreenScreenTopY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single virtualGreenScreenBottomY
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_virtualGreenScreenBottomY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_virtualGreenScreenBottomY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "virtualGreenScreenBottomY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean virtualGreenScreenApplyDepthCulling
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_virtualGreenScreenApplyDepthCulling() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_virtualGreenScreenApplyDepthCulling");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "virtualGreenScreenApplyDepthCulling"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single virtualGreenScreenDepthTolerance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_virtualGreenScreenDepthTolerance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_virtualGreenScreenDepthTolerance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "virtualGreenScreenDepthTolerance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRManager/MrcActivationMode mrcActivationMode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_MrcActivationMode& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_mrcActivationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_mrcActivationMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mrcActivationMode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_MrcActivationMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRManager/InstantiateMrcCameraDelegate <OVRMixedRealityCaptureConfiguration.instantiateMixedRealityCameraGameObject>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*& GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_$OVRMixedRealityCaptureConfiguration_instantiateMixedRealityCameraGameObject$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::dyn_$OVRMixedRealityCaptureConfiguration_instantiateMixedRealityCameraGameObject$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<OVRMixedRealityCaptureConfiguration.instantiateMixedRealityCameraGameObject>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_enableMixedReality
bool GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_enableMixedReality() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_enableMixedReality");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_enableMixedReality
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_enableMixedReality(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_enableMixedReality");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_extraHiddenLayers
::UnityEngine::LayerMask GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_extraHiddenLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_extraHiddenLayers");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::LayerMask, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_extraHiddenLayers
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_extraHiddenLayers(::UnityEngine::LayerMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_extraHiddenLayers");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_extraVisibleLayers
::UnityEngine::LayerMask GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_extraVisibleLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_extraVisibleLayers");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::LayerMask, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_extraVisibleLayers
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_extraVisibleLayers(::UnityEngine::LayerMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_extraVisibleLayers");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_dynamicCullingMask
bool GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_dynamicCullingMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_dynamicCullingMask");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 10));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_dynamicCullingMask
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_dynamicCullingMask(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_dynamicCullingMask");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_compositionMethod
::GlobalNamespace::OVRManager_CompositionMethod GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_compositionMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_compositionMethod");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_CompositionMethod, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_compositionMethod
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_compositionMethod(::GlobalNamespace::OVRManager_CompositionMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_compositionMethod");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorRift
::UnityEngine::Color GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_externalCompositionBackdropColorRift() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorRift");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorRift
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_externalCompositionBackdropColorRift(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorRift");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorQuest
::UnityEngine::Color GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_externalCompositionBackdropColorQuest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorQuest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 16));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorQuest
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_externalCompositionBackdropColorQuest(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorQuest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 17));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_capturingCameraDevice
::GlobalNamespace::OVRManager_CameraDevice GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_capturingCameraDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_capturingCameraDevice");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 18));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_CameraDevice, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_capturingCameraDevice
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_capturingCameraDevice(::GlobalNamespace::OVRManager_CameraDevice value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_capturingCameraDevice");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 19));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_flipCameraFrameHorizontally
bool GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_flipCameraFrameHorizontally() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_flipCameraFrameHorizontally");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 20));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_flipCameraFrameHorizontally
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_flipCameraFrameHorizontally(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_flipCameraFrameHorizontally");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 21));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_flipCameraFrameVertically
bool GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_flipCameraFrameVertically() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_flipCameraFrameVertically");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 22));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_flipCameraFrameVertically
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_flipCameraFrameVertically(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_flipCameraFrameVertically");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 23));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_handPoseStateLatency
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_handPoseStateLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_handPoseStateLatency");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 24));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_handPoseStateLatency
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_handPoseStateLatency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_handPoseStateLatency");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 25));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_sandwichCompositionRenderLatency
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_sandwichCompositionRenderLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_sandwichCompositionRenderLatency");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 26));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_sandwichCompositionRenderLatency
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_sandwichCompositionRenderLatency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_sandwichCompositionRenderLatency");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 27));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_sandwichCompositionBufferedFrames
int GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_sandwichCompositionBufferedFrames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_sandwichCompositionBufferedFrames");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 28));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_sandwichCompositionBufferedFrames
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_sandwichCompositionBufferedFrames(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_sandwichCompositionBufferedFrames");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_chromaKeyColor
::UnityEngine::Color GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_chromaKeyColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_chromaKeyColor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 30));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_chromaKeyColor
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_chromaKeyColor(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_chromaKeyColor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 31));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_chromaKeySimilarity
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_chromaKeySimilarity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_chromaKeySimilarity");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 32));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_chromaKeySimilarity
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_chromaKeySimilarity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_chromaKeySimilarity");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 33));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_chromaKeySmoothRange
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_chromaKeySmoothRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_chromaKeySmoothRange");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 34));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_chromaKeySmoothRange
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_chromaKeySmoothRange(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_chromaKeySmoothRange");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 35));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_chromaKeySpillRange
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_chromaKeySpillRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_chromaKeySpillRange");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 36));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_chromaKeySpillRange
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_chromaKeySpillRange(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_chromaKeySpillRange");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 37));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_useDynamicLighting
bool GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_useDynamicLighting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_useDynamicLighting");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 38));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_useDynamicLighting
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_useDynamicLighting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_useDynamicLighting");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 39));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_depthQuality
::GlobalNamespace::OVRManager_DepthQuality GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_depthQuality() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_depthQuality");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 40));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_DepthQuality, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_depthQuality
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_depthQuality(::GlobalNamespace::OVRManager_DepthQuality value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_depthQuality");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 41));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_dynamicLightingSmoothFactor
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_dynamicLightingSmoothFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_dynamicLightingSmoothFactor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 42));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_dynamicLightingSmoothFactor
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_dynamicLightingSmoothFactor(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_dynamicLightingSmoothFactor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 43));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_dynamicLightingDepthVariationClampingValue
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_dynamicLightingDepthVariationClampingValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_dynamicLightingDepthVariationClampingValue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 44));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_dynamicLightingDepthVariationClampingValue
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_dynamicLightingDepthVariationClampingValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_dynamicLightingDepthVariationClampingValue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 45));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenType
::GlobalNamespace::OVRManager_VirtualGreenScreenType GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 46));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_VirtualGreenScreenType, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenType
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenType(::GlobalNamespace::OVRManager_VirtualGreenScreenType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 47));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenTopY
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenTopY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenTopY");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 48));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenTopY
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenTopY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenTopY");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 49));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenBottomY
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenBottomY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenBottomY");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 50));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenBottomY
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenBottomY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenBottomY");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 51));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenApplyDepthCulling
bool GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenApplyDepthCulling() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenApplyDepthCulling");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 52));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenApplyDepthCulling
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenApplyDepthCulling(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenApplyDepthCulling");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 53));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenDepthTolerance
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenDepthTolerance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenDepthTolerance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 54));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenDepthTolerance
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenDepthTolerance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenDepthTolerance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 55));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_mrcActivationMode
::GlobalNamespace::OVRManager_MrcActivationMode GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_mrcActivationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_mrcActivationMode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 56));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_MrcActivationMode, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_mrcActivationMode
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_mrcActivationMode(::GlobalNamespace::OVRManager_MrcActivationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_mrcActivationMode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 57));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_instantiateMixedRealityCameraGameObject
::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_instantiateMixedRealityCameraGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_instantiateMixedRealityCameraGameObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 58));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_instantiateMixedRealityCameraGameObject
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_instantiateMixedRealityCameraGameObject(::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_instantiateMixedRealityCameraGameObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRMixedRealityCaptureSettings*), 59));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMixedRealityCaptureTest
#include "GlobalNamespace/OVRMixedRealityCaptureTest.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean inited
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRMixedRealityCaptureTest::dyn_inited() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureTest::dyn_inited");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inited"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRMixedRealityCaptureTest/CameraMode currentMode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode& GlobalNamespace::OVRMixedRealityCaptureTest::dyn_currentMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureTest::dyn_currentMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentMode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Camera defaultExternalCamera
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& GlobalNamespace::OVRMixedRealityCaptureTest::dyn_defaultExternalCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureTest::dyn_defaultExternalCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultExternalCamera"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRPlugin/Fovf defaultFov
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Fovf& GlobalNamespace::OVRMixedRealityCaptureTest::dyn_defaultFov() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureTest::dyn_defaultFov");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultFov"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::Fovf*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRMixedRealityCaptureTest.Start
void GlobalNamespace::OVRMixedRealityCaptureTest::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureTest::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureTest.Initialize
void GlobalNamespace::OVRMixedRealityCaptureTest::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureTest::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureTest.UpdateDefaultExternalCamera
void GlobalNamespace::OVRMixedRealityCaptureTest::UpdateDefaultExternalCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureTest::UpdateDefaultExternalCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDefaultExternalCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureTest.Update
void GlobalNamespace::OVRMixedRealityCaptureTest::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureTest::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMixedRealityCaptureTest/CameraMode
#include "GlobalNamespace/OVRMixedRealityCaptureTest.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRMixedRealityCaptureTest/CameraMode Normal
::GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode>("", "OVRMixedRealityCaptureTest/CameraMode", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public OVRMixedRealityCaptureTest/CameraMode Normal
void GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_set_Normal(::GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMixedRealityCaptureTest/CameraMode", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public OVRMixedRealityCaptureTest/CameraMode OverrideFov
::GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_get_OverrideFov() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_get_OverrideFov");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode>("", "OVRMixedRealityCaptureTest/CameraMode", "OverrideFov"));
}
// Autogenerated static field setter
// Set static field: static public OVRMixedRealityCaptureTest/CameraMode OverrideFov
void GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_set_OverrideFov(::GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_set_OverrideFov");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMixedRealityCaptureTest/CameraMode", "OverrideFov", value));
}
// Autogenerated static field getter
// Get static field: static public OVRMixedRealityCaptureTest/CameraMode ThirdPerson
::GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_get_ThirdPerson() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_get_ThirdPerson");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode>("", "OVRMixedRealityCaptureTest/CameraMode", "ThirdPerson"));
}
// Autogenerated static field setter
// Set static field: static public OVRMixedRealityCaptureTest/CameraMode ThirdPerson
void GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_set_ThirdPerson(::GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_set_ThirdPerson");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMixedRealityCaptureTest/CameraMode", "ThirdPerson", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRModeParms
#include "GlobalNamespace/OVRModeParms.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public OVRInput/RawButton resetButton
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawButton& GlobalNamespace::OVRModeParms::dyn_resetButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRModeParms::dyn_resetButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "resetButton"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRInput::RawButton*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRModeParms.Start
void GlobalNamespace::OVRModeParms::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRModeParms::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRModeParms.Update
void GlobalNamespace::OVRModeParms::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRModeParms::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRModeParms.TestPowerStateMode
void GlobalNamespace::OVRModeParms::TestPowerStateMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRModeParms::TestPowerStateMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TestPowerStateMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMonoscopic
#include "GlobalNamespace/OVRMonoscopic.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public OVRInput/RawButton toggleButton
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawButton& GlobalNamespace::OVRMonoscopic::dyn_toggleButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMonoscopic::dyn_toggleButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "toggleButton"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRInput::RawButton*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean monoscopic
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRMonoscopic::dyn_monoscopic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMonoscopic::dyn_monoscopic");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "monoscopic"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRMonoscopic.Update
void GlobalNamespace::OVRMonoscopic::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMonoscopic::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRNetwork
#include "GlobalNamespace/OVRNetwork.hpp"
// Including type: OVRNetwork/FrameHeader
#include "GlobalNamespace/OVRNetwork_FrameHeader.hpp"
// Including type: OVRNetwork/OVRNetworkTcpServer
#include "GlobalNamespace/OVRNetwork_OVRNetworkTcpServer.hpp"
// Including type: OVRNetwork/OVRNetworkTcpClient
#include "GlobalNamespace/OVRNetwork_OVRNetworkTcpClient.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 MaxBufferLength
int GlobalNamespace::OVRNetwork::_get_MaxBufferLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::_get_MaxBufferLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRNetwork", "MaxBufferLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MaxBufferLength
void GlobalNamespace::OVRNetwork::_set_MaxBufferLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::_set_MaxBufferLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRNetwork", "MaxBufferLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 MaxPayloadLength
int GlobalNamespace::OVRNetwork::_get_MaxPayloadLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::_get_MaxPayloadLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRNetwork", "MaxPayloadLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MaxPayloadLength
void GlobalNamespace::OVRNetwork::_set_MaxPayloadLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::_set_MaxPayloadLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRNetwork", "MaxPayloadLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 FrameHeaderMagicIdentifier
uint GlobalNamespace::OVRNetwork::_get_FrameHeaderMagicIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::_get_FrameHeaderMagicIdentifier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("", "OVRNetwork", "FrameHeaderMagicIdentifier"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 FrameHeaderMagicIdentifier
void GlobalNamespace::OVRNetwork::_set_FrameHeaderMagicIdentifier(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::_set_FrameHeaderMagicIdentifier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRNetwork", "FrameHeaderMagicIdentifier", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRNetwork/FrameHeader
#include "GlobalNamespace/OVRNetwork_FrameHeader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 StructSize
int GlobalNamespace::OVRNetwork::FrameHeader::_get_StructSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::FrameHeader::_get_StructSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRNetwork/FrameHeader", "StructSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 StructSize
void GlobalNamespace::OVRNetwork::FrameHeader::_set_StructSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::FrameHeader::_set_StructSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRNetwork/FrameHeader", "StructSize", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 protocolIdentifier
[[deprecated("Use field access instead!")]] uint& GlobalNamespace::OVRNetwork::FrameHeader::dyn_protocolIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::FrameHeader::dyn_protocolIdentifier");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "protocolIdentifier"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 payloadType
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRNetwork::FrameHeader::dyn_payloadType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::FrameHeader::dyn_payloadType");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "payloadType"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 payloadLength
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRNetwork::FrameHeader::dyn_payloadLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::FrameHeader::dyn_payloadLength");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "payloadLength"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRNetwork/FrameHeader.ToBytes
::ArrayW<uint8_t> GlobalNamespace::OVRNetwork::FrameHeader::ToBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::FrameHeader::ToBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: OVRNetwork/FrameHeader.FromBytes
::GlobalNamespace::OVRNetwork::FrameHeader GlobalNamespace::OVRNetwork::FrameHeader::FromBytes(::ArrayW<uint8_t> arr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::FrameHeader::FromBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRNetwork/FrameHeader", "FromBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arr)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRNetwork::FrameHeader, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, arr);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRNetwork/OVRNetworkTcpServer
#include "GlobalNamespace/OVRNetwork_OVRNetworkTcpServer.hpp"
// Including type: System.Net.Sockets.TcpListener
#include "System/Net/Sockets/TcpListener.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Net.Sockets.TcpClient
#include "System/Net/Sockets/TcpClient.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Net.Sockets.TcpListener tcpListener
[[deprecated("Use field access instead!")]] ::System::Net::Sockets::TcpListener*& GlobalNamespace::OVRNetwork::OVRNetworkTcpServer::dyn_tcpListener() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpServer::dyn_tcpListener");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tcpListener"))->offset;
  return *reinterpret_cast<::System::Net::Sockets::TcpListener**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Object clientsLock
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::OVRNetwork::OVRNetworkTcpServer::dyn_clientsLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpServer::dyn_clientsLock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clientsLock"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Collections.Generic.List`1<System.Net.Sockets.TcpClient> clients
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Net::Sockets::TcpClient*>*& GlobalNamespace::OVRNetwork::OVRNetworkTcpServer::dyn_clients() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpServer::dyn_clients");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clients"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Net::Sockets::TcpClient*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRNetwork/OVRNetworkTcpServer.StartListening
void GlobalNamespace::OVRNetwork::OVRNetworkTcpServer::StartListening(int listeningPort) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpServer::StartListening");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartListening", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(listeningPort)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, listeningPort);
}
// Autogenerated method: OVRNetwork/OVRNetworkTcpServer.StopListening
void GlobalNamespace::OVRNetwork::OVRNetworkTcpServer::StopListening() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpServer::StopListening");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopListening", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRNetwork/OVRNetworkTcpServer.DoAcceptTcpClientCallback
void GlobalNamespace::OVRNetwork::OVRNetworkTcpServer::DoAcceptTcpClientCallback(::System::IAsyncResult* ar) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpServer::DoAcceptTcpClientCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoAcceptTcpClientCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ar)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ar);
}
// Autogenerated method: OVRNetwork/OVRNetworkTcpServer.HasConnectedClient
bool GlobalNamespace::OVRNetwork::OVRNetworkTcpServer::HasConnectedClient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpServer::HasConnectedClient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasConnectedClient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRNetwork/OVRNetworkTcpServer.Broadcast
void GlobalNamespace::OVRNetwork::OVRNetworkTcpServer::Broadcast(int payloadType, ::ArrayW<uint8_t> payload) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpServer::Broadcast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Broadcast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(payloadType), ::il2cpp_utils::ExtractType(payload)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, payloadType, payload);
}
// Autogenerated method: OVRNetwork/OVRNetworkTcpServer.DoWriteDataCallback
void GlobalNamespace::OVRNetwork::OVRNetworkTcpServer::DoWriteDataCallback(::System::IAsyncResult* ar) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpServer::DoWriteDataCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoWriteDataCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ar)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ar);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRNetwork/OVRNetworkTcpClient
#include "GlobalNamespace/OVRNetwork_OVRNetworkTcpClient.hpp"
// Including type: OVRNetwork/OVRNetworkTcpClient/ConnectionState
#include "GlobalNamespace/OVRNetwork_OVRNetworkTcpClient_ConnectionState.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`4
#include "System/Action_4.hpp"
// Including type: System.Net.Sockets.TcpClient
#include "System/Net/Sockets/TcpClient.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Action connectionStateChangedCallback
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::dyn_connectionStateChangedCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::dyn_connectionStateChangedCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "connectionStateChangedCallback"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`4<System.Int32,System.Byte[],System.Int32,System.Int32> payloadReceivedCallback
[[deprecated("Use field access instead!")]] ::System::Action_4<int, ::ArrayW<uint8_t>, int, int>*& GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::dyn_payloadReceivedCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::dyn_payloadReceivedCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "payloadReceivedCallback"))->offset;
  return *reinterpret_cast<::System::Action_4<int, ::ArrayW<uint8_t>, int, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Net.Sockets.TcpClient tcpClient
[[deprecated("Use field access instead!")]] ::System::Net::Sockets::TcpClient*& GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::dyn_tcpClient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::dyn_tcpClient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tcpClient"))->offset;
  return *reinterpret_cast<::System::Net::Sockets::TcpClient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Byte[][] receivedBuffers
[[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<uint8_t>>& GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::dyn_receivedBuffers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::dyn_receivedBuffers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "receivedBuffers"))->offset;
  return *reinterpret_cast<::ArrayW<::ArrayW<uint8_t>>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 receivedBufferIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::dyn_receivedBufferIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::dyn_receivedBufferIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "receivedBufferIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 receivedBufferDataSize
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::dyn_receivedBufferDataSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::dyn_receivedBufferDataSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "receivedBufferDataSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ManualResetEvent readyReceiveDataEvent
[[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::dyn_readyReceiveDataEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::dyn_readyReceiveDataEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "readyReceiveDataEvent"))->offset;
  return *reinterpret_cast<::System::Threading::ManualResetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRNetwork/OVRNetworkTcpClient.get_connectionState
::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::get_connectionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::get_connectionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState, false>(this, ___internal__method);
}
// Autogenerated method: OVRNetwork/OVRNetworkTcpClient.get_Connected
bool GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::get_Connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::get_Connected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Connected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRNetwork/OVRNetworkTcpClient.Connect
void GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::Connect(int listeningPort) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::Connect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(listeningPort)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, listeningPort);
}
// Autogenerated method: OVRNetwork/OVRNetworkTcpClient.ConnectCallback
void GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectCallback(::System::IAsyncResult* ar) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ar)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ar);
}
// Autogenerated method: OVRNetwork/OVRNetworkTcpClient.Disconnect
void GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::Disconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRNetwork/OVRNetworkTcpClient.Tick
void GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::Tick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Tick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRNetwork/OVRNetworkTcpClient.OnReadDataCallback
void GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::OnReadDataCallback(::System::IAsyncResult* ar) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::OnReadDataCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnReadDataCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ar)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ar);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRNetwork/OVRNetworkTcpClient/ConnectionState
#include "GlobalNamespace/OVRNetwork_OVRNetworkTcpClient_ConnectionState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRNetwork/OVRNetworkTcpClient/ConnectionState Disconnected
::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState::_get_Disconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState::_get_Disconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState>("", "OVRNetwork/OVRNetworkTcpClient/ConnectionState", "Disconnected"));
}
// Autogenerated static field setter
// Set static field: static public OVRNetwork/OVRNetworkTcpClient/ConnectionState Disconnected
void GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState::_set_Disconnected(::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState::_set_Disconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRNetwork/OVRNetworkTcpClient/ConnectionState", "Disconnected", value));
}
// Autogenerated static field getter
// Get static field: static public OVRNetwork/OVRNetworkTcpClient/ConnectionState Connected
::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState::_get_Connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState::_get_Connected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState>("", "OVRNetwork/OVRNetworkTcpClient/ConnectionState", "Connected"));
}
// Autogenerated static field setter
// Set static field: static public OVRNetwork/OVRNetworkTcpClient/ConnectionState Connected
void GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState::_set_Connected(::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState::_set_Connected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRNetwork/OVRNetworkTcpClient/ConnectionState", "Connected", value));
}
// Autogenerated static field getter
// Get static field: static public OVRNetwork/OVRNetworkTcpClient/ConnectionState Connecting
::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState::_get_Connecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState::_get_Connecting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState>("", "OVRNetwork/OVRNetworkTcpClient/ConnectionState", "Connecting"));
}
// Autogenerated static field setter
// Set static field: static public OVRNetwork/OVRNetworkTcpClient/ConnectionState Connecting
void GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState::_set_Connecting(::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState::_set_Connecting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRNetwork/OVRNetworkTcpClient/ConnectionState", "Connecting", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRNetwork::OVRNetworkTcpClient::ConnectionState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlayerController
#include "GlobalNamespace/OVRPlayerController.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.CharacterController
#include "UnityEngine/CharacterController.hpp"
// Including type: OVRCameraRig
#include "GlobalNamespace/OVRCameraRig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single Acceleration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRPlayerController::dyn_Acceleration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_Acceleration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Acceleration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single Damping
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRPlayerController::dyn_Damping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_Damping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Damping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single BackAndSideDampen
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRPlayerController::dyn_BackAndSideDampen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_BackAndSideDampen");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BackAndSideDampen"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single JumpForce
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRPlayerController::dyn_JumpForce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_JumpForce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "JumpForce"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single RotationAmount
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRPlayerController::dyn_RotationAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_RotationAmount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RotationAmount"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single RotationRatchet
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRPlayerController::dyn_RotationRatchet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_RotationRatchet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RotationRatchet"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean SnapRotation
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRPlayerController::dyn_SnapRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_SnapRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SnapRotation"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean RotateAroundGuardianCenter
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRPlayerController::dyn_RotateAroundGuardianCenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_RotateAroundGuardianCenter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RotateAroundGuardianCenter"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 FixedSpeedSteps
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRPlayerController::dyn_FixedSpeedSteps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_FixedSpeedSteps");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FixedSpeedSteps"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean HmdResetsY
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRPlayerController::dyn_HmdResetsY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_HmdResetsY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "HmdResetsY"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean HmdRotatesY
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRPlayerController::dyn_HmdRotatesY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_HmdRotatesY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "HmdRotatesY"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single GravityModifier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRPlayerController::dyn_GravityModifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_GravityModifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "GravityModifier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean useProfileData
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRPlayerController::dyn_useProfileData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_useProfileData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useProfileData"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single CameraHeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRPlayerController::dyn_CameraHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_CameraHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CameraHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.Transform> TransformUpdated
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Transform*>*& GlobalNamespace::OVRPlayerController::dyn_TransformUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_TransformUpdated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TransformUpdated"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::Transform*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean Teleported
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRPlayerController::dyn_Teleported() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_Teleported");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Teleported"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action CameraUpdated
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OVRPlayerController::dyn_CameraUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_CameraUpdated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CameraUpdated"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action PreCharacterMove
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::OVRPlayerController::dyn_PreCharacterMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_PreCharacterMove");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PreCharacterMove"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean EnableLinearMovement
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRPlayerController::dyn_EnableLinearMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_EnableLinearMovement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "EnableLinearMovement"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean EnableRotation
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRPlayerController::dyn_EnableRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_EnableRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "EnableRotation"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean RotationEitherThumbstick
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRPlayerController::dyn_RotationEitherThumbstick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_RotationEitherThumbstick");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RotationEitherThumbstick"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.CharacterController Controller
[[deprecated("Use field access instead!")]] ::UnityEngine::CharacterController*& GlobalNamespace::OVRPlayerController::dyn_Controller() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_Controller");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Controller"))->offset;
  return *reinterpret_cast<::UnityEngine::CharacterController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected OVRCameraRig CameraRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRCameraRig*& GlobalNamespace::OVRPlayerController::dyn_CameraRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_CameraRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CameraRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRCameraRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single MoveScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRPlayerController::dyn_MoveScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_MoveScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MoveScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 MoveThrottle
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::OVRPlayerController::dyn_MoveThrottle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_MoveThrottle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MoveThrottle"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single FallSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRPlayerController::dyn_FallSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_FallSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FallSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<OVRPose> InitialPose
[[deprecated("Use field access instead!")]] ::System::Nullable_1<::GlobalNamespace::OVRPose>& GlobalNamespace::OVRPlayerController::dyn_InitialPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_InitialPose");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InitialPose"))->offset;
  return *reinterpret_cast<::System::Nullable_1<::GlobalNamespace::OVRPose>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <InitialYRotation>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRPlayerController::dyn_$InitialYRotation$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_$InitialYRotation$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<InitialYRotation>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single MoveScaleMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRPlayerController::dyn_MoveScaleMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_MoveScaleMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MoveScaleMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single RotationScaleMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRPlayerController::dyn_RotationScaleMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_RotationScaleMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RotationScaleMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean SkipMouseRotation
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRPlayerController::dyn_SkipMouseRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_SkipMouseRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SkipMouseRotation"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean HaltUpdateMovement
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRPlayerController::dyn_HaltUpdateMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_HaltUpdateMovement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "HaltUpdateMovement"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean prevHatLeft
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRPlayerController::dyn_prevHatLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_prevHatLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevHatLeft"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean prevHatRight
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRPlayerController::dyn_prevHatRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_prevHatRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevHatRight"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single SimulationRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRPlayerController::dyn_SimulationRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_SimulationRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SimulationRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single buttonRotation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRPlayerController::dyn_buttonRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_buttonRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonRotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean ReadyToSnapTurn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRPlayerController::dyn_ReadyToSnapTurn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_ReadyToSnapTurn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ReadyToSnapTurn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean playerControllerEnabled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRPlayerController::dyn_playerControllerEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::dyn_playerControllerEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerControllerEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRPlayerController.get_InitialYRotation
float GlobalNamespace::OVRPlayerController::get_InitialYRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::get_InitialYRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InitialYRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRPlayerController.set_InitialYRotation
void GlobalNamespace::OVRPlayerController::set_InitialYRotation(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::set_InitialYRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_InitialYRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRPlayerController.add_TransformUpdated
void GlobalNamespace::OVRPlayerController::add_TransformUpdated(::System::Action_1<::UnityEngine::Transform*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::add_TransformUpdated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_TransformUpdated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRPlayerController.remove_TransformUpdated
void GlobalNamespace::OVRPlayerController::remove_TransformUpdated(::System::Action_1<::UnityEngine::Transform*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::remove_TransformUpdated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_TransformUpdated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRPlayerController.add_CameraUpdated
void GlobalNamespace::OVRPlayerController::add_CameraUpdated(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::add_CameraUpdated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_CameraUpdated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRPlayerController.remove_CameraUpdated
void GlobalNamespace::OVRPlayerController::remove_CameraUpdated(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::remove_CameraUpdated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_CameraUpdated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRPlayerController.add_PreCharacterMove
void GlobalNamespace::OVRPlayerController::add_PreCharacterMove(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::add_PreCharacterMove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PreCharacterMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRPlayerController.remove_PreCharacterMove
void GlobalNamespace::OVRPlayerController::remove_PreCharacterMove(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::remove_PreCharacterMove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PreCharacterMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRPlayerController.Start
void GlobalNamespace::OVRPlayerController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRPlayerController.Awake
void GlobalNamespace::OVRPlayerController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRPlayerController.OnEnable
void GlobalNamespace::OVRPlayerController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRPlayerController.OnDisable
void GlobalNamespace::OVRPlayerController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRPlayerController.Update
void GlobalNamespace::OVRPlayerController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRPlayerController.UpdateController
void GlobalNamespace::OVRPlayerController::UpdateController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::UpdateController");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRPlayerController*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRPlayerController.UpdateMovement
void GlobalNamespace::OVRPlayerController::UpdateMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::UpdateMovement");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRPlayerController*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRPlayerController.UpdateTransform
void GlobalNamespace::OVRPlayerController::UpdateTransform(::GlobalNamespace::OVRCameraRig* rig) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::UpdateTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rig)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rig);
}
// Autogenerated method: OVRPlayerController.Jump
bool GlobalNamespace::OVRPlayerController::Jump() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::Jump");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Jump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRPlayerController.Stop
void GlobalNamespace::OVRPlayerController::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRPlayerController.GetMoveScaleMultiplier
void GlobalNamespace::OVRPlayerController::GetMoveScaleMultiplier(ByRef<float> moveScaleMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::GetMoveScaleMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMoveScaleMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(moveScaleMultiplier)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(moveScaleMultiplier));
}
// Autogenerated method: OVRPlayerController.SetMoveScaleMultiplier
void GlobalNamespace::OVRPlayerController::SetMoveScaleMultiplier(float moveScaleMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::SetMoveScaleMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMoveScaleMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(moveScaleMultiplier)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, moveScaleMultiplier);
}
// Autogenerated method: OVRPlayerController.GetRotationScaleMultiplier
void GlobalNamespace::OVRPlayerController::GetRotationScaleMultiplier(ByRef<float> rotationScaleMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::GetRotationScaleMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRotationScaleMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotationScaleMultiplier)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(rotationScaleMultiplier));
}
// Autogenerated method: OVRPlayerController.SetRotationScaleMultiplier
void GlobalNamespace::OVRPlayerController::SetRotationScaleMultiplier(float rotationScaleMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::SetRotationScaleMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetRotationScaleMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotationScaleMultiplier)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rotationScaleMultiplier);
}
// Autogenerated method: OVRPlayerController.GetSkipMouseRotation
void GlobalNamespace::OVRPlayerController::GetSkipMouseRotation(ByRef<bool> skipMouseRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::GetSkipMouseRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSkipMouseRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(skipMouseRotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(skipMouseRotation));
}
// Autogenerated method: OVRPlayerController.SetSkipMouseRotation
void GlobalNamespace::OVRPlayerController::SetSkipMouseRotation(bool skipMouseRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::SetSkipMouseRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSkipMouseRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(skipMouseRotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, skipMouseRotation);
}
// Autogenerated method: OVRPlayerController.GetHaltUpdateMovement
void GlobalNamespace::OVRPlayerController::GetHaltUpdateMovement(ByRef<bool> haltUpdateMovement) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::GetHaltUpdateMovement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHaltUpdateMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(haltUpdateMovement)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(haltUpdateMovement));
}
// Autogenerated method: OVRPlayerController.SetHaltUpdateMovement
void GlobalNamespace::OVRPlayerController::SetHaltUpdateMovement(bool haltUpdateMovement) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::SetHaltUpdateMovement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHaltUpdateMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(haltUpdateMovement)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, haltUpdateMovement);
}
// Autogenerated method: OVRPlayerController.ResetOrientation
void GlobalNamespace::OVRPlayerController::ResetOrientation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlayerController::ResetOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRProgressIndicator
#include "GlobalNamespace/OVRProgressIndicator.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.MeshRenderer progressImage
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::OVRProgressIndicator::dyn_progressImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProgressIndicator::dyn_progressImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "progressImage"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single currentProgress
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRProgressIndicator::dyn_currentProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProgressIndicator::dyn_currentProgress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentProgress"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRProgressIndicator.Awake
void GlobalNamespace::OVRProgressIndicator::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProgressIndicator::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRProgressIndicator.Update
void GlobalNamespace::OVRProgressIndicator::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRProgressIndicator::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRRaycaster
#include "GlobalNamespace/OVRRaycaster.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: OVRRaycaster/<>c
#include "GlobalNamespace/OVRRaycaster_--c.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Canvas
#include "UnityEngine/Canvas.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Ray
#include "UnityEngine/Ray.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<OVRRaycaster/RaycastHit> s_SortedGraphics
::System::Collections::Generic::List_1<::GlobalNamespace::OVRRaycaster::RaycastHit>* GlobalNamespace::OVRRaycaster::_get_s_SortedGraphics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::_get_s_SortedGraphics");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::OVRRaycaster::RaycastHit>*>("", "OVRRaycaster", "s_SortedGraphics"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<OVRRaycaster/RaycastHit> s_SortedGraphics
void GlobalNamespace::OVRRaycaster::_set_s_SortedGraphics(::System::Collections::Generic::List_1<::GlobalNamespace::OVRRaycaster::RaycastHit>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::_set_s_SortedGraphics");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRRaycaster", "s_SortedGraphics", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject pointer
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRRaycaster::dyn_pointer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::dyn_pointer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointer"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 sortOrder
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRRaycaster::dyn_sortOrder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::dyn_sortOrder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sortOrder"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Canvas m_Canvas
[[deprecated("Use field access instead!")]] ::UnityEngine::Canvas*& GlobalNamespace::OVRRaycaster::dyn_m_Canvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::dyn_m_Canvas");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Canvas"))->offset;
  return *reinterpret_cast<::UnityEngine::Canvas**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<OVRRaycaster/RaycastHit> m_RaycastResults
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::OVRRaycaster::RaycastHit>*& GlobalNamespace::OVRRaycaster::dyn_m_RaycastResults() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::dyn_m_RaycastResults");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_RaycastResults"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::OVRRaycaster::RaycastHit>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRRaycaster.get_canvas
::UnityEngine::Canvas* GlobalNamespace::OVRRaycaster::get_canvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::get_canvas");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canvas", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Canvas*, false>(this, ___internal__method);
}
// Autogenerated method: OVRRaycaster..cctor
void GlobalNamespace::OVRRaycaster::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRRaycaster", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRRaycaster.Raycast
void GlobalNamespace::OVRRaycaster::Raycast(::UnityEngine::EventSystems::PointerEventData* eventData, ::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>* resultAppendList, ::UnityEngine::Ray ray, bool checkForBlocking) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::Raycast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Raycast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData), ::il2cpp_utils::ExtractType(resultAppendList), ::il2cpp_utils::ExtractType(ray), ::il2cpp_utils::ExtractType(checkForBlocking)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData, resultAppendList, ray, checkForBlocking);
}
// Autogenerated method: OVRRaycaster.RaycastPointer
void GlobalNamespace::OVRRaycaster::RaycastPointer(::UnityEngine::EventSystems::PointerEventData* eventData, ::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>* resultAppendList) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::RaycastPointer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RaycastPointer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData), ::il2cpp_utils::ExtractType(resultAppendList)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData, resultAppendList);
}
// Autogenerated method: OVRRaycaster.GraphicRaycast
void GlobalNamespace::OVRRaycaster::GraphicRaycast(::UnityEngine::Canvas* canvas, ::UnityEngine::Ray ray, ::System::Collections::Generic::List_1<::GlobalNamespace::OVRRaycaster::RaycastHit>* results) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::GraphicRaycast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GraphicRaycast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(canvas), ::il2cpp_utils::ExtractType(ray), ::il2cpp_utils::ExtractType(results)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, canvas, ray, results);
}
// Autogenerated method: OVRRaycaster.GetScreenPosition
::UnityEngine::Vector2 GlobalNamespace::OVRRaycaster::GetScreenPosition(::UnityEngine::EventSystems::RaycastResult raycastResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::GetScreenPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScreenPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(raycastResult)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, raycastResult);
}
// Autogenerated method: OVRRaycaster.RayIntersectsRectTransform
bool GlobalNamespace::OVRRaycaster::RayIntersectsRectTransform(::UnityEngine::RectTransform* rectTransform, ::UnityEngine::Ray ray, ByRef<::UnityEngine::Vector3> worldPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::RayIntersectsRectTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRRaycaster", "RayIntersectsRectTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rectTransform), ::il2cpp_utils::ExtractType(ray), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, rectTransform, ray, byref(worldPos));
}
// Autogenerated method: OVRRaycaster.IsFocussed
bool GlobalNamespace::OVRRaycaster::IsFocussed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::IsFocussed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsFocussed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRRaycaster.OnPointerEnter
void GlobalNamespace::OVRRaycaster::OnPointerEnter(::UnityEngine::EventSystems::PointerEventData* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::OnPointerEnter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRRaycaster*), 22));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: OVRRaycaster.get_eventCamera
::UnityEngine::Camera* GlobalNamespace::OVRRaycaster::get_eventCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::get_eventCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UI::GraphicRaycaster*), 18));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Camera*, false>(this, ___internal__method);
}
// Autogenerated method: OVRRaycaster.get_sortOrderPriority
int GlobalNamespace::OVRRaycaster::get_sortOrderPriority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::get_sortOrderPriority");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UI::GraphicRaycaster*), 20));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OVRRaycaster.Start
void GlobalNamespace::OVRRaycaster::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::EventSystems::UIBehaviour*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRRaycaster.Raycast
void GlobalNamespace::OVRRaycaster::Raycast(::UnityEngine::EventSystems::PointerEventData* eventData, ::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>* resultAppendList) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::Raycast");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UI::GraphicRaycaster*), 17));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData, resultAppendList);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRRaycaster/<>c
#include "GlobalNamespace/OVRRaycaster_--c.hpp"
// Including type: System.Comparison`1
#include "System/Comparison_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly OVRRaycaster/<>c <>9
::GlobalNamespace::OVRRaycaster::$$c* GlobalNamespace::OVRRaycaster::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRRaycaster::$$c*>("", "OVRRaycaster/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly OVRRaycaster/<>c <>9
void GlobalNamespace::OVRRaycaster::$$c::_set_$$9(::GlobalNamespace::OVRRaycaster::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRRaycaster/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Comparison`1<OVRRaycaster/RaycastHit> <>9__16_0
::System::Comparison_1<::GlobalNamespace::OVRRaycaster::RaycastHit>* GlobalNamespace::OVRRaycaster::$$c::_get_$$9__16_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::$$c::_get_$$9__16_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Comparison_1<::GlobalNamespace::OVRRaycaster::RaycastHit>*>("", "OVRRaycaster/<>c", "<>9__16_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Comparison`1<OVRRaycaster/RaycastHit> <>9__16_0
void GlobalNamespace::OVRRaycaster::$$c::_set_$$9__16_0(::System::Comparison_1<::GlobalNamespace::OVRRaycaster::RaycastHit>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::$$c::_set_$$9__16_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRRaycaster/<>c", "<>9__16_0", value)));
}
// Autogenerated method: OVRRaycaster/<>c..cctor
void GlobalNamespace::OVRRaycaster::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRRaycaster/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRRaycaster/<>c.<GraphicRaycast>b__16_0
int GlobalNamespace::OVRRaycaster::$$c::$GraphicRaycast$b__16_0(::GlobalNamespace::OVRRaycaster::RaycastHit g1, ::GlobalNamespace::OVRRaycaster::RaycastHit g2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRaycaster::$$c::<GraphicRaycast>b__16_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GraphicRaycast>b__16_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(g1), ::il2cpp_utils::ExtractType(g2)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, g1, g2);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRResetOrientation
#include "GlobalNamespace/OVRResetOrientation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public OVRInput/RawButton resetButton
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawButton& GlobalNamespace::OVRResetOrientation::dyn_resetButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRResetOrientation::dyn_resetButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "resetButton"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRInput::RawButton*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRResetOrientation.Update
void GlobalNamespace::OVRResetOrientation::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRResetOrientation::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSceneSampleController
#include "GlobalNamespace/OVRSceneSampleController.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: OVRPlayerController
#include "GlobalNamespace/OVRPlayerController.hpp"
// Including type: OVRCameraRig
#include "GlobalNamespace/OVRCameraRig.hpp"
// Including type: OVRGridCube
#include "GlobalNamespace/OVRGridCube.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.KeyCode quitKey
[[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& GlobalNamespace::OVRSceneSampleController::dyn_quitKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneSampleController::dyn_quitKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "quitKey"))->offset;
  return *reinterpret_cast<::UnityEngine::KeyCode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture fadeInTexture
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::OVRSceneSampleController::dyn_fadeInTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneSampleController::dyn_fadeInTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeInTexture"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single speedRotationIncrement
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSceneSampleController::dyn_speedRotationIncrement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneSampleController::dyn_speedRotationIncrement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "speedRotationIncrement"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRPlayerController playerController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlayerController*& GlobalNamespace::OVRSceneSampleController::dyn_playerController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneSampleController::dyn_playerController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlayerController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRCameraRig cameraController
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRCameraRig*& GlobalNamespace::OVRSceneSampleController::dyn_cameraController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneSampleController::dyn_cameraController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cameraController"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRCameraRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String layerName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::OVRSceneSampleController::dyn_layerName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneSampleController::dyn_layerName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "layerName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean visionMode
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSceneSampleController::dyn_visionMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneSampleController::dyn_visionMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "visionMode"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRGridCube gridCube
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRGridCube*& GlobalNamespace::OVRSceneSampleController::dyn_gridCube() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneSampleController::dyn_gridCube");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gridCube"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRGridCube**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRSceneSampleController.Awake
void GlobalNamespace::OVRSceneSampleController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneSampleController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneSampleController.Start
void GlobalNamespace::OVRSceneSampleController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneSampleController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneSampleController.Update
void GlobalNamespace::OVRSceneSampleController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneSampleController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneSampleController.UpdateVisionMode
void GlobalNamespace::OVRSceneSampleController::UpdateVisionMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneSampleController::UpdateVisionMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVisionMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneSampleController.UpdateSpeedAndRotationScaleMultiplier
void GlobalNamespace::OVRSceneSampleController::UpdateSpeedAndRotationScaleMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneSampleController::UpdateSpeedAndRotationScaleMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSpeedAndRotationScaleMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneSampleController.UpdateRecenterPose
void GlobalNamespace::OVRSceneSampleController::UpdateRecenterPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneSampleController::UpdateRecenterPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRecenterPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRScreenFade
#include "GlobalNamespace/OVRScreenFade.hpp"
// Including type: OVRScreenFade/<Fade>d__25
#include "GlobalNamespace/OVRScreenFade_-Fade-d__25.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private OVRScreenFade <instance>k__BackingField
::GlobalNamespace::OVRScreenFade* GlobalNamespace::OVRScreenFade::_get_$instance$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::_get_$instance$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRScreenFade*>("", "OVRScreenFade", "<instance>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private OVRScreenFade <instance>k__BackingField
void GlobalNamespace::OVRScreenFade::_set_$instance$k__BackingField(::GlobalNamespace::OVRScreenFade* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::_set_$instance$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRScreenFade", "<instance>k__BackingField", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Single fadeTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRScreenFade::dyn_fadeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::dyn_fadeTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color fadeColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::OVRScreenFade::dyn_fadeColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::dyn_fadeColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean fadeOnStart
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRScreenFade::dyn_fadeOnStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::dyn_fadeOnStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeOnStart"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 renderQueue
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRScreenFade::dyn_renderQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::dyn_renderQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderQueue"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single explicitFadeAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRScreenFade::dyn_explicitFadeAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::dyn_explicitFadeAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "explicitFadeAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single animatedFadeAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRScreenFade::dyn_animatedFadeAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::dyn_animatedFadeAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animatedFadeAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single uiFadeAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRScreenFade::dyn_uiFadeAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::dyn_uiFadeAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "uiFadeAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer fadeRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::OVRScreenFade::dyn_fadeRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::dyn_fadeRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshFilter fadeMesh
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& GlobalNamespace::OVRScreenFade::dyn_fadeMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::dyn_fadeMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeMesh"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshFilter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material fadeMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::OVRScreenFade::dyn_fadeMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::dyn_fadeMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isFading
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRScreenFade::dyn_isFading() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::dyn_isFading");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isFading"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRScreenFade.get_instance
::GlobalNamespace::OVRScreenFade* GlobalNamespace::OVRScreenFade::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRScreenFade", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRScreenFade*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRScreenFade.set_instance
void GlobalNamespace::OVRScreenFade::set_instance(::GlobalNamespace::OVRScreenFade* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::set_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRScreenFade", "set_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRScreenFade.get_currentAlpha
float GlobalNamespace::OVRScreenFade::get_currentAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::get_currentAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade.Start
void GlobalNamespace::OVRScreenFade::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade.FadeIn
void GlobalNamespace::OVRScreenFade::FadeIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::FadeIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade.FadeOut
void GlobalNamespace::OVRScreenFade::FadeOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::FadeOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade.OnLevelFinishedLoading
void GlobalNamespace::OVRScreenFade::OnLevelFinishedLoading(int level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::OnLevelFinishedLoading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnLevelFinishedLoading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, level);
}
// Autogenerated method: OVRScreenFade.OnEnable
void GlobalNamespace::OVRScreenFade::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade.OnDestroy
void GlobalNamespace::OVRScreenFade::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade.SetUIFade
void GlobalNamespace::OVRScreenFade::SetUIFade(float level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::SetUIFade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUIFade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, level);
}
// Autogenerated method: OVRScreenFade.SetExplicitFade
void GlobalNamespace::OVRScreenFade::SetExplicitFade(float level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::SetExplicitFade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetExplicitFade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, level);
}
// Autogenerated method: OVRScreenFade.Fade
::System::Collections::IEnumerator* GlobalNamespace::OVRScreenFade::Fade(float startAlpha, float endAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::Fade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startAlpha), ::il2cpp_utils::ExtractType(endAlpha)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, startAlpha, endAlpha);
}
// Autogenerated method: OVRScreenFade.SetMaterialAlpha
void GlobalNamespace::OVRScreenFade::SetMaterialAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::SetMaterialAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMaterialAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRScreenFade/<Fade>d__25
#include "GlobalNamespace/OVRScreenFade_-Fade-d__25.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRScreenFade::$Fade$d__25::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::$Fade$d__25::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::OVRScreenFade::$Fade$d__25::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::$Fade$d__25::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRScreenFade <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRScreenFade*& GlobalNamespace::OVRScreenFade::$Fade$d__25::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::$Fade$d__25::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRScreenFade**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single startAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRScreenFade::$Fade$d__25::dyn_startAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::$Fade$d__25::dyn_startAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single endAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRScreenFade::$Fade$d__25::dyn_endAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::$Fade$d__25::dyn_endAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <elapsedTime>5__2
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRScreenFade::$Fade$d__25::dyn_$elapsedTime$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::$Fade$d__25::dyn_$elapsedTime$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<elapsedTime>5__2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRScreenFade/<Fade>d__25.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::OVRScreenFade::$Fade$d__25::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::$Fade$d__25::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRScreenFade::$Fade$d__25*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade/<Fade>d__25.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::OVRScreenFade::$Fade$d__25::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::$Fade$d__25::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRScreenFade::$Fade$d__25*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade/<Fade>d__25.System.IDisposable.Dispose
void GlobalNamespace::OVRScreenFade::$Fade$d__25::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::$Fade$d__25::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRScreenFade::$Fade$d__25*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade/<Fade>d__25.MoveNext
bool GlobalNamespace::OVRScreenFade::$Fade$d__25::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::$Fade$d__25::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRScreenFade::$Fade$d__25*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade/<Fade>d__25.System.Collections.IEnumerator.Reset
void GlobalNamespace::OVRScreenFade::$Fade$d__25::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRScreenFade::$Fade$d__25::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRScreenFade::$Fade$d__25*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeleton
#include "GlobalNamespace/OVRSkeleton.hpp"
// Including type: OVRSkeleton/IOVRSkeletonDataProvider
#include "GlobalNamespace/OVRSkeleton_IOVRSkeletonDataProvider.hpp"
// Including type: OVRSkeleton/SkeletonPoseData
#include "GlobalNamespace/OVRSkeleton_SkeletonPoseData.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: OVRSkeleton/BoneId
#include "GlobalNamespace/OVRSkeleton_BoneId.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: OVRBone
#include "GlobalNamespace/OVRBone.hpp"
// Including type: OVRBoneCapsule
#include "GlobalNamespace/OVRBoneCapsule.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected OVRSkeleton/SkeletonType _skeletonType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSkeleton::SkeletonType& GlobalNamespace::OVRSkeleton::dyn__skeletonType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn__skeletonType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_skeletonType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRSkeleton::SkeletonType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRSkeleton/IOVRSkeletonDataProvider _dataProvider
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSkeleton::IOVRSkeletonDataProvider*& GlobalNamespace::OVRSkeleton::dyn__dataProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn__dataProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dataProvider"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRSkeleton::IOVRSkeletonDataProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _updateRootPose
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSkeleton::dyn__updateRootPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn__updateRootPose");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_updateRootPose"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _updateRootScale
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSkeleton::dyn__updateRootScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn__updateRootScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_updateRootScale"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _enablePhysicsCapsules
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSkeleton::dyn__enablePhysicsCapsules() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn__enablePhysicsCapsules");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_enablePhysicsCapsules"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _bonesGO
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRSkeleton::dyn__bonesGO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn__bonesGO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bonesGO"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _bindPosesGO
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRSkeleton::dyn__bindPosesGO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn__bindPosesGO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bindPosesGO"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _capsulesGO
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRSkeleton::dyn__capsulesGO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn__capsulesGO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_capsulesGO"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Collections.Generic.List`1<OVRBone> _bones
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::OVRBone*>*& GlobalNamespace::OVRSkeleton::dyn__bones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn__bones");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bones"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::OVRBone*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<OVRBone> _bindPoses
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::OVRBone*>*& GlobalNamespace::OVRSkeleton::dyn__bindPoses() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn__bindPoses");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bindPoses"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::OVRBone*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<OVRBoneCapsule> _capsules
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::OVRBoneCapsule*>*& GlobalNamespace::OVRSkeleton::dyn__capsules() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn__capsules");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_capsules"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::OVRBoneCapsule*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected OVRPlugin/Skeleton2 _skeleton
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Skeleton2& GlobalNamespace::OVRSkeleton::dyn__skeleton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn__skeleton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_skeleton"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::Skeleton2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Quaternion wristFixupRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::OVRSkeleton::dyn_wristFixupRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn_wristFixupRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wristFixupRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsInitialized>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSkeleton::dyn_$IsInitialized$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn_$IsInitialized$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsInitialized>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsDataValid>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSkeleton::dyn_$IsDataValid$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn_$IsDataValid$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsDataValid>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsDataHighConfidence>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSkeleton::dyn_$IsDataHighConfidence$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn_$IsDataHighConfidence$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsDataHighConfidence>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IList`1<OVRBone> <Bones>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IList_1<::GlobalNamespace::OVRBone*>*& GlobalNamespace::OVRSkeleton::dyn_$Bones$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn_$Bones$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Bones>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IList_1<::GlobalNamespace::OVRBone*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IList`1<OVRBone> <BindPoses>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IList_1<::GlobalNamespace::OVRBone*>*& GlobalNamespace::OVRSkeleton::dyn_$BindPoses$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn_$BindPoses$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BindPoses>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IList_1<::GlobalNamespace::OVRBone*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IList`1<OVRBoneCapsule> <Capsules>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IList_1<::GlobalNamespace::OVRBoneCapsule*>*& GlobalNamespace::OVRSkeleton::dyn_$Capsules$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn_$Capsules$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Capsules>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IList_1<::GlobalNamespace::OVRBoneCapsule*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <SkeletonChangedCount>k__BackingField
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRSkeleton::dyn_$SkeletonChangedCount$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::dyn_$SkeletonChangedCount$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<SkeletonChangedCount>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRSkeleton.get_IsInitialized
bool GlobalNamespace::OVRSkeleton::get_IsInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::get_IsInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.set_IsInitialized
void GlobalNamespace::OVRSkeleton::set_IsInitialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::set_IsInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton.get_IsDataValid
bool GlobalNamespace::OVRSkeleton::get_IsDataValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::get_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.set_IsDataValid
void GlobalNamespace::OVRSkeleton::set_IsDataValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::set_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton.get_IsDataHighConfidence
bool GlobalNamespace::OVRSkeleton::get_IsDataHighConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::get_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.set_IsDataHighConfidence
void GlobalNamespace::OVRSkeleton::set_IsDataHighConfidence(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::set_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton.get_Bones
::System::Collections::Generic::IList_1<::GlobalNamespace::OVRBone*>* GlobalNamespace::OVRSkeleton::get_Bones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::get_Bones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Bones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IList_1<::GlobalNamespace::OVRBone*>*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.set_Bones
void GlobalNamespace::OVRSkeleton::set_Bones(::System::Collections::Generic::IList_1<::GlobalNamespace::OVRBone*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::set_Bones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Bones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton.get_BindPoses
::System::Collections::Generic::IList_1<::GlobalNamespace::OVRBone*>* GlobalNamespace::OVRSkeleton::get_BindPoses() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::get_BindPoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IList_1<::GlobalNamespace::OVRBone*>*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.set_BindPoses
void GlobalNamespace::OVRSkeleton::set_BindPoses(::System::Collections::Generic::IList_1<::GlobalNamespace::OVRBone*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::set_BindPoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BindPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton.get_Capsules
::System::Collections::Generic::IList_1<::GlobalNamespace::OVRBoneCapsule*>* GlobalNamespace::OVRSkeleton::get_Capsules() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::get_Capsules");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Capsules", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IList_1<::GlobalNamespace::OVRBoneCapsule*>*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.set_Capsules
void GlobalNamespace::OVRSkeleton::set_Capsules(::System::Collections::Generic::IList_1<::GlobalNamespace::OVRBoneCapsule*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::set_Capsules");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Capsules", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton.get_SkeletonChangedCount
int GlobalNamespace::OVRSkeleton::get_SkeletonChangedCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::get_SkeletonChangedCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SkeletonChangedCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.set_SkeletonChangedCount
void GlobalNamespace::OVRSkeleton::set_SkeletonChangedCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::set_SkeletonChangedCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SkeletonChangedCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton.GetSkeletonType
::GlobalNamespace::OVRSkeleton::SkeletonType GlobalNamespace::OVRSkeleton::GetSkeletonType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::GetSkeletonType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSkeletonType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRSkeleton::SkeletonType, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.Awake
void GlobalNamespace::OVRSkeleton::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.Start
void GlobalNamespace::OVRSkeleton::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.ShouldInitialize
bool GlobalNamespace::OVRSkeleton::ShouldInitialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::ShouldInitialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldInitialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.Initialize
void GlobalNamespace::OVRSkeleton::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.InitializeBones
void GlobalNamespace::OVRSkeleton::InitializeBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::InitializeBones");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSkeleton*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.InitializeBindPose
void GlobalNamespace::OVRSkeleton::InitializeBindPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::InitializeBindPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitializeBindPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.InitializeCapsules
void GlobalNamespace::OVRSkeleton::InitializeCapsules() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::InitializeCapsules");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitializeCapsules", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.Update
void GlobalNamespace::OVRSkeleton::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.FixedUpdate
void GlobalNamespace::OVRSkeleton::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.GetCurrentStartBoneId
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::GetCurrentStartBoneId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::GetCurrentStartBoneId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentStartBoneId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRSkeleton::BoneId, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.GetCurrentEndBoneId
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::GetCurrentEndBoneId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::GetCurrentEndBoneId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentEndBoneId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRSkeleton::BoneId, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.GetCurrentMaxSkinnableBoneId
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::GetCurrentMaxSkinnableBoneId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::GetCurrentMaxSkinnableBoneId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentMaxSkinnableBoneId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRSkeleton::BoneId, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.GetCurrentNumBones
int GlobalNamespace::OVRSkeleton::GetCurrentNumBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::GetCurrentNumBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentNumBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.GetCurrentNumSkinnableBones
int GlobalNamespace::OVRSkeleton::GetCurrentNumSkinnableBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::GetCurrentNumSkinnableBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentNumSkinnableBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.BoneLabelFromBoneId
::StringW GlobalNamespace::OVRSkeleton::BoneLabelFromBoneId(::GlobalNamespace::OVRSkeleton::SkeletonType skeletonType, ::GlobalNamespace::OVRSkeleton::BoneId boneId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneLabelFromBoneId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRSkeleton", "BoneLabelFromBoneId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(skeletonType), ::il2cpp_utils::ExtractType(boneId)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, skeletonType, boneId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeleton/IOVRSkeletonDataProvider
#include "GlobalNamespace/OVRSkeleton_IOVRSkeletonDataProvider.hpp"
// Including type: OVRSkeleton/SkeletonPoseData
#include "GlobalNamespace/OVRSkeleton_SkeletonPoseData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRSkeleton/IOVRSkeletonDataProvider.GetSkeletonType
::GlobalNamespace::OVRSkeleton::SkeletonType GlobalNamespace::OVRSkeleton::IOVRSkeletonDataProvider::GetSkeletonType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::IOVRSkeletonDataProvider::GetSkeletonType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSkeleton::IOVRSkeletonDataProvider*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRSkeleton::SkeletonType, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton/IOVRSkeletonDataProvider.GetSkeletonPoseData
::GlobalNamespace::OVRSkeleton::SkeletonPoseData GlobalNamespace::OVRSkeleton::IOVRSkeletonDataProvider::GetSkeletonPoseData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::IOVRSkeletonDataProvider::GetSkeletonPoseData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSkeleton::IOVRSkeletonDataProvider*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRSkeleton::SkeletonPoseData, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeleton/SkeletonPoseData
#include "GlobalNamespace/OVRSkeleton_SkeletonPoseData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private OVRPlugin/Posef <RootPose>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Posef& GlobalNamespace::OVRSkeleton::SkeletonPoseData::dyn_$RootPose$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonPoseData::dyn_$RootPose$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<RootPose>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::Posef*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <RootScale>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSkeleton::SkeletonPoseData::dyn_$RootScale$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonPoseData::dyn_$RootScale$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<RootScale>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRPlugin/Quatf[] <BoneRotations>k__BackingField
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRPlugin::Quatf>& GlobalNamespace::OVRSkeleton::SkeletonPoseData::dyn_$BoneRotations$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonPoseData::dyn_$BoneRotations$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BoneRotations>k__BackingField"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::OVRPlugin::Quatf>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsDataValid>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSkeleton::SkeletonPoseData::dyn_$IsDataValid$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonPoseData::dyn_$IsDataValid$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsDataValid>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsDataHighConfidence>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSkeleton::SkeletonPoseData::dyn_$IsDataHighConfidence$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonPoseData::dyn_$IsDataHighConfidence$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsDataHighConfidence>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <SkeletonChangedCount>k__BackingField
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRSkeleton::SkeletonPoseData::dyn_$SkeletonChangedCount$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonPoseData::dyn_$SkeletonChangedCount$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<SkeletonChangedCount>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.get_RootPose
::GlobalNamespace::OVRPlugin::Posef GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_RootPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_RootPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_RootPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::Posef, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.set_RootPose
void GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_RootPose(::GlobalNamespace::OVRPlugin::Posef value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_RootPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_RootPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.get_RootScale
float GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_RootScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_RootScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_RootScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.set_RootScale
void GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_RootScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_RootScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_RootScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.get_BoneRotations
::ArrayW<::GlobalNamespace::OVRPlugin::Quatf> GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_BoneRotations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_BoneRotations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_BoneRotations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::OVRPlugin::Quatf>, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.set_BoneRotations
void GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_BoneRotations(::ArrayW<::GlobalNamespace::OVRPlugin::Quatf> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_BoneRotations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_BoneRotations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.get_IsDataValid
bool GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_IsDataValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.set_IsDataValid
void GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_IsDataValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.get_IsDataHighConfidence
bool GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_IsDataHighConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.set_IsDataHighConfidence
void GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_IsDataHighConfidence(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.get_SkeletonChangedCount
int GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_SkeletonChangedCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_SkeletonChangedCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_SkeletonChangedCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.set_SkeletonChangedCount
void GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_SkeletonChangedCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_SkeletonChangedCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_SkeletonChangedCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeleton/SkeletonType
#include "GlobalNamespace/OVRSkeleton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/SkeletonType None
::GlobalNamespace::OVRSkeleton::SkeletonType GlobalNamespace::OVRSkeleton::SkeletonType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::SkeletonType>("", "OVRSkeleton/SkeletonType", "None"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/SkeletonType None
void GlobalNamespace::OVRSkeleton::SkeletonType::_set_None(::GlobalNamespace::OVRSkeleton::SkeletonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/SkeletonType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/SkeletonType HandLeft
::GlobalNamespace::OVRSkeleton::SkeletonType GlobalNamespace::OVRSkeleton::SkeletonType::_get_HandLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonType::_get_HandLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::SkeletonType>("", "OVRSkeleton/SkeletonType", "HandLeft"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/SkeletonType HandLeft
void GlobalNamespace::OVRSkeleton::SkeletonType::_set_HandLeft(::GlobalNamespace::OVRSkeleton::SkeletonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonType::_set_HandLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/SkeletonType", "HandLeft", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/SkeletonType HandRight
::GlobalNamespace::OVRSkeleton::SkeletonType GlobalNamespace::OVRSkeleton::SkeletonType::_get_HandRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonType::_get_HandRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::SkeletonType>("", "OVRSkeleton/SkeletonType", "HandRight"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/SkeletonType HandRight
void GlobalNamespace::OVRSkeleton::SkeletonType::_set_HandRight(::GlobalNamespace::OVRSkeleton::SkeletonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonType::_set_HandRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/SkeletonType", "HandRight", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRSkeleton::SkeletonType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::SkeletonType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeleton/BoneId
#include "GlobalNamespace/OVRSkeleton_BoneId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Invalid
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Invalid"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Invalid
void GlobalNamespace::OVRSkeleton::BoneId::_set_Invalid(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Invalid", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Start
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Start");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Start"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Start
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Start(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Start");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Start", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_WristRoot
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_WristRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_WristRoot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_WristRoot"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_WristRoot
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_WristRoot(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_WristRoot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_WristRoot", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_ForearmStub
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_ForearmStub() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_ForearmStub");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_ForearmStub"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_ForearmStub
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_ForearmStub(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_ForearmStub");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_ForearmStub", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Thumb0
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Thumb0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Thumb0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Thumb0"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Thumb0
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Thumb0(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Thumb0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Thumb0", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Thumb1
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Thumb1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Thumb1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Thumb1"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Thumb1
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Thumb1(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Thumb1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Thumb1", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Thumb2
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Thumb2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Thumb2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Thumb2"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Thumb2
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Thumb2(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Thumb2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Thumb2", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Thumb3
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Thumb3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Thumb3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Thumb3"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Thumb3
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Thumb3(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Thumb3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Thumb3", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Index1
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Index1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Index1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Index1"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Index1
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Index1(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Index1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Index1", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Index2
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Index2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Index2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Index2"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Index2
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Index2(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Index2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Index2", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Index3
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Index3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Index3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Index3"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Index3
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Index3(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Index3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Index3", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Middle1
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Middle1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Middle1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Middle1"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Middle1
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Middle1(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Middle1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Middle1", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Middle2
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Middle2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Middle2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Middle2"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Middle2
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Middle2(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Middle2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Middle2", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Middle3
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Middle3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Middle3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Middle3"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Middle3
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Middle3(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Middle3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Middle3", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Ring1
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Ring1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Ring1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Ring1"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Ring1
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Ring1(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Ring1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Ring1", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Ring2
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Ring2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Ring2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Ring2"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Ring2
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Ring2(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Ring2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Ring2", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Ring3
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Ring3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Ring3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Ring3"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Ring3
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Ring3(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Ring3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Ring3", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Pinky0
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Pinky0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Pinky0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Pinky0"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Pinky0
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Pinky0(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Pinky0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Pinky0", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Pinky1
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Pinky1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Pinky1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Pinky1"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Pinky1
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Pinky1(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Pinky1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Pinky1", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Pinky2
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Pinky2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Pinky2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Pinky2"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Pinky2
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Pinky2(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Pinky2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Pinky2", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Pinky3
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Pinky3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Pinky3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Pinky3"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Pinky3
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Pinky3(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Pinky3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Pinky3", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_MaxSkinnable
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_MaxSkinnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_MaxSkinnable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_MaxSkinnable"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_MaxSkinnable
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_MaxSkinnable(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_MaxSkinnable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_MaxSkinnable", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_ThumbTip
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_ThumbTip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_ThumbTip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_ThumbTip"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_ThumbTip
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_ThumbTip(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_ThumbTip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_ThumbTip", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_IndexTip
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_IndexTip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_IndexTip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_IndexTip"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_IndexTip
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_IndexTip(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_IndexTip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_IndexTip", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_MiddleTip
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_MiddleTip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_MiddleTip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_MiddleTip"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_MiddleTip
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_MiddleTip(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_MiddleTip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_MiddleTip", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_RingTip
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_RingTip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_RingTip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_RingTip"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_RingTip
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_RingTip(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_RingTip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_RingTip", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_PinkyTip
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_PinkyTip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_PinkyTip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_PinkyTip"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_PinkyTip
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_PinkyTip(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_PinkyTip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_PinkyTip", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_End
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_End"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_End
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_End(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_End", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Max
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_get_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Max"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Max
void GlobalNamespace::OVRSkeleton::BoneId::_set_Max(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::_set_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRSkeleton::BoneId::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeleton::BoneId::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRBone
#include "GlobalNamespace/OVRBone.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private OVRSkeleton/BoneId <Id>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSkeleton::BoneId& GlobalNamespace::OVRBone::dyn_$Id$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRBone::dyn_$Id$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Id>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRSkeleton::BoneId*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int16 <ParentBoneIndex>k__BackingField
[[deprecated("Use field access instead!")]] int16_t& GlobalNamespace::OVRBone::dyn_$ParentBoneIndex$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRBone::dyn_$ParentBoneIndex$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ParentBoneIndex>k__BackingField"))->offset;
  return *reinterpret_cast<int16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform <Transform>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OVRBone::dyn_$Transform$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRBone::dyn_$Transform$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Transform>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRBone.get_Id
::GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRBone::get_Id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRBone::get_Id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRSkeleton::BoneId, false>(this, ___internal__method);
}
// Autogenerated method: OVRBone.set_Id
void GlobalNamespace::OVRBone::set_Id(::GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRBone::set_Id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRBone.get_ParentBoneIndex
int16_t GlobalNamespace::OVRBone::get_ParentBoneIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRBone::get_ParentBoneIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParentBoneIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int16_t, false>(this, ___internal__method);
}
// Autogenerated method: OVRBone.set_ParentBoneIndex
void GlobalNamespace::OVRBone::set_ParentBoneIndex(int16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRBone::set_ParentBoneIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ParentBoneIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRBone.get_Transform
::UnityEngine::Transform* GlobalNamespace::OVRBone::get_Transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRBone::get_Transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: OVRBone.set_Transform
void GlobalNamespace::OVRBone::set_Transform(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRBone::set_Transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRBoneCapsule
#include "GlobalNamespace/OVRBoneCapsule.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.CapsuleCollider
#include "UnityEngine/CapsuleCollider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int16 <BoneIndex>k__BackingField
[[deprecated("Use field access instead!")]] int16_t& GlobalNamespace::OVRBoneCapsule::dyn_$BoneIndex$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRBoneCapsule::dyn_$BoneIndex$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BoneIndex>k__BackingField"))->offset;
  return *reinterpret_cast<int16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody <CapsuleRigidbody>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& GlobalNamespace::OVRBoneCapsule::dyn_$CapsuleRigidbody$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRBoneCapsule::dyn_$CapsuleRigidbody$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CapsuleRigidbody>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.CapsuleCollider <CapsuleCollider>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::CapsuleCollider*& GlobalNamespace::OVRBoneCapsule::dyn_$CapsuleCollider$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRBoneCapsule::dyn_$CapsuleCollider$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CapsuleCollider>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::CapsuleCollider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRBoneCapsule.get_BoneIndex
int16_t GlobalNamespace::OVRBoneCapsule::get_BoneIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRBoneCapsule::get_BoneIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BoneIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int16_t, false>(this, ___internal__method);
}
// Autogenerated method: OVRBoneCapsule.set_BoneIndex
void GlobalNamespace::OVRBoneCapsule::set_BoneIndex(int16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRBoneCapsule::set_BoneIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BoneIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRBoneCapsule.get_CapsuleRigidbody
::UnityEngine::Rigidbody* GlobalNamespace::OVRBoneCapsule::get_CapsuleRigidbody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRBoneCapsule::get_CapsuleRigidbody");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CapsuleRigidbody", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Rigidbody*, false>(this, ___internal__method);
}
// Autogenerated method: OVRBoneCapsule.set_CapsuleRigidbody
void GlobalNamespace::OVRBoneCapsule::set_CapsuleRigidbody(::UnityEngine::Rigidbody* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRBoneCapsule::set_CapsuleRigidbody");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CapsuleRigidbody", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRBoneCapsule.get_CapsuleCollider
::UnityEngine::CapsuleCollider* GlobalNamespace::OVRBoneCapsule::get_CapsuleCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRBoneCapsule::get_CapsuleCollider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CapsuleCollider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::CapsuleCollider*, false>(this, ___internal__method);
}
// Autogenerated method: OVRBoneCapsule.set_CapsuleCollider
void GlobalNamespace::OVRBoneCapsule::set_CapsuleCollider(::UnityEngine::CapsuleCollider* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRBoneCapsule::set_CapsuleCollider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CapsuleCollider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeletonRenderer
#include "GlobalNamespace/OVRSkeletonRenderer.hpp"
// Including type: OVRSkeletonRenderer/IOVRSkeletonRendererDataProvider
#include "GlobalNamespace/OVRSkeletonRenderer_IOVRSkeletonRendererDataProvider.hpp"
// Including type: OVRSkeletonRenderer/SkeletonRendererData
#include "GlobalNamespace/OVRSkeletonRenderer_SkeletonRendererData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: OVRSkeletonRenderer/BoneVisualization
#include "GlobalNamespace/OVRSkeletonRenderer_BoneVisualization.hpp"
// Including type: OVRSkeletonRenderer/CapsuleVisualization
#include "GlobalNamespace/OVRSkeletonRenderer_CapsuleVisualization.hpp"
// Including type: OVRSkeleton
#include "GlobalNamespace/OVRSkeleton.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single LINE_RENDERER_WIDTH
float GlobalNamespace::OVRSkeletonRenderer::_get_LINE_RENDERER_WIDTH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::_get_LINE_RENDERER_WIDTH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "OVRSkeletonRenderer", "LINE_RENDERER_WIDTH"));
}
// Autogenerated static field setter
// Set static field: static private System.Single LINE_RENDERER_WIDTH
void GlobalNamespace::OVRSkeletonRenderer::_set_LINE_RENDERER_WIDTH(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::_set_LINE_RENDERER_WIDTH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeletonRenderer", "LINE_RENDERER_WIDTH", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Quaternion _capsuleRotationOffset
::UnityEngine::Quaternion GlobalNamespace::OVRSkeletonRenderer::_get__capsuleRotationOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::_get__capsuleRotationOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Quaternion>("", "OVRSkeletonRenderer", "_capsuleRotationOffset"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Quaternion _capsuleRotationOffset
void GlobalNamespace::OVRSkeletonRenderer::_set__capsuleRotationOffset(::UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::_set__capsuleRotationOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeletonRenderer", "_capsuleRotationOffset", value));
}
// Autogenerated instance field getter
// Get instance field: private OVRSkeletonRenderer/IOVRSkeletonRendererDataProvider _dataProvider
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSkeletonRenderer::IOVRSkeletonRendererDataProvider*& GlobalNamespace::OVRSkeletonRenderer::dyn__dataProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn__dataProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dataProvider"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRSkeletonRenderer::IOVRSkeletonRendererDataProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRSkeletonRenderer/ConfidenceBehavior _confidenceBehavior
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior& GlobalNamespace::OVRSkeletonRenderer::dyn__confidenceBehavior() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn__confidenceBehavior");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_confidenceBehavior"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRSkeletonRenderer/SystemGestureBehavior _systemGestureBehavior
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior& GlobalNamespace::OVRSkeletonRenderer::dyn__systemGestureBehavior() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn__systemGestureBehavior");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_systemGestureBehavior"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _renderPhysicsCapsules
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSkeletonRenderer::dyn__renderPhysicsCapsules() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn__renderPhysicsCapsules");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderPhysicsCapsules"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _skeletonMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::OVRSkeletonRenderer::dyn__skeletonMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn__skeletonMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_skeletonMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _skeletonDefaultMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::OVRSkeletonRenderer::dyn__skeletonDefaultMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn__skeletonDefaultMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_skeletonDefaultMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _capsuleMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::OVRSkeletonRenderer::dyn__capsuleMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn__capsuleMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_capsuleMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _capsuleDefaultMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::OVRSkeletonRenderer::dyn__capsuleDefaultMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn__capsuleDefaultMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_capsuleDefaultMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _systemGestureMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::OVRSkeletonRenderer::dyn__systemGestureMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn__systemGestureMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_systemGestureMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _systemGestureDefaultMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::OVRSkeletonRenderer::dyn__systemGestureDefaultMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn__systemGestureDefaultMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_systemGestureDefaultMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<OVRSkeletonRenderer/BoneVisualization> _boneVisualizations
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::OVRSkeletonRenderer::BoneVisualization*>*& GlobalNamespace::OVRSkeletonRenderer::dyn__boneVisualizations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn__boneVisualizations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_boneVisualizations"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::OVRSkeletonRenderer::BoneVisualization*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<OVRSkeletonRenderer/CapsuleVisualization> _capsuleVisualizations
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::OVRSkeletonRenderer::CapsuleVisualization*>*& GlobalNamespace::OVRSkeletonRenderer::dyn__capsuleVisualizations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn__capsuleVisualizations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_capsuleVisualizations"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::OVRSkeletonRenderer::CapsuleVisualization*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRSkeleton _ovrSkeleton
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSkeleton*& GlobalNamespace::OVRSkeletonRenderer::dyn__ovrSkeleton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn__ovrSkeleton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ovrSkeleton"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRSkeleton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _skeletonGO
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRSkeletonRenderer::dyn__skeletonGO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn__skeletonGO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_skeletonGO"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _scale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSkeletonRenderer::dyn__scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn__scale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsInitialized>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSkeletonRenderer::dyn_$IsInitialized$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn_$IsInitialized$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsInitialized>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsDataValid>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSkeletonRenderer::dyn_$IsDataValid$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn_$IsDataValid$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsDataValid>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsDataHighConfidence>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSkeletonRenderer::dyn_$IsDataHighConfidence$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn_$IsDataHighConfidence$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsDataHighConfidence>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <ShouldUseSystemGestureMaterial>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSkeletonRenderer::dyn_$ShouldUseSystemGestureMaterial$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::dyn_$ShouldUseSystemGestureMaterial$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ShouldUseSystemGestureMaterial>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRSkeletonRenderer.get_IsInitialized
bool GlobalNamespace::OVRSkeletonRenderer::get_IsInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::get_IsInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer.set_IsInitialized
void GlobalNamespace::OVRSkeletonRenderer::set_IsInitialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::set_IsInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeletonRenderer.get_IsDataValid
bool GlobalNamespace::OVRSkeletonRenderer::get_IsDataValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::get_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer.set_IsDataValid
void GlobalNamespace::OVRSkeletonRenderer::set_IsDataValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::set_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeletonRenderer.get_IsDataHighConfidence
bool GlobalNamespace::OVRSkeletonRenderer::get_IsDataHighConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::get_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer.set_IsDataHighConfidence
void GlobalNamespace::OVRSkeletonRenderer::set_IsDataHighConfidence(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::set_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeletonRenderer.get_ShouldUseSystemGestureMaterial
bool GlobalNamespace::OVRSkeletonRenderer::get_ShouldUseSystemGestureMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::get_ShouldUseSystemGestureMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer.set_ShouldUseSystemGestureMaterial
void GlobalNamespace::OVRSkeletonRenderer::set_ShouldUseSystemGestureMaterial(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::set_ShouldUseSystemGestureMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeletonRenderer..cctor
void GlobalNamespace::OVRSkeletonRenderer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRSkeletonRenderer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer.Awake
void GlobalNamespace::OVRSkeletonRenderer::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer.Start
void GlobalNamespace::OVRSkeletonRenderer::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer.ShouldInitialize
bool GlobalNamespace::OVRSkeletonRenderer::ShouldInitialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::ShouldInitialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldInitialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer.Initialize
void GlobalNamespace::OVRSkeletonRenderer::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer.Update
void GlobalNamespace::OVRSkeletonRenderer::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer.OnDestroy
void GlobalNamespace::OVRSkeletonRenderer::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeletonRenderer/IOVRSkeletonRendererDataProvider
#include "GlobalNamespace/OVRSkeletonRenderer_IOVRSkeletonRendererDataProvider.hpp"
// Including type: OVRSkeletonRenderer/SkeletonRendererData
#include "GlobalNamespace/OVRSkeletonRenderer_SkeletonRendererData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRSkeletonRenderer/IOVRSkeletonRendererDataProvider.GetSkeletonRendererData
::GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData GlobalNamespace::OVRSkeletonRenderer::IOVRSkeletonRendererDataProvider::GetSkeletonRendererData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::IOVRSkeletonRendererDataProvider::GetSkeletonRendererData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSkeletonRenderer::IOVRSkeletonRendererDataProvider*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeletonRenderer/SkeletonRendererData
#include "GlobalNamespace/OVRSkeletonRenderer_SkeletonRendererData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single <RootScale>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::dyn_$RootScale$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::dyn_$RootScale$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<RootScale>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsDataValid>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::dyn_$IsDataValid$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::dyn_$IsDataValid$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsDataValid>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsDataHighConfidence>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::dyn_$IsDataHighConfidence$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::dyn_$IsDataHighConfidence$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsDataHighConfidence>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <ShouldUseSystemGestureMaterial>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::dyn_$ShouldUseSystemGestureMaterial$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::dyn_$ShouldUseSystemGestureMaterial$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ShouldUseSystemGestureMaterial>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRSkeletonRenderer/SkeletonRendererData.get_RootScale
float GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::get_RootScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::get_RootScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_RootScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer/SkeletonRendererData.set_RootScale
void GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::set_RootScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::set_RootScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_RootScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeletonRenderer/SkeletonRendererData.get_IsDataValid
bool GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::get_IsDataValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::get_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer/SkeletonRendererData.set_IsDataValid
void GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::set_IsDataValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::set_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeletonRenderer/SkeletonRendererData.get_IsDataHighConfidence
bool GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::get_IsDataHighConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::get_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer/SkeletonRendererData.set_IsDataHighConfidence
void GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::set_IsDataHighConfidence(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::set_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeletonRenderer/SkeletonRendererData.get_ShouldUseSystemGestureMaterial
bool GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::get_ShouldUseSystemGestureMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::get_ShouldUseSystemGestureMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer/SkeletonRendererData.set_ShouldUseSystemGestureMaterial
void GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::set_ShouldUseSystemGestureMaterial(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::set_ShouldUseSystemGestureMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeletonRenderer/ConfidenceBehavior
#include "GlobalNamespace/OVRSkeletonRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRSkeletonRenderer/ConfidenceBehavior None
::GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior>("", "OVRSkeletonRenderer/ConfidenceBehavior", "None"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeletonRenderer/ConfidenceBehavior None
void GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior::_set_None(::GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeletonRenderer/ConfidenceBehavior", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeletonRenderer/ConfidenceBehavior ToggleRenderer
::GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior::_get_ToggleRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior::_get_ToggleRenderer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior>("", "OVRSkeletonRenderer/ConfidenceBehavior", "ToggleRenderer"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeletonRenderer/ConfidenceBehavior ToggleRenderer
void GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior::_set_ToggleRenderer(::GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior::_set_ToggleRenderer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeletonRenderer/ConfidenceBehavior", "ToggleRenderer", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeletonRenderer/SystemGestureBehavior
#include "GlobalNamespace/OVRSkeletonRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRSkeletonRenderer/SystemGestureBehavior None
::GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior>("", "OVRSkeletonRenderer/SystemGestureBehavior", "None"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeletonRenderer/SystemGestureBehavior None
void GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior::_set_None(::GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeletonRenderer/SystemGestureBehavior", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeletonRenderer/SystemGestureBehavior SwapMaterial
::GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior::_get_SwapMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior::_get_SwapMaterial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior>("", "OVRSkeletonRenderer/SystemGestureBehavior", "SwapMaterial"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeletonRenderer/SystemGestureBehavior SwapMaterial
void GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior::_set_SwapMaterial(::GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior::_set_SwapMaterial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeletonRenderer/SystemGestureBehavior", "SwapMaterial", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeletonRenderer/BoneVisualization
#include "GlobalNamespace/OVRSkeletonRenderer_BoneVisualization.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.LineRenderer
#include "UnityEngine/LineRenderer.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject BoneGO
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRSkeletonRenderer::BoneVisualization::dyn_BoneGO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::BoneVisualization::dyn_BoneGO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BoneGO"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform BoneBegin
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OVRSkeletonRenderer::BoneVisualization::dyn_BoneBegin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::BoneVisualization::dyn_BoneBegin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BoneBegin"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform BoneEnd
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OVRSkeletonRenderer::BoneVisualization::dyn_BoneEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::BoneVisualization::dyn_BoneEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BoneEnd"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LineRenderer Line
[[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& GlobalNamespace::OVRSkeletonRenderer::BoneVisualization::dyn_Line() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::BoneVisualization::dyn_Line");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Line"))->offset;
  return *reinterpret_cast<::UnityEngine::LineRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material RenderMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::OVRSkeletonRenderer::BoneVisualization::dyn_RenderMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::BoneVisualization::dyn_RenderMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RenderMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material SystemGestureMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::OVRSkeletonRenderer::BoneVisualization::dyn_SystemGestureMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::BoneVisualization::dyn_SystemGestureMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SystemGestureMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRSkeletonRenderer/BoneVisualization.Update
void GlobalNamespace::OVRSkeletonRenderer::BoneVisualization::Update(float scale, bool shouldRender, bool shouldUseSystemGestureMaterial, ::GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior confidenceBehavior, ::GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior systemGestureBehavior) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::BoneVisualization::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scale), ::il2cpp_utils::ExtractType(shouldRender), ::il2cpp_utils::ExtractType(shouldUseSystemGestureMaterial), ::il2cpp_utils::ExtractType(confidenceBehavior), ::il2cpp_utils::ExtractType(systemGestureBehavior)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scale, shouldRender, shouldUseSystemGestureMaterial, confidenceBehavior, systemGestureBehavior);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeletonRenderer/CapsuleVisualization
#include "GlobalNamespace/OVRSkeletonRenderer_CapsuleVisualization.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: OVRBoneCapsule
#include "GlobalNamespace/OVRBoneCapsule.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject CapsuleGO
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OVRSkeletonRenderer::CapsuleVisualization::dyn_CapsuleGO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::CapsuleVisualization::dyn_CapsuleGO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CapsuleGO"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRBoneCapsule BoneCapsule
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRBoneCapsule*& GlobalNamespace::OVRSkeletonRenderer::CapsuleVisualization::dyn_BoneCapsule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::CapsuleVisualization::dyn_BoneCapsule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BoneCapsule"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRBoneCapsule**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 capsuleScale
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::OVRSkeletonRenderer::CapsuleVisualization::dyn_capsuleScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::CapsuleVisualization::dyn_capsuleScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "capsuleScale"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer Renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::OVRSkeletonRenderer::CapsuleVisualization::dyn_Renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::CapsuleVisualization::dyn_Renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material RenderMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::OVRSkeletonRenderer::CapsuleVisualization::dyn_RenderMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::CapsuleVisualization::dyn_RenderMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RenderMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material SystemGestureMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::OVRSkeletonRenderer::CapsuleVisualization::dyn_SystemGestureMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::CapsuleVisualization::dyn_SystemGestureMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SystemGestureMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRSkeletonRenderer/CapsuleVisualization.Update
void GlobalNamespace::OVRSkeletonRenderer::CapsuleVisualization::Update(float scale, bool shouldRender, bool shouldUseSystemGestureMaterial, ::GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior confidenceBehavior, ::GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior systemGestureBehavior) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSkeletonRenderer::CapsuleVisualization::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scale), ::il2cpp_utils::ExtractType(shouldRender), ::il2cpp_utils::ExtractType(shouldUseSystemGestureMaterial), ::il2cpp_utils::ExtractType(confidenceBehavior), ::il2cpp_utils::ExtractType(systemGestureBehavior)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scale, shouldRender, shouldUseSystemGestureMaterial, confidenceBehavior, systemGestureBehavior);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSpectatorModeDomeTest
#include "GlobalNamespace/OVRSpectatorModeDomeTest.hpp"
// Including type: OVRSpectatorModeDomeTest/<TimerCoroutine>d__20
#include "GlobalNamespace/OVRSpectatorModeDomeTest_-TimerCoroutine-d__20.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single distance_near
float GlobalNamespace::OVRSpectatorModeDomeTest::_get_distance_near() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::_get_distance_near");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "OVRSpectatorModeDomeTest", "distance_near"));
}
// Autogenerated static field setter
// Set static field: static private System.Single distance_near
void GlobalNamespace::OVRSpectatorModeDomeTest::_set_distance_near(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::_set_distance_near");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSpectatorModeDomeTest", "distance_near", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single distance_far
float GlobalNamespace::OVRSpectatorModeDomeTest::_get_distance_far() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::_get_distance_far");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "OVRSpectatorModeDomeTest", "distance_far"));
}
// Autogenerated static field setter
// Set static field: static private System.Single distance_far
void GlobalNamespace::OVRSpectatorModeDomeTest::_set_distance_far(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::_set_distance_far");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSpectatorModeDomeTest", "distance_far", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single elevationLimit
float GlobalNamespace::OVRSpectatorModeDomeTest::_get_elevationLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::_get_elevationLimit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "OVRSpectatorModeDomeTest", "elevationLimit"));
}
// Autogenerated static field setter
// Set static field: static private System.Single elevationLimit
void GlobalNamespace::OVRSpectatorModeDomeTest::_set_elevationLimit(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::_set_elevationLimit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSpectatorModeDomeTest", "elevationLimit", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean inited
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSpectatorModeDomeTest::dyn_inited() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::dyn_inited");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inited"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Camera defaultExternalCamera
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& GlobalNamespace::OVRSpectatorModeDomeTest::dyn_defaultExternalCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::dyn_defaultExternalCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultExternalCamera"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRPlugin/Fovf defaultFov
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Fovf& GlobalNamespace::OVRSpectatorModeDomeTest::dyn_defaultFov() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::dyn_defaultFov");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultFov"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::Fovf*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform SpectatorAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OVRSpectatorModeDomeTest::dyn_SpectatorAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::dyn_SpectatorAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SpectatorAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform Head
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OVRSpectatorModeDomeTest::dyn_Head() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::dyn_Head");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Head"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRPlugin/Media/PlatformCameraMode camMode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode& GlobalNamespace::OVRSpectatorModeDomeTest::dyn_camMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::dyn_camMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "camMode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRPlugin::Media::PlatformCameraMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean readyToSwitch
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSpectatorModeDomeTest::dyn_readyToSwitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::dyn_readyToSwitch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "readyToSwitch"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform SpectatorCamera
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OVRSpectatorModeDomeTest::dyn_SpectatorCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::dyn_SpectatorCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SpectatorCamera"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single distance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSpectatorModeDomeTest::dyn_distance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::dyn_distance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "distance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single elevation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSpectatorModeDomeTest::dyn_elevation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::dyn_elevation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "elevation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single polar
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSpectatorModeDomeTest::dyn_polar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::dyn_polar");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "polar"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRSpectatorModeDomeTest.Awake
void GlobalNamespace::OVRSpectatorModeDomeTest::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSpectatorModeDomeTest.Start
void GlobalNamespace::OVRSpectatorModeDomeTest::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSpectatorModeDomeTest.Initialize
void GlobalNamespace::OVRSpectatorModeDomeTest::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSpectatorModeDomeTest.UpdateDefaultExternalCamera
void GlobalNamespace::OVRSpectatorModeDomeTest::UpdateDefaultExternalCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::UpdateDefaultExternalCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDefaultExternalCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSpectatorModeDomeTest.UpdateSpectatorCameraStatus
void GlobalNamespace::OVRSpectatorModeDomeTest::UpdateSpectatorCameraStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::UpdateSpectatorCameraStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSpectatorCameraStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSpectatorModeDomeTest.SpectatorCameraDomePosition
::UnityEngine::Vector3 GlobalNamespace::OVRSpectatorModeDomeTest::SpectatorCameraDomePosition(::UnityEngine::Vector3 spectatorAnchorPosition, float d, float e, float p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::SpectatorCameraDomePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpectatorCameraDomePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spectatorAnchorPosition), ::il2cpp_utils::ExtractType(d), ::il2cpp_utils::ExtractType(e), ::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, spectatorAnchorPosition, d, e, p);
}
// Autogenerated method: OVRSpectatorModeDomeTest.TimerCoroutine
::System::Collections::IEnumerator* GlobalNamespace::OVRSpectatorModeDomeTest::TimerCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::TimerCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TimerCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSpectatorModeDomeTest.Update
void GlobalNamespace::OVRSpectatorModeDomeTest::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSpectatorModeDomeTest.OnApplicationPause
void GlobalNamespace::OVRSpectatorModeDomeTest::OnApplicationPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::OnApplicationPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSpectatorModeDomeTest.OnApplicationQuit
void GlobalNamespace::OVRSpectatorModeDomeTest::OnApplicationQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::OnApplicationQuit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationQuit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRSpectatorModeDomeTest/<TimerCoroutine>d__20
#include "GlobalNamespace/OVRSpectatorModeDomeTest_-TimerCoroutine-d__20.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public OVRSpectatorModeDomeTest <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSpectatorModeDomeTest*& GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRSpectatorModeDomeTest**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRSpectatorModeDomeTest/<TimerCoroutine>d__20.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSpectatorModeDomeTest/<TimerCoroutine>d__20.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSpectatorModeDomeTest/<TimerCoroutine>d__20.System.IDisposable.Dispose
void GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSpectatorModeDomeTest/<TimerCoroutine>d__20.MoveNext
bool GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSpectatorModeDomeTest/<TimerCoroutine>d__20.System.Collections.IEnumerator.Reset
void GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OVRSpectatorModeDomeTest::$TimerCoroutine$d__20*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSystemPerfMetrics
#include "GlobalNamespace/OVRSystemPerfMetrics.hpp"
// Including type: OVRSystemPerfMetrics/PerfMetrics
#include "GlobalNamespace/OVRSystemPerfMetrics_PerfMetrics.hpp"
// Including type: OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer
#include "GlobalNamespace/OVRSystemPerfMetrics_OVRSystemPerfMetricsTcpServer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 TcpListeningPort
int GlobalNamespace::OVRSystemPerfMetrics::_get_TcpListeningPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::_get_TcpListeningPort");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRSystemPerfMetrics", "TcpListeningPort"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 TcpListeningPort
void GlobalNamespace::OVRSystemPerfMetrics::_set_TcpListeningPort(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::_set_TcpListeningPort");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSystemPerfMetrics", "TcpListeningPort", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 PayloadTypeMetrics
int GlobalNamespace::OVRSystemPerfMetrics::_get_PayloadTypeMetrics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::_get_PayloadTypeMetrics");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRSystemPerfMetrics", "PayloadTypeMetrics"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 PayloadTypeMetrics
void GlobalNamespace::OVRSystemPerfMetrics::_set_PayloadTypeMetrics(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::_set_PayloadTypeMetrics");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSystemPerfMetrics", "PayloadTypeMetrics", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 MaxBufferLength
int GlobalNamespace::OVRSystemPerfMetrics::_get_MaxBufferLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::_get_MaxBufferLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRSystemPerfMetrics", "MaxBufferLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MaxBufferLength
void GlobalNamespace::OVRSystemPerfMetrics::_set_MaxBufferLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::_set_MaxBufferLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSystemPerfMetrics", "MaxBufferLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 MaxMessageLength
int GlobalNamespace::OVRSystemPerfMetrics::_get_MaxMessageLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::_get_MaxMessageLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRSystemPerfMetrics", "MaxMessageLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MaxMessageLength
void GlobalNamespace::OVRSystemPerfMetrics::_set_MaxMessageLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::_set_MaxMessageLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSystemPerfMetrics", "MaxMessageLength", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSystemPerfMetrics/PerfMetrics
#include "GlobalNamespace/OVRSystemPerfMetrics_PerfMetrics.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 frameCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_frameCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_frameCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frameCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single frameTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_frameTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_frameTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frameTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single deltaFrameTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_deltaFrameTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_deltaFrameTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deltaFrameTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean appCpuTime_IsValid
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_appCpuTime_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_appCpuTime_IsValid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "appCpuTime_IsValid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single appCpuTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_appCpuTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_appCpuTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "appCpuTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean appGpuTime_IsValid
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_appGpuTime_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_appGpuTime_IsValid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "appGpuTime_IsValid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single appGpuTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_appGpuTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_appGpuTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "appGpuTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean compositorCpuTime_IsValid
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_compositorCpuTime_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_compositorCpuTime_IsValid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "compositorCpuTime_IsValid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single compositorCpuTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_compositorCpuTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_compositorCpuTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "compositorCpuTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean compositorGpuTime_IsValid
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_compositorGpuTime_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_compositorGpuTime_IsValid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "compositorGpuTime_IsValid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single compositorGpuTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_compositorGpuTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_compositorGpuTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "compositorGpuTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean compositorDroppedFrameCount_IsValid
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_compositorDroppedFrameCount_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_compositorDroppedFrameCount_IsValid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "compositorDroppedFrameCount_IsValid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 compositorDroppedFrameCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_compositorDroppedFrameCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_compositorDroppedFrameCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "compositorDroppedFrameCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean systemGpuUtilPercentage_IsValid
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_systemGpuUtilPercentage_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_systemGpuUtilPercentage_IsValid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "systemGpuUtilPercentage_IsValid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single systemGpuUtilPercentage
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_systemGpuUtilPercentage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_systemGpuUtilPercentage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "systemGpuUtilPercentage"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean systemCpuUtilAveragePercentage_IsValid
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_systemCpuUtilAveragePercentage_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_systemCpuUtilAveragePercentage_IsValid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "systemCpuUtilAveragePercentage_IsValid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single systemCpuUtilAveragePercentage
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_systemCpuUtilAveragePercentage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_systemCpuUtilAveragePercentage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "systemCpuUtilAveragePercentage"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean systemCpuUtilWorstPercentage_IsValid
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_systemCpuUtilWorstPercentage_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_systemCpuUtilWorstPercentage_IsValid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "systemCpuUtilWorstPercentage_IsValid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single systemCpuUtilWorstPercentage
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_systemCpuUtilWorstPercentage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_systemCpuUtilWorstPercentage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "systemCpuUtilWorstPercentage"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean deviceCpuClockFrequencyInMHz_IsValid
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_deviceCpuClockFrequencyInMHz_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_deviceCpuClockFrequencyInMHz_IsValid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deviceCpuClockFrequencyInMHz_IsValid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single deviceCpuClockFrequencyInMHz
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_deviceCpuClockFrequencyInMHz() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_deviceCpuClockFrequencyInMHz");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deviceCpuClockFrequencyInMHz"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean deviceGpuClockFrequencyInMHz_IsValid
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_deviceGpuClockFrequencyInMHz_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_deviceGpuClockFrequencyInMHz_IsValid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deviceGpuClockFrequencyInMHz_IsValid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single deviceGpuClockFrequencyInMHz
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_deviceGpuClockFrequencyInMHz() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_deviceGpuClockFrequencyInMHz");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deviceGpuClockFrequencyInMHz"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean deviceCpuClockLevel_IsValid
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_deviceCpuClockLevel_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_deviceCpuClockLevel_IsValid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deviceCpuClockLevel_IsValid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 deviceCpuClockLevel
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_deviceCpuClockLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_deviceCpuClockLevel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deviceCpuClockLevel"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean deviceGpuClockLevel_IsValid
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_deviceGpuClockLevel_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_deviceGpuClockLevel_IsValid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deviceGpuClockLevel_IsValid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 deviceGpuClockLevel
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_deviceGpuClockLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::dyn_deviceGpuClockLevel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deviceGpuClockLevel"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRSystemPerfMetrics/PerfMetrics.ToJSON
::StringW GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::ToJSON() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::ToJSON");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToJSON", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: OVRSystemPerfMetrics/PerfMetrics.LoadFromJSON
bool GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::LoadFromJSON(::StringW json) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::LoadFromJSON");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadFromJSON", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(json)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, json);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer
#include "GlobalNamespace/OVRSystemPerfMetrics_OVRSystemPerfMetricsTcpServer.hpp"
// Including type: OVRNetwork/OVRNetworkTcpServer
#include "GlobalNamespace/OVRNetwork_OVRNetworkTcpServer.hpp"
// Including type: OVRSystemPerfMetrics/PerfMetrics
#include "GlobalNamespace/OVRSystemPerfMetrics_PerfMetrics.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer singleton
::GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer* GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::_get_singleton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::_get_singleton");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer*>("", "OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer", "singleton"));
}
// Autogenerated static field setter
// Set static field: static public OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer singleton
void GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::_set_singleton(::GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::_set_singleton");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer", "singleton", value));
}
// Autogenerated instance field getter
// Get instance field: private OVRNetwork/OVRNetworkTcpServer tcpServer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRNetwork::OVRNetworkTcpServer*& GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::dyn_tcpServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::dyn_tcpServer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tcpServer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRNetwork::OVRNetworkTcpServer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 listeningPort
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::dyn_listeningPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::dyn_listeningPort");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "listeningPort"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer..cctor
void GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer.OnEnable
void GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer.OnDisable
void GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer.Update
void GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer.GatherPerfMetrics
::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics* GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::GatherPerfMetrics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::GatherPerfMetrics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GatherPerfMetrics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRVignette
#include "GlobalNamespace/OVRVignette.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: UnityEngine.Rendering.ScriptableRenderContext
#include "UnityEngine/Rendering/ScriptableRenderContext.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.Camera/UnityEngine.StereoscopicEye
#include "UnityEngine/Camera_StereoscopicEye.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.String QUADRATIC_FALLOFF
::StringW GlobalNamespace::OVRVignette::_get_QUADRATIC_FALLOFF() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::_get_QUADRATIC_FALLOFF");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "OVRVignette", "QUADRATIC_FALLOFF"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String QUADRATIC_FALLOFF
void GlobalNamespace::OVRVignette::_set_QUADRATIC_FALLOFF(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::_set_QUADRATIC_FALLOFF");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRVignette", "QUADRATIC_FALLOFF", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Shader VignetteShader
[[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& GlobalNamespace::OVRVignette::dyn_VignetteShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn_VignetteShader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "VignetteShader"))->offset;
  return *reinterpret_cast<::UnityEngine::Shader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRVignette/MeshComplexityLevel MeshComplexity
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRVignette::MeshComplexityLevel& GlobalNamespace::OVRVignette::dyn_MeshComplexity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn_MeshComplexity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MeshComplexity"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRVignette::MeshComplexityLevel*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OVRVignette/FalloffType Falloff
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRVignette::FalloffType& GlobalNamespace::OVRVignette::dyn_Falloff() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn_Falloff");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Falloff"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRVignette::FalloffType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single VignetteFieldOfView
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRVignette::dyn_VignetteFieldOfView() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn_VignetteFieldOfView");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "VignetteFieldOfView"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single VignetteAspectRatio
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRVignette::dyn_VignetteAspectRatio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn_VignetteAspectRatio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "VignetteAspectRatio"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single VignetteFalloffDegrees
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OVRVignette::dyn_VignetteFalloffDegrees() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn_VignetteFalloffDegrees");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "VignetteFalloffDegrees"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color VignetteColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::OVRVignette::dyn_VignetteColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn_VignetteColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "VignetteColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Camera _Camera
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& GlobalNamespace::OVRVignette::dyn__Camera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn__Camera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Camera"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshFilter _OpaqueMeshFilter
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& GlobalNamespace::OVRVignette::dyn__OpaqueMeshFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn__OpaqueMeshFilter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_OpaqueMeshFilter"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshFilter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshFilter _TransparentMeshFilter
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& GlobalNamespace::OVRVignette::dyn__TransparentMeshFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn__TransparentMeshFilter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_TransparentMeshFilter"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshFilter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer _OpaqueMeshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::OVRVignette::dyn__OpaqueMeshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn__OpaqueMeshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_OpaqueMeshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer _TransparentMeshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::OVRVignette::dyn__TransparentMeshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn__TransparentMeshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_TransparentMeshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Mesh _OpaqueMesh
[[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& GlobalNamespace::OVRVignette::dyn__OpaqueMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn__OpaqueMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_OpaqueMesh"))->offset;
  return *reinterpret_cast<::UnityEngine::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Mesh _TransparentMesh
[[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& GlobalNamespace::OVRVignette::dyn__TransparentMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn__TransparentMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_TransparentMesh"))->offset;
  return *reinterpret_cast<::UnityEngine::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _OpaqueMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::OVRVignette::dyn__OpaqueMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn__OpaqueMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_OpaqueMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _TransparentMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::OVRVignette::dyn__TransparentMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn__TransparentMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_TransparentMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _ShaderScaleAndOffset0Property
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRVignette::dyn__ShaderScaleAndOffset0Property() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn__ShaderScaleAndOffset0Property");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ShaderScaleAndOffset0Property"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _ShaderScaleAndOffset1Property
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRVignette::dyn__ShaderScaleAndOffset1Property() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn__ShaderScaleAndOffset1Property");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ShaderScaleAndOffset1Property"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4[] _TransparentScaleAndOffset0
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& GlobalNamespace::OVRVignette::dyn__TransparentScaleAndOffset0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn__TransparentScaleAndOffset0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_TransparentScaleAndOffset0"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4[] _TransparentScaleAndOffset1
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& GlobalNamespace::OVRVignette::dyn__TransparentScaleAndOffset1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn__TransparentScaleAndOffset1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_TransparentScaleAndOffset1"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4[] _OpaqueScaleAndOffset0
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& GlobalNamespace::OVRVignette::dyn__OpaqueScaleAndOffset0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn__OpaqueScaleAndOffset0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_OpaqueScaleAndOffset0"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4[] _OpaqueScaleAndOffset1
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& GlobalNamespace::OVRVignette::dyn__OpaqueScaleAndOffset1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn__OpaqueScaleAndOffset1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_OpaqueScaleAndOffset1"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _OpaqueVignetteVisible
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRVignette::dyn__OpaqueVignetteVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn__OpaqueVignetteVisible");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_OpaqueVignetteVisible"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _TransparentVignetteVisible
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OVRVignette::dyn__TransparentVignetteVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::dyn__TransparentVignetteVisible");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_TransparentVignetteVisible"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRVignette..cctor
void GlobalNamespace::OVRVignette::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRVignette", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRVignette.GetTriangleCount
int GlobalNamespace::OVRVignette::GetTriangleCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::GetTriangleCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTriangleCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.BuildMeshes
void GlobalNamespace::OVRVignette::BuildMeshes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::BuildMeshes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildMeshes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.BuildMaterials
void GlobalNamespace::OVRVignette::BuildMaterials() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::BuildMaterials");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.OnEnable
void GlobalNamespace::OVRVignette::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.OnDisable
void GlobalNamespace::OVRVignette::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.Awake
void GlobalNamespace::OVRVignette::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.GetTanFovAndOffsetForStereoEye
void GlobalNamespace::OVRVignette::GetTanFovAndOffsetForStereoEye(::UnityEngine::Camera::StereoscopicEye eye, ByRef<float> tanFovX, ByRef<float> tanFovY, ByRef<float> offsetX, ByRef<float> offsetY) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::GetTanFovAndOffsetForStereoEye");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTanFovAndOffsetForStereoEye", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eye), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eye, byref(tanFovX), byref(tanFovY), byref(offsetX), byref(offsetY));
}
// Autogenerated method: OVRVignette.GetTanFovAndOffsetForMonoEye
void GlobalNamespace::OVRVignette::GetTanFovAndOffsetForMonoEye(ByRef<float> tanFovX, ByRef<float> tanFovY, ByRef<float> offsetX, ByRef<float> offsetY) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::GetTanFovAndOffsetForMonoEye");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTanFovAndOffsetForMonoEye", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(tanFovX), byref(tanFovY), byref(offsetX), byref(offsetY));
}
// Autogenerated method: OVRVignette.VisibilityTest
bool GlobalNamespace::OVRVignette::VisibilityTest(float scaleX, float scaleY, float offsetX, float offsetY) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::VisibilityTest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VisibilityTest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scaleX), ::il2cpp_utils::ExtractType(scaleY), ::il2cpp_utils::ExtractType(offsetX), ::il2cpp_utils::ExtractType(offsetY)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, scaleX, scaleY, offsetX, offsetY);
}
// Autogenerated method: OVRVignette.Update
void GlobalNamespace::OVRVignette::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.EnableRenderers
void GlobalNamespace::OVRVignette::EnableRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::EnableRenderers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableRenderers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.DisableRenderers
void GlobalNamespace::OVRVignette::DisableRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::DisableRenderers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableRenderers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.OnPreCull
void GlobalNamespace::OVRVignette::OnPreCull() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::OnPreCull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreCull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.OnPostRender
void GlobalNamespace::OVRVignette::OnPostRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::OnPostRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.OnBeginCameraRendering
void GlobalNamespace::OVRVignette::OnBeginCameraRendering(::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::OnBeginCameraRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBeginCameraRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(camera)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, context, camera);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRVignette/MeshComplexityLevel
#include "GlobalNamespace/OVRVignette.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRVignette/MeshComplexityLevel VerySimple
::GlobalNamespace::OVRVignette::MeshComplexityLevel GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_VerySimple() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_VerySimple");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRVignette::MeshComplexityLevel>("", "OVRVignette/MeshComplexityLevel", "VerySimple"));
}
// Autogenerated static field setter
// Set static field: static public OVRVignette/MeshComplexityLevel VerySimple
void GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_VerySimple(::GlobalNamespace::OVRVignette::MeshComplexityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_VerySimple");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRVignette/MeshComplexityLevel", "VerySimple", value));
}
// Autogenerated static field getter
// Get static field: static public OVRVignette/MeshComplexityLevel Simple
::GlobalNamespace::OVRVignette::MeshComplexityLevel GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_Simple() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_Simple");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRVignette::MeshComplexityLevel>("", "OVRVignette/MeshComplexityLevel", "Simple"));
}
// Autogenerated static field setter
// Set static field: static public OVRVignette/MeshComplexityLevel Simple
void GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_Simple(::GlobalNamespace::OVRVignette::MeshComplexityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_Simple");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRVignette/MeshComplexityLevel", "Simple", value));
}
// Autogenerated static field getter
// Get static field: static public OVRVignette/MeshComplexityLevel Normal
::GlobalNamespace::OVRVignette::MeshComplexityLevel GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRVignette::MeshComplexityLevel>("", "OVRVignette/MeshComplexityLevel", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public OVRVignette/MeshComplexityLevel Normal
void GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_Normal(::GlobalNamespace::OVRVignette::MeshComplexityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRVignette/MeshComplexityLevel", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public OVRVignette/MeshComplexityLevel Detailed
::GlobalNamespace::OVRVignette::MeshComplexityLevel GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_Detailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_Detailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRVignette::MeshComplexityLevel>("", "OVRVignette/MeshComplexityLevel", "Detailed"));
}
// Autogenerated static field setter
// Set static field: static public OVRVignette/MeshComplexityLevel Detailed
void GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_Detailed(::GlobalNamespace::OVRVignette::MeshComplexityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_Detailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRVignette/MeshComplexityLevel", "Detailed", value));
}
// Autogenerated static field getter
// Get static field: static public OVRVignette/MeshComplexityLevel VeryDetailed
::GlobalNamespace::OVRVignette::MeshComplexityLevel GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_VeryDetailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_VeryDetailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRVignette::MeshComplexityLevel>("", "OVRVignette/MeshComplexityLevel", "VeryDetailed"));
}
// Autogenerated static field setter
// Set static field: static public OVRVignette/MeshComplexityLevel VeryDetailed
void GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_VeryDetailed(::GlobalNamespace::OVRVignette::MeshComplexityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_VeryDetailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRVignette/MeshComplexityLevel", "VeryDetailed", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRVignette::MeshComplexityLevel::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::MeshComplexityLevel::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRVignette/FalloffType
#include "GlobalNamespace/OVRVignette.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRVignette/FalloffType Linear
::GlobalNamespace::OVRVignette::FalloffType GlobalNamespace::OVRVignette::FalloffType::_get_Linear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::FalloffType::_get_Linear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRVignette::FalloffType>("", "OVRVignette/FalloffType", "Linear"));
}
// Autogenerated static field setter
// Set static field: static public OVRVignette/FalloffType Linear
void GlobalNamespace::OVRVignette::FalloffType::_set_Linear(::GlobalNamespace::OVRVignette::FalloffType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::FalloffType::_set_Linear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRVignette/FalloffType", "Linear", value));
}
// Autogenerated static field getter
// Get static field: static public OVRVignette/FalloffType Quadratic
::GlobalNamespace::OVRVignette::FalloffType GlobalNamespace::OVRVignette::FalloffType::_get_Quadratic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::FalloffType::_get_Quadratic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OVRVignette::FalloffType>("", "OVRVignette/FalloffType", "Quadratic"));
}
// Autogenerated static field setter
// Set static field: static public OVRVignette/FalloffType Quadratic
void GlobalNamespace::OVRVignette::FalloffType::_set_Quadratic(::GlobalNamespace::OVRVignette::FalloffType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::FalloffType::_set_Quadratic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRVignette/FalloffType", "Quadratic", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OVRVignette::FalloffType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVignette::FalloffType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRWaitCursor
#include "GlobalNamespace/OVRWaitCursor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 rotateSpeeds
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::OVRWaitCursor::dyn_rotateSpeeds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRWaitCursor::dyn_rotateSpeeds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotateSpeeds"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OVRWaitCursor.Update
void GlobalNamespace::OVRWaitCursor::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRWaitCursor::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetRecommendedRenderTargetSize
#include "OVR/OpenVR/IVRSystem__GetRecommendedRenderTargetSize.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetRecommendedRenderTargetSize.Invoke
void OVR::OpenVR::IVRSystem::_GetRecommendedRenderTargetSize::Invoke(ByRef<uint> pnWidth, ByRef<uint> pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetRecommendedRenderTargetSize::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetRecommendedRenderTargetSize*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pnWidth), byref(pnHeight));
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetRecommendedRenderTargetSize.BeginInvoke
::System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetRecommendedRenderTargetSize::BeginInvoke(ByRef<uint> pnWidth, ByRef<uint> pnHeight, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetRecommendedRenderTargetSize::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetRecommendedRenderTargetSize*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, byref(pnWidth), byref(pnHeight), callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetRecommendedRenderTargetSize.EndInvoke
void OVR::OpenVR::IVRSystem::_GetRecommendedRenderTargetSize::EndInvoke(ByRef<uint> pnWidth, ByRef<uint> pnHeight, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetRecommendedRenderTargetSize::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetRecommendedRenderTargetSize*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pnWidth), byref(pnHeight), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetProjectionMatrix
#include "OVR/OpenVR/IVRSystem__GetProjectionMatrix.hpp"
// Including type: OVR.OpenVR.HmdMatrix44_t
#include "OVR/OpenVR/HmdMatrix44_t.hpp"
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetProjectionMatrix.Invoke
::OVR::OpenVR::HmdMatrix44_t OVR::OpenVR::IVRSystem::_GetProjectionMatrix::Invoke(::OVR::OpenVR::EVREye eEye, float fNearZ, float fFarZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetProjectionMatrix::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetProjectionMatrix*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::OVR::OpenVR::HmdMatrix44_t, false>(this, ___internal__method, eEye, fNearZ, fFarZ);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetProjectionMatrix.BeginInvoke
::System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetProjectionMatrix::BeginInvoke(::OVR::OpenVR::EVREye eEye, float fNearZ, float fFarZ, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetProjectionMatrix::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetProjectionMatrix*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, eEye, fNearZ, fFarZ, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetProjectionMatrix.EndInvoke
::OVR::OpenVR::HmdMatrix44_t OVR::OpenVR::IVRSystem::_GetProjectionMatrix::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetProjectionMatrix::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetProjectionMatrix*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::OVR::OpenVR::HmdMatrix44_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetProjectionRaw
#include "OVR/OpenVR/IVRSystem__GetProjectionRaw.hpp"
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetProjectionRaw.Invoke
void OVR::OpenVR::IVRSystem::_GetProjectionRaw::Invoke(::OVR::OpenVR::EVREye eEye, ByRef<float> pfLeft, ByRef<float> pfRight, ByRef<float> pfTop, ByRef<float> pfBottom) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetProjectionRaw::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetProjectionRaw*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eEye, byref(pfLeft), byref(pfRight), byref(pfTop), byref(pfBottom));
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetProjectionRaw.BeginInvoke
::System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetProjectionRaw::BeginInvoke(::OVR::OpenVR::EVREye eEye, ByRef<float> pfLeft, ByRef<float> pfRight, ByRef<float> pfTop, ByRef<float> pfBottom, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetProjectionRaw::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetProjectionRaw*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, eEye, byref(pfLeft), byref(pfRight), byref(pfTop), byref(pfBottom), callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetProjectionRaw.EndInvoke
void OVR::OpenVR::IVRSystem::_GetProjectionRaw::EndInvoke(ByRef<float> pfLeft, ByRef<float> pfRight, ByRef<float> pfTop, ByRef<float> pfBottom, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetProjectionRaw::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetProjectionRaw*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pfLeft), byref(pfRight), byref(pfTop), byref(pfBottom), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/OVR.OpenVR._ComputeDistortion
#include "OVR/OpenVR/IVRSystem__ComputeDistortion.hpp"
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
// Including type: OVR.OpenVR.DistortionCoordinates_t
#include "OVR/OpenVR/DistortionCoordinates_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._ComputeDistortion.Invoke
bool OVR::OpenVR::IVRSystem::_ComputeDistortion::Invoke(::OVR::OpenVR::EVREye eEye, float fU, float fV, ByRef<::OVR::OpenVR::DistortionCoordinates_t> pDistortionCoordinates) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_ComputeDistortion::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_ComputeDistortion*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, eEye, fU, fV, byref(pDistortionCoordinates));
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._ComputeDistortion.BeginInvoke
::System::IAsyncResult* OVR::OpenVR::IVRSystem::_ComputeDistortion::BeginInvoke(::OVR::OpenVR::EVREye eEye, float fU, float fV, ByRef<::OVR::OpenVR::DistortionCoordinates_t> pDistortionCoordinates, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_ComputeDistortion::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_ComputeDistortion*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, eEye, fU, fV, byref(pDistortionCoordinates), callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._ComputeDistortion.EndInvoke
bool OVR::OpenVR::IVRSystem::_ComputeDistortion::EndInvoke(ByRef<::OVR::OpenVR::DistortionCoordinates_t> pDistortionCoordinates, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_ComputeDistortion::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_ComputeDistortion*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pDistortionCoordinates), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetEyeToHeadTransform
#include "OVR/OpenVR/IVRSystem__GetEyeToHeadTransform.hpp"
// Including type: OVR.OpenVR.HmdMatrix34_t
#include "OVR/OpenVR/HmdMatrix34_t.hpp"
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetEyeToHeadTransform.Invoke
::OVR::OpenVR::HmdMatrix34_t OVR::OpenVR::IVRSystem::_GetEyeToHeadTransform::Invoke(::OVR::OpenVR::EVREye eEye) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetEyeToHeadTransform::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetEyeToHeadTransform*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::OVR::OpenVR::HmdMatrix34_t, false>(this, ___internal__method, eEye);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetEyeToHeadTransform.BeginInvoke
::System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetEyeToHeadTransform::BeginInvoke(::OVR::OpenVR::EVREye eEye, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetEyeToHeadTransform::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetEyeToHeadTransform*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, eEye, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetEyeToHeadTransform.EndInvoke
::OVR::OpenVR::HmdMatrix34_t OVR::OpenVR::IVRSystem::_GetEyeToHeadTransform::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetEyeToHeadTransform::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetEyeToHeadTransform*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::OVR::OpenVR::HmdMatrix34_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetTimeSinceLastVsync
#include "OVR/OpenVR/IVRSystem__GetTimeSinceLastVsync.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetTimeSinceLastVsync.Invoke
bool OVR::OpenVR::IVRSystem::_GetTimeSinceLastVsync::Invoke(ByRef<float> pfSecondsSinceLastVsync, ByRef<uint64_t> pulFrameCounter) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetTimeSinceLastVsync::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetTimeSinceLastVsync*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pfSecondsSinceLastVsync), byref(pulFrameCounter));
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetTimeSinceLastVsync.BeginInvoke
::System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetTimeSinceLastVsync::BeginInvoke(ByRef<float> pfSecondsSinceLastVsync, ByRef<uint64_t> pulFrameCounter, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetTimeSinceLastVsync::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetTimeSinceLastVsync*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, byref(pfSecondsSinceLastVsync), byref(pulFrameCounter), callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetTimeSinceLastVsync.EndInvoke
bool OVR::OpenVR::IVRSystem::_GetTimeSinceLastVsync::EndInvoke(ByRef<float> pfSecondsSinceLastVsync, ByRef<uint64_t> pulFrameCounter, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetTimeSinceLastVsync::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetTimeSinceLastVsync*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pfSecondsSinceLastVsync), byref(pulFrameCounter), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetD3D9AdapterIndex
#include "OVR/OpenVR/IVRSystem__GetD3D9AdapterIndex.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetD3D9AdapterIndex.Invoke
int OVR::OpenVR::IVRSystem::_GetD3D9AdapterIndex::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetD3D9AdapterIndex::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetD3D9AdapterIndex*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetD3D9AdapterIndex.BeginInvoke
::System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetD3D9AdapterIndex::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetD3D9AdapterIndex::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetD3D9AdapterIndex*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetD3D9AdapterIndex.EndInvoke
int OVR::OpenVR::IVRSystem::_GetD3D9AdapterIndex::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetD3D9AdapterIndex::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetD3D9AdapterIndex*), 14));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetDXGIOutputInfo
#include "OVR/OpenVR/IVRSystem__GetDXGIOutputInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetDXGIOutputInfo.Invoke
void OVR::OpenVR::IVRSystem::_GetDXGIOutputInfo::Invoke(ByRef<int> pnAdapterIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetDXGIOutputInfo::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetDXGIOutputInfo*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pnAdapterIndex));
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetDXGIOutputInfo.BeginInvoke
::System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetDXGIOutputInfo::BeginInvoke(ByRef<int> pnAdapterIndex, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetDXGIOutputInfo::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetDXGIOutputInfo*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, byref(pnAdapterIndex), callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetDXGIOutputInfo.EndInvoke
void OVR::OpenVR::IVRSystem::_GetDXGIOutputInfo::EndInvoke(ByRef<int> pnAdapterIndex, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetDXGIOutputInfo::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetDXGIOutputInfo*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pnAdapterIndex), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetOutputDevice
#include "OVR/OpenVR/IVRSystem__GetOutputDevice.hpp"
// Including type: OVR.OpenVR.ETextureType
#include "OVR/OpenVR/ETextureType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetOutputDevice.Invoke
void OVR::OpenVR::IVRSystem::_GetOutputDevice::Invoke(ByRef<uint64_t> pnDevice, ::OVR::OpenVR::ETextureType textureType, ::System::IntPtr pInstance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetOutputDevice::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetOutputDevice*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pnDevice), textureType, pInstance);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetOutputDevice.BeginInvoke
::System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetOutputDevice::BeginInvoke(ByRef<uint64_t> pnDevice, ::OVR::OpenVR::ETextureType textureType, ::System::IntPtr pInstance, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetOutputDevice::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetOutputDevice*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, byref(pnDevice), textureType, pInstance, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetOutputDevice.EndInvoke
void OVR::OpenVR::IVRSystem::_GetOutputDevice::EndInvoke(ByRef<uint64_t> pnDevice, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetOutputDevice::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetOutputDevice*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pnDevice), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/OVR.OpenVR._IsDisplayOnDesktop
#include "OVR/OpenVR/IVRSystem__IsDisplayOnDesktop.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._IsDisplayOnDesktop.Invoke
bool OVR::OpenVR::IVRSystem::_IsDisplayOnDesktop::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_IsDisplayOnDesktop::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_IsDisplayOnDesktop*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._IsDisplayOnDesktop.BeginInvoke
::System::IAsyncResult* OVR::OpenVR::IVRSystem::_IsDisplayOnDesktop::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_IsDisplayOnDesktop::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_IsDisplayOnDesktop*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._IsDisplayOnDesktop.EndInvoke
bool OVR::OpenVR::IVRSystem::_IsDisplayOnDesktop::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_IsDisplayOnDesktop::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_IsDisplayOnDesktop*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/OVR.OpenVR._SetDisplayVisibility
#include "OVR/OpenVR/IVRSystem__SetDisplayVisibility.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._SetDisplayVisibility.Invoke
bool OVR::OpenVR::IVRSystem::_SetDisplayVisibility::Invoke(bool bIsVisibleOnDesktop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_SetDisplayVisibility::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_SetDisplayVisibility*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bIsVisibleOnDesktop);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._SetDisplayVisibility.BeginInvoke
::System::IAsyncResult* OVR::OpenVR::IVRSystem::_SetDisplayVisibility::BeginInvoke(bool bIsVisibleOnDesktop, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_SetDisplayVisibility::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_SetDisplayVisibility*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, bIsVisibleOnDesktop, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._SetDisplayVisibility.EndInvoke
bool OVR::OpenVR::IVRSystem::_SetDisplayVisibility::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_SetDisplayVisibility::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_SetDisplayVisibility*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetDeviceToAbsoluteTrackingPose
#include "OVR/OpenVR/IVRSystem__GetDeviceToAbsoluteTrackingPose.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetDeviceToAbsoluteTrackingPose.Invoke
void OVR::OpenVR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::Invoke(::OVR::OpenVR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, ByRef<::ArrayW<::OVR::OpenVR::TrackedDevicePose_t>> pTrackedDevicePoseArray, uint unTrackedDevicePoseArrayCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetDeviceToAbsoluteTrackingPose*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eOrigin, fPredictedSecondsToPhotonsFromNow, byref(pTrackedDevicePoseArray), unTrackedDevicePoseArrayCount);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetDeviceToAbsoluteTrackingPose.BeginInvoke
::System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::BeginInvoke(::OVR::OpenVR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, ByRef<::ArrayW<::OVR::OpenVR::TrackedDevicePose_t>> pTrackedDevicePoseArray, uint unTrackedDevicePoseArrayCount, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetDeviceToAbsoluteTrackingPose*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, eOrigin, fPredictedSecondsToPhotonsFromNow, byref(pTrackedDevicePoseArray), unTrackedDevicePoseArrayCount, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/OVR.OpenVR._GetDeviceToAbsoluteTrackingPose.EndInvoke
void OVR::OpenVR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::OVR::OpenVR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::OVR::OpenVR::IVRSystem::_GetDeviceToAbsoluteTrackingPose*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
