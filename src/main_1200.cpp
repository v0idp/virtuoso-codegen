// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AdjustableMeshColorChangeEffect
#include "VROSC/AdjustableMeshColorChangeEffect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& VROSC::AdjustableMeshColorChangeEffect::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColorChangeEffect::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _baseColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& VROSC::AdjustableMeshColorChangeEffect::dyn__baseColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColorChangeEffect::dyn__baseColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_baseColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AdjustableMeshColorChangeEffect.Awake
void VROSC::AdjustableMeshColorChangeEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColorChangeEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AdjustableMeshColorChangeEffect.SetColor
void VROSC::AdjustableMeshColorChangeEffect::SetColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColorChangeEffect::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: VROSC.AdjustableMeshColorChangeEffect.OnMeshVisible
void VROSC::AdjustableMeshColorChangeEffect::OnMeshVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColorChangeEffect::OnMeshVisible");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMeshEffect*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AdjustableMeshEffect
#include "VROSC/AdjustableMeshEffect.hpp"
// Including type: VROSC.AdjustableMesh
#include "VROSC/AdjustableMesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected VROSC.AdjustableMesh _adjustableMesh
[[deprecated("Use field access instead!")]] ::VROSC::AdjustableMesh*& VROSC::AdjustableMeshEffect::dyn__adjustableMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshEffect::dyn__adjustableMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_adjustableMesh"))->offset;
  return *reinterpret_cast<::VROSC::AdjustableMesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AdjustableMeshEffect.OnEnable
void VROSC::AdjustableMeshEffect::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshEffect::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AdjustableMeshEffect.OnDisable
void VROSC::AdjustableMeshEffect::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshEffect::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AdjustableMeshEffect.OnCreation
void VROSC::AdjustableMeshEffect::OnCreation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshEffect::OnCreation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMeshEffect*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AdjustableMeshEffect.OnMeshVisible
void VROSC::AdjustableMeshEffect::OnMeshVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshEffect::OnMeshVisible");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMeshEffect*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AdjustableMeshResizeEffect
#include "VROSC/AdjustableMeshResizeEffect.hpp"
// Including type: VROSC.UI.Meshes.AdjustableMeshData
#include "VROSC/UI/Meshes/AdjustableMeshData.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.UI.Meshes.AdjustableMeshData _data
[[deprecated("Use field access instead!")]] ::VROSC::UI::Meshes::AdjustableMeshData*& VROSC::AdjustableMeshResizeEffect::dyn__data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshResizeEffect::dyn__data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_data"))->offset;
  return *reinterpret_cast<::VROSC::UI::Meshes::AdjustableMeshData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _height
[[deprecated("Use field access instead!")]] float& VROSC::AdjustableMeshResizeEffect::dyn__height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshResizeEffect::dyn__height");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_height"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _width
[[deprecated("Use field access instead!")]] float& VROSC::AdjustableMeshResizeEffect::dyn__width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshResizeEffect::dyn__width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_width"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _alwaysUpdate
[[deprecated("Use field access instead!")]] bool& VROSC::AdjustableMeshResizeEffect::dyn__alwaysUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshResizeEffect::dyn__alwaysUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alwaysUpdate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform _rectTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& VROSC::AdjustableMeshResizeEffect::dyn__rectTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshResizeEffect::dyn__rectTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rectTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastHeight
[[deprecated("Use field access instead!")]] float& VROSC::AdjustableMeshResizeEffect::dyn__lastHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshResizeEffect::dyn__lastHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastWidth
[[deprecated("Use field access instead!")]] float& VROSC::AdjustableMeshResizeEffect::dyn__lastWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshResizeEffect::dyn__lastWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] _originalPositions
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& VROSC::AdjustableMeshResizeEffect::dyn__originalPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshResizeEffect::dyn__originalPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_originalPositions"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] _modifiedPositions
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& VROSC::AdjustableMeshResizeEffect::dyn__modifiedPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshResizeEffect::dyn__modifiedPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_modifiedPositions"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AdjustableMeshResizeEffect.get_Height
float VROSC::AdjustableMeshResizeEffect::get_Height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshResizeEffect::get_Height");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Height", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AdjustableMeshResizeEffect.get_Width
float VROSC::AdjustableMeshResizeEffect::get_Width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshResizeEffect::get_Width");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Width", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AdjustableMeshResizeEffect.GetMeshData
void VROSC::AdjustableMeshResizeEffect::GetMeshData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshResizeEffect::GetMeshData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMeshData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AdjustableMeshResizeEffect.UpdateMesh
void VROSC::AdjustableMeshResizeEffect::UpdateMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshResizeEffect::UpdateMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AdjustableMeshResizeEffect.OnDrawGizmos
void VROSC::AdjustableMeshResizeEffect::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshResizeEffect::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AdjustableMeshResizeEffect.OnEnable
void VROSC::AdjustableMeshResizeEffect::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshResizeEffect::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AdjustableMeshResizeEffect.OnCreation
void VROSC::AdjustableMeshResizeEffect::OnCreation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshResizeEffect::OnCreation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMeshEffect*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AdjustableMeshTransformUVEffect
#include "VROSC/AdjustableMeshTransformUVEffect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 _offset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& VROSC::AdjustableMeshTransformUVEffect::dyn__offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshTransformUVEffect::dyn__offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_offset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.AdjustableMeshTransformUVEffect/VROSC.Channel _channel
[[deprecated("Use field access instead!")]] ::VROSC::AdjustableMeshTransformUVEffect::Channel& VROSC::AdjustableMeshTransformUVEffect::dyn__channel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshTransformUVEffect::dyn__channel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_channel"))->offset;
  return *reinterpret_cast<::VROSC::AdjustableMeshTransformUVEffect::Channel*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2[] _originalUv
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& VROSC::AdjustableMeshTransformUVEffect::dyn__originalUv() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshTransformUVEffect::dyn__originalUv");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_originalUv"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector2>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2[] _uv
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& VROSC::AdjustableMeshTransformUVEffect::dyn__uv() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshTransformUVEffect::dyn__uv");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_uv"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector2>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AdjustableMeshTransformUVEffect.SetOffset
void VROSC::AdjustableMeshTransformUVEffect::SetOffset(::UnityEngine::Vector2 offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshTransformUVEffect::SetOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AdjustableMeshTransformUVEffect/VROSC.Channel
#include "VROSC/AdjustableMeshTransformUVEffect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VROSC.AdjustableMeshTransformUVEffect/VROSC.Channel Uv1
::VROSC::AdjustableMeshTransformUVEffect::Channel VROSC::AdjustableMeshTransformUVEffect::Channel::_get_Uv1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshTransformUVEffect::Channel::_get_Uv1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::AdjustableMeshTransformUVEffect::Channel>("VROSC", "AdjustableMeshTransformUVEffect/Channel", "Uv1"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.AdjustableMeshTransformUVEffect/VROSC.Channel Uv1
void VROSC::AdjustableMeshTransformUVEffect::Channel::_set_Uv1(::VROSC::AdjustableMeshTransformUVEffect::Channel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshTransformUVEffect::Channel::_set_Uv1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "AdjustableMeshTransformUVEffect/Channel", "Uv1", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.AdjustableMeshTransformUVEffect/VROSC.Channel Uv2
::VROSC::AdjustableMeshTransformUVEffect::Channel VROSC::AdjustableMeshTransformUVEffect::Channel::_get_Uv2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshTransformUVEffect::Channel::_get_Uv2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::AdjustableMeshTransformUVEffect::Channel>("VROSC", "AdjustableMeshTransformUVEffect/Channel", "Uv2"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.AdjustableMeshTransformUVEffect/VROSC.Channel Uv2
void VROSC::AdjustableMeshTransformUVEffect::Channel::_set_Uv2(::VROSC::AdjustableMeshTransformUVEffect::Channel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshTransformUVEffect::Channel::_set_Uv2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "AdjustableMeshTransformUVEffect/Channel", "Uv2", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.AdjustableMeshTransformUVEffect/VROSC.Channel Uv3
::VROSC::AdjustableMeshTransformUVEffect::Channel VROSC::AdjustableMeshTransformUVEffect::Channel::_get_Uv3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshTransformUVEffect::Channel::_get_Uv3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::AdjustableMeshTransformUVEffect::Channel>("VROSC", "AdjustableMeshTransformUVEffect/Channel", "Uv3"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.AdjustableMeshTransformUVEffect/VROSC.Channel Uv3
void VROSC::AdjustableMeshTransformUVEffect::Channel::_set_Uv3(::VROSC::AdjustableMeshTransformUVEffect::Channel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshTransformUVEffect::Channel::_set_Uv3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "AdjustableMeshTransformUVEffect/Channel", "Uv3", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.AdjustableMeshTransformUVEffect/VROSC.Channel Uv4
::VROSC::AdjustableMeshTransformUVEffect::Channel VROSC::AdjustableMeshTransformUVEffect::Channel::_get_Uv4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshTransformUVEffect::Channel::_get_Uv4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::AdjustableMeshTransformUVEffect::Channel>("VROSC", "AdjustableMeshTransformUVEffect/Channel", "Uv4"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.AdjustableMeshTransformUVEffect/VROSC.Channel Uv4
void VROSC::AdjustableMeshTransformUVEffect::Channel::_set_Uv4(::VROSC::AdjustableMeshTransformUVEffect::Channel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshTransformUVEffect::Channel::_set_Uv4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "AdjustableMeshTransformUVEffect/Channel", "Uv4", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VROSC::AdjustableMeshTransformUVEffect::Channel::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshTransformUVEffect::Channel::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AdjustableMeshVertexEffect
#include "VROSC/AdjustableMeshVertexEffect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _scale
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& VROSC::AdjustableMeshVertexEffect::dyn__scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshVertexEffect::dyn__scale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scale"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] _originalPositions
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& VROSC::AdjustableMeshVertexEffect::dyn__originalPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshVertexEffect::dyn__originalPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_originalPositions"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AdjustableMeshVertexEffect.SetScale
void VROSC::AdjustableMeshVertexEffect::SetScale(::UnityEngine::Vector3 scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshVertexEffect::SetScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scale)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scale);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AdjustableMirrorMeshEffect
#include "VROSC/AdjustableMirrorMeshEffect.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean _flipped
[[deprecated("Use field access instead!")]] bool& VROSC::AdjustableMirrorMeshEffect::dyn__flipped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMirrorMeshEffect::dyn__flipped");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flipped"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AdjustableMirrorMeshEffect.Flip
void VROSC::AdjustableMirrorMeshEffect::Flip(::UnityEngine::Mesh* mesh) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMirrorMeshEffect::Flip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mesh)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mesh);
}
// Autogenerated method: VROSC.AdjustableMirrorMeshEffect.FlipNormals
void VROSC::AdjustableMirrorMeshEffect::FlipNormals(::UnityEngine::Mesh* mesh) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMirrorMeshEffect::FlipNormals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlipNormals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mesh)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mesh);
}
// Autogenerated method: VROSC.AdjustableMirrorMeshEffect.OnMeshVisible
void VROSC::AdjustableMirrorMeshEffect::OnMeshVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMirrorMeshEffect::OnMeshVisible");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMeshEffect*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.ResizeableAdjustableMesh
#include "VROSC/ResizeableAdjustableMesh.hpp"
// Including type: VROSC.UI.Meshes.AdjustableMeshData
#include "VROSC/UI/Meshes/AdjustableMeshData.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.UI.Meshes.AdjustableMeshData _data
[[deprecated("Use field access instead!")]] ::VROSC::UI::Meshes::AdjustableMeshData*& VROSC::ResizeableAdjustableMesh::dyn__data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ResizeableAdjustableMesh::dyn__data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_data"))->offset;
  return *reinterpret_cast<::VROSC::UI::Meshes::AdjustableMeshData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _alwaysUpdate
[[deprecated("Use field access instead!")]] bool& VROSC::ResizeableAdjustableMesh::dyn__alwaysUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ResizeableAdjustableMesh::dyn__alwaysUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alwaysUpdate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastHeight
[[deprecated("Use field access instead!")]] float& VROSC::ResizeableAdjustableMesh::dyn__lastHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ResizeableAdjustableMesh::dyn__lastHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastWidth
[[deprecated("Use field access instead!")]] float& VROSC::ResizeableAdjustableMesh::dyn__lastWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ResizeableAdjustableMesh::dyn__lastWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] _originalPositions
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& VROSC::ResizeableAdjustableMesh::dyn__originalPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ResizeableAdjustableMesh::dyn__originalPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_originalPositions"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] _modifiedPositions
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& VROSC::ResizeableAdjustableMesh::dyn__modifiedPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ResizeableAdjustableMesh::dyn__modifiedPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_modifiedPositions"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.ResizeableAdjustableMesh.UpdateMesh
void VROSC::ResizeableAdjustableMesh::UpdateMesh(bool force) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ResizeableAdjustableMesh::UpdateMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, force);
}
// Autogenerated method: VROSC.ResizeableAdjustableMesh.SetMeshSize
void VROSC::ResizeableAdjustableMesh::SetMeshSize(::UnityEngine::Rect rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ResizeableAdjustableMesh::SetMeshSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMeshSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rect)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rect);
}
// Autogenerated method: VROSC.ResizeableAdjustableMesh.Update
void VROSC::ResizeableAdjustableMesh::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ResizeableAdjustableMesh::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ResizeableAdjustableMesh.OnDrawGizmos
void VROSC::ResizeableAdjustableMesh::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ResizeableAdjustableMesh::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ResizeableAdjustableMesh.get_Original
::UnityEngine::Mesh* VROSC::ResizeableAdjustableMesh::get_Original() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ResizeableAdjustableMesh::get_Original");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMesh*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ResizeableAdjustableMesh.OnEnable
void VROSC::ResizeableAdjustableMesh::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ResizeableAdjustableMesh::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMesh*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ResizeableAdjustableMesh.LoadMesh
void VROSC::ResizeableAdjustableMesh::LoadMesh(bool force) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ResizeableAdjustableMesh::LoadMesh");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMesh*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, force);
}
// Autogenerated method: VROSC.ResizeableAdjustableMesh.UpdateMeshAppearance
void VROSC::ResizeableAdjustableMesh::UpdateMeshAppearance(float appearAmount, ::VROSC::AnimatedAppear::Mode mode, bool useFlash) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ResizeableAdjustableMesh::UpdateMeshAppearance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMesh*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, appearAmount, mode, useFlash);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AdjustColliderToRect
#include "VROSC/AdjustColliderToRect.hpp"
// Including type: VROSC.MinMaxFloat
#include "VROSC/MinMaxFloat.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _depth
[[deprecated("Use field access instead!")]] float& VROSC::AdjustColliderToRect::dyn__depth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustColliderToRect::dyn__depth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_depth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _push
[[deprecated("Use field access instead!")]] float& VROSC::AdjustColliderToRect::dyn__push() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustColliderToRect::dyn__push");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_push"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.MinMaxFloat _marginX
[[deprecated("Use field access instead!")]] ::VROSC::MinMaxFloat*& VROSC::AdjustColliderToRect::dyn__marginX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustColliderToRect::dyn__marginX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_marginX"))->offset;
  return *reinterpret_cast<::VROSC::MinMaxFloat**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.MinMaxFloat _marginY
[[deprecated("Use field access instead!")]] ::VROSC::MinMaxFloat*& VROSC::AdjustColliderToRect::dyn__marginY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustColliderToRect::dyn__marginY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_marginY"))->offset;
  return *reinterpret_cast<::VROSC::MinMaxFloat**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 _offset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& VROSC::AdjustColliderToRect::dyn__offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustColliderToRect::dyn__offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_offset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform _rectTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& VROSC::AdjustColliderToRect::dyn__rectTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustColliderToRect::dyn__rectTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rectTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Collider _collider
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& VROSC::AdjustColliderToRect::dyn__collider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustColliderToRect::dyn__collider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_collider"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _valid
[[deprecated("Use field access instead!")]] bool& VROSC::AdjustColliderToRect::dyn__valid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustColliderToRect::dyn__valid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_valid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastHeight
[[deprecated("Use field access instead!")]] float& VROSC::AdjustColliderToRect::dyn__lastHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustColliderToRect::dyn__lastHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastWidth
[[deprecated("Use field access instead!")]] float& VROSC::AdjustColliderToRect::dyn__lastWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustColliderToRect::dyn__lastWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AdjustColliderToRect.ResizeCollider
void VROSC::AdjustColliderToRect::ResizeCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustColliderToRect::ResizeCollider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResizeCollider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AdjustColliderToRect.Update
void VROSC::AdjustColliderToRect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustColliderToRect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AdjustColliderToRect.UpdateSize
void VROSC::AdjustColliderToRect::UpdateSize(bool force) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustColliderToRect::UpdateSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, force);
}
// Autogenerated method: VROSC.AdjustColliderToRect.GetValues
void VROSC::AdjustColliderToRect::GetValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustColliderToRect::GetValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AnimatedAppear
#include "VROSC/AnimatedAppear.hpp"
// Including type: VROSC.AnimatedAppear/VROSC.Mode
#include "VROSC/AnimatedAppear_Mode.hpp"
// Including type: VROSC.AnimatedAppearSettings
#include "VROSC/AnimatedAppearSettings.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: VROSC.TimelinePlaybackHelper
#include "VROSC/TimelinePlaybackHelper.hpp"
// Including type: VROSC.AnimatedAppearData
#include "VROSC/AnimatedAppearData.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _move
[[deprecated("Use field access instead!")]] float& VROSC::AnimatedAppear::dyn__move() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::dyn__move");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_move"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.AnimatedAppearSettings _enter
[[deprecated("Use field access instead!")]] ::VROSC::AnimatedAppearSettings*& VROSC::AnimatedAppear::dyn__enter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::dyn__enter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_enter"))->offset;
  return *reinterpret_cast<::VROSC::AnimatedAppearSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.AnimatedAppearSettings _exit
[[deprecated("Use field access instead!")]] ::VROSC::AnimatedAppearSettings*& VROSC::AnimatedAppear::dyn__exit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::dyn__exit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_exit"))->offset;
  return *reinterpret_cast<::VROSC::AnimatedAppearSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform _rectTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& VROSC::AnimatedAppear::dyn__rectTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::dyn__rectTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rectTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _forceLayoutUpdate
[[deprecated("Use field access instead!")]] bool& VROSC::AnimatedAppear::dyn__forceLayoutUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::dyn__forceLayoutUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_forceLayoutUpdate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.TimelinePlaybackHelper _playbackHelper
[[deprecated("Use field access instead!")]] ::VROSC::TimelinePlaybackHelper*& VROSC::AnimatedAppear::dyn__playbackHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::dyn__playbackHelper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playbackHelper"))->offset;
  return *reinterpret_cast<::VROSC::TimelinePlaybackHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.AnimatedAppearData _data
[[deprecated("Use field access instead!")]] ::VROSC::AnimatedAppearData*& VROSC::AnimatedAppear::dyn__data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::dyn__data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_data"))->offset;
  return *reinterpret_cast<::VROSC::AnimatedAppearData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _startPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& VROSC::AnimatedAppear::dyn__startPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::dyn__startPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _startPositionSet
[[deprecated("Use field access instead!")]] bool& VROSC::AnimatedAppear::dyn__startPositionSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::dyn__startPositionSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startPositionSet"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _startAnimationPlaying
[[deprecated("Use field access instead!")]] bool& VROSC::AnimatedAppear::dyn__startAnimationPlaying() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::dyn__startAnimationPlaying");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startAnimationPlaying"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setupDone
[[deprecated("Use field access instead!")]] bool& VROSC::AnimatedAppear::dyn__setupDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::dyn__setupDone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setupDone"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AnimatedAppear.get_Enter
::VROSC::AnimatedAppearSettings* VROSC::AnimatedAppear::get_Enter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::get_Enter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Enter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::AnimatedAppearSettings*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppear.get_Exit
::VROSC::AnimatedAppearSettings* VROSC::AnimatedAppear::get_Exit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::get_Exit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Exit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::AnimatedAppearSettings*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppear.get_IsAnimating
bool VROSC::AnimatedAppear::get_IsAnimating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::get_IsAnimating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsAnimating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppear.OnDestroy
void VROSC::AnimatedAppear::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppear.Setup
void VROSC::AnimatedAppear::Setup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppear.FixLayoutGroups
void VROSC::AnimatedAppear::FixLayoutGroups() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::FixLayoutGroups");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixLayoutGroups", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppear.UpdateAppearAmount
void VROSC::AnimatedAppear::UpdateAppearAmount(float amount, ::VROSC::AnimatedAppear::Mode mode, bool useFlash, bool force) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::UpdateAppearAmount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateAppearAmount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(amount), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(useFlash), ::il2cpp_utils::ExtractType(force)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, amount, mode, useFlash, force);
}
// Autogenerated method: VROSC.AnimatedAppear.Play
void VROSC::AnimatedAppear::Play(bool playEnterAnimation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::Play");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Play", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playEnterAnimation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playEnterAnimation);
}
// Autogenerated method: VROSC.AnimatedAppear.Update
void VROSC::AnimatedAppear::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppear.Stop
void VROSC::AnimatedAppear::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppear.AnimationHasFinished
void VROSC::AnimatedAppear::AnimationHasFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::AnimationHasFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimationHasFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppear.OnEnable
void VROSC::AnimatedAppear::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppear.OnDisable
void VROSC::AnimatedAppear::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppear.SetAppearActive
void VROSC::AnimatedAppear::SetAppearActive(bool appearing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::SetAppearActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetAppearActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(appearing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, appearing);
}
// Autogenerated method: VROSC.AnimatedAppear.Clear
void VROSC::AnimatedAppear::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppear.GetMovementData
::System::ValueTuple_2<::UnityEngine::Vector3, ::UnityEngine::Vector3> VROSC::AnimatedAppear::GetMovementData(bool enter) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::GetMovementData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMovementData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enter)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::ValueTuple_2<::UnityEngine::Vector3, ::UnityEngine::Vector3>, false>(this, ___internal__method, enter);
}
// Autogenerated method: VROSC.AnimatedAppear.OnDrawGizmos
void VROSC::AnimatedAppear::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppear.EditorUnloadDirector
void VROSC::AnimatedAppear::EditorUnloadDirector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::EditorUnloadDirector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EditorUnloadDirector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppear.EditorLoadDirector
void VROSC::AnimatedAppear::EditorLoadDirector(bool enter) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::EditorLoadDirector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EditorLoadDirector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enter)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enter);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AnimatedAppear/VROSC.Mode
#include "VROSC/AnimatedAppear_Mode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VROSC.AnimatedAppear/VROSC.Mode LeftToRight
::VROSC::AnimatedAppear::Mode VROSC::AnimatedAppear::Mode::_get_LeftToRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::Mode::_get_LeftToRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::AnimatedAppear::Mode>("VROSC", "AnimatedAppear/Mode", "LeftToRight"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.AnimatedAppear/VROSC.Mode LeftToRight
void VROSC::AnimatedAppear::Mode::_set_LeftToRight(::VROSC::AnimatedAppear::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::Mode::_set_LeftToRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "AnimatedAppear/Mode", "LeftToRight", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.AnimatedAppear/VROSC.Mode UpToDown
::VROSC::AnimatedAppear::Mode VROSC::AnimatedAppear::Mode::_get_UpToDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::Mode::_get_UpToDown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::AnimatedAppear::Mode>("VROSC", "AnimatedAppear/Mode", "UpToDown"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.AnimatedAppear/VROSC.Mode UpToDown
void VROSC::AnimatedAppear::Mode::_set_UpToDown(::VROSC::AnimatedAppear::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::Mode::_set_UpToDown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "AnimatedAppear/Mode", "UpToDown", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.AnimatedAppear/VROSC.Mode CenteredHorizontal
::VROSC::AnimatedAppear::Mode VROSC::AnimatedAppear::Mode::_get_CenteredHorizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::Mode::_get_CenteredHorizontal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::AnimatedAppear::Mode>("VROSC", "AnimatedAppear/Mode", "CenteredHorizontal"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.AnimatedAppear/VROSC.Mode CenteredHorizontal
void VROSC::AnimatedAppear::Mode::_set_CenteredHorizontal(::VROSC::AnimatedAppear::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::Mode::_set_CenteredHorizontal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "AnimatedAppear/Mode", "CenteredHorizontal", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VROSC::AnimatedAppear::Mode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::Mode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AnimatedAppearData
#include "VROSC/AnimatedAppearData.hpp"
// Including type: VROSC.AnimatedAppearData/VROSC.AppearingObject
#include "VROSC/AnimatedAppearData_AppearingObject.hpp"
// Including type: VROSC.AnimatedAppearData/VROSC.TextMeshAppear
#include "VROSC/AnimatedAppearData_TextMeshAppear.hpp"
// Including type: VROSC.AnimatedAppearData/VROSC.AdjustableMeshAppear
#include "VROSC/AnimatedAppearData_AdjustableMeshAppear.hpp"
// Including type: VROSC.AnimatedAppearData/VROSC.SimpleAppear
#include "VROSC/AnimatedAppearData_SimpleAppear.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: VROSC.Interactable
#include "VROSC/Interactable.hpp"
// Including type: VROSC.AdjustableMesh
#include "VROSC/AdjustableMesh.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
// Including type: VROSC.SimpleAppearObject
#include "VROSC/SimpleAppearObject.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: VROSC.MinMaxVector2
#include "VROSC/MinMaxVector2.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: VROSC.AnimatedAppear/VROSC.Mode
#include "VROSC/AnimatedAppear_Mode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform _rectTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& VROSC::AnimatedAppearData::dyn__rectTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::dyn__rectTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rectTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.Interactable[] _interactables
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::Interactable*>& VROSC::AnimatedAppearData::dyn__interactables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::dyn__interactables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_interactables"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::Interactable*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.AdjustableMesh[] _adjustableMeshes
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::AdjustableMesh*>& VROSC::AnimatedAppearData::dyn__adjustableMeshes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::dyn__adjustableMeshes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_adjustableMeshes"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::AdjustableMesh*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshPro[] _textMeshPros
[[deprecated("Use field access instead!")]] ::ArrayW<::TMPro::TextMeshPro*>& VROSC::AnimatedAppearData::dyn__textMeshPros() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::dyn__textMeshPros");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textMeshPros"))->offset;
  return *reinterpret_cast<::ArrayW<::TMPro::TextMeshPro*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.SimpleAppearObject[] _simpleAppearObjects
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::SimpleAppearObject*>& VROSC::AnimatedAppearData::dyn__simpleAppearObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::dyn__simpleAppearObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_simpleAppearObjects"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::SimpleAppearObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.AnimatedAppearData/VROSC.TextMeshAppear[] _textAppears
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::AnimatedAppearData::TextMeshAppear*>& VROSC::AnimatedAppearData::dyn__textAppears() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::dyn__textAppears");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textAppears"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::AnimatedAppearData::TextMeshAppear*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.AnimatedAppearData/VROSC.AdjustableMeshAppear[] _meshAppears
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::AnimatedAppearData::AdjustableMeshAppear*>& VROSC::AnimatedAppearData::dyn__meshAppears() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::dyn__meshAppears");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshAppears"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::AnimatedAppearData::AdjustableMeshAppear*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.AnimatedAppearData/VROSC.SimpleAppear[] _simpleAppears
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::AnimatedAppearData::SimpleAppear*>& VROSC::AnimatedAppearData::dyn__simpleAppears() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::dyn__simpleAppears");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_simpleAppears"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::AnimatedAppearData::SimpleAppear*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AnimatedAppearData.SetAppearData
void VROSC::AnimatedAppearData::SetAppearData(::UnityEngine::RectTransform* reference) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::SetAppearData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetAppearData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reference)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reference);
}
// Autogenerated method: VROSC.AnimatedAppearData.UpdateAppearAmount
void VROSC::AnimatedAppearData::UpdateAppearAmount(float amount, ::VROSC::AnimatedAppear::Mode mode, bool useFlash, bool force) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::UpdateAppearAmount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateAppearAmount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(amount), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(useFlash), ::il2cpp_utils::ExtractType(force)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, amount, mode, useFlash, force);
}
// Autogenerated method: VROSC.AnimatedAppearData.SetAppearActive
void VROSC::AnimatedAppearData::SetAppearActive(bool appearing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::SetAppearActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetAppearActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(appearing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, appearing);
}
// Autogenerated method: VROSC.AnimatedAppearData.Clear
void VROSC::AnimatedAppearData::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppearData.SetInteractablesDisabled
void VROSC::AnimatedAppearData::SetInteractablesDisabled(bool disabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::SetInteractablesDisabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInteractablesDisabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disabled)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disabled);
}
// Autogenerated method: VROSC.AnimatedAppearData.GetAppearData
::VROSC::MinMaxVector2* VROSC::AnimatedAppearData::GetAppearData(::UnityEngine::RectTransform* reference, ::VROSC::SimpleAppearObject* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::GetAppearData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAppearData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reference), ::il2cpp_utils::ExtractType(target)})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::MinMaxVector2*, false>(this, ___internal__method, reference, target);
}
// Autogenerated method: VROSC.AnimatedAppearData.GetAppearData
::VROSC::MinMaxVector2* VROSC::AnimatedAppearData::GetAppearData(::UnityEngine::RectTransform* reference, ::VROSC::AdjustableMesh* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::GetAppearData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAppearData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reference), ::il2cpp_utils::ExtractType(target)})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::MinMaxVector2*, false>(this, ___internal__method, reference, target);
}
// Autogenerated method: VROSC.AnimatedAppearData.GetAppearData
::VROSC::MinMaxVector2* VROSC::AnimatedAppearData::GetAppearData(::UnityEngine::RectTransform* reference, ::UnityEngine::RectTransform* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::GetAppearData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAppearData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reference), ::il2cpp_utils::ExtractType(target)})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::MinMaxVector2*, false>(this, ___internal__method, reference, target);
}
// Autogenerated method: VROSC.AnimatedAppearData.GetLocalPos
::UnityEngine::Vector2 VROSC::AnimatedAppearData::GetLocalPos(::UnityEngine::RectTransform* reference, ::UnityEngine::RectTransform* target, ::UnityEngine::Vector2 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::GetLocalPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLocalPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reference), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, reference, target, pos);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AnimatedAppearData/VROSC.AppearingObject
#include "VROSC/AnimatedAppearData_AppearingObject.hpp"
// Including type: VROSC.MinMaxVector2
#include "VROSC/MinMaxVector2.hpp"
// Including type: VROSC.AnimatedAppear/VROSC.Mode
#include "VROSC/AnimatedAppear_Mode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected VROSC.MinMaxVector2 _minMax
[[deprecated("Use field access instead!")]] ::VROSC::MinMaxVector2*& VROSC::AnimatedAppearData::AppearingObject::dyn__minMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::AppearingObject::dyn__minMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minMax"))->offset;
  return *reinterpret_cast<::VROSC::MinMaxVector2**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Vector2 _appear
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& VROSC::AnimatedAppearData::AppearingObject::dyn__appear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::AppearingObject::dyn__appear");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_appear"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AnimatedAppearData/VROSC.AppearingObject.Update
void VROSC::AnimatedAppearData::AppearingObject::Update(::UnityEngine::Vector2 amount, bool useFlash, bool force, ::VROSC::AnimatedAppear::Mode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::AppearingObject::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(amount), ::il2cpp_utils::ExtractType(useFlash), ::il2cpp_utils::ExtractType(force), ::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, amount, useFlash, force, mode);
}
// Autogenerated method: VROSC.AnimatedAppearData/VROSC.AppearingObject.UpdateObject
void VROSC::AnimatedAppearData::AppearingObject::UpdateObject(::VROSC::AnimatedAppear::Mode mode, bool useFlash) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::AppearingObject::UpdateObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AnimatedAppearData::AppearingObject*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mode, useFlash);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AnimatedAppearData/VROSC.TextMeshAppear
#include "VROSC/AnimatedAppearData_TextMeshAppear.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
// Including type: VROSC.MinMaxVector2
#include "VROSC/MinMaxVector2.hpp"
// Including type: VROSC.AnimatedAppear/VROSC.Mode
#include "VROSC/AnimatedAppear_Mode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshPro _textMesh
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& VROSC::AnimatedAppearData::TextMeshAppear::dyn__textMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::TextMeshAppear::dyn__textMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textMesh"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshPro**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& VROSC::AnimatedAppearData::TextMeshAppear::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::TextMeshAppear::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AnimatedAppearData/VROSC.TextMeshAppear.UpdateObject
void VROSC::AnimatedAppearData::TextMeshAppear::UpdateObject(::VROSC::AnimatedAppear::Mode mode, bool useFlash) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::TextMeshAppear::UpdateObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AnimatedAppearData::AppearingObject*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mode, useFlash);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AnimatedAppearData/VROSC.AdjustableMeshAppear
#include "VROSC/AnimatedAppearData_AdjustableMeshAppear.hpp"
// Including type: VROSC.AdjustableMesh
#include "VROSC/AdjustableMesh.hpp"
// Including type: VROSC.MinMaxVector2
#include "VROSC/MinMaxVector2.hpp"
// Including type: VROSC.AnimatedAppear/VROSC.Mode
#include "VROSC/AnimatedAppear_Mode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.AdjustableMesh _adjustableMesh
[[deprecated("Use field access instead!")]] ::VROSC::AdjustableMesh*& VROSC::AnimatedAppearData::AdjustableMeshAppear::dyn__adjustableMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::AdjustableMeshAppear::dyn__adjustableMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_adjustableMesh"))->offset;
  return *reinterpret_cast<::VROSC::AdjustableMesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AnimatedAppearData/VROSC.AdjustableMeshAppear.UpdateObject
void VROSC::AnimatedAppearData::AdjustableMeshAppear::UpdateObject(::VROSC::AnimatedAppear::Mode mode, bool useFlash) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::AdjustableMeshAppear::UpdateObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AnimatedAppearData::AppearingObject*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mode, useFlash);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AnimatedAppearData/VROSC.SimpleAppear
#include "VROSC/AnimatedAppearData_SimpleAppear.hpp"
// Including type: VROSC.SimpleAppearObject
#include "VROSC/SimpleAppearObject.hpp"
// Including type: VROSC.MinMaxVector2
#include "VROSC/MinMaxVector2.hpp"
// Including type: VROSC.AnimatedAppear/VROSC.Mode
#include "VROSC/AnimatedAppear_Mode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.SimpleAppearObject _target
[[deprecated("Use field access instead!")]] ::VROSC::SimpleAppearObject*& VROSC::AnimatedAppearData::SimpleAppear::dyn__target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::SimpleAppear::dyn__target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_target"))->offset;
  return *reinterpret_cast<::VROSC::SimpleAppearObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AnimatedAppearData/VROSC.SimpleAppear.UpdateObject
void VROSC::AnimatedAppearData::SimpleAppear::UpdateObject(::VROSC::AnimatedAppear::Mode mode, bool useFlash) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::SimpleAppear::UpdateObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AnimatedAppearData::AppearingObject*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mode, useFlash);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AnimatedAppearMaterialHolder
#include "VROSC/AnimatedAppearMaterialHolder.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshPro _textMesh
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& VROSC::AnimatedAppearMaterialHolder::dyn__textMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearMaterialHolder::dyn__textMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textMesh"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshPro**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer _renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& VROSC::AnimatedAppearMaterialHolder::dyn__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearMaterialHolder::dyn__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _material
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& VROSC::AnimatedAppearMaterialHolder::dyn__material() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearMaterialHolder::dyn__material");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_material"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AnimatedAppearMaterialHolder.Setup
void VROSC::AnimatedAppearMaterialHolder::Setup(::TMPro::TextMeshPro* textMesh, ::UnityEngine::Material* material) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearMaterialHolder::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textMesh), ::il2cpp_utils::ExtractType(material)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, textMesh, material);
}
// Autogenerated method: VROSC.AnimatedAppearMaterialHolder.Setup
void VROSC::AnimatedAppearMaterialHolder::Setup(::UnityEngine::Renderer* renderer, ::UnityEngine::Material* material) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearMaterialHolder::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderer), ::il2cpp_utils::ExtractType(material)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, renderer, material);
}
// Autogenerated method: VROSC.AnimatedAppearMaterialHolder.Reset
void VROSC::AnimatedAppearMaterialHolder::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearMaterialHolder::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AnimatedAppearSettings
#include "VROSC/AnimatedAppearSettings.hpp"
// Including type: UnityEngine.Playables.PlayableAsset
#include "UnityEngine/Playables/PlayableAsset.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean _play
[[deprecated("Use field access instead!")]] bool& VROSC::AnimatedAppearSettings::dyn__play() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearSettings::dyn__play");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_play"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableAsset _timeline
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableAsset*& VROSC::AnimatedAppearSettings::dyn__timeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearSettings::dyn__timeline");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeline"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableAsset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.AnimatedAppear/VROSC.Mode _mode
[[deprecated("Use field access instead!")]] ::VROSC::AnimatedAppear::Mode& VROSC::AnimatedAppearSettings::dyn__mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearSettings::dyn__mode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mode"))->offset;
  return *reinterpret_cast<::VROSC::AnimatedAppear::Mode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableDirector _director
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableDirector*& VROSC::AnimatedAppearSettings::dyn__director() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearSettings::dyn__director");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_director"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableDirector**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AnimatedAppearSettings.get_Timeline
::UnityEngine::Playables::PlayableAsset* VROSC::AnimatedAppearSettings::get_Timeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearSettings::get_Timeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Timeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::PlayableAsset*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppearSettings.get_Mode
::VROSC::AnimatedAppear::Mode VROSC::AnimatedAppearSettings::get_Mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearSettings::get_Mode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Mode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::AnimatedAppear::Mode, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppearSettings.get_Play
bool VROSC::AnimatedAppearSettings::get_Play() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearSettings::get_Play");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Play", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppearSettings.get_IsPlaying
bool VROSC::AnimatedAppearSettings::get_IsPlaying() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearSettings::get_IsPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppearSettings.Stop
void VROSC::AnimatedAppearSettings::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearSettings::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedAppearSettings.SetTimelineActive
void VROSC::AnimatedAppearSettings::SetTimelineActive(::UnityEngine::GameObject* target, bool play) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearSettings::SetTimelineActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTimelineActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(play)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, play);
}
// Autogenerated method: VROSC.AnimatedAppearSettings.GetOrAddDirector
void VROSC::AnimatedAppearSettings::GetOrAddDirector(::UnityEngine::GameObject* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearSettings::GetOrAddDirector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOrAddDirector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target);
}
// Autogenerated method: VROSC.AnimatedAppearSettings.Unload
void VROSC::AnimatedAppearSettings::Unload(::UnityEngine::GameObject* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearSettings::Unload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target);
}
// Autogenerated method: VROSC.AnimatedAppearSettings.GetDir
::UnityEngine::Vector3 VROSC::AnimatedAppearSettings::GetDir() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearSettings::GetDir");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDir", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AnimatedPanel
#include "VROSC/AnimatedPanel.hpp"
// Including type: VROSC.AnimatedAppear
#include "VROSC/AnimatedAppear.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.AnimatedAppear _animation
[[deprecated("Use field access instead!")]] ::VROSC::AnimatedAppear*& VROSC::AnimatedPanel::dyn__animation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedPanel::dyn__animation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animation"))->offset;
  return *reinterpret_cast<::VROSC::AnimatedAppear**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isClosing
[[deprecated("Use field access instead!")]] bool& VROSC::AnimatedPanel::dyn__isClosing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedPanel::dyn__isClosing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isClosing"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AnimatedPanel.get_IsAnimating
bool VROSC::AnimatedPanel::get_IsAnimating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedPanel::get_IsAnimating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsAnimating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedPanel.SetActive
void VROSC::AnimatedPanel::SetActive(bool shouldBeOpen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedPanel::SetActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shouldBeOpen)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, shouldBeOpen);
}
// Autogenerated method: VROSC.AnimatedPanel.Update
void VROSC::AnimatedPanel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedPanel::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedPanel.FinishClosing
void VROSC::AnimatedPanel::FinishClosing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedPanel::FinishClosing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishClosing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AnimatedPanel.OnDisable
void VROSC::AnimatedPanel::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedPanel::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.DrawRectTransform
#include "VROSC/DrawRectTransform.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform _rectTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& VROSC::DrawRectTransform::dyn__rectTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::DrawRectTransform::dyn__rectTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rectTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.DrawRectTransform.OnDrawGizmos
void VROSC::DrawRectTransform::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::DrawRectTransform::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.MatchOtherRectTransform
#include "VROSC/MatchOtherRectTransform.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform _other
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& VROSC::MatchOtherRectTransform::dyn__other() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MatchOtherRectTransform::dyn__other");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_other"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform _rectTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& VROSC::MatchOtherRectTransform::dyn__rectTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MatchOtherRectTransform::dyn__rectTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rectTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _valid
[[deprecated("Use field access instead!")]] bool& VROSC::MatchOtherRectTransform::dyn__valid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MatchOtherRectTransform::dyn__valid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_valid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastHeight
[[deprecated("Use field access instead!")]] float& VROSC::MatchOtherRectTransform::dyn__lastHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MatchOtherRectTransform::dyn__lastHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastWidth
[[deprecated("Use field access instead!")]] float& VROSC::MatchOtherRectTransform::dyn__lastWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MatchOtherRectTransform::dyn__lastWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.MatchOtherRectTransform.LateUpdate
void VROSC::MatchOtherRectTransform::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MatchOtherRectTransform::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MatchOtherRectTransform.GetValues
void VROSC::MatchOtherRectTransform::GetValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MatchOtherRectTransform::GetValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MatchOtherRectTransform.UpdateSize
void VROSC::MatchOtherRectTransform::UpdateSize(bool force) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MatchOtherRectTransform::UpdateSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, force);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.SimpleAppearObject
#include "VROSC/SimpleAppearObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _size
[[deprecated("Use field access instead!")]] float& VROSC::SimpleAppearObject::dyn__size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SimpleAppearObject::dyn__size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_size"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _scaleEffect
[[deprecated("Use field access instead!")]] bool& VROSC::SimpleAppearObject::dyn__scaleEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SimpleAppearObject::dyn__scaleEffect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scaleEffect"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _originalScale
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& VROSC::SimpleAppearObject::dyn__originalScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SimpleAppearObject::dyn__originalScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_originalScale"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setupDone
[[deprecated("Use field access instead!")]] bool& VROSC::SimpleAppearObject::dyn__setupDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SimpleAppearObject::dyn__setupDone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setupDone"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.SimpleAppearObject.get_Size
float VROSC::SimpleAppearObject::get_Size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SimpleAppearObject::get_Size");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Size", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.SimpleAppearObject.Setup
void VROSC::SimpleAppearObject::Setup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SimpleAppearObject::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.SimpleAppearObject.UpdateAppearance
void VROSC::SimpleAppearObject::UpdateAppearance(float amount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SimpleAppearObject::UpdateAppearance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateAppearance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(amount)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, amount);
}
// Autogenerated method: VROSC.SimpleAppearObject.OnDrawGizmosSelected
void VROSC::SimpleAppearObject::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SimpleAppearObject::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.TimelinePlaybackHelper
#include "VROSC/TimelinePlaybackHelper.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Playables.PlayableAsset
#include "UnityEngine/Playables/PlayableAsset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsPlaying>k__BackingField
[[deprecated("Use field access instead!")]] bool& VROSC::TimelinePlaybackHelper::dyn_$IsPlaying$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TimelinePlaybackHelper::dyn_$IsPlaying$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsPlaying>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double _endTime
[[deprecated("Use field access instead!")]] double& VROSC::TimelinePlaybackHelper::dyn__endTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TimelinePlaybackHelper::dyn__endTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_endTime"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double _startTime
[[deprecated("Use field access instead!")]] double& VROSC::TimelinePlaybackHelper::dyn__startTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TimelinePlaybackHelper::dyn__startTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startTime"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action OnEnd
[[deprecated("Use field access instead!")]] ::System::Action*& VROSC::TimelinePlaybackHelper::dyn_OnEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TimelinePlaybackHelper::dyn_OnEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnEnd"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.TimelinePlaybackHelper.get_IsPlaying
bool VROSC::TimelinePlaybackHelper::get_IsPlaying() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TimelinePlaybackHelper::get_IsPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.TimelinePlaybackHelper.set_IsPlaying
void VROSC::TimelinePlaybackHelper::set_IsPlaying(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TimelinePlaybackHelper::set_IsPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.TimelinePlaybackHelper.Update
void VROSC::TimelinePlaybackHelper::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TimelinePlaybackHelper::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.TimelinePlaybackHelper.Start
void VROSC::TimelinePlaybackHelper::Start(::UnityEngine::Playables::PlayableAsset* playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TimelinePlaybackHelper::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playable);
}
// Autogenerated method: VROSC.TimelinePlaybackHelper.Stop
void VROSC::TimelinePlaybackHelper::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TimelinePlaybackHelper::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.IconMesh
#include "VROSC/IconMesh.hpp"
// Including type: VROSC.UI.IconData
#include "VROSC/UI/IconData.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: VROSC.AnimatedAppear/VROSC.Mode
#include "VROSC/AnimatedAppear_Mode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.UI.IconData _data
[[deprecated("Use field access instead!")]] ::VROSC::UI::IconData*& VROSC::IconMesh::dyn__data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::IconMesh::dyn__data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_data"))->offset;
  return *reinterpret_cast<::VROSC::UI::IconData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _alwaysUpdate
[[deprecated("Use field access instead!")]] bool& VROSC::IconMesh::dyn__alwaysUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::IconMesh::dyn__alwaysUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alwaysUpdate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _scale
[[deprecated("Use field access instead!")]] float& VROSC::IconMesh::dyn__scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::IconMesh::dyn__scale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastHeight
[[deprecated("Use field access instead!")]] float& VROSC::IconMesh::dyn__lastHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::IconMesh::dyn__lastHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastWidth
[[deprecated("Use field access instead!")]] float& VROSC::IconMesh::dyn__lastWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::IconMesh::dyn__lastWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.IconMesh.SetIcon
void VROSC::IconMesh::SetIcon(::VROSC::UI::IconData* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::IconMesh::SetIcon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIcon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: VROSC.IconMesh.UpdateMesh
void VROSC::IconMesh::UpdateMesh(bool force) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::IconMesh::UpdateMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, force);
}
// Autogenerated method: VROSC.IconMesh.SetMeshSize
void VROSC::IconMesh::SetMeshSize(::UnityEngine::Rect rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::IconMesh::SetMeshSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMeshSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rect)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rect);
}
// Autogenerated method: VROSC.IconMesh.Update
void VROSC::IconMesh::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::IconMesh::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.IconMesh.OnDrawGizmos
void VROSC::IconMesh::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::IconMesh::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.IconMesh.get_Original
::UnityEngine::Mesh* VROSC::IconMesh::get_Original() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::IconMesh::get_Original");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMesh*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.IconMesh.OnEnable
void VROSC::IconMesh::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::IconMesh::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMesh*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.IconMesh.LoadMesh
void VROSC::IconMesh::LoadMesh(bool force) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::IconMesh::LoadMesh");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMesh*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, force);
}
// Autogenerated method: VROSC.IconMesh.UpdateMeshAppearance
void VROSC::IconMesh::UpdateMeshAppearance(float appearAmount, ::VROSC::AnimatedAppear::Mode mode, bool useFlash) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::IconMesh::UpdateMeshAppearance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMesh*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, appearAmount, mode, useFlash);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.ProceduralAdjustableMesh
#include "VROSC/ProceduralAdjustableMesh.hpp"
// Including type: VROSC.UI.Meshes.ProceduralMeshData
#include "VROSC/UI/Meshes/ProceduralMeshData.hpp"
// Including type: VROSC.AnimatedAppear/VROSC.Mode
#include "VROSC/AnimatedAppear_Mode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.UI.Meshes.ProceduralMeshData _data
[[deprecated("Use field access instead!")]] ::VROSC::UI::Meshes::ProceduralMeshData*& VROSC::ProceduralAdjustableMesh::dyn__data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ProceduralAdjustableMesh::dyn__data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_data"))->offset;
  return *reinterpret_cast<::VROSC::UI::Meshes::ProceduralMeshData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single _depth
[[deprecated("Use field access instead!")]] float& VROSC::ProceduralAdjustableMesh::dyn__depth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ProceduralAdjustableMesh::dyn__depth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_depth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single _border
[[deprecated("Use field access instead!")]] float& VROSC::ProceduralAdjustableMesh::dyn__border() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ProceduralAdjustableMesh::dyn__border");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_border"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _flatMapUv
[[deprecated("Use field access instead!")]] bool& VROSC::ProceduralAdjustableMesh::dyn__flatMapUv() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ProceduralAdjustableMesh::dyn__flatMapUv");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flatMapUv"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _alwaysUpdate
[[deprecated("Use field access instead!")]] bool& VROSC::ProceduralAdjustableMesh::dyn__alwaysUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ProceduralAdjustableMesh::dyn__alwaysUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alwaysUpdate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastHeight
[[deprecated("Use field access instead!")]] float& VROSC::ProceduralAdjustableMesh::dyn__lastHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ProceduralAdjustableMesh::dyn__lastHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastWidth
[[deprecated("Use field access instead!")]] float& VROSC::ProceduralAdjustableMesh::dyn__lastWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ProceduralAdjustableMesh::dyn__lastWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _needsSizeUpdate
[[deprecated("Use field access instead!")]] bool& VROSC::ProceduralAdjustableMesh::dyn__needsSizeUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ProceduralAdjustableMesh::dyn__needsSizeUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_needsSizeUpdate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.ProceduralAdjustableMesh.GetRequiredCompontents
void VROSC::ProceduralAdjustableMesh::GetRequiredCompontents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ProceduralAdjustableMesh::GetRequiredCompontents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRequiredCompontents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ProceduralAdjustableMesh.OnRectTransformDimensionsChange
void VROSC::ProceduralAdjustableMesh::OnRectTransformDimensionsChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ProceduralAdjustableMesh::OnRectTransformDimensionsChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRectTransformDimensionsChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ProceduralAdjustableMesh.UpdateMeshSize
void VROSC::ProceduralAdjustableMesh::UpdateMeshSize(bool force) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ProceduralAdjustableMesh::UpdateMeshSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMeshSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, force);
}
// Autogenerated method: VROSC.ProceduralAdjustableMesh.LateUpdate
void VROSC::ProceduralAdjustableMesh::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ProceduralAdjustableMesh::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ProceduralAdjustableMesh.FlatMap
void VROSC::ProceduralAdjustableMesh::FlatMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ProceduralAdjustableMesh::FlatMap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlatMap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ProceduralAdjustableMesh.OnDrawGizmos
void VROSC::ProceduralAdjustableMesh::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ProceduralAdjustableMesh::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ProceduralAdjustableMesh.OnEnable
void VROSC::ProceduralAdjustableMesh::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ProceduralAdjustableMesh::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMesh*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ProceduralAdjustableMesh.LoadMesh
void VROSC::ProceduralAdjustableMesh::LoadMesh(bool force) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ProceduralAdjustableMesh::LoadMesh");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMesh*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, force);
}
// Autogenerated method: VROSC.ProceduralAdjustableMesh.UpdateMeshAppearance
void VROSC::ProceduralAdjustableMesh::UpdateMeshAppearance(float appearAmount, ::VROSC::AnimatedAppear::Mode mode, bool useFlash) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ProceduralAdjustableMesh::UpdateMeshAppearance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMesh*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, appearAmount, mode, useFlash);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AdjustableMeshColors
#include "VROSC/AdjustableMeshColors.hpp"
// Including type: VROSC.AdjustableMesh
#include "VROSC/AdjustableMesh.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected VROSC.AdjustableMesh _adjustableMesh
[[deprecated("Use field access instead!")]] ::VROSC::AdjustableMesh*& VROSC::AdjustableMeshColors::dyn__adjustableMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColors::dyn__adjustableMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_adjustableMesh"))->offset;
  return *reinterpret_cast<::VROSC::AdjustableMesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<UnityEngine.Color> OnColorChange
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Color>*& VROSC::AdjustableMeshColors::dyn_OnColorChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColors::dyn_OnColorChange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnColorChange"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::Color>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AdjustableMeshColors.SetColor
void VROSC::AdjustableMeshColors::SetColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColors::SetColor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMeshColors*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: VROSC.AdjustableMeshColors.Tint
void VROSC::AdjustableMeshColors::Tint(::UnityEngine::Color color, float amount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColors::Tint");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMeshColors*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color, amount);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AdjustableMeshColor16bits
#include "VROSC/AdjustableMeshColor16bits.hpp"
// Including type: VROSC.AdjustableMesh
#include "VROSC/AdjustableMesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color[] _colors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& VROSC::AdjustableMeshColor16bits::dyn__colors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColor16bits::dyn__colors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Color>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color[] _originalColors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& VROSC::AdjustableMeshColor16bits::dyn__originalColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColor16bits::dyn__originalColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_originalColors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Color>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color[] _adjustedColors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& VROSC::AdjustableMeshColor16bits::dyn__adjustedColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColor16bits::dyn__adjustedColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_adjustedColors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Color>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color[] _shownColors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& VROSC::AdjustableMeshColor16bits::dyn__shownColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColor16bits::dyn__shownColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shownColors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Color>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _multiplyValue
[[deprecated("Use field access instead!")]] float& VROSC::AdjustableMeshColor16bits::dyn__multiplyValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColor16bits::dyn__multiplyValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplyValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AdjustableMeshColor16bits.CalculateColorMultiplication
void VROSC::AdjustableMeshColor16bits::CalculateColorMultiplication() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColor16bits::CalculateColorMultiplication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateColorMultiplication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.AdjustableMeshColor16bits.SetColor
void VROSC::AdjustableMeshColor16bits::SetColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColor16bits::SetColor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMeshColors*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: VROSC.AdjustableMeshColor16bits.Tint
void VROSC::AdjustableMeshColor16bits::Tint(::UnityEngine::Color color, float amount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColor16bits::Tint");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMeshColors*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color, amount);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AdjustableMeshColors32
#include "VROSC/AdjustableMeshColors32.hpp"
// Including type: VROSC.AdjustableMesh
#include "VROSC/AdjustableMesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color32[] _colors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color32>& VROSC::AdjustableMeshColors32::dyn__colors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColors32::dyn__colors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Color32>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color32[] _originalColors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color32>& VROSC::AdjustableMeshColors32::dyn__originalColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColors32::dyn__originalColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_originalColors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Color32>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color32[] _shownColors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color32>& VROSC::AdjustableMeshColors32::dyn__shownColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColors32::dyn__shownColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shownColors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Color32>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AdjustableMeshColors32.SetColor
void VROSC::AdjustableMeshColors32::SetColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColors32::SetColor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMeshColors*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: VROSC.AdjustableMeshColors32.Tint
void VROSC::AdjustableMeshColors32::Tint(::UnityEngine::Color color, float amount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColors32::Tint");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMeshColors*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color, amount);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AdjustableMeshUvs
#include "VROSC/AdjustableMeshUvs.hpp"
// Including type: VROSC.AdjustableMesh
#include "VROSC/AdjustableMesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.AdjustableMeshUvs/VROSC.Channel _channel
[[deprecated("Use field access instead!")]] ::VROSC::AdjustableMeshUvs::Channel& VROSC::AdjustableMeshUvs::dyn__channel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshUvs::dyn__channel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_channel"))->offset;
  return *reinterpret_cast<::VROSC::AdjustableMeshUvs::Channel*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.AdjustableMesh _adjustableMesh
[[deprecated("Use field access instead!")]] ::VROSC::AdjustableMesh*& VROSC::AdjustableMeshUvs::dyn__adjustableMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshUvs::dyn__adjustableMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_adjustableMesh"))->offset;
  return *reinterpret_cast<::VROSC::AdjustableMesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2[] _originalUv
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& VROSC::AdjustableMeshUvs::dyn__originalUv() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshUvs::dyn__originalUv");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_originalUv"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector2>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2[] _uv
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& VROSC::AdjustableMeshUvs::dyn__uv() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshUvs::dyn__uv");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_uv"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector2>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AdjustableMeshUvs.SetOriginalUV
void VROSC::AdjustableMeshUvs::SetOriginalUV(::ArrayW<::UnityEngine::Vector2> uv) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshUvs::SetOriginalUV");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOriginalUV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uv)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, uv);
}
// Autogenerated method: VROSC.AdjustableMeshUvs.OffsetUv
void VROSC::AdjustableMeshUvs::OffsetUv(::UnityEngine::Vector2 offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshUvs::OffsetUv");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OffsetUv", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, offset);
}
// Autogenerated method: VROSC.AdjustableMeshUvs.SetAllUVs
void VROSC::AdjustableMeshUvs::SetAllUVs(::UnityEngine::Vector2 uv) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshUvs::SetAllUVs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetAllUVs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uv)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, uv);
}
// Autogenerated method: VROSC.AdjustableMeshUvs.SetUVs
void VROSC::AdjustableMeshUvs::SetUVs(::ArrayW<::UnityEngine::Vector2> uv) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshUvs::SetUVs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUVs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uv)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, uv);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AdjustableMeshUvs/VROSC.Channel
#include "VROSC/AdjustableMeshUvs.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv1
::VROSC::AdjustableMeshUvs::Channel VROSC::AdjustableMeshUvs::Channel::_get_Uv1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshUvs::Channel::_get_Uv1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::AdjustableMeshUvs::Channel>("VROSC", "AdjustableMeshUvs/Channel", "Uv1"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv1
void VROSC::AdjustableMeshUvs::Channel::_set_Uv1(::VROSC::AdjustableMeshUvs::Channel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshUvs::Channel::_set_Uv1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "AdjustableMeshUvs/Channel", "Uv1", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv2
::VROSC::AdjustableMeshUvs::Channel VROSC::AdjustableMeshUvs::Channel::_get_Uv2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshUvs::Channel::_get_Uv2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::AdjustableMeshUvs::Channel>("VROSC", "AdjustableMeshUvs/Channel", "Uv2"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv2
void VROSC::AdjustableMeshUvs::Channel::_set_Uv2(::VROSC::AdjustableMeshUvs::Channel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshUvs::Channel::_set_Uv2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "AdjustableMeshUvs/Channel", "Uv2", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv3
::VROSC::AdjustableMeshUvs::Channel VROSC::AdjustableMeshUvs::Channel::_get_Uv3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshUvs::Channel::_get_Uv3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::AdjustableMeshUvs::Channel>("VROSC", "AdjustableMeshUvs/Channel", "Uv3"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv3
void VROSC::AdjustableMeshUvs::Channel::_set_Uv3(::VROSC::AdjustableMeshUvs::Channel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshUvs::Channel::_set_Uv3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "AdjustableMeshUvs/Channel", "Uv3", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv4
::VROSC::AdjustableMeshUvs::Channel VROSC::AdjustableMeshUvs::Channel::_get_Uv4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshUvs::Channel::_get_Uv4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::AdjustableMeshUvs::Channel>("VROSC", "AdjustableMeshUvs/Channel", "Uv4"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv4
void VROSC::AdjustableMeshUvs::Channel::_set_Uv4(::VROSC::AdjustableMeshUvs::Channel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshUvs::Channel::_set_Uv4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "AdjustableMeshUvs/Channel", "Uv4", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VROSC::AdjustableMeshUvs::Channel::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshUvs::Channel::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.AdjustableMeshVerts
#include "VROSC/AdjustableMeshVerts.hpp"
// Including type: VROSC.AdjustableMesh
#include "VROSC/AdjustableMesh.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.AdjustableMesh _adjustableMesh
[[deprecated("Use field access instead!")]] ::VROSC::AdjustableMesh*& VROSC::AdjustableMeshVerts::dyn__adjustableMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshVerts::dyn__adjustableMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_adjustableMesh"))->offset;
  return *reinterpret_cast<::VROSC::AdjustableMesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.AdjustableMeshVerts.SetScale
void VROSC::AdjustableMeshVerts::SetScale(::UnityEngine::Vector3 scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshVerts::SetScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scale)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scale);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.InputVisualizer
#include "VROSC/InputVisualizer.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: VROSC.InputDevice
#include "VROSC/InputDevice.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _restingMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& VROSC::InputVisualizer::dyn__restingMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::InputVisualizer::dyn__restingMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_restingMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _activeMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& VROSC::InputVisualizer::dyn__activeMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::InputVisualizer::dyn__activeMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.InputDevice _device
[[deprecated("Use field access instead!")]] ::VROSC::InputDevice*& VROSC::InputVisualizer::dyn__device() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::InputVisualizer::dyn__device");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_device"))->offset;
  return *reinterpret_cast<::VROSC::InputDevice**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer _renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& VROSC::InputVisualizer::dyn__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::InputVisualizer::dyn__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.InputVisualizer.Update
void VROSC::InputVisualizer::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::InputVisualizer::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.InputVisualizer.Setup
void VROSC::InputVisualizer::Setup(::VROSC::InputDevice* device) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::InputVisualizer::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(device)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, device);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.BoardFrameNote
#include "VROSC/BoardFrameNote.hpp"
// Including type: VROSC.Rotator
#include "VROSC/Rotator.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.Rotator _rotator
[[deprecated("Use field access instead!")]] ::VROSC::Rotator*& VROSC::BoardFrameNote::dyn__rotator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameNote::dyn__rotator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotator"))->offset;
  return *reinterpret_cast<::VROSC::Rotator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _restingColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& VROSC::BoardFrameNote::dyn__restingColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameNote::dyn__restingColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_restingColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer _renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& VROSC::BoardFrameNote::dyn__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameNote::dyn__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <Note>k__BackingField
[[deprecated("Use field access instead!")]] int& VROSC::BoardFrameNote::dyn_$Note$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameNote::dyn_$Note$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Note>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MaterialPropertyBlock _propBlock
[[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& VROSC::BoardFrameNote::dyn__propBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameNote::dyn__propBlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_propBlock"))->offset;
  return *reinterpret_cast<::UnityEngine::MaterialPropertyBlock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.BoardFrameNote.get_Note
int VROSC::BoardFrameNote::get_Note() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameNote::get_Note");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Note", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.BoardFrameNote.set_Note
void VROSC::BoardFrameNote::set_Note(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameNote::set_Note");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Note", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.BoardFrameNote.CreateBlock
void VROSC::BoardFrameNote::CreateBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameNote::CreateBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.BoardFrameNote.SetVisible
void VROSC::BoardFrameNote::SetVisible(int note, bool playing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameNote::SetVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(note), ::il2cpp_utils::ExtractType(playing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, note, playing);
}
// Autogenerated method: VROSC.BoardFrameNote.Hide
void VROSC::BoardFrameNote::Hide() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameNote::Hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.BoardFrameNote.SetPlayingColor
void VROSC::BoardFrameNote::SetPlayingColor(::UnityEngine::Vector3 power, float velocity, float highlight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameNote::SetPlayingColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayingColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(power), ::il2cpp_utils::ExtractType(velocity), ::il2cpp_utils::ExtractType(highlight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, power, velocity, highlight);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.BoardFrameVisuals
#include "VROSC/BoardFrameVisuals.hpp"
// Including type: VROSC.MinMaxFloat
#include "VROSC/MinMaxFloat.hpp"
// Including type: VROSC.BoardFrameNote
#include "VROSC/BoardFrameNote.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: VROSC.NoteFieldMonitor
#include "VROSC/NoteFieldMonitor.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.MinMaxFloat _height
[[deprecated("Use field access instead!")]] ::VROSC::MinMaxFloat*& VROSC::BoardFrameVisuals::dyn__height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals::dyn__height");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_height"))->offset;
  return *reinterpret_cast<::VROSC::MinMaxFloat**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _maxOctave
[[deprecated("Use field access instead!")]] int& VROSC::BoardFrameVisuals::dyn__maxOctave() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals::dyn__maxOctave");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxOctave"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _width
[[deprecated("Use field access instead!")]] float& VROSC::BoardFrameVisuals::dyn__width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals::dyn__width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_width"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.BoardFrameNote _notePrefab
[[deprecated("Use field access instead!")]] ::VROSC::BoardFrameNote*& VROSC::BoardFrameVisuals::dyn__notePrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals::dyn__notePrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_notePrefab"))->offset;
  return *reinterpret_cast<::VROSC::BoardFrameNote**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _stringPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& VROSC::BoardFrameVisuals::dyn__stringPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals::dyn__stringPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stringPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteFieldMonitor _monitor
[[deprecated("Use field access instead!")]] ::VROSC::NoteFieldMonitor*& VROSC::BoardFrameVisuals::dyn__monitor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals::dyn__monitor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_monitor"))->offset;
  return *reinterpret_cast<::VROSC::NoteFieldMonitor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.BoardFrameNote[] _notes
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::BoardFrameNote*>& VROSC::BoardFrameVisuals::dyn__notes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals::dyn__notes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_notes"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::BoardFrameNote*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.BoardFrameVisuals.Start
void VROSC::BoardFrameVisuals::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.BoardFrameVisuals.CreateStrings
void VROSC::BoardFrameVisuals::CreateStrings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals::CreateStrings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateStrings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.BoardFrameVisuals.Update
void VROSC::BoardFrameVisuals::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.BoardFrameVisuals.GetPositionByNote
::UnityEngine::Vector2 VROSC::BoardFrameVisuals::GetPositionByNote(int note) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals::GetPositionByNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPositionByNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(note)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, note);
}
// Autogenerated method: VROSC.BoardFrameVisuals.OnDrawGizmosSelected
void VROSC::BoardFrameVisuals::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.BoardFrameVisuals2
#include "VROSC/BoardFrameVisuals2.hpp"
// Including type: VROSC.NoteFieldMonitor
#include "VROSC/NoteFieldMonitor.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 _FlowX
int VROSC::BoardFrameVisuals2::_get__FlowX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals2::_get__FlowX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("VROSC", "BoardFrameVisuals2", "_FlowX"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 _FlowX
void VROSC::BoardFrameVisuals2::_set__FlowX(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals2::_set__FlowX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "BoardFrameVisuals2", "_FlowX", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 _FlowY
int VROSC::BoardFrameVisuals2::_get__FlowY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals2::_get__FlowY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("VROSC", "BoardFrameVisuals2", "_FlowY"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 _FlowY
void VROSC::BoardFrameVisuals2::_set__FlowY(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals2::_set__FlowY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "BoardFrameVisuals2", "_FlowY", value));
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteFieldMonitor _monitor
[[deprecated("Use field access instead!")]] ::VROSC::NoteFieldMonitor*& VROSC::BoardFrameVisuals2::dyn__monitor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals2::dyn__monitor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_monitor"))->offset;
  return *reinterpret_cast<::VROSC::NoteFieldMonitor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer _renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& VROSC::BoardFrameVisuals2::dyn__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals2::dyn__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _speed
[[deprecated("Use field access instead!")]] float& VROSC::BoardFrameVisuals2::dyn__speed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals2::dyn__speed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_speed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color[,] _flowColors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& VROSC::BoardFrameVisuals2::dyn__flowColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals2::dyn__flowColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flowColors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Color>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastFlowMove
[[deprecated("Use field access instead!")]] float& VROSC::BoardFrameVisuals2::dyn__lastFlowMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals2::dyn__lastFlowMove");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastFlowMove"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4[] _flowAsVectorsCached
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& VROSC::BoardFrameVisuals2::dyn__flowAsVectorsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals2::dyn__flowAsVectorsCached");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flowAsVectorsCached"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color[] _currentFlowColors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& VROSC::BoardFrameVisuals2::dyn__currentFlowColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals2::dyn__currentFlowColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentFlowColors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Color>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] _x
[[deprecated("Use field access instead!")]] ::ArrayW<float>& VROSC::BoardFrameVisuals2::dyn__x() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals2::dyn__x");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_x"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] _z
[[deprecated("Use field access instead!")]] ::ArrayW<float>& VROSC::BoardFrameVisuals2::dyn__z() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals2::dyn__z");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_z"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.BoardFrameVisuals2.Start
void VROSC::BoardFrameVisuals2::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals2::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.BoardFrameVisuals2.Update
void VROSC::BoardFrameVisuals2::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals2::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.BoardFrameVisuals2.MoveFlowColors
void VROSC::BoardFrameVisuals2::MoveFlowColors(::ArrayW<::UnityEngine::Color> colors) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals2::MoveFlowColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveFlowColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colors)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, colors);
}
// Autogenerated method: VROSC.BoardFrameVisuals2.UpdateRenderer
void VROSC::BoardFrameVisuals2::UpdateRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals2::UpdateRenderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRenderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.BoardFrameVisuals2.UpdateFlowColors
void VROSC::BoardFrameVisuals2::UpdateFlowColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BoardFrameVisuals2::UpdateFlowColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFlowColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.ClustrFrameString
#include "VROSC/ClustrFrameString.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _restingColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& VROSC::ClustrFrameString::dyn__restingColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameString::dyn__restingColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_restingColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer _renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& VROSC::ClustrFrameString::dyn__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameString::dyn__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <Note>k__BackingField
[[deprecated("Use field access instead!")]] int& VROSC::ClustrFrameString::dyn_$Note$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameString::dyn_$Note$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Note>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MaterialPropertyBlock _propBlock
[[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& VROSC::ClustrFrameString::dyn__propBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameString::dyn__propBlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_propBlock"))->offset;
  return *reinterpret_cast<::UnityEngine::MaterialPropertyBlock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.ClustrFrameString.get_Note
int VROSC::ClustrFrameString::get_Note() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameString::get_Note");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Note", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ClustrFrameString.set_Note
void VROSC::ClustrFrameString::set_Note(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameString::set_Note");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Note", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.ClustrFrameString.CreateBlock
void VROSC::ClustrFrameString::CreateBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameString::CreateBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ClustrFrameString.SetVisible
void VROSC::ClustrFrameString::SetVisible(int note) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameString::SetVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(note)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, note);
}
// Autogenerated method: VROSC.ClustrFrameString.Hide
void VROSC::ClustrFrameString::Hide() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameString::Hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ClustrFrameString.SetPlayingColor
void VROSC::ClustrFrameString::SetPlayingColor(::UnityEngine::Vector3 power, float velocity, float highlight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameString::SetPlayingColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayingColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(power), ::il2cpp_utils::ExtractType(velocity), ::il2cpp_utils::ExtractType(highlight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, power, velocity, highlight);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.ClustrFrameVisuals
#include "VROSC/ClustrFrameVisuals.hpp"
// Including type: VROSC.MinMaxFloat
#include "VROSC/MinMaxFloat.hpp"
// Including type: VROSC.ClustrFrameString
#include "VROSC/ClustrFrameString.hpp"
// Including type: VROSC.NoteFieldMonitor
#include "VROSC/NoteFieldMonitor.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.MinMaxFloat _height
[[deprecated("Use field access instead!")]] ::VROSC::MinMaxFloat*& VROSC::ClustrFrameVisuals::dyn__height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameVisuals::dyn__height");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_height"))->offset;
  return *reinterpret_cast<::VROSC::MinMaxFloat**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.MinMaxFloat _width
[[deprecated("Use field access instead!")]] ::VROSC::MinMaxFloat*& VROSC::ClustrFrameVisuals::dyn__width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameVisuals::dyn__width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_width"))->offset;
  return *reinterpret_cast<::VROSC::MinMaxFloat**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.ClustrFrameString _clustrStringPrefab
[[deprecated("Use field access instead!")]] ::VROSC::ClustrFrameString*& VROSC::ClustrFrameVisuals::dyn__clustrStringPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameVisuals::dyn__clustrStringPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_clustrStringPrefab"))->offset;
  return *reinterpret_cast<::VROSC::ClustrFrameString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteFieldMonitor _monitor
[[deprecated("Use field access instead!")]] ::VROSC::NoteFieldMonitor*& VROSC::ClustrFrameVisuals::dyn__monitor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameVisuals::dyn__monitor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_monitor"))->offset;
  return *reinterpret_cast<::VROSC::NoteFieldMonitor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.ClustrFrameString[] _strings
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::ClustrFrameString*>& VROSC::ClustrFrameVisuals::dyn__strings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameVisuals::dyn__strings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_strings"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::ClustrFrameString*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.ClustrFrameVisuals.Start
void VROSC::ClustrFrameVisuals::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameVisuals::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ClustrFrameVisuals.OnDisable
void VROSC::ClustrFrameVisuals::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameVisuals::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ClustrFrameVisuals.Update
void VROSC::ClustrFrameVisuals::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameVisuals::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ClustrFrameVisuals.GetAngleByNote
::UnityEngine::Vector2 VROSC::ClustrFrameVisuals::GetAngleByNote(int note) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameVisuals::GetAngleByNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAngleByNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(note)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, note);
}
// Autogenerated method: VROSC.ClustrFrameVisuals.OnDrawGizmosSelected
void VROSC::ClustrFrameVisuals::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClustrFrameVisuals::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.FrameVisuals
#include "VROSC/FrameVisuals.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.MaterialPropertyBlock _propBlock
[[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& VROSC::FrameVisuals::dyn__propBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::FrameVisuals::dyn__propBlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_propBlock"))->offset;
  return *reinterpret_cast<::UnityEngine::MaterialPropertyBlock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single _createdAmount
[[deprecated("Use field access instead!")]] float& VROSC::FrameVisuals::dyn__createdAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::FrameVisuals::dyn__createdAmount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_createdAmount"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.FrameVisuals.CreateBlock
void VROSC::FrameVisuals::CreateBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::FrameVisuals::CreateBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.FrameVisuals.UpdateCreationAmount
void VROSC::FrameVisuals::UpdateCreationAmount(float createdAmount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::FrameVisuals::UpdateCreationAmount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCreationAmount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(createdAmount)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, createdAmount);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.HarpFrameVisuals
#include "VROSC/HarpFrameVisuals.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: VROSC.NoteBoardNoteController
#include "VROSC/NoteBoardNoteController.hpp"
// Including type: VROSC.NoteFieldData
#include "VROSC/NoteFieldData.hpp"
// Including type: VROSC.NoteFieldParameters
#include "VROSC/NoteFieldParameters.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 _FlowX
int VROSC::HarpFrameVisuals::_get__FlowX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::_get__FlowX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("VROSC", "HarpFrameVisuals", "_FlowX"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 _FlowX
void VROSC::HarpFrameVisuals::_set__FlowX(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::_set__FlowX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "HarpFrameVisuals", "_FlowX", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 _FlowY
int VROSC::HarpFrameVisuals::_get__FlowY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::_get__FlowY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("VROSC", "HarpFrameVisuals", "_FlowY"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 _FlowY
void VROSC::HarpFrameVisuals::_set__FlowY(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::_set__FlowY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "HarpFrameVisuals", "_FlowY", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _xColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& VROSC::HarpFrameVisuals::dyn__xColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::dyn__xColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_xColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _zColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& VROSC::HarpFrameVisuals::dyn__zColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::dyn__zColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _scaleWithVelocity
[[deprecated("Use field access instead!")]] bool& VROSC::HarpFrameVisuals::dyn__scaleWithVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::dyn__scaleWithVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scaleWithVelocity"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer _renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& VROSC::HarpFrameVisuals::dyn__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::dyn__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer[] _fractures
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Renderer*>& VROSC::HarpFrameVisuals::dyn__fractures() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::dyn__fractures");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fractures"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Renderer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _speed
[[deprecated("Use field access instead!")]] float& VROSC::HarpFrameVisuals::dyn__speed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::dyn__speed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_speed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNoteController _noteBoardNoteController
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNoteController*& VROSC::HarpFrameVisuals::dyn__noteBoardNoteController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::dyn__noteBoardNoteController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteBoardNoteController"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoardNoteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color[,] _flowColors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& VROSC::HarpFrameVisuals::dyn__flowColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::dyn__flowColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flowColors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Color>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastFlowMove
[[deprecated("Use field access instead!")]] float& VROSC::HarpFrameVisuals::dyn__lastFlowMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::dyn__lastFlowMove");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastFlowMove"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _noteCount
[[deprecated("Use field access instead!")]] int& VROSC::HarpFrameVisuals::dyn__noteCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::dyn__noteCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4[] _playingCached
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& VROSC::HarpFrameVisuals::dyn__playingCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::dyn__playingCached");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playingCached"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4[] _flowAsVectorsCached
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& VROSC::HarpFrameVisuals::dyn__flowAsVectorsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::dyn__flowAsVectorsCached");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flowAsVectorsCached"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color[] _stringColors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& VROSC::HarpFrameVisuals::dyn__stringColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::dyn__stringColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stringColors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Color>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color[] _currentFlowColors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& VROSC::HarpFrameVisuals::dyn__currentFlowColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::dyn__currentFlowColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentFlowColors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Color>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] _x
[[deprecated("Use field access instead!")]] ::ArrayW<float>& VROSC::HarpFrameVisuals::dyn__x() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::dyn__x");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_x"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] _z
[[deprecated("Use field access instead!")]] ::ArrayW<float>& VROSC::HarpFrameVisuals::dyn__z() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::dyn__z");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_z"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.HarpFrameVisuals.Awake
void VROSC::HarpFrameVisuals::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.HarpFrameVisuals.UpdateCount
void VROSC::HarpFrameVisuals::UpdateCount(::VROSC::NoteFieldData* data, ::VROSC::NoteFieldParameters* noteFieldParameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::UpdateCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(noteFieldParameters)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, noteFieldParameters);
}
// Autogenerated method: VROSC.HarpFrameVisuals.Update
void VROSC::HarpFrameVisuals::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.HarpFrameVisuals.MoveFlowColors
void VROSC::HarpFrameVisuals::MoveFlowColors(::ArrayW<::UnityEngine::Color> colors) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::MoveFlowColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveFlowColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colors)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, colors);
}
// Autogenerated method: VROSC.HarpFrameVisuals.UpdateRenderer
void VROSC::HarpFrameVisuals::UpdateRenderer(::ArrayW<::UnityEngine::Color> stringColors) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::UpdateRenderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRenderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stringColors)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stringColors);
}
// Autogenerated method: VROSC.HarpFrameVisuals.UpdateFlowColors
void VROSC::HarpFrameVisuals::UpdateFlowColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::UpdateFlowColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFlowColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.HarpFrameVisuals.UpdatePlayingColors
void VROSC::HarpFrameVisuals::UpdatePlayingColors(::ArrayW<::UnityEngine::Color> colors) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HarpFrameVisuals::UpdatePlayingColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePlayingColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colors)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, colors);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.OorganFramePipeRow
#include "VROSC/OorganFramePipeRow.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.OorganFrameVisuals
#include "VROSC/OorganFrameVisuals.hpp"
// Including type: VROSC.MinMaxFloat
#include "VROSC/MinMaxFloat.hpp"
// Including type: VROSC.ClustrFrameString
#include "VROSC/ClustrFrameString.hpp"
// Including type: VROSC.NoteFieldMonitor
#include "VROSC/NoteFieldMonitor.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.MinMaxFloat _height
[[deprecated("Use field access instead!")]] ::VROSC::MinMaxFloat*& VROSC::OorganFrameVisuals::dyn__height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OorganFrameVisuals::dyn__height");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_height"))->offset;
  return *reinterpret_cast<::VROSC::MinMaxFloat**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.MinMaxFloat _width
[[deprecated("Use field access instead!")]] ::VROSC::MinMaxFloat*& VROSC::OorganFrameVisuals::dyn__width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OorganFrameVisuals::dyn__width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_width"))->offset;
  return *reinterpret_cast<::VROSC::MinMaxFloat**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.ClustrFrameString _clustrStringPrefab
[[deprecated("Use field access instead!")]] ::VROSC::ClustrFrameString*& VROSC::OorganFrameVisuals::dyn__clustrStringPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OorganFrameVisuals::dyn__clustrStringPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_clustrStringPrefab"))->offset;
  return *reinterpret_cast<::VROSC::ClustrFrameString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteFieldMonitor _monitor
[[deprecated("Use field access instead!")]] ::VROSC::NoteFieldMonitor*& VROSC::OorganFrameVisuals::dyn__monitor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OorganFrameVisuals::dyn__monitor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_monitor"))->offset;
  return *reinterpret_cast<::VROSC::NoteFieldMonitor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.ClustrFrameString[] _strings
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::ClustrFrameString*>& VROSC::OorganFrameVisuals::dyn__strings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OorganFrameVisuals::dyn__strings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_strings"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::ClustrFrameString*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.OorganFrameVisuals.Start
void VROSC::OorganFrameVisuals::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OorganFrameVisuals::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.OorganFrameVisuals.Update
void VROSC::OorganFrameVisuals::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OorganFrameVisuals::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.OorganFrameVisuals.GetAngleByNote
::UnityEngine::Vector2 VROSC::OorganFrameVisuals::GetAngleByNote(int note) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OorganFrameVisuals::GetAngleByNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAngleByNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(note)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, note);
}
// Autogenerated method: VROSC.OorganFrameVisuals.OnDrawGizmosSelected
void VROSC::OorganFrameVisuals::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OorganFrameVisuals::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.OrganPipe
#include "VROSC/OrganPipe.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <Note>k__BackingField
[[deprecated("Use field access instead!")]] int& VROSC::OrganPipe::dyn_$Note$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::dyn_$Note$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Note>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _height
[[deprecated("Use field access instead!")]] float& VROSC::OrganPipe::dyn__height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::dyn__height");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_height"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _diameter
[[deprecated("Use field access instead!")]] float& VROSC::OrganPipe::dyn__diameter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::dyn__diameter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_diameter"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _appear
[[deprecated("Use field access instead!")]] float& VROSC::OrganPipe::dyn__appear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::dyn__appear");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_appear"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer _renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& VROSC::OrganPipe::dyn__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::dyn__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fallSpeed
[[deprecated("Use field access instead!")]] float& VROSC::OrganPipe::dyn__fallSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::dyn__fallSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fallSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _playAmount
[[deprecated("Use field access instead!")]] float& VROSC::OrganPipe::dyn__playAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::dyn__playAmount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playAmount"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _offColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& VROSC::OrganPipe::dyn__offColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::dyn__offColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_offColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4 _playingColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& VROSC::OrganPipe::dyn__playingColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::dyn__playingColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playingColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MaterialPropertyBlock _propBlock
[[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& VROSC::OrganPipe::dyn__propBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::dyn__propBlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_propBlock"))->offset;
  return *reinterpret_cast<::UnityEngine::MaterialPropertyBlock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.OrganPipe.get_Note
int VROSC::OrganPipe::get_Note() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::get_Note");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Note", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.OrganPipe.set_Note
void VROSC::OrganPipe::set_Note(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::set_Note");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Note", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.OrganPipe.SetColor
void VROSC::OrganPipe::SetColor(::UnityEngine::Color offColor, ::UnityEngine::Color playingColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offColor), ::il2cpp_utils::ExtractType(playingColor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, offColor, playingColor);
}
// Autogenerated method: VROSC.OrganPipe.UpdateSize
void VROSC::OrganPipe::UpdateSize(float diameter, float height) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::UpdateSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(diameter), ::il2cpp_utils::ExtractType(height)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, diameter, height);
}
// Autogenerated method: VROSC.OrganPipe.Animate
void VROSC::OrganPipe::Animate(float appear) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::Animate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Animate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(appear)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, appear);
}
// Autogenerated method: VROSC.OrganPipe.CreateBlock
void VROSC::OrganPipe::CreateBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::CreateBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.OrganPipe.SetPlaying
void VROSC::OrganPipe::SetPlaying(bool playing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::SetPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playing);
}
// Autogenerated method: VROSC.OrganPipe.LateUpdate
void VROSC::OrganPipe::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.OrganPipe.UpdateShader
void VROSC::OrganPipe::UpdateShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::UpdateShader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateShader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.OrganPipe.OnDrawGizmos
void VROSC::OrganPipe::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.OrganPipe.SetNote
void VROSC::OrganPipe::SetNote(int note) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::SetNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(note)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, note);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.OrganPipeRow
#include "VROSC/OrganPipeRow.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: VROSC.NoteBoardNoteController
#include "VROSC/NoteBoardNoteController.hpp"
// Including type: VROSC.SynthController
#include "VROSC/SynthController.hpp"
// Including type: VROSC.OrganPipe
#include "VROSC/OrganPipe.hpp"
// Including type: VROSC.NoteFieldMonitor
#include "VROSC/NoteFieldMonitor.hpp"
// Including type: VROSC.MinMaxFloat
#include "VROSC/MinMaxFloat.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: VROSC.NoteFieldData
#include "VROSC/NoteFieldData.hpp"
// Including type: VROSC.NoteFieldParameters
#include "VROSC/NoteFieldParameters.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNoteController _controller
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNoteController*& VROSC::OrganPipeRow::dyn__controller() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn__controller");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_controller"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoardNoteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.SynthController _instrument
[[deprecated("Use field access instead!")]] ::VROSC::SynthController*& VROSC::OrganPipeRow::dyn__instrument() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn__instrument");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_instrument"))->offset;
  return *reinterpret_cast<::VROSC::SynthController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.OrganPipe _pipePrefab
[[deprecated("Use field access instead!")]] ::VROSC::OrganPipe*& VROSC::OrganPipeRow::dyn__pipePrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn__pipePrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pipePrefab"))->offset;
  return *reinterpret_cast<::VROSC::OrganPipe**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteFieldMonitor _monitor
[[deprecated("Use field access instead!")]] ::VROSC::NoteFieldMonitor*& VROSC::OrganPipeRow::dyn__monitor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn__monitor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_monitor"))->offset;
  return *reinterpret_cast<::VROSC::NoteFieldMonitor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _monitorIndex
[[deprecated("Use field access instead!")]] int& VROSC::OrganPipeRow::dyn__monitorIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn__monitorIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_monitorIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.MinMaxFloat _height
[[deprecated("Use field access instead!")]] ::VROSC::MinMaxFloat*& VROSC::OrganPipeRow::dyn__height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn__height");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_height"))->offset;
  return *reinterpret_cast<::VROSC::MinMaxFloat**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.MinMaxFloat _base
[[deprecated("Use field access instead!")]] ::VROSC::MinMaxFloat*& VROSC::OrganPipeRow::dyn__base() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn__base");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_base"))->offset;
  return *reinterpret_cast<::VROSC::MinMaxFloat**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _heightCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& VROSC::OrganPipeRow::dyn__heightCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn__heightCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_heightCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _baseCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& VROSC::OrganPipeRow::dyn__baseCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn__baseCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_baseCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _diameter
[[deprecated("Use field access instead!")]] float& VROSC::OrganPipeRow::dyn__diameter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn__diameter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_diameter"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _step
[[deprecated("Use field access instead!")]] float& VROSC::OrganPipeRow::dyn__step() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn__step");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_step"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.OrganPipeRow/VROSC.Alignment _alignment
[[deprecated("Use field access instead!")]] ::VROSC::OrganPipeRow::Alignment& VROSC::OrganPipeRow::dyn__alignment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn__alignment");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alignment"))->offset;
  return *reinterpret_cast<::VROSC::OrganPipeRow::Alignment*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.Axis _axis
[[deprecated("Use field access instead!")]] ::VROSC::Axis& VROSC::OrganPipeRow::dyn__axis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn__axis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_axis"))->offset;
  return *reinterpret_cast<::VROSC::Axis*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _offColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& VROSC::OrganPipeRow::dyn__offColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn__offColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_offColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _PlayingColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& VROSC::OrganPipeRow::dyn__PlayingColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn__PlayingColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_PlayingColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _preview
[[deprecated("Use field access instead!")]] int& VROSC::OrganPipeRow::dyn__preview() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn__preview");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_preview"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _octaveAtSetup
[[deprecated("Use field access instead!")]] int& VROSC::OrganPipeRow::dyn__octaveAtSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn__octaveAtSetup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_octaveAtSetup"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setupDone
[[deprecated("Use field access instead!")]] bool& VROSC::OrganPipeRow::dyn__setupDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn__setupDone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setupDone"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<VROSC.OrganPipe> <Pipes>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VROSC::OrganPipe*>*& VROSC::OrganPipeRow::dyn_$Pipes$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::dyn_$Pipes$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Pipes>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::VROSC::OrganPipe*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.OrganPipeRow.get_PreviewPipes
int VROSC::OrganPipeRow::get_PreviewPipes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::get_PreviewPipes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PreviewPipes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.OrganPipeRow.get_Pipes
::System::Collections::Generic::List_1<::VROSC::OrganPipe*>* VROSC::OrganPipeRow::get_Pipes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::get_Pipes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Pipes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::VROSC::OrganPipe*>*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.OrganPipeRow.set_Pipes
void VROSC::OrganPipeRow::set_Pipes(::System::Collections::Generic::List_1<::VROSC::OrganPipe*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::set_Pipes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Pipes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.OrganPipeRow.Awake
void VROSC::OrganPipeRow::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.OrganPipeRow.Setup
void VROSC::OrganPipeRow::Setup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.OrganPipeRow.Update
void VROSC::OrganPipeRow::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.OrganPipeRow.IsPlayingPipe
bool VROSC::OrganPipeRow::IsPlayingPipe(::VROSC::OrganPipe* pipe, int leftNote, int rightNote) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::IsPlayingPipe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPlayingPipe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pipe), ::il2cpp_utils::ExtractType(leftNote), ::il2cpp_utils::ExtractType(rightNote)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pipe, leftNote, rightNote);
}
// Autogenerated method: VROSC.OrganPipeRow.CreatePipes
void VROSC::OrganPipeRow::CreatePipes(int pipeCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::CreatePipes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePipes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pipeCount)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pipeCount);
}
// Autogenerated method: VROSC.OrganPipeRow.UpdatePipes
void VROSC::OrganPipeRow::UpdatePipes(::VROSC::NoteFieldData* data, ::VROSC::NoteFieldParameters* parameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::UpdatePipes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePipes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(parameters)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, parameters);
}
// Autogenerated method: VROSC.OrganPipeRow.GetPosByAlignment
::UnityEngine::Vector3 VROSC::OrganPipeRow::GetPosByAlignment(int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::GetPosByAlignment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPosByAlignment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, index, count);
}
// Autogenerated method: VROSC.OrganPipeRow.GetNoteDataByAxis
int VROSC::OrganPipeRow::GetNoteDataByAxis(::VROSC::NoteFieldData* data, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::GetNoteDataByAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNoteDataByAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, data, index);
}
// Autogenerated method: VROSC.OrganPipeRow.GetAxisCount
int VROSC::OrganPipeRow::GetAxisCount(::VROSC::NoteFieldParameters* parameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::GetAxisCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAxisCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parameters)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, parameters);
}
// Autogenerated method: VROSC.OrganPipeRow.OnDrawGizmos
void VROSC::OrganPipeRow::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.OrganPipeRow.SetFullyDone
void VROSC::OrganPipeRow::SetFullyDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::SetFullyDone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFullyDone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.OrganPipeRow.Clear
void VROSC::OrganPipeRow::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.OrganPipeRow/VROSC.Alignment
#include "VROSC/OrganPipeRow.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VROSC.OrganPipeRow/VROSC.Alignment Center
::VROSC::OrganPipeRow::Alignment VROSC::OrganPipeRow::Alignment::_get_Center() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::Alignment::_get_Center");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::OrganPipeRow::Alignment>("VROSC", "OrganPipeRow/Alignment", "Center"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.OrganPipeRow/VROSC.Alignment Center
void VROSC::OrganPipeRow::Alignment::_set_Center(::VROSC::OrganPipeRow::Alignment value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::Alignment::_set_Center");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "OrganPipeRow/Alignment", "Center", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.OrganPipeRow/VROSC.Alignment Left
::VROSC::OrganPipeRow::Alignment VROSC::OrganPipeRow::Alignment::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::Alignment::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::OrganPipeRow::Alignment>("VROSC", "OrganPipeRow/Alignment", "Left"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.OrganPipeRow/VROSC.Alignment Left
void VROSC::OrganPipeRow::Alignment::_set_Left(::VROSC::OrganPipeRow::Alignment value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::Alignment::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "OrganPipeRow/Alignment", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.OrganPipeRow/VROSC.Alignment Right
::VROSC::OrganPipeRow::Alignment VROSC::OrganPipeRow::Alignment::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::Alignment::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::OrganPipeRow::Alignment>("VROSC", "OrganPipeRow/Alignment", "Right"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.OrganPipeRow/VROSC.Alignment Right
void VROSC::OrganPipeRow::Alignment::_set_Right(::VROSC::OrganPipeRow::Alignment value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::Alignment::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "OrganPipeRow/Alignment", "Right", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VROSC::OrganPipeRow::Alignment::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::Alignment::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteBoardNote
#include "VROSC/NoteBoardNote.hpp"
// Including type: VROSC.NoteBoardNote/VROSC.Coloring
#include "VROSC/NoteBoardNote_Coloring.hpp"
// Including type: VROSC.NoteBoardNoteVisualController
#include "VROSC/NoteBoardNoteVisualController.hpp"
// Including type: VROSC.NoteBoardNoteAnimator
#include "VROSC/NoteBoardNoteAnimator.hpp"
// Including type: VROSC.NoteBoardNoteText
#include "VROSC/NoteBoardNoteText.hpp"
// Including type: VROSC.NoteFieldNoteData
#include "VROSC/NoteFieldNoteData.hpp"
// Including type: VROSC.NoteFieldParameters
#include "VROSC/NoteFieldParameters.hpp"
// Including type: VROSC.PlayData
#include "VROSC/PlayData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNoteVisualController _materialController
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNoteVisualController*& VROSC::NoteBoardNote::dyn__materialController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::dyn__materialController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialController"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoardNoteVisualController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNoteAnimator _animator
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNoteAnimator*& VROSC::NoteBoardNote::dyn__animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::dyn__animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animator"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoardNoteAnimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNoteText _textDisplay
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNoteText*& VROSC::NoteBoardNote::dyn__textDisplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::dyn__textDisplay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textDisplay"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoardNoteText**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteFieldNoteData <Data>k__BackingField
[[deprecated("Use field access instead!")]] ::VROSC::NoteFieldNoteData*& VROSC::NoteBoardNote::dyn_$Data$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::dyn_$Data$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Data>k__BackingField"))->offset;
  return *reinterpret_cast<::VROSC::NoteFieldNoteData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <LocalPositionForAnimation>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& VROSC::NoteBoardNote::dyn_$LocalPositionForAnimation$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::dyn_$LocalPositionForAnimation$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LocalPositionForAnimation>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsPlaying>k__BackingField
[[deprecated("Use field access instead!")]] bool& VROSC::NoteBoardNote::dyn_$IsPlaying$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::dyn_$IsPlaying$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsPlaying>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteBoardNote.get_Animator
::VROSC::NoteBoardNoteAnimator* VROSC::NoteBoardNote::get_Animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::get_Animator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Animator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::NoteBoardNoteAnimator*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNote.get_Visual
::VROSC::NoteBoardNoteVisualController* VROSC::NoteBoardNote::get_Visual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::get_Visual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Visual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::NoteBoardNoteVisualController*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNote.get_TextDisplay
::VROSC::NoteBoardNoteText* VROSC::NoteBoardNote::get_TextDisplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::get_TextDisplay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TextDisplay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::NoteBoardNoteText*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNote.get_Data
::VROSC::NoteFieldNoteData* VROSC::NoteBoardNote::get_Data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::get_Data");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::NoteFieldNoteData*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNote.set_Data
void VROSC::NoteBoardNote::set_Data(::VROSC::NoteFieldNoteData* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::set_Data");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteBoardNote.get_LocalPositionForAnimation
::UnityEngine::Vector3 VROSC::NoteBoardNote::get_LocalPositionForAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::get_LocalPositionForAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LocalPositionForAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNote.set_LocalPositionForAnimation
void VROSC::NoteBoardNote::set_LocalPositionForAnimation(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::set_LocalPositionForAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LocalPositionForAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteBoardNote.get_IsPlaying
bool VROSC::NoteBoardNote::get_IsPlaying() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::get_IsPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNote.set_IsPlaying
void VROSC::NoteBoardNote::set_IsPlaying(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::set_IsPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteBoardNote.Init
void VROSC::NoteBoardNote::Init(::VROSC::NoteFieldNoteData* data, ::ArrayW<int> numberOfFields, ::UnityEngine::Vector3 noteScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(numberOfFields), ::il2cpp_utils::ExtractType(noteScale)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, numberOfFields, noteScale);
}
// Autogenerated method: VROSC.NoteBoardNote.Init
void VROSC::NoteBoardNote::Init(::VROSC::NoteFieldParameters* parameters, ::VROSC::NoteFieldNoteData* data, ::UnityEngine::Vector3 noteScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parameters), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(noteScale)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parameters, data, noteScale);
}
// Autogenerated method: VROSC.NoteBoardNote.InitShared
void VROSC::NoteBoardNote::InitShared(::VROSC::NoteFieldNoteData* data, ::UnityEngine::Vector3 noteScale, ::ArrayW<int> numberOfFields) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::InitShared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitShared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(noteScale), ::il2cpp_utils::ExtractType(numberOfFields)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, noteScale, numberOfFields);
}
// Autogenerated method: VROSC.NoteBoardNote.SetData
void VROSC::NoteBoardNote::SetData(::VROSC::NoteFieldNoteData* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: VROSC.NoteBoardNote.UpdateVisuals
void VROSC::NoteBoardNote::UpdateVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::UpdateVisuals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNote*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNote.SetHovering
void VROSC::NoteBoardNote::SetHovering(bool isHovering, bool isPlaying) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::SetHovering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHovering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isHovering), ::il2cpp_utils::ExtractType(isPlaying)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isHovering, isPlaying);
}
// Autogenerated method: VROSC.NoteBoardNote.SetLocalPosition
void VROSC::NoteBoardNote::SetLocalPosition(::UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::SetLocalPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: VROSC.NoteBoardNote.SetPlaying
void VROSC::NoteBoardNote::SetPlaying(bool isPlaying, ::VROSC::PlayData playData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::SetPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isPlaying), ::il2cpp_utils::ExtractType(playData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isPlaying, playData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteBoardNote/VROSC.Coloring
#include "VROSC/NoteBoardNote_Coloring.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VROSC.NoteBoardNote/VROSC.Coloring AsPlayed
::VROSC::NoteBoardNote::Coloring VROSC::NoteBoardNote::Coloring::_get_AsPlayed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::Coloring::_get_AsPlayed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::NoteBoardNote::Coloring>("VROSC", "NoteBoardNote/Coloring", "AsPlayed"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.NoteBoardNote/VROSC.Coloring AsPlayed
void VROSC::NoteBoardNote::Coloring::_set_AsPlayed(::VROSC::NoteBoardNote::Coloring value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::Coloring::_set_AsPlayed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "NoteBoardNote/Coloring", "AsPlayed", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.NoteBoardNote/VROSC.Coloring AlwaysX
::VROSC::NoteBoardNote::Coloring VROSC::NoteBoardNote::Coloring::_get_AlwaysX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::Coloring::_get_AlwaysX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::NoteBoardNote::Coloring>("VROSC", "NoteBoardNote/Coloring", "AlwaysX"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.NoteBoardNote/VROSC.Coloring AlwaysX
void VROSC::NoteBoardNote::Coloring::_set_AlwaysX(::VROSC::NoteBoardNote::Coloring value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::Coloring::_set_AlwaysX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "NoteBoardNote/Coloring", "AlwaysX", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.NoteBoardNote/VROSC.Coloring AlwaysY
::VROSC::NoteBoardNote::Coloring VROSC::NoteBoardNote::Coloring::_get_AlwaysY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::Coloring::_get_AlwaysY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::NoteBoardNote::Coloring>("VROSC", "NoteBoardNote/Coloring", "AlwaysY"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.NoteBoardNote/VROSC.Coloring AlwaysY
void VROSC::NoteBoardNote::Coloring::_set_AlwaysY(::VROSC::NoteBoardNote::Coloring value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::Coloring::_set_AlwaysY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "NoteBoardNote/Coloring", "AlwaysY", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.NoteBoardNote/VROSC.Coloring AlwaysZ
::VROSC::NoteBoardNote::Coloring VROSC::NoteBoardNote::Coloring::_get_AlwaysZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::Coloring::_get_AlwaysZ");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::NoteBoardNote::Coloring>("VROSC", "NoteBoardNote/Coloring", "AlwaysZ"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.NoteBoardNote/VROSC.Coloring AlwaysZ
void VROSC::NoteBoardNote::Coloring::_set_AlwaysZ(::VROSC::NoteBoardNote::Coloring value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::Coloring::_set_AlwaysZ");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "NoteBoardNote/Coloring", "AlwaysZ", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VROSC::NoteBoardNote::Coloring::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNote::Coloring::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteBoardNoteAnimator
#include "VROSC/NoteBoardNoteAnimator.hpp"
// Including type: VROSC.NoteBoardNote
#include "VROSC/NoteBoardNote.hpp"
// Including type: VROSC.NotefieldColorSettings
#include "VROSC/NotefieldColorSettings.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: VROSC.PlayData
#include "VROSC/PlayData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected System.Boolean _lockSizeX
[[deprecated("Use field access instead!")]] bool& VROSC::NoteBoardNoteAnimator::dyn__lockSizeX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::dyn__lockSizeX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lockSizeX"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean _lockSizeY
[[deprecated("Use field access instead!")]] bool& VROSC::NoteBoardNoteAnimator::dyn__lockSizeY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::dyn__lockSizeY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lockSizeY"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean _lockSizeZ
[[deprecated("Use field access instead!")]] bool& VROSC::NoteBoardNoteAnimator::dyn__lockSizeZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::dyn__lockSizeZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lockSizeZ"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNote _noteBoardNote
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNote*& VROSC::NoteBoardNoteAnimator::dyn__noteBoardNote() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::dyn__noteBoardNote");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteBoardNote"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoardNote**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Vector3 _baseScale
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& VROSC::NoteBoardNoteAnimator::dyn__baseScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::dyn__baseScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_baseScale"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <InputPower>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& VROSC::NoteBoardNoteAnimator::dyn_$InputPower$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::dyn_$InputPower$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<InputPower>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <HightlightColor>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& VROSC::NoteBoardNoteAnimator::dyn_$HightlightColor$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::dyn_$HightlightColor$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<HightlightColor>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <HoveringAmount>k__BackingField
[[deprecated("Use field access instead!")]] float& VROSC::NoteBoardNoteAnimator::dyn_$HoveringAmount$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::dyn_$HoveringAmount$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<HoveringAmount>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <VisualEffectPower>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& VROSC::NoteBoardNoteAnimator::dyn_$VisualEffectPower$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::dyn_$VisualEffectPower$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<VisualEffectPower>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <Velocity>k__BackingField
[[deprecated("Use field access instead!")]] float& VROSC::NoteBoardNoteAnimator::dyn_$Velocity$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::dyn_$Velocity$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Velocity>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NotefieldColorSettings _settings
[[deprecated("Use field access instead!")]] ::VROSC::NotefieldColorSettings*& VROSC::NoteBoardNoteAnimator::dyn__settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::dyn__settings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_settings"))->offset;
  return *reinterpret_cast<::VROSC::NotefieldColorSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hovering
[[deprecated("Use field access instead!")]] bool& VROSC::NoteBoardNoteAnimator::dyn__hovering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::dyn__hovering");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hovering"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<VROSC.TransmissionData> _transmissionData
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VROSC::TransmissionData>*& VROSC::NoteBoardNoteAnimator::dyn__transmissionData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::dyn__transmissionData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transmissionData"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::VROSC::TransmissionData>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& VROSC::NoteBoardNoteAnimator::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.get_InputPower
::UnityEngine::Vector3 VROSC::NoteBoardNoteAnimator::get_InputPower() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::get_InputPower");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InputPower", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.set_InputPower
void VROSC::NoteBoardNoteAnimator::set_InputPower(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::set_InputPower");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_InputPower", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.get_HightlightColor
::UnityEngine::Vector3 VROSC::NoteBoardNoteAnimator::get_HightlightColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::get_HightlightColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HightlightColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.set_HightlightColor
void VROSC::NoteBoardNoteAnimator::set_HightlightColor(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::set_HightlightColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HightlightColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.get_HoveringAmount
float VROSC::NoteBoardNoteAnimator::get_HoveringAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::get_HoveringAmount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HoveringAmount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.set_HoveringAmount
void VROSC::NoteBoardNoteAnimator::set_HoveringAmount(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::set_HoveringAmount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HoveringAmount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.get_VisualEffectPower
::UnityEngine::Vector3 VROSC::NoteBoardNoteAnimator::get_VisualEffectPower() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::get_VisualEffectPower");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_VisualEffectPower", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.set_VisualEffectPower
void VROSC::NoteBoardNoteAnimator::set_VisualEffectPower(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::set_VisualEffectPower");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_VisualEffectPower", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.get_Velocity
float VROSC::NoteBoardNoteAnimator::get_Velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::get_Velocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Velocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.set_Velocity
void VROSC::NoteBoardNoteAnimator::set_Velocity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::set_Velocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Velocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.Setup
void VROSC::NoteBoardNoteAnimator::Setup(::VROSC::NoteBoardNote* noteBoardNote, ::ArrayW<int> numberOfFields, ::UnityEngine::Vector3 baseScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::Setup");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteAnimator*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteBoardNote, numberOfFields, baseScale);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.UpdateVisuals
void VROSC::NoteBoardNoteAnimator::UpdateVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::UpdateVisuals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.Highlight
void VROSC::NoteBoardNoteAnimator::Highlight(::UnityEngine::Vector3 highlightColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::Highlight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Highlight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(highlightColor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, highlightColor);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.SetTransmissionData
void VROSC::NoteBoardNoteAnimator::SetTransmissionData(::System::Collections::Generic::List_1<::VROSC::TransmissionData>* transmissionData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::SetTransmissionData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTransmissionData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transmissionData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, transmissionData);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.UpdateInputPower
void VROSC::NoteBoardNoteAnimator::UpdateInputPower() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::UpdateInputPower");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateInputPower", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.Fall
::UnityEngine::Vector3 VROSC::NoteBoardNoteAnimator::Fall(::UnityEngine::Vector3 vector) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::Fall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vector)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, vector);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.UpdateScaling
void VROSC::NoteBoardNoteAnimator::UpdateScaling() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::UpdateScaling");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteAnimator*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.Play
void VROSC::NoteBoardNoteAnimator::Play(::VROSC::PlayData playData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::Play");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Play", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playData);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.Hover
void VROSC::NoteBoardNoteAnimator::Hover(bool isHovering, bool isPlaying) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::Hover");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hover", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isHovering), ::il2cpp_utils::ExtractType(isPlaying)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isHovering, isPlaying);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.SetEffectPowerColor
void VROSC::NoteBoardNoteAnimator::SetEffectPowerColor(::UnityEngine::Vector3 effectPower) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::SetEffectPowerColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetEffectPowerColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectPower)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, effectPower);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.Transmit
void VROSC::NoteBoardNoteAnimator::Transmit(::UnityEngine::Vector3 transmitPower) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::Transmit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Transmit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transmitPower)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, transmitPower);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.TransmitHovering
void VROSC::NoteBoardNoteAnimator::TransmitHovering(float hovering) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::TransmitHovering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransmitHovering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hovering)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hovering);
}
// Autogenerated method: VROSC.NoteBoardNoteAnimator.OnDrawGizmosSelected
void VROSC::NoteBoardNoteAnimator::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteAnimator::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteBoardNoteNeighbours
#include "VROSC/NoteBoardNoteNeighbours.hpp"
// Including type: VROSC.NoteBoardNoteNeighbours/VROSC.Axis
#include "VROSC/NoteBoardNoteNeighbours_Axis.hpp"
// Including type: VROSC.NoteBoardNote
#include "VROSC/NoteBoardNote.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNoteNeighbours/VROSC.Axis _x
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNoteNeighbours::Axis*& VROSC::NoteBoardNoteNeighbours::dyn__x() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteNeighbours::dyn__x");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_x"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoardNoteNeighbours::Axis**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNoteNeighbours/VROSC.Axis _y
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNoteNeighbours::Axis*& VROSC::NoteBoardNoteNeighbours::dyn__y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteNeighbours::dyn__y");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_y"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoardNoteNeighbours::Axis**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNoteNeighbours/VROSC.Axis _z
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNoteNeighbours::Axis*& VROSC::NoteBoardNoteNeighbours::dyn__z() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteNeighbours::dyn__z");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_z"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoardNoteNeighbours::Axis**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VROSC.NoteBoardNote[] AllNeighbours
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::NoteBoardNote*>& VROSC::NoteBoardNoteNeighbours::dyn_AllNeighbours() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteNeighbours::dyn_AllNeighbours");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AllNeighbours"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::NoteBoardNote*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteBoardNoteNeighbours.GetNeighbours
::ArrayW<::VROSC::NoteBoardNote*> VROSC::NoteBoardNoteNeighbours::GetNeighbours(int axis, bool inverted) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteNeighbours::GetNeighbours");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNeighbours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axis), ::il2cpp_utils::ExtractType(inverted)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::VROSC::NoteBoardNote*>, false>(this, ___internal__method, axis, inverted);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteBoardNoteNeighbours/VROSC.Axis
#include "VROSC/NoteBoardNoteNeighbours_Axis.hpp"
// Including type: VROSC.NoteBoardNote
#include "VROSC/NoteBoardNote.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNote[] <Neighbours>k__BackingField
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::NoteBoardNote*>& VROSC::NoteBoardNoteNeighbours::Axis::dyn_$Neighbours$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteNeighbours::Axis::dyn_$Neighbours$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Neighbours>k__BackingField"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::NoteBoardNote*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNote[] <InvertedNeighbours>k__BackingField
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::NoteBoardNote*>& VROSC::NoteBoardNoteNeighbours::Axis::dyn_$InvertedNeighbours$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteNeighbours::Axis::dyn_$InvertedNeighbours$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<InvertedNeighbours>k__BackingField"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::NoteBoardNote*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteBoardNoteNeighbours/VROSC.Axis.get_Neighbours
::ArrayW<::VROSC::NoteBoardNote*> VROSC::NoteBoardNoteNeighbours::Axis::get_Neighbours() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteNeighbours::Axis::get_Neighbours");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Neighbours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::VROSC::NoteBoardNote*>, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteNeighbours/VROSC.Axis.set_Neighbours
void VROSC::NoteBoardNoteNeighbours::Axis::set_Neighbours(::ArrayW<::VROSC::NoteBoardNote*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteNeighbours::Axis::set_Neighbours");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Neighbours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteBoardNoteNeighbours/VROSC.Axis.get_InvertedNeighbours
::ArrayW<::VROSC::NoteBoardNote*> VROSC::NoteBoardNoteNeighbours::Axis::get_InvertedNeighbours() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteNeighbours::Axis::get_InvertedNeighbours");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InvertedNeighbours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::VROSC::NoteBoardNote*>, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteNeighbours/VROSC.Axis.set_InvertedNeighbours
void VROSC::NoteBoardNoteNeighbours::Axis::set_InvertedNeighbours(::ArrayW<::VROSC::NoteBoardNote*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteNeighbours::Axis::set_InvertedNeighbours");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_InvertedNeighbours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteBoardNoteNeighbours/VROSC.Axis.AddInvertedNeighBours
void VROSC::NoteBoardNoteNeighbours::Axis::AddInvertedNeighBours(::VROSC::NoteBoardNoteNeighbours::Axis* firstAxis, ::VROSC::NoteBoardNoteNeighbours::Axis* secondAxis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteNeighbours::Axis::AddInvertedNeighBours");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddInvertedNeighBours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstAxis), ::il2cpp_utils::ExtractType(secondAxis)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, firstAxis, secondAxis);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteBoardNoteParticles
#include "VROSC/NoteBoardNoteParticles.hpp"
// Including type: VROSC.NoteBoardNoteParticles/VROSC.Emission
#include "VROSC/NoteBoardNoteParticles_Emission.hpp"
// Including type: VROSC.NoteBoardNoteAnimator
#include "VROSC/NoteBoardNoteAnimator.hpp"
// Including type: UnityEngine.Gradient
#include "UnityEngine/Gradient.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNoteAnimator _target
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNoteAnimator*& VROSC::NoteBoardNoteParticles::dyn__target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::dyn__target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_target"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoardNoteAnimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _rate
[[deprecated("Use field access instead!")]] float& VROSC::NoteBoardNoteParticles::dyn__rate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::dyn__rate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _size
[[deprecated("Use field access instead!")]] float& VROSC::NoteBoardNoteParticles::dyn__size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::dyn__size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_size"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _multiplier
[[deprecated("Use field access instead!")]] int& VROSC::NoteBoardNoteParticles::dyn__multiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::dyn__multiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplier"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _useRandomColor
[[deprecated("Use field access instead!")]] bool& VROSC::NoteBoardNoteParticles::dyn__useRandomColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::dyn__useRandomColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_useRandomColor"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Gradient _randomColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& VROSC::NoteBoardNoteParticles::dyn__randomColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::dyn__randomColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_randomColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Gradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _remap
[[deprecated("Use field access instead!")]] bool& VROSC::NoteBoardNoteParticles::dyn__remap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::dyn__remap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_remap"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _remapR
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& VROSC::NoteBoardNoteParticles::dyn__remapR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::dyn__remapR");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_remapR"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _remapG
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& VROSC::NoteBoardNoteParticles::dyn__remapG() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::dyn__remapG");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_remapG"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _remapB
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& VROSC::NoteBoardNoteParticles::dyn__remapB() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::dyn__remapB");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_remapB"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNoteParticles/VROSC.Emission _red
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNoteParticles::Emission*& VROSC::NoteBoardNoteParticles::dyn__red() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::dyn__red");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_red"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoardNoteParticles::Emission**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _particleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& VROSC::NoteBoardNoteParticles::dyn__particleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::dyn__particleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteBoardNoteParticles.Awake
void VROSC::NoteBoardNoteParticles::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteParticles.Update
void VROSC::NoteBoardNoteParticles::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteParticles.GetColor
::UnityEngine::Color VROSC::NoteBoardNoteParticles::GetColor(::UnityEngine::Color normalColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::GetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normalColor)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method, normalColor);
}
// Autogenerated method: VROSC.NoteBoardNoteParticles.OnDrawGizmosSelected
void VROSC::NoteBoardNoteParticles::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteBoardNoteParticles/VROSC.Emission
#include "VROSC/NoteBoardNoteParticles_Emission.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _rate
[[deprecated("Use field access instead!")]] float& VROSC::NoteBoardNoteParticles::Emission::dyn__rate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::Emission::dyn__rate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _size
[[deprecated("Use field access instead!")]] float& VROSC::NoteBoardNoteParticles::Emission::dyn__size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::Emission::dyn__size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_size"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _coolDown
[[deprecated("Use field access instead!")]] float& VROSC::NoteBoardNoteParticles::Emission::dyn__coolDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::Emission::dyn__coolDown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_coolDown"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _particleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& VROSC::NoteBoardNoteParticles::Emission::dyn__particleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::Emission::dyn__particleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _emitter
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& VROSC::NoteBoardNoteParticles::Emission::dyn__emitter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::Emission::dyn__emitter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_emitter"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteBoardNoteParticles/VROSC.Emission.Update
void VROSC::NoteBoardNoteParticles::Emission::Update(int multiplier, ::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::Emission::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplier), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, multiplier, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteBoardNoteText
#include "VROSC/NoteBoardNoteText.hpp"
// Including type: VROSC.NoteBoardNote
#include "VROSC/NoteBoardNote.hpp"
// Including type: UnityEngine.TextMesh
#include "UnityEngine/TextMesh.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: VROSC.NoteBoard/VROSC.PlayAxis
#include "VROSC/NoteBoard_PlayAxis.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNote _note
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNote*& VROSC::NoteBoardNoteText::dyn__note() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteText::dyn__note");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_note"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoardNote**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.TextMesh _text
[[deprecated("Use field access instead!")]] ::UnityEngine::TextMesh*& VROSC::NoteBoardNoteText::dyn__text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteText::dyn__text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_text"))->offset;
  return *reinterpret_cast<::UnityEngine::TextMesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _size
[[deprecated("Use field access instead!")]] float& VROSC::NoteBoardNoteText::dyn__size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteText::dyn__size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_size"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _normalized
[[deprecated("Use field access instead!")]] bool& VROSC::NoteBoardNoteText::dyn__normalized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteText::dyn__normalized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_normalized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _textStartPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& VROSC::NoteBoardNoteText::dyn__textStartPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteText::dyn__textStartPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textStartPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _textTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& VROSC::NoteBoardNoteText::dyn__textTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteText::dyn__textTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteBoardNoteText.Awake
void VROSC::NoteBoardNoteText::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteText::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteText.OnEnable
void VROSC::NoteBoardNoteText::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteText::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteText.Setup
void VROSC::NoteBoardNoteText::Setup(::UnityEngine::Vector3 noteScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteText::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteScale)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteScale);
}
// Autogenerated method: VROSC.NoteBoardNoteText.SetText
void VROSC::NoteBoardNoteText::SetText(bool active, ::VROSC::NoteBoard::PlayAxis axis, bool colorize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteText::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(active), ::il2cpp_utils::ExtractType(axis), ::il2cpp_utils::ExtractType(colorize)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, active, axis, colorize);
}
// Autogenerated method: VROSC.NoteBoardNoteText.UpdateText
void VROSC::NoteBoardNoteText::UpdateText(::VROSC::NoteBoard::PlayAxis axis, bool colorize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteText::UpdateText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axis), ::il2cpp_utils::ExtractType(colorize)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, axis, colorize);
}
// Autogenerated method: VROSC.NoteBoardNoteText.Normalize
void VROSC::NoteBoardNoteText::Normalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteText::Normalize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Normalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteText.GetTextByAxis
::StringW VROSC::NoteBoardNoteText::GetTextByAxis(::VROSC::NoteBoard::PlayAxis axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteText::GetTextByAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTextByAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axis)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, axis);
}
// Autogenerated method: VROSC.NoteBoardNoteText.GetTextColor
::UnityEngine::Color VROSC::NoteBoardNoteText::GetTextColor(::VROSC::NoteBoard::PlayAxis axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteText::GetTextColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTextColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axis)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method, axis);
}
// Autogenerated method: VROSC.NoteBoardNoteText.OnDrawGizmosSelected
void VROSC::NoteBoardNoteText::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteText::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteBoardStringAnimator
#include "VROSC/NoteBoardStringAnimator.hpp"
// Including type: VROSC.NoteBoardNote
#include "VROSC/NoteBoardNote.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.Axis _axis
[[deprecated("Use field access instead!")]] ::VROSC::Axis& VROSC::NoteBoardStringAnimator::dyn__axis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardStringAnimator::dyn__axis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_axis"))->offset;
  return *reinterpret_cast<::VROSC::Axis*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _width
[[deprecated("Use field access instead!")]] float& VROSC::NoteBoardStringAnimator::dyn__width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardStringAnimator::dyn__width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_width"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteBoardStringAnimator.GetAxis
::VROSC::Axis VROSC::NoteBoardStringAnimator::GetAxis(::UnityEngine::Vector3 scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardStringAnimator::GetAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scale)})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::Axis, false>(this, ___internal__method, scale);
}
// Autogenerated method: VROSC.NoteBoardStringAnimator.SetRotation
void VROSC::NoteBoardStringAnimator::SetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardStringAnimator::SetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardStringAnimator.GetScale
::UnityEngine::Vector3 VROSC::NoteBoardStringAnimator::GetScale(::UnityEngine::Vector3 scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardStringAnimator::GetScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scale)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, scale);
}
// Autogenerated method: VROSC.NoteBoardStringAnimator.Setup
void VROSC::NoteBoardStringAnimator::Setup(::VROSC::NoteBoardNote* noteBoardNote, ::ArrayW<int> numberOfFields, ::UnityEngine::Vector3 scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardStringAnimator::Setup");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteAnimator*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteBoardNote, numberOfFields, scale);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteBoardTextDisplay
#include "VROSC/NoteBoardTextDisplay.hpp"
// Including type: VROSC.NoteBoardTextDisplay/VROSC.<Animate>d__7
#include "VROSC/NoteBoardTextDisplay_-Animate-d__7.hpp"
// Including type: VROSC.NoteBoardNoteController
#include "VROSC/NoteBoardNoteController.hpp"
// Including type: VROSC.NoteBoardNoteText
#include "VROSC/NoteBoardNoteText.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNoteController _controller
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNoteController*& VROSC::NoteBoardTextDisplay::dyn__controller() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::dyn__controller");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_controller"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoardNoteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoard/VROSC.PlayAxis[] _displayAxises
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::NoteBoard::PlayAxis>& VROSC::NoteBoardTextDisplay::dyn__displayAxises() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::dyn__displayAxises");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_displayAxises"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::NoteBoard::PlayAxis>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _showDuration
[[deprecated("Use field access instead!")]] float& VROSC::NoteBoardTextDisplay::dyn__showDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::dyn__showDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_showDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _colorize
[[deprecated("Use field access instead!")]] bool& VROSC::NoteBoardTextDisplay::dyn__colorize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::dyn__colorize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorize"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNoteText[] _noteTexts
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::NoteBoardNoteText*>& VROSC::NoteBoardTextDisplay::dyn__noteTexts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::dyn__noteTexts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteTexts"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::NoteBoardNoteText*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteBoardTextDisplay.OnEnable
void VROSC::NoteBoardTextDisplay::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardTextDisplay.OnDisable
void VROSC::NoteBoardTextDisplay::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardTextDisplay.Animate
::System::Collections::IEnumerator* VROSC::NoteBoardTextDisplay::Animate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::Animate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Animate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardTextDisplay.SetAllActive
void VROSC::NoteBoardTextDisplay::SetAllActive(bool active, ::VROSC::NoteBoard::PlayAxis axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::SetAllActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetAllActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(active), ::il2cpp_utils::ExtractType(axis)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, active, axis);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VROSC.NoteBoardTextDisplay/VROSC.<Animate>d__7
#include "VROSC/NoteBoardTextDisplay_-Animate-d__7.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& VROSC::NoteBoardTextDisplay::$Animate$d__7::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::$Animate$d__7::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& VROSC::NoteBoardTextDisplay::$Animate$d__7::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::$Animate$d__7::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VROSC.NoteBoardTextDisplay <>4__this
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoardTextDisplay*& VROSC::NoteBoardTextDisplay::$Animate$d__7::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::$Animate$d__7::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoardTextDisplay**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <current>5__2
[[deprecated("Use field access instead!")]] int& VROSC::NoteBoardTextDisplay::$Animate$d__7::dyn_$current$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::$Animate$d__7::dyn_$current$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<current>5__2"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteBoardTextDisplay/VROSC.<Animate>d__7.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* VROSC::NoteBoardTextDisplay::$Animate$d__7::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::$Animate$d__7::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardTextDisplay::$Animate$d__7*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardTextDisplay/VROSC.<Animate>d__7.System.Collections.IEnumerator.get_Current
::Il2CppObject* VROSC::NoteBoardTextDisplay::$Animate$d__7::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::$Animate$d__7::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardTextDisplay::$Animate$d__7*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardTextDisplay/VROSC.<Animate>d__7.System.IDisposable.Dispose
void VROSC::NoteBoardTextDisplay::$Animate$d__7::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::$Animate$d__7::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardTextDisplay::$Animate$d__7*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardTextDisplay/VROSC.<Animate>d__7.MoveNext
bool VROSC::NoteBoardTextDisplay::$Animate$d__7::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::$Animate$d__7::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardTextDisplay::$Animate$d__7*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardTextDisplay/VROSC.<Animate>d__7.System.Collections.IEnumerator.Reset
void VROSC::NoteBoardTextDisplay::$Animate$d__7::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::$Animate$d__7::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardTextDisplay::$Animate$d__7*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.GridNoteboard
#include "VROSC/GridNoteboard.hpp"
// Including type: VROSC.NoteBoardNote
#include "VROSC/NoteBoardNote.hpp"
// Including type: VROSC.NoteFieldParameters
#include "VROSC/NoteFieldParameters.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNote[,,] <NoteBoardNotes>k__BackingField
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::NoteBoardNote*>& VROSC::GridNoteboard::dyn_$NoteBoardNotes$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GridNoteboard::dyn_$NoteBoardNotes$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<NoteBoardNotes>k__BackingField"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::NoteBoardNote*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.GridNoteboard.get_NoteBoardNotes
::ArrayW<::VROSC::NoteBoardNote*> VROSC::GridNoteboard::get_NoteBoardNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GridNoteboard::get_NoteBoardNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NoteBoardNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::VROSC::NoteBoardNote*>, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.GridNoteboard.set_NoteBoardNotes
void VROSC::GridNoteboard::set_NoteBoardNotes(::ArrayW<::VROSC::NoteBoardNote*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GridNoteboard::set_NoteBoardNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_NoteBoardNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.GridNoteboard.SetupNoteNeighbours
void VROSC::GridNoteboard::SetupNoteNeighbours() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GridNoteboard::SetupNoteNeighbours");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupNoteNeighbours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.GridNoteboard.ClearNotefield
void VROSC::GridNoteboard::ClearNotefield() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GridNoteboard::ClearNotefield");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteController*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.GridNoteboard.UpdateNoteboard
void VROSC::GridNoteboard::UpdateNoteboard(::VROSC::NoteFieldParameters* parameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GridNoteboard::UpdateNoteboard");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteController*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parameters);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NetNoteboard
#include "VROSC/NetNoteboard.hpp"
// Including type: VROSC.NoteBoardNote
#include "VROSC/NoteBoardNote.hpp"
// Including type: VROSC.NoteFieldParameters
#include "VROSC/NoteFieldParameters.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNote[,] <XYNotes>k__BackingField
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::NoteBoardNote*>& VROSC::NetNoteboard::dyn_$XYNotes$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NetNoteboard::dyn_$XYNotes$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<XYNotes>k__BackingField"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::NoteBoardNote*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNote[,] <XZNotes>k__BackingField
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::NoteBoardNote*>& VROSC::NetNoteboard::dyn_$XZNotes$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NetNoteboard::dyn_$XZNotes$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<XZNotes>k__BackingField"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::NoteBoardNote*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNote[,] <YZNotes>k__BackingField
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::NoteBoardNote*>& VROSC::NetNoteboard::dyn_$YZNotes$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NetNoteboard::dyn_$YZNotes$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<YZNotes>k__BackingField"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::NoteBoardNote*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _stringsize
[[deprecated("Use field access instead!")]] float& VROSC::NetNoteboard::dyn__stringsize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NetNoteboard::dyn__stringsize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stringsize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NetNoteboard.get_XYNotes
::ArrayW<::VROSC::NoteBoardNote*> VROSC::NetNoteboard::get_XYNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NetNoteboard::get_XYNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_XYNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::VROSC::NoteBoardNote*>, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NetNoteboard.set_XYNotes
void VROSC::NetNoteboard::set_XYNotes(::ArrayW<::VROSC::NoteBoardNote*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NetNoteboard::set_XYNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_XYNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NetNoteboard.get_XZNotes
::ArrayW<::VROSC::NoteBoardNote*> VROSC::NetNoteboard::get_XZNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NetNoteboard::get_XZNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_XZNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::VROSC::NoteBoardNote*>, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NetNoteboard.set_XZNotes
void VROSC::NetNoteboard::set_XZNotes(::ArrayW<::VROSC::NoteBoardNote*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NetNoteboard::set_XZNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_XZNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NetNoteboard.get_YZNotes
::ArrayW<::VROSC::NoteBoardNote*> VROSC::NetNoteboard::get_YZNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NetNoteboard::get_YZNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_YZNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::VROSC::NoteBoardNote*>, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NetNoteboard.set_YZNotes
void VROSC::NetNoteboard::set_YZNotes(::ArrayW<::VROSC::NoteBoardNote*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NetNoteboard::set_YZNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_YZNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NetNoteboard.UpdateNumberOfFields
int VROSC::NetNoteboard::UpdateNumberOfFields(::VROSC::NoteFieldParameters* parameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NetNoteboard::UpdateNumberOfFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateNumberOfFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parameters)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, parameters);
}
// Autogenerated method: VROSC.NetNoteboard.SetupNoteNeighbours
void VROSC::NetNoteboard::SetupNoteNeighbours() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NetNoteboard::SetupNoteNeighbours");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupNoteNeighbours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NetNoteboard.ClearNotefield
void VROSC::NetNoteboard::ClearNotefield() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NetNoteboard::ClearNotefield");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteController*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NetNoteboard.UpdateNoteboard
void VROSC::NetNoteboard::UpdateNoteboard(::VROSC::NoteFieldParameters* parameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NetNoteboard::UpdateNoteboard");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteController*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parameters);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteBoardNoteController
#include "VROSC/NoteBoardNoteController.hpp"
// Including type: VROSC.NoteBoardNoteController/VROSC.HoveredNoteBoardNote
#include "VROSC/NoteBoardNoteController_HoveredNoteBoardNote.hpp"
// Including type: VROSC.NoteBoardNoteController/VROSC.<BlinkNotes>d__28
#include "VROSC/NoteBoardNoteController_-BlinkNotes-d__28.hpp"
// Including type: VROSC.NoteBoardNote
#include "VROSC/NoteBoardNote.hpp"
// Including type: VROSC.NotefieldAnimationSettings
#include "VROSC/NotefieldAnimationSettings.hpp"
// Including type: VROSC.NotefieldColorSettings
#include "VROSC/NotefieldColorSettings.hpp"
// Including type: VROSC.NoteFieldData
#include "VROSC/NoteFieldData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: VROSC.InputDevice
#include "VROSC/InputDevice.hpp"
// Including type: VROSC.NoteFieldNoteData
#include "VROSC/NoteFieldNoteData.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: VROSC.NoteFieldParameters
#include "VROSC/NoteFieldParameters.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected VROSC.NoteBoardNote _noteFieldPrefab
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNote*& VROSC::NoteBoardNoteController::dyn__noteFieldPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::dyn__noteFieldPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteFieldPrefab"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoardNote**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Vector3 _size
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& VROSC::NoteBoardNoteController::dyn__size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::dyn__size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_size"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected VROSC.NotefieldAnimationSettings _settings
[[deprecated("Use field access instead!")]] ::VROSC::NotefieldAnimationSettings*& VROSC::NoteBoardNoteController::dyn__settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::dyn__settings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_settings"))->offset;
  return *reinterpret_cast<::VROSC::NotefieldAnimationSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected VROSC.NotefieldColorSettings _noteFieldSettings
[[deprecated("Use field access instead!")]] ::VROSC::NotefieldColorSettings*& VROSC::NoteBoardNoteController::dyn__noteFieldSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::dyn__noteFieldSettings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteFieldSettings"))->offset;
  return *reinterpret_cast<::VROSC::NotefieldColorSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteFieldData <NoteFieldData>k__BackingField
[[deprecated("Use field access instead!")]] ::VROSC::NoteFieldData*& VROSC::NoteBoardNoteController::dyn_$NoteFieldData$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::dyn_$NoteFieldData$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<NoteFieldData>k__BackingField"))->offset;
  return *reinterpret_cast<::VROSC::NoteFieldData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<VROSC.NoteBoardNote> _noteBoardNotes
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VROSC::NoteBoardNote*>*& VROSC::NoteBoardNoteController::dyn__noteBoardNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::dyn__noteBoardNotes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteBoardNotes"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::VROSC::NoteBoardNote*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`3<VROSC.InputDevice,VROSC.NoteFieldNoteData,System.Boolean> OnHover
[[deprecated("Use field access instead!")]] ::System::Action_3<::VROSC::InputDevice*, ::VROSC::NoteFieldNoteData*, bool>*& VROSC::NoteBoardNoteController::dyn_OnHover() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::dyn_OnHover");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnHover"))->offset;
  return *reinterpret_cast<::System::Action_3<::VROSC::InputDevice*, ::VROSC::NoteFieldNoteData*, bool>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`2<VROSC.NoteFieldData,VROSC.NoteFieldParameters> OnNewNotefieldData
[[deprecated("Use field access instead!")]] ::System::Action_2<::VROSC::NoteFieldData*, ::VROSC::NoteFieldParameters*>*& VROSC::NoteBoardNoteController::dyn_OnNewNotefieldData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::dyn_OnNewNotefieldData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnNewNotefieldData"))->offset;
  return *reinterpret_cast<::System::Action_2<::VROSC::NoteFieldData*, ::VROSC::NoteFieldParameters*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`2<VROSC.NoteFieldData,VROSC.NoteFieldParameters> OnNewNotefieldCreated
[[deprecated("Use field access instead!")]] ::System::Action_2<::VROSC::NoteFieldData*, ::VROSC::NoteFieldParameters*>*& VROSC::NoteBoardNoteController::dyn_OnNewNotefieldCreated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::dyn_OnNewNotefieldCreated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnNewNotefieldCreated"))->offset;
  return *reinterpret_cast<::System::Action_2<::VROSC::NoteFieldData*, ::VROSC::NoteFieldParameters*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Coroutine _blinkCoroutine
[[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& VROSC::NoteBoardNoteController::dyn__blinkCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::dyn__blinkCoroutine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_blinkCoroutine"))->offset;
  return *reinterpret_cast<::UnityEngine::Coroutine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<VROSC.NoteBoardNoteController/VROSC.HoveredNoteBoardNote> _hoveredNoteBoardNotes
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VROSC::NoteBoardNoteController::HoveredNoteBoardNote*>*& VROSC::NoteBoardNoteController::dyn__hoveredNoteBoardNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::dyn__hoveredNoteBoardNotes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hoveredNoteBoardNotes"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::VROSC::NoteBoardNoteController::HoveredNoteBoardNote*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteBoardNoteController.get_NoteFieldData
::VROSC::NoteFieldData* VROSC::NoteBoardNoteController::get_NoteFieldData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::get_NoteFieldData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NoteFieldData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::NoteFieldData*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteController.set_NoteFieldData
void VROSC::NoteBoardNoteController::set_NoteFieldData(::VROSC::NoteFieldData* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::set_NoteFieldData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_NoteFieldData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteBoardNoteController.get_NoteBoardNoteList
::System::Collections::Generic::List_1<::VROSC::NoteBoardNote*>* VROSC::NoteBoardNoteController::get_NoteBoardNoteList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::get_NoteBoardNoteList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NoteBoardNoteList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::VROSC::NoteBoardNote*>*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteController.get_Settings
::VROSC::NotefieldAnimationSettings* VROSC::NoteBoardNoteController::get_Settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::get_Settings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Settings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::NotefieldAnimationSettings*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteController.Update
void VROSC::NoteBoardNoteController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteController.ClearNotefield
void VROSC::NoteBoardNoteController::ClearNotefield() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::ClearNotefield");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteController*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteController.UpdateNoteboard
void VROSC::NoteBoardNoteController::UpdateNoteboard(::VROSC::NoteFieldParameters* parameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::UpdateNoteboard");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteController*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parameters);
}
// Autogenerated method: VROSC.NoteBoardNoteController.GetVisualPosition
::UnityEngine::Vector3 VROSC::NoteBoardNoteController::GetVisualPosition(int x, int y, int z, ::VROSC::NoteFieldParameters* parameters, ::UnityEngine::Vector3 fieldSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::GetVisualPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVisualPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(z), ::il2cpp_utils::ExtractType(parameters), ::il2cpp_utils::ExtractType(fieldSize)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, x, y, z, parameters, fieldSize);
}
// Autogenerated method: VROSC.NoteBoardNoteController.GetNote
::VROSC::NoteFieldNoteData* VROSC::NoteBoardNoteController::GetNote(::UnityEngine::Vector3 normalizedPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::GetNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normalizedPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::NoteFieldNoteData*, false>(this, ___internal__method, normalizedPoint);
}
// Autogenerated method: VROSC.NoteBoardNoteController.GetNote
::VROSC::NoteFieldNoteData* VROSC::NoteBoardNoteController::GetNote(int x, int y, int z) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::GetNote");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteController*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::NoteFieldNoteData*, false>(this, ___internal__method, x, y, z);
}
// Autogenerated method: VROSC.NoteBoardNoteController.Hover
void VROSC::NoteBoardNoteController::Hover(::VROSC::NoteFieldNoteData* noteBoardNote, ::VROSC::InputDevice* device) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::Hover");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hover", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteBoardNote), ::il2cpp_utils::ExtractType(device)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteBoardNote, device);
}
// Autogenerated method: VROSC.NoteBoardNoteController.HoverEnd
void VROSC::NoteBoardNoteController::HoverEnd(::VROSC::InputDevice* device) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::HoverEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HoverEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(device)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, device);
}
// Autogenerated method: VROSC.NoteBoardNoteController.StartBlinkingNotes
void VROSC::NoteBoardNoteController::StartBlinkingNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::StartBlinkingNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartBlinkingNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteController.BlinkNotes
::System::Collections::IEnumerator* VROSC::NoteBoardNoteController::BlinkNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::BlinkNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BlinkNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteController.StopBlinkingNotes
void VROSC::NoteBoardNoteController::StopBlinkingNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::StopBlinkingNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopBlinkingNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteController.OnDrawGizmosSelected
void VROSC::NoteBoardNoteController::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteBoardNoteController/VROSC.HoveredNoteBoardNote
#include "VROSC/NoteBoardNoteController_HoveredNoteBoardNote.hpp"
// Including type: VROSC.NoteFieldNoteData
#include "VROSC/NoteFieldNoteData.hpp"
// Including type: VROSC.InputDevice
#include "VROSC/InputDevice.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public VROSC.NoteFieldNoteData NoteBoardNote
[[deprecated("Use field access instead!")]] ::VROSC::NoteFieldNoteData*& VROSC::NoteBoardNoteController::HoveredNoteBoardNote::dyn_NoteBoardNote() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::HoveredNoteBoardNote::dyn_NoteBoardNote");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NoteBoardNote"))->offset;
  return *reinterpret_cast<::VROSC::NoteFieldNoteData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VROSC.InputDevice Device
[[deprecated("Use field access instead!")]] ::VROSC::InputDevice*& VROSC::NoteBoardNoteController::HoveredNoteBoardNote::dyn_Device() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::HoveredNoteBoardNote::dyn_Device");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Device"))->offset;
  return *reinterpret_cast<::VROSC::InputDevice**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VROSC.NoteBoardNoteController/VROSC.<BlinkNotes>d__28
#include "VROSC/NoteBoardNoteController_-BlinkNotes-d__28.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& VROSC::NoteBoardNoteController::$BlinkNotes$d__28::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::$BlinkNotes$d__28::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& VROSC::NoteBoardNoteController::$BlinkNotes$d__28::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::$BlinkNotes$d__28::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VROSC.NoteBoardNoteController <>4__this
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNoteController*& VROSC::NoteBoardNoteController::$BlinkNotes$d__28::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::$BlinkNotes$d__28::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoardNoteController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <startTime>5__2
[[deprecated("Use field access instead!")]] float& VROSC::NoteBoardNoteController::$BlinkNotes$d__28::dyn_$startTime$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::$BlinkNotes$d__28::dyn_$startTime$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<startTime>5__2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <period>5__3
[[deprecated("Use field access instead!")]] float& VROSC::NoteBoardNoteController::$BlinkNotes$d__28::dyn_$period$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::$BlinkNotes$d__28::dyn_$period$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<period>5__3"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <maxValue>5__4
[[deprecated("Use field access instead!")]] float& VROSC::NoteBoardNoteController::$BlinkNotes$d__28::dyn_$maxValue$5__4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::$BlinkNotes$d__28::dyn_$maxValue$5__4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<maxValue>5__4"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteBoardNoteController/VROSC.<BlinkNotes>d__28.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* VROSC::NoteBoardNoteController::$BlinkNotes$d__28::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::$BlinkNotes$d__28::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteController::$BlinkNotes$d__28*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteController/VROSC.<BlinkNotes>d__28.System.Collections.IEnumerator.get_Current
::Il2CppObject* VROSC::NoteBoardNoteController::$BlinkNotes$d__28::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::$BlinkNotes$d__28::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteController::$BlinkNotes$d__28*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteController/VROSC.<BlinkNotes>d__28.System.IDisposable.Dispose
void VROSC::NoteBoardNoteController::$BlinkNotes$d__28::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::$BlinkNotes$d__28::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteController::$BlinkNotes$d__28*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteController/VROSC.<BlinkNotes>d__28.MoveNext
bool VROSC::NoteBoardNoteController::$BlinkNotes$d__28::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::$BlinkNotes$d__28::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteController::$BlinkNotes$d__28*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteController/VROSC.<BlinkNotes>d__28.System.Collections.IEnumerator.Reset
void VROSC::NoteBoardNoteController::$BlinkNotes$d__28::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteController::$BlinkNotes$d__28::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteController::$BlinkNotes$d__28*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteBoardReciever
#include "VROSC/NoteBoardReciever.hpp"
// Including type: VROSC.NoteBoardReciever/VROSC.Player
#include "VROSC/NoteBoardReciever_Player.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: VROSC.NotePlayer
#include "VROSC/NotePlayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<VROSC.NoteBoardReciever/VROSC.Player> _players
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VROSC::NoteBoardReciever::Player*>*& VROSC::NoteBoardReciever::dyn__players() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardReciever::dyn__players");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_players"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::VROSC::NoteBoardReciever::Player*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteBoardReciever.RegisterPlayer
void VROSC::NoteBoardReciever::RegisterPlayer(::VROSC::NotePlayer* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardReciever::RegisterPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, source);
}
// Autogenerated method: VROSC.NoteBoardReciever.PlayerRegistered
bool VROSC::NoteBoardReciever::PlayerRegistered(::VROSC::NotePlayer* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardReciever::PlayerRegistered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, source);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteBoardReciever/VROSC.Player
#include "VROSC/NoteBoardReciever_Player.hpp"
// Including type: VROSC.NotePlayer
#include "VROSC/NotePlayer.hpp"
// Including type: VROSC.NoteFieldNoteData
#include "VROSC/NoteFieldNoteData.hpp"
// Including type: VROSC.PlayData
#include "VROSC/PlayData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly VROSC.NotePlayer <Source>k__BackingField
[[deprecated("Use field access instead!")]] ::VROSC::NotePlayer*& VROSC::NoteBoardReciever::Player::dyn_$Source$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardReciever::Player::dyn_$Source$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Source>k__BackingField"))->offset;
  return *reinterpret_cast<::VROSC::NotePlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteFieldNoteData <CurrentNote>k__BackingField
[[deprecated("Use field access instead!")]] ::VROSC::NoteFieldNoteData*& VROSC::NoteBoardReciever::Player::dyn_$CurrentNote$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardReciever::Player::dyn_$CurrentNote$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CurrentNote>k__BackingField"))->offset;
  return *reinterpret_cast<::VROSC::NoteFieldNoteData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteBoardReciever/VROSC.Player.get_Source
::VROSC::NotePlayer* VROSC::NoteBoardReciever::Player::get_Source() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardReciever::Player::get_Source");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Source", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::NotePlayer*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardReciever/VROSC.Player.get_CurrentNote
::VROSC::NoteFieldNoteData* VROSC::NoteBoardReciever::Player::get_CurrentNote() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardReciever::Player::get_CurrentNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::NoteFieldNoteData*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardReciever/VROSC.Player.set_CurrentNote
void VROSC::NoteBoardReciever::Player::set_CurrentNote(::VROSC::NoteFieldNoteData* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardReciever::Player::set_CurrentNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CurrentNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteBoardReciever/VROSC.Player.Play
void VROSC::NoteBoardReciever::Player::Play(::VROSC::NoteFieldNoteData* note, ::VROSC::PlayData playData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardReciever::Player::Play");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Play", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(note), ::il2cpp_utils::ExtractType(playData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, note, playData);
}
// Autogenerated method: VROSC.NoteBoardReciever/VROSC.Player.Stop
void VROSC::NoteBoardReciever::Player::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardReciever::Player::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.PlayData
#include "VROSC/PlayData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector3 <Power>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& VROSC::PlayData::dyn_$Power$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayData::dyn_$Power$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Power>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single <Velocity>k__BackingField
[[deprecated("Use field access instead!")]] float& VROSC::PlayData::dyn_$Velocity$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayData::dyn_$Velocity$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Velocity>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.PlayData.get_Power
::UnityEngine::Vector3 VROSC::PlayData::get_Power() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayData::get_Power");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Power", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.PlayData.get_Velocity
float VROSC::PlayData::get_Velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayData::get_Velocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Velocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.PlayData.get_None
::VROSC::PlayData VROSC::PlayData::get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayData::get_None");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VROSC", "PlayData", "get_None", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::PlayData, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VROSC.PlayData..ctor
// ABORTED elsewhere.  VROSC::PlayData::PlayData(::UnityEngine::Vector3 power, float velocity)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteFieldNoteData
#include "VROSC/NoteFieldNoteData.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <NoteNumberX>k__BackingField
[[deprecated("Use field access instead!")]] int& VROSC::NoteFieldNoteData::dyn_$NoteNumberX$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::dyn_$NoteNumberX$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<NoteNumberX>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <NoteNumberY>k__BackingField
[[deprecated("Use field access instead!")]] int& VROSC::NoteFieldNoteData::dyn_$NoteNumberY$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::dyn_$NoteNumberY$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<NoteNumberY>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <NoteNumberZ>k__BackingField
[[deprecated("Use field access instead!")]] int& VROSC::NoteFieldNoteData::dyn_$NoteNumberZ$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::dyn_$NoteNumberZ$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<NoteNumberZ>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <NoteNumber3D>k__BackingField
[[deprecated("Use field access instead!")]] int& VROSC::NoteFieldNoteData::dyn_$NoteNumber3D$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::dyn_$NoteNumber3D$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<NoteNumber3D>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsOdd>k__BackingField
[[deprecated("Use field access instead!")]] bool& VROSC::NoteFieldNoteData::dyn_$IsOdd$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::dyn_$IsOdd$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsOdd>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsOctave>k__BackingField
[[deprecated("Use field access instead!")]] bool& VROSC::NoteFieldNoteData::dyn_$IsOctave$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::dyn_$IsOctave$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsOctave>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsPlaying>k__BackingField
[[deprecated("Use field access instead!")]] bool& VROSC::NoteFieldNoteData::dyn_$IsPlaying$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::dyn_$IsPlaying$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsPlaying>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsHovering>k__BackingField
[[deprecated("Use field access instead!")]] bool& VROSC::NoteFieldNoteData::dyn_$IsHovering$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::dyn_$IsHovering$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsHovering>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`2<System.Boolean,VROSC.PlayData> OnPlay
[[deprecated("Use field access instead!")]] ::System::Action_2<bool, ::VROSC::PlayData>*& VROSC::NoteFieldNoteData::dyn_OnPlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::dyn_OnPlay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnPlay"))->offset;
  return *reinterpret_cast<::System::Action_2<bool, ::VROSC::PlayData>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`2<System.Boolean,System.Boolean> OnHovering
[[deprecated("Use field access instead!")]] ::System::Action_2<bool, bool>*& VROSC::NoteFieldNoteData::dyn_OnHovering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::dyn_OnHovering");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnHovering"))->offset;
  return *reinterpret_cast<::System::Action_2<bool, bool>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] <MultiNote>k__BackingField
[[deprecated("Use field access instead!")]] ::ArrayW<float>& VROSC::NoteFieldNoteData::dyn_$MultiNote$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::dyn_$MultiNote$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<MultiNote>k__BackingField"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteFieldNoteData.get_NoteNumberX
int VROSC::NoteFieldNoteData::get_NoteNumberX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::get_NoteNumberX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NoteNumberX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldNoteData.set_NoteNumberX
void VROSC::NoteFieldNoteData::set_NoteNumberX(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::set_NoteNumberX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_NoteNumberX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldNoteData.get_NoteNumberY
int VROSC::NoteFieldNoteData::get_NoteNumberY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::get_NoteNumberY");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NoteNumberY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldNoteData.set_NoteNumberY
void VROSC::NoteFieldNoteData::set_NoteNumberY(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::set_NoteNumberY");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_NoteNumberY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldNoteData.get_NoteNumberZ
int VROSC::NoteFieldNoteData::get_NoteNumberZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::get_NoteNumberZ");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NoteNumberZ", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldNoteData.set_NoteNumberZ
void VROSC::NoteFieldNoteData::set_NoteNumberZ(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::set_NoteNumberZ");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_NoteNumberZ", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldNoteData.get_NoteNumber3D
int VROSC::NoteFieldNoteData::get_NoteNumber3D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::get_NoteNumber3D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NoteNumber3D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldNoteData.set_NoteNumber3D
void VROSC::NoteFieldNoteData::set_NoteNumber3D(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::set_NoteNumber3D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_NoteNumber3D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldNoteData.get_IsOdd
bool VROSC::NoteFieldNoteData::get_IsOdd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::get_IsOdd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsOdd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldNoteData.set_IsOdd
void VROSC::NoteFieldNoteData::set_IsOdd(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::set_IsOdd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsOdd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldNoteData.get_IsOctave
bool VROSC::NoteFieldNoteData::get_IsOctave() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::get_IsOctave");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsOctave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldNoteData.set_IsOctave
void VROSC::NoteFieldNoteData::set_IsOctave(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::set_IsOctave");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsOctave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldNoteData.get_IsPlaying
bool VROSC::NoteFieldNoteData::get_IsPlaying() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::get_IsPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldNoteData.set_IsPlaying
void VROSC::NoteFieldNoteData::set_IsPlaying(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::set_IsPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldNoteData.get_IsHovering
bool VROSC::NoteFieldNoteData::get_IsHovering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::get_IsHovering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsHovering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldNoteData.set_IsHovering
void VROSC::NoteFieldNoteData::set_IsHovering(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::set_IsHovering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsHovering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldNoteData.get_MultiNote
::ArrayW<float> VROSC::NoteFieldNoteData::get_MultiNote() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::get_MultiNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MultiNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<float>, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldNoteData.set_MultiNote
void VROSC::NoteFieldNoteData::set_MultiNote(::ArrayW<float> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::set_MultiNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_MultiNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldNoteData.SetHovering
void VROSC::NoteFieldNoteData::SetHovering(bool isHovering) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::SetHovering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHovering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isHovering)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isHovering);
}
// Autogenerated method: VROSC.NoteFieldNoteData.SetPlaying
void VROSC::NoteFieldNoteData::SetPlaying(bool isPlaying, ::VROSC::PlayData playData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::SetPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isPlaying), ::il2cpp_utils::ExtractType(playData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isPlaying, playData);
}
// Autogenerated method: VROSC.NoteFieldNoteData.SetMultiNote
void VROSC::NoteFieldNoteData::SetMultiNote(int index, float amount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::SetMultiNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMultiNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(amount)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, amount);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteFieldData
#include "VROSC/NoteFieldData.hpp"
// Including type: VROSC.NoteFieldNoteData
#include "VROSC/NoteFieldNoteData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: VROSC.NoteFieldParameters
#include "VROSC/NoteFieldParameters.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <XFields>k__BackingField
[[deprecated("Use field access instead!")]] int& VROSC::NoteFieldData::dyn_$XFields$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldData::dyn_$XFields$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<XFields>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <YFields>k__BackingField
[[deprecated("Use field access instead!")]] int& VROSC::NoteFieldData::dyn_$YFields$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldData::dyn_$YFields$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<YFields>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <ZFields>k__BackingField
[[deprecated("Use field access instead!")]] int& VROSC::NoteFieldData::dyn_$ZFields$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldData::dyn_$ZFields$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ZFields>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <FieldSize>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& VROSC::NoteFieldData::dyn_$FieldSize$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldData::dyn_$FieldSize$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<FieldSize>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteFieldNoteData[,,] _noteFieldArray
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::NoteFieldNoteData*>& VROSC::NoteFieldData::dyn__noteFieldArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldData::dyn__noteFieldArray");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteFieldArray"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::NoteFieldNoteData*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<VROSC.NoteFieldNoteData> _noteFieldList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VROSC::NoteFieldNoteData*>*& VROSC::NoteFieldData::dyn__noteFieldList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldData::dyn__noteFieldList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteFieldList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::VROSC::NoteFieldNoteData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteFieldData.get_XFields
int VROSC::NoteFieldData::get_XFields() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldData::get_XFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_XFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldData.set_XFields
void VROSC::NoteFieldData::set_XFields(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldData::set_XFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_XFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldData.get_YFields
int VROSC::NoteFieldData::get_YFields() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldData::get_YFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_YFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldData.set_YFields
void VROSC::NoteFieldData::set_YFields(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldData::set_YFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_YFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldData.get_ZFields
int VROSC::NoteFieldData::get_ZFields() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldData::get_ZFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ZFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldData.set_ZFields
void VROSC::NoteFieldData::set_ZFields(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldData::set_ZFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ZFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldData.get_FieldSize
::UnityEngine::Vector3 VROSC::NoteFieldData::get_FieldSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldData::get_FieldSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FieldSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldData.set_FieldSize
void VROSC::NoteFieldData::set_FieldSize(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldData::set_FieldSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FieldSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldData.SetFieldSize
void VROSC::NoteFieldData::SetFieldSize(::VROSC::NoteFieldParameters* parameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldData::SetFieldSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFieldSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parameters)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parameters);
}
// Autogenerated method: VROSC.NoteFieldData.GetNoteBoardNote
::VROSC::NoteFieldNoteData* VROSC::NoteFieldData::GetNoteBoardNote(::UnityEngine::Vector3 normalizedPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldData::GetNoteBoardNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNoteBoardNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normalizedPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::NoteFieldNoteData*, false>(this, ___internal__method, normalizedPoint);
}
// Autogenerated method: VROSC.NoteFieldData.GetNoteBoardNote
::VROSC::NoteFieldNoteData* VROSC::NoteFieldData::GetNoteBoardNote(int x, int y, int z) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldData::GetNoteBoardNote");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteFieldData*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::NoteFieldNoteData*, false>(this, ___internal__method, x, y, z);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteFieldParameters
#include "VROSC/NoteFieldParameters.hpp"
// Including type: VROSC.NoteFieldParameters/VROSC.Axis
#include "VROSC/NoteFieldParameters_Axis.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: VROSC.Note
#include "VROSC/Note.hpp"
// Including type: VROSC.NoteBoard/VROSC.NoteAxis
#include "VROSC/NoteBoard_NoteAxis.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteFieldParameters/VROSC.Axis <X>k__BackingField
[[deprecated("Use field access instead!")]] ::VROSC::NoteFieldParameters::Axis*& VROSC::NoteFieldParameters::dyn_$X$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::dyn_$X$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<X>k__BackingField"))->offset;
  return *reinterpret_cast<::VROSC::NoteFieldParameters::Axis**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteFieldParameters/VROSC.Axis <Y>k__BackingField
[[deprecated("Use field access instead!")]] ::VROSC::NoteFieldParameters::Axis*& VROSC::NoteFieldParameters::dyn_$Y$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::dyn_$Y$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Y>k__BackingField"))->offset;
  return *reinterpret_cast<::VROSC::NoteFieldParameters::Axis**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteFieldParameters/VROSC.Axis <Z>k__BackingField
[[deprecated("Use field access instead!")]] ::VROSC::NoteFieldParameters::Axis*& VROSC::NoteFieldParameters::dyn_$Z$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::dyn_$Z$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Z>k__BackingField"))->offset;
  return *reinterpret_cast<::VROSC::NoteFieldParameters::Axis**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <NumberOfFields>k__BackingField
[[deprecated("Use field access instead!")]] int& VROSC::NoteFieldParameters::dyn_$NumberOfFields$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::dyn_$NumberOfFields$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<NumberOfFields>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Int32> <PrimaryNoteList>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& VROSC::NoteFieldParameters::dyn_$PrimaryNoteList$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::dyn_$PrimaryNoteList$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PrimaryNoteList>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoard/VROSC.Axis <PrimaryAxis>k__BackingField
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoard::Axis& VROSC::NoteFieldParameters::dyn_$PrimaryAxis$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::dyn_$PrimaryAxis$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PrimaryAxis>k__BackingField"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoard::Axis*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.Scale <PrimaryScale>k__BackingField
[[deprecated("Use field access instead!")]] ::VROSC::Scale& VROSC::NoteFieldParameters::dyn_$PrimaryScale$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::dyn_$PrimaryScale$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PrimaryScale>k__BackingField"))->offset;
  return *reinterpret_cast<::VROSC::Scale*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <SecondaryAxisSteps>k__BackingField
[[deprecated("Use field access instead!")]] int& VROSC::NoteFieldParameters::dyn_$SecondaryAxisSteps$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::dyn_$SecondaryAxisSteps$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<SecondaryAxisSteps>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <TertiaryAxisSteps>k__BackingField
[[deprecated("Use field access instead!")]] int& VROSC::NoteFieldParameters::dyn_$TertiaryAxisSteps$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::dyn_$TertiaryAxisSteps$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TertiaryAxisSteps>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteFieldParameters.get_X
::VROSC::NoteFieldParameters::Axis* VROSC::NoteFieldParameters::get_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::get_X");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_X", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::NoteFieldParameters::Axis*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldParameters.set_X
void VROSC::NoteFieldParameters::set_X(::VROSC::NoteFieldParameters::Axis* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::set_X");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_X", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldParameters.get_Y
::VROSC::NoteFieldParameters::Axis* VROSC::NoteFieldParameters::get_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::get_Y");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Y", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::NoteFieldParameters::Axis*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldParameters.set_Y
void VROSC::NoteFieldParameters::set_Y(::VROSC::NoteFieldParameters::Axis* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::set_Y");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Y", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldParameters.get_Z
::VROSC::NoteFieldParameters::Axis* VROSC::NoteFieldParameters::get_Z() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::get_Z");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Z", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::NoteFieldParameters::Axis*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldParameters.set_Z
void VROSC::NoteFieldParameters::set_Z(::VROSC::NoteFieldParameters::Axis* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::set_Z");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Z", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldParameters.get_NumberOfFields
int VROSC::NoteFieldParameters::get_NumberOfFields() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::get_NumberOfFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NumberOfFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldParameters.set_NumberOfFields
void VROSC::NoteFieldParameters::set_NumberOfFields(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::set_NumberOfFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_NumberOfFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldParameters.get_PrimaryNoteList
::System::Collections::Generic::List_1<int>* VROSC::NoteFieldParameters::get_PrimaryNoteList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::get_PrimaryNoteList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PrimaryNoteList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<int>*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldParameters.set_PrimaryNoteList
void VROSC::NoteFieldParameters::set_PrimaryNoteList(::System::Collections::Generic::List_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::set_PrimaryNoteList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PrimaryNoteList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldParameters.get_PrimaryAxis
::VROSC::NoteBoard::Axis VROSC::NoteFieldParameters::get_PrimaryAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::get_PrimaryAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PrimaryAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::NoteBoard::Axis, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldParameters.set_PrimaryAxis
void VROSC::NoteFieldParameters::set_PrimaryAxis(::VROSC::NoteBoard::Axis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::set_PrimaryAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PrimaryAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldParameters.get_PrimaryScale
::VROSC::Scale VROSC::NoteFieldParameters::get_PrimaryScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::get_PrimaryScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PrimaryScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::Scale, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldParameters.set_PrimaryScale
void VROSC::NoteFieldParameters::set_PrimaryScale(::VROSC::Scale value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::set_PrimaryScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PrimaryScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldParameters.get_SecondaryAxisSteps
int VROSC::NoteFieldParameters::get_SecondaryAxisSteps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::get_SecondaryAxisSteps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SecondaryAxisSteps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldParameters.set_SecondaryAxisSteps
void VROSC::NoteFieldParameters::set_SecondaryAxisSteps(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::set_SecondaryAxisSteps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SecondaryAxisSteps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldParameters.get_TertiaryAxisSteps
int VROSC::NoteFieldParameters::get_TertiaryAxisSteps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::get_TertiaryAxisSteps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TertiaryAxisSteps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldParameters.set_TertiaryAxisSteps
void VROSC::NoteFieldParameters::set_TertiaryAxisSteps(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::set_TertiaryAxisSteps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TertiaryAxisSteps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldParameters.SetFieldCount
void VROSC::NoteFieldParameters::SetFieldCount(int x, int y, int z) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::SetFieldCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFieldCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(z)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, x, y, z);
}
// Autogenerated method: VROSC.NoteFieldParameters.SetValidNotes
void VROSC::NoteFieldParameters::SetValidNotes(::System::Collections::Generic::List_1<int>* validNotesX, ::System::Collections::Generic::List_1<int>* validNotesY, ::System::Collections::Generic::List_1<int>* validNotesZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::SetValidNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValidNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(validNotesX), ::il2cpp_utils::ExtractType(validNotesY), ::il2cpp_utils::ExtractType(validNotesZ)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, validNotesX, validNotesY, validNotesZ);
}
// Autogenerated method: VROSC.NoteFieldParameters.SetPriorityOfAxes
void VROSC::NoteFieldParameters::SetPriorityOfAxes(::VROSC::NoteBoard::Axis primaryAxis, ::VROSC::Scale primaryScale, int secondaryAxisSteps, int tertiaryAxisSteps) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::SetPriorityOfAxes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPriorityOfAxes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(primaryAxis), ::il2cpp_utils::ExtractType(primaryScale), ::il2cpp_utils::ExtractType(secondaryAxisSteps), ::il2cpp_utils::ExtractType(tertiaryAxisSteps)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, primaryAxis, primaryScale, secondaryAxisSteps, tertiaryAxisSteps);
}
// Autogenerated method: VROSC.NoteFieldParameters.SetValidNotes
void VROSC::NoteFieldParameters::SetValidNotes(::ArrayW<::VROSC::NoteBoard::NoteAxis*> noteAxes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::SetValidNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValidNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteAxes)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteAxes);
}
// Autogenerated method: VROSC.NoteFieldParameters.SetPriorityOfAxes
void VROSC::NoteFieldParameters::SetPriorityOfAxes(::ArrayW<::VROSC::NoteBoard::NoteAxis*> noteAxes, ::VROSC::NoteBoard::Axis primaryAxis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::SetPriorityOfAxes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPriorityOfAxes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteAxes), ::il2cpp_utils::ExtractType(primaryAxis)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteAxes, primaryAxis);
}
// Autogenerated method: VROSC.NoteFieldParameters.IsOnScale
bool VROSC::NoteFieldParameters::IsOnScale(int midiNote, ::VROSC::Scale scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::IsOnScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VROSC", "NoteFieldParameters", "IsOnScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(midiNote), ::il2cpp_utils::ExtractType(scale)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, midiNote, scale);
}
// Autogenerated method: VROSC.NoteFieldParameters.GetMidiNoteNumber
int VROSC::NoteFieldParameters::GetMidiNoteNumber(::VROSC::Note note, int octave) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::GetMidiNoteNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VROSC", "NoteFieldParameters", "GetMidiNoteNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(note), ::il2cpp_utils::ExtractType(octave)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, note, octave);
}
// Autogenerated method: VROSC.NoteFieldParameters.GetTransposedNote
int VROSC::NoteFieldParameters::GetTransposedNote(int primaryAxisCurrentValue, int secondaryAxisCurrentValue, int tertiaryAxisCurrentValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::GetTransposedNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTransposedNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(primaryAxisCurrentValue), ::il2cpp_utils::ExtractType(secondaryAxisCurrentValue), ::il2cpp_utils::ExtractType(tertiaryAxisCurrentValue)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, primaryAxisCurrentValue, secondaryAxisCurrentValue, tertiaryAxisCurrentValue);
}
// Autogenerated method: VROSC.NoteFieldParameters.TransposeNoteByScaleSteps
int VROSC::NoteFieldParameters::TransposeNoteByScaleSteps(int note, int steps, ::VROSC::Scale scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::TransposeNoteByScaleSteps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransposeNoteByScaleSteps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(note), ::il2cpp_utils::ExtractType(steps), ::il2cpp_utils::ExtractType(scale)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, note, steps, scale);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteFieldParameters/VROSC.Axis
#include "VROSC/NoteFieldParameters_Axis.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: VROSC.NoteBoard/VROSC.NoteAxis
#include "VROSC/NoteBoard_NoteAxis.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <FieldCount>k__BackingField
[[deprecated("Use field access instead!")]] int& VROSC::NoteFieldParameters::Axis::dyn_$FieldCount$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::Axis::dyn_$FieldCount$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<FieldCount>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Int32> <ValidNotes>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& VROSC::NoteFieldParameters::Axis::dyn_$ValidNotes$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::Axis::dyn_$ValidNotes$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ValidNotes>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteFieldParameters/VROSC.Axis.get_FieldCount
int VROSC::NoteFieldParameters::Axis::get_FieldCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::Axis::get_FieldCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FieldCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldParameters/VROSC.Axis.set_FieldCount
void VROSC::NoteFieldParameters::Axis::set_FieldCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::Axis::set_FieldCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FieldCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldParameters/VROSC.Axis.get_ValidNotes
::System::Collections::Generic::List_1<int>* VROSC::NoteFieldParameters::Axis::get_ValidNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::Axis::get_ValidNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ValidNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<int>*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteFieldParameters/VROSC.Axis.set_ValidNotes
void VROSC::NoteFieldParameters::Axis::set_ValidNotes(::System::Collections::Generic::List_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::Axis::set_ValidNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ValidNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.NoteFieldParameters/VROSC.Axis.SetCount
void VROSC::NoteFieldParameters::Axis::SetCount(int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::Axis::SetCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, count);
}
// Autogenerated method: VROSC.NoteFieldParameters/VROSC.Axis.SetValidNotes
void VROSC::NoteFieldParameters::Axis::SetValidNotes(::System::Collections::Generic::List_1<int>* validNotes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::Axis::SetValidNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValidNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(validNotes)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, validNotes);
}
// Autogenerated method: VROSC.NoteFieldParameters/VROSC.Axis.FindValidNotes
void VROSC::NoteFieldParameters::Axis::FindValidNotes(::VROSC::NoteBoard::NoteAxis* noteAxis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::Axis::FindValidNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindValidNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteAxis)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteAxis);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.TransmissionData
#include "VROSC/TransmissionData.hpp"
// Including type: VROSC.NoteBoardNote
#include "VROSC/NoteBoardNote.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: VROSC.NoteBoardNoteController
#include "VROSC/NoteBoardNoteController.hpp"
// Including type: VROSC.NetNoteboard
#include "VROSC/NetNoteboard.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.NoteBoardNote _noteBoardNote
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNote*& VROSC::TransmissionData::dyn__noteBoardNote() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransmissionData::dyn__noteBoardNote");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteBoardNote"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoardNote**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _invertedInfluence
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& VROSC::TransmissionData::dyn__invertedInfluence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransmissionData::dyn__invertedInfluence");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_invertedInfluence"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fullInfluence
[[deprecated("Use field access instead!")]] float& VROSC::TransmissionData::dyn__fullInfluence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransmissionData::dyn__fullInfluence");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fullInfluence"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _hoverInfluence
[[deprecated("Use field access instead!")]] float& VROSC::TransmissionData::dyn__hoverInfluence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransmissionData::dyn__hoverInfluence");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hoverInfluence"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.TransmissionData..ctor
VROSC::TransmissionData::TransmissionData(::VROSC::NoteBoardNote* noteBoardNote, ::UnityEngine::Vector3 invertedInfluence) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransmissionData::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteBoardNote), ::il2cpp_utils::ExtractType(invertedInfluence)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteBoardNote, invertedInfluence);
}
// Autogenerated method: VROSC.TransmissionData..ctor
// ABORTED elsewhere.  VROSC::TransmissionData::TransmissionData(::VROSC::NoteBoardNote* noteBoardNote, ::UnityEngine::Vector3 influence, float fullInfluence, float hoverInfluence)
// Autogenerated method: VROSC.TransmissionData.Transmit
void VROSC::TransmissionData::Transmit(::UnityEngine::Vector3 power, ::VROSC::NotefieldColorSettings::SpreadType spread) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransmissionData::Transmit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Transmit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(power), ::il2cpp_utils::ExtractType(spread)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, power, spread);
}
// Autogenerated method: VROSC.TransmissionData.TransmitHovering
void VROSC::TransmissionData::TransmitHovering(float hoveringAmount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransmissionData::TransmitHovering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TransmitHovering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hoveringAmount)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hoveringAmount);
}
// Autogenerated method: VROSC.TransmissionData.Draw
void VROSC::TransmissionData::Draw(::UnityEngine::Vector3 source) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransmissionData::Draw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Draw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, source);
}
// Autogenerated method: VROSC.TransmissionData.GetTransmissionData
::System::Collections::Generic::List_1<::VROSC::TransmissionData>* VROSC::TransmissionData::GetTransmissionData(::VROSC::NoteBoardNoteController* controller, int noteNumberX, int noteNumberY, int noteNumberZ, ::VROSC::NotefieldColorSettings* settings, ::ArrayW<::VROSC::NoteBoardNote*> allNotes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransmissionData::GetTransmissionData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VROSC", "TransmissionData", "GetTransmissionData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controller), ::il2cpp_utils::ExtractType(noteNumberX), ::il2cpp_utils::ExtractType(noteNumberY), ::il2cpp_utils::ExtractType(noteNumberZ), ::il2cpp_utils::ExtractType(settings), ::il2cpp_utils::ExtractType(allNotes)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::VROSC::TransmissionData>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, controller, noteNumberX, noteNumberY, noteNumberZ, settings, allNotes);
}
// Autogenerated method: VROSC.TransmissionData.GetSameData
::VROSC::TransmissionData VROSC::TransmissionData::GetSameData(::VROSC::NoteBoardNote* otherNote, ::VROSC::NotefieldColorSettings* settings, int note, int index, float step, ::UnityEngine::Vector3 axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransmissionData::GetSameData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VROSC", "TransmissionData", "GetSameData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(otherNote), ::il2cpp_utils::ExtractType(settings), ::il2cpp_utils::ExtractType(note), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(step), ::il2cpp_utils::ExtractType(axis)})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::TransmissionData, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, otherNote, settings, note, index, step, axis);
}
// Autogenerated method: VROSC.TransmissionData.GetTransmissionDataXY
::System::Collections::Generic::List_1<::VROSC::TransmissionData>* VROSC::TransmissionData::GetTransmissionDataXY(::VROSC::NetNoteboard* controller, int noteNumberX, int noteNumberY, ::VROSC::NotefieldColorSettings* settings, ::ArrayW<::VROSC::NoteBoardNote*> XYNotes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransmissionData::GetTransmissionDataXY");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VROSC", "TransmissionData", "GetTransmissionDataXY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controller), ::il2cpp_utils::ExtractType(noteNumberX), ::il2cpp_utils::ExtractType(noteNumberY), ::il2cpp_utils::ExtractType(settings), ::il2cpp_utils::ExtractType(XYNotes)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::VROSC::TransmissionData>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, controller, noteNumberX, noteNumberY, settings, XYNotes);
}
// Autogenerated method: VROSC.TransmissionData.GetTransmissionDataXZ
::System::Collections::Generic::List_1<::VROSC::TransmissionData>* VROSC::TransmissionData::GetTransmissionDataXZ(::VROSC::NetNoteboard* controller, int noteNumberX, int noteNumberZ, ::VROSC::NotefieldColorSettings* settings, ::ArrayW<::VROSC::NoteBoardNote*> XZNotes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransmissionData::GetTransmissionDataXZ");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VROSC", "TransmissionData", "GetTransmissionDataXZ", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controller), ::il2cpp_utils::ExtractType(noteNumberX), ::il2cpp_utils::ExtractType(noteNumberZ), ::il2cpp_utils::ExtractType(settings), ::il2cpp_utils::ExtractType(XZNotes)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::VROSC::TransmissionData>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, controller, noteNumberX, noteNumberZ, settings, XZNotes);
}
// Autogenerated method: VROSC.TransmissionData.GetTransmissionDataYZ
::System::Collections::Generic::List_1<::VROSC::TransmissionData>* VROSC::TransmissionData::GetTransmissionDataYZ(::VROSC::NetNoteboard* controller, int noteNumberY, int noteNumberZ, ::VROSC::NotefieldColorSettings* settings, ::ArrayW<::VROSC::NoteBoardNote*> YZNotes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransmissionData::GetTransmissionDataYZ");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VROSC", "TransmissionData", "GetTransmissionDataYZ", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controller), ::il2cpp_utils::ExtractType(noteNumberY), ::il2cpp_utils::ExtractType(noteNumberZ), ::il2cpp_utils::ExtractType(settings), ::il2cpp_utils::ExtractType(YZNotes)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::VROSC::TransmissionData>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, controller, noteNumberY, noteNumberZ, settings, YZNotes);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.MushroomColors
#include "VROSC/MushroomColors.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VROSC.MushroomColors.OnEnable
void VROSC::MushroomColors::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MushroomColors::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MushroomColors.OnDisable
void VROSC::MushroomColors::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MushroomColors::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MushroomColors.Clear
void VROSC::MushroomColors::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MushroomColors::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteBoardNoteVisualController
#include "VROSC/NoteBoardNoteVisualController.hpp"
// Including type: VROSC.NoteBoardNote
#include "VROSC/NoteBoardNote.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected VROSC.NoteBoardNote _noteBoardNote
[[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNote*& VROSC::NoteBoardNoteVisualController::dyn__noteBoardNote() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteVisualController::dyn__noteBoardNote");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteBoardNote"))->offset;
  return *reinterpret_cast<::VROSC::NoteBoardNote**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteBoardNoteVisualController.Setup
void VROSC::NoteBoardNoteVisualController::Setup(::VROSC::NoteBoardNote* noteBoardNote, bool octave, bool isOdd) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteVisualController::Setup");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteVisualController*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteBoardNote, octave, isOdd);
}
// Autogenerated method: VROSC.NoteBoardNoteVisualController.UpdateVisuals
void VROSC::NoteBoardNoteVisualController::UpdateVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteVisualController::UpdateVisuals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteVisualController*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteBoardNoteVisualController.SetPlaying
void VROSC::NoteBoardNoteVisualController::SetPlaying(bool isPlaying) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteVisualController::SetPlaying");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteVisualController*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isPlaying);
}
// Autogenerated method: VROSC.NoteBoardNoteVisualController.SetRestingColor
void VROSC::NoteBoardNoteVisualController::SetRestingColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteVisualController::SetRestingColor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteVisualController*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteMeshChangerController
#include "VROSC/NoteMeshChangerController.hpp"
// Including type: VROSC.NotefieldColorSettings
#include "VROSC/NotefieldColorSettings.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: VROSC.NoteBoardNote
#include "VROSC/NoteBoardNote.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.NotefieldColorSettings _colorSettings
[[deprecated("Use field access instead!")]] ::VROSC::NotefieldColorSettings*& VROSC::NoteMeshChangerController::dyn__colorSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteMeshChangerController::dyn__colorSettings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorSettings"))->offset;
  return *reinterpret_cast<::VROSC::NotefieldColorSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _sendMultiNoteData
[[deprecated("Use field access instead!")]] bool& VROSC::NoteMeshChangerController::dyn__sendMultiNoteData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteMeshChangerController::dyn__sendMultiNoteData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sendMultiNoteData"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _restingColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& VROSC::NoteMeshChangerController::dyn__restingColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteMeshChangerController::dyn__restingColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_restingColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _animating
[[deprecated("Use field access instead!")]] bool& VROSC::NoteMeshChangerController::dyn__animating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteMeshChangerController::dyn__animating");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animating"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer _renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& VROSC::NoteMeshChangerController::dyn__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteMeshChangerController::dyn__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _note
[[deprecated("Use field access instead!")]] float& VROSC::NoteMeshChangerController::dyn__note() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteMeshChangerController::dyn__note");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_note"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MaterialPropertyBlock _propBlock
[[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& VROSC::NoteMeshChangerController::dyn__propBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteMeshChangerController::dyn__propBlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_propBlock"))->offset;
  return *reinterpret_cast<::UnityEngine::MaterialPropertyBlock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteMeshChangerController.CreateBlock
void VROSC::NoteMeshChangerController::CreateBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteMeshChangerController::CreateBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.NoteMeshChangerController.SetPlayingColor
void VROSC::NoteMeshChangerController::SetPlayingColor(::UnityEngine::Vector3 power, float velocity, float highlight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteMeshChangerController::SetPlayingColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayingColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(power), ::il2cpp_utils::ExtractType(velocity), ::il2cpp_utils::ExtractType(highlight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, power, velocity, highlight);
}
// Autogenerated method: VROSC.NoteMeshChangerController.Setup
void VROSC::NoteMeshChangerController::Setup(::VROSC::NoteBoardNote* noteField, bool octave, bool isOdd) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteMeshChangerController::Setup");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteVisualController*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteField, octave, isOdd);
}
// Autogenerated method: VROSC.NoteMeshChangerController.SetRestingColor
void VROSC::NoteMeshChangerController::SetRestingColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteMeshChangerController::SetRestingColor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteVisualController*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: VROSC.NoteMeshChangerController.UpdateVisuals
void VROSC::NoteMeshChangerController::UpdateVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteMeshChangerController::UpdateVisuals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteVisualController*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.NoteSwitchMaterialController
#include "VROSC/NoteSwitchMaterialController.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: VROSC.NoteBoardNote
#include "VROSC/NoteBoardNote.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer _renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& VROSC::NoteSwitchMaterialController::dyn__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteSwitchMaterialController::dyn__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _restingOctaveMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& VROSC::NoteSwitchMaterialController::dyn__restingOctaveMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteSwitchMaterialController::dyn__restingOctaveMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_restingOctaveMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _restingOddMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& VROSC::NoteSwitchMaterialController::dyn__restingOddMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteSwitchMaterialController::dyn__restingOddMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_restingOddMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _restingEvenMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& VROSC::NoteSwitchMaterialController::dyn__restingEvenMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteSwitchMaterialController::dyn__restingEvenMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_restingEvenMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _playingMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& VROSC::NoteSwitchMaterialController::dyn__playingMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteSwitchMaterialController::dyn__playingMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playingMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _restingMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& VROSC::NoteSwitchMaterialController::dyn__restingMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteSwitchMaterialController::dyn__restingMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_restingMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.NoteSwitchMaterialController.Setup
void VROSC::NoteSwitchMaterialController::Setup(::VROSC::NoteBoardNote* noteField, bool octave, bool isOdd) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteSwitchMaterialController::Setup");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteVisualController*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, noteField, octave, isOdd);
}
// Autogenerated method: VROSC.NoteSwitchMaterialController.SetPlaying
void VROSC::NoteSwitchMaterialController::SetPlaying(bool isPlaying) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteSwitchMaterialController::SetPlaying");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::NoteBoardNoteVisualController*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isPlaying);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.PointingLaser
#include "VROSC/PointingLaser.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.LineRenderer
#include "UnityEngine/LineRenderer.hpp"
// Including type: VROSC.SmoothMovement
#include "VROSC/SmoothMovement.hpp"
// Including type: VROSC.InputDevice
#include "VROSC/InputDevice.hpp"
// Including type: VROSC.InputSettings
#include "VROSC/InputSettings.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Gradient
#include "UnityEngine/Gradient.hpp"
// Including type: UnityEngine.GradientAlphaKey
#include "UnityEngine/GradientAlphaKey.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _endDot
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& VROSC::PointingLaser::dyn__endDot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::dyn__endDot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_endDot"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LineRenderer _laser
[[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& VROSC::PointingLaser::dyn__laser() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::dyn__laser");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_laser"))->offset;
  return *reinterpret_cast<::UnityEngine::LineRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.SmoothMovement _smoothMovement
[[deprecated("Use field access instead!")]] ::VROSC::SmoothMovement*& VROSC::PointingLaser::dyn__smoothMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::dyn__smoothMovement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_smoothMovement"))->offset;
  return *reinterpret_cast<::VROSC::SmoothMovement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.InputDevice _device
[[deprecated("Use field access instead!")]] ::VROSC::InputDevice*& VROSC::PointingLaser::dyn__device() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::dyn__device");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_device"))->offset;
  return *reinterpret_cast<::VROSC::InputDevice**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.InputSettings _settings
[[deprecated("Use field access instead!")]] ::VROSC::InputSettings*& VROSC::PointingLaser::dyn__settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::dyn__settings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_settings"))->offset;
  return *reinterpret_cast<::VROSC::InputSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<VROSC.PointingLaser/VROSC.DisablingReason> _disablingReasons
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VROSC::PointingLaser::DisablingReason>*& VROSC::PointingLaser::dyn__disablingReasons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::dyn__disablingReasons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disablingReasons"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::VROSC::PointingLaser::DisablingReason>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`2<System.Boolean,VROSC.PointingLaser/VROSC.DisablingReason> OnPointingDisabledChanged
[[deprecated("Use field access instead!")]] ::System::Action_2<bool, ::VROSC::PointingLaser::DisablingReason>*& VROSC::PointingLaser::dyn_OnPointingDisabledChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::dyn_OnPointingDisabledChanged");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnPointingDisabledChanged"))->offset;
  return *reinterpret_cast<::System::Action_2<bool, ::VROSC::PointingLaser::DisablingReason>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <PointingDisabled>k__BackingField
[[deprecated("Use field access instead!")]] bool& VROSC::PointingLaser::dyn_$PointingDisabled$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::dyn_$PointingDisabled$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PointingDisabled>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <Dimmed>k__BackingField
[[deprecated("Use field access instead!")]] bool& VROSC::PointingLaser::dyn_$Dimmed$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::dyn_$Dimmed$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Dimmed>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] _laserPositions
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& VROSC::PointingLaser::dyn__laserPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::dyn__laserPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_laserPositions"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Gradient _normalGradient
[[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& VROSC::PointingLaser::dyn__normalGradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::dyn__normalGradient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_normalGradient"))->offset;
  return *reinterpret_cast<::UnityEngine::Gradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Gradient _dimGradient
[[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& VROSC::PointingLaser::dyn__dimGradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::dyn__dimGradient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dimGradient"))->offset;
  return *reinterpret_cast<::UnityEngine::Gradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Gradient _fadingGradient
[[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& VROSC::PointingLaser::dyn__fadingGradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::dyn__fadingGradient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadingGradient"))->offset;
  return *reinterpret_cast<::UnityEngine::Gradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fadeTime
[[deprecated("Use field access instead!")]] float& VROSC::PointingLaser::dyn__fadeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::dyn__fadeTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fadingTimer
[[deprecated("Use field access instead!")]] float& VROSC::PointingLaser::dyn__fadingTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::dyn__fadingTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadingTimer"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.PointingLaser.get_PointingDisabled
bool VROSC::PointingLaser::get_PointingDisabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::get_PointingDisabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PointingDisabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.PointingLaser.set_PointingDisabled
void VROSC::PointingLaser::set_PointingDisabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::set_PointingDisabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PointingDisabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.PointingLaser.get_Dimmed
bool VROSC::PointingLaser::get_Dimmed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::get_Dimmed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Dimmed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.PointingLaser.set_Dimmed
void VROSC::PointingLaser::set_Dimmed(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::set_Dimmed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Dimmed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.PointingLaser.SetPointingDisabled
void VROSC::PointingLaser::SetPointingDisabled(bool disabled, ::VROSC::PointingLaser::DisablingReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::SetPointingDisabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPointingDisabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disabled), ::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disabled, reason);
}
// Autogenerated method: VROSC.PointingLaser.Setup
void VROSC::PointingLaser::Setup(::VROSC::InputDevice* controller, ::VROSC::InputSettings* settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controller), ::il2cpp_utils::ExtractType(settings)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, controller, settings);
}
// Autogenerated method: VROSC.PointingLaser.UpdatePointingDisabled
void VROSC::PointingLaser::UpdatePointingDisabled(bool disabled, ::VROSC::PointingLaser::DisablingReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::UpdatePointingDisabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePointingDisabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disabled), ::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disabled, reason);
}
// Autogenerated method: VROSC.PointingLaser.SetDotPosition
void VROSC::PointingLaser::SetDotPosition(::UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::SetDotPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDotPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: VROSC.PointingLaser.SetDimmed
void VROSC::PointingLaser::SetDimmed(bool dimmed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::SetDimmed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDimmed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dimmed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dimmed);
}
// Autogenerated method: VROSC.PointingLaser.Update
void VROSC::PointingLaser::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.PointingLaser.LerpAlphaKey
::UnityEngine::GradientAlphaKey VROSC::PointingLaser::LerpAlphaKey(::UnityEngine::Gradient* a, ::UnityEngine::Gradient* b, int key, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::LerpAlphaKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LerpAlphaKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GradientAlphaKey, false>(this, ___internal__method, a, b, key, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.PointingLaser/VROSC.DisablingReason
#include "VROSC/PointingLaser.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VROSC.PointingLaser/VROSC.DisablingReason GrabbingObject
::VROSC::PointingLaser::DisablingReason VROSC::PointingLaser::DisablingReason::_get_GrabbingObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::DisablingReason::_get_GrabbingObject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::PointingLaser::DisablingReason>("VROSC", "PointingLaser/DisablingReason", "GrabbingObject"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.PointingLaser/VROSC.DisablingReason GrabbingObject
void VROSC::PointingLaser::DisablingReason::_set_GrabbingObject(::VROSC::PointingLaser::DisablingReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::DisablingReason::_set_GrabbingObject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "PointingLaser/DisablingReason", "GrabbingObject", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.PointingLaser/VROSC.DisablingReason PressingObject
::VROSC::PointingLaser::DisablingReason VROSC::PointingLaser::DisablingReason::_get_PressingObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::DisablingReason::_get_PressingObject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::PointingLaser::DisablingReason>("VROSC", "PointingLaser/DisablingReason", "PressingObject"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.PointingLaser/VROSC.DisablingReason PressingObject
void VROSC::PointingLaser::DisablingReason::_set_PressingObject(::VROSC::PointingLaser::DisablingReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::DisablingReason::_set_PressingObject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "PointingLaser/DisablingReason", "PressingObject", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.PointingLaser/VROSC.DisablingReason HoveringObject
::VROSC::PointingLaser::DisablingReason VROSC::PointingLaser::DisablingReason::_get_HoveringObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::DisablingReason::_get_HoveringObject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::PointingLaser::DisablingReason>("VROSC", "PointingLaser/DisablingReason", "HoveringObject"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.PointingLaser/VROSC.DisablingReason HoveringObject
void VROSC::PointingLaser::DisablingReason::_set_HoveringObject(::VROSC::PointingLaser::DisablingReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::DisablingReason::_set_HoveringObject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "PointingLaser/DisablingReason", "HoveringObject", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.PointingLaser/VROSC.DisablingReason HoveringObjectDisablesPointing
::VROSC::PointingLaser::DisablingReason VROSC::PointingLaser::DisablingReason::_get_HoveringObjectDisablesPointing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::DisablingReason::_get_HoveringObjectDisablesPointing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::PointingLaser::DisablingReason>("VROSC", "PointingLaser/DisablingReason", "HoveringObjectDisablesPointing"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.PointingLaser/VROSC.DisablingReason HoveringObjectDisablesPointing
void VROSC::PointingLaser::DisablingReason::_set_HoveringObjectDisablesPointing(::VROSC::PointingLaser::DisablingReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::DisablingReason::_set_HoveringObjectDisablesPointing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "PointingLaser/DisablingReason", "HoveringObjectDisablesPointing", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.PointingLaser/VROSC.DisablingReason DashboardOpen
::VROSC::PointingLaser::DisablingReason VROSC::PointingLaser::DisablingReason::_get_DashboardOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::DisablingReason::_get_DashboardOpen");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::PointingLaser::DisablingReason>("VROSC", "PointingLaser/DisablingReason", "DashboardOpen"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.PointingLaser/VROSC.DisablingReason DashboardOpen
void VROSC::PointingLaser::DisablingReason::_set_DashboardOpen(::VROSC::PointingLaser::DisablingReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::DisablingReason::_set_DashboardOpen");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "PointingLaser/DisablingReason", "DashboardOpen", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.PointingLaser/VROSC.DisablingReason InsideInstrument
::VROSC::PointingLaser::DisablingReason VROSC::PointingLaser::DisablingReason::_get_InsideInstrument() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::DisablingReason::_get_InsideInstrument");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::PointingLaser::DisablingReason>("VROSC", "PointingLaser/DisablingReason", "InsideInstrument"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.PointingLaser/VROSC.DisablingReason InsideInstrument
void VROSC::PointingLaser::DisablingReason::_set_InsideInstrument(::VROSC::PointingLaser::DisablingReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::DisablingReason::_set_InsideInstrument");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "PointingLaser/DisablingReason", "InsideInstrument", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.PointingLaser/VROSC.DisablingReason UsingUIHelper
::VROSC::PointingLaser::DisablingReason VROSC::PointingLaser::DisablingReason::_get_UsingUIHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::DisablingReason::_get_UsingUIHelper");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::PointingLaser::DisablingReason>("VROSC", "PointingLaser/DisablingReason", "UsingUIHelper"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.PointingLaser/VROSC.DisablingReason UsingUIHelper
void VROSC::PointingLaser::DisablingReason::_set_UsingUIHelper(::VROSC::PointingLaser::DisablingReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::DisablingReason::_set_UsingUIHelper");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "PointingLaser/DisablingReason", "UsingUIHelper", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VROSC::PointingLaser::DisablingReason::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::DisablingReason::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.GlobalColorAdjustableMeshEffect
#include "VROSC/GlobalColorAdjustableMeshEffect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel _channel
[[deprecated("Use field access instead!")]] ::VROSC::GlobalColorAdjustableMeshEffect::Channel& VROSC::GlobalColorAdjustableMeshEffect::dyn__channel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorAdjustableMeshEffect::dyn__channel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_channel"))->offset;
  return *reinterpret_cast<::VROSC::GlobalColorAdjustableMeshEffect::Channel*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _setColor
[[deprecated("Use field access instead!")]] bool& VROSC::GlobalColorAdjustableMeshEffect::dyn__setColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorAdjustableMeshEffect::dyn__setColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setColor"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& VROSC::GlobalColorAdjustableMeshEffect::dyn__color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorAdjustableMeshEffect::dyn__color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2[] _uv
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& VROSC::GlobalColorAdjustableMeshEffect::dyn__uv() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorAdjustableMeshEffect::dyn__uv");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_uv"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector2>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.GlobalColorAdjustableMeshEffect.GetUVByChannel
::UnityEngine::Vector2 VROSC::GlobalColorAdjustableMeshEffect::GetUVByChannel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorAdjustableMeshEffect::GetUVByChannel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUVByChannel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.GlobalColorAdjustableMeshEffect.OnCreation
void VROSC::GlobalColorAdjustableMeshEffect::OnCreation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorAdjustableMeshEffect::OnCreation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::AdjustableMeshEffect*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel
#include "VROSC/GlobalColorAdjustableMeshEffect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel1
::VROSC::GlobalColorAdjustableMeshEffect::Channel VROSC::GlobalColorAdjustableMeshEffect::Channel::_get_Channel1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorAdjustableMeshEffect::Channel::_get_Channel1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::GlobalColorAdjustableMeshEffect::Channel>("VROSC", "GlobalColorAdjustableMeshEffect/Channel", "Channel1"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel1
void VROSC::GlobalColorAdjustableMeshEffect::Channel::_set_Channel1(::VROSC::GlobalColorAdjustableMeshEffect::Channel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorAdjustableMeshEffect::Channel::_set_Channel1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "GlobalColorAdjustableMeshEffect/Channel", "Channel1", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel2
::VROSC::GlobalColorAdjustableMeshEffect::Channel VROSC::GlobalColorAdjustableMeshEffect::Channel::_get_Channel2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorAdjustableMeshEffect::Channel::_get_Channel2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::GlobalColorAdjustableMeshEffect::Channel>("VROSC", "GlobalColorAdjustableMeshEffect/Channel", "Channel2"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel2
void VROSC::GlobalColorAdjustableMeshEffect::Channel::_set_Channel2(::VROSC::GlobalColorAdjustableMeshEffect::Channel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorAdjustableMeshEffect::Channel::_set_Channel2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "GlobalColorAdjustableMeshEffect/Channel", "Channel2", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel3
::VROSC::GlobalColorAdjustableMeshEffect::Channel VROSC::GlobalColorAdjustableMeshEffect::Channel::_get_Channel3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorAdjustableMeshEffect::Channel::_get_Channel3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::GlobalColorAdjustableMeshEffect::Channel>("VROSC", "GlobalColorAdjustableMeshEffect/Channel", "Channel3"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel3
void VROSC::GlobalColorAdjustableMeshEffect::Channel::_set_Channel3(::VROSC::GlobalColorAdjustableMeshEffect::Channel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorAdjustableMeshEffect::Channel::_set_Channel3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "GlobalColorAdjustableMeshEffect/Channel", "Channel3", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel4
::VROSC::GlobalColorAdjustableMeshEffect::Channel VROSC::GlobalColorAdjustableMeshEffect::Channel::_get_Channel4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorAdjustableMeshEffect::Channel::_get_Channel4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::GlobalColorAdjustableMeshEffect::Channel>("VROSC", "GlobalColorAdjustableMeshEffect/Channel", "Channel4"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel4
void VROSC::GlobalColorAdjustableMeshEffect::Channel::_set_Channel4(::VROSC::GlobalColorAdjustableMeshEffect::Channel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorAdjustableMeshEffect::Channel::_set_Channel4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "GlobalColorAdjustableMeshEffect/Channel", "Channel4", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel None
::VROSC::GlobalColorAdjustableMeshEffect::Channel VROSC::GlobalColorAdjustableMeshEffect::Channel::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorAdjustableMeshEffect::Channel::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::GlobalColorAdjustableMeshEffect::Channel>("VROSC", "GlobalColorAdjustableMeshEffect/Channel", "None"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel None
void VROSC::GlobalColorAdjustableMeshEffect::Channel::_set_None(::VROSC::GlobalColorAdjustableMeshEffect::Channel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorAdjustableMeshEffect::Channel::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "GlobalColorAdjustableMeshEffect/Channel", "None", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VROSC::GlobalColorAdjustableMeshEffect::Channel::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorAdjustableMeshEffect::Channel::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.GlobalColorSetParticleStartColor
#include "VROSC/GlobalColorSetParticleStartColor.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.GlobalColorSetParticleStartColor/VROSC.Channel _channel
[[deprecated("Use field access instead!")]] ::VROSC::GlobalColorSetParticleStartColor::Channel& VROSC::GlobalColorSetParticleStartColor::dyn__channel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorSetParticleStartColor::dyn__channel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_channel"))->offset;
  return *reinterpret_cast<::VROSC::GlobalColorSetParticleStartColor::Channel*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _particleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& VROSC::GlobalColorSetParticleStartColor::dyn__particleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorSetParticleStartColor::dyn__particleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_particleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.GlobalColorSetParticleStartColor.OnEnable
void VROSC::GlobalColorSetParticleStartColor::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorSetParticleStartColor::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.GlobalColorSetParticleStartColor.OnDisable
void VROSC::GlobalColorSetParticleStartColor::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorSetParticleStartColor::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.GlobalColorSetParticleStartColor.ColorChanged
void VROSC::GlobalColorSetParticleStartColor::ColorChanged(::UnityEngine::Color color, float multiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorSetParticleStartColor::ColorChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(multiplier)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color, multiplier);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.GlobalColorSetParticleStartColor/VROSC.Channel
#include "VROSC/GlobalColorSetParticleStartColor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VROSC.GlobalColorSetParticleStartColor/VROSC.Channel Channel1
::VROSC::GlobalColorSetParticleStartColor::Channel VROSC::GlobalColorSetParticleStartColor::Channel::_get_Channel1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorSetParticleStartColor::Channel::_get_Channel1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::GlobalColorSetParticleStartColor::Channel>("VROSC", "GlobalColorSetParticleStartColor/Channel", "Channel1"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.GlobalColorSetParticleStartColor/VROSC.Channel Channel1
void VROSC::GlobalColorSetParticleStartColor::Channel::_set_Channel1(::VROSC::GlobalColorSetParticleStartColor::Channel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorSetParticleStartColor::Channel::_set_Channel1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "GlobalColorSetParticleStartColor/Channel", "Channel1", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.GlobalColorSetParticleStartColor/VROSC.Channel Channel2
::VROSC::GlobalColorSetParticleStartColor::Channel VROSC::GlobalColorSetParticleStartColor::Channel::_get_Channel2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorSetParticleStartColor::Channel::_get_Channel2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::GlobalColorSetParticleStartColor::Channel>("VROSC", "GlobalColorSetParticleStartColor/Channel", "Channel2"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.GlobalColorSetParticleStartColor/VROSC.Channel Channel2
void VROSC::GlobalColorSetParticleStartColor::Channel::_set_Channel2(::VROSC::GlobalColorSetParticleStartColor::Channel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorSetParticleStartColor::Channel::_set_Channel2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "GlobalColorSetParticleStartColor/Channel", "Channel2", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.GlobalColorSetParticleStartColor/VROSC.Channel Channel3
::VROSC::GlobalColorSetParticleStartColor::Channel VROSC::GlobalColorSetParticleStartColor::Channel::_get_Channel3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorSetParticleStartColor::Channel::_get_Channel3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::GlobalColorSetParticleStartColor::Channel>("VROSC", "GlobalColorSetParticleStartColor/Channel", "Channel3"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.GlobalColorSetParticleStartColor/VROSC.Channel Channel3
void VROSC::GlobalColorSetParticleStartColor::Channel::_set_Channel3(::VROSC::GlobalColorSetParticleStartColor::Channel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorSetParticleStartColor::Channel::_set_Channel3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "GlobalColorSetParticleStartColor/Channel", "Channel3", value));
}
// Autogenerated static field getter
// Get static field: static public VROSC.GlobalColorSetParticleStartColor/VROSC.Channel Channel4
::VROSC::GlobalColorSetParticleStartColor::Channel VROSC::GlobalColorSetParticleStartColor::Channel::_get_Channel4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorSetParticleStartColor::Channel::_get_Channel4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VROSC::GlobalColorSetParticleStartColor::Channel>("VROSC", "GlobalColorSetParticleStartColor/Channel", "Channel4"));
}
// Autogenerated static field setter
// Set static field: static public VROSC.GlobalColorSetParticleStartColor/VROSC.Channel Channel4
void VROSC::GlobalColorSetParticleStartColor::Channel::_set_Channel4(::VROSC::GlobalColorSetParticleStartColor::Channel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorSetParticleStartColor::Channel::_set_Channel4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VROSC", "GlobalColorSetParticleStartColor/Channel", "Channel4", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VROSC::GlobalColorSetParticleStartColor::Channel::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorSetParticleStartColor::Channel::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.MinMaxFloat
#include "VROSC/MinMaxFloat.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _min
[[deprecated("Use field access instead!")]] float& VROSC::MinMaxFloat::dyn__min() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxFloat::dyn__min");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_min"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _max
[[deprecated("Use field access instead!")]] float& VROSC::MinMaxFloat::dyn__max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxFloat::dyn__max");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_max"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.MinMaxFloat.get_Min
float VROSC::MinMaxFloat::get_Min() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxFloat::get_Min");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Min", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MinMaxFloat.get_Max
float VROSC::MinMaxFloat::get_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxFloat::get_Max");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Max", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MinMaxFloat.get_Range
float VROSC::MinMaxFloat::get_Range() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxFloat::get_Range");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Range", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MinMaxFloat.Random
float VROSC::MinMaxFloat::Random() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxFloat::Random");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Random", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MinMaxFloat.Lerp
float VROSC::MinMaxFloat::Lerp(float amount, bool clamp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxFloat::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(amount), ::il2cpp_utils::ExtractType(clamp)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, amount, clamp);
}
// Autogenerated method: VROSC.MinMaxFloat.InverseLerp
float VROSC::MinMaxFloat::InverseLerp(float amount, bool clamp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxFloat::InverseLerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InverseLerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(amount), ::il2cpp_utils::ExtractType(clamp)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, amount, clamp);
}
// Autogenerated method: VROSC.MinMaxFloat.Clamp
float VROSC::MinMaxFloat::Clamp(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxFloat::Clamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.MinMaxFloat.Invert
void VROSC::MinMaxFloat::Invert() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxFloat::Invert");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.MinMaxInt
#include "VROSC/MinMaxInt.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _min
[[deprecated("Use field access instead!")]] int& VROSC::MinMaxInt::dyn__min() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxInt::dyn__min");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_min"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _max
[[deprecated("Use field access instead!")]] int& VROSC::MinMaxInt::dyn__max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxInt::dyn__max");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_max"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.MinMaxInt.get_Min
int VROSC::MinMaxInt::get_Min() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxInt::get_Min");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Min", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MinMaxInt.get_Max
int VROSC::MinMaxInt::get_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxInt::get_Max");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Max", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MinMaxInt.Random
int VROSC::MinMaxInt::Random() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxInt::Random");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Random", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.MinMaxVector2
#include "VROSC/MinMaxVector2.hpp"
// Including type: VROSC.MinMaxFloat
#include "VROSC/MinMaxFloat.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.MinMaxFloat _x
[[deprecated("Use field access instead!")]] ::VROSC::MinMaxFloat*& VROSC::MinMaxVector2::dyn__x() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector2::dyn__x");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_x"))->offset;
  return *reinterpret_cast<::VROSC::MinMaxFloat**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.MinMaxFloat _y
[[deprecated("Use field access instead!")]] ::VROSC::MinMaxFloat*& VROSC::MinMaxVector2::dyn__y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector2::dyn__y");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_y"))->offset;
  return *reinterpret_cast<::VROSC::MinMaxFloat**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.MinMaxVector2.get_X
::VROSC::MinMaxFloat* VROSC::MinMaxVector2::get_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector2::get_X");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_X", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::MinMaxFloat*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MinMaxVector2.get_Y
::VROSC::MinMaxFloat* VROSC::MinMaxVector2::get_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector2::get_Y");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Y", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VROSC::MinMaxFloat*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MinMaxVector2.get_Min
::UnityEngine::Vector2 VROSC::MinMaxVector2::get_Min() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector2::get_Min");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Min", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MinMaxVector2.get_Max
::UnityEngine::Vector2 VROSC::MinMaxVector2::get_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector2::get_Max");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Max", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MinMaxVector2.Random
::UnityEngine::Vector2 VROSC::MinMaxVector2::Random() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector2::Random");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Random", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MinMaxVector2.Lerp
::UnityEngine::Vector2 VROSC::MinMaxVector2::Lerp(::UnityEngine::Vector2 value, bool clamp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector2::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(clamp)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, value, clamp);
}
// Autogenerated method: VROSC.MinMaxVector2.InverseLerp
::UnityEngine::Vector2 VROSC::MinMaxVector2::InverseLerp(::UnityEngine::Vector2 value, bool clamp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector2::InverseLerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InverseLerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(clamp)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, value, clamp);
}
// Autogenerated method: VROSC.MinMaxVector2.Clamp
::UnityEngine::Vector2 VROSC::MinMaxVector2::Clamp(::UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector2::Clamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.MinMaxVector2.Invert
void VROSC::MinMaxVector2::Invert() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector2::Invert");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.MinMaxVector3
#include "VROSC/MinMaxVector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _min
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& VROSC::MinMaxVector3::dyn__min() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector3::dyn__min");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_min"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _max
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& VROSC::MinMaxVector3::dyn__max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector3::dyn__max");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_max"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.MinMaxVector3.get_Min
::UnityEngine::Vector3 VROSC::MinMaxVector3::get_Min() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector3::get_Min");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Min", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MinMaxVector3.get_Max
::UnityEngine::Vector3 VROSC::MinMaxVector3::get_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector3::get_Max");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Max", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MinMaxVector3.Random
::UnityEngine::Vector3 VROSC::MinMaxVector3::Random(bool uniform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector3::Random");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Random", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uniform)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, uniform);
}
// Autogenerated method: VROSC.MinMaxVector3.Lerp
::UnityEngine::Vector3 VROSC::MinMaxVector3::Lerp(float amount, bool clamp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector3::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(amount), ::il2cpp_utils::ExtractType(clamp)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, amount, clamp);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.MinMaxVector4
#include "VROSC/MinMaxVector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4 _min
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& VROSC::MinMaxVector4::dyn__min() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector4::dyn__min");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_min"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4 _max
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& VROSC::MinMaxVector4::dyn__max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector4::dyn__max");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_max"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.MinMaxVector4.get_Min
::UnityEngine::Vector4 VROSC::MinMaxVector4::get_Min() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector4::get_Min");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Min", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector4, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MinMaxVector4.get_Max
::UnityEngine::Vector4 VROSC::MinMaxVector4::get_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector4::get_Max");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Max", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector4, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.MinMaxVector4.Random
::UnityEngine::Vector4 VROSC::MinMaxVector4::Random(bool uniform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector4::Random");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Random", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uniform)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector4, false>(this, ___internal__method, uniform);
}
// Autogenerated method: VROSC.MinMaxVector4.Lerp
::UnityEngine::Vector4 VROSC::MinMaxVector4::Lerp(float amount, bool clamp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector4::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(amount), ::il2cpp_utils::ExtractType(clamp)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector4, false>(this, ___internal__method, amount, clamp);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.ScreenFade
#include "VROSC/ScreenFade.hpp"
// Including type: VROSC.AdjustableMesh
#include "VROSC/AdjustableMesh.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single <Progress>k__BackingField
[[deprecated("Use field access instead!")]] float& VROSC::ScreenFade::dyn_$Progress$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScreenFade::dyn_$Progress$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Progress>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VROSC.AdjustableMesh _adjustableMesh
[[deprecated("Use field access instead!")]] ::VROSC::AdjustableMesh*& VROSC::ScreenFade::dyn__adjustableMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScreenFade::dyn__adjustableMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_adjustableMesh"))->offset;
  return *reinterpret_cast<::VROSC::AdjustableMesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _targetColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& VROSC::ScreenFade::dyn__targetColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScreenFade::dyn__targetColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _startColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& VROSC::ScreenFade::dyn__startColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScreenFade::dyn__startColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _currentColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& VROSC::ScreenFade::dyn__currentColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScreenFade::dyn__currentColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _fadeCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& VROSC::ScreenFade::dyn__fadeCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScreenFade::dyn__fadeCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _duration
[[deprecated("Use field access instead!")]] float& VROSC::ScreenFade::dyn__duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScreenFade::dyn__duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<UnityEngine.Color> OnColor
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Color>*& VROSC::ScreenFade::dyn_OnColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScreenFade::dyn_OnColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnColor"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::Color>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`2<System.Boolean,UnityEngine.Color> IsFading
[[deprecated("Use field access instead!")]] ::System::Action_2<bool, ::UnityEngine::Color>*& VROSC::ScreenFade::dyn_IsFading() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScreenFade::dyn_IsFading");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IsFading"))->offset;
  return *reinterpret_cast<::System::Action_2<bool, ::UnityEngine::Color>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.ScreenFade.get_Progress
float VROSC::ScreenFade::get_Progress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScreenFade::get_Progress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Progress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ScreenFade.set_Progress
void VROSC::ScreenFade::set_Progress(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScreenFade::set_Progress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Progress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VROSC.ScreenFade.Awake
void VROSC::ScreenFade::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScreenFade::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ScreenFade.Fade
void VROSC::ScreenFade::Fade(::UnityEngine::Color targetColor, float duration, ::UnityEngine::AnimationCurve* fadeCurve) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScreenFade::Fade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetColor), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(fadeCurve)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, targetColor, duration, fadeCurve);
}
// Autogenerated method: VROSC.ScreenFade.SetColor
void VROSC::ScreenFade::SetColor(::UnityEngine::Color color, bool alphaCheck) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScreenFade::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(alphaCheck)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color, alphaCheck);
}
// Autogenerated method: VROSC.ScreenFade.LateUpdate
void VROSC::ScreenFade::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScreenFade::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ScreenFade.SetActive
void VROSC::ScreenFade::SetActive(bool active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScreenFade::SetActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(active)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, active);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.BearVisualizer
#include "VROSC/BearVisualizer.hpp"
// Including type: VROSC.BearVisualizer/VROSC.BeatGradient
#include "VROSC/BearVisualizer_BeatGradient.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.BearVisualizer/VROSC.BeatGradient[] _beatGradients
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::BearVisualizer::BeatGradient*>& VROSC::BearVisualizer::dyn__beatGradients() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::dyn__beatGradients");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatGradients"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::BearVisualizer::BeatGradient*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _darkenOnMirror
[[deprecated("Use field access instead!")]] float& VROSC::BearVisualizer::dyn__darkenOnMirror() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::dyn__darkenOnMirror");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_darkenOnMirror"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.BearVisualizer.OnEnable
void VROSC::BearVisualizer::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.BearVisualizer.SendBeat
void VROSC::BearVisualizer::SendBeat(int beat) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::SendBeat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendBeat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beat)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, beat);
}
// Autogenerated method: VROSC.BearVisualizer.OnDisable
void VROSC::BearVisualizer::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.BearVisualizer/VROSC.BeatGradient
#include "VROSC/BearVisualizer_BeatGradient.hpp"
// Including type: VROSC.BearVisualizer/VROSC.BeatGradient/VROSC.<PerformBeat>d__7
#include "VROSC/BearVisualizer_BeatGradient_-PerformBeat-d__7.hpp"
// Including type: UnityEngine.Gradient
#include "UnityEngine/Gradient.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _beat
[[deprecated("Use field access instead!")]] int& VROSC::BearVisualizer::BeatGradient::dyn__beat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::BeatGradient::dyn__beat");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beat"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Gradient _gradient
[[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& VROSC::BearVisualizer::BeatGradient::dyn__gradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::BeatGradient::dyn__gradient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gradient"))->offset;
  return *reinterpret_cast<::UnityEngine::Gradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _beatTime
[[deprecated("Use field access instead!")]] float& VROSC::BearVisualizer::BeatGradient::dyn__beatTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::BeatGradient::dyn__beatTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _value
[[deprecated("Use field access instead!")]] ::StringW& VROSC::BearVisualizer::BeatGradient::dyn__value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::BeatGradient::dyn__value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_value"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Coroutine BeatCoroutine
[[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& VROSC::BearVisualizer::BeatGradient::dyn_BeatCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::BeatGradient::dyn_BeatCoroutine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BeatCoroutine"))->offset;
  return *reinterpret_cast<::UnityEngine::Coroutine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.BearVisualizer/VROSC.BeatGradient.get_Beat
int VROSC::BearVisualizer::BeatGradient::get_Beat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::BeatGradient::get_Beat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Beat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.BearVisualizer/VROSC.BeatGradient.PerformBeat
::System::Collections::IEnumerator* VROSC::BearVisualizer::BeatGradient::PerformBeat(float multiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::BeatGradient::PerformBeat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformBeat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplier)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, multiplier);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VROSC.BearVisualizer/VROSC.BeatGradient/VROSC.<PerformBeat>d__7
#include "VROSC/BearVisualizer_BeatGradient_-PerformBeat-d__7.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VROSC.BearVisualizer/VROSC.BeatGradient <>4__this
[[deprecated("Use field access instead!")]] ::VROSC::BearVisualizer::BeatGradient*& VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::VROSC::BearVisualizer::BeatGradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single multiplier
[[deprecated("Use field access instead!")]] float& VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::dyn_multiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::dyn_multiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "multiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <time>5__2
[[deprecated("Use field access instead!")]] float& VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::dyn_$time$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::dyn_$time$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<time>5__2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.BearVisualizer/VROSC.BeatGradient/VROSC.<PerformBeat>d__7.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.BearVisualizer/VROSC.BeatGradient/VROSC.<PerformBeat>d__7.System.Collections.IEnumerator.get_Current
::Il2CppObject* VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.BearVisualizer/VROSC.BeatGradient/VROSC.<PerformBeat>d__7.System.IDisposable.Dispose
void VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.BearVisualizer/VROSC.BeatGradient/VROSC.<PerformBeat>d__7.MoveNext
bool VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.BearVisualizer/VROSC.BeatGradient/VROSC.<PerformBeat>d__7.System.Collections.IEnumerator.Reset
void VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::BearVisualizer::BeatGradient::$PerformBeat$d__7*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.GlobalColorController
#include "VROSC/GlobalColorController.hpp"
// Including type: VROSC.GlobalColorController/VROSC.BeatGradient
#include "VROSC/GlobalColorController_BeatGradient.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VROSC.GlobalColorController/VROSC.BeatGradient[] _beatGradients
[[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::GlobalColorController::BeatGradient*>& VROSC::GlobalColorController::dyn__beatGradients() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::dyn__beatGradients");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatGradients"))->offset;
  return *reinterpret_cast<::ArrayW<::VROSC::GlobalColorController::BeatGradient*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _darkenOnMirror
[[deprecated("Use field access instead!")]] float& VROSC::GlobalColorController::dyn__darkenOnMirror() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::dyn__darkenOnMirror");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_darkenOnMirror"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.GlobalColorController.get_BeatGradients
::ArrayW<::VROSC::GlobalColorController::BeatGradient*> VROSC::GlobalColorController::get_BeatGradients() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::get_BeatGradients");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeatGradients", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::VROSC::GlobalColorController::BeatGradient*>, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.GlobalColorController.Start
void VROSC::GlobalColorController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.GlobalColorController.SendBeat
void VROSC::GlobalColorController::SendBeat(int beat) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::SendBeat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendBeat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beat)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, beat);
}
// Autogenerated method: VROSC.GlobalColorController.OnDestroy
void VROSC::GlobalColorController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VROSC.GlobalColorController/VROSC.BeatGradient
#include "VROSC/GlobalColorController_BeatGradient.hpp"
// Including type: VROSC.GlobalColorController/VROSC.BeatGradient/VROSC.<PerformBeat>d__8
#include "VROSC/GlobalColorController_BeatGradient_-PerformBeat-d__8.hpp"
// Including type: UnityEngine.Gradient
#include "UnityEngine/Gradient.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _beat
[[deprecated("Use field access instead!")]] int& VROSC::GlobalColorController::BeatGradient::dyn__beat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::BeatGradient::dyn__beat");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beat"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Gradient _gradient
[[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& VROSC::GlobalColorController::BeatGradient::dyn__gradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::BeatGradient::dyn__gradient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gradient"))->offset;
  return *reinterpret_cast<::UnityEngine::Gradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _beatTime
[[deprecated("Use field access instead!")]] float& VROSC::GlobalColorController::BeatGradient::dyn__beatTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::BeatGradient::dyn__beatTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _value
[[deprecated("Use field access instead!")]] ::StringW& VROSC::GlobalColorController::BeatGradient::dyn__value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::BeatGradient::dyn__value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_value"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<UnityEngine.Color> OnColorChange
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Color>*& VROSC::GlobalColorController::BeatGradient::dyn_OnColorChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::BeatGradient::dyn_OnColorChange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnColorChange"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::Color>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Coroutine BeatCoroutine
[[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& VROSC::GlobalColorController::BeatGradient::dyn_BeatCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::BeatGradient::dyn_BeatCoroutine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BeatCoroutine"))->offset;
  return *reinterpret_cast<::UnityEngine::Coroutine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.GlobalColorController/VROSC.BeatGradient.get_Beat
int VROSC::GlobalColorController::BeatGradient::get_Beat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::BeatGradient::get_Beat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Beat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.GlobalColorController/VROSC.BeatGradient.PerformBeat
::System::Collections::IEnumerator* VROSC::GlobalColorController::BeatGradient::PerformBeat(float multiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::BeatGradient::PerformBeat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformBeat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplier)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, multiplier);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VROSC.GlobalColorController/VROSC.BeatGradient/VROSC.<PerformBeat>d__8
#include "VROSC/GlobalColorController_BeatGradient_-PerformBeat-d__8.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VROSC.GlobalColorController/VROSC.BeatGradient <>4__this
[[deprecated("Use field access instead!")]] ::VROSC::GlobalColorController::BeatGradient*& VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::VROSC::GlobalColorController::BeatGradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single multiplier
[[deprecated("Use field access instead!")]] float& VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::dyn_multiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::dyn_multiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "multiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <time>5__2
[[deprecated("Use field access instead!")]] float& VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::dyn_$time$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::dyn_$time$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<time>5__2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.GlobalColorController/VROSC.BeatGradient/VROSC.<PerformBeat>d__8.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.GlobalColorController/VROSC.BeatGradient/VROSC.<PerformBeat>d__8.System.Collections.IEnumerator.get_Current
::Il2CppObject* VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.GlobalColorController/VROSC.BeatGradient/VROSC.<PerformBeat>d__8.System.IDisposable.Dispose
void VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.GlobalColorController/VROSC.BeatGradient/VROSC.<PerformBeat>d__8.MoveNext
bool VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.GlobalColorController/VROSC.BeatGradient/VROSC.<PerformBeat>d__8.System.Collections.IEnumerator.Reset
void VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::GlobalColorController::BeatGradient::$PerformBeat$d__8*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VROSC.OpenDashboardTutorialStep
#include "VROSC/OpenDashboardTutorialStep.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VROSC.OpenDashboardTutorialStep.DashboardToggled
void VROSC::OpenDashboardTutorialStep::DashboardToggled(bool toggled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OpenDashboardTutorialStep::DashboardToggled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DashboardToggled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toggled)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, toggled);
}
// Autogenerated method: VROSC.OpenDashboardTutorialStep.OnEnter
void VROSC::OpenDashboardTutorialStep::OnEnter(::ArrayW<::Il2CppObject*> values) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OpenDashboardTutorialStep::OnEnter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::TutorialStep*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, values);
}
// Autogenerated method: VROSC.OpenDashboardTutorialStep.TimelineReachedEnd
void VROSC::OpenDashboardTutorialStep::TimelineReachedEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OpenDashboardTutorialStep::TimelineReachedEnd");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::TutorialStep*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VROSC.OpenBoardTutorialStep
#include "VROSC/OpenBoardTutorialStep.hpp"
// Including type: VROSC.TutorialEvent
#include "VROSC/TutorialEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VROSC.OpenBoardTutorialStep.TutorialEventTriggered
void VROSC::OpenBoardTutorialStep::TutorialEventTriggered(::VROSC::TutorialEvent tutorialEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OpenBoardTutorialStep::TutorialEventTriggered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TutorialEventTriggered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tutorialEvent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tutorialEvent);
}
// Autogenerated method: VROSC.OpenBoardTutorialStep.OnEnter
void VROSC::OpenBoardTutorialStep::OnEnter(::ArrayW<::Il2CppObject*> values) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OpenBoardTutorialStep::OnEnter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::TutorialStep*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, values);
}
// Autogenerated method: VROSC.OpenBoardTutorialStep.OnExit
void VROSC::OpenBoardTutorialStep::OnExit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OpenBoardTutorialStep::OnExit");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::TutorialStep*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VROSC.GrabAndMoveTutorialStep
#include "VROSC/GrabAndMoveTutorialStep.hpp"
// Including type: VROSC.TutorialEvent
#include "VROSC/TutorialEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean _boardGrabbed
[[deprecated("Use field access instead!")]] bool& VROSC::GrabAndMoveTutorialStep::dyn__boardGrabbed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GrabAndMoveTutorialStep::dyn__boardGrabbed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_boardGrabbed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _tutorialPanelGrabbed
[[deprecated("Use field access instead!")]] bool& VROSC::GrabAndMoveTutorialStep::dyn__tutorialPanelGrabbed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GrabAndMoveTutorialStep::dyn__tutorialPanelGrabbed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tutorialPanelGrabbed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.GrabAndMoveTutorialStep.TutorialEventTriggered
void VROSC::GrabAndMoveTutorialStep::TutorialEventTriggered(::VROSC::TutorialEvent tutorialEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GrabAndMoveTutorialStep::TutorialEventTriggered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TutorialEventTriggered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tutorialEvent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tutorialEvent);
}
// Autogenerated method: VROSC.GrabAndMoveTutorialStep.OnEnter
void VROSC::GrabAndMoveTutorialStep::OnEnter(::ArrayW<::Il2CppObject*> values) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GrabAndMoveTutorialStep::OnEnter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::TutorialStep*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, values);
}
// Autogenerated method: VROSC.GrabAndMoveTutorialStep.Tick
void VROSC::GrabAndMoveTutorialStep::Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GrabAndMoveTutorialStep::Tick");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::TutorialStep*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VROSC.PlayOnBoardTutorialStep
#include "VROSC/PlayOnBoardTutorialStep.hpp"
// Including type: VROSC.TutorialEvent
#include "VROSC/TutorialEvent.hpp"
// Including type: VROSC.PatchSettings
#include "VROSC/PatchSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _notesPlayed
[[deprecated("Use field access instead!")]] int& VROSC::PlayOnBoardTutorialStep::dyn__notesPlayed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayOnBoardTutorialStep::dyn__notesPlayed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_notesPlayed"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.PlayOnBoardTutorialStep.TutorialEventTriggered
void VROSC::PlayOnBoardTutorialStep::TutorialEventTriggered(::VROSC::TutorialEvent tutorialEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayOnBoardTutorialStep::TutorialEventTriggered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TutorialEventTriggered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tutorialEvent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tutorialEvent);
}
// Autogenerated method: VROSC.PlayOnBoardTutorialStep.NotePlayed
void VROSC::PlayOnBoardTutorialStep::NotePlayed(::VROSC::WidgetSettings::Identifier id, ::VROSC::PatchSettings* patch) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayOnBoardTutorialStep::NotePlayed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotePlayed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(patch)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, id, patch);
}
// Autogenerated method: VROSC.PlayOnBoardTutorialStep.OnEnter
void VROSC::PlayOnBoardTutorialStep::OnEnter(::ArrayW<::Il2CppObject*> values) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayOnBoardTutorialStep::OnEnter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::TutorialStep*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, values);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VROSC.PlayMoreOnBoardTutorialStep
#include "VROSC/PlayMoreOnBoardTutorialStep.hpp"
// Including type: VROSC.TutorialEvent
#include "VROSC/TutorialEvent.hpp"
// Including type: VROSC.InputDevice
#include "VROSC/InputDevice.hpp"
// Including type: VROSC.TriggerButton
#include "VROSC/TriggerButton.hpp"
// Including type: VROSC.PatchSettings
#include "VROSC/PatchSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _notesPlayed
[[deprecated("Use field access instead!")]] int& VROSC::PlayMoreOnBoardTutorialStep::dyn__notesPlayed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayMoreOnBoardTutorialStep::dyn__notesPlayed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_notesPlayed"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _triggerPressed
[[deprecated("Use field access instead!")]] bool& VROSC::PlayMoreOnBoardTutorialStep::dyn__triggerPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayMoreOnBoardTutorialStep::dyn__triggerPressed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_triggerPressed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _gripPressed
[[deprecated("Use field access instead!")]] bool& VROSC::PlayMoreOnBoardTutorialStep::dyn__gripPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayMoreOnBoardTutorialStep::dyn__gripPressed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gripPressed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _thumbPressed
[[deprecated("Use field access instead!")]] bool& VROSC::PlayMoreOnBoardTutorialStep::dyn__thumbPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayMoreOnBoardTutorialStep::dyn__thumbPressed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_thumbPressed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.PlayMoreOnBoardTutorialStep.TutorialEventTriggered
void VROSC::PlayMoreOnBoardTutorialStep::TutorialEventTriggered(::VROSC::TutorialEvent tutorialEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayMoreOnBoardTutorialStep::TutorialEventTriggered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TutorialEventTriggered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tutorialEvent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tutorialEvent);
}
// Autogenerated method: VROSC.PlayMoreOnBoardTutorialStep.ButtonPressed
void VROSC::PlayMoreOnBoardTutorialStep::ButtonPressed(::VROSC::InputDevice* inputDevice, ::VROSC::TriggerButton button) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayMoreOnBoardTutorialStep::ButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inputDevice), ::il2cpp_utils::ExtractType(button)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, inputDevice, button);
}
// Autogenerated method: VROSC.PlayMoreOnBoardTutorialStep.NotePlayed
void VROSC::PlayMoreOnBoardTutorialStep::NotePlayed(::VROSC::WidgetSettings::Identifier id, ::VROSC::PatchSettings* patch) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayMoreOnBoardTutorialStep::NotePlayed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotePlayed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(patch)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, id, patch);
}
// Autogenerated method: VROSC.PlayMoreOnBoardTutorialStep.OnEnter
void VROSC::PlayMoreOnBoardTutorialStep::OnEnter(::ArrayW<::Il2CppObject*> values) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayMoreOnBoardTutorialStep::OnEnter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::TutorialStep*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, values);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VROSC.ChangeSoundTutorialStep
#include "VROSC/ChangeSoundTutorialStep.hpp"
// Including type: VROSC.TutorialEvent
#include "VROSC/TutorialEvent.hpp"
// Including type: VROSC.PatchSettings
#include "VROSC/PatchSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _notesPlayed
[[deprecated("Use field access instead!")]] int& VROSC::ChangeSoundTutorialStep::dyn__notesPlayed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ChangeSoundTutorialStep::dyn__notesPlayed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_notesPlayed"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.ChangeSoundTutorialStep.TutorialEventTriggered
void VROSC::ChangeSoundTutorialStep::TutorialEventTriggered(::VROSC::TutorialEvent tutorialEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ChangeSoundTutorialStep::TutorialEventTriggered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TutorialEventTriggered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tutorialEvent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tutorialEvent);
}
// Autogenerated method: VROSC.ChangeSoundTutorialStep.SoundChanged
void VROSC::ChangeSoundTutorialStep::SoundChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ChangeSoundTutorialStep::SoundChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SoundChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VROSC.ChangeSoundTutorialStep.NotePlayed
void VROSC::ChangeSoundTutorialStep::NotePlayed(::VROSC::WidgetSettings::Identifier id, ::VROSC::PatchSettings* patch) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ChangeSoundTutorialStep::NotePlayed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotePlayed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(patch)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, id, patch);
}
// Autogenerated method: VROSC.ChangeSoundTutorialStep.OnEnter
void VROSC::ChangeSoundTutorialStep::OnEnter(::ArrayW<::Il2CppObject*> values) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ChangeSoundTutorialStep::OnEnter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::TutorialStep*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, values);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VROSC.OpenEmpadsTutorialStep
#include "VROSC/OpenEmpadsTutorialStep.hpp"
// Including type: VROSC.TutorialEvent
#include "VROSC/TutorialEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VROSC.OpenEmpadsTutorialStep.TutorialEventTriggered
void VROSC::OpenEmpadsTutorialStep::TutorialEventTriggered(::VROSC::TutorialEvent tutorialEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OpenEmpadsTutorialStep::TutorialEventTriggered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TutorialEventTriggered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tutorialEvent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tutorialEvent);
}
// Autogenerated method: VROSC.OpenEmpadsTutorialStep.OnEnter
void VROSC::OpenEmpadsTutorialStep::OnEnter(::ArrayW<::Il2CppObject*> values) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OpenEmpadsTutorialStep::OnEnter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::TutorialStep*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, values);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VROSC.PlayOnEmpadsTutorialStep
#include "VROSC/PlayOnEmpadsTutorialStep.hpp"
// Including type: VROSC.PatchSettings
#include "VROSC/PatchSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _notesPlayed
[[deprecated("Use field access instead!")]] int& VROSC::PlayOnEmpadsTutorialStep::dyn__notesPlayed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayOnEmpadsTutorialStep::dyn__notesPlayed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_notesPlayed"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VROSC.PlayOnEmpadsTutorialStep.NotePlayed
void VROSC::PlayOnEmpadsTutorialStep::NotePlayed(::VROSC::WidgetSettings::Identifier id, ::VROSC::PatchSettings* patch) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayOnEmpadsTutorialStep::NotePlayed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotePlayed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(patch)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, id, patch);
}
// Autogenerated method: VROSC.PlayOnEmpadsTutorialStep.OnEnter
void VROSC::PlayOnEmpadsTutorialStep::OnEnter(::ArrayW<::Il2CppObject*> values) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayOnEmpadsTutorialStep::OnEnter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::TutorialStep*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, values);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VROSC.BuildADrumKitTutorialStep
#include "VROSC/BuildADrumKitTutorialStep.hpp"
// Including type: VROSC.TutorialEvent
#include "VROSC/TutorialEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VROSC.BuildADrumKitTutorialStep.TutorialEventTriggered
void VROSC::BuildADrumKitTutorialStep::TutorialEventTriggered(::VROSC::TutorialEvent tutorialEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BuildADrumKitTutorialStep::TutorialEventTriggered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TutorialEventTriggered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tutorialEvent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tutorialEvent);
}
// Autogenerated method: VROSC.BuildADrumKitTutorialStep.OnEnter
void VROSC::BuildADrumKitTutorialStep::OnEnter(::ArrayW<::Il2CppObject*> values) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BuildADrumKitTutorialStep::OnEnter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::TutorialStep*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, values);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VROSC.EnableTempoSyncTutorialStep
#include "VROSC/EnableTempoSyncTutorialStep.hpp"
// Including type: VROSC.TutorialEvent
#include "VROSC/TutorialEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VROSC.EnableTempoSyncTutorialStep.TutorialEventTriggered
void VROSC::EnableTempoSyncTutorialStep::TutorialEventTriggered(::VROSC::TutorialEvent tutorialEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::EnableTempoSyncTutorialStep::TutorialEventTriggered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TutorialEventTriggered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tutorialEvent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tutorialEvent);
}
// Autogenerated method: VROSC.EnableTempoSyncTutorialStep.OnEnter
void VROSC::EnableTempoSyncTutorialStep::OnEnter(::ArrayW<::Il2CppObject*> values) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::EnableTempoSyncTutorialStep::OnEnter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VROSC::TutorialStep*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, values);
}
