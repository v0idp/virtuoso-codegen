// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: SystemLanguage
  struct SystemLanguage;
}
// Completed forward declares
// Type namespace: Unity.RemoteConfig
namespace Unity::RemoteConfig {
  // Forward declaring type: DeviceInfo
  class DeviceInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::RemoteConfig::DeviceInfo);
DEFINE_IL2CPP_ARG_TYPE(::Unity::RemoteConfig::DeviceInfo*, "Unity.RemoteConfig", "DeviceInfo");
// Type namespace: Unity.RemoteConfig
namespace Unity::RemoteConfig {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: Unity.RemoteConfig.DeviceInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class DeviceInfo : public ::Il2CppObject {
    public:
    public:
    // public System.String os_ver
    // Size: 0x8
    // Offset: 0x10
    ::StringW os_ver;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String app_ver
    // Size: 0x8
    // Offset: 0x18
    ::StringW app_ver;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean rooted_jailbroken
    // Size: 0x1
    // Offset: 0x20
    bool rooted_jailbroken;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean debug_build
    // Size: 0x1
    // Offset: 0x21
    bool debug_build;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debug_build and: model
    char __padding3[0x6] = {};
    // public System.String model
    // Size: 0x8
    // Offset: 0x28
    ::StringW model;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String cpu
    // Size: 0x8
    // Offset: 0x30
    ::StringW cpu;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 cpu_count
    // Size: 0x4
    // Offset: 0x38
    int cpu_count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 cpu_freq
    // Size: 0x4
    // Offset: 0x3C
    int cpu_freq;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ram
    // Size: 0x4
    // Offset: 0x40
    int ram;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 vram
    // Size: 0x4
    // Offset: 0x44
    int vram;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.String screen
    // Size: 0x8
    // Offset: 0x48
    ::StringW screen;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 dpi
    // Size: 0x4
    // Offset: 0x50
    int dpi;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: dpi and: lang
    char __padding11[0x4] = {};
    // public System.String lang
    // Size: 0x8
    // Offset: 0x58
    ::StringW lang;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String app_name
    // Size: 0x8
    // Offset: 0x60
    ::StringW app_name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String app_install_mode
    // Size: 0x8
    // Offset: 0x68
    ::StringW app_install_mode;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String app_install_store
    // Size: 0x8
    // Offset: 0x70
    ::StringW app_install_store;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 gfx_device_id
    // Size: 0x4
    // Offset: 0x78
    int gfx_device_id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 gfx_device_vendor_id
    // Size: 0x4
    // Offset: 0x7C
    int gfx_device_vendor_id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.String gfx_name
    // Size: 0x8
    // Offset: 0x80
    ::StringW gfx_name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String gfx_vendor
    // Size: 0x8
    // Offset: 0x88
    ::StringW gfx_vendor;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String gfx_ver
    // Size: 0x8
    // Offset: 0x90
    ::StringW gfx_ver;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 gfx_shader
    // Size: 0x4
    // Offset: 0x98
    int gfx_shader;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 max_texture_size
    // Size: 0x4
    // Offset: 0x9C
    int max_texture_size;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.String os_ver
    [[deprecated("Use field access instead!")]] ::StringW& dyn_os_ver();
    // Get instance field reference: public System.String app_ver
    [[deprecated("Use field access instead!")]] ::StringW& dyn_app_ver();
    // Get instance field reference: public System.Boolean rooted_jailbroken
    [[deprecated("Use field access instead!")]] bool& dyn_rooted_jailbroken();
    // Get instance field reference: public System.Boolean debug_build
    [[deprecated("Use field access instead!")]] bool& dyn_debug_build();
    // Get instance field reference: public System.String model
    [[deprecated("Use field access instead!")]] ::StringW& dyn_model();
    // Get instance field reference: public System.String cpu
    [[deprecated("Use field access instead!")]] ::StringW& dyn_cpu();
    // Get instance field reference: public System.Int32 cpu_count
    [[deprecated("Use field access instead!")]] int& dyn_cpu_count();
    // Get instance field reference: public System.Int32 cpu_freq
    [[deprecated("Use field access instead!")]] int& dyn_cpu_freq();
    // Get instance field reference: public System.Int32 ram
    [[deprecated("Use field access instead!")]] int& dyn_ram();
    // Get instance field reference: public System.Int32 vram
    [[deprecated("Use field access instead!")]] int& dyn_vram();
    // Get instance field reference: public System.String screen
    [[deprecated("Use field access instead!")]] ::StringW& dyn_screen();
    // Get instance field reference: public System.Int32 dpi
    [[deprecated("Use field access instead!")]] int& dyn_dpi();
    // Get instance field reference: public System.String lang
    [[deprecated("Use field access instead!")]] ::StringW& dyn_lang();
    // Get instance field reference: public System.String app_name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_app_name();
    // Get instance field reference: public System.String app_install_mode
    [[deprecated("Use field access instead!")]] ::StringW& dyn_app_install_mode();
    // Get instance field reference: public System.String app_install_store
    [[deprecated("Use field access instead!")]] ::StringW& dyn_app_install_store();
    // Get instance field reference: public System.Int32 gfx_device_id
    [[deprecated("Use field access instead!")]] int& dyn_gfx_device_id();
    // Get instance field reference: public System.Int32 gfx_device_vendor_id
    [[deprecated("Use field access instead!")]] int& dyn_gfx_device_vendor_id();
    // Get instance field reference: public System.String gfx_name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_gfx_name();
    // Get instance field reference: public System.String gfx_vendor
    [[deprecated("Use field access instead!")]] ::StringW& dyn_gfx_vendor();
    // Get instance field reference: public System.String gfx_ver
    [[deprecated("Use field access instead!")]] ::StringW& dyn_gfx_ver();
    // Get instance field reference: public System.Int32 gfx_shader
    [[deprecated("Use field access instead!")]] int& dyn_gfx_shader();
    // Get instance field reference: public System.Int32 max_texture_size
    [[deprecated("Use field access instead!")]] int& dyn_max_texture_size();
    // public System.Void .ctor()
    // Offset: 0x18C2104
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DeviceInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::RemoteConfig::DeviceInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DeviceInfo*, creationType>()));
    }
    // private System.String GetDeviceModel()
    // Offset: 0x18C3C8C
    ::StringW GetDeviceModel();
    // private System.String GetISOCodeFromLangStruct(UnityEngine.SystemLanguage systemLanguage)
    // Offset: 0x18C3DBC
    ::StringW GetISOCodeFromLangStruct(::UnityEngine::SystemLanguage systemLanguage);
  }; // Unity.RemoteConfig.DeviceInfo
  #pragma pack(pop)
  static check_size<sizeof(DeviceInfo), 156 + sizeof(int)> __Unity_RemoteConfig_DeviceInfoSizeCheck;
  static_assert(sizeof(DeviceInfo) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::RemoteConfig::DeviceInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::RemoteConfig::DeviceInfo::GetDeviceModel
// Il2CppName: GetDeviceModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Unity::RemoteConfig::DeviceInfo::*)()>(&Unity::RemoteConfig::DeviceInfo::GetDeviceModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::RemoteConfig::DeviceInfo*), "GetDeviceModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::RemoteConfig::DeviceInfo::GetISOCodeFromLangStruct
// Il2CppName: GetISOCodeFromLangStruct
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Unity::RemoteConfig::DeviceInfo::*)(::UnityEngine::SystemLanguage)>(&Unity::RemoteConfig::DeviceInfo::GetISOCodeFromLangStruct)> {
  static const MethodInfo* get() {
    static auto* systemLanguage = &::il2cpp_utils::GetClassFromName("UnityEngine", "SystemLanguage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::RemoteConfig::DeviceInfo*), "GetISOCodeFromLangStruct", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{systemLanguage});
  }
};
