// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Networking
namespace UnityEngine::Networking {
  // Forward declaring type: UnityWebRequest
  class UnityWebRequest;
  // Forward declaring type: DownloadHandler
  class DownloadHandler;
  // Forward declaring type: UploadHandler
  class UploadHandler;
  // Forward declaring type: UnityWebRequestAsyncOperation
  class UnityWebRequestAsyncOperation;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: Unity.RemoteConfig
namespace Unity::RemoteConfig {
  // Forward declaring type: RCUnityWebRequest
  class RCUnityWebRequest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::RemoteConfig::RCUnityWebRequest);
DEFINE_IL2CPP_ARG_TYPE(::Unity::RemoteConfig::RCUnityWebRequest*, "Unity.RemoteConfig", "RCUnityWebRequest");
// Type namespace: Unity.RemoteConfig
namespace Unity::RemoteConfig {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Unity.RemoteConfig.RCUnityWebRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class RCUnityWebRequest : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.Networking.UnityWebRequest <_unityWebRequest>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Networking::UnityWebRequest* unityWebRequest;
    // Field size check
    static_assert(sizeof(::UnityEngine::Networking::UnityWebRequest*) == 0x8);
    public:
    // Creating conversion operator: operator ::UnityEngine::Networking::UnityWebRequest*
    constexpr operator ::UnityEngine::Networking::UnityWebRequest*() const noexcept {
      return unityWebRequest;
    }
    // Get instance field reference: private UnityEngine.Networking.UnityWebRequest <_unityWebRequest>k__BackingField
    [[deprecated]] ::UnityEngine::Networking::UnityWebRequest*& dyn_$_unityWebRequest$k__BackingField();
    // private UnityEngine.Networking.UnityWebRequest get__unityWebRequest()
    // Offset: 0x18C3FF0
    ::UnityEngine::Networking::UnityWebRequest* get__unityWebRequest();
    // private System.Void set__unityWebRequest(UnityEngine.Networking.UnityWebRequest value)
    // Offset: 0x18C3FF8
    void set__unityWebRequest(::UnityEngine::Networking::UnityWebRequest* value);
    // public System.Void set_url(System.String value)
    // Offset: 0x18C37B0
    void set_url(::StringW value);
    // public System.Void set_method(System.String value)
    // Offset: 0x18C37CC
    void set_method(::StringW value);
    // public System.Void set_unityWebRequest(UnityEngine.Networking.UnityWebRequest value)
    // Offset: 0x18C37A8
    void set_unityWebRequest(::UnityEngine::Networking::UnityWebRequest* value);
    // public UnityEngine.Networking.DownloadHandler get_downloadHandler()
    // Offset: 0x18C4000
    ::UnityEngine::Networking::DownloadHandler* get_downloadHandler();
    // public System.Void set_downloadHandler(UnityEngine.Networking.DownloadHandler value)
    // Offset: 0x18C383C
    void set_downloadHandler(::UnityEngine::Networking::DownloadHandler* value);
    // public System.Void set_timeout(System.Int32 value)
    // Offset: 0x18C3804
    void set_timeout(int value);
    // public System.Void set_uploadHandler(UnityEngine.Networking.UploadHandler value)
    // Offset: 0x18C3820
    void set_uploadHandler(::UnityEngine::Networking::UploadHandler* value);
    // public UnityEngine.Networking.UnityWebRequestAsyncOperation SendWebRequest()
    // Offset: 0x18C3858
    ::UnityEngine::Networking::UnityWebRequestAsyncOperation* SendWebRequest();
    // public System.Void SetRequestHeader(System.String name, System.String value)
    // Offset: 0x18C37E8
    void SetRequestHeader(::StringW name, ::StringW value);
    // public System.Collections.Generic.Dictionary`2<System.String,System.String> GetResponseHeaders()
    // Offset: 0x18C401C
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* GetResponseHeaders();
    // public System.Void .ctor()
    // Offset: 0x18C37A0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RCUnityWebRequest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::RemoteConfig::RCUnityWebRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RCUnityWebRequest*, creationType>()));
    }
  }; // Unity.RemoteConfig.RCUnityWebRequest
  #pragma pack(pop)
  static check_size<sizeof(RCUnityWebRequest), 16 + sizeof(::UnityEngine::Networking::UnityWebRequest*)> __Unity_RemoteConfig_RCUnityWebRequestSizeCheck;
  static_assert(sizeof(RCUnityWebRequest) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::RemoteConfig::RCUnityWebRequest::get__unityWebRequest
// Il2CppName: get__unityWebRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Networking::UnityWebRequest* (Unity::RemoteConfig::RCUnityWebRequest::*)()>(&Unity::RemoteConfig::RCUnityWebRequest::get__unityWebRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::RemoteConfig::RCUnityWebRequest*), "get__unityWebRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::RemoteConfig::RCUnityWebRequest::set__unityWebRequest
// Il2CppName: set__unityWebRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::RemoteConfig::RCUnityWebRequest::*)(::UnityEngine::Networking::UnityWebRequest*)>(&Unity::RemoteConfig::RCUnityWebRequest::set__unityWebRequest)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking", "UnityWebRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::RemoteConfig::RCUnityWebRequest*), "set__unityWebRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::RemoteConfig::RCUnityWebRequest::set_url
// Il2CppName: set_url
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::RemoteConfig::RCUnityWebRequest::*)(::StringW)>(&Unity::RemoteConfig::RCUnityWebRequest::set_url)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::RemoteConfig::RCUnityWebRequest*), "set_url", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::RemoteConfig::RCUnityWebRequest::set_method
// Il2CppName: set_method
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::RemoteConfig::RCUnityWebRequest::*)(::StringW)>(&Unity::RemoteConfig::RCUnityWebRequest::set_method)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::RemoteConfig::RCUnityWebRequest*), "set_method", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::RemoteConfig::RCUnityWebRequest::set_unityWebRequest
// Il2CppName: set_unityWebRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::RemoteConfig::RCUnityWebRequest::*)(::UnityEngine::Networking::UnityWebRequest*)>(&Unity::RemoteConfig::RCUnityWebRequest::set_unityWebRequest)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking", "UnityWebRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::RemoteConfig::RCUnityWebRequest*), "set_unityWebRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::RemoteConfig::RCUnityWebRequest::get_downloadHandler
// Il2CppName: get_downloadHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Networking::DownloadHandler* (Unity::RemoteConfig::RCUnityWebRequest::*)()>(&Unity::RemoteConfig::RCUnityWebRequest::get_downloadHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::RemoteConfig::RCUnityWebRequest*), "get_downloadHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::RemoteConfig::RCUnityWebRequest::set_downloadHandler
// Il2CppName: set_downloadHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::RemoteConfig::RCUnityWebRequest::*)(::UnityEngine::Networking::DownloadHandler*)>(&Unity::RemoteConfig::RCUnityWebRequest::set_downloadHandler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking", "DownloadHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::RemoteConfig::RCUnityWebRequest*), "set_downloadHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::RemoteConfig::RCUnityWebRequest::set_timeout
// Il2CppName: set_timeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::RemoteConfig::RCUnityWebRequest::*)(int)>(&Unity::RemoteConfig::RCUnityWebRequest::set_timeout)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::RemoteConfig::RCUnityWebRequest*), "set_timeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::RemoteConfig::RCUnityWebRequest::set_uploadHandler
// Il2CppName: set_uploadHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::RemoteConfig::RCUnityWebRequest::*)(::UnityEngine::Networking::UploadHandler*)>(&Unity::RemoteConfig::RCUnityWebRequest::set_uploadHandler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking", "UploadHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::RemoteConfig::RCUnityWebRequest*), "set_uploadHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::RemoteConfig::RCUnityWebRequest::SendWebRequest
// Il2CppName: SendWebRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Networking::UnityWebRequestAsyncOperation* (Unity::RemoteConfig::RCUnityWebRequest::*)()>(&Unity::RemoteConfig::RCUnityWebRequest::SendWebRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::RemoteConfig::RCUnityWebRequest*), "SendWebRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::RemoteConfig::RCUnityWebRequest::SetRequestHeader
// Il2CppName: SetRequestHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::RemoteConfig::RCUnityWebRequest::*)(::StringW, ::StringW)>(&Unity::RemoteConfig::RCUnityWebRequest::SetRequestHeader)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::RemoteConfig::RCUnityWebRequest*), "SetRequestHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: Unity::RemoteConfig::RCUnityWebRequest::GetResponseHeaders
// Il2CppName: GetResponseHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* (Unity::RemoteConfig::RCUnityWebRequest::*)()>(&Unity::RemoteConfig::RCUnityWebRequest::GetResponseHeaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::RemoteConfig::RCUnityWebRequest*), "GetResponseHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::RemoteConfig::RCUnityWebRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
