// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Management.XRLoaderHelper
#include "UnityEngine/XR/Management/XRLoaderHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::XR::Oculus
namespace Unity::XR::Oculus {
  // Forward declaring type: OculusSettings
  class OculusSettings;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRDisplaySubsystemDescriptor
  class XRDisplaySubsystemDescriptor;
  // Forward declaring type: XRInputSubsystemDescriptor
  class XRInputSubsystemDescriptor;
  // Forward declaring type: XRDisplaySubsystem
  class XRDisplaySubsystem;
  // Forward declaring type: XRInputSubsystem
  class XRInputSubsystem;
}
// Completed forward declares
// Type namespace: Unity.XR.Oculus
namespace Unity::XR::Oculus {
  // Forward declaring type: OculusLoader
  class OculusLoader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::XR::Oculus::OculusLoader);
DEFINE_IL2CPP_ARG_TYPE(::Unity::XR::Oculus::OculusLoader*, "Unity.XR.Oculus", "OculusLoader");
// Type namespace: Unity.XR.Oculus
namespace Unity::XR::Oculus {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Unity.XR.Oculus.OculusLoader
  // [TokenAttribute] Offset: FFFFFFFF
  class OculusLoader : public ::UnityEngine::XR::Management::XRLoaderHelper {
    public:
    // Nested type: ::Unity::XR::Oculus::OculusLoader::DeviceSupportedResult
    struct DeviceSupportedResult;
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.XR.XRDisplaySubsystemDescriptor> s_DisplaySubsystemDescriptors
    static ::System::Collections::Generic::List_1<::UnityEngine::XR::XRDisplaySubsystemDescriptor*>* _get_s_DisplaySubsystemDescriptors();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.XR.XRDisplaySubsystemDescriptor> s_DisplaySubsystemDescriptors
    static void _set_s_DisplaySubsystemDescriptors(::System::Collections::Generic::List_1<::UnityEngine::XR::XRDisplaySubsystemDescriptor*>* value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.XR.XRInputSubsystemDescriptor> s_InputSubsystemDescriptors
    static ::System::Collections::Generic::List_1<::UnityEngine::XR::XRInputSubsystemDescriptor*>* _get_s_InputSubsystemDescriptors();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.XR.XRInputSubsystemDescriptor> s_InputSubsystemDescriptors
    static void _set_s_InputSubsystemDescriptors(::System::Collections::Generic::List_1<::UnityEngine::XR::XRInputSubsystemDescriptor*>* value);
    // public UnityEngine.XR.XRDisplaySubsystem get_displaySubsystem()
    // Offset: 0x18DCDE8
    ::UnityEngine::XR::XRDisplaySubsystem* get_displaySubsystem();
    // public UnityEngine.XR.XRInputSubsystem get_inputSubsystem()
    // Offset: 0x18DCE50
    ::UnityEngine::XR::XRInputSubsystem* get_inputSubsystem();
    // public System.Void .ctor()
    // Offset: 0x18DD688
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OculusLoader* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::Oculus::OculusLoader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OculusLoader*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x18DD690
    static void _cctor();
    // static private Unity.XR.Oculus.OculusLoader/Unity.XR.Oculus.DeviceSupportedResult IsDeviceSupported()
    // Offset: 0x18DCD4C
    static ::Unity::XR::Oculus::OculusLoader::DeviceSupportedResult IsDeviceSupported();
    // static private System.Void RuntimeLoadOVRPlugin()
    // Offset: 0x18DD4A0
    static void RuntimeLoadOVRPlugin();
    // public Unity.XR.Oculus.OculusSettings GetSettings()
    // Offset: 0x18DD63C
    ::Unity::XR::Oculus::OculusSettings* GetSettings();
    // public override System.Boolean Initialize()
    // Offset: 0x18DCEB8
    // Implemented from: UnityEngine.XR.Management.XRLoader
    // Base method: System.Boolean XRLoader::Initialize()
    bool Initialize();
    // public override System.Boolean Start()
    // Offset: 0x18DD268
    // Implemented from: UnityEngine.XR.Management.XRLoader
    // Base method: System.Boolean XRLoader::Start()
    bool Start();
    // public override System.Boolean Stop()
    // Offset: 0x18DD30C
    // Implemented from: UnityEngine.XR.Management.XRLoader
    // Base method: System.Boolean XRLoader::Stop()
    bool Stop();
    // public override System.Boolean Deinitialize()
    // Offset: 0x18DD3B0
    // Implemented from: UnityEngine.XR.Management.XRLoaderHelper
    // Base method: System.Boolean XRLoaderHelper::Deinitialize()
    bool Deinitialize();
  }; // Unity.XR.Oculus.OculusLoader
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusLoader::get_displaySubsystem
// Il2CppName: get_displaySubsystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::XRDisplaySubsystem* (Unity::XR::Oculus::OculusLoader::*)()>(&Unity::XR::Oculus::OculusLoader::get_displaySubsystem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusLoader*), "get_displaySubsystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusLoader::get_inputSubsystem
// Il2CppName: get_inputSubsystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::XRInputSubsystem* (Unity::XR::Oculus::OculusLoader::*)()>(&Unity::XR::Oculus::OculusLoader::get_inputSubsystem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusLoader*), "get_inputSubsystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusLoader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusLoader::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Unity::XR::Oculus::OculusLoader::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusLoader*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusLoader::IsDeviceSupported
// Il2CppName: IsDeviceSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::XR::Oculus::OculusLoader::DeviceSupportedResult (*)()>(&Unity::XR::Oculus::OculusLoader::IsDeviceSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusLoader*), "IsDeviceSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusLoader::RuntimeLoadOVRPlugin
// Il2CppName: RuntimeLoadOVRPlugin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Unity::XR::Oculus::OculusLoader::RuntimeLoadOVRPlugin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusLoader*), "RuntimeLoadOVRPlugin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusLoader::GetSettings
// Il2CppName: GetSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::XR::Oculus::OculusSettings* (Unity::XR::Oculus::OculusLoader::*)()>(&Unity::XR::Oculus::OculusLoader::GetSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusLoader*), "GetSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusLoader::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::XR::Oculus::OculusLoader::*)()>(&Unity::XR::Oculus::OculusLoader::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusLoader*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusLoader::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::XR::Oculus::OculusLoader::*)()>(&Unity::XR::Oculus::OculusLoader::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusLoader*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusLoader::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::XR::Oculus::OculusLoader::*)()>(&Unity::XR::Oculus::OculusLoader::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusLoader*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusLoader::Deinitialize
// Il2CppName: Deinitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::XR::Oculus::OculusLoader::*)()>(&Unity::XR::Oculus::OculusLoader::Deinitialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusLoader*), "Deinitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
