// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.XR.Oculus.Stats
#include "Unity/XR/Oculus/Stats.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::XR::Oculus::Stats::AppMetrics);
DEFINE_IL2CPP_ARG_TYPE(::Unity::XR::Oculus::Stats::AppMetrics*, "Unity.XR.Oculus", "Stats/AppMetrics");
// Type namespace: Unity.XR.Oculus
namespace Unity::XR::Oculus {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Unity.XR.Oculus.Stats/Unity.XR.Oculus.AppMetrics
  // [TokenAttribute] Offset: FFFFFFFF
  class Stats::AppMetrics : public ::Il2CppObject {
    public:
    // static public System.Single get_AppQueueAheadTime()
    // Offset: 0x18DEA3C
    static float get_AppQueueAheadTime();
    // static public System.Single get_AppCPUElapsedTime()
    // Offset: 0x18DEAC4
    static float get_AppCPUElapsedTime();
    // static public System.Single get_CompositorDroppedFrames()
    // Offset: 0x18DEB4C
    static float get_CompositorDroppedFrames();
    // static public System.Single get_CompositorLatency()
    // Offset: 0x18DEBD4
    static float get_CompositorLatency();
    // static public System.Single get_CompositorCPUTime()
    // Offset: 0x18DEC5C
    static float get_CompositorCPUTime();
    // static public System.Single get_CPUStartToGPUEnd()
    // Offset: 0x18DECE4
    static float get_CPUStartToGPUEnd();
    // static public System.Single get_GPUEndToVsync()
    // Offset: 0x18DED6C
    static float get_GPUEndToVsync();
    // static public System.Void EnableAppMetrics(System.Boolean enable)
    // Offset: 0x18DEDF4
    static void EnableAppMetrics(bool enable);
  }; // Unity.XR.Oculus.Stats/Unity.XR.Oculus.AppMetrics
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::XR::Oculus::Stats::AppMetrics::get_AppQueueAheadTime
// Il2CppName: get_AppQueueAheadTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Unity::XR::Oculus::Stats::AppMetrics::get_AppQueueAheadTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Stats::AppMetrics*), "get_AppQueueAheadTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Stats::AppMetrics::get_AppCPUElapsedTime
// Il2CppName: get_AppCPUElapsedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Unity::XR::Oculus::Stats::AppMetrics::get_AppCPUElapsedTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Stats::AppMetrics*), "get_AppCPUElapsedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Stats::AppMetrics::get_CompositorDroppedFrames
// Il2CppName: get_CompositorDroppedFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Unity::XR::Oculus::Stats::AppMetrics::get_CompositorDroppedFrames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Stats::AppMetrics*), "get_CompositorDroppedFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Stats::AppMetrics::get_CompositorLatency
// Il2CppName: get_CompositorLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Unity::XR::Oculus::Stats::AppMetrics::get_CompositorLatency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Stats::AppMetrics*), "get_CompositorLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Stats::AppMetrics::get_CompositorCPUTime
// Il2CppName: get_CompositorCPUTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Unity::XR::Oculus::Stats::AppMetrics::get_CompositorCPUTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Stats::AppMetrics*), "get_CompositorCPUTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Stats::AppMetrics::get_CPUStartToGPUEnd
// Il2CppName: get_CPUStartToGPUEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Unity::XR::Oculus::Stats::AppMetrics::get_CPUStartToGPUEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Stats::AppMetrics*), "get_CPUStartToGPUEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Stats::AppMetrics::get_GPUEndToVsync
// Il2CppName: get_GPUEndToVsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Unity::XR::Oculus::Stats::AppMetrics::get_GPUEndToVsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Stats::AppMetrics*), "get_GPUEndToVsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Stats::AppMetrics::EnableAppMetrics
// Il2CppName: EnableAppMetrics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&Unity::XR::Oculus::Stats::AppMetrics::EnableAppMetrics)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Stats::AppMetrics*), "EnableAppMetrics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
