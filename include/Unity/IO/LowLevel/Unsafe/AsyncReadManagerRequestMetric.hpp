// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.IO.LowLevel.Unsafe.ProcessingState
#include "Unity/IO/LowLevel/Unsafe/ProcessingState.hpp"
// Including type: Unity.IO.LowLevel.Unsafe.FileReadType
#include "Unity/IO/LowLevel/Unsafe/FileReadType.hpp"
// Including type: Unity.IO.LowLevel.Unsafe.Priority
#include "Unity/IO/LowLevel/Unsafe/Priority.hpp"
// Including type: Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem
#include "Unity/IO/LowLevel/Unsafe/AssetLoadingSubsystem.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Unity.IO.LowLevel.Unsafe
namespace Unity::IO::LowLevel::Unsafe {
  // Forward declaring type: AsyncReadManagerRequestMetric
  struct AsyncReadManagerRequestMetric;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::IO::LowLevel::Unsafe::AsyncReadManagerRequestMetric, "Unity.IO.LowLevel.Unsafe", "AsyncReadManagerRequestMetric");
// Type namespace: Unity.IO.LowLevel.Unsafe
namespace Unity::IO::LowLevel::Unsafe {
  // Size: 0x60
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequiredByNativeCodeAttribute] Offset: 564464
  // [NativeConditionalAttribute] Offset: 564464
  struct AsyncReadManagerRequestMetric/*, public ::System::ValueType*/ {
    public:
    public:
    // [DebuggerBrowsableAttribute] Offset: 0x5697BC
    // private readonly System.String <AssetName>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::StringW AssetName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x5697F8
    // private readonly System.String <FileName>k__BackingField
    // Size: 0x8
    // Offset: 0x8
    ::StringW FileName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x569834
    // private readonly System.UInt64 <OffsetBytes>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    uint64_t OffsetBytes;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x569870
    // private readonly System.UInt64 <SizeBytes>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    uint64_t SizeBytes;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x5698AC
    // private readonly System.UInt64 <AssetTypeId>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    uint64_t AssetTypeId;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x5698E8
    // private readonly System.UInt64 <CurrentBytesRead>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    uint64_t CurrentBytesRead;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x569924
    // private readonly System.UInt32 <BatchReadCount>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    uint BatchReadCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x569960
    // private readonly System.Boolean <IsBatchRead>k__BackingField
    // Size: 0x1
    // Offset: 0x34
    bool IsBatchRead;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsBatchRead and: State
    char __padding7[0x3] = {};
    // [DebuggerBrowsableAttribute] Offset: 0x56999C
    // private readonly Unity.IO.LowLevel.Unsafe.ProcessingState <State>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    ::Unity::IO::LowLevel::Unsafe::ProcessingState State;
    // Field size check
    static_assert(sizeof(::Unity::IO::LowLevel::Unsafe::ProcessingState) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x5699D8
    // private readonly Unity.IO.LowLevel.Unsafe.FileReadType <ReadType>k__BackingField
    // Size: 0x4
    // Offset: 0x3C
    ::Unity::IO::LowLevel::Unsafe::FileReadType ReadType;
    // Field size check
    static_assert(sizeof(::Unity::IO::LowLevel::Unsafe::FileReadType) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x569A14
    // private readonly Unity.IO.LowLevel.Unsafe.Priority <PriorityLevel>k__BackingField
    // Size: 0x4
    // Offset: 0x40
    ::Unity::IO::LowLevel::Unsafe::Priority PriorityLevel;
    // Field size check
    static_assert(sizeof(::Unity::IO::LowLevel::Unsafe::Priority) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x569A50
    // private readonly Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem <Subsystem>k__BackingField
    // Size: 0x4
    // Offset: 0x44
    ::Unity::IO::LowLevel::Unsafe::AssetLoadingSubsystem Subsystem;
    // Field size check
    static_assert(sizeof(::Unity::IO::LowLevel::Unsafe::AssetLoadingSubsystem) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x569A8C
    // private readonly System.Double <RequestTimeMicroseconds>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    double RequestTimeMicroseconds;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x569AC8
    // private readonly System.Double <TimeInQueueMicroseconds>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    double TimeInQueueMicroseconds;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x569B04
    // private readonly System.Double <TotalTimeMicroseconds>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    double TotalTimeMicroseconds;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Creating value type constructor for type: AsyncReadManagerRequestMetric
    constexpr AsyncReadManagerRequestMetric(::StringW AssetName_ = {}, ::StringW FileName_ = {}, uint64_t OffsetBytes_ = {}, uint64_t SizeBytes_ = {}, uint64_t AssetTypeId_ = {}, uint64_t CurrentBytesRead_ = {}, uint BatchReadCount_ = {}, bool IsBatchRead_ = {}, ::Unity::IO::LowLevel::Unsafe::ProcessingState State_ = {}, ::Unity::IO::LowLevel::Unsafe::FileReadType ReadType_ = {}, ::Unity::IO::LowLevel::Unsafe::Priority PriorityLevel_ = {}, ::Unity::IO::LowLevel::Unsafe::AssetLoadingSubsystem Subsystem_ = {}, double RequestTimeMicroseconds_ = {}, double TimeInQueueMicroseconds_ = {}, double TotalTimeMicroseconds_ = {}) noexcept : AssetName{AssetName_}, FileName{FileName_}, OffsetBytes{OffsetBytes_}, SizeBytes{SizeBytes_}, AssetTypeId{AssetTypeId_}, CurrentBytesRead{CurrentBytesRead_}, BatchReadCount{BatchReadCount_}, IsBatchRead{IsBatchRead_}, State{State_}, ReadType{ReadType_}, PriorityLevel{PriorityLevel_}, Subsystem{Subsystem_}, RequestTimeMicroseconds{RequestTimeMicroseconds_}, TimeInQueueMicroseconds{TimeInQueueMicroseconds_}, TotalTimeMicroseconds{TotalTimeMicroseconds_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly System.String <AssetName>k__BackingField
    ::StringW& dyn_$AssetName$k__BackingField();
    // Get instance field reference: private readonly System.String <FileName>k__BackingField
    ::StringW& dyn_$FileName$k__BackingField();
    // Get instance field reference: private readonly System.UInt64 <OffsetBytes>k__BackingField
    uint64_t& dyn_$OffsetBytes$k__BackingField();
    // Get instance field reference: private readonly System.UInt64 <SizeBytes>k__BackingField
    uint64_t& dyn_$SizeBytes$k__BackingField();
    // Get instance field reference: private readonly System.UInt64 <AssetTypeId>k__BackingField
    uint64_t& dyn_$AssetTypeId$k__BackingField();
    // Get instance field reference: private readonly System.UInt64 <CurrentBytesRead>k__BackingField
    uint64_t& dyn_$CurrentBytesRead$k__BackingField();
    // Get instance field reference: private readonly System.UInt32 <BatchReadCount>k__BackingField
    uint& dyn_$BatchReadCount$k__BackingField();
    // Get instance field reference: private readonly System.Boolean <IsBatchRead>k__BackingField
    bool& dyn_$IsBatchRead$k__BackingField();
    // Get instance field reference: private readonly Unity.IO.LowLevel.Unsafe.ProcessingState <State>k__BackingField
    ::Unity::IO::LowLevel::Unsafe::ProcessingState& dyn_$State$k__BackingField();
    // Get instance field reference: private readonly Unity.IO.LowLevel.Unsafe.FileReadType <ReadType>k__BackingField
    ::Unity::IO::LowLevel::Unsafe::FileReadType& dyn_$ReadType$k__BackingField();
    // Get instance field reference: private readonly Unity.IO.LowLevel.Unsafe.Priority <PriorityLevel>k__BackingField
    ::Unity::IO::LowLevel::Unsafe::Priority& dyn_$PriorityLevel$k__BackingField();
    // Get instance field reference: private readonly Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem <Subsystem>k__BackingField
    ::Unity::IO::LowLevel::Unsafe::AssetLoadingSubsystem& dyn_$Subsystem$k__BackingField();
    // Get instance field reference: private readonly System.Double <RequestTimeMicroseconds>k__BackingField
    double& dyn_$RequestTimeMicroseconds$k__BackingField();
    // Get instance field reference: private readonly System.Double <TimeInQueueMicroseconds>k__BackingField
    double& dyn_$TimeInQueueMicroseconds$k__BackingField();
    // Get instance field reference: private readonly System.Double <TotalTimeMicroseconds>k__BackingField
    double& dyn_$TotalTimeMicroseconds$k__BackingField();
  }; // Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric
  #pragma pack(pop)
  static check_size<sizeof(AsyncReadManagerRequestMetric), 88 + sizeof(double)> __Unity_IO_LowLevel_Unsafe_AsyncReadManagerRequestMetricSizeCheck;
  static_assert(sizeof(AsyncReadManagerRequestMetric) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
