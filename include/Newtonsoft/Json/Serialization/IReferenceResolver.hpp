// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Newtonsoft.Json.Serialization
namespace Newtonsoft::Json::Serialization {
  // Forward declaring type: IReferenceResolver
  class IReferenceResolver;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Serialization::IReferenceResolver);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Serialization::IReferenceResolver*, "Newtonsoft.Json.Serialization", "IReferenceResolver");
// Type namespace: Newtonsoft.Json.Serialization
namespace Newtonsoft::Json::Serialization {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Serialization.IReferenceResolver
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: 67350C
  class IReferenceResolver {
    public:
    // public System.Object ResolveReference(System.Object context, System.String reference)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Il2CppObject* ResolveReference(::Il2CppObject* context, ::StringW reference);
    // public System.String GetReference(System.Object context, System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW GetReference(::Il2CppObject* context, ::Il2CppObject* value);
    // public System.Boolean IsReferenced(System.Object context, System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool IsReferenced(::Il2CppObject* context, ::Il2CppObject* value);
    // public System.Void AddReference(System.Object context, System.String reference, System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddReference(::Il2CppObject* context, ::StringW reference, ::Il2CppObject* value);
  }; // Newtonsoft.Json.Serialization.IReferenceResolver
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::IReferenceResolver::ResolveReference
// Il2CppName: ResolveReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Newtonsoft::Json::Serialization::IReferenceResolver::*)(::Il2CppObject*, ::StringW)>(&Newtonsoft::Json::Serialization::IReferenceResolver::ResolveReference)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* reference = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::IReferenceResolver*), "ResolveReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, reference});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::IReferenceResolver::GetReference
// Il2CppName: GetReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Serialization::IReferenceResolver::*)(::Il2CppObject*, ::Il2CppObject*)>(&Newtonsoft::Json::Serialization::IReferenceResolver::GetReference)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::IReferenceResolver*), "GetReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::IReferenceResolver::IsReferenced
// Il2CppName: IsReferenced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::IReferenceResolver::*)(::Il2CppObject*, ::Il2CppObject*)>(&Newtonsoft::Json::Serialization::IReferenceResolver::IsReferenced)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::IReferenceResolver*), "IsReferenced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::IReferenceResolver::AddReference
// Il2CppName: AddReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::IReferenceResolver::*)(::Il2CppObject*, ::StringW, ::Il2CppObject*)>(&Newtonsoft::Json::Serialization::IReferenceResolver::AddReference)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* reference = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::IReferenceResolver*), "AddReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, reference, value});
  }
};
