// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Newtonsoft.Json.Serialization
namespace Newtonsoft::Json::Serialization {
  // Forward declaring type: NamingStrategy
  class NamingStrategy;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Serialization::NamingStrategy);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Serialization::NamingStrategy*, "Newtonsoft.Json.Serialization", "NamingStrategy");
// Type namespace: Newtonsoft.Json.Serialization
namespace Newtonsoft::Json::Serialization {
  // Size: 0x13
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Serialization.NamingStrategy
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: 673A28
  // [NullableContextAttribute] Offset: 673A28
  class NamingStrategy : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean <ProcessDictionaryKeys>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool ProcessDictionaryKeys;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <ProcessExtensionDataNames>k__BackingField
    // Size: 0x1
    // Offset: 0x11
    bool ProcessExtensionDataNames;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <OverrideSpecifiedNames>k__BackingField
    // Size: 0x1
    // Offset: 0x12
    bool OverrideSpecifiedNames;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Boolean <ProcessDictionaryKeys>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ProcessDictionaryKeys$k__BackingField();
    // Get instance field reference: private System.Boolean <ProcessExtensionDataNames>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ProcessExtensionDataNames$k__BackingField();
    // Get instance field reference: private System.Boolean <OverrideSpecifiedNames>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$OverrideSpecifiedNames$k__BackingField();
    // public System.Boolean get_ProcessDictionaryKeys()
    // Offset: 0x1348228
    bool get_ProcessDictionaryKeys();
    // public System.Boolean get_ProcessExtensionDataNames()
    // Offset: 0x1348230
    bool get_ProcessExtensionDataNames();
    // public System.Boolean get_OverrideSpecifiedNames()
    // Offset: 0x1348238
    bool get_OverrideSpecifiedNames();
    // protected System.Void .ctor()
    // Offset: 0x13484DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NamingStrategy* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Serialization::NamingStrategy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NamingStrategy*, creationType>()));
    }
    // public System.String GetPropertyName(System.String name, System.Boolean hasSpecifiedName)
    // Offset: 0x1348240
    ::StringW GetPropertyName(::StringW name, bool hasSpecifiedName);
    // public System.String GetExtensionDataName(System.String name)
    // Offset: 0x1348260
    ::StringW GetExtensionDataName(::StringW name);
    // public System.String GetDictionaryKey(System.String key)
    // Offset: 0x134827C
    ::StringW GetDictionaryKey(::StringW key);
    // protected System.String ResolvePropertyName(System.String name)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW ResolvePropertyName(::StringW name);
    // protected System.Boolean Equals(Newtonsoft.Json.Serialization.NamingStrategy other)
    // Offset: 0x13483D4
    bool Equals(::Newtonsoft::Json::Serialization::NamingStrategy* other);
    // public override System.Int32 GetHashCode()
    // Offset: 0x1348298
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x1348348
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
  }; // Newtonsoft.Json.Serialization.NamingStrategy
  #pragma pack(pop)
  static check_size<sizeof(NamingStrategy), 18 + sizeof(bool)> __Newtonsoft_Json_Serialization_NamingStrategySizeCheck;
  static_assert(sizeof(NamingStrategy) == 0x13);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::NamingStrategy::get_ProcessDictionaryKeys
// Il2CppName: get_ProcessDictionaryKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::NamingStrategy::*)()>(&Newtonsoft::Json::Serialization::NamingStrategy::get_ProcessDictionaryKeys)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::NamingStrategy*), "get_ProcessDictionaryKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::NamingStrategy::get_ProcessExtensionDataNames
// Il2CppName: get_ProcessExtensionDataNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::NamingStrategy::*)()>(&Newtonsoft::Json::Serialization::NamingStrategy::get_ProcessExtensionDataNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::NamingStrategy*), "get_ProcessExtensionDataNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::NamingStrategy::get_OverrideSpecifiedNames
// Il2CppName: get_OverrideSpecifiedNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::NamingStrategy::*)()>(&Newtonsoft::Json::Serialization::NamingStrategy::get_OverrideSpecifiedNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::NamingStrategy*), "get_OverrideSpecifiedNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::NamingStrategy::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::NamingStrategy::GetPropertyName
// Il2CppName: GetPropertyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Serialization::NamingStrategy::*)(::StringW, bool)>(&Newtonsoft::Json::Serialization::NamingStrategy::GetPropertyName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* hasSpecifiedName = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::NamingStrategy*), "GetPropertyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, hasSpecifiedName});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::NamingStrategy::GetExtensionDataName
// Il2CppName: GetExtensionDataName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Serialization::NamingStrategy::*)(::StringW)>(&Newtonsoft::Json::Serialization::NamingStrategy::GetExtensionDataName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::NamingStrategy*), "GetExtensionDataName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::NamingStrategy::GetDictionaryKey
// Il2CppName: GetDictionaryKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Serialization::NamingStrategy::*)(::StringW)>(&Newtonsoft::Json::Serialization::NamingStrategy::GetDictionaryKey)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::NamingStrategy*), "GetDictionaryKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::NamingStrategy::ResolvePropertyName
// Il2CppName: ResolvePropertyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Serialization::NamingStrategy::*)(::StringW)>(&Newtonsoft::Json::Serialization::NamingStrategy::ResolvePropertyName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::NamingStrategy*), "ResolvePropertyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::NamingStrategy::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::NamingStrategy::*)(::Newtonsoft::Json::Serialization::NamingStrategy*)>(&Newtonsoft::Json::Serialization::NamingStrategy::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "NamingStrategy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::NamingStrategy*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::NamingStrategy::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Newtonsoft::Json::Serialization::NamingStrategy::*)()>(&Newtonsoft::Json::Serialization::NamingStrategy::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::NamingStrategy*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::NamingStrategy::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::NamingStrategy::*)(::Il2CppObject*)>(&Newtonsoft::Json::Serialization::NamingStrategy::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::NamingStrategy*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
