// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Runtime.Serialization.SerializationBinder
#include "System/Runtime/Serialization/SerializationBinder.hpp"
// Including type: Newtonsoft.Json.Serialization.ISerializationBinder
#include "Newtonsoft/Json/Serialization/ISerializationBinder.hpp"
// Including type: Newtonsoft.Json.Utilities.StructMultiKey`2
#include "Newtonsoft/Json/Utilities/StructMultiKey_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Newtonsoft::Json::Utilities
namespace Newtonsoft::Json::Utilities {
  // Forward declaring type: ThreadSafeStore`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class ThreadSafeStore_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: Assembly
  class Assembly;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json.Serialization
namespace Newtonsoft::Json::Serialization {
  // Forward declaring type: DefaultSerializationBinder
  class DefaultSerializationBinder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Serialization::DefaultSerializationBinder);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Serialization::DefaultSerializationBinder*, "Newtonsoft.Json.Serialization", "DefaultSerializationBinder");
// Type namespace: Newtonsoft.Json.Serialization
namespace Newtonsoft::Json::Serialization {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Serialization.DefaultSerializationBinder
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: 673424
  // [NullableAttribute] Offset: 673424
  class DefaultSerializationBinder : public ::System::Runtime::Serialization::SerializationBinder/*, public ::Newtonsoft::Json::Serialization::ISerializationBinder*/ {
    public:
    public:
    // [NullableAttribute] Offset: 0x676464
    // private readonly Newtonsoft.Json.Utilities.ThreadSafeStore`2<Newtonsoft.Json.Utilities.StructMultiKey`2<System.String,System.String>,System.Type> _typeCache
    // Size: 0x8
    // Offset: 0x10
    ::Newtonsoft::Json::Utilities::ThreadSafeStore_2<::Newtonsoft::Json::Utilities::StructMultiKey_2<::StringW, ::StringW>, ::System::Type*>* typeCache;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::Utilities::ThreadSafeStore_2<::Newtonsoft::Json::Utilities::StructMultiKey_2<::StringW, ::StringW>, ::System::Type*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Newtonsoft::Json::Serialization::ISerializationBinder
    operator ::Newtonsoft::Json::Serialization::ISerializationBinder() noexcept {
      return *reinterpret_cast<::Newtonsoft::Json::Serialization::ISerializationBinder*>(this);
    }
    // Creating conversion operator: operator ::Newtonsoft::Json::Utilities::ThreadSafeStore_2<::Newtonsoft::Json::Utilities::StructMultiKey_2<::StringW, ::StringW>, ::System::Type*>*
    constexpr operator ::Newtonsoft::Json::Utilities::ThreadSafeStore_2<::Newtonsoft::Json::Utilities::StructMultiKey_2<::StringW, ::StringW>, ::System::Type*>*() const noexcept {
      return typeCache;
    }
    // Get static field: static readonly Newtonsoft.Json.Serialization.DefaultSerializationBinder Instance
    static ::Newtonsoft::Json::Serialization::DefaultSerializationBinder* _get_Instance();
    // Set static field: static readonly Newtonsoft.Json.Serialization.DefaultSerializationBinder Instance
    static void _set_Instance(::Newtonsoft::Json::Serialization::DefaultSerializationBinder* value);
    // Get instance field reference: private readonly Newtonsoft.Json.Utilities.ThreadSafeStore`2<Newtonsoft.Json.Utilities.StructMultiKey`2<System.String,System.String>,System.Type> _typeCache
    [[deprecated]] ::Newtonsoft::Json::Utilities::ThreadSafeStore_2<::Newtonsoft::Json::Utilities::StructMultiKey_2<::StringW, ::StringW>, ::System::Type*>*& dyn__typeCache();
    // static private System.Void .cctor()
    // Offset: 0xDCBD1C
    static void _cctor();
    // private System.Type GetTypeFromTypeNameKey(Newtonsoft.Json.Utilities.StructMultiKey`2<System.String,System.String> typeNameKey)
    // Offset: 0xDCB498
    ::System::Type* GetTypeFromTypeNameKey(::Newtonsoft::Json::Utilities::StructMultiKey_2<::StringW, ::StringW> typeNameKey);
    // private System.Type GetGenericTypeFromTypeName(System.String typeName, System.Reflection.Assembly assembly)
    // Offset: 0xDCB938
    ::System::Type* GetGenericTypeFromTypeName(::StringW typeName, ::System::Reflection::Assembly* assembly);
    // private System.Type GetTypeByName(Newtonsoft.Json.Utilities.StructMultiKey`2<System.String,System.String> typeNameKey)
    // Offset: 0xDCBBBC
    ::System::Type* GetTypeByName(::Newtonsoft::Json::Utilities::StructMultiKey_2<::StringW, ::StringW> typeNameKey);
    // public System.Void .ctor()
    // Offset: 0xDCB3B8
    // Implemented from: System.Runtime.Serialization.SerializationBinder
    // Base method: System.Void SerializationBinder::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DefaultSerializationBinder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Serialization::DefaultSerializationBinder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DefaultSerializationBinder*, creationType>()));
    }
    // public override System.Type BindToType(System.String assemblyName, System.String typeName)
    // Offset: 0xDCBC28
    // Implemented from: System.Runtime.Serialization.SerializationBinder
    // Base method: System.Type SerializationBinder::BindToType(System.String assemblyName, System.String typeName)
    ::System::Type* BindToType(::StringW assemblyName, ::StringW typeName);
    // public override System.Void BindToName(System.Type serializedType, out System.String assemblyName, out System.String typeName)
    // Offset: 0xDCBCA8
    // Implemented from: System.Runtime.Serialization.SerializationBinder
    // Base method: System.Void SerializationBinder::BindToName(System.Type serializedType, out System.String assemblyName, out System.String typeName)
    void BindToName(::System::Type* serializedType, ByRef<::StringW> assemblyName, ByRef<::StringW> typeName);
  }; // Newtonsoft.Json.Serialization.DefaultSerializationBinder
  #pragma pack(pop)
  static check_size<sizeof(DefaultSerializationBinder), 16 + sizeof(::Newtonsoft::Json::Utilities::ThreadSafeStore_2<::Newtonsoft::Json::Utilities::StructMultiKey_2<::StringW, ::StringW>, ::System::Type*>*)> __Newtonsoft_Json_Serialization_DefaultSerializationBinderSizeCheck;
  static_assert(sizeof(DefaultSerializationBinder) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultSerializationBinder::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Newtonsoft::Json::Serialization::DefaultSerializationBinder::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultSerializationBinder*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultSerializationBinder::GetTypeFromTypeNameKey
// Il2CppName: GetTypeFromTypeNameKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Newtonsoft::Json::Serialization::DefaultSerializationBinder::*)(::Newtonsoft::Json::Utilities::StructMultiKey_2<::StringW, ::StringW>)>(&Newtonsoft::Json::Serialization::DefaultSerializationBinder::GetTypeFromTypeNameKey)> {
  static const MethodInfo* get() {
    static auto* typeNameKey = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Utilities", "StructMultiKey`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultSerializationBinder*), "GetTypeFromTypeNameKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeNameKey});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultSerializationBinder::GetGenericTypeFromTypeName
// Il2CppName: GetGenericTypeFromTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Newtonsoft::Json::Serialization::DefaultSerializationBinder::*)(::StringW, ::System::Reflection::Assembly*)>(&Newtonsoft::Json::Serialization::DefaultSerializationBinder::GetGenericTypeFromTypeName)> {
  static const MethodInfo* get() {
    static auto* typeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* assembly = &::il2cpp_utils::GetClassFromName("System.Reflection", "Assembly")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultSerializationBinder*), "GetGenericTypeFromTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeName, assembly});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultSerializationBinder::GetTypeByName
// Il2CppName: GetTypeByName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Newtonsoft::Json::Serialization::DefaultSerializationBinder::*)(::Newtonsoft::Json::Utilities::StructMultiKey_2<::StringW, ::StringW>)>(&Newtonsoft::Json::Serialization::DefaultSerializationBinder::GetTypeByName)> {
  static const MethodInfo* get() {
    static auto* typeNameKey = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Utilities", "StructMultiKey`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultSerializationBinder*), "GetTypeByName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeNameKey});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultSerializationBinder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultSerializationBinder::BindToType
// Il2CppName: BindToType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Newtonsoft::Json::Serialization::DefaultSerializationBinder::*)(::StringW, ::StringW)>(&Newtonsoft::Json::Serialization::DefaultSerializationBinder::BindToType)> {
  static const MethodInfo* get() {
    static auto* assemblyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* typeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultSerializationBinder*), "BindToType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assemblyName, typeName});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultSerializationBinder::BindToName
// Il2CppName: BindToName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::DefaultSerializationBinder::*)(::System::Type*, ByRef<::StringW>, ByRef<::StringW>)>(&Newtonsoft::Json::Serialization::DefaultSerializationBinder::BindToName)> {
  static const MethodInfo* get() {
    static auto* serializedType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* assemblyName = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* typeName = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultSerializationBinder*), "BindToName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializedType, assemblyName, typeName});
  }
};
