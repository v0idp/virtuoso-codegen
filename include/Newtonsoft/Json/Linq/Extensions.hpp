// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: Newtonsoft::Json::Linq
namespace Newtonsoft::Json::Linq {
  // Forward declaring type: JToken
  class JToken;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json.Linq
namespace Newtonsoft::Json::Linq {
  // Forward declaring type: Extensions
  class Extensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Linq::Extensions);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Linq::Extensions*, "Newtonsoft.Json.Linq", "Extensions");
// Type namespace: Newtonsoft.Json.Linq
namespace Newtonsoft::Json::Linq {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Linq.Extensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: 673B9C
  // [NullableContextAttribute] Offset: 673B9C
  // [ExtensionAttribute] Offset: FFFFFFFF
  class Extensions : public ::Il2CppObject {
    public:
    // static public U Value(System.Collections.Generic.IEnumerable`1<Newtonsoft.Json.Linq.JToken> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class U>
    static U Value(::System::Collections::Generic::IEnumerable_1<::Newtonsoft::Json::Linq::JToken*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Linq::Extensions::Value");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Newtonsoft.Json.Linq", "Extensions", "Value", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<U, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value);
    }
    // static public U Value(System.Collections.Generic.IEnumerable`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class U>
    static U Value(::System::Collections::Generic::IEnumerable_1<T>* value) {
      static_assert(std::is_convertible_v<T, ::Newtonsoft::Json::Linq::JToken*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Linq::Extensions::Value");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Newtonsoft.Json.Linq", "Extensions", "Value", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<U, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value);
    }
    // static U Convert(T token)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class U>
    static U Convert(T token) {
      static_assert(std::is_convertible_v<T, ::Newtonsoft::Json::Linq::JToken*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Linq::Extensions::Convert");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Newtonsoft.Json.Linq", "Extensions", "Convert", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(token)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<U, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, token);
    }
  }; // Newtonsoft.Json.Linq.Extensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::Extensions::Value
// Il2CppName: Value
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::Extensions::Value
// Il2CppName: Value
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::Extensions::Convert
// Il2CppName: Convert
// Cannot write MetadataGetter for generic methods!
