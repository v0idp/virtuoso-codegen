// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.Utilities.ImmutableCollectionsUtils
#include "Newtonsoft/Json/Utilities/ImmutableCollectionsUtils.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo*, "Newtonsoft.Json.Utilities", "ImmutableCollectionsUtils/ImmutableCollectionTypeInfo");
// Type namespace: Newtonsoft.Json.Utilities
namespace Newtonsoft::Json::Utilities {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Utilities.ImmutableCollectionsUtils/Newtonsoft.Json.Utilities.ImmutableCollectionTypeInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: 672D68
  class ImmutableCollectionsUtils::ImmutableCollectionTypeInfo : public ::Il2CppObject {
    public:
    public:
    // private System.String <ContractTypeName>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW ContractTypeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <CreatedTypeName>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW CreatedTypeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <BuilderTypeName>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW BuilderTypeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.String <ContractTypeName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$ContractTypeName$k__BackingField();
    // Get instance field reference: private System.String <CreatedTypeName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$CreatedTypeName$k__BackingField();
    // Get instance field reference: private System.String <BuilderTypeName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$BuilderTypeName$k__BackingField();
    // public System.String get_ContractTypeName()
    // Offset: 0x159EC28
    ::StringW get_ContractTypeName();
    // public System.Void set_ContractTypeName(System.String value)
    // Offset: 0x159EC30
    void set_ContractTypeName(::StringW value);
    // public System.String get_CreatedTypeName()
    // Offset: 0x159EC38
    ::StringW get_CreatedTypeName();
    // public System.Void set_CreatedTypeName(System.String value)
    // Offset: 0x159EC40
    void set_CreatedTypeName(::StringW value);
    // public System.String get_BuilderTypeName()
    // Offset: 0x159EC48
    ::StringW get_BuilderTypeName();
    // public System.Void set_BuilderTypeName(System.String value)
    // Offset: 0x159EC50
    void set_BuilderTypeName(::StringW value);
    // public System.Void .ctor(System.String contractTypeName, System.String createdTypeName, System.String builderTypeName)
    // Offset: 0x159EBE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ImmutableCollectionsUtils::ImmutableCollectionTypeInfo* New_ctor(::StringW contractTypeName, ::StringW createdTypeName, ::StringW builderTypeName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ImmutableCollectionsUtils::ImmutableCollectionTypeInfo*, creationType>(contractTypeName, createdTypeName, builderTypeName)));
    }
  }; // Newtonsoft.Json.Utilities.ImmutableCollectionsUtils/Newtonsoft.Json.Utilities.ImmutableCollectionTypeInfo
  #pragma pack(pop)
  static check_size<sizeof(ImmutableCollectionsUtils::ImmutableCollectionTypeInfo), 32 + sizeof(::StringW)> __Newtonsoft_Json_Utilities_ImmutableCollectionsUtils_ImmutableCollectionTypeInfoSizeCheck;
  static_assert(sizeof(ImmutableCollectionsUtils::ImmutableCollectionTypeInfo) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::get_ContractTypeName
// Il2CppName: get_ContractTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::*)()>(&Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::get_ContractTypeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo*), "get_ContractTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::set_ContractTypeName
// Il2CppName: set_ContractTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::*)(::StringW)>(&Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::set_ContractTypeName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo*), "set_ContractTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::get_CreatedTypeName
// Il2CppName: get_CreatedTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::*)()>(&Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::get_CreatedTypeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo*), "get_CreatedTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::set_CreatedTypeName
// Il2CppName: set_CreatedTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::*)(::StringW)>(&Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::set_CreatedTypeName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo*), "set_CreatedTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::get_BuilderTypeName
// Il2CppName: get_BuilderTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::*)()>(&Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::get_BuilderTypeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo*), "get_BuilderTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::set_BuilderTypeName
// Il2CppName: set_BuilderTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::*)(::StringW)>(&Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::set_BuilderTypeName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo*), "set_BuilderTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ImmutableCollectionsUtils::ImmutableCollectionTypeInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
