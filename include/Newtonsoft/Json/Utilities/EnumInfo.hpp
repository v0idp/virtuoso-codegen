// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Newtonsoft.Json.Utilities
namespace Newtonsoft::Json::Utilities {
  // Forward declaring type: EnumInfo
  class EnumInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Utilities::EnumInfo);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Utilities::EnumInfo*, "Newtonsoft.Json.Utilities", "EnumInfo");
// Type namespace: Newtonsoft.Json.Utilities
namespace Newtonsoft::Json::Utilities {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Utilities.EnumInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: 672BE8
  // [NullableAttribute] Offset: 672BE8
  class EnumInfo : public ::Il2CppObject {
    public:
    public:
    // public readonly System.Boolean IsFlags
    // Size: 0x1
    // Offset: 0x10
    bool IsFlags;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsFlags and: Values
    char __padding0[0x7] = {};
    // public readonly System.UInt64[] Values
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<uint64_t> Values;
    // Field size check
    static_assert(sizeof(::ArrayW<uint64_t>) == 0x8);
    // public readonly System.String[] Names
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::StringW> Names;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public readonly System.String[] ResolvedNames
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::StringW> ResolvedNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    public:
    // Get instance field reference: public readonly System.Boolean IsFlags
    [[deprecated]] bool& dyn_IsFlags();
    // Get instance field reference: public readonly System.UInt64[] Values
    [[deprecated]] ::ArrayW<uint64_t>& dyn_Values();
    // Get instance field reference: public readonly System.String[] Names
    [[deprecated]] ::ArrayW<::StringW>& dyn_Names();
    // Get instance field reference: public readonly System.String[] ResolvedNames
    [[deprecated]] ::ArrayW<::StringW>& dyn_ResolvedNames();
    // public System.Void .ctor(System.Boolean isFlags, System.UInt64[] values, System.String[] names, System.String[] resolvedNames)
    // Offset: 0xDCE438
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EnumInfo* New_ctor(bool isFlags, ::ArrayW<uint64_t> values, ::ArrayW<::StringW> names, ::ArrayW<::StringW> resolvedNames) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Utilities::EnumInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EnumInfo*, creationType>(isFlags, values, names, resolvedNames)));
    }
  }; // Newtonsoft.Json.Utilities.EnumInfo
  #pragma pack(pop)
  static check_size<sizeof(EnumInfo), 40 + sizeof(::ArrayW<::StringW>)> __Newtonsoft_Json_Utilities_EnumInfoSizeCheck;
  static_assert(sizeof(EnumInfo) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::EnumInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
