// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.Converters.IXmlNode
#include "Newtonsoft/Json/Converters/IXmlNode.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Newtonsoft::Json::Converters
namespace Newtonsoft::Json::Converters {
  // Forward declaring type: IXmlElement
  class IXmlElement;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json.Converters
namespace Newtonsoft::Json::Converters {
  // Forward declaring type: IXmlDocument
  class IXmlDocument;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Converters::IXmlDocument);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Converters::IXmlDocument*, "Newtonsoft.Json.Converters", "IXmlDocument");
// Type namespace: Newtonsoft.Json.Converters
namespace Newtonsoft::Json::Converters {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Converters.IXmlDocument
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: 674574
  class IXmlDocument/*, public ::Newtonsoft::Json::Converters::IXmlNode*/ {
    public:
    // Creating interface conversion operator: operator ::Newtonsoft::Json::Converters::IXmlNode
    operator ::Newtonsoft::Json::Converters::IXmlNode() noexcept {
      return *reinterpret_cast<::Newtonsoft::Json::Converters::IXmlNode*>(this);
    }
    // public Newtonsoft.Json.Converters.IXmlElement get_DocumentElement()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Newtonsoft::Json::Converters::IXmlElement* get_DocumentElement();
    // public Newtonsoft.Json.Converters.IXmlNode CreateComment(System.String text)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Newtonsoft::Json::Converters::IXmlNode* CreateComment(::StringW text);
    // public Newtonsoft.Json.Converters.IXmlNode CreateTextNode(System.String text)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Newtonsoft::Json::Converters::IXmlNode* CreateTextNode(::StringW text);
    // public Newtonsoft.Json.Converters.IXmlNode CreateCDataSection(System.String data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Newtonsoft::Json::Converters::IXmlNode* CreateCDataSection(::StringW data);
    // public Newtonsoft.Json.Converters.IXmlNode CreateWhitespace(System.String text)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Newtonsoft::Json::Converters::IXmlNode* CreateWhitespace(::StringW text);
    // public Newtonsoft.Json.Converters.IXmlNode CreateSignificantWhitespace(System.String text)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Newtonsoft::Json::Converters::IXmlNode* CreateSignificantWhitespace(::StringW text);
    // public Newtonsoft.Json.Converters.IXmlNode CreateXmlDeclaration(System.String version, System.String encoding, System.String standalone)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Newtonsoft::Json::Converters::IXmlNode* CreateXmlDeclaration(::StringW version, ::StringW encoding, ::StringW standalone);
    // public Newtonsoft.Json.Converters.IXmlNode CreateXmlDocumentType(System.String name, System.String publicId, System.String systemId, System.String internalSubset)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Newtonsoft::Json::Converters::IXmlNode* CreateXmlDocumentType(::StringW name, ::StringW publicId, ::StringW systemId, ::StringW internalSubset);
    // public Newtonsoft.Json.Converters.IXmlNode CreateProcessingInstruction(System.String target, System.String data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Newtonsoft::Json::Converters::IXmlNode* CreateProcessingInstruction(::StringW target, ::StringW data);
    // public Newtonsoft.Json.Converters.IXmlElement CreateElement(System.String elementName)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Newtonsoft::Json::Converters::IXmlElement* CreateElement(::StringW elementName);
    // public Newtonsoft.Json.Converters.IXmlElement CreateElement(System.String qualifiedName, System.String namespaceUri)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Newtonsoft::Json::Converters::IXmlElement* CreateElement(::StringW qualifiedName, ::StringW namespaceUri);
    // public Newtonsoft.Json.Converters.IXmlNode CreateAttribute(System.String name, System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Newtonsoft::Json::Converters::IXmlNode* CreateAttribute(::StringW name, ::StringW value);
    // public Newtonsoft.Json.Converters.IXmlNode CreateAttribute(System.String qualifiedName, System.String namespaceUri, System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Newtonsoft::Json::Converters::IXmlNode* CreateAttribute(::StringW qualifiedName, ::StringW namespaceUri, ::StringW value);
  }; // Newtonsoft.Json.Converters.IXmlDocument
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::IXmlDocument::get_DocumentElement
// Il2CppName: get_DocumentElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlElement* (Newtonsoft::Json::Converters::IXmlDocument::*)()>(&Newtonsoft::Json::Converters::IXmlDocument::get_DocumentElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::IXmlDocument*), "get_DocumentElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::IXmlDocument::CreateComment
// Il2CppName: CreateComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::IXmlDocument::*)(::StringW)>(&Newtonsoft::Json::Converters::IXmlDocument::CreateComment)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::IXmlDocument*), "CreateComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::IXmlDocument::CreateTextNode
// Il2CppName: CreateTextNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::IXmlDocument::*)(::StringW)>(&Newtonsoft::Json::Converters::IXmlDocument::CreateTextNode)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::IXmlDocument*), "CreateTextNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::IXmlDocument::CreateCDataSection
// Il2CppName: CreateCDataSection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::IXmlDocument::*)(::StringW)>(&Newtonsoft::Json::Converters::IXmlDocument::CreateCDataSection)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::IXmlDocument*), "CreateCDataSection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::IXmlDocument::CreateWhitespace
// Il2CppName: CreateWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::IXmlDocument::*)(::StringW)>(&Newtonsoft::Json::Converters::IXmlDocument::CreateWhitespace)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::IXmlDocument*), "CreateWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::IXmlDocument::CreateSignificantWhitespace
// Il2CppName: CreateSignificantWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::IXmlDocument::*)(::StringW)>(&Newtonsoft::Json::Converters::IXmlDocument::CreateSignificantWhitespace)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::IXmlDocument*), "CreateSignificantWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::IXmlDocument::CreateXmlDeclaration
// Il2CppName: CreateXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::IXmlDocument::*)(::StringW, ::StringW, ::StringW)>(&Newtonsoft::Json::Converters::IXmlDocument::CreateXmlDeclaration)> {
  static const MethodInfo* get() {
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* encoding = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* standalone = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::IXmlDocument*), "CreateXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{version, encoding, standalone});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::IXmlDocument::CreateXmlDocumentType
// Il2CppName: CreateXmlDocumentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::IXmlDocument::*)(::StringW, ::StringW, ::StringW, ::StringW)>(&Newtonsoft::Json::Converters::IXmlDocument::CreateXmlDocumentType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* publicId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* systemId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* internalSubset = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::IXmlDocument*), "CreateXmlDocumentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, publicId, systemId, internalSubset});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::IXmlDocument::CreateProcessingInstruction
// Il2CppName: CreateProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::IXmlDocument::*)(::StringW, ::StringW)>(&Newtonsoft::Json::Converters::IXmlDocument::CreateProcessingInstruction)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::IXmlDocument*), "CreateProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, data});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::IXmlDocument::CreateElement
// Il2CppName: CreateElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlElement* (Newtonsoft::Json::Converters::IXmlDocument::*)(::StringW)>(&Newtonsoft::Json::Converters::IXmlDocument::CreateElement)> {
  static const MethodInfo* get() {
    static auto* elementName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::IXmlDocument*), "CreateElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementName});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::IXmlDocument::CreateElement
// Il2CppName: CreateElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlElement* (Newtonsoft::Json::Converters::IXmlDocument::*)(::StringW, ::StringW)>(&Newtonsoft::Json::Converters::IXmlDocument::CreateElement)> {
  static const MethodInfo* get() {
    static auto* qualifiedName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::IXmlDocument*), "CreateElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qualifiedName, namespaceUri});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::IXmlDocument::CreateAttribute
// Il2CppName: CreateAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::IXmlDocument::*)(::StringW, ::StringW)>(&Newtonsoft::Json::Converters::IXmlDocument::CreateAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::IXmlDocument*), "CreateAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::IXmlDocument::CreateAttribute
// Il2CppName: CreateAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::IXmlDocument::*)(::StringW, ::StringW, ::StringW)>(&Newtonsoft::Json::Converters::IXmlDocument::CreateAttribute)> {
  static const MethodInfo* get() {
    static auto* qualifiedName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::IXmlDocument*), "CreateAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qualifiedName, namespaceUri, value});
  }
};
