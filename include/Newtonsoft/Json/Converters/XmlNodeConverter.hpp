// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.JsonConverter
#include "Newtonsoft/Json/JsonConverter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Newtonsoft::Json::Converters
namespace Newtonsoft::Json::Converters {
  // Forward declaring type: IXmlNode
  class IXmlNode;
  // Forward declaring type: IXmlDocument
  class IXmlDocument;
  // Forward declaring type: IXmlElement
  class IXmlElement;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlNamespaceManager
  class XmlNamespaceManager;
}
// Forward declaring namespace: Newtonsoft::Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonWriter
  class JsonWriter;
  // Forward declaring type: JsonReader
  class JsonReader;
  // Forward declaring type: JsonSerializer
  class JsonSerializer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json.Converters
namespace Newtonsoft::Json::Converters {
  // Forward declaring type: XmlNodeConverter
  class XmlNodeConverter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Converters::XmlNodeConverter);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Converters::XmlNodeConverter*, "Newtonsoft.Json.Converters", "XmlNodeConverter");
// Type namespace: Newtonsoft.Json.Converters
namespace Newtonsoft::Json::Converters {
  // Size: 0x1B
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Converters.XmlNodeConverter
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: 674858
  // [NullableAttribute] Offset: 674858
  class XmlNodeConverter : public ::Newtonsoft::Json::JsonConverter {
    public:
    public:
    // [NullableAttribute] Offset: 0x677DD0
    // private System.String <DeserializeRootElementName>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW DeserializeRootElementName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean <WriteArrayAttribute>k__BackingField
    // Size: 0x1
    // Offset: 0x18
    bool WriteArrayAttribute;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <OmitRootObject>k__BackingField
    // Size: 0x1
    // Offset: 0x19
    bool OmitRootObject;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <EncodeSpecialCharacters>k__BackingField
    // Size: 0x1
    // Offset: 0x1A
    bool EncodeSpecialCharacters;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static readonly System.Collections.Generic.List`1<Newtonsoft.Json.Converters.IXmlNode> EmptyChildNodes
    static ::System::Collections::Generic::List_1<::Newtonsoft::Json::Converters::IXmlNode*>* _get_EmptyChildNodes();
    // Set static field: static readonly System.Collections.Generic.List`1<Newtonsoft.Json.Converters.IXmlNode> EmptyChildNodes
    static void _set_EmptyChildNodes(::System::Collections::Generic::List_1<::Newtonsoft::Json::Converters::IXmlNode*>* value);
    // Get instance field reference: private System.String <DeserializeRootElementName>k__BackingField
    [[deprecated]] ::StringW& dyn_$DeserializeRootElementName$k__BackingField();
    // Get instance field reference: private System.Boolean <WriteArrayAttribute>k__BackingField
    [[deprecated]] bool& dyn_$WriteArrayAttribute$k__BackingField();
    // Get instance field reference: private System.Boolean <OmitRootObject>k__BackingField
    [[deprecated]] bool& dyn_$OmitRootObject$k__BackingField();
    // Get instance field reference: private System.Boolean <EncodeSpecialCharacters>k__BackingField
    [[deprecated]] bool& dyn_$EncodeSpecialCharacters$k__BackingField();
    // public System.String get_DeserializeRootElementName()
    // Offset: 0x15938A4
    ::StringW get_DeserializeRootElementName();
    // public System.Boolean get_WriteArrayAttribute()
    // Offset: 0x15938AC
    bool get_WriteArrayAttribute();
    // public System.Boolean get_OmitRootObject()
    // Offset: 0x15938B4
    bool get_OmitRootObject();
    // public System.Boolean get_EncodeSpecialCharacters()
    // Offset: 0x15938BC
    bool get_EncodeSpecialCharacters();
    // static private System.Void .cctor()
    // Offset: 0x159BF4C
    static void _cctor();
    // private Newtonsoft.Json.Converters.IXmlNode WrapXml(System.Object value)
    // Offset: 0x1593A08
    ::Newtonsoft::Json::Converters::IXmlNode* WrapXml(::Il2CppObject* value);
    // private System.Void PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode node, System.Xml.XmlNamespaceManager manager)
    // Offset: 0x1593B24
    void PushParentNamespaces(::Newtonsoft::Json::Converters::IXmlNode* node, ::System::Xml::XmlNamespaceManager* manager);
    // private System.String ResolveFullName(Newtonsoft.Json.Converters.IXmlNode node, System.Xml.XmlNamespaceManager manager)
    // Offset: 0x1595BF8
    ::StringW ResolveFullName(::Newtonsoft::Json::Converters::IXmlNode* node, ::System::Xml::XmlNamespaceManager* manager);
    // private System.String GetPropertyName(Newtonsoft.Json.Converters.IXmlNode node, System.Xml.XmlNamespaceManager manager)
    // Offset: 0x1595F60
    ::StringW GetPropertyName(::Newtonsoft::Json::Converters::IXmlNode* node, ::System::Xml::XmlNamespaceManager* manager);
    // private System.Boolean IsArray(Newtonsoft.Json.Converters.IXmlNode node)
    // Offset: 0x15963D4
    bool IsArray(::Newtonsoft::Json::Converters::IXmlNode* node);
    // private System.Void SerializeGroupedNodes(Newtonsoft.Json.JsonWriter writer, Newtonsoft.Json.Converters.IXmlNode node, System.Xml.XmlNamespaceManager manager, System.Boolean writePropertyName)
    // Offset: 0x1596760
    void SerializeGroupedNodes(::Newtonsoft::Json::JsonWriter* writer, ::Newtonsoft::Json::Converters::IXmlNode* node, ::System::Xml::XmlNamespaceManager* manager, bool writePropertyName);
    // private System.Void WriteGroupedNodes(Newtonsoft.Json.JsonWriter writer, System.Xml.XmlNamespaceManager manager, System.Boolean writePropertyName, System.Collections.Generic.List`1<Newtonsoft.Json.Converters.IXmlNode> groupedNodes, System.String elementNames)
    // Offset: 0x1597054
    void WriteGroupedNodes(::Newtonsoft::Json::JsonWriter* writer, ::System::Xml::XmlNamespaceManager* manager, bool writePropertyName, ::System::Collections::Generic::List_1<::Newtonsoft::Json::Converters::IXmlNode*>* groupedNodes, ::StringW elementNames);
    // private System.Void WriteGroupedNodes(Newtonsoft.Json.JsonWriter writer, System.Xml.XmlNamespaceManager manager, System.Boolean writePropertyName, Newtonsoft.Json.Converters.IXmlNode node, System.String elementNames)
    // Offset: 0x15971C0
    void WriteGroupedNodes(::Newtonsoft::Json::JsonWriter* writer, ::System::Xml::XmlNamespaceManager* manager, bool writePropertyName, ::Newtonsoft::Json::Converters::IXmlNode* node, ::StringW elementNames);
    // private System.Void SerializeNode(Newtonsoft.Json.JsonWriter writer, Newtonsoft.Json.Converters.IXmlNode node, System.Xml.XmlNamespaceManager manager, System.Boolean writePropertyName)
    // Offset: 0x15941C0
    void SerializeNode(::Newtonsoft::Json::JsonWriter* writer, ::Newtonsoft::Json::Converters::IXmlNode* node, ::System::Xml::XmlNamespaceManager* manager, bool writePropertyName);
    // static private System.Boolean AllSameName(Newtonsoft.Json.Converters.IXmlNode node)
    // Offset: 0x1597294
    static bool AllSameName(::Newtonsoft::Json::Converters::IXmlNode* node);
    // private System.Void DeserializeValue(Newtonsoft.Json.JsonReader reader, Newtonsoft.Json.Converters.IXmlDocument document, System.Xml.XmlNamespaceManager manager, System.String propertyName, Newtonsoft.Json.Converters.IXmlNode currentNode)
    // Offset: 0x1598C88
    void DeserializeValue(::Newtonsoft::Json::JsonReader* reader, ::Newtonsoft::Json::Converters::IXmlDocument* document, ::System::Xml::XmlNamespaceManager* manager, ::StringW propertyName, ::Newtonsoft::Json::Converters::IXmlNode* currentNode);
    // private System.Void ReadElement(Newtonsoft.Json.JsonReader reader, Newtonsoft.Json.Converters.IXmlDocument document, Newtonsoft.Json.Converters.IXmlNode currentNode, System.String propertyName, System.Xml.XmlNamespaceManager manager)
    // Offset: 0x159812C
    void ReadElement(::Newtonsoft::Json::JsonReader* reader, ::Newtonsoft::Json::Converters::IXmlDocument* document, ::Newtonsoft::Json::Converters::IXmlNode* currentNode, ::StringW propertyName, ::System::Xml::XmlNamespaceManager* manager);
    // private System.Void CreateElement(Newtonsoft.Json.JsonReader reader, Newtonsoft.Json.Converters.IXmlDocument document, Newtonsoft.Json.Converters.IXmlNode currentNode, System.String elementName, System.Xml.XmlNamespaceManager manager, System.String elementPrefix, System.Collections.Generic.Dictionary`2<System.String,System.String> attributeNameValues)
    // Offset: 0x159B0A0
    void CreateElement(::Newtonsoft::Json::JsonReader* reader, ::Newtonsoft::Json::Converters::IXmlDocument* document, ::Newtonsoft::Json::Converters::IXmlNode* currentNode, ::StringW elementName, ::System::Xml::XmlNamespaceManager* manager, ::StringW elementPrefix, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* attributeNameValues);
    // static private System.Void AddAttribute(Newtonsoft.Json.JsonReader reader, Newtonsoft.Json.Converters.IXmlDocument document, Newtonsoft.Json.Converters.IXmlNode currentNode, System.String propertyName, System.String attributeName, System.Xml.XmlNamespaceManager manager, System.String attributePrefix)
    // Offset: 0x159ACCC
    static void AddAttribute(::Newtonsoft::Json::JsonReader* reader, ::Newtonsoft::Json::Converters::IXmlDocument* document, ::Newtonsoft::Json::Converters::IXmlNode* currentNode, ::StringW propertyName, ::StringW attributeName, ::System::Xml::XmlNamespaceManager* manager, ::StringW attributePrefix);
    // static private System.String ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader reader)
    // Offset: 0x15992B4
    static ::StringW ConvertTokenToXmlValue(::Newtonsoft::Json::JsonReader* reader);
    // private System.Void ReadArrayElements(Newtonsoft.Json.JsonReader reader, Newtonsoft.Json.Converters.IXmlDocument document, System.String propertyName, Newtonsoft.Json.Converters.IXmlNode currentNode, System.Xml.XmlNamespaceManager manager)
    // Offset: 0x159A2DC
    void ReadArrayElements(::Newtonsoft::Json::JsonReader* reader, ::Newtonsoft::Json::Converters::IXmlDocument* document, ::StringW propertyName, ::Newtonsoft::Json::Converters::IXmlNode* currentNode, ::System::Xml::XmlNamespaceManager* manager);
    // private System.Void AddJsonArrayAttribute(Newtonsoft.Json.Converters.IXmlElement element, Newtonsoft.Json.Converters.IXmlDocument document)
    // Offset: 0x159B8F8
    void AddJsonArrayAttribute(::Newtonsoft::Json::Converters::IXmlElement* element, ::Newtonsoft::Json::Converters::IXmlDocument* document);
    // private System.Boolean ShouldReadInto(Newtonsoft.Json.JsonReader reader)
    // Offset: 0x159A660
    bool ShouldReadInto(::Newtonsoft::Json::JsonReader* reader);
    // private System.Collections.Generic.Dictionary`2<System.String,System.String> ReadAttributeElements(Newtonsoft.Json.JsonReader reader, System.Xml.XmlNamespaceManager manager)
    // Offset: 0x159A6AC
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* ReadAttributeElements(::Newtonsoft::Json::JsonReader* reader, ::System::Xml::XmlNamespaceManager* manager);
    // private System.Void CreateInstruction(Newtonsoft.Json.JsonReader reader, Newtonsoft.Json.Converters.IXmlDocument document, Newtonsoft.Json.Converters.IXmlNode currentNode, System.String propertyName)
    // Offset: 0x15999B8
    void CreateInstruction(::Newtonsoft::Json::JsonReader* reader, ::Newtonsoft::Json::Converters::IXmlDocument* document, ::Newtonsoft::Json::Converters::IXmlNode* currentNode, ::StringW propertyName);
    // private System.Void CreateDocumentType(Newtonsoft.Json.JsonReader reader, Newtonsoft.Json.Converters.IXmlDocument document, Newtonsoft.Json.Converters.IXmlNode currentNode)
    // Offset: 0x1599EB4
    void CreateDocumentType(::Newtonsoft::Json::JsonReader* reader, ::Newtonsoft::Json::Converters::IXmlDocument* document, ::Newtonsoft::Json::Converters::IXmlNode* currentNode);
    // private Newtonsoft.Json.Converters.IXmlElement CreateElement(System.String elementName, Newtonsoft.Json.Converters.IXmlDocument document, System.String elementPrefix, System.Xml.XmlNamespaceManager manager)
    // Offset: 0x159B708
    ::Newtonsoft::Json::Converters::IXmlElement* CreateElement(::StringW elementName, ::Newtonsoft::Json::Converters::IXmlDocument* document, ::StringW elementPrefix, ::System::Xml::XmlNamespaceManager* manager);
    // private System.Void DeserializeNode(Newtonsoft.Json.JsonReader reader, Newtonsoft.Json.Converters.IXmlDocument document, System.Xml.XmlNamespaceManager manager, Newtonsoft.Json.Converters.IXmlNode currentNode)
    // Offset: 0x1598474
    void DeserializeNode(::Newtonsoft::Json::JsonReader* reader, ::Newtonsoft::Json::Converters::IXmlDocument* document, ::System::Xml::XmlNamespaceManager* manager, ::Newtonsoft::Json::Converters::IXmlNode* currentNode);
    // private System.Boolean IsNamespaceAttribute(System.String attributeName, out System.String prefix)
    // Offset: 0x159BC64
    bool IsNamespaceAttribute(::StringW attributeName, ByRef<::StringW> prefix);
    // private System.Boolean ValueAttributes(System.Collections.Generic.List`1<Newtonsoft.Json.Converters.IXmlNode> c)
    // Offset: 0x1597534
    bool ValueAttributes(::System::Collections::Generic::List_1<::Newtonsoft::Json::Converters::IXmlNode*>* c);
    // private System.Boolean IsXObject(System.Type valueType)
    // Offset: 0x159BE14
    bool IsXObject(::System::Type* valueType);
    // private System.Boolean IsXmlNode(System.Type valueType)
    // Offset: 0x159BEAC
    bool IsXmlNode(::System::Type* valueType);
    // public System.Void .ctor()
    // Offset: 0x159BF44
    // Implemented from: Newtonsoft.Json.JsonConverter
    // Base method: System.Void JsonConverter::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlNodeConverter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Converters::XmlNodeConverter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlNodeConverter*, creationType>()));
    }
    // public override System.Void WriteJson(Newtonsoft.Json.JsonWriter writer, System.Object value, Newtonsoft.Json.JsonSerializer serializer)
    // Offset: 0x15938C4
    // Implemented from: Newtonsoft.Json.JsonConverter
    // Base method: System.Void JsonConverter::WriteJson(Newtonsoft.Json.JsonWriter writer, System.Object value, Newtonsoft.Json.JsonSerializer serializer)
    void WriteJson(::Newtonsoft::Json::JsonWriter* writer, ::Il2CppObject* value, ::Newtonsoft::Json::JsonSerializer* serializer);
    // public override System.Object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, System.Object existingValue, Newtonsoft.Json.JsonSerializer serializer)
    // Offset: 0x1597834
    // Implemented from: Newtonsoft.Json.JsonConverter
    // Base method: System.Object JsonConverter::ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, System.Object existingValue, Newtonsoft.Json.JsonSerializer serializer)
    ::Il2CppObject* ReadJson(::Newtonsoft::Json::JsonReader* reader, ::System::Type* objectType, ::Il2CppObject* existingValue, ::Newtonsoft::Json::JsonSerializer* serializer);
    // public override System.Boolean CanConvert(System.Type valueType)
    // Offset: 0x159BD50
    // Implemented from: Newtonsoft.Json.JsonConverter
    // Base method: System.Boolean JsonConverter::CanConvert(System.Type valueType)
    bool CanConvert(::System::Type* valueType);
  }; // Newtonsoft.Json.Converters.XmlNodeConverter
  #pragma pack(pop)
  static check_size<sizeof(XmlNodeConverter), 26 + sizeof(bool)> __Newtonsoft_Json_Converters_XmlNodeConverterSizeCheck;
  static_assert(sizeof(XmlNodeConverter) == 0x1B);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::get_DeserializeRootElementName
// Il2CppName: get_DeserializeRootElementName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Converters::XmlNodeConverter::*)()>(&Newtonsoft::Json::Converters::XmlNodeConverter::get_DeserializeRootElementName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "get_DeserializeRootElementName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::get_WriteArrayAttribute
// Il2CppName: get_WriteArrayAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Converters::XmlNodeConverter::*)()>(&Newtonsoft::Json::Converters::XmlNodeConverter::get_WriteArrayAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "get_WriteArrayAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::get_OmitRootObject
// Il2CppName: get_OmitRootObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Converters::XmlNodeConverter::*)()>(&Newtonsoft::Json::Converters::XmlNodeConverter::get_OmitRootObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "get_OmitRootObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::get_EncodeSpecialCharacters
// Il2CppName: get_EncodeSpecialCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Converters::XmlNodeConverter::*)()>(&Newtonsoft::Json::Converters::XmlNodeConverter::get_EncodeSpecialCharacters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "get_EncodeSpecialCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Newtonsoft::Json::Converters::XmlNodeConverter::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::WrapXml
// Il2CppName: WrapXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Il2CppObject*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::WrapXml)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "WrapXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::PushParentNamespaces
// Il2CppName: PushParentNamespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::Converters::IXmlNode*, ::System::Xml::XmlNamespaceManager*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::PushParentNamespaces)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")->byval_arg;
    static auto* manager = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamespaceManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "PushParentNamespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, manager});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::ResolveFullName
// Il2CppName: ResolveFullName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::Converters::IXmlNode*, ::System::Xml::XmlNamespaceManager*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::ResolveFullName)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")->byval_arg;
    static auto* manager = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamespaceManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "ResolveFullName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, manager});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::GetPropertyName
// Il2CppName: GetPropertyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::Converters::IXmlNode*, ::System::Xml::XmlNamespaceManager*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::GetPropertyName)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")->byval_arg;
    static auto* manager = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamespaceManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "GetPropertyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, manager});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::IsArray
// Il2CppName: IsArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::Converters::IXmlNode*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::IsArray)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "IsArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::SerializeGroupedNodes
// Il2CppName: SerializeGroupedNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::JsonWriter*, ::Newtonsoft::Json::Converters::IXmlNode*, ::System::Xml::XmlNamespaceManager*, bool)>(&Newtonsoft::Json::Converters::XmlNodeConverter::SerializeGroupedNodes)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")->byval_arg;
    static auto* manager = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamespaceManager")->byval_arg;
    static auto* writePropertyName = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "SerializeGroupedNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, node, manager, writePropertyName});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::WriteGroupedNodes
// Il2CppName: WriteGroupedNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::JsonWriter*, ::System::Xml::XmlNamespaceManager*, bool, ::System::Collections::Generic::List_1<::Newtonsoft::Json::Converters::IXmlNode*>*, ::StringW)>(&Newtonsoft::Json::Converters::XmlNodeConverter::WriteGroupedNodes)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* manager = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamespaceManager")->byval_arg;
    static auto* writePropertyName = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* groupedNodes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")})->byval_arg;
    static auto* elementNames = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "WriteGroupedNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, manager, writePropertyName, groupedNodes, elementNames});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::WriteGroupedNodes
// Il2CppName: WriteGroupedNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::JsonWriter*, ::System::Xml::XmlNamespaceManager*, bool, ::Newtonsoft::Json::Converters::IXmlNode*, ::StringW)>(&Newtonsoft::Json::Converters::XmlNodeConverter::WriteGroupedNodes)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* manager = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamespaceManager")->byval_arg;
    static auto* writePropertyName = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")->byval_arg;
    static auto* elementNames = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "WriteGroupedNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, manager, writePropertyName, node, elementNames});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::SerializeNode
// Il2CppName: SerializeNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::JsonWriter*, ::Newtonsoft::Json::Converters::IXmlNode*, ::System::Xml::XmlNamespaceManager*, bool)>(&Newtonsoft::Json::Converters::XmlNodeConverter::SerializeNode)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")->byval_arg;
    static auto* manager = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamespaceManager")->byval_arg;
    static auto* writePropertyName = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "SerializeNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, node, manager, writePropertyName});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::AllSameName
// Il2CppName: AllSameName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Newtonsoft::Json::Converters::IXmlNode*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::AllSameName)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "AllSameName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::DeserializeValue
// Il2CppName: DeserializeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::JsonReader*, ::Newtonsoft::Json::Converters::IXmlDocument*, ::System::Xml::XmlNamespaceManager*, ::StringW, ::Newtonsoft::Json::Converters::IXmlNode*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::DeserializeValue)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* document = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlDocument")->byval_arg;
    static auto* manager = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamespaceManager")->byval_arg;
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* currentNode = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "DeserializeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, document, manager, propertyName, currentNode});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::ReadElement
// Il2CppName: ReadElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::JsonReader*, ::Newtonsoft::Json::Converters::IXmlDocument*, ::Newtonsoft::Json::Converters::IXmlNode*, ::StringW, ::System::Xml::XmlNamespaceManager*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::ReadElement)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* document = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlDocument")->byval_arg;
    static auto* currentNode = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")->byval_arg;
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* manager = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamespaceManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "ReadElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, document, currentNode, propertyName, manager});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::CreateElement
// Il2CppName: CreateElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::JsonReader*, ::Newtonsoft::Json::Converters::IXmlDocument*, ::Newtonsoft::Json::Converters::IXmlNode*, ::StringW, ::System::Xml::XmlNamespaceManager*, ::StringW, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::CreateElement)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* document = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlDocument")->byval_arg;
    static auto* currentNode = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")->byval_arg;
    static auto* elementName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* manager = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamespaceManager")->byval_arg;
    static auto* elementPrefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributeNameValues = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "CreateElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, document, currentNode, elementName, manager, elementPrefix, attributeNameValues});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::AddAttribute
// Il2CppName: AddAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Newtonsoft::Json::JsonReader*, ::Newtonsoft::Json::Converters::IXmlDocument*, ::Newtonsoft::Json::Converters::IXmlNode*, ::StringW, ::StringW, ::System::Xml::XmlNamespaceManager*, ::StringW)>(&Newtonsoft::Json::Converters::XmlNodeConverter::AddAttribute)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* document = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlDocument")->byval_arg;
    static auto* currentNode = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")->byval_arg;
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* manager = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamespaceManager")->byval_arg;
    static auto* attributePrefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "AddAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, document, currentNode, propertyName, attributeName, manager, attributePrefix});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::ConvertTokenToXmlValue
// Il2CppName: ConvertTokenToXmlValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Newtonsoft::Json::JsonReader*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::ConvertTokenToXmlValue)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "ConvertTokenToXmlValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::ReadArrayElements
// Il2CppName: ReadArrayElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::JsonReader*, ::Newtonsoft::Json::Converters::IXmlDocument*, ::StringW, ::Newtonsoft::Json::Converters::IXmlNode*, ::System::Xml::XmlNamespaceManager*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::ReadArrayElements)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* document = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlDocument")->byval_arg;
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* currentNode = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")->byval_arg;
    static auto* manager = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamespaceManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "ReadArrayElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, document, propertyName, currentNode, manager});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::AddJsonArrayAttribute
// Il2CppName: AddJsonArrayAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::Converters::IXmlElement*, ::Newtonsoft::Json::Converters::IXmlDocument*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::AddJsonArrayAttribute)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlElement")->byval_arg;
    static auto* document = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlDocument")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "AddJsonArrayAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element, document});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::ShouldReadInto
// Il2CppName: ShouldReadInto
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::JsonReader*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::ShouldReadInto)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "ShouldReadInto", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::ReadAttributeElements
// Il2CppName: ReadAttributeElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::JsonReader*, ::System::Xml::XmlNamespaceManager*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::ReadAttributeElements)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* manager = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamespaceManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "ReadAttributeElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, manager});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::CreateInstruction
// Il2CppName: CreateInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::JsonReader*, ::Newtonsoft::Json::Converters::IXmlDocument*, ::Newtonsoft::Json::Converters::IXmlNode*, ::StringW)>(&Newtonsoft::Json::Converters::XmlNodeConverter::CreateInstruction)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* document = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlDocument")->byval_arg;
    static auto* currentNode = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")->byval_arg;
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "CreateInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, document, currentNode, propertyName});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::CreateDocumentType
// Il2CppName: CreateDocumentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::JsonReader*, ::Newtonsoft::Json::Converters::IXmlDocument*, ::Newtonsoft::Json::Converters::IXmlNode*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::CreateDocumentType)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* document = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlDocument")->byval_arg;
    static auto* currentNode = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "CreateDocumentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, document, currentNode});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::CreateElement
// Il2CppName: CreateElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlElement* (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::StringW, ::Newtonsoft::Json::Converters::IXmlDocument*, ::StringW, ::System::Xml::XmlNamespaceManager*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::CreateElement)> {
  static const MethodInfo* get() {
    static auto* elementName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* document = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlDocument")->byval_arg;
    static auto* elementPrefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* manager = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamespaceManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "CreateElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementName, document, elementPrefix, manager});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::DeserializeNode
// Il2CppName: DeserializeNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::JsonReader*, ::Newtonsoft::Json::Converters::IXmlDocument*, ::System::Xml::XmlNamespaceManager*, ::Newtonsoft::Json::Converters::IXmlNode*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::DeserializeNode)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* document = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlDocument")->byval_arg;
    static auto* manager = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamespaceManager")->byval_arg;
    static auto* currentNode = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "DeserializeNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, document, manager, currentNode});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::IsNamespaceAttribute
// Il2CppName: IsNamespaceAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::StringW, ByRef<::StringW>)>(&Newtonsoft::Json::Converters::XmlNodeConverter::IsNamespaceAttribute)> {
  static const MethodInfo* get() {
    static auto* attributeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "IsNamespaceAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeName, prefix});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::ValueAttributes
// Il2CppName: ValueAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::System::Collections::Generic::List_1<::Newtonsoft::Json::Converters::IXmlNode*>*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::ValueAttributes)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "ValueAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::IsXObject
// Il2CppName: IsXObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::System::Type*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::IsXObject)> {
  static const MethodInfo* get() {
    static auto* valueType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "IsXObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{valueType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::IsXmlNode
// Il2CppName: IsXmlNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::System::Type*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::IsXmlNode)> {
  static const MethodInfo* get() {
    static auto* valueType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "IsXmlNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{valueType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::WriteJson
// Il2CppName: WriteJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::JsonWriter*, ::Il2CppObject*, ::Newtonsoft::Json::JsonSerializer*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::WriteJson)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* serializer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonSerializer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "WriteJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, value, serializer});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::ReadJson
// Il2CppName: ReadJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::Newtonsoft::Json::JsonReader*, ::System::Type*, ::Il2CppObject*, ::Newtonsoft::Json::JsonSerializer*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::ReadJson)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* existingValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* serializer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonSerializer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "ReadJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, objectType, existingValue, serializer});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlNodeConverter::CanConvert
// Il2CppName: CanConvert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Converters::XmlNodeConverter::*)(::System::Type*)>(&Newtonsoft::Json::Converters::XmlNodeConverter::CanConvert)> {
  static const MethodInfo* get() {
    static auto* valueType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlNodeConverter*), "CanConvert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{valueType});
  }
};
