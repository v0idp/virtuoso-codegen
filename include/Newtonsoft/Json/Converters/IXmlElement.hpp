// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.Converters.IXmlNode
#include "Newtonsoft/Json/Converters/IXmlNode.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Newtonsoft.Json.Converters
namespace Newtonsoft::Json::Converters {
  // Forward declaring type: IXmlElement
  class IXmlElement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Converters::IXmlElement);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Converters::IXmlElement*, "Newtonsoft.Json.Converters", "IXmlElement");
// Type namespace: Newtonsoft.Json.Converters
namespace Newtonsoft::Json::Converters {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Converters.IXmlElement
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: 6745B0
  class IXmlElement/*, public ::Newtonsoft::Json::Converters::IXmlNode*/ {
    public:
    // Creating interface conversion operator: operator ::Newtonsoft::Json::Converters::IXmlNode
    operator ::Newtonsoft::Json::Converters::IXmlNode() noexcept {
      return *reinterpret_cast<::Newtonsoft::Json::Converters::IXmlNode*>(this);
    }
    // public System.Boolean get_IsEmpty()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsEmpty();
    // public System.Void SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode attribute)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetAttributeNode(::Newtonsoft::Json::Converters::IXmlNode* attribute);
    // public System.String GetPrefixOfNamespace(System.String namespaceUri)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW GetPrefixOfNamespace(::StringW namespaceUri);
  }; // Newtonsoft.Json.Converters.IXmlElement
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::IXmlElement::get_IsEmpty
// Il2CppName: get_IsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Converters::IXmlElement::*)()>(&Newtonsoft::Json::Converters::IXmlElement::get_IsEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::IXmlElement*), "get_IsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::IXmlElement::SetAttributeNode
// Il2CppName: SetAttributeNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::IXmlElement::*)(::Newtonsoft::Json::Converters::IXmlNode*)>(&Newtonsoft::Json::Converters::IXmlElement::SetAttributeNode)> {
  static const MethodInfo* get() {
    static auto* attribute = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Converters", "IXmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::IXmlElement*), "SetAttributeNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attribute});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::IXmlElement::GetPrefixOfNamespace
// Il2CppName: GetPrefixOfNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Converters::IXmlElement::*)(::StringW)>(&Newtonsoft::Json::Converters::IXmlElement::GetPrefixOfNamespace)> {
  static const MethodInfo* get() {
    static auto* namespaceUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::IXmlElement*), "GetPrefixOfNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{namespaceUri});
  }
};
