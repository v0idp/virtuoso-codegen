// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.Converters.DiscriminatedUnionConverter
#include "Newtonsoft/Json/Converters/DiscriminatedUnionConverter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: PropertyInfo
  class PropertyInfo;
}
// Forward declaring namespace: Newtonsoft::Json::Utilities
namespace Newtonsoft::Json::Utilities {
  // Forward declaring type: FSharpFunction
  class FSharpFunction;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Converters::DiscriminatedUnionConverter::UnionCase);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Converters::DiscriminatedUnionConverter::UnionCase*, "Newtonsoft.Json.Converters", "DiscriminatedUnionConverter/UnionCase");
// Type namespace: Newtonsoft.Json.Converters
namespace Newtonsoft::Json::Converters {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Converters.DiscriminatedUnionConverter/Newtonsoft.Json.Converters.UnionCase
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: 674300
  class DiscriminatedUnionConverter::UnionCase : public ::Il2CppObject {
    public:
    public:
    // public readonly System.Int32 Tag
    // Size: 0x4
    // Offset: 0x10
    int Tag;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Tag and: Name
    char __padding0[0x4] = {};
    // public readonly System.String Name
    // Size: 0x8
    // Offset: 0x18
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly System.Reflection.PropertyInfo[] Fields
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::System::Reflection::PropertyInfo*> Fields;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Reflection::PropertyInfo*>) == 0x8);
    // public readonly Newtonsoft.Json.Utilities.FSharpFunction FieldReader
    // Size: 0x8
    // Offset: 0x28
    ::Newtonsoft::Json::Utilities::FSharpFunction* FieldReader;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::Utilities::FSharpFunction*) == 0x8);
    // public readonly Newtonsoft.Json.Utilities.FSharpFunction Constructor
    // Size: 0x8
    // Offset: 0x30
    ::Newtonsoft::Json::Utilities::FSharpFunction* Constructor;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::Utilities::FSharpFunction*) == 0x8);
    public:
    // Get instance field reference: public readonly System.Int32 Tag
    [[deprecated]] int& dyn_Tag();
    // Get instance field reference: public readonly System.String Name
    [[deprecated]] ::StringW& dyn_Name();
    // Get instance field reference: public readonly System.Reflection.PropertyInfo[] Fields
    [[deprecated]] ::ArrayW<::System::Reflection::PropertyInfo*>& dyn_Fields();
    // Get instance field reference: public readonly Newtonsoft.Json.Utilities.FSharpFunction FieldReader
    [[deprecated]] ::Newtonsoft::Json::Utilities::FSharpFunction*& dyn_FieldReader();
    // Get instance field reference: public readonly Newtonsoft.Json.Utilities.FSharpFunction Constructor
    [[deprecated]] ::Newtonsoft::Json::Utilities::FSharpFunction*& dyn_Constructor();
    // public System.Void .ctor(System.Int32 tag, System.String name, System.Reflection.PropertyInfo[] fields, Newtonsoft.Json.Utilities.FSharpFunction fieldReader, Newtonsoft.Json.Utilities.FSharpFunction constructor)
    // Offset: 0x159D9B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DiscriminatedUnionConverter::UnionCase* New_ctor(int tag, ::StringW name, ::ArrayW<::System::Reflection::PropertyInfo*> fields, ::Newtonsoft::Json::Utilities::FSharpFunction* fieldReader, ::Newtonsoft::Json::Utilities::FSharpFunction* constructor) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Converters::DiscriminatedUnionConverter::UnionCase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DiscriminatedUnionConverter::UnionCase*, creationType>(tag, name, fields, fieldReader, constructor)));
    }
  }; // Newtonsoft.Json.Converters.DiscriminatedUnionConverter/Newtonsoft.Json.Converters.UnionCase
  #pragma pack(pop)
  static check_size<sizeof(DiscriminatedUnionConverter::UnionCase), 48 + sizeof(::Newtonsoft::Json::Utilities::FSharpFunction*)> __Newtonsoft_Json_Converters_DiscriminatedUnionConverter_UnionCaseSizeCheck;
  static_assert(sizeof(DiscriminatedUnionConverter::UnionCase) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::DiscriminatedUnionConverter::UnionCase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
