// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.JsonNameTable
#include "Newtonsoft/Json/JsonNameTable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Newtonsoft::Json
namespace Newtonsoft::Json {
}
// Completed forward declares
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // Forward declaring type: DefaultJsonNameTable
  class DefaultJsonNameTable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::DefaultJsonNameTable);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::DefaultJsonNameTable*, "Newtonsoft.Json", "DefaultJsonNameTable");
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.DefaultJsonNameTable
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: 672054
  // [NullableAttribute] Offset: 672054
  class DefaultJsonNameTable : public ::Newtonsoft::Json::JsonNameTable {
    public:
    // Nested type: ::Newtonsoft::Json::DefaultJsonNameTable::Entry
    class Entry;
    public:
    // private System.Int32 _count
    // Size: 0x4
    // Offset: 0x10
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: count and: entries
    char __padding0[0x4] = {};
    // private Newtonsoft.Json.DefaultJsonNameTable/Newtonsoft.Json.Entry[] _entries
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::Newtonsoft::Json::DefaultJsonNameTable::Entry*> entries;
    // Field size check
    static_assert(sizeof(::ArrayW<::Newtonsoft::Json::DefaultJsonNameTable::Entry*>) == 0x8);
    // private System.Int32 _mask
    // Size: 0x4
    // Offset: 0x20
    int mask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private readonly System.Int32 HashCodeRandomizer
    static int _get_HashCodeRandomizer();
    // Set static field: static private readonly System.Int32 HashCodeRandomizer
    static void _set_HashCodeRandomizer(int value);
    // Get instance field reference: private System.Int32 _count
    [[deprecated]] int& dyn__count();
    // Get instance field reference: private Newtonsoft.Json.DefaultJsonNameTable/Newtonsoft.Json.Entry[] _entries
    [[deprecated]] ::ArrayW<::Newtonsoft::Json::DefaultJsonNameTable::Entry*>& dyn__entries();
    // Get instance field reference: private System.Int32 _mask
    [[deprecated]] int& dyn__mask();
    // static private System.Void .cctor()
    // Offset: 0xDCAB1C
    static void _cctor();
    // public System.String Add(System.String key)
    // Offset: 0xDC9BDC
    ::StringW Add(::StringW key);
    // private System.String AddEntry(System.String str, System.Int32 hashCode)
    // Offset: 0xDCADD8
    ::StringW AddEntry(::StringW str, int hashCode);
    // private System.Void Grow()
    // Offset: 0xDCAEFC
    void Grow();
    // static private System.Boolean TextEquals(System.String str1, System.Char[] str2, System.Int32 str2Start, System.Int32 str2Length)
    // Offset: 0xDCAD18
    static bool TextEquals(::StringW str1, ::ArrayW<::Il2CppChar> str2, int str2Start, int str2Length);
    // public System.Void .ctor()
    // Offset: 0xDC2F40
    // Implemented from: Newtonsoft.Json.JsonNameTable
    // Base method: System.Void JsonNameTable::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DefaultJsonNameTable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::DefaultJsonNameTable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DefaultJsonNameTable*, creationType>()));
    }
    // public override System.String Get(System.Char[] key, System.Int32 start, System.Int32 length)
    // Offset: 0xDCAB70
    // Implemented from: Newtonsoft.Json.JsonNameTable
    // Base method: System.String JsonNameTable::Get(System.Char[] key, System.Int32 start, System.Int32 length)
    ::StringW Get(::ArrayW<::Il2CppChar> key, int start, int length);
  }; // Newtonsoft.Json.DefaultJsonNameTable
  #pragma pack(pop)
  static check_size<sizeof(DefaultJsonNameTable), 32 + sizeof(int)> __Newtonsoft_Json_DefaultJsonNameTableSizeCheck;
  static_assert(sizeof(DefaultJsonNameTable) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::DefaultJsonNameTable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Newtonsoft::Json::DefaultJsonNameTable::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::DefaultJsonNameTable*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::DefaultJsonNameTable::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::DefaultJsonNameTable::*)(::StringW)>(&Newtonsoft::Json::DefaultJsonNameTable::Add)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::DefaultJsonNameTable*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::DefaultJsonNameTable::AddEntry
// Il2CppName: AddEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::DefaultJsonNameTable::*)(::StringW, int)>(&Newtonsoft::Json::DefaultJsonNameTable::AddEntry)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* hashCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::DefaultJsonNameTable*), "AddEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, hashCode});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::DefaultJsonNameTable::Grow
// Il2CppName: Grow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::DefaultJsonNameTable::*)()>(&Newtonsoft::Json::DefaultJsonNameTable::Grow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::DefaultJsonNameTable*), "Grow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::DefaultJsonNameTable::TextEquals
// Il2CppName: TextEquals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::ArrayW<::Il2CppChar>, int, int)>(&Newtonsoft::Json::DefaultJsonNameTable::TextEquals)> {
  static const MethodInfo* get() {
    static auto* str1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* str2 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* str2Start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* str2Length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::DefaultJsonNameTable*), "TextEquals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str1, str2, str2Start, str2Length});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::DefaultJsonNameTable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::DefaultJsonNameTable::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::DefaultJsonNameTable::*)(::ArrayW<::Il2CppChar>, int, int)>(&Newtonsoft::Json::DefaultJsonNameTable::Get)> {
  static const MethodInfo* get() {
    static auto* key = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::DefaultJsonNameTable*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, start, length});
  }
};
