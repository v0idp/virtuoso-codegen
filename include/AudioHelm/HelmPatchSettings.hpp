// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: HelmModulationSetting
  class HelmModulationSetting;
}
// Completed forward declares
// Type namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: HelmPatchSettings
  class HelmPatchSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AudioHelm::HelmPatchSettings);
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::HelmPatchSettings*, "AudioHelm", "HelmPatchSettings");
// Type namespace: AudioHelm
namespace AudioHelm {
  // Size: 0x250
  #pragma pack(push, 1)
  // Autogenerated type: AudioHelm.HelmPatchSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class HelmPatchSettings : public ::Il2CppObject {
    public:
    public:
    // public System.Single amp_attack
    // Size: 0x4
    // Offset: 0x10
    float amp_attack;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single amp_decay
    // Size: 0x4
    // Offset: 0x14
    float amp_decay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single amp_release
    // Size: 0x4
    // Offset: 0x18
    float amp_release;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single amp_sustain
    // Size: 0x4
    // Offset: 0x1C
    float amp_sustain;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single arp_frequency
    // Size: 0x4
    // Offset: 0x20
    float arp_frequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single arp_gate
    // Size: 0x4
    // Offset: 0x24
    float arp_gate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single arp_octaves
    // Size: 0x4
    // Offset: 0x28
    float arp_octaves;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single arp_on
    // Size: 0x4
    // Offset: 0x2C
    float arp_on;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single arp_pattern
    // Size: 0x4
    // Offset: 0x30
    float arp_pattern;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single arp_sync
    // Size: 0x4
    // Offset: 0x34
    float arp_sync;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single arp_tempo
    // Size: 0x4
    // Offset: 0x38
    float arp_tempo;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single beats_per_minute
    // Size: 0x4
    // Offset: 0x3C
    float beats_per_minute;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single cross_modulation
    // Size: 0x4
    // Offset: 0x40
    float cross_modulation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single cutoff
    // Size: 0x4
    // Offset: 0x44
    float cutoff;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single delay_dry_wet
    // Size: 0x4
    // Offset: 0x48
    float delay_dry_wet;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single delay_feedback
    // Size: 0x4
    // Offset: 0x4C
    float delay_feedback;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single delay_frequency
    // Size: 0x4
    // Offset: 0x50
    float delay_frequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single delay_on
    // Size: 0x4
    // Offset: 0x54
    float delay_on;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single delay_sync
    // Size: 0x4
    // Offset: 0x58
    float delay_sync;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single delay_tempo
    // Size: 0x4
    // Offset: 0x5C
    float delay_tempo;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single distortion_drive
    // Size: 0x4
    // Offset: 0x60
    float distortion_drive;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single distortion_mix
    // Size: 0x4
    // Offset: 0x64
    float distortion_mix;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single distortion_on
    // Size: 0x4
    // Offset: 0x68
    float distortion_on;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single distortion_type
    // Size: 0x4
    // Offset: 0x6C
    float distortion_type;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fil_attack
    // Size: 0x4
    // Offset: 0x70
    float fil_attack;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fil_decay
    // Size: 0x4
    // Offset: 0x74
    float fil_decay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fil_env_depth
    // Size: 0x4
    // Offset: 0x78
    float fil_env_depth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fil_release
    // Size: 0x4
    // Offset: 0x7C
    float fil_release;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fil_sustain
    // Size: 0x4
    // Offset: 0x80
    float fil_sustain;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single filter_blend
    // Size: 0x4
    // Offset: 0x84
    float filter_blend;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single filter_drive
    // Size: 0x4
    // Offset: 0x88
    float filter_drive;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single filter_on
    // Size: 0x4
    // Offset: 0x8C
    float filter_on;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single filter_saturation
    // Size: 0x4
    // Offset: 0x90
    float filter_saturation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single filter_shelf
    // Size: 0x4
    // Offset: 0x94
    float filter_shelf;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single filter_style
    // Size: 0x4
    // Offset: 0x98
    float filter_style;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single filter_type
    // Size: 0x4
    // Offset: 0x9C
    float filter_type;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single formant_on
    // Size: 0x4
    // Offset: 0xA0
    float formant_on;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single formant_x
    // Size: 0x4
    // Offset: 0xA4
    float formant_x;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single formant_y
    // Size: 0x4
    // Offset: 0xA8
    float formant_y;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single keytrack
    // Size: 0x4
    // Offset: 0xAC
    float keytrack;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single legato
    // Size: 0x4
    // Offset: 0xB0
    float legato;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mod_attack
    // Size: 0x4
    // Offset: 0xB4
    float mod_attack;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mod_decay
    // Size: 0x4
    // Offset: 0xB8
    float mod_decay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mod_release
    // Size: 0x4
    // Offset: 0xBC
    float mod_release;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mod_sustain
    // Size: 0x4
    // Offset: 0xC0
    float mod_sustain;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mono_lfo_1_amplitude
    // Size: 0x4
    // Offset: 0xC4
    float mono_lfo_1_amplitude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mono_lfo_1_frequency
    // Size: 0x4
    // Offset: 0xC8
    float mono_lfo_1_frequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mono_lfo_1_retrigger
    // Size: 0x4
    // Offset: 0xCC
    float mono_lfo_1_retrigger;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mono_lfo_1_sync
    // Size: 0x4
    // Offset: 0xD0
    float mono_lfo_1_sync;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mono_lfo_1_tempo
    // Size: 0x4
    // Offset: 0xD4
    float mono_lfo_1_tempo;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mono_lfo_1_waveform
    // Size: 0x4
    // Offset: 0xD8
    float mono_lfo_1_waveform;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mono_lfo_2_amplitude
    // Size: 0x4
    // Offset: 0xDC
    float mono_lfo_2_amplitude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mono_lfo_2_frequency
    // Size: 0x4
    // Offset: 0xE0
    float mono_lfo_2_frequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mono_lfo_2_retrigger
    // Size: 0x4
    // Offset: 0xE4
    float mono_lfo_2_retrigger;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mono_lfo_2_sync
    // Size: 0x4
    // Offset: 0xE8
    float mono_lfo_2_sync;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mono_lfo_2_tempo
    // Size: 0x4
    // Offset: 0xEC
    float mono_lfo_2_tempo;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mono_lfo_2_waveform
    // Size: 0x4
    // Offset: 0xF0
    float mono_lfo_2_waveform;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single noise_volume
    // Size: 0x4
    // Offset: 0xF4
    float noise_volume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single num_steps
    // Size: 0x4
    // Offset: 0xF8
    float num_steps;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single osc_1_transpose
    // Size: 0x4
    // Offset: 0xFC
    float osc_1_transpose;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single osc_1_tune
    // Size: 0x4
    // Offset: 0x100
    float osc_1_tune;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single osc_1_unison_detune
    // Size: 0x4
    // Offset: 0x104
    float osc_1_unison_detune;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single osc_1_unison_voices
    // Size: 0x4
    // Offset: 0x108
    float osc_1_unison_voices;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single osc_1_volume
    // Size: 0x4
    // Offset: 0x10C
    float osc_1_volume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single osc_1_waveform
    // Size: 0x4
    // Offset: 0x110
    float osc_1_waveform;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single osc_2_transpose
    // Size: 0x4
    // Offset: 0x114
    float osc_2_transpose;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single osc_2_tune
    // Size: 0x4
    // Offset: 0x118
    float osc_2_tune;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single osc_2_unison_detune
    // Size: 0x4
    // Offset: 0x11C
    float osc_2_unison_detune;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single osc_2_unison_voices
    // Size: 0x4
    // Offset: 0x120
    float osc_2_unison_voices;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single osc_2_volume
    // Size: 0x4
    // Offset: 0x124
    float osc_2_volume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single osc_2_waveform
    // Size: 0x4
    // Offset: 0x128
    float osc_2_waveform;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single osc_feedback_amount
    // Size: 0x4
    // Offset: 0x12C
    float osc_feedback_amount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single osc_feedback_transpose
    // Size: 0x4
    // Offset: 0x130
    float osc_feedback_transpose;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single osc_feedback_tune
    // Size: 0x4
    // Offset: 0x134
    float osc_feedback_tune;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single osc_mix
    // Size: 0x4
    // Offset: 0x138
    float osc_mix;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single pitch_bend_range
    // Size: 0x4
    // Offset: 0x13C
    float pitch_bend_range;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single poly_lfo_amplitude
    // Size: 0x4
    // Offset: 0x140
    float poly_lfo_amplitude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single poly_lfo_frequency
    // Size: 0x4
    // Offset: 0x144
    float poly_lfo_frequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single poly_lfo_sync
    // Size: 0x4
    // Offset: 0x148
    float poly_lfo_sync;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single poly_lfo_tempo
    // Size: 0x4
    // Offset: 0x14C
    float poly_lfo_tempo;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single poly_lfo_waveform
    // Size: 0x4
    // Offset: 0x150
    float poly_lfo_waveform;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single polyphony
    // Size: 0x4
    // Offset: 0x154
    float polyphony;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single portamento
    // Size: 0x4
    // Offset: 0x158
    float portamento;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single portamento_type
    // Size: 0x4
    // Offset: 0x15C
    float portamento_type;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single resonance
    // Size: 0x4
    // Offset: 0x160
    float resonance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single reverb_damping
    // Size: 0x4
    // Offset: 0x164
    float reverb_damping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single reverb_dry_wet
    // Size: 0x4
    // Offset: 0x168
    float reverb_dry_wet;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single reverb_feedback
    // Size: 0x4
    // Offset: 0x16C
    float reverb_feedback;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single reverb_on
    // Size: 0x4
    // Offset: 0x170
    float reverb_on;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_frequency
    // Size: 0x4
    // Offset: 0x174
    float step_frequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_00
    // Size: 0x4
    // Offset: 0x178
    float step_seq_00;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_01
    // Size: 0x4
    // Offset: 0x17C
    float step_seq_01;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_02
    // Size: 0x4
    // Offset: 0x180
    float step_seq_02;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_03
    // Size: 0x4
    // Offset: 0x184
    float step_seq_03;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_04
    // Size: 0x4
    // Offset: 0x188
    float step_seq_04;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_05
    // Size: 0x4
    // Offset: 0x18C
    float step_seq_05;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_06
    // Size: 0x4
    // Offset: 0x190
    float step_seq_06;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_07
    // Size: 0x4
    // Offset: 0x194
    float step_seq_07;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_08
    // Size: 0x4
    // Offset: 0x198
    float step_seq_08;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_09
    // Size: 0x4
    // Offset: 0x19C
    float step_seq_09;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_10
    // Size: 0x4
    // Offset: 0x1A0
    float step_seq_10;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_11
    // Size: 0x4
    // Offset: 0x1A4
    float step_seq_11;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_12
    // Size: 0x4
    // Offset: 0x1A8
    float step_seq_12;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_13
    // Size: 0x4
    // Offset: 0x1AC
    float step_seq_13;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_14
    // Size: 0x4
    // Offset: 0x1B0
    float step_seq_14;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_15
    // Size: 0x4
    // Offset: 0x1B4
    float step_seq_15;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_16
    // Size: 0x4
    // Offset: 0x1B8
    float step_seq_16;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_17
    // Size: 0x4
    // Offset: 0x1BC
    float step_seq_17;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_18
    // Size: 0x4
    // Offset: 0x1C0
    float step_seq_18;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_19
    // Size: 0x4
    // Offset: 0x1C4
    float step_seq_19;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_20
    // Size: 0x4
    // Offset: 0x1C8
    float step_seq_20;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_21
    // Size: 0x4
    // Offset: 0x1CC
    float step_seq_21;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_22
    // Size: 0x4
    // Offset: 0x1D0
    float step_seq_22;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_23
    // Size: 0x4
    // Offset: 0x1D4
    float step_seq_23;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_24
    // Size: 0x4
    // Offset: 0x1D8
    float step_seq_24;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_25
    // Size: 0x4
    // Offset: 0x1DC
    float step_seq_25;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_26
    // Size: 0x4
    // Offset: 0x1E0
    float step_seq_26;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_27
    // Size: 0x4
    // Offset: 0x1E4
    float step_seq_27;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_28
    // Size: 0x4
    // Offset: 0x1E8
    float step_seq_28;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_29
    // Size: 0x4
    // Offset: 0x1EC
    float step_seq_29;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_30
    // Size: 0x4
    // Offset: 0x1F0
    float step_seq_30;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_seq_31
    // Size: 0x4
    // Offset: 0x1F4
    float step_seq_31;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_sequencer_retrigger
    // Size: 0x4
    // Offset: 0x1F8
    float step_sequencer_retrigger;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_sequencer_sync
    // Size: 0x4
    // Offset: 0x1FC
    float step_sequencer_sync;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_sequencer_tempo
    // Size: 0x4
    // Offset: 0x200
    float step_sequencer_tempo;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single step_smoothing
    // Size: 0x4
    // Offset: 0x204
    float step_smoothing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single stutter_frequency
    // Size: 0x4
    // Offset: 0x208
    float stutter_frequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single stutter_on
    // Size: 0x4
    // Offset: 0x20C
    float stutter_on;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single stutter_resample_frequency
    // Size: 0x4
    // Offset: 0x210
    float stutter_resample_frequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single stutter_resample_sync
    // Size: 0x4
    // Offset: 0x214
    float stutter_resample_sync;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single stutter_resample_tempo
    // Size: 0x4
    // Offset: 0x218
    float stutter_resample_tempo;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single stutter_softness
    // Size: 0x4
    // Offset: 0x21C
    float stutter_softness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single stutter_sync
    // Size: 0x4
    // Offset: 0x220
    float stutter_sync;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single stutter_tempo
    // Size: 0x4
    // Offset: 0x224
    float stutter_tempo;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single sub_octave
    // Size: 0x4
    // Offset: 0x228
    float sub_octave;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single sub_shuffle
    // Size: 0x4
    // Offset: 0x22C
    float sub_shuffle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single sub_volume
    // Size: 0x4
    // Offset: 0x230
    float sub_volume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single sub_waveform
    // Size: 0x4
    // Offset: 0x234
    float sub_waveform;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single unison_1_harmonize
    // Size: 0x4
    // Offset: 0x238
    float unison_1_harmonize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single unison_2_harmonize
    // Size: 0x4
    // Offset: 0x23C
    float unison_2_harmonize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single velocity_track
    // Size: 0x4
    // Offset: 0x240
    float velocity_track;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single volume
    // Size: 0x4
    // Offset: 0x244
    float volume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public AudioHelm.HelmModulationSetting[] modulations
    // Size: 0x8
    // Offset: 0x248
    ::ArrayW<::AudioHelm::HelmModulationSetting*> modulations;
    // Field size check
    static_assert(sizeof(::ArrayW<::AudioHelm::HelmModulationSetting*>) == 0x8);
    public:
    // static field const value: static public System.Int32 kMaxModulations
    static constexpr const int kMaxModulations = 16;
    // Get static field: static public System.Int32 kMaxModulations
    static int _get_kMaxModulations();
    // Set static field: static public System.Int32 kMaxModulations
    static void _set_kMaxModulations(int value);
    // static field const value: static public System.Int32 kMaxCharacters
    static constexpr const int kMaxCharacters = 15;
    // Get static field: static public System.Int32 kMaxCharacters
    static int _get_kMaxCharacters();
    // Set static field: static public System.Int32 kMaxCharacters
    static void _set_kMaxCharacters(int value);
    // Get static field: static private readonly System.String[] kModulationSources
    static ::ArrayW<::StringW> _get_kModulationSources();
    // Set static field: static private readonly System.String[] kModulationSources
    static void _set_kModulationSources(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.String[] kModulationDestinations
    static ::ArrayW<::StringW> _get_kModulationDestinations();
    // Set static field: static private readonly System.String[] kModulationDestinations
    static void _set_kModulationDestinations(::ArrayW<::StringW> value);
    // Get static field: static public readonly System.String[] kShortenNames
    static ::ArrayW<::StringW> _get_kShortenNames();
    // Set static field: static public readonly System.String[] kShortenNames
    static void _set_kShortenNames(::ArrayW<::StringW> value);
    // Get instance field reference: public System.Single amp_attack
    [[deprecated("Use field access instead!")]] float& dyn_amp_attack();
    // Get instance field reference: public System.Single amp_decay
    [[deprecated("Use field access instead!")]] float& dyn_amp_decay();
    // Get instance field reference: public System.Single amp_release
    [[deprecated("Use field access instead!")]] float& dyn_amp_release();
    // Get instance field reference: public System.Single amp_sustain
    [[deprecated("Use field access instead!")]] float& dyn_amp_sustain();
    // Get instance field reference: public System.Single arp_frequency
    [[deprecated("Use field access instead!")]] float& dyn_arp_frequency();
    // Get instance field reference: public System.Single arp_gate
    [[deprecated("Use field access instead!")]] float& dyn_arp_gate();
    // Get instance field reference: public System.Single arp_octaves
    [[deprecated("Use field access instead!")]] float& dyn_arp_octaves();
    // Get instance field reference: public System.Single arp_on
    [[deprecated("Use field access instead!")]] float& dyn_arp_on();
    // Get instance field reference: public System.Single arp_pattern
    [[deprecated("Use field access instead!")]] float& dyn_arp_pattern();
    // Get instance field reference: public System.Single arp_sync
    [[deprecated("Use field access instead!")]] float& dyn_arp_sync();
    // Get instance field reference: public System.Single arp_tempo
    [[deprecated("Use field access instead!")]] float& dyn_arp_tempo();
    // Get instance field reference: public System.Single beats_per_minute
    [[deprecated("Use field access instead!")]] float& dyn_beats_per_minute();
    // Get instance field reference: public System.Single cross_modulation
    [[deprecated("Use field access instead!")]] float& dyn_cross_modulation();
    // Get instance field reference: public System.Single cutoff
    [[deprecated("Use field access instead!")]] float& dyn_cutoff();
    // Get instance field reference: public System.Single delay_dry_wet
    [[deprecated("Use field access instead!")]] float& dyn_delay_dry_wet();
    // Get instance field reference: public System.Single delay_feedback
    [[deprecated("Use field access instead!")]] float& dyn_delay_feedback();
    // Get instance field reference: public System.Single delay_frequency
    [[deprecated("Use field access instead!")]] float& dyn_delay_frequency();
    // Get instance field reference: public System.Single delay_on
    [[deprecated("Use field access instead!")]] float& dyn_delay_on();
    // Get instance field reference: public System.Single delay_sync
    [[deprecated("Use field access instead!")]] float& dyn_delay_sync();
    // Get instance field reference: public System.Single delay_tempo
    [[deprecated("Use field access instead!")]] float& dyn_delay_tempo();
    // Get instance field reference: public System.Single distortion_drive
    [[deprecated("Use field access instead!")]] float& dyn_distortion_drive();
    // Get instance field reference: public System.Single distortion_mix
    [[deprecated("Use field access instead!")]] float& dyn_distortion_mix();
    // Get instance field reference: public System.Single distortion_on
    [[deprecated("Use field access instead!")]] float& dyn_distortion_on();
    // Get instance field reference: public System.Single distortion_type
    [[deprecated("Use field access instead!")]] float& dyn_distortion_type();
    // Get instance field reference: public System.Single fil_attack
    [[deprecated("Use field access instead!")]] float& dyn_fil_attack();
    // Get instance field reference: public System.Single fil_decay
    [[deprecated("Use field access instead!")]] float& dyn_fil_decay();
    // Get instance field reference: public System.Single fil_env_depth
    [[deprecated("Use field access instead!")]] float& dyn_fil_env_depth();
    // Get instance field reference: public System.Single fil_release
    [[deprecated("Use field access instead!")]] float& dyn_fil_release();
    // Get instance field reference: public System.Single fil_sustain
    [[deprecated("Use field access instead!")]] float& dyn_fil_sustain();
    // Get instance field reference: public System.Single filter_blend
    [[deprecated("Use field access instead!")]] float& dyn_filter_blend();
    // Get instance field reference: public System.Single filter_drive
    [[deprecated("Use field access instead!")]] float& dyn_filter_drive();
    // Get instance field reference: public System.Single filter_on
    [[deprecated("Use field access instead!")]] float& dyn_filter_on();
    // Get instance field reference: public System.Single filter_saturation
    [[deprecated("Use field access instead!")]] float& dyn_filter_saturation();
    // Get instance field reference: public System.Single filter_shelf
    [[deprecated("Use field access instead!")]] float& dyn_filter_shelf();
    // Get instance field reference: public System.Single filter_style
    [[deprecated("Use field access instead!")]] float& dyn_filter_style();
    // Get instance field reference: public System.Single filter_type
    [[deprecated("Use field access instead!")]] float& dyn_filter_type();
    // Get instance field reference: public System.Single formant_on
    [[deprecated("Use field access instead!")]] float& dyn_formant_on();
    // Get instance field reference: public System.Single formant_x
    [[deprecated("Use field access instead!")]] float& dyn_formant_x();
    // Get instance field reference: public System.Single formant_y
    [[deprecated("Use field access instead!")]] float& dyn_formant_y();
    // Get instance field reference: public System.Single keytrack
    [[deprecated("Use field access instead!")]] float& dyn_keytrack();
    // Get instance field reference: public System.Single legato
    [[deprecated("Use field access instead!")]] float& dyn_legato();
    // Get instance field reference: public System.Single mod_attack
    [[deprecated("Use field access instead!")]] float& dyn_mod_attack();
    // Get instance field reference: public System.Single mod_decay
    [[deprecated("Use field access instead!")]] float& dyn_mod_decay();
    // Get instance field reference: public System.Single mod_release
    [[deprecated("Use field access instead!")]] float& dyn_mod_release();
    // Get instance field reference: public System.Single mod_sustain
    [[deprecated("Use field access instead!")]] float& dyn_mod_sustain();
    // Get instance field reference: public System.Single mono_lfo_1_amplitude
    [[deprecated("Use field access instead!")]] float& dyn_mono_lfo_1_amplitude();
    // Get instance field reference: public System.Single mono_lfo_1_frequency
    [[deprecated("Use field access instead!")]] float& dyn_mono_lfo_1_frequency();
    // Get instance field reference: public System.Single mono_lfo_1_retrigger
    [[deprecated("Use field access instead!")]] float& dyn_mono_lfo_1_retrigger();
    // Get instance field reference: public System.Single mono_lfo_1_sync
    [[deprecated("Use field access instead!")]] float& dyn_mono_lfo_1_sync();
    // Get instance field reference: public System.Single mono_lfo_1_tempo
    [[deprecated("Use field access instead!")]] float& dyn_mono_lfo_1_tempo();
    // Get instance field reference: public System.Single mono_lfo_1_waveform
    [[deprecated("Use field access instead!")]] float& dyn_mono_lfo_1_waveform();
    // Get instance field reference: public System.Single mono_lfo_2_amplitude
    [[deprecated("Use field access instead!")]] float& dyn_mono_lfo_2_amplitude();
    // Get instance field reference: public System.Single mono_lfo_2_frequency
    [[deprecated("Use field access instead!")]] float& dyn_mono_lfo_2_frequency();
    // Get instance field reference: public System.Single mono_lfo_2_retrigger
    [[deprecated("Use field access instead!")]] float& dyn_mono_lfo_2_retrigger();
    // Get instance field reference: public System.Single mono_lfo_2_sync
    [[deprecated("Use field access instead!")]] float& dyn_mono_lfo_2_sync();
    // Get instance field reference: public System.Single mono_lfo_2_tempo
    [[deprecated("Use field access instead!")]] float& dyn_mono_lfo_2_tempo();
    // Get instance field reference: public System.Single mono_lfo_2_waveform
    [[deprecated("Use field access instead!")]] float& dyn_mono_lfo_2_waveform();
    // Get instance field reference: public System.Single noise_volume
    [[deprecated("Use field access instead!")]] float& dyn_noise_volume();
    // Get instance field reference: public System.Single num_steps
    [[deprecated("Use field access instead!")]] float& dyn_num_steps();
    // Get instance field reference: public System.Single osc_1_transpose
    [[deprecated("Use field access instead!")]] float& dyn_osc_1_transpose();
    // Get instance field reference: public System.Single osc_1_tune
    [[deprecated("Use field access instead!")]] float& dyn_osc_1_tune();
    // Get instance field reference: public System.Single osc_1_unison_detune
    [[deprecated("Use field access instead!")]] float& dyn_osc_1_unison_detune();
    // Get instance field reference: public System.Single osc_1_unison_voices
    [[deprecated("Use field access instead!")]] float& dyn_osc_1_unison_voices();
    // Get instance field reference: public System.Single osc_1_volume
    [[deprecated("Use field access instead!")]] float& dyn_osc_1_volume();
    // Get instance field reference: public System.Single osc_1_waveform
    [[deprecated("Use field access instead!")]] float& dyn_osc_1_waveform();
    // Get instance field reference: public System.Single osc_2_transpose
    [[deprecated("Use field access instead!")]] float& dyn_osc_2_transpose();
    // Get instance field reference: public System.Single osc_2_tune
    [[deprecated("Use field access instead!")]] float& dyn_osc_2_tune();
    // Get instance field reference: public System.Single osc_2_unison_detune
    [[deprecated("Use field access instead!")]] float& dyn_osc_2_unison_detune();
    // Get instance field reference: public System.Single osc_2_unison_voices
    [[deprecated("Use field access instead!")]] float& dyn_osc_2_unison_voices();
    // Get instance field reference: public System.Single osc_2_volume
    [[deprecated("Use field access instead!")]] float& dyn_osc_2_volume();
    // Get instance field reference: public System.Single osc_2_waveform
    [[deprecated("Use field access instead!")]] float& dyn_osc_2_waveform();
    // Get instance field reference: public System.Single osc_feedback_amount
    [[deprecated("Use field access instead!")]] float& dyn_osc_feedback_amount();
    // Get instance field reference: public System.Single osc_feedback_transpose
    [[deprecated("Use field access instead!")]] float& dyn_osc_feedback_transpose();
    // Get instance field reference: public System.Single osc_feedback_tune
    [[deprecated("Use field access instead!")]] float& dyn_osc_feedback_tune();
    // Get instance field reference: public System.Single osc_mix
    [[deprecated("Use field access instead!")]] float& dyn_osc_mix();
    // Get instance field reference: public System.Single pitch_bend_range
    [[deprecated("Use field access instead!")]] float& dyn_pitch_bend_range();
    // Get instance field reference: public System.Single poly_lfo_amplitude
    [[deprecated("Use field access instead!")]] float& dyn_poly_lfo_amplitude();
    // Get instance field reference: public System.Single poly_lfo_frequency
    [[deprecated("Use field access instead!")]] float& dyn_poly_lfo_frequency();
    // Get instance field reference: public System.Single poly_lfo_sync
    [[deprecated("Use field access instead!")]] float& dyn_poly_lfo_sync();
    // Get instance field reference: public System.Single poly_lfo_tempo
    [[deprecated("Use field access instead!")]] float& dyn_poly_lfo_tempo();
    // Get instance field reference: public System.Single poly_lfo_waveform
    [[deprecated("Use field access instead!")]] float& dyn_poly_lfo_waveform();
    // Get instance field reference: public System.Single polyphony
    [[deprecated("Use field access instead!")]] float& dyn_polyphony();
    // Get instance field reference: public System.Single portamento
    [[deprecated("Use field access instead!")]] float& dyn_portamento();
    // Get instance field reference: public System.Single portamento_type
    [[deprecated("Use field access instead!")]] float& dyn_portamento_type();
    // Get instance field reference: public System.Single resonance
    [[deprecated("Use field access instead!")]] float& dyn_resonance();
    // Get instance field reference: public System.Single reverb_damping
    [[deprecated("Use field access instead!")]] float& dyn_reverb_damping();
    // Get instance field reference: public System.Single reverb_dry_wet
    [[deprecated("Use field access instead!")]] float& dyn_reverb_dry_wet();
    // Get instance field reference: public System.Single reverb_feedback
    [[deprecated("Use field access instead!")]] float& dyn_reverb_feedback();
    // Get instance field reference: public System.Single reverb_on
    [[deprecated("Use field access instead!")]] float& dyn_reverb_on();
    // Get instance field reference: public System.Single step_frequency
    [[deprecated("Use field access instead!")]] float& dyn_step_frequency();
    // Get instance field reference: public System.Single step_seq_00
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_00();
    // Get instance field reference: public System.Single step_seq_01
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_01();
    // Get instance field reference: public System.Single step_seq_02
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_02();
    // Get instance field reference: public System.Single step_seq_03
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_03();
    // Get instance field reference: public System.Single step_seq_04
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_04();
    // Get instance field reference: public System.Single step_seq_05
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_05();
    // Get instance field reference: public System.Single step_seq_06
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_06();
    // Get instance field reference: public System.Single step_seq_07
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_07();
    // Get instance field reference: public System.Single step_seq_08
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_08();
    // Get instance field reference: public System.Single step_seq_09
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_09();
    // Get instance field reference: public System.Single step_seq_10
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_10();
    // Get instance field reference: public System.Single step_seq_11
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_11();
    // Get instance field reference: public System.Single step_seq_12
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_12();
    // Get instance field reference: public System.Single step_seq_13
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_13();
    // Get instance field reference: public System.Single step_seq_14
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_14();
    // Get instance field reference: public System.Single step_seq_15
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_15();
    // Get instance field reference: public System.Single step_seq_16
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_16();
    // Get instance field reference: public System.Single step_seq_17
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_17();
    // Get instance field reference: public System.Single step_seq_18
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_18();
    // Get instance field reference: public System.Single step_seq_19
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_19();
    // Get instance field reference: public System.Single step_seq_20
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_20();
    // Get instance field reference: public System.Single step_seq_21
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_21();
    // Get instance field reference: public System.Single step_seq_22
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_22();
    // Get instance field reference: public System.Single step_seq_23
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_23();
    // Get instance field reference: public System.Single step_seq_24
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_24();
    // Get instance field reference: public System.Single step_seq_25
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_25();
    // Get instance field reference: public System.Single step_seq_26
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_26();
    // Get instance field reference: public System.Single step_seq_27
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_27();
    // Get instance field reference: public System.Single step_seq_28
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_28();
    // Get instance field reference: public System.Single step_seq_29
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_29();
    // Get instance field reference: public System.Single step_seq_30
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_30();
    // Get instance field reference: public System.Single step_seq_31
    [[deprecated("Use field access instead!")]] float& dyn_step_seq_31();
    // Get instance field reference: public System.Single step_sequencer_retrigger
    [[deprecated("Use field access instead!")]] float& dyn_step_sequencer_retrigger();
    // Get instance field reference: public System.Single step_sequencer_sync
    [[deprecated("Use field access instead!")]] float& dyn_step_sequencer_sync();
    // Get instance field reference: public System.Single step_sequencer_tempo
    [[deprecated("Use field access instead!")]] float& dyn_step_sequencer_tempo();
    // Get instance field reference: public System.Single step_smoothing
    [[deprecated("Use field access instead!")]] float& dyn_step_smoothing();
    // Get instance field reference: public System.Single stutter_frequency
    [[deprecated("Use field access instead!")]] float& dyn_stutter_frequency();
    // Get instance field reference: public System.Single stutter_on
    [[deprecated("Use field access instead!")]] float& dyn_stutter_on();
    // Get instance field reference: public System.Single stutter_resample_frequency
    [[deprecated("Use field access instead!")]] float& dyn_stutter_resample_frequency();
    // Get instance field reference: public System.Single stutter_resample_sync
    [[deprecated("Use field access instead!")]] float& dyn_stutter_resample_sync();
    // Get instance field reference: public System.Single stutter_resample_tempo
    [[deprecated("Use field access instead!")]] float& dyn_stutter_resample_tempo();
    // Get instance field reference: public System.Single stutter_softness
    [[deprecated("Use field access instead!")]] float& dyn_stutter_softness();
    // Get instance field reference: public System.Single stutter_sync
    [[deprecated("Use field access instead!")]] float& dyn_stutter_sync();
    // Get instance field reference: public System.Single stutter_tempo
    [[deprecated("Use field access instead!")]] float& dyn_stutter_tempo();
    // Get instance field reference: public System.Single sub_octave
    [[deprecated("Use field access instead!")]] float& dyn_sub_octave();
    // Get instance field reference: public System.Single sub_shuffle
    [[deprecated("Use field access instead!")]] float& dyn_sub_shuffle();
    // Get instance field reference: public System.Single sub_volume
    [[deprecated("Use field access instead!")]] float& dyn_sub_volume();
    // Get instance field reference: public System.Single sub_waveform
    [[deprecated("Use field access instead!")]] float& dyn_sub_waveform();
    // Get instance field reference: public System.Single unison_1_harmonize
    [[deprecated("Use field access instead!")]] float& dyn_unison_1_harmonize();
    // Get instance field reference: public System.Single unison_2_harmonize
    [[deprecated("Use field access instead!")]] float& dyn_unison_2_harmonize();
    // Get instance field reference: public System.Single velocity_track
    [[deprecated("Use field access instead!")]] float& dyn_velocity_track();
    // Get instance field reference: public System.Single volume
    [[deprecated("Use field access instead!")]] float& dyn_volume();
    // Get instance field reference: public AudioHelm.HelmModulationSetting[] modulations
    [[deprecated("Use field access instead!")]] ::ArrayW<::AudioHelm::HelmModulationSetting*>& dyn_modulations();
    // public System.Void .ctor()
    // Offset: 0x193D8FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HelmPatchSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AudioHelm::HelmPatchSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HelmPatchSettings*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x193D904
    static void _cctor();
    // static public System.String ConvertToPlugin(System.String name)
    // Offset: 0x193D3A4
    static ::StringW ConvertToPlugin(::StringW name);
    // static public System.Int32 GetSourceIndex(System.String source)
    // Offset: 0x193D50C
    static int GetSourceIndex(::StringW source);
    // static public System.Int32 GetDestinationIndex(System.String dest)
    // Offset: 0x193D5F8
    static int GetDestinationIndex(::StringW dest);
    // static public AudioHelm.HelmPatchSettings Clone(AudioHelm.HelmPatchSettings other)
    // Offset: 0x193D6E4
    static ::AudioHelm::HelmPatchSettings* Clone(::AudioHelm::HelmPatchSettings* other);
  }; // AudioHelm.HelmPatchSettings
  #pragma pack(pop)
  static check_size<sizeof(HelmPatchSettings), 584 + sizeof(::ArrayW<::AudioHelm::HelmModulationSetting*>)> __AudioHelm_HelmPatchSettingsSizeCheck;
  static_assert(sizeof(HelmPatchSettings) == 0x250);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AudioHelm::HelmPatchSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AudioHelm::HelmPatchSettings::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AudioHelm::HelmPatchSettings::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmPatchSettings*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmPatchSettings::ConvertToPlugin
// Il2CppName: ConvertToPlugin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&AudioHelm::HelmPatchSettings::ConvertToPlugin)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmPatchSettings*), "ConvertToPlugin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmPatchSettings::GetSourceIndex
// Il2CppName: GetSourceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::StringW)>(&AudioHelm::HelmPatchSettings::GetSourceIndex)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmPatchSettings*), "GetSourceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmPatchSettings::GetDestinationIndex
// Il2CppName: GetDestinationIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::StringW)>(&AudioHelm::HelmPatchSettings::GetDestinationIndex)> {
  static const MethodInfo* get() {
    static auto* dest = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmPatchSettings*), "GetDestinationIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmPatchSettings::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AudioHelm::HelmPatchSettings* (*)(::AudioHelm::HelmPatchSettings*)>(&AudioHelm::HelmPatchSettings::Clone)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("AudioHelm", "HelmPatchSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmPatchSettings*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
