// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: RepetitiveSpawner
  class RepetitiveSpawner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AudioHelm::RepetitiveSpawner);
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::RepetitiveSpawner*, "AudioHelm", "RepetitiveSpawner");
// Type namespace: AudioHelm
namespace AudioHelm {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: AudioHelm.RepetitiveSpawner
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 78225C
  class RepetitiveSpawner : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform model
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* model;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single rate
    // Size: 0x4
    // Offset: 0x20
    float rate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single progress
    // Size: 0x4
    // Offset: 0x24
    float progress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Transform model
    [[deprecated]] ::UnityEngine::Transform*& dyn_model();
    // Get instance field reference: public System.Single rate
    [[deprecated]] float& dyn_rate();
    // Get instance field reference: private System.Single progress
    [[deprecated]] float& dyn_progress();
    // private System.Void Spawn()
    // Offset: 0xB323FC
    void Spawn();
    // private System.Void Update()
    // Offset: 0xB3253C
    void Update();
    // public System.Void .ctor()
    // Offset: 0xB3259C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RepetitiveSpawner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AudioHelm::RepetitiveSpawner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RepetitiveSpawner*, creationType>()));
    }
  }; // AudioHelm.RepetitiveSpawner
  #pragma pack(pop)
  static check_size<sizeof(RepetitiveSpawner), 36 + sizeof(float)> __AudioHelm_RepetitiveSpawnerSizeCheck;
  static_assert(sizeof(RepetitiveSpawner) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AudioHelm::RepetitiveSpawner::Spawn
// Il2CppName: Spawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::RepetitiveSpawner::*)()>(&AudioHelm::RepetitiveSpawner::Spawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::RepetitiveSpawner*), "Spawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::RepetitiveSpawner::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::RepetitiveSpawner::*)()>(&AudioHelm::RepetitiveSpawner::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::RepetitiveSpawner*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::RepetitiveSpawner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
