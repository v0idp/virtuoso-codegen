// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: GroundKey
  class GroundKey;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AudioHelm::GroundKey);
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::GroundKey*, "AudioHelm", "GroundKey");
// Type namespace: AudioHelm
namespace AudioHelm {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: AudioHelm.GroundKey
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 78207C
  class GroundKey : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Renderer keyLight
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Renderer* keyLight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private System.Boolean noteOn
    // Size: 0x1
    // Offset: 0x20
    bool noteOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Renderer keyLight
    [[deprecated]] ::UnityEngine::Renderer*& dyn_keyLight();
    // Get instance field reference: private System.Boolean noteOn
    [[deprecated]] bool& dyn_noteOn();
    // public System.Boolean IsInside(UnityEngine.Vector3 position)
    // Offset: 0x19A9ADC
    bool IsInside(::UnityEngine::Vector3 position);
    // public System.Boolean IsOn()
    // Offset: 0x19A9B4C
    bool IsOn();
    // public System.Void SetOn(System.Boolean isOn)
    // Offset: 0x19A9B54
    void SetOn(bool isOn);
    // private System.Void Update()
    // Offset: 0x19A9B60
    void Update();
    // public System.Void .ctor()
    // Offset: 0x19A9C1C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GroundKey* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AudioHelm::GroundKey::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GroundKey*, creationType>()));
    }
  }; // AudioHelm.GroundKey
  #pragma pack(pop)
  static check_size<sizeof(GroundKey), 32 + sizeof(bool)> __AudioHelm_GroundKeySizeCheck;
  static_assert(sizeof(GroundKey) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AudioHelm::GroundKey::IsInside
// Il2CppName: IsInside
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioHelm::GroundKey::*)(::UnityEngine::Vector3)>(&AudioHelm::GroundKey::IsInside)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::GroundKey*), "IsInside", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: AudioHelm::GroundKey::IsOn
// Il2CppName: IsOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioHelm::GroundKey::*)()>(&AudioHelm::GroundKey::IsOn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::GroundKey*), "IsOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::GroundKey::SetOn
// Il2CppName: SetOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::GroundKey::*)(bool)>(&AudioHelm::GroundKey::SetOn)> {
  static const MethodInfo* get() {
    static auto* isOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::GroundKey*), "SetOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isOn});
  }
};
// Writing MetadataGetter for method: AudioHelm::GroundKey::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::GroundKey::*)()>(&AudioHelm::GroundKey::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::GroundKey*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::GroundKey::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
