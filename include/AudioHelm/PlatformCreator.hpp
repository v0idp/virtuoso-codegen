// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.KeyCode
#include "UnityEngine/KeyCode.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: PlatformCreator
  class PlatformCreator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AudioHelm::PlatformCreator);
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::PlatformCreator*, "AudioHelm", "PlatformCreator");
// Type namespace: AudioHelm
namespace AudioHelm {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: AudioHelm.PlatformCreator
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 7821EC
  class PlatformCreator : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform platformModel
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* platformModel;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single minWidth
    // Size: 0x4
    // Offset: 0x20
    float minWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: minWidth and: allPlatforms
    char __padding1[0x4] = {};
    // public System.Collections.Generic.List`1<UnityEngine.Transform> allPlatforms
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::Transform*>* allPlatforms;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Transform*>*) == 0x8);
    // public UnityEngine.KeyCode clearKey
    // Size: 0x4
    // Offset: 0x30
    ::UnityEngine::KeyCode clearKey;
    // Field size check
    static_assert(sizeof(::UnityEngine::KeyCode) == 0x4);
    // public UnityEngine.KeyCode undoKey
    // Size: 0x4
    // Offset: 0x34
    ::UnityEngine::KeyCode undoKey;
    // Field size check
    static_assert(sizeof(::UnityEngine::KeyCode) == 0x4);
    // private UnityEngine.Transform currentPlatform
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* currentPlatform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector2 startPosition
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Vector2 startPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Transform platformModel
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_platformModel();
    // Get instance field reference: public System.Single minWidth
    [[deprecated("Use field access instead!")]] float& dyn_minWidth();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Transform> allPlatforms
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Transform*>*& dyn_allPlatforms();
    // Get instance field reference: public UnityEngine.KeyCode clearKey
    [[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& dyn_clearKey();
    // Get instance field reference: public UnityEngine.KeyCode undoKey
    [[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& dyn_undoKey();
    // Get instance field reference: private UnityEngine.Transform currentPlatform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_currentPlatform();
    // Get instance field reference: private UnityEngine.Vector2 startPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_startPosition();
    // public System.Void .ctor()
    // Offset: 0xADEF00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlatformCreator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AudioHelm::PlatformCreator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlatformCreator*, creationType>()));
    }
    // private System.Void TryInitialize(UnityEngine.Vector2 position)
    // Offset: 0xADE898
    void TryInitialize(::UnityEngine::Vector2 position);
    // private System.Void TryRelease(UnityEngine.Vector2 position)
    // Offset: 0xADE964
    void TryRelease(::UnityEngine::Vector2 position);
    // private System.Void TryUpdate(UnityEngine.Vector2 position)
    // Offset: 0xADEAA0
    void TryUpdate(::UnityEngine::Vector2 position);
    // private System.Void ClearPlatforms()
    // Offset: 0xADEBD4
    void ClearPlatforms();
    // private System.Void UndoPlatform()
    // Offset: 0xADED54
    void UndoPlatform();
    // private System.Void Update()
    // Offset: 0xADEE48
    void Update();
  }; // AudioHelm.PlatformCreator
  #pragma pack(pop)
  static check_size<sizeof(PlatformCreator), 64 + sizeof(::UnityEngine::Vector2)> __AudioHelm_PlatformCreatorSizeCheck;
  static_assert(sizeof(PlatformCreator) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AudioHelm::PlatformCreator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AudioHelm::PlatformCreator::TryInitialize
// Il2CppName: TryInitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::PlatformCreator::*)(::UnityEngine::Vector2)>(&AudioHelm::PlatformCreator::TryInitialize)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::PlatformCreator*), "TryInitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: AudioHelm::PlatformCreator::TryRelease
// Il2CppName: TryRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::PlatformCreator::*)(::UnityEngine::Vector2)>(&AudioHelm::PlatformCreator::TryRelease)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::PlatformCreator*), "TryRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: AudioHelm::PlatformCreator::TryUpdate
// Il2CppName: TryUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::PlatformCreator::*)(::UnityEngine::Vector2)>(&AudioHelm::PlatformCreator::TryUpdate)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::PlatformCreator*), "TryUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: AudioHelm::PlatformCreator::ClearPlatforms
// Il2CppName: ClearPlatforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::PlatformCreator::*)()>(&AudioHelm::PlatformCreator::ClearPlatforms)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::PlatformCreator*), "ClearPlatforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::PlatformCreator::UndoPlatform
// Il2CppName: UndoPlatform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::PlatformCreator::*)()>(&AudioHelm::PlatformCreator::UndoPlatform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::PlatformCreator*), "UndoPlatform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::PlatformCreator::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::PlatformCreator::*)()>(&AudioHelm::PlatformCreator::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::PlatformCreator*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
