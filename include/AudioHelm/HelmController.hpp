// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: AudioHelm.NoteHandler
#include "AudioHelm/NoteHandler.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: HelmParameter
  class HelmParameter;
  // Forward declaring type: HelmPatch
  class HelmPatch;
  // Forward declaring type: Param
  struct Param;
  // Forward declaring type: CommonParam
  struct CommonParam;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: HelmController
  class HelmController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AudioHelm::HelmController);
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::HelmController*, "AudioHelm", "HelmController");
// Type namespace: AudioHelm
namespace AudioHelm {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: AudioHelm.HelmController
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 782674
  // [AddComponentMenu] Offset: 782674
  // [HelpURLAttribute] Offset: 782674
  class HelmController : public ::UnityEngine::MonoBehaviour/*, public ::AudioHelm::NoteHandler*/ {
    public:
    // Nested type: ::AudioHelm::HelmController::$WaitNoteOff$d__49
    class $WaitNoteOff$d__49;
    // Nested type: ::AudioHelm::HelmController::$WaitFrequencyOff$d__53
    class $WaitFrequencyOff$d__53;
    public:
    // [TooltipAttribute] Offset: 0x791328
    // public System.Int32 channel
    // Size: 0x4
    // Offset: 0x18
    int channel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Single synthParamValue0
    // Size: 0x4
    // Offset: 0x1C
    float synthParamValue0;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single synthParamValue1
    // Size: 0x4
    // Offset: 0x20
    float synthParamValue1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single synthParamValue2
    // Size: 0x4
    // Offset: 0x24
    float synthParamValue2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single synthParamValue3
    // Size: 0x4
    // Offset: 0x28
    float synthParamValue3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single synthParamValue4
    // Size: 0x4
    // Offset: 0x2C
    float synthParamValue4;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single synthParamValue5
    // Size: 0x4
    // Offset: 0x30
    float synthParamValue5;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single synthParamValue6
    // Size: 0x4
    // Offset: 0x34
    float synthParamValue6;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single synthParamValue7
    // Size: 0x4
    // Offset: 0x38
    float synthParamValue7;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single synthParamValue8
    // Size: 0x4
    // Offset: 0x3C
    float synthParamValue8;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single synthParamValue9
    // Size: 0x4
    // Offset: 0x40
    float synthParamValue9;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single synthParamValue10
    // Size: 0x4
    // Offset: 0x44
    float synthParamValue10;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single synthParamValue11
    // Size: 0x4
    // Offset: 0x48
    float synthParamValue11;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single synthParamValue12
    // Size: 0x4
    // Offset: 0x4C
    float synthParamValue12;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single synthParamValue13
    // Size: 0x4
    // Offset: 0x50
    float synthParamValue13;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single synthParamValue14
    // Size: 0x4
    // Offset: 0x54
    float synthParamValue14;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single synthParamValue15
    // Size: 0x4
    // Offset: 0x58
    float synthParamValue15;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: synthParamValue15 and: paramValues
    char __padding16[0x4] = {};
    // private System.Single[] paramValues
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<float> paramValues;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Collections.Generic.List`1<AudioHelm.HelmParameter> synthParameters
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::AudioHelm::HelmParameter*>* synthParameters;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::AudioHelm::HelmParameter*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> pressedNotes
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::Dictionary_2<int, int>* pressedNotes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Single,System.Int32> pressedFrequencies
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::Dictionary_2<float, int>* pressedFrequencies;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<float, int>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::AudioHelm::NoteHandler
    operator ::AudioHelm::NoteHandler() noexcept {
      return *reinterpret_cast<::AudioHelm::NoteHandler*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.Single UPDATE_WAIT
    static constexpr const float UPDATE_WAIT = 0.04;
    // Get static field: static public System.Single UPDATE_WAIT
    static float _get_UPDATE_WAIT();
    // Set static field: static public System.Single UPDATE_WAIT
    static void _set_UPDATE_WAIT(float value);
    // static field const value: static public System.Int32 MAX_PARAMETERS
    static constexpr const int MAX_PARAMETERS = 16;
    // Get static field: static public System.Int32 MAX_PARAMETERS
    static int _get_MAX_PARAMETERS();
    // Set static field: static public System.Int32 MAX_PARAMETERS
    static void _set_MAX_PARAMETERS(int value);
    // Get instance field reference: public System.Int32 channel
    [[deprecated]] int& dyn_channel();
    // Get instance field reference: protected System.Single synthParamValue0
    [[deprecated]] float& dyn_synthParamValue0();
    // Get instance field reference: protected System.Single synthParamValue1
    [[deprecated]] float& dyn_synthParamValue1();
    // Get instance field reference: protected System.Single synthParamValue2
    [[deprecated]] float& dyn_synthParamValue2();
    // Get instance field reference: protected System.Single synthParamValue3
    [[deprecated]] float& dyn_synthParamValue3();
    // Get instance field reference: protected System.Single synthParamValue4
    [[deprecated]] float& dyn_synthParamValue4();
    // Get instance field reference: protected System.Single synthParamValue5
    [[deprecated]] float& dyn_synthParamValue5();
    // Get instance field reference: protected System.Single synthParamValue6
    [[deprecated]] float& dyn_synthParamValue6();
    // Get instance field reference: protected System.Single synthParamValue7
    [[deprecated]] float& dyn_synthParamValue7();
    // Get instance field reference: protected System.Single synthParamValue8
    [[deprecated]] float& dyn_synthParamValue8();
    // Get instance field reference: protected System.Single synthParamValue9
    [[deprecated]] float& dyn_synthParamValue9();
    // Get instance field reference: protected System.Single synthParamValue10
    [[deprecated]] float& dyn_synthParamValue10();
    // Get instance field reference: protected System.Single synthParamValue11
    [[deprecated]] float& dyn_synthParamValue11();
    // Get instance field reference: protected System.Single synthParamValue12
    [[deprecated]] float& dyn_synthParamValue12();
    // Get instance field reference: protected System.Single synthParamValue13
    [[deprecated]] float& dyn_synthParamValue13();
    // Get instance field reference: protected System.Single synthParamValue14
    [[deprecated]] float& dyn_synthParamValue14();
    // Get instance field reference: protected System.Single synthParamValue15
    [[deprecated]] float& dyn_synthParamValue15();
    // Get instance field reference: private System.Single[] paramValues
    [[deprecated]] ::ArrayW<float>& dyn_paramValues();
    // Get instance field reference: public System.Collections.Generic.List`1<AudioHelm.HelmParameter> synthParameters
    [[deprecated]] ::System::Collections::Generic::List_1<::AudioHelm::HelmParameter*>*& dyn_synthParameters();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> pressedNotes
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<int, int>*& dyn_pressedNotes();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Single,System.Int32> pressedFrequencies
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<float, int>*& dyn_pressedFrequencies();
    // private System.Void OnDestroy()
    // Offset: 0x193BBA0
    void OnDestroy();
    // private System.Void Awake()
    // Offset: 0x193BC28
    void Awake();
    // private System.Void Start()
    // Offset: 0x193BC2C
    void Start();
    // public System.Void LoadPatch(AudioHelm.HelmPatch patch)
    // Offset: 0x193BCB8
    void LoadPatch(::AudioHelm::HelmPatch* patch);
    // public System.Single GetParameterAtIndex(System.Int32 index)
    // Offset: 0x193C1A8
    float GetParameterAtIndex(int index);
    // public System.Void SetParameterAtIndex(System.Int32 index, System.Single newValue)
    // Offset: 0x193C0A0
    void SetParameterAtIndex(int index, float newValue);
    // public System.Void UpdateAllParameters()
    // Offset: 0x193C2A8
    void UpdateAllParameters();
    // public System.Void UpdateParameter(System.Int32 index)
    // Offset: 0x193C578
    void UpdateParameter(int index);
    // public AudioHelm.HelmParameter AddEmptyParameter()
    // Offset: 0x193C668
    ::AudioHelm::HelmParameter* AddEmptyParameter();
    // public AudioHelm.HelmParameter AddParameter(AudioHelm.Param parameter)
    // Offset: 0x193C778
    ::AudioHelm::HelmParameter* AddParameter(::AudioHelm::Param parameter);
    // public System.Int32 RemoveParameter(AudioHelm.HelmParameter parameter)
    // Offset: 0x193C8DC
    int RemoveParameter(::AudioHelm::HelmParameter* parameter);
    // public System.Single GetParameterValue(AudioHelm.Param parameter)
    // Offset: 0x193C978
    float GetParameterValue(::AudioHelm::Param parameter);
    // public System.Void SetParameterValue(AudioHelm.Param parameter, System.Single newValue)
    // Offset: 0x193C984
    void SetParameterValue(::AudioHelm::Param parameter, float newValue);
    // public System.Single GetParameterValue(AudioHelm.CommonParam parameter)
    // Offset: 0x193C990
    float GetParameterValue(::AudioHelm::CommonParam parameter);
    // public System.Void SetParameterValue(AudioHelm.CommonParam parameter, System.Single newValue)
    // Offset: 0x193C99C
    void SetParameterValue(::AudioHelm::CommonParam parameter, float newValue);
    // public System.Single GetParameterPercent(AudioHelm.Param parameter)
    // Offset: 0x193C9A8
    float GetParameterPercent(::AudioHelm::Param parameter);
    // public System.Void SetParameterPercent(AudioHelm.Param parameter, System.Single newPercent)
    // Offset: 0x193C9B4
    void SetParameterPercent(::AudioHelm::Param parameter, float newPercent);
    // public System.Single GetParameterPercent(AudioHelm.CommonParam parameter)
    // Offset: 0x193C9C0
    float GetParameterPercent(::AudioHelm::CommonParam parameter);
    // public System.Void SetParameterPercent(AudioHelm.CommonParam parameter, System.Single newPercent)
    // Offset: 0x193C9CC
    void SetParameterPercent(::AudioHelm::CommonParam parameter, float newPercent);
    // public System.Void SetPolyphony(System.Int32 numVoices)
    // Offset: 0x193C9D8
    void SetPolyphony(int numVoices);
    // public System.Void AllNotesOff()
    // Offset: 0x193BBA4
    void AllNotesOff();
    // public System.Boolean IsNoteOn(System.Int32 note)
    // Offset: 0x193C9EC
    bool IsNoteOn(int note);
    // public System.Boolean IsFrequencyOn(System.Single frequency)
    // Offset: 0x193CA50
    bool IsFrequencyOn(float frequency);
    // public System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> GetPressedNotes()
    // Offset: 0x193CAB4
    ::System::Collections::Generic::Dictionary_2<int, int>* GetPressedNotes();
    // public System.Void NoteOn(System.Int32 note, System.Single velocity, System.Single length)
    // Offset: 0x193CABC
    void NoteOn(int note, float velocity, float length);
    // public System.Void NoteOn(System.Int32 note, System.Single velocity)
    // Offset: 0x193CB08
    void NoteOn(int note, float velocity);
    // private System.Collections.IEnumerator WaitNoteOff(System.Int32 note, System.Single length)
    // Offset: 0x193CBD0
    ::System::Collections::IEnumerator* WaitNoteOff(int note, float length);
    // public System.Void NoteOff(System.Int32 note)
    // Offset: 0x193CC5C
    void NoteOff(int note);
    // public System.Void FrequencyOn(System.Single frequency, System.Single velocity, System.Single length)
    // Offset: 0x193CD38
    void FrequencyOn(float frequency, float velocity, float length);
    // public System.Void FrequencyOn(System.Single frequency, System.Single velocity)
    // Offset: 0x193CD84
    void FrequencyOn(float frequency, float velocity);
    // private System.Collections.IEnumerator WaitFrequencyOff(System.Single frequency, System.Single length)
    // Offset: 0x193CE44
    ::System::Collections::IEnumerator* WaitFrequencyOff(float frequency, float length);
    // public System.Void FrequencyOff(System.Single frequency)
    // Offset: 0x193CEC8
    void FrequencyOff(float frequency);
    // public System.Void SetPitchWheel(System.Single wheelValue)
    // Offset: 0x193CFA4
    void SetPitchWheel(float wheelValue);
    // public System.Void SetModWheel(System.Single wheelValue)
    // Offset: 0x193CFB0
    void SetModWheel(float wheelValue);
    // public System.Void SetAftertouch(System.Int32 note, System.Single aftertouchValue)
    // Offset: 0x193CFBC
    void SetAftertouch(int note, float aftertouchValue);
    // private System.Void FixedUpdate()
    // Offset: 0x193CFC8
    void FixedUpdate();
    // private System.Void PopulateParamsArray()
    // Offset: 0x193C384
    void PopulateParamsArray();
    // public System.Void .ctor()
    // Offset: 0x193D00C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HelmController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AudioHelm::HelmController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HelmController*, creationType>()));
    }
  }; // AudioHelm.HelmController
  #pragma pack(pop)
  static check_size<sizeof(HelmController), 120 + sizeof(::System::Collections::Generic::Dictionary_2<float, int>*)> __AudioHelm_HelmControllerSizeCheck;
  static_assert(sizeof(HelmController) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AudioHelm::HelmController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)()>(&AudioHelm::HelmController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)()>(&AudioHelm::HelmController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)()>(&AudioHelm::HelmController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::LoadPatch
// Il2CppName: LoadPatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)(::AudioHelm::HelmPatch*)>(&AudioHelm::HelmController::LoadPatch)> {
  static const MethodInfo* get() {
    static auto* patch = &::il2cpp_utils::GetClassFromName("AudioHelm", "HelmPatch")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "LoadPatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{patch});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::GetParameterAtIndex
// Il2CppName: GetParameterAtIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioHelm::HelmController::*)(int)>(&AudioHelm::HelmController::GetParameterAtIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "GetParameterAtIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::SetParameterAtIndex
// Il2CppName: SetParameterAtIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)(int, float)>(&AudioHelm::HelmController::SetParameterAtIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "SetParameterAtIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, newValue});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::UpdateAllParameters
// Il2CppName: UpdateAllParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)()>(&AudioHelm::HelmController::UpdateAllParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "UpdateAllParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::UpdateParameter
// Il2CppName: UpdateParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)(int)>(&AudioHelm::HelmController::UpdateParameter)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "UpdateParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::AddEmptyParameter
// Il2CppName: AddEmptyParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AudioHelm::HelmParameter* (AudioHelm::HelmController::*)()>(&AudioHelm::HelmController::AddEmptyParameter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "AddEmptyParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::AddParameter
// Il2CppName: AddParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AudioHelm::HelmParameter* (AudioHelm::HelmController::*)(::AudioHelm::Param)>(&AudioHelm::HelmController::AddParameter)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "Param")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "AddParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::RemoveParameter
// Il2CppName: RemoveParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AudioHelm::HelmController::*)(::AudioHelm::HelmParameter*)>(&AudioHelm::HelmController::RemoveParameter)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "HelmParameter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "RemoveParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::GetParameterValue
// Il2CppName: GetParameterValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioHelm::HelmController::*)(::AudioHelm::Param)>(&AudioHelm::HelmController::GetParameterValue)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "Param")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "GetParameterValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::SetParameterValue
// Il2CppName: SetParameterValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)(::AudioHelm::Param, float)>(&AudioHelm::HelmController::SetParameterValue)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "Param")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "SetParameterValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter, newValue});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::GetParameterValue
// Il2CppName: GetParameterValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioHelm::HelmController::*)(::AudioHelm::CommonParam)>(&AudioHelm::HelmController::GetParameterValue)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "CommonParam")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "GetParameterValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::SetParameterValue
// Il2CppName: SetParameterValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)(::AudioHelm::CommonParam, float)>(&AudioHelm::HelmController::SetParameterValue)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "CommonParam")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "SetParameterValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter, newValue});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::GetParameterPercent
// Il2CppName: GetParameterPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioHelm::HelmController::*)(::AudioHelm::Param)>(&AudioHelm::HelmController::GetParameterPercent)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "Param")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "GetParameterPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::SetParameterPercent
// Il2CppName: SetParameterPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)(::AudioHelm::Param, float)>(&AudioHelm::HelmController::SetParameterPercent)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "Param")->byval_arg;
    static auto* newPercent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "SetParameterPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter, newPercent});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::GetParameterPercent
// Il2CppName: GetParameterPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioHelm::HelmController::*)(::AudioHelm::CommonParam)>(&AudioHelm::HelmController::GetParameterPercent)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "CommonParam")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "GetParameterPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::SetParameterPercent
// Il2CppName: SetParameterPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)(::AudioHelm::CommonParam, float)>(&AudioHelm::HelmController::SetParameterPercent)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "CommonParam")->byval_arg;
    static auto* newPercent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "SetParameterPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter, newPercent});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::SetPolyphony
// Il2CppName: SetPolyphony
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)(int)>(&AudioHelm::HelmController::SetPolyphony)> {
  static const MethodInfo* get() {
    static auto* numVoices = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "SetPolyphony", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numVoices});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::AllNotesOff
// Il2CppName: AllNotesOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)()>(&AudioHelm::HelmController::AllNotesOff)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "AllNotesOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::IsNoteOn
// Il2CppName: IsNoteOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioHelm::HelmController::*)(int)>(&AudioHelm::HelmController::IsNoteOn)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "IsNoteOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::IsFrequencyOn
// Il2CppName: IsFrequencyOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioHelm::HelmController::*)(float)>(&AudioHelm::HelmController::IsFrequencyOn)> {
  static const MethodInfo* get() {
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "IsFrequencyOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frequency});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::GetPressedNotes
// Il2CppName: GetPressedNotes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<int, int>* (AudioHelm::HelmController::*)()>(&AudioHelm::HelmController::GetPressedNotes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "GetPressedNotes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::NoteOn
// Il2CppName: NoteOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)(int, float, float)>(&AudioHelm::HelmController::NoteOn)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "NoteOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, velocity, length});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::NoteOn
// Il2CppName: NoteOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)(int, float)>(&AudioHelm::HelmController::NoteOn)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "NoteOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, velocity});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::WaitNoteOff
// Il2CppName: WaitNoteOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (AudioHelm::HelmController::*)(int, float)>(&AudioHelm::HelmController::WaitNoteOff)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "WaitNoteOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, length});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::NoteOff
// Il2CppName: NoteOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)(int)>(&AudioHelm::HelmController::NoteOff)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "NoteOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::FrequencyOn
// Il2CppName: FrequencyOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)(float, float, float)>(&AudioHelm::HelmController::FrequencyOn)> {
  static const MethodInfo* get() {
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "FrequencyOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frequency, velocity, length});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::FrequencyOn
// Il2CppName: FrequencyOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)(float, float)>(&AudioHelm::HelmController::FrequencyOn)> {
  static const MethodInfo* get() {
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "FrequencyOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frequency, velocity});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::WaitFrequencyOff
// Il2CppName: WaitFrequencyOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (AudioHelm::HelmController::*)(float, float)>(&AudioHelm::HelmController::WaitFrequencyOff)> {
  static const MethodInfo* get() {
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "WaitFrequencyOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frequency, length});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::FrequencyOff
// Il2CppName: FrequencyOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)(float)>(&AudioHelm::HelmController::FrequencyOff)> {
  static const MethodInfo* get() {
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "FrequencyOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frequency});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::SetPitchWheel
// Il2CppName: SetPitchWheel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)(float)>(&AudioHelm::HelmController::SetPitchWheel)> {
  static const MethodInfo* get() {
    static auto* wheelValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "SetPitchWheel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wheelValue});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::SetModWheel
// Il2CppName: SetModWheel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)(float)>(&AudioHelm::HelmController::SetModWheel)> {
  static const MethodInfo* get() {
    static auto* wheelValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "SetModWheel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wheelValue});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::SetAftertouch
// Il2CppName: SetAftertouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)(int, float)>(&AudioHelm::HelmController::SetAftertouch)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* aftertouchValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "SetAftertouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, aftertouchValue});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)()>(&AudioHelm::HelmController::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::PopulateParamsArray
// Il2CppName: PopulateParamsArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmController::*)()>(&AudioHelm::HelmController::PopulateParamsArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmController*), "PopulateParamsArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
