// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: DestroyAfterTime
  class DestroyAfterTime;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AudioHelm::DestroyAfterTime);
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::DestroyAfterTime*, "AudioHelm", "DestroyAfterTime");
// Type namespace: AudioHelm
namespace AudioHelm {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: AudioHelm.DestroyAfterTime
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 78200C
  class DestroyAfterTime : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single time
    // Size: 0x4
    // Offset: 0x18
    float time;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Single time
    [[deprecated("Use field access instead!")]] float& dyn_time();
    // public System.Void .ctor()
    // Offset: 0x8E4760
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DestroyAfterTime* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AudioHelm::DestroyAfterTime::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DestroyAfterTime*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x8E4694
    void Start();
    // private System.Void Die()
    // Offset: 0x8E46E8
    void Die();
  }; // AudioHelm.DestroyAfterTime
  #pragma pack(pop)
  static check_size<sizeof(DestroyAfterTime), 24 + sizeof(float)> __AudioHelm_DestroyAfterTimeSizeCheck;
  static_assert(sizeof(DestroyAfterTime) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AudioHelm::DestroyAfterTime::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AudioHelm::DestroyAfterTime::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::DestroyAfterTime::*)()>(&AudioHelm::DestroyAfterTime::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::DestroyAfterTime*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::DestroyAfterTime::Die
// Il2CppName: Die
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::DestroyAfterTime::*)()>(&AudioHelm::DestroyAfterTime::Die)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::DestroyAfterTime*), "Die", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
