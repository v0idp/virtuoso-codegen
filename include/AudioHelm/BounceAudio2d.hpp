// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: HelmController
  class HelmController;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collision2D
  class Collision2D;
}
// Completed forward declares
// Type namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: BounceAudio2d
  class BounceAudio2d;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AudioHelm::BounceAudio2d);
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::BounceAudio2d*, "AudioHelm", "BounceAudio2d");
// Type namespace: AudioHelm
namespace AudioHelm {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: AudioHelm.BounceAudio2d
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 781F2C
  class BounceAudio2d : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public AudioHelm.HelmController synth
    // Size: 0x8
    // Offset: 0x18
    ::AudioHelm::HelmController* synth;
    // Field size check
    static_assert(sizeof(::AudioHelm::HelmController*) == 0x8);
    // public System.Int32[] scale
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<int> scale;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Int32 minNote
    // Size: 0x4
    // Offset: 0x28
    int minNote;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single maxSize
    // Size: 0x4
    // Offset: 0x2C
    float maxSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single noteLength
    // Size: 0x4
    // Offset: 0x30
    float noteLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxSpeed
    // Size: 0x4
    // Offset: 0x34
    float maxSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public AudioHelm.HelmController synth
    [[deprecated("Use field access instead!")]] ::AudioHelm::HelmController*& dyn_synth();
    // Get instance field reference: public System.Int32[] scale
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_scale();
    // Get instance field reference: public System.Int32 minNote
    [[deprecated("Use field access instead!")]] int& dyn_minNote();
    // Get instance field reference: public System.Single maxSize
    [[deprecated("Use field access instead!")]] float& dyn_maxSize();
    // Get instance field reference: public System.Single noteLength
    [[deprecated("Use field access instead!")]] float& dyn_noteLength();
    // Get instance field reference: public System.Single maxSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxSpeed();
    // public System.Void .ctor()
    // Offset: 0x939BD4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BounceAudio2d* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AudioHelm::BounceAudio2d::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BounceAudio2d*, creationType>()));
    }
    // private System.Single GetCollisionStrength(UnityEngine.Collision2D collision)
    // Offset: 0x939908
    float GetCollisionStrength(::UnityEngine::Collision2D* collision);
    // private System.Int32 GetNote()
    // Offset: 0x9399D0
    int GetNote();
    // private System.Void OnCollisionEnter2D(UnityEngine.Collision2D collision)
    // Offset: 0x939AA0
    void OnCollisionEnter2D(::UnityEngine::Collision2D* collision);
  }; // AudioHelm.BounceAudio2d
  #pragma pack(pop)
  static check_size<sizeof(BounceAudio2d), 52 + sizeof(float)> __AudioHelm_BounceAudio2dSizeCheck;
  static_assert(sizeof(BounceAudio2d) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AudioHelm::BounceAudio2d::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AudioHelm::BounceAudio2d::GetCollisionStrength
// Il2CppName: GetCollisionStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioHelm::BounceAudio2d::*)(::UnityEngine::Collision2D*)>(&AudioHelm::BounceAudio2d::GetCollisionStrength)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::BounceAudio2d*), "GetCollisionStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
// Writing MetadataGetter for method: AudioHelm::BounceAudio2d::GetNote
// Il2CppName: GetNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AudioHelm::BounceAudio2d::*)()>(&AudioHelm::BounceAudio2d::GetNote)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::BounceAudio2d*), "GetNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::BounceAudio2d::OnCollisionEnter2D
// Il2CppName: OnCollisionEnter2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::BounceAudio2d::*)(::UnityEngine::Collision2D*)>(&AudioHelm::BounceAudio2d::OnCollisionEnter2D)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::BounceAudio2d*), "OnCollisionEnter2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
