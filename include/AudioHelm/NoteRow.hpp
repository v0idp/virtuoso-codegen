// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: Note
  class Note;
}
// Completed forward declares
// Type namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: NoteRow
  class NoteRow;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AudioHelm::NoteRow);
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::NoteRow*, "AudioHelm", "NoteRow");
// Type namespace: AudioHelm
namespace AudioHelm {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: AudioHelm.NoteRow
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteRow : public ::Il2CppObject/*, public ::UnityEngine::ISerializationCallbackReceiver*/ {
    public:
    public:
    // public System.Collections.Generic.List`1<AudioHelm.Note> notes
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::AudioHelm::Note*>* notes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::AudioHelm::Note*>*) == 0x8);
    // private System.Collections.Generic.List`1<AudioHelm.Note> oldNotes
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::AudioHelm::Note*>* oldNotes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::AudioHelm::Note*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::ISerializationCallbackReceiver
    operator ::UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Get instance field reference: public System.Collections.Generic.List`1<AudioHelm.Note> notes
    [[deprecated]] ::System::Collections::Generic::List_1<::AudioHelm::Note*>*& dyn_notes();
    // Get instance field reference: private System.Collections.Generic.List`1<AudioHelm.Note> oldNotes
    [[deprecated]] ::System::Collections::Generic::List_1<::AudioHelm::Note*>*& dyn_oldNotes();
    // public System.Void OnBeforeSerialize()
    // Offset: 0xC5AADC
    void OnBeforeSerialize();
    // public System.Void OnAfterDeserialize()
    // Offset: 0xC5AB5C
    void OnAfterDeserialize();
    // public System.Void .ctor()
    // Offset: 0xC5AD98
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteRow* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AudioHelm::NoteRow::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteRow*, creationType>()));
    }
  }; // AudioHelm.NoteRow
  #pragma pack(pop)
  static check_size<sizeof(NoteRow), 24 + sizeof(::System::Collections::Generic::List_1<::AudioHelm::Note*>*)> __AudioHelm_NoteRowSizeCheck;
  static_assert(sizeof(NoteRow) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AudioHelm::NoteRow::OnBeforeSerialize
// Il2CppName: OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::NoteRow::*)()>(&AudioHelm::NoteRow::OnBeforeSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::NoteRow*), "OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::NoteRow::OnAfterDeserialize
// Il2CppName: OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::NoteRow::*)()>(&AudioHelm::NoteRow::OnAfterDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::NoteRow*), "OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::NoteRow::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
