// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: AudioHelm.NoteHandler
#include "AudioHelm/NoteHandler.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: AudioHelm.MidiFile
#include "AudioHelm/MidiFile.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AudioHelm
namespace AudioHelm {
  // Skipping declaration: NotePosition because it is already included!
  // Forward declaring type: Note
  class Note;
  // Forward declaring type: NoteRow
  class NoteRow;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: SortedList`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class SortedList_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IntPtr because it is already included!
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
// Type namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: Sequencer
  class Sequencer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AudioHelm::Sequencer);
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::Sequencer*, "AudioHelm", "Sequencer");
// Type namespace: AudioHelm
namespace AudioHelm {
  // Size: 0xAC
  #pragma pack(push, 1)
  // Autogenerated type: AudioHelm.Sequencer
  // [TokenAttribute] Offset: FFFFFFFF
  class Sequencer : public ::UnityEngine::MonoBehaviour/*, public ::AudioHelm::NoteHandler, public ::UnityEngine::ISerializationCallbackReceiver*/ {
    public:
    // Nested type: ::AudioHelm::Sequencer::NoteAction
    class NoteAction;
    // Nested type: ::AudioHelm::Sequencer::BeatAction
    class BeatAction;
    // Nested type: ::AudioHelm::Sequencer::NoteEvent
    class NoteEvent;
    // Nested type: ::AudioHelm::Sequencer::BeatEvent
    class BeatEvent;
    // Nested type: ::AudioHelm::Sequencer::NoteComparer
    class NoteComparer;
    // Nested type: ::AudioHelm::Sequencer::NotePositionComparer
    class NotePositionComparer;
    // Nested type: ::AudioHelm::Sequencer::NotePosition
    struct NotePosition;
    // Nested type: ::AudioHelm::Sequencer::Division
    struct Division;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: AudioHelm.Sequencer/AudioHelm.NotePosition
    // [TokenAttribute] Offset: FFFFFFFF
    struct NotePosition/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Single position_
      // Size: 0x4
      // Offset: 0x0
      float position;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Int32 note_
      // Size: 0x4
      // Offset: 0x4
      int note;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: NotePosition
      constexpr NotePosition(float position_ = {}, int note_ = {}) noexcept : position{position_}, note{note_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Single position_
      float& dyn_position_();
      // Get instance field reference: public System.Int32 note_
      int& dyn_note_();
      // public System.Void .ctor(System.Single position, System.Int32 note)
      // Offset: 0x134A054
      // ABORTED: conflicts with another method.  NotePosition(float position, int note);
    }; // AudioHelm.Sequencer/AudioHelm.NotePosition
    #pragma pack(pop)
    static check_size<sizeof(Sequencer::NotePosition), 4 + sizeof(int)> __AudioHelm_Sequencer_NotePositionSizeCheck;
    static_assert(sizeof(Sequencer::NotePosition) == 0x8);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: AudioHelm.Sequencer/AudioHelm.Division
    // [TokenAttribute] Offset: FFFFFFFF
    struct Division/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Division
      constexpr Division(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public AudioHelm.Sequencer/AudioHelm.Division kEighth
      static constexpr const int kEighth = 0;
      // Get static field: static public AudioHelm.Sequencer/AudioHelm.Division kEighth
      static ::AudioHelm::Sequencer::Division _get_kEighth();
      // Set static field: static public AudioHelm.Sequencer/AudioHelm.Division kEighth
      static void _set_kEighth(::AudioHelm::Sequencer::Division value);
      // static field const value: static public AudioHelm.Sequencer/AudioHelm.Division kSixteenth
      static constexpr const int kSixteenth = 1;
      // Get static field: static public AudioHelm.Sequencer/AudioHelm.Division kSixteenth
      static ::AudioHelm::Sequencer::Division _get_kSixteenth();
      // Set static field: static public AudioHelm.Sequencer/AudioHelm.Division kSixteenth
      static void _set_kSixteenth(::AudioHelm::Sequencer::Division value);
      // static field const value: static public AudioHelm.Sequencer/AudioHelm.Division kTriplet
      static constexpr const int kTriplet = 2;
      // Get static field: static public AudioHelm.Sequencer/AudioHelm.Division kTriplet
      static ::AudioHelm::Sequencer::Division _get_kTriplet();
      // Set static field: static public AudioHelm.Sequencer/AudioHelm.Division kTriplet
      static void _set_kTriplet(::AudioHelm::Sequencer::Division value);
      // static field const value: static public AudioHelm.Sequencer/AudioHelm.Division kThirtySecond
      static constexpr const int kThirtySecond = 3;
      // Get static field: static public AudioHelm.Sequencer/AudioHelm.Division kThirtySecond
      static ::AudioHelm::Sequencer::Division _get_kThirtySecond();
      // Set static field: static public AudioHelm.Sequencer/AudioHelm.Division kThirtySecond
      static void _set_kThirtySecond(::AudioHelm::Sequencer::Division value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // AudioHelm.Sequencer/AudioHelm.Division
    #pragma pack(pop)
    static check_size<sizeof(Sequencer::Division), 0 + sizeof(int)> __AudioHelm_Sequencer_DivisionSizeCheck;
    static_assert(sizeof(Sequencer::Division) == 0x4);
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private AudioHelm.Sequencer/AudioHelm.NoteAction OnNoteOn
    // Size: 0x8
    // Offset: 0x18
    ::AudioHelm::Sequencer::NoteAction* OnNoteOn;
    // Field size check
    static_assert(sizeof(::AudioHelm::Sequencer::NoteAction*) == 0x8);
    // private AudioHelm.Sequencer/AudioHelm.NoteAction OnNoteOff
    // Size: 0x8
    // Offset: 0x20
    ::AudioHelm::Sequencer::NoteAction* OnNoteOff;
    // Field size check
    static_assert(sizeof(::AudioHelm::Sequencer::NoteAction*) == 0x8);
    // private AudioHelm.Sequencer/AudioHelm.BeatAction OnBeat
    // Size: 0x8
    // Offset: 0x28
    ::AudioHelm::Sequencer::BeatAction* OnBeat;
    // Field size check
    static_assert(sizeof(::AudioHelm::Sequencer::BeatAction*) == 0x8);
    // [TooltipAttribute] Offset: 0x67ADB0
    // public AudioHelm.Sequencer/AudioHelm.NoteEvent noteOnEvent
    // Size: 0x8
    // Offset: 0x30
    ::AudioHelm::Sequencer::NoteEvent* noteOnEvent;
    // Field size check
    static_assert(sizeof(::AudioHelm::Sequencer::NoteEvent*) == 0x8);
    // [TooltipAttribute] Offset: 0x67ADE8
    // public AudioHelm.Sequencer/AudioHelm.NoteEvent noteOffEvent
    // Size: 0x8
    // Offset: 0x38
    ::AudioHelm::Sequencer::NoteEvent* noteOffEvent;
    // Field size check
    static_assert(sizeof(::AudioHelm::Sequencer::NoteEvent*) == 0x8);
    // [TooltipAttribute] Offset: 0x67AE20
    // public AudioHelm.Sequencer/AudioHelm.BeatEvent beatEvent
    // Size: 0x8
    // Offset: 0x40
    ::AudioHelm::Sequencer::BeatEvent* beatEvent;
    // Field size check
    static_assert(sizeof(::AudioHelm::Sequencer::BeatEvent*) == 0x8);
    // private System.Collections.Generic.List`1<AudioHelm.Note> activeNotes
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::AudioHelm::Note*>* activeNotes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::AudioHelm::Note*>*) == 0x8);
    // [TooltipAttribute] Offset: 0x67AE58
    // public System.Int32 length
    // Size: 0x4
    // Offset: 0x50
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 currentIndex
    // Size: 0x4
    // Offset: 0x54
    int currentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean loop
    // Size: 0x1
    // Offset: 0x58
    bool loop;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: loop and: beatTime
    char __padding9[0x7] = {};
    // protected System.Double beatTime
    // Size: 0x8
    // Offset: 0x60
    double beatTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // protected System.Boolean paused
    // Size: 0x1
    // Offset: 0x68
    bool paused;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: paused and: allNotes
    char __padding11[0x7] = {};
    // public AudioHelm.NoteRow[] allNotes
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::AudioHelm::NoteRow*> allNotes;
    // Field size check
    static_assert(sizeof(::ArrayW<::AudioHelm::NoteRow*>) == 0x8);
    // public UnityEngine.Vector2 scrollPosition
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Vector2 scrollPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // [TooltipAttribute] Offset: 0x67AE90
    // public System.Boolean autoScroll
    // Size: 0x1
    // Offset: 0x80
    bool autoScroll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: autoScroll and: division
    char __padding14[0x3] = {};
    // [TooltipAttribute] Offset: 0x67AEC8
    // public AudioHelm.Sequencer/AudioHelm.Division division
    // Size: 0x4
    // Offset: 0x84
    ::AudioHelm::Sequencer::Division division;
    // Field size check
    static_assert(sizeof(::AudioHelm::Sequencer::Division) == 0x4);
    // [TooltipAttribute] Offset: 0x67AF00
    // public System.Single zoom
    // Size: 0x4
    // Offset: 0x88
    float zoom;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: zoom and: sortedNoteOns
    char __padding16[0x4] = {};
    // private System.Collections.Generic.SortedList`2<AudioHelm.Sequencer/AudioHelm.NotePosition,AudioHelm.Note> sortedNoteOns
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::SortedList_2<::AudioHelm::Sequencer::NotePosition, ::AudioHelm::Note*>* sortedNoteOns;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::SortedList_2<::AudioHelm::Sequencer::NotePosition, ::AudioHelm::Note*>*) == 0x8);
    // private System.Collections.Generic.SortedList`2<AudioHelm.Sequencer/AudioHelm.NotePosition,AudioHelm.Note> sortedNoteOffs
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::Generic::SortedList_2<::AudioHelm::Sequencer::NotePosition, ::AudioHelm::Note*>* sortedNoteOffs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::SortedList_2<::AudioHelm::Sequencer::NotePosition, ::AudioHelm::Note*>*) == 0x8);
    // private System.Single lastSequencerPosition
    // Size: 0x4
    // Offset: 0xA0
    float lastSequencerPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean waitTillNextCycle
    // Size: 0x1
    // Offset: 0xA4
    bool waitTillNextCycle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: waitTillNextCycle and: numCycles
    char __padding20[0x3] = {};
    // private System.Int32 numCycles
    // Size: 0x4
    // Offset: 0xA8
    int numCycles;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::AudioHelm::NoteHandler
    operator ::AudioHelm::NoteHandler() noexcept {
      return *reinterpret_cast<::AudioHelm::NoteHandler*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::ISerializationCallbackReceiver
    operator ::UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private AudioHelm.Sequencer/AudioHelm.NoteComparer noteComparer
    static ::AudioHelm::Sequencer::NoteComparer* _get_noteComparer();
    // Set static field: static private AudioHelm.Sequencer/AudioHelm.NoteComparer noteComparer
    static void _set_noteComparer(::AudioHelm::Sequencer::NoteComparer* value);
    // Get static field: static private AudioHelm.Sequencer/AudioHelm.NotePositionComparer notePositionComparer
    static ::AudioHelm::Sequencer::NotePositionComparer* _get_notePositionComparer();
    // Set static field: static private AudioHelm.Sequencer/AudioHelm.NotePositionComparer notePositionComparer
    static void _set_notePositionComparer(::AudioHelm::Sequencer::NotePositionComparer* value);
    // Get instance field reference: private AudioHelm.Sequencer/AudioHelm.NoteAction OnNoteOn
    ::AudioHelm::Sequencer::NoteAction*& dyn_OnNoteOn();
    // Get instance field reference: private AudioHelm.Sequencer/AudioHelm.NoteAction OnNoteOff
    ::AudioHelm::Sequencer::NoteAction*& dyn_OnNoteOff();
    // Get instance field reference: private AudioHelm.Sequencer/AudioHelm.BeatAction OnBeat
    ::AudioHelm::Sequencer::BeatAction*& dyn_OnBeat();
    // Get instance field reference: public AudioHelm.Sequencer/AudioHelm.NoteEvent noteOnEvent
    ::AudioHelm::Sequencer::NoteEvent*& dyn_noteOnEvent();
    // Get instance field reference: public AudioHelm.Sequencer/AudioHelm.NoteEvent noteOffEvent
    ::AudioHelm::Sequencer::NoteEvent*& dyn_noteOffEvent();
    // Get instance field reference: public AudioHelm.Sequencer/AudioHelm.BeatEvent beatEvent
    ::AudioHelm::Sequencer::BeatEvent*& dyn_beatEvent();
    // Get instance field reference: private System.Collections.Generic.List`1<AudioHelm.Note> activeNotes
    ::System::Collections::Generic::List_1<::AudioHelm::Note*>*& dyn_activeNotes();
    // Get instance field reference: public System.Int32 length
    int& dyn_length();
    // Get instance field reference: public System.Int32 currentIndex
    int& dyn_currentIndex();
    // Get instance field reference: public System.Boolean loop
    bool& dyn_loop();
    // Get instance field reference: protected System.Double beatTime
    double& dyn_beatTime();
    // Get instance field reference: protected System.Boolean paused
    bool& dyn_paused();
    // Get instance field reference: public AudioHelm.NoteRow[] allNotes
    ::ArrayW<::AudioHelm::NoteRow*>& dyn_allNotes();
    // Get instance field reference: public UnityEngine.Vector2 scrollPosition
    ::UnityEngine::Vector2& dyn_scrollPosition();
    // Get instance field reference: public System.Boolean autoScroll
    bool& dyn_autoScroll();
    // Get instance field reference: public AudioHelm.Sequencer/AudioHelm.Division division
    ::AudioHelm::Sequencer::Division& dyn_division();
    // Get instance field reference: public System.Single zoom
    float& dyn_zoom();
    // Get instance field reference: private System.Collections.Generic.SortedList`2<AudioHelm.Sequencer/AudioHelm.NotePosition,AudioHelm.Note> sortedNoteOns
    ::System::Collections::Generic::SortedList_2<::AudioHelm::Sequencer::NotePosition, ::AudioHelm::Note*>*& dyn_sortedNoteOns();
    // Get instance field reference: private System.Collections.Generic.SortedList`2<AudioHelm.Sequencer/AudioHelm.NotePosition,AudioHelm.Note> sortedNoteOffs
    ::System::Collections::Generic::SortedList_2<::AudioHelm::Sequencer::NotePosition, ::AudioHelm::Note*>*& dyn_sortedNoteOffs();
    // Get instance field reference: private System.Single lastSequencerPosition
    float& dyn_lastSequencerPosition();
    // Get instance field reference: private System.Boolean waitTillNextCycle
    bool& dyn_waitTillNextCycle();
    // Get instance field reference: private System.Int32 numCycles
    int& dyn_numCycles();
    // public System.Void add_OnNoteOn(AudioHelm.Sequencer/AudioHelm.NoteAction value)
    // Offset: 0x13E3368
    void add_OnNoteOn(::AudioHelm::Sequencer::NoteAction* value);
    // public System.Void remove_OnNoteOn(AudioHelm.Sequencer/AudioHelm.NoteAction value)
    // Offset: 0x13E3408
    void remove_OnNoteOn(::AudioHelm::Sequencer::NoteAction* value);
    // public System.Void add_OnNoteOff(AudioHelm.Sequencer/AudioHelm.NoteAction value)
    // Offset: 0x13E34A8
    void add_OnNoteOff(::AudioHelm::Sequencer::NoteAction* value);
    // public System.Void remove_OnNoteOff(AudioHelm.Sequencer/AudioHelm.NoteAction value)
    // Offset: 0x13E3548
    void remove_OnNoteOff(::AudioHelm::Sequencer::NoteAction* value);
    // public System.Void add_OnBeat(AudioHelm.Sequencer/AudioHelm.BeatAction value)
    // Offset: 0x13E35E8
    void add_OnBeat(::AudioHelm::Sequencer::BeatAction* value);
    // public System.Void remove_OnBeat(AudioHelm.Sequencer/AudioHelm.BeatAction value)
    // Offset: 0x13E3688
    void remove_OnBeat(::AudioHelm::Sequencer::BeatAction* value);
    // public System.Void AllNotesOff()
    // Offset: 0x13E3728
    void AllNotesOff();
    // public System.Void NoteOn(System.Int32 note, System.Single velocity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void NoteOn(int note, float velocity);
    // public System.Void NoteOff(System.Int32 note)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void NoteOff(int note);
    // public System.Void StartScheduled(System.Double dspTime)
    // Offset: 0x13E38B4
    void StartScheduled(double dspTime);
    // public System.Void StartOnNextCycle()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void StartOnNextCycle();
    // public System.Void OnBeforeSerialize()
    // Offset: 0x13E38B8
    void OnBeforeSerialize();
    // public System.Void OnAfterDeserialize()
    // Offset: 0x13E38BC
    void OnAfterDeserialize();
    // protected System.Void OnEnable()
    // Offset: 0x13E3B2C
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x13E4010
    void OnDisable();
    // protected System.Void WaitForNextCycle()
    // Offset: 0x13E414C
    void WaitForNextCycle();
    // protected System.Boolean WaitingForNextCycle()
    // Offset: 0x13E419C
    bool WaitingForNextCycle();
    // private AudioHelm.Sequencer/AudioHelm.NotePosition NoteOnPosition(AudioHelm.Note note)
    // Offset: 0x13E41A4
    ::AudioHelm::Sequencer::NotePosition NoteOnPosition(::AudioHelm::Note* note);
    // private AudioHelm.Sequencer/AudioHelm.NotePosition NoteOffPosition(AudioHelm.Note note)
    // Offset: 0x13E41E0
    ::AudioHelm::Sequencer::NotePosition NoteOffPosition(::AudioHelm::Note* note);
    // protected System.Void RemoveSortedNoteEvents(AudioHelm.Note note)
    // Offset: 0x13E421C
    void RemoveSortedNoteEvents(::AudioHelm::Note* note);
    // protected System.Void AddSortedNoteEvents(AudioHelm.Note note)
    // Offset: 0x13E42AC
    void AddSortedNoteEvents(::AudioHelm::Note* note);
    // public System.IntPtr Reference()
    // Offset: 0x13E43B4
    ::System::IntPtr Reference();
    // protected System.Void InitNoteRows()
    // Offset: 0x13E38C0
    void InitNoteRows();
    // public System.Single GetDivisionLength()
    // Offset: 0x13E43F0
    float GetDivisionLength();
    // public System.Void NotifyNoteKeyChanged(AudioHelm.Note note, System.Int32 oldKey)
    // Offset: 0x13E4420
    void NotifyNoteKeyChanged(::AudioHelm::Note* note, int oldKey);
    // public System.Void NotifyNoteStartChanged(AudioHelm.Note note, System.Single oldStart)
    // Offset: 0x13E4598
    void NotifyNoteStartChanged(::AudioHelm::Note* note, float oldStart);
    // public System.Void NotifyNoteEndChanged(AudioHelm.Note note, System.Single oldEnd)
    // Offset: 0x13E467C
    void NotifyNoteEndChanged(::AudioHelm::Note* note, float oldEnd);
    // public System.Void RemoveNote(AudioHelm.Note note)
    // Offset: 0x13E4760
    void RemoveNote(::AudioHelm::Note* note);
    // public System.Boolean NoteExistsInRange(System.Int32 note, System.Single start, System.Single end)
    // Offset: 0x13E4818
    bool NoteExistsInRange(int note, float start, float end);
    // public AudioHelm.Note GetNoteInRange(System.Int32 note, System.Single start, System.Single end, AudioHelm.Note ignore)
    // Offset: 0x13E4838
    ::AudioHelm::Note* GetNoteInRange(int note, float start, float end, ::AudioHelm::Note* ignore);
    // public System.Collections.Generic.List`1<AudioHelm.Note> GetAllNotes()
    // Offset: 0x13E49E8
    ::System::Collections::Generic::List_1<::AudioHelm::Note*>* GetAllNotes();
    // public System.Collections.Generic.List`1<AudioHelm.Note> GetAllNoteOnsInRange(System.Single start, System.Single end)
    // Offset: 0x13E4A8C
    ::System::Collections::Generic::List_1<::AudioHelm::Note*>* GetAllNoteOnsInRange(float start, float end);
    // public System.Collections.Generic.List`1<AudioHelm.Note> GetAllNoteOffsInRange(System.Single start, System.Single end)
    // Offset: 0x13E4D14
    ::System::Collections::Generic::List_1<::AudioHelm::Note*>* GetAllNoteOffsInRange(float start, float end);
    // public System.Void RemoveNotesInRange(System.Int32 note, System.Single start, System.Single end)
    // Offset: 0x13E4D1C
    void RemoveNotesInRange(int note, float start, float end);
    // public System.Void RemoveNotesContainedInRange(System.Int32 note, System.Single start, System.Single end, AudioHelm.Note ignore)
    // Offset: 0x13E5014
    void RemoveNotesContainedInRange(int note, float start, float end, ::AudioHelm::Note* ignore);
    // public System.Void ClampNotesInRange(System.Int32 note, System.Single start, System.Single end, AudioHelm.Note ignore)
    // Offset: 0x13E5324
    void ClampNotesInRange(int note, float start, float end, ::AudioHelm::Note* ignore);
    // public AudioHelm.Note AddNote(System.Int32 note, System.Single start, System.Single end, System.Single velocity)
    // Offset: 0x13E3054
    ::AudioHelm::Note* AddNote(int note, float start, float end, float velocity);
    // public System.Void TransposeNotes(System.Int32 transpose)
    // Offset: 0x13E5394
    void TransposeNotes(int transpose);
    // private System.Void ReadMidiData(AudioHelm.MidiFile/AudioHelm.MidiData midiData)
    // Offset: 0x13E550C
    void ReadMidiData(::AudioHelm::MidiFile::MidiData* midiData);
    // public System.Void ReadMidiFile(System.IO.Stream midiStream)
    // Offset: 0x13E5658
    void ReadMidiFile(::System::IO::Stream* midiStream);
    // public System.Void ReadMidiFile(AudioHelm.MidiFile midiFile)
    // Offset: 0x13E5688
    void ReadMidiFile(::AudioHelm::MidiFile* midiFile);
    // public System.Void Clear()
    // Offset: 0x13E2E04
    void Clear();
    // public System.Single GetSixteenthTime()
    // Offset: 0x13E5724
    float GetSixteenthTime();
    // protected System.Double GetSequencerTime()
    // Offset: 0x13E418C
    double GetSequencerTime();
    // public System.Double GetSequencerPosition()
    // Offset: 0x13E57D4
    double GetSequencerPosition();
    // private System.Collections.Generic.List`1<AudioHelm.Note> GetAllNoteEventsInRange(System.Single start, System.Single end, System.Collections.Generic.SortedList`2<AudioHelm.Sequencer/AudioHelm.NotePosition,AudioHelm.Note> events)
    // Offset: 0x13E4A94
    ::System::Collections::Generic::List_1<::AudioHelm::Note*>* GetAllNoteEventsInRange(float start, float end, ::System::Collections::Generic::SortedList_2<::AudioHelm::Sequencer::NotePosition, ::AudioHelm::Note*>* events);
    // private System.Void UpdateIndex()
    // Offset: 0x13E581C
    void UpdateIndex();
    // protected System.Void UpdateBeatTime()
    // Offset: 0x13E592C
    void UpdateBeatTime();
    // private System.Void SendNoteOff(AudioHelm.Note note)
    // Offset: 0x13E5A8C
    void SendNoteOff(::AudioHelm::Note* note);
    // private System.Void SendNoteOn(AudioHelm.Note note)
    // Offset: 0x13E5B3C
    void SendNoteOn(::AudioHelm::Note* note);
    // protected System.Void UpdatePosition(System.Boolean sendEvents)
    // Offset: 0x13E3CA0
    void UpdatePosition(bool sendEvents);
    // protected System.Void .ctor()
    // Offset: 0x13E5BEC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Sequencer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AudioHelm::Sequencer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Sequencer*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x13E5D7C
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // AudioHelm.Sequencer
  #pragma pack(pop)
  static check_size<sizeof(Sequencer), 168 + sizeof(int)> __AudioHelm_SequencerSizeCheck;
  static_assert(sizeof(Sequencer) == 0xAC);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::Sequencer::Division, "AudioHelm", "Sequencer/Division");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::Sequencer::NotePosition, "AudioHelm", "Sequencer/NotePosition");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AudioHelm::Sequencer::add_OnNoteOn
// Il2CppName: add_OnNoteOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(::AudioHelm::Sequencer::NoteAction*)>(&AudioHelm::Sequencer::add_OnNoteOn)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("AudioHelm", "Sequencer/NoteAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "add_OnNoteOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::remove_OnNoteOn
// Il2CppName: remove_OnNoteOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(::AudioHelm::Sequencer::NoteAction*)>(&AudioHelm::Sequencer::remove_OnNoteOn)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("AudioHelm", "Sequencer/NoteAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "remove_OnNoteOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::add_OnNoteOff
// Il2CppName: add_OnNoteOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(::AudioHelm::Sequencer::NoteAction*)>(&AudioHelm::Sequencer::add_OnNoteOff)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("AudioHelm", "Sequencer/NoteAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "add_OnNoteOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::remove_OnNoteOff
// Il2CppName: remove_OnNoteOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(::AudioHelm::Sequencer::NoteAction*)>(&AudioHelm::Sequencer::remove_OnNoteOff)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("AudioHelm", "Sequencer/NoteAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "remove_OnNoteOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::add_OnBeat
// Il2CppName: add_OnBeat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(::AudioHelm::Sequencer::BeatAction*)>(&AudioHelm::Sequencer::add_OnBeat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("AudioHelm", "Sequencer/BeatAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "add_OnBeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::remove_OnBeat
// Il2CppName: remove_OnBeat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(::AudioHelm::Sequencer::BeatAction*)>(&AudioHelm::Sequencer::remove_OnBeat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("AudioHelm", "Sequencer/BeatAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "remove_OnBeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::AllNotesOff
// Il2CppName: AllNotesOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)()>(&AudioHelm::Sequencer::AllNotesOff)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "AllNotesOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::NoteOn
// Il2CppName: NoteOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(int, float)>(&AudioHelm::Sequencer::NoteOn)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "NoteOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, velocity});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::NoteOff
// Il2CppName: NoteOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(int)>(&AudioHelm::Sequencer::NoteOff)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "NoteOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::StartScheduled
// Il2CppName: StartScheduled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(double)>(&AudioHelm::Sequencer::StartScheduled)> {
  static const MethodInfo* get() {
    static auto* dspTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "StartScheduled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspTime});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::StartOnNextCycle
// Il2CppName: StartOnNextCycle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)()>(&AudioHelm::Sequencer::StartOnNextCycle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "StartOnNextCycle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::OnBeforeSerialize
// Il2CppName: OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)()>(&AudioHelm::Sequencer::OnBeforeSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::OnAfterDeserialize
// Il2CppName: OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)()>(&AudioHelm::Sequencer::OnAfterDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)()>(&AudioHelm::Sequencer::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)()>(&AudioHelm::Sequencer::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::WaitForNextCycle
// Il2CppName: WaitForNextCycle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)()>(&AudioHelm::Sequencer::WaitForNextCycle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "WaitForNextCycle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::WaitingForNextCycle
// Il2CppName: WaitingForNextCycle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioHelm::Sequencer::*)()>(&AudioHelm::Sequencer::WaitingForNextCycle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "WaitingForNextCycle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::NoteOnPosition
// Il2CppName: NoteOnPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AudioHelm::Sequencer::NotePosition (AudioHelm::Sequencer::*)(::AudioHelm::Note*)>(&AudioHelm::Sequencer::NoteOnPosition)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("AudioHelm", "Note")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "NoteOnPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::NoteOffPosition
// Il2CppName: NoteOffPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AudioHelm::Sequencer::NotePosition (AudioHelm::Sequencer::*)(::AudioHelm::Note*)>(&AudioHelm::Sequencer::NoteOffPosition)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("AudioHelm", "Note")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "NoteOffPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::RemoveSortedNoteEvents
// Il2CppName: RemoveSortedNoteEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(::AudioHelm::Note*)>(&AudioHelm::Sequencer::RemoveSortedNoteEvents)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("AudioHelm", "Note")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "RemoveSortedNoteEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::AddSortedNoteEvents
// Il2CppName: AddSortedNoteEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(::AudioHelm::Note*)>(&AudioHelm::Sequencer::AddSortedNoteEvents)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("AudioHelm", "Note")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "AddSortedNoteEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::Reference
// Il2CppName: Reference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (AudioHelm::Sequencer::*)()>(&AudioHelm::Sequencer::Reference)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "Reference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::InitNoteRows
// Il2CppName: InitNoteRows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)()>(&AudioHelm::Sequencer::InitNoteRows)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "InitNoteRows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::GetDivisionLength
// Il2CppName: GetDivisionLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioHelm::Sequencer::*)()>(&AudioHelm::Sequencer::GetDivisionLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "GetDivisionLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::NotifyNoteKeyChanged
// Il2CppName: NotifyNoteKeyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(::AudioHelm::Note*, int)>(&AudioHelm::Sequencer::NotifyNoteKeyChanged)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("AudioHelm", "Note")->byval_arg;
    static auto* oldKey = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "NotifyNoteKeyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, oldKey});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::NotifyNoteStartChanged
// Il2CppName: NotifyNoteStartChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(::AudioHelm::Note*, float)>(&AudioHelm::Sequencer::NotifyNoteStartChanged)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("AudioHelm", "Note")->byval_arg;
    static auto* oldStart = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "NotifyNoteStartChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, oldStart});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::NotifyNoteEndChanged
// Il2CppName: NotifyNoteEndChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(::AudioHelm::Note*, float)>(&AudioHelm::Sequencer::NotifyNoteEndChanged)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("AudioHelm", "Note")->byval_arg;
    static auto* oldEnd = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "NotifyNoteEndChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, oldEnd});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::RemoveNote
// Il2CppName: RemoveNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(::AudioHelm::Note*)>(&AudioHelm::Sequencer::RemoveNote)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("AudioHelm", "Note")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "RemoveNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::NoteExistsInRange
// Il2CppName: NoteExistsInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioHelm::Sequencer::*)(int, float, float)>(&AudioHelm::Sequencer::NoteExistsInRange)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "NoteExistsInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, start, end});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::GetNoteInRange
// Il2CppName: GetNoteInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AudioHelm::Note* (AudioHelm::Sequencer::*)(int, float, float, ::AudioHelm::Note*)>(&AudioHelm::Sequencer::GetNoteInRange)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ignore = &::il2cpp_utils::GetClassFromName("AudioHelm", "Note")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "GetNoteInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, start, end, ignore});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::GetAllNotes
// Il2CppName: GetAllNotes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::AudioHelm::Note*>* (AudioHelm::Sequencer::*)()>(&AudioHelm::Sequencer::GetAllNotes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "GetAllNotes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::GetAllNoteOnsInRange
// Il2CppName: GetAllNoteOnsInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::AudioHelm::Note*>* (AudioHelm::Sequencer::*)(float, float)>(&AudioHelm::Sequencer::GetAllNoteOnsInRange)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "GetAllNoteOnsInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::GetAllNoteOffsInRange
// Il2CppName: GetAllNoteOffsInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::AudioHelm::Note*>* (AudioHelm::Sequencer::*)(float, float)>(&AudioHelm::Sequencer::GetAllNoteOffsInRange)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "GetAllNoteOffsInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::RemoveNotesInRange
// Il2CppName: RemoveNotesInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(int, float, float)>(&AudioHelm::Sequencer::RemoveNotesInRange)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "RemoveNotesInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, start, end});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::RemoveNotesContainedInRange
// Il2CppName: RemoveNotesContainedInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(int, float, float, ::AudioHelm::Note*)>(&AudioHelm::Sequencer::RemoveNotesContainedInRange)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ignore = &::il2cpp_utils::GetClassFromName("AudioHelm", "Note")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "RemoveNotesContainedInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, start, end, ignore});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::ClampNotesInRange
// Il2CppName: ClampNotesInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(int, float, float, ::AudioHelm::Note*)>(&AudioHelm::Sequencer::ClampNotesInRange)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ignore = &::il2cpp_utils::GetClassFromName("AudioHelm", "Note")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "ClampNotesInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, start, end, ignore});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::AddNote
// Il2CppName: AddNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AudioHelm::Note* (AudioHelm::Sequencer::*)(int, float, float, float)>(&AudioHelm::Sequencer::AddNote)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "AddNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, start, end, velocity});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::TransposeNotes
// Il2CppName: TransposeNotes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(int)>(&AudioHelm::Sequencer::TransposeNotes)> {
  static const MethodInfo* get() {
    static auto* transpose = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "TransposeNotes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transpose});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::ReadMidiData
// Il2CppName: ReadMidiData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(::AudioHelm::MidiFile::MidiData*)>(&AudioHelm::Sequencer::ReadMidiData)> {
  static const MethodInfo* get() {
    static auto* midiData = &::il2cpp_utils::GetClassFromName("AudioHelm", "MidiFile/MidiData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "ReadMidiData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{midiData});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::ReadMidiFile
// Il2CppName: ReadMidiFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(::System::IO::Stream*)>(&AudioHelm::Sequencer::ReadMidiFile)> {
  static const MethodInfo* get() {
    static auto* midiStream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "ReadMidiFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{midiStream});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::ReadMidiFile
// Il2CppName: ReadMidiFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(::AudioHelm::MidiFile*)>(&AudioHelm::Sequencer::ReadMidiFile)> {
  static const MethodInfo* get() {
    static auto* midiFile = &::il2cpp_utils::GetClassFromName("AudioHelm", "MidiFile")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "ReadMidiFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{midiFile});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)()>(&AudioHelm::Sequencer::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::GetSixteenthTime
// Il2CppName: GetSixteenthTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioHelm::Sequencer::*)()>(&AudioHelm::Sequencer::GetSixteenthTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "GetSixteenthTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::GetSequencerTime
// Il2CppName: GetSequencerTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (AudioHelm::Sequencer::*)()>(&AudioHelm::Sequencer::GetSequencerTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "GetSequencerTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::GetSequencerPosition
// Il2CppName: GetSequencerPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (AudioHelm::Sequencer::*)()>(&AudioHelm::Sequencer::GetSequencerPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "GetSequencerPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::GetAllNoteEventsInRange
// Il2CppName: GetAllNoteEventsInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::AudioHelm::Note*>* (AudioHelm::Sequencer::*)(float, float, ::System::Collections::Generic::SortedList_2<::AudioHelm::Sequencer::NotePosition, ::AudioHelm::Note*>*)>(&AudioHelm::Sequencer::GetAllNoteEventsInRange)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* events = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "SortedList`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("AudioHelm", "Sequencer/NotePosition"), ::il2cpp_utils::GetClassFromName("AudioHelm", "Note")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "GetAllNoteEventsInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, events});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::UpdateIndex
// Il2CppName: UpdateIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)()>(&AudioHelm::Sequencer::UpdateIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "UpdateIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::UpdateBeatTime
// Il2CppName: UpdateBeatTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)()>(&AudioHelm::Sequencer::UpdateBeatTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "UpdateBeatTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::SendNoteOff
// Il2CppName: SendNoteOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(::AudioHelm::Note*)>(&AudioHelm::Sequencer::SendNoteOff)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("AudioHelm", "Note")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "SendNoteOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::SendNoteOn
// Il2CppName: SendNoteOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(::AudioHelm::Note*)>(&AudioHelm::Sequencer::SendNoteOn)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("AudioHelm", "Note")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "SendNoteOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::UpdatePosition
// Il2CppName: UpdatePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sequencer::*)(bool)>(&AudioHelm::Sequencer::UpdatePosition)> {
  static const MethodInfo* get() {
    static auto* sendEvents = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), "UpdatePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sendEvents});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sequencer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AudioHelm::Sequencer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AudioHelm::Sequencer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sequencer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
