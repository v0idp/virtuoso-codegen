// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: AudioHelmClock
  class AudioHelmClock;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Completed forward declares
// Type namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: SyncAudioAndSequencers
  class SyncAudioAndSequencers;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AudioHelm::SyncAudioAndSequencers);
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::SyncAudioAndSequencers*, "AudioHelm", "SyncAudioAndSequencers");
// Type namespace: AudioHelm
namespace AudioHelm {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: AudioHelm.SyncAudioAndSequencers
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 78240C
  class SyncAudioAndSequencers : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public AudioHelm.AudioHelmClock clock
    // Size: 0x8
    // Offset: 0x18
    ::AudioHelm::AudioHelmClock* clock;
    // Field size check
    static_assert(sizeof(::AudioHelm::AudioHelmClock*) == 0x8);
    // public UnityEngine.AudioSource loop
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AudioSource* loop;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public System.Single waitTime
    // Size: 0x4
    // Offset: 0x28
    float waitTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: waitTime and: text
    char __padding2[0x4] = {};
    // public UnityEngine.UI.Text text
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Text* text;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private System.Int32 lastSecond
    // Size: 0x4
    // Offset: 0x38
    int lastSecond;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public AudioHelm.AudioHelmClock clock
    [[deprecated]] ::AudioHelm::AudioHelmClock*& dyn_clock();
    // Get instance field reference: public UnityEngine.AudioSource loop
    [[deprecated]] ::UnityEngine::AudioSource*& dyn_loop();
    // Get instance field reference: public System.Single waitTime
    [[deprecated]] float& dyn_waitTime();
    // Get instance field reference: public UnityEngine.UI.Text text
    [[deprecated]] ::UnityEngine::UI::Text*& dyn_text();
    // Get instance field reference: private System.Int32 lastSecond
    [[deprecated]] int& dyn_lastSecond();
    // private System.Void Start()
    // Offset: 0x1931658
    void Start();
    // private System.Void Update()
    // Offset: 0x19316B8
    void Update();
    // public System.Void .ctor()
    // Offset: 0x1931820
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SyncAudioAndSequencers* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AudioHelm::SyncAudioAndSequencers::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SyncAudioAndSequencers*, creationType>()));
    }
  }; // AudioHelm.SyncAudioAndSequencers
  #pragma pack(pop)
  static check_size<sizeof(SyncAudioAndSequencers), 56 + sizeof(int)> __AudioHelm_SyncAudioAndSequencersSizeCheck;
  static_assert(sizeof(SyncAudioAndSequencers) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AudioHelm::SyncAudioAndSequencers::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::SyncAudioAndSequencers::*)()>(&AudioHelm::SyncAudioAndSequencers::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::SyncAudioAndSequencers*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::SyncAudioAndSequencers::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::SyncAudioAndSequencers::*)()>(&AudioHelm::SyncAudioAndSequencers::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::SyncAudioAndSequencers*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::SyncAudioAndSequencers::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
