// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: RawImage
  class RawImage;
}
// Completed forward declares
// Type namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: MaterialOnOff
  class MaterialOnOff;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AudioHelm::MaterialOnOff);
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::MaterialOnOff*, "AudioHelm", "MaterialOnOff");
// Type namespace: AudioHelm
namespace AudioHelm {
  // Size: 0x35
  #pragma pack(push, 1)
  // Autogenerated type: AudioHelm.MaterialOnOff
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 78210C
  class MaterialOnOff : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Material offMaterial
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Material* offMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material onMaterial
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* onMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.UI.RawImage rawImage
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::RawImage* rawImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::RawImage*) == 0x8);
    // private System.Single progress
    // Size: 0x4
    // Offset: 0x30
    float progress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean on
    // Size: 0x1
    // Offset: 0x34
    bool on;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Material offMaterial
    [[deprecated]] ::UnityEngine::Material*& dyn_offMaterial();
    // Get instance field reference: public UnityEngine.Material onMaterial
    [[deprecated]] ::UnityEngine::Material*& dyn_onMaterial();
    // Get instance field reference: private UnityEngine.UI.RawImage rawImage
    [[deprecated]] ::UnityEngine::UI::RawImage*& dyn_rawImage();
    // Get instance field reference: private System.Single progress
    [[deprecated]] float& dyn_progress();
    // Get instance field reference: private System.Boolean on
    [[deprecated]] bool& dyn_on();
    // private System.Void Start()
    // Offset: 0xAC0F40
    void Start();
    // public System.Void On()
    // Offset: 0xAC0F94
    void On();
    // public System.Void Off()
    // Offset: 0xAC0FEC
    void Off();
    // private System.Void Update()
    // Offset: 0xAC0FF4
    void Update();
    // public System.Void .ctor()
    // Offset: 0xAC1124
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MaterialOnOff* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AudioHelm::MaterialOnOff::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MaterialOnOff*, creationType>()));
    }
  }; // AudioHelm.MaterialOnOff
  #pragma pack(pop)
  static check_size<sizeof(MaterialOnOff), 52 + sizeof(bool)> __AudioHelm_MaterialOnOffSizeCheck;
  static_assert(sizeof(MaterialOnOff) == 0x35);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AudioHelm::MaterialOnOff::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::MaterialOnOff::*)()>(&AudioHelm::MaterialOnOff::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::MaterialOnOff*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::MaterialOnOff::On
// Il2CppName: On
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::MaterialOnOff::*)()>(&AudioHelm::MaterialOnOff::On)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::MaterialOnOff*), "On", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::MaterialOnOff::Off
// Il2CppName: Off
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::MaterialOnOff::*)()>(&AudioHelm::MaterialOnOff::Off)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::MaterialOnOff*), "Off", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::MaterialOnOff::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::MaterialOnOff::*)()>(&AudioHelm::MaterialOnOff::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::MaterialOnOff*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::MaterialOnOff::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
