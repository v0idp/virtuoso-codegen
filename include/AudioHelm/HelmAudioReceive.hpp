// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: HelmAudioReceive
  class HelmAudioReceive;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AudioHelm::HelmAudioReceive);
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::HelmAudioReceive*, "AudioHelm", "HelmAudioReceive");
// Type namespace: AudioHelm
namespace AudioHelm {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: AudioHelm.HelmAudioReceive
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: 7825CC
  // [AddComponentMenu] Offset: 7825CC
  // [RequireComponent] Offset: 7825CC
  class HelmAudioReceive : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Int32 channel
    // Size: 0x4
    // Offset: 0x18
    int channel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Int32 channel
    [[deprecated]] int& dyn_channel();
    // private System.Void OnAudioFilterRead(System.Single[] data, System.Int32 audioChannels)
    // Offset: 0x193BB70
    void OnAudioFilterRead(::ArrayW<float> data, int audioChannels);
    // public System.Void .ctor()
    // Offset: 0x193BB98
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HelmAudioReceive* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AudioHelm::HelmAudioReceive::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HelmAudioReceive*, creationType>()));
    }
  }; // AudioHelm.HelmAudioReceive
  #pragma pack(pop)
  static check_size<sizeof(HelmAudioReceive), 24 + sizeof(int)> __AudioHelm_HelmAudioReceiveSizeCheck;
  static_assert(sizeof(HelmAudioReceive) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AudioHelm::HelmAudioReceive::OnAudioFilterRead
// Il2CppName: OnAudioFilterRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmAudioReceive::*)(::ArrayW<float>, int)>(&AudioHelm::HelmAudioReceive::OnAudioFilterRead)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* audioChannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmAudioReceive*), "OnAudioFilterRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, audioChannels});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmAudioReceive::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
