// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: Sequencer
  class Sequencer;
}
// Completed forward declares
// Type namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: Note
  class Note;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AudioHelm::Note);
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::Note*, "AudioHelm", "Note");
// Type namespace: AudioHelm
namespace AudioHelm {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: AudioHelm.Note
  // [TokenAttribute] Offset: FFFFFFFF
  class Note : public ::Il2CppObject/*, public ::UnityEngine::ISerializationCallbackReceiver*/ {
    public:
    // Nested type: ::AudioHelm::Note::NoteAction
    class NoteAction;
    public:
    // private AudioHelm.Note/AudioHelm.NoteAction OnNoteOn
    // Size: 0x8
    // Offset: 0x10
    ::AudioHelm::Note::NoteAction* OnNoteOn;
    // Field size check
    static_assert(sizeof(::AudioHelm::Note::NoteAction*) == 0x8);
    // private AudioHelm.Note/AudioHelm.NoteAction OnNoteOff
    // Size: 0x8
    // Offset: 0x18
    ::AudioHelm::Note::NoteAction* OnNoteOff;
    // Field size check
    static_assert(sizeof(::AudioHelm::Note::NoteAction*) == 0x8);
    // private System.Int32 note_
    // Size: 0x4
    // Offset: 0x20
    int note;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single start_
    // Size: 0x4
    // Offset: 0x24
    float start;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single end_
    // Size: 0x4
    // Offset: 0x28
    float end;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single velocity_
    // Size: 0x4
    // Offset: 0x2C
    float velocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public AudioHelm.Sequencer parent
    // Size: 0x8
    // Offset: 0x30
    ::AudioHelm::Sequencer* parent;
    // Field size check
    static_assert(sizeof(::AudioHelm::Sequencer*) == 0x8);
    // private System.IntPtr reference
    // Size: 0x8
    // Offset: 0x38
    ::System::IntPtr reference;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::ISerializationCallbackReceiver
    operator ::UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Get instance field reference: private AudioHelm.Note/AudioHelm.NoteAction OnNoteOn
    [[deprecated]] ::AudioHelm::Note::NoteAction*& dyn_OnNoteOn();
    // Get instance field reference: private AudioHelm.Note/AudioHelm.NoteAction OnNoteOff
    [[deprecated]] ::AudioHelm::Note::NoteAction*& dyn_OnNoteOff();
    // Get instance field reference: private System.Int32 note_
    [[deprecated]] int& dyn_note_();
    // Get instance field reference: private System.Single start_
    [[deprecated]] float& dyn_start_();
    // Get instance field reference: private System.Single end_
    [[deprecated]] float& dyn_end_();
    // Get instance field reference: private System.Single velocity_
    [[deprecated]] float& dyn_velocity_();
    // Get instance field reference: public AudioHelm.Sequencer parent
    [[deprecated]] ::AudioHelm::Sequencer*& dyn_parent();
    // Get instance field reference: private System.IntPtr reference
    [[deprecated]] ::System::IntPtr& dyn_reference();
    // public System.Int32 get_note()
    // Offset: 0xAD47C4
    int get_note();
    // public System.Void set_note(System.Int32 value)
    // Offset: 0xAD47CC
    void set_note(int value);
    // public System.Single get_start()
    // Offset: 0xAD48F4
    float get_start();
    // public System.Void set_start(System.Single value)
    // Offset: 0xAD48FC
    void set_start(float value);
    // public System.Single get_end()
    // Offset: 0xAD49EC
    float get_end();
    // public System.Void set_end(System.Single value)
    // Offset: 0xAD49F4
    void set_end(float value);
    // public System.Single get_velocity()
    // Offset: 0xAD4AE4
    float get_velocity();
    // public System.Void set_velocity(System.Single value)
    // Offset: 0xAD4AEC
    void set_velocity(float value);
    // public System.Void add_OnNoteOn(AudioHelm.Note/AudioHelm.NoteAction value)
    // Offset: 0xAD4544
    void add_OnNoteOn(::AudioHelm::Note::NoteAction* value);
    // public System.Void remove_OnNoteOn(AudioHelm.Note/AudioHelm.NoteAction value)
    // Offset: 0xAD45E4
    void remove_OnNoteOn(::AudioHelm::Note::NoteAction* value);
    // public System.Void add_OnNoteOff(AudioHelm.Note/AudioHelm.NoteAction value)
    // Offset: 0xAD4684
    void add_OnNoteOff(::AudioHelm::Note::NoteAction* value);
    // public System.Void remove_OnNoteOff(AudioHelm.Note/AudioHelm.NoteAction value)
    // Offset: 0xAD4724
    void remove_OnNoteOff(::AudioHelm::Note::NoteAction* value);
    // public System.Void OnAfterDeserialize()
    // Offset: 0xAD4B40
    void OnAfterDeserialize();
    // public System.Void OnBeforeSerialize()
    // Offset: 0xAD4BB4
    void OnBeforeSerialize();
    // private System.Void CopySettingsToNative()
    // Offset: 0xAD4BB8
    void CopySettingsToNative();
    // private System.Boolean HasNativeNote()
    // Offset: 0xAD4C20
    bool HasNativeNote();
    // private System.Boolean HasNativeSequencer()
    // Offset: 0xAD4C68
    bool HasNativeSequencer();
    // private System.Boolean FullyNative()
    // Offset: 0xAD48BC
    bool FullyNative();
    // public System.Void TriggerNoteOnEvent()
    // Offset: 0xAD4D1C
    void TriggerNoteOnEvent();
    // public System.Void TriggerNoteOffEvent()
    // Offset: 0xAD4D34
    void TriggerNoteOffEvent();
    // public System.Void TryCreate()
    // Offset: 0xAD4B44
    void TryCreate();
    // public System.Void TryDelete()
    // Offset: 0xAD4D4C
    void TryDelete();
    // public System.Boolean OverlapsRange(System.Single rangeStart, System.Single rangeEnd)
    // Offset: 0xAD4DC8
    bool OverlapsRange(float rangeStart, float rangeEnd);
    // public System.Boolean InsideRange(System.Single rangeStart, System.Single rangeEnd)
    // Offset: 0xAD4E54
    bool InsideRange(float rangeStart, float rangeEnd);
    // public System.Void RemoveRange(System.Single rangeStart, System.Single rangeEnd)
    // Offset: 0xAD4E78
    void RemoveRange(float rangeStart, float rangeEnd);
    // public System.Void .ctor()
    // Offset: 0xAD4EE4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Note* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AudioHelm::Note::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Note*, creationType>()));
    }
  }; // AudioHelm.Note
  #pragma pack(pop)
  static check_size<sizeof(Note), 56 + sizeof(::System::IntPtr)> __AudioHelm_NoteSizeCheck;
  static_assert(sizeof(Note) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AudioHelm::Note::get_note
// Il2CppName: get_note
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AudioHelm::Note::*)()>(&AudioHelm::Note::get_note)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "get_note", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::set_note
// Il2CppName: set_note
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Note::*)(int)>(&AudioHelm::Note::set_note)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "set_note", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::get_start
// Il2CppName: get_start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioHelm::Note::*)()>(&AudioHelm::Note::get_start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "get_start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::set_start
// Il2CppName: set_start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Note::*)(float)>(&AudioHelm::Note::set_start)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "set_start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::get_end
// Il2CppName: get_end
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioHelm::Note::*)()>(&AudioHelm::Note::get_end)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "get_end", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::set_end
// Il2CppName: set_end
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Note::*)(float)>(&AudioHelm::Note::set_end)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "set_end", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::get_velocity
// Il2CppName: get_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioHelm::Note::*)()>(&AudioHelm::Note::get_velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "get_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::set_velocity
// Il2CppName: set_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Note::*)(float)>(&AudioHelm::Note::set_velocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "set_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::add_OnNoteOn
// Il2CppName: add_OnNoteOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Note::*)(::AudioHelm::Note::NoteAction*)>(&AudioHelm::Note::add_OnNoteOn)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("AudioHelm", "Note/NoteAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "add_OnNoteOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::remove_OnNoteOn
// Il2CppName: remove_OnNoteOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Note::*)(::AudioHelm::Note::NoteAction*)>(&AudioHelm::Note::remove_OnNoteOn)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("AudioHelm", "Note/NoteAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "remove_OnNoteOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::add_OnNoteOff
// Il2CppName: add_OnNoteOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Note::*)(::AudioHelm::Note::NoteAction*)>(&AudioHelm::Note::add_OnNoteOff)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("AudioHelm", "Note/NoteAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "add_OnNoteOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::remove_OnNoteOff
// Il2CppName: remove_OnNoteOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Note::*)(::AudioHelm::Note::NoteAction*)>(&AudioHelm::Note::remove_OnNoteOff)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("AudioHelm", "Note/NoteAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "remove_OnNoteOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::OnAfterDeserialize
// Il2CppName: OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Note::*)()>(&AudioHelm::Note::OnAfterDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::OnBeforeSerialize
// Il2CppName: OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Note::*)()>(&AudioHelm::Note::OnBeforeSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::CopySettingsToNative
// Il2CppName: CopySettingsToNative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Note::*)()>(&AudioHelm::Note::CopySettingsToNative)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "CopySettingsToNative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::HasNativeNote
// Il2CppName: HasNativeNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioHelm::Note::*)()>(&AudioHelm::Note::HasNativeNote)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "HasNativeNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::HasNativeSequencer
// Il2CppName: HasNativeSequencer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioHelm::Note::*)()>(&AudioHelm::Note::HasNativeSequencer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "HasNativeSequencer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::FullyNative
// Il2CppName: FullyNative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioHelm::Note::*)()>(&AudioHelm::Note::FullyNative)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "FullyNative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::TriggerNoteOnEvent
// Il2CppName: TriggerNoteOnEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Note::*)()>(&AudioHelm::Note::TriggerNoteOnEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "TriggerNoteOnEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::TriggerNoteOffEvent
// Il2CppName: TriggerNoteOffEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Note::*)()>(&AudioHelm::Note::TriggerNoteOffEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "TriggerNoteOffEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::TryCreate
// Il2CppName: TryCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Note::*)()>(&AudioHelm::Note::TryCreate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "TryCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::TryDelete
// Il2CppName: TryDelete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Note::*)()>(&AudioHelm::Note::TryDelete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "TryDelete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::OverlapsRange
// Il2CppName: OverlapsRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioHelm::Note::*)(float, float)>(&AudioHelm::Note::OverlapsRange)> {
  static const MethodInfo* get() {
    static auto* rangeStart = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* rangeEnd = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "OverlapsRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rangeStart, rangeEnd});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::InsideRange
// Il2CppName: InsideRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioHelm::Note::*)(float, float)>(&AudioHelm::Note::InsideRange)> {
  static const MethodInfo* get() {
    static auto* rangeStart = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* rangeEnd = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "InsideRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rangeStart, rangeEnd});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::RemoveRange
// Il2CppName: RemoveRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Note::*)(float, float)>(&AudioHelm::Note::RemoveRange)> {
  static const MethodInfo* get() {
    static auto* rangeStart = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* rangeEnd = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Note*), "RemoveRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rangeStart, rangeEnd});
  }
};
// Writing MetadataGetter for method: AudioHelm::Note::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
