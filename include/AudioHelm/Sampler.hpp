// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: AudioHelm.NoteHandler
#include "AudioHelm/NoteHandler.hpp"
// Including type: System.Double
#include "System/Double.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Forward declaring namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: Keyzone
  class Keyzone;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: Sampler
  class Sampler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AudioHelm::Sampler);
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::Sampler*, "AudioHelm", "Sampler");
// Type namespace: AudioHelm
namespace AudioHelm {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: AudioHelm.Sampler
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: 66C8C0
  // [AddComponentMenu] Offset: 66C8C0
  // [RequireComponent] Offset: 66C8C0
  class Sampler : public ::UnityEngine::MonoBehaviour/*, public ::AudioHelm::NoteHandler*/ {
    public:
    // Nested type: ::AudioHelm::Sampler::KeyzonePlayMode
    struct KeyzonePlayMode;
    // Nested type: ::AudioHelm::Sampler::ActiveNote
    class ActiveNote;
    // Nested type: ::AudioHelm::Sampler::$TurnVoiceOffInSeconds$d__27
    class $TurnVoiceOffInSeconds$d__27;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: AudioHelm.Sampler/AudioHelm.KeyzonePlayMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct KeyzonePlayMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: KeyzonePlayMode
      constexpr KeyzonePlayMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public AudioHelm.Sampler/AudioHelm.KeyzonePlayMode kAll
      static constexpr const int kAll = 0;
      // Get static field: static public AudioHelm.Sampler/AudioHelm.KeyzonePlayMode kAll
      static ::AudioHelm::Sampler::KeyzonePlayMode _get_kAll();
      // Set static field: static public AudioHelm.Sampler/AudioHelm.KeyzonePlayMode kAll
      static void _set_kAll(::AudioHelm::Sampler::KeyzonePlayMode value);
      // static field const value: static public AudioHelm.Sampler/AudioHelm.KeyzonePlayMode kRoundRobin
      static constexpr const int kRoundRobin = 1;
      // Get static field: static public AudioHelm.Sampler/AudioHelm.KeyzonePlayMode kRoundRobin
      static ::AudioHelm::Sampler::KeyzonePlayMode _get_kRoundRobin();
      // Set static field: static public AudioHelm.Sampler/AudioHelm.KeyzonePlayMode kRoundRobin
      static void _set_kRoundRobin(::AudioHelm::Sampler::KeyzonePlayMode value);
      // static field const value: static public AudioHelm.Sampler/AudioHelm.KeyzonePlayMode kRandom
      static constexpr const int kRandom = 2;
      // Get static field: static public AudioHelm.Sampler/AudioHelm.KeyzonePlayMode kRandom
      static ::AudioHelm::Sampler::KeyzonePlayMode _get_kRandom();
      // Set static field: static public AudioHelm.Sampler/AudioHelm.KeyzonePlayMode kRandom
      static void _set_kRandom(::AudioHelm::Sampler::KeyzonePlayMode value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // AudioHelm.Sampler/AudioHelm.KeyzonePlayMode
    #pragma pack(pop)
    static check_size<sizeof(Sampler::KeyzonePlayMode), 0 + sizeof(int)> __AudioHelm_Sampler_KeyzonePlayModeSizeCheck;
    static_assert(sizeof(Sampler::KeyzonePlayMode) == 0x4);
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public System.Collections.Generic.List`1<AudioHelm.Keyzone> keyzones
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::AudioHelm::Keyzone*>* keyzones;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::AudioHelm::Keyzone*>*) == 0x8);
    // public AudioHelm.Sampler/AudioHelm.KeyzonePlayMode keyzonePlayMode
    // Size: 0x4
    // Offset: 0x20
    ::AudioHelm::Sampler::KeyzonePlayMode keyzonePlayMode;
    // Field size check
    static_assert(sizeof(::AudioHelm::Sampler::KeyzonePlayMode) == 0x4);
    // [TooltipAttribute] Offset: 0x67ACC4
    // public System.Single velocityTracking
    // Size: 0x4
    // Offset: 0x24
    float velocityTracking;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x67ACFC
    // public System.Int32 numVoices
    // Size: 0x4
    // Offset: 0x28
    int numVoices;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0x67AD34
    // private System.Boolean useNoteOff_
    // Size: 0x1
    // Offset: 0x2C
    bool useNoteOff;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useNoteOff and: audioIndex
    char __padding4[0x3] = {};
    // private System.Int32 audioIndex
    // Size: 0x4
    // Offset: 0x30
    int audioIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: audioIndex and: activeNotes
    char __padding5[0x4] = {};
    // private readonly System.Collections.Generic.List`1<AudioHelm.Sampler/AudioHelm.ActiveNote> activeNotes
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::AudioHelm::Sampler::ActiveNote*>* activeNotes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::AudioHelm::Sampler::ActiveNote*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::AudioHelm::NoteHandler
    operator ::AudioHelm::NoteHandler() noexcept {
      return *reinterpret_cast<::AudioHelm::NoteHandler*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Double endEarlyTime
    static constexpr const double endEarlyTime = 0.01;
    // Get static field: static private System.Double endEarlyTime
    static double _get_endEarlyTime();
    // Set static field: static private System.Double endEarlyTime
    static void _set_endEarlyTime(double value);
    // Get instance field reference: public System.Collections.Generic.List`1<AudioHelm.Keyzone> keyzones
    ::System::Collections::Generic::List_1<::AudioHelm::Keyzone*>*& dyn_keyzones();
    // Get instance field reference: public AudioHelm.Sampler/AudioHelm.KeyzonePlayMode keyzonePlayMode
    ::AudioHelm::Sampler::KeyzonePlayMode& dyn_keyzonePlayMode();
    // Get instance field reference: public System.Single velocityTracking
    float& dyn_velocityTracking();
    // Get instance field reference: public System.Int32 numVoices
    int& dyn_numVoices();
    // Get instance field reference: private System.Boolean useNoteOff_
    bool& dyn_useNoteOff_();
    // Get instance field reference: private System.Int32 audioIndex
    int& dyn_audioIndex();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<AudioHelm.Sampler/AudioHelm.ActiveNote> activeNotes
    ::System::Collections::Generic::List_1<::AudioHelm::Sampler::ActiveNote*>*& dyn_activeNotes();
    // public System.Boolean get_useNoteOff()
    // Offset: 0xB0B608
    bool get_useNoteOff();
    // public System.Void set_useNoteOff(System.Boolean value)
    // Offset: 0xB0B610
    void set_useNoteOff(bool value);
    // private System.Void Awake()
    // Offset: 0xB0B624
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0xB0B760
    void OnDestroy();
    // private System.Void OnDisable()
    // Offset: 0xB0B764
    void OnDisable();
    // public AudioHelm.Keyzone AddKeyzone()
    // Offset: 0xB0B768
    ::AudioHelm::Keyzone* AddKeyzone();
    // public System.Int32 RemoveKeyzone(AudioHelm.Keyzone keyzone)
    // Offset: 0xB0B7F0
    int RemoveKeyzone(::AudioHelm::Keyzone* keyzone);
    // private UnityEngine.AudioSource GetNextAudioSource(System.Collections.Generic.List`1<UnityEngine.AudioSource> ignore)
    // Offset: 0xB0B88C
    ::UnityEngine::AudioSource* GetNextAudioSource(::System::Collections::Generic::List_1<::UnityEngine::AudioSource*>* ignore);
    // private System.Void PrepNote(UnityEngine.AudioSource audioSource, System.Int32 note, System.Single velocity)
    // Offset: 0xB0B9A4
    void PrepNote(::UnityEngine::AudioSource* audioSource, int note, float velocity);
    // private System.Void PrepNote(UnityEngine.AudioSource audioSource, AudioHelm.Keyzone keyzone, System.Int32 note, System.Single velocity)
    // Offset: 0xB0BA5C
    void PrepNote(::UnityEngine::AudioSource* audioSource, ::AudioHelm::Keyzone* keyzone, int note, float velocity);
    // private System.Collections.Generic.List`1<AudioHelm.Keyzone> GetValidKeyzones(System.Int32 note, System.Single velocity)
    // Offset: 0xB0BB54
    ::System::Collections::Generic::List_1<::AudioHelm::Keyzone*>* GetValidKeyzones(int note, float velocity);
    // private System.Collections.Generic.List`1<AudioHelm.Keyzone> GetKeyzonesToPlay(System.Collections.Generic.List`1<AudioHelm.Keyzone> validKeyzones)
    // Offset: 0xB0BD10
    ::System::Collections::Generic::List_1<::AudioHelm::Keyzone*>* GetKeyzonesToPlay(::System::Collections::Generic::List_1<::AudioHelm::Keyzone*>* validKeyzones);
    // private System.Collections.Generic.List`1<UnityEngine.AudioSource> GetPreppedAudioSources(System.Int32 note, System.Single velocity)
    // Offset: 0xB0BF5C
    ::System::Collections::Generic::List_1<::UnityEngine::AudioSource*>* GetPreppedAudioSources(int note, float velocity);
    // public System.Int32 GetMinKey()
    // Offset: 0xB0C140
    int GetMinKey();
    // public System.Int32 GetMaxKey()
    // Offset: 0xB0C288
    int GetMaxKey();
    // public System.Void AllNotesOff()
    // Offset: 0xB0AB38
    void AllNotesOff();
    // private System.Collections.IEnumerator TurnVoiceOffInSeconds(System.Int32 note, System.Single seconds)
    // Offset: 0xB0C3D0
    ::System::Collections::IEnumerator* TurnVoiceOffInSeconds(int note, float seconds);
    // public System.Void NoteOn(System.Int32 note, System.Single velocity)
    // Offset: 0xB0AC7C
    void NoteOn(int note, float velocity);
    // public System.Void NoteOnScheduled(System.Int32 note, System.Single velocity, System.Double timeToStart, System.Double timeToEnd)
    // Offset: 0xB0B2A4
    void NoteOnScheduled(int note, float velocity, double timeToStart, double timeToEnd);
    // private AudioHelm.Sampler/AudioHelm.ActiveNote FindActiveNote(System.Int32 note)
    // Offset: 0xB0C45C
    ::AudioHelm::Sampler::ActiveNote* FindActiveNote(int note);
    // public System.Void NoteOff(System.Int32 note)
    // Offset: 0xB0AF68
    void NoteOff(int note);
    // private System.Void DoNoteOff(System.Int32 note)
    // Offset: 0xB0C5A0
    void DoNoteOff(int note);
    // public System.Void .ctor()
    // Offset: 0xB0C718
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Sampler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AudioHelm::Sampler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Sampler*, creationType>()));
    }
  }; // AudioHelm.Sampler
  #pragma pack(pop)
  static check_size<sizeof(Sampler), 56 + sizeof(::System::Collections::Generic::List_1<::AudioHelm::Sampler::ActiveNote*>*)> __AudioHelm_SamplerSizeCheck;
  static_assert(sizeof(Sampler) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::Sampler::KeyzonePlayMode, "AudioHelm", "Sampler/KeyzonePlayMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AudioHelm::Sampler::get_useNoteOff
// Il2CppName: get_useNoteOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioHelm::Sampler::*)()>(&AudioHelm::Sampler::get_useNoteOff)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "get_useNoteOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::set_useNoteOff
// Il2CppName: set_useNoteOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sampler::*)(bool)>(&AudioHelm::Sampler::set_useNoteOff)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "set_useNoteOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sampler::*)()>(&AudioHelm::Sampler::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sampler::*)()>(&AudioHelm::Sampler::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sampler::*)()>(&AudioHelm::Sampler::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::AddKeyzone
// Il2CppName: AddKeyzone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AudioHelm::Keyzone* (AudioHelm::Sampler::*)()>(&AudioHelm::Sampler::AddKeyzone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "AddKeyzone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::RemoveKeyzone
// Il2CppName: RemoveKeyzone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AudioHelm::Sampler::*)(::AudioHelm::Keyzone*)>(&AudioHelm::Sampler::RemoveKeyzone)> {
  static const MethodInfo* get() {
    static auto* keyzone = &::il2cpp_utils::GetClassFromName("AudioHelm", "Keyzone")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "RemoveKeyzone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyzone});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::GetNextAudioSource
// Il2CppName: GetNextAudioSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioSource* (AudioHelm::Sampler::*)(::System::Collections::Generic::List_1<::UnityEngine::AudioSource*>*)>(&AudioHelm::Sampler::GetNextAudioSource)> {
  static const MethodInfo* get() {
    static auto* ignore = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "AudioSource")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "GetNextAudioSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ignore});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::PrepNote
// Il2CppName: PrepNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sampler::*)(::UnityEngine::AudioSource*, int, float)>(&AudioHelm::Sampler::PrepNote)> {
  static const MethodInfo* get() {
    static auto* audioSource = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioSource")->byval_arg;
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "PrepNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioSource, note, velocity});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::PrepNote
// Il2CppName: PrepNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sampler::*)(::UnityEngine::AudioSource*, ::AudioHelm::Keyzone*, int, float)>(&AudioHelm::Sampler::PrepNote)> {
  static const MethodInfo* get() {
    static auto* audioSource = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioSource")->byval_arg;
    static auto* keyzone = &::il2cpp_utils::GetClassFromName("AudioHelm", "Keyzone")->byval_arg;
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "PrepNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioSource, keyzone, note, velocity});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::GetValidKeyzones
// Il2CppName: GetValidKeyzones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::AudioHelm::Keyzone*>* (AudioHelm::Sampler::*)(int, float)>(&AudioHelm::Sampler::GetValidKeyzones)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "GetValidKeyzones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, velocity});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::GetKeyzonesToPlay
// Il2CppName: GetKeyzonesToPlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::AudioHelm::Keyzone*>* (AudioHelm::Sampler::*)(::System::Collections::Generic::List_1<::AudioHelm::Keyzone*>*)>(&AudioHelm::Sampler::GetKeyzonesToPlay)> {
  static const MethodInfo* get() {
    static auto* validKeyzones = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("AudioHelm", "Keyzone")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "GetKeyzonesToPlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{validKeyzones});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::GetPreppedAudioSources
// Il2CppName: GetPreppedAudioSources
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::AudioSource*>* (AudioHelm::Sampler::*)(int, float)>(&AudioHelm::Sampler::GetPreppedAudioSources)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "GetPreppedAudioSources", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, velocity});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::GetMinKey
// Il2CppName: GetMinKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AudioHelm::Sampler::*)()>(&AudioHelm::Sampler::GetMinKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "GetMinKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::GetMaxKey
// Il2CppName: GetMaxKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AudioHelm::Sampler::*)()>(&AudioHelm::Sampler::GetMaxKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "GetMaxKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::AllNotesOff
// Il2CppName: AllNotesOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sampler::*)()>(&AudioHelm::Sampler::AllNotesOff)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "AllNotesOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::TurnVoiceOffInSeconds
// Il2CppName: TurnVoiceOffInSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (AudioHelm::Sampler::*)(int, float)>(&AudioHelm::Sampler::TurnVoiceOffInSeconds)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "TurnVoiceOffInSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, seconds});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::NoteOn
// Il2CppName: NoteOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sampler::*)(int, float)>(&AudioHelm::Sampler::NoteOn)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "NoteOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, velocity});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::NoteOnScheduled
// Il2CppName: NoteOnScheduled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sampler::*)(int, float, double, double)>(&AudioHelm::Sampler::NoteOnScheduled)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* timeToStart = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* timeToEnd = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "NoteOnScheduled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, velocity, timeToStart, timeToEnd});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::FindActiveNote
// Il2CppName: FindActiveNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AudioHelm::Sampler::ActiveNote* (AudioHelm::Sampler::*)(int)>(&AudioHelm::Sampler::FindActiveNote)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "FindActiveNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::NoteOff
// Il2CppName: NoteOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sampler::*)(int)>(&AudioHelm::Sampler::NoteOff)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "NoteOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::DoNoteOff
// Il2CppName: DoNoteOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::Sampler::*)(int)>(&AudioHelm::Sampler::DoNoteOff)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::Sampler*), "DoNoteOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note});
  }
};
// Writing MetadataGetter for method: AudioHelm::Sampler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
