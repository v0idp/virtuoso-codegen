// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: AudioHelm.Sampler
#include "AudioHelm/Sampler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AudioHelm::Sampler::ActiveNote);
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::Sampler::ActiveNote*, "AudioHelm", "Sampler/ActiveNote");
// Type namespace: AudioHelm
namespace AudioHelm {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: AudioHelm.Sampler/AudioHelm.ActiveNote
  // [TokenAttribute] Offset: FFFFFFFF
  class Sampler::ActiveNote : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 note
    // Size: 0x4
    // Offset: 0x10
    int note;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: note and: audioSources
    char __padding0[0x4] = {};
    // public System.Collections.Generic.List`1<UnityEngine.AudioSource> audioSources
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::AudioSource*>* audioSources;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::AudioSource*>*) == 0x8);
    // public System.Double startTime
    // Size: 0x8
    // Offset: 0x20
    double startTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Get instance field reference: public System.Int32 note
    [[deprecated]] int& dyn_note();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.AudioSource> audioSources
    [[deprecated]] ::System::Collections::Generic::List_1<::UnityEngine::AudioSource*>*& dyn_audioSources();
    // Get instance field reference: public System.Double startTime
    [[deprecated]] double& dyn_startTime();
    // public System.Void .ctor(System.Int32 n, System.Collections.Generic.List`1<UnityEngine.AudioSource> sources, System.Double start)
    // Offset: 0x8D0684
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Sampler::ActiveNote* New_ctor(int n, ::System::Collections::Generic::List_1<::UnityEngine::AudioSource*>* sources, double start) {
      static auto ___internal__logger = ::Logger::get().WithContext("::AudioHelm::Sampler::ActiveNote::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Sampler::ActiveNote*, creationType>(n, sources, start)));
    }
  }; // AudioHelm.Sampler/AudioHelm.ActiveNote
  #pragma pack(pop)
  static check_size<sizeof(Sampler::ActiveNote), 32 + sizeof(double)> __AudioHelm_Sampler_ActiveNoteSizeCheck;
  static_assert(sizeof(Sampler::ActiveNote) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AudioHelm::Sampler::ActiveNote::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
