// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: AudioHelm.Param
#include "AudioHelm/Param.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: HelmController
  class HelmController;
}
// Completed forward declares
// Type namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: ToggleParameter
  class ToggleParameter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AudioHelm::ToggleParameter);
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::ToggleParameter*, "AudioHelm", "ToggleParameter");
// Type namespace: AudioHelm
namespace AudioHelm {
  // Size: 0x2D
  #pragma pack(push, 1)
  // Autogenerated type: AudioHelm.ToggleParameter
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 782444
  class ToggleParameter : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public AudioHelm.HelmController controller
    // Size: 0x8
    // Offset: 0x18
    ::AudioHelm::HelmController* controller;
    // Field size check
    static_assert(sizeof(::AudioHelm::HelmController*) == 0x8);
    // public AudioHelm.Param param
    // Size: 0x4
    // Offset: 0x20
    ::AudioHelm::Param param;
    // Field size check
    static_assert(sizeof(::AudioHelm::Param) == 0x4);
    // public System.Single onValue
    // Size: 0x4
    // Offset: 0x24
    float onValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single offValue
    // Size: 0x4
    // Offset: 0x28
    float offValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean isOn
    // Size: 0x1
    // Offset: 0x2C
    bool isOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public AudioHelm.HelmController controller
    [[deprecated("Use field access instead!")]] ::AudioHelm::HelmController*& dyn_controller();
    // Get instance field reference: public AudioHelm.Param param
    [[deprecated("Use field access instead!")]] ::AudioHelm::Param& dyn_param();
    // Get instance field reference: public System.Single onValue
    [[deprecated("Use field access instead!")]] float& dyn_onValue();
    // Get instance field reference: public System.Single offValue
    [[deprecated("Use field access instead!")]] float& dyn_offValue();
    // Get instance field reference: private System.Boolean isOn
    [[deprecated("Use field access instead!")]] bool& dyn_isOn();
    // public System.Void .ctor()
    // Offset: 0xA281F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ToggleParameter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AudioHelm::ToggleParameter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ToggleParameter*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0xA28188
    void Start();
    // public System.Void Toggle()
    // Offset: 0xA281B0
    void Toggle();
  }; // AudioHelm.ToggleParameter
  #pragma pack(pop)
  static check_size<sizeof(ToggleParameter), 44 + sizeof(bool)> __AudioHelm_ToggleParameterSizeCheck;
  static_assert(sizeof(ToggleParameter) == 0x2D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AudioHelm::ToggleParameter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AudioHelm::ToggleParameter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::ToggleParameter::*)()>(&AudioHelm::ToggleParameter::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::ToggleParameter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::ToggleParameter::Toggle
// Il2CppName: Toggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::ToggleParameter::*)()>(&AudioHelm::ToggleParameter::Toggle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::ToggleParameter*), "Toggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
