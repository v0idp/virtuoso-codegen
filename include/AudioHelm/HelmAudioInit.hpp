// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Audio
namespace UnityEngine::Audio {
  // Forward declaring type: AudioMixerGroup
  class AudioMixerGroup;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Forward declaring namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: HelmAudioReceive
  class HelmAudioReceive;
}
// Completed forward declares
// Type namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: HelmAudioInit
  class HelmAudioInit;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AudioHelm::HelmAudioInit);
DEFINE_IL2CPP_ARG_TYPE(::AudioHelm::HelmAudioInit*, "AudioHelm", "HelmAudioInit");
// Type namespace: AudioHelm
namespace AudioHelm {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: AudioHelm.HelmAudioInit
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: 782514
  // [AddComponentMenu] Offset: 782514
  // [RequireComponent] Offset: 782514
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class HelmAudioInit : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Boolean warnedNoAudioGroup
    // Size: 0x1
    // Offset: 0x18
    bool warnedNoAudioGroup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: warnedNoAudioGroup and: synthesizerMixerGroup
    char __padding0[0x7] = {};
    // [TooltipAttribute] Offset: 0x7912B8
    // public UnityEngine.Audio.AudioMixerGroup synthesizerMixerGroup
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Audio::AudioMixerGroup* synthesizerMixerGroup;
    // Field size check
    static_assert(sizeof(::UnityEngine::Audio::AudioMixerGroup*) == 0x8);
    // [TooltipAttribute] Offset: 0x7912F0
    // public UnityEngine.Audio.AudioMixerGroup spatializerMixerGroup
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Audio::AudioMixerGroup* spatializerMixerGroup;
    // Field size check
    static_assert(sizeof(::UnityEngine::Audio::AudioMixerGroup*) == 0x8);
    // private UnityEngine.AudioSource sendAudioSource
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::AudioSource* sendAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Boolean wasSpatialized
    // Size: 0x1
    // Offset: 0x38
    bool wasSpatialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: wasSpatialized and: receiveAudio
    char __padding4[0x7] = {};
    // private AudioHelm.HelmAudioReceive receiveAudio
    // Size: 0x8
    // Offset: 0x40
    ::AudioHelm::HelmAudioReceive* receiveAudio;
    // Field size check
    static_assert(sizeof(::AudioHelm::HelmAudioReceive*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Boolean warnedNoAudioGroup
    [[deprecated("Use field access instead!")]] bool& dyn_warnedNoAudioGroup();
    // Get instance field reference: public UnityEngine.Audio.AudioMixerGroup synthesizerMixerGroup
    [[deprecated("Use field access instead!")]] ::UnityEngine::Audio::AudioMixerGroup*& dyn_synthesizerMixerGroup();
    // Get instance field reference: public UnityEngine.Audio.AudioMixerGroup spatializerMixerGroup
    [[deprecated("Use field access instead!")]] ::UnityEngine::Audio::AudioMixerGroup*& dyn_spatializerMixerGroup();
    // Get instance field reference: private UnityEngine.AudioSource sendAudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_sendAudioSource();
    // Get instance field reference: private System.Boolean wasSpatialized
    [[deprecated("Use field access instead!")]] bool& dyn_wasSpatialized();
    // Get instance field reference: private AudioHelm.HelmAudioReceive receiveAudio
    [[deprecated("Use field access instead!")]] ::AudioHelm::HelmAudioReceive*& dyn_receiveAudio();
    // public System.Void .ctor()
    // Offset: 0x19AD17C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HelmAudioInit* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AudioHelm::HelmAudioInit::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HelmAudioInit*, creationType>()));
    }
    // private System.Int32 GetChannel()
    // Offset: 0x19ACA74
    int GetChannel();
    // private System.Void SetupSpatialization(UnityEngine.AudioSource audioComponent)
    // Offset: 0x19ACB80
    void SetupSpatialization(::UnityEngine::AudioSource* audioComponent);
    // private System.Void Awake()
    // Offset: 0x19ACE3C
    void Awake();
    // private System.Void Update()
    // Offset: 0x19ACF24
    void Update();
  }; // AudioHelm.HelmAudioInit
  #pragma pack(pop)
  static check_size<sizeof(HelmAudioInit), 64 + sizeof(::AudioHelm::HelmAudioReceive*)> __AudioHelm_HelmAudioInitSizeCheck;
  static_assert(sizeof(HelmAudioInit) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AudioHelm::HelmAudioInit::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AudioHelm::HelmAudioInit::GetChannel
// Il2CppName: GetChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AudioHelm::HelmAudioInit::*)()>(&AudioHelm::HelmAudioInit::GetChannel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmAudioInit*), "GetChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmAudioInit::SetupSpatialization
// Il2CppName: SetupSpatialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmAudioInit::*)(::UnityEngine::AudioSource*)>(&AudioHelm::HelmAudioInit::SetupSpatialization)> {
  static const MethodInfo* get() {
    static auto* audioComponent = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmAudioInit*), "SetupSpatialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioComponent});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmAudioInit::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmAudioInit::*)()>(&AudioHelm::HelmAudioInit::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmAudioInit*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioHelm::HelmAudioInit::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioHelm::HelmAudioInit::*)()>(&AudioHelm::HelmAudioInit::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelm::HelmAudioInit*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
