// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: BoxCollider
  class BoxCollider;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Key
  class Key;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ShiftKeyBehaviour
  class ShiftKeyBehaviour;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ShiftKeyBehaviour);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ShiftKeyBehaviour*, "", "ShiftKeyBehaviour");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: ShiftKeyBehaviour
  // [TokenAttribute] Offset: FFFFFFFF
  class ShiftKeyBehaviour : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject Housing
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* Housing;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Renderer keyRenderer
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Renderer* keyRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.BoxCollider keyCollider
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::BoxCollider* keyCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::BoxCollider*) == 0x8);
    // private UnityEngine.GameObject keyCap
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* keyCap;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private Key shiftKeyController
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::Key* shiftKeyController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Key*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject Housing
    [[deprecated]] ::UnityEngine::GameObject*& dyn_Housing();
    // Get instance field reference: private UnityEngine.Renderer keyRenderer
    [[deprecated]] ::UnityEngine::Renderer*& dyn_keyRenderer();
    // Get instance field reference: private UnityEngine.BoxCollider keyCollider
    [[deprecated]] ::UnityEngine::BoxCollider*& dyn_keyCollider();
    // Get instance field reference: private UnityEngine.GameObject keyCap
    [[deprecated]] ::UnityEngine::GameObject*& dyn_keyCap();
    // Get instance field reference: private Key shiftKeyController
    [[deprecated]] ::GlobalNamespace::Key*& dyn_shiftKeyController();
    // private System.Void Awake()
    // Offset: 0x1927830
    void Awake();
    // private System.Void ShiftKeyPressed(Key key)
    // Offset: 0x19279D0
    void ShiftKeyPressed(::GlobalNamespace::Key* key);
    // public System.Void ShiftVisibilityToggle(System.Boolean state)
    // Offset: 0x1927A6C
    void ShiftVisibilityToggle(bool state);
    // public System.Void .ctor()
    // Offset: 0x1927AEC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ShiftKeyBehaviour* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShiftKeyBehaviour::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ShiftKeyBehaviour*, creationType>()));
    }
  }; // ShiftKeyBehaviour
  #pragma pack(pop)
  static check_size<sizeof(ShiftKeyBehaviour), 56 + sizeof(::GlobalNamespace::Key*)> __GlobalNamespace_ShiftKeyBehaviourSizeCheck;
  static_assert(sizeof(ShiftKeyBehaviour) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ShiftKeyBehaviour::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ShiftKeyBehaviour::*)()>(&GlobalNamespace::ShiftKeyBehaviour::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ShiftKeyBehaviour*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ShiftKeyBehaviour::ShiftKeyPressed
// Il2CppName: ShiftKeyPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ShiftKeyBehaviour::*)(::GlobalNamespace::Key*)>(&GlobalNamespace::ShiftKeyBehaviour::ShiftKeyPressed)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("", "Key")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ShiftKeyBehaviour*), "ShiftKeyPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ShiftKeyBehaviour::ShiftVisibilityToggle
// Il2CppName: ShiftVisibilityToggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ShiftKeyBehaviour::*)(bool)>(&GlobalNamespace::ShiftKeyBehaviour::ShiftVisibilityToggle)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ShiftKeyBehaviour*), "ShiftVisibilityToggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ShiftKeyBehaviour::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
