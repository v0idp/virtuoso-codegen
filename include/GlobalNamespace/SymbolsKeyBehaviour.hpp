// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ShiftKeyBehaviour
  class ShiftKeyBehaviour;
  // Forward declaring type: Key
  class Key;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SymbolsKeyBehaviour
  class SymbolsKeyBehaviour;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SymbolsKeyBehaviour);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SymbolsKeyBehaviour*, "", "SymbolsKeyBehaviour");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: SymbolsKeyBehaviour
  // [TokenAttribute] Offset: FFFFFFFF
  class SymbolsKeyBehaviour : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public ShiftKeyBehaviour ShiftBehaviour
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::ShiftKeyBehaviour* ShiftBehaviour;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ShiftKeyBehaviour*) == 0x8);
    // private Key symbolKeyController
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::Key* symbolKeyController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Key*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public ShiftKeyBehaviour ShiftBehaviour
    [[deprecated]] ::GlobalNamespace::ShiftKeyBehaviour*& dyn_ShiftBehaviour();
    // Get instance field reference: private Key symbolKeyController
    [[deprecated]] ::GlobalNamespace::Key*& dyn_symbolKeyController();
    // private System.Void Awake()
    // Offset: 0x1930E4C
    void Awake();
    // private System.Void SpecialKeyPressed(Key key)
    // Offset: 0x1930F74
    void SpecialKeyPressed(::GlobalNamespace::Key* key);
    // private System.Void OnDisable()
    // Offset: 0x1931040
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x1931144
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SymbolsKeyBehaviour* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SymbolsKeyBehaviour::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SymbolsKeyBehaviour*, creationType>()));
    }
  }; // SymbolsKeyBehaviour
  #pragma pack(pop)
  static check_size<sizeof(SymbolsKeyBehaviour), 32 + sizeof(::GlobalNamespace::Key*)> __GlobalNamespace_SymbolsKeyBehaviourSizeCheck;
  static_assert(sizeof(SymbolsKeyBehaviour) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SymbolsKeyBehaviour::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SymbolsKeyBehaviour::*)()>(&GlobalNamespace::SymbolsKeyBehaviour::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SymbolsKeyBehaviour*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SymbolsKeyBehaviour::SpecialKeyPressed
// Il2CppName: SpecialKeyPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SymbolsKeyBehaviour::*)(::GlobalNamespace::Key*)>(&GlobalNamespace::SymbolsKeyBehaviour::SpecialKeyPressed)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("", "Key")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SymbolsKeyBehaviour*), "SpecialKeyPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SymbolsKeyBehaviour::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SymbolsKeyBehaviour::*)()>(&GlobalNamespace::SymbolsKeyBehaviour::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SymbolsKeyBehaviour*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SymbolsKeyBehaviour::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
