// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::Sizei, "", "OVRPlugin/Sizei");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/Sizei
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPlugin::Sizei/*, public ::System::ValueType, public ::System::IEquatable_1<::GlobalNamespace::OVRPlugin::Sizei>*/ {
    public:
    public:
    // public System.Int32 w
    // Size: 0x4
    // Offset: 0x0
    int w;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 h
    // Size: 0x4
    // Offset: 0x4
    int h;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Sizei
    constexpr Sizei(int w_ = {}, int h_ = {}) noexcept : w{w_}, h{h_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::GlobalNamespace::OVRPlugin::Sizei>
    operator ::System::IEquatable_1<::GlobalNamespace::OVRPlugin::Sizei>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::GlobalNamespace::OVRPlugin::Sizei>*>(this);
    }
    // Get static field: static public readonly OVRPlugin/Sizei zero
    static ::GlobalNamespace::OVRPlugin::Sizei _get_zero();
    // Set static field: static public readonly OVRPlugin/Sizei zero
    static void _set_zero(::GlobalNamespace::OVRPlugin::Sizei value);
    // Get instance field reference: public System.Int32 w
    [[deprecated]] int& dyn_w();
    // Get instance field reference: public System.Int32 h
    [[deprecated]] int& dyn_h();
    // static private System.Void .cctor()
    // Offset: 0x13EDF30
    static void _cctor();
    // public System.Boolean Equals(OVRPlugin/Sizei other)
    // Offset: 0x13EDE60
    bool Equals(::GlobalNamespace::OVRPlugin::Sizei other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x13EDE88
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x13EDF1C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // OVRPlugin/Sizei
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::Sizei), 4 + sizeof(int)> __GlobalNamespace_OVRPlugin_SizeiSizeCheck;
  static_assert(sizeof(OVRPlugin::Sizei) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::Sizei::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRPlugin::Sizei::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::Sizei), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::Sizei::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRPlugin::Sizei::*)(::GlobalNamespace::OVRPlugin::Sizei)>(&GlobalNamespace::OVRPlugin::Sizei::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Sizei")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::Sizei), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::Sizei::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRPlugin::Sizei::*)(::Il2CppObject*)>(&GlobalNamespace::OVRPlugin::Sizei::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::Sizei), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::Sizei::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRPlugin::Sizei::*)()>(&GlobalNamespace::OVRPlugin::Sizei::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::Sizei), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
