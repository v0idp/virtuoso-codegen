// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRTouchpad
#include "GlobalNamespace/OVRTouchpad.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: EnableSwitch
  class EnableSwitch;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LipSyncDemo_SetCurrentTarget
  class LipSyncDemo_SetCurrentTarget;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LipSyncDemo_SetCurrentTarget);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LipSyncDemo_SetCurrentTarget*, "", "LipSyncDemo_SetCurrentTarget");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: LipSyncDemo_SetCurrentTarget
  // [TokenAttribute] Offset: FFFFFFFF
  class LipSyncDemo_SetCurrentTarget : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public EnableSwitch[] SwitchTargets
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::GlobalNamespace::EnableSwitch*> SwitchTargets;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::EnableSwitch*>) == 0x8);
    // private System.Int32 targetSet
    // Size: 0x4
    // Offset: 0x20
    int targetSet;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 maxTarget
    // Size: 0x4
    // Offset: 0x24
    int maxTarget;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean XRButtonBeingPressed
    // Size: 0x1
    // Offset: 0x28
    bool XRButtonBeingPressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public EnableSwitch[] SwitchTargets
    [[deprecated]] ::ArrayW<::GlobalNamespace::EnableSwitch*>& dyn_SwitchTargets();
    // Get instance field reference: private System.Int32 targetSet
    [[deprecated]] int& dyn_targetSet();
    // Get instance field reference: private System.Int32 maxTarget
    [[deprecated]] int& dyn_maxTarget();
    // Get instance field reference: private System.Boolean XRButtonBeingPressed
    [[deprecated]] bool& dyn_XRButtonBeingPressed();
    // private System.Void Start()
    // Offset: 0x18A7494
    void Start();
    // private System.Void Update()
    // Offset: 0x18A7688
    void Update();
    // private System.Void SetCurrentTarget()
    // Offset: 0x18A79E0
    void SetCurrentTarget();
    // private System.Void LocalTouchEventCallback(OVRTouchpad/TouchEvent touchEvent)
    // Offset: 0x18A7CE0
    void LocalTouchEventCallback(::GlobalNamespace::OVRTouchpad::TouchEvent touchEvent);
    // public System.Void .ctor()
    // Offset: 0x18A7D30
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LipSyncDemo_SetCurrentTarget* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LipSyncDemo_SetCurrentTarget::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LipSyncDemo_SetCurrentTarget*, creationType>()));
    }
  }; // LipSyncDemo_SetCurrentTarget
  #pragma pack(pop)
  static check_size<sizeof(LipSyncDemo_SetCurrentTarget), 40 + sizeof(bool)> __GlobalNamespace_LipSyncDemo_SetCurrentTargetSizeCheck;
  static_assert(sizeof(LipSyncDemo_SetCurrentTarget) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LipSyncDemo_SetCurrentTarget::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LipSyncDemo_SetCurrentTarget::*)()>(&GlobalNamespace::LipSyncDemo_SetCurrentTarget::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LipSyncDemo_SetCurrentTarget*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LipSyncDemo_SetCurrentTarget::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LipSyncDemo_SetCurrentTarget::*)()>(&GlobalNamespace::LipSyncDemo_SetCurrentTarget::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LipSyncDemo_SetCurrentTarget*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LipSyncDemo_SetCurrentTarget::SetCurrentTarget
// Il2CppName: SetCurrentTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LipSyncDemo_SetCurrentTarget::*)()>(&GlobalNamespace::LipSyncDemo_SetCurrentTarget::SetCurrentTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LipSyncDemo_SetCurrentTarget*), "SetCurrentTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LipSyncDemo_SetCurrentTarget::LocalTouchEventCallback
// Il2CppName: LocalTouchEventCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LipSyncDemo_SetCurrentTarget::*)(::GlobalNamespace::OVRTouchpad::TouchEvent)>(&GlobalNamespace::LipSyncDemo_SetCurrentTarget::LocalTouchEventCallback)> {
  static const MethodInfo* get() {
    static auto* touchEvent = &::il2cpp_utils::GetClassFromName("", "OVRTouchpad/TouchEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LipSyncDemo_SetCurrentTarget*), "LocalTouchEventCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{touchEvent});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LipSyncDemo_SetCurrentTarget::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
