// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AutocompleteWordPicker
  class AutocompleteWordPicker;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AddCorrectWord
  class AddCorrectWord;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AddCorrectWord);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AddCorrectWord*, "", "AddCorrectWord");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: AddCorrectWord
  // [TokenAttribute] Offset: FFFFFFFF
  class AddCorrectWord : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private AutocompleteWordPicker wordPicker
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::AutocompleteWordPicker* wordPicker;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AutocompleteWordPicker*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private AutocompleteWordPicker wordPicker
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AutocompleteWordPicker*& dyn_wordPicker();
    // public System.Void .ctor()
    // Offset: 0x9659B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AddCorrectWord* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AddCorrectWord::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AddCorrectWord*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x965580
    void Start();
    // public System.Void WordChosen()
    // Offset: 0x9655E4
    void WordChosen();
  }; // AddCorrectWord
  #pragma pack(pop)
  static check_size<sizeof(AddCorrectWord), 24 + sizeof(::GlobalNamespace::AutocompleteWordPicker*)> __GlobalNamespace_AddCorrectWordSizeCheck;
  static_assert(sizeof(AddCorrectWord) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AddCorrectWord::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::AddCorrectWord::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AddCorrectWord::*)()>(&GlobalNamespace::AddCorrectWord::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AddCorrectWord*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AddCorrectWord::WordChosen
// Il2CppName: WordChosen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AddCorrectWord::*)()>(&GlobalNamespace::AddCorrectWord::WordChosen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AddCorrectWord*), "WordChosen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
