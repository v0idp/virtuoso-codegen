// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.EventSystems.ISelectHandler
#include "UnityEngine/EventSystems/ISelectHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NGramGenerator
  class NGramGenerator;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: InputField
  class InputField;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: BaseEventData
  class BaseEventData;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TextFieldBehaviour
  class TextFieldBehaviour;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TextFieldBehaviour);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TextFieldBehaviour*, "", "TextFieldBehaviour");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: TextFieldBehaviour
  // [TokenAttribute] Offset: FFFFFFFF
  class TextFieldBehaviour : public ::UnityEngine::MonoBehaviour/*, public ::UnityEngine::EventSystems::ISelectHandler*/ {
    public:
    // Nested type: ::GlobalNamespace::TextFieldBehaviour::$DisableHighlight$d__5
    class $DisableHighlight$d__5;
    public:
    // public NGramGenerator NGramHandler
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::NGramGenerator* NGramHandler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NGramGenerator*) == 0x8);
    // private UnityEngine.UI.InputField inputField
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::InputField* inputField;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::InputField*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::ISelectHandler
    operator ::UnityEngine::EventSystems::ISelectHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::ISelectHandler*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public NGramGenerator NGramHandler
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NGramGenerator*& dyn_NGramHandler();
    // Get instance field reference: private UnityEngine.UI.InputField inputField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::InputField*& dyn_inputField();
    // public System.Void .ctor()
    // Offset: 0xA24FFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextFieldBehaviour* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextFieldBehaviour::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextFieldBehaviour*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0xA24D38
    void Start();
    // public System.Void OnSelect(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0xA24D9C
    void OnSelect(::UnityEngine::EventSystems::BaseEventData* eventData);
    // public System.Void MoveCaretToEnd()
    // Offset: 0xA24E34
    void MoveCaretToEnd();
    // private System.Collections.IEnumerator DisableHighlight()
    // Offset: 0xA24DC8
    ::System::Collections::IEnumerator* DisableHighlight();
    // private System.Void Update()
    // Offset: 0xA24E60
    void Update();
  }; // TextFieldBehaviour
  #pragma pack(pop)
  static check_size<sizeof(TextFieldBehaviour), 32 + sizeof(::UnityEngine::UI::InputField*)> __GlobalNamespace_TextFieldBehaviourSizeCheck;
  static_assert(sizeof(TextFieldBehaviour) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TextFieldBehaviour::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TextFieldBehaviour::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TextFieldBehaviour::*)()>(&GlobalNamespace::TextFieldBehaviour::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TextFieldBehaviour*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TextFieldBehaviour::OnSelect
// Il2CppName: OnSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TextFieldBehaviour::*)(::UnityEngine::EventSystems::BaseEventData*)>(&GlobalNamespace::TextFieldBehaviour::OnSelect)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "BaseEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TextFieldBehaviour*), "OnSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TextFieldBehaviour::MoveCaretToEnd
// Il2CppName: MoveCaretToEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TextFieldBehaviour::*)()>(&GlobalNamespace::TextFieldBehaviour::MoveCaretToEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TextFieldBehaviour*), "MoveCaretToEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TextFieldBehaviour::DisableHighlight
// Il2CppName: DisableHighlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TextFieldBehaviour::*)()>(&GlobalNamespace::TextFieldBehaviour::DisableHighlight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TextFieldBehaviour*), "DisableHighlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TextFieldBehaviour::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TextFieldBehaviour::*)()>(&GlobalNamespace::TextFieldBehaviour::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TextFieldBehaviour*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
