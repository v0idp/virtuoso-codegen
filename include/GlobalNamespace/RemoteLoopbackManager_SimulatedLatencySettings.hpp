// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RemoteLoopbackManager
#include "GlobalNamespace/RemoteLoopbackManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: LinkedList`1<T>
  template<typename T>
  class LinkedList_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RemoteLoopbackManager::SimulatedLatencySettings);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RemoteLoopbackManager::SimulatedLatencySettings*, "", "RemoteLoopbackManager/SimulatedLatencySettings");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: RemoteLoopbackManager/SimulatedLatencySettings
  // [TokenAttribute] Offset: FFFFFFFF
  class RemoteLoopbackManager::SimulatedLatencySettings : public ::Il2CppObject {
    public:
    public:
    // [RangeAttribute] Offset: 0x782964
    // public System.Single FakeLatencyMax
    // Size: 0x4
    // Offset: 0x10
    float FakeLatencyMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x78297C
    // public System.Single FakeLatencyMin
    // Size: 0x4
    // Offset: 0x14
    float FakeLatencyMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x782994
    // public System.Single LatencyWeight
    // Size: 0x4
    // Offset: 0x18
    float LatencyWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x7829AC
    // public System.Int32 MaxSamples
    // Size: 0x4
    // Offset: 0x1C
    int MaxSamples;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Single AverageWindow
    // Size: 0x4
    // Offset: 0x20
    float AverageWindow;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single LatencySum
    // Size: 0x4
    // Offset: 0x24
    float LatencySum;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Collections.Generic.LinkedList`1<System.Single> LatencyValues
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::LinkedList_1<float>* LatencyValues;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::LinkedList_1<float>*) == 0x8);
    public:
    // Get instance field reference: public System.Single FakeLatencyMax
    [[deprecated]] float& dyn_FakeLatencyMax();
    // Get instance field reference: public System.Single FakeLatencyMin
    [[deprecated]] float& dyn_FakeLatencyMin();
    // Get instance field reference: public System.Single LatencyWeight
    [[deprecated]] float& dyn_LatencyWeight();
    // Get instance field reference: public System.Int32 MaxSamples
    [[deprecated]] int& dyn_MaxSamples();
    // Get instance field reference: System.Single AverageWindow
    [[deprecated]] float& dyn_AverageWindow();
    // Get instance field reference: System.Single LatencySum
    [[deprecated]] float& dyn_LatencySum();
    // Get instance field reference: System.Collections.Generic.LinkedList`1<System.Single> LatencyValues
    [[deprecated]] ::System::Collections::Generic::LinkedList_1<float>*& dyn_LatencyValues();
    // public System.Single NextValue()
    // Offset: 0x8D0098
    float NextValue();
    // public System.Void .ctor()
    // Offset: 0x8D01D0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RemoteLoopbackManager::SimulatedLatencySettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RemoteLoopbackManager::SimulatedLatencySettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RemoteLoopbackManager::SimulatedLatencySettings*, creationType>()));
    }
  }; // RemoteLoopbackManager/SimulatedLatencySettings
  #pragma pack(pop)
  static check_size<sizeof(RemoteLoopbackManager::SimulatedLatencySettings), 40 + sizeof(::System::Collections::Generic::LinkedList_1<float>*)> __GlobalNamespace_RemoteLoopbackManager_SimulatedLatencySettingsSizeCheck;
  static_assert(sizeof(RemoteLoopbackManager::SimulatedLatencySettings) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RemoteLoopbackManager::SimulatedLatencySettings::NextValue
// Il2CppName: NextValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::RemoteLoopbackManager::SimulatedLatencySettings::*)()>(&GlobalNamespace::RemoteLoopbackManager::SimulatedLatencySettings::NextValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RemoteLoopbackManager::SimulatedLatencySettings*), "NextValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RemoteLoopbackManager::SimulatedLatencySettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
