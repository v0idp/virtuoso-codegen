// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: Result because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Skipping declaration: IntPtr because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRLipSync
  class OVRLipSync;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRLipSync);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRLipSync*, "", "OVRLipSync");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: OVRLipSync
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRLipSync : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::OVRLipSync::Result
    struct Result;
    // Nested type: ::GlobalNamespace::OVRLipSync::AudioDataType
    struct AudioDataType;
    // Nested type: ::GlobalNamespace::OVRLipSync::Viseme
    struct Viseme;
    // Nested type: ::GlobalNamespace::OVRLipSync::Signals
    struct Signals;
    // Nested type: ::GlobalNamespace::OVRLipSync::ContextProviders
    struct ContextProviders;
    // Nested type: ::GlobalNamespace::OVRLipSync::Frame
    class Frame;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRLipSync/Result
    // [TokenAttribute] Offset: FFFFFFFF
    struct Result/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Result
      constexpr Result(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRLipSync/Result Success
      static constexpr const int Success = 0;
      // Get static field: static public OVRLipSync/Result Success
      static ::GlobalNamespace::OVRLipSync::Result _get_Success();
      // Set static field: static public OVRLipSync/Result Success
      static void _set_Success(::GlobalNamespace::OVRLipSync::Result value);
      // static field const value: static public OVRLipSync/Result Unknown
      static constexpr const int Unknown = -2200;
      // Get static field: static public OVRLipSync/Result Unknown
      static ::GlobalNamespace::OVRLipSync::Result _get_Unknown();
      // Set static field: static public OVRLipSync/Result Unknown
      static void _set_Unknown(::GlobalNamespace::OVRLipSync::Result value);
      // static field const value: static public OVRLipSync/Result CannotCreateContext
      static constexpr const int CannotCreateContext = -2201;
      // Get static field: static public OVRLipSync/Result CannotCreateContext
      static ::GlobalNamespace::OVRLipSync::Result _get_CannotCreateContext();
      // Set static field: static public OVRLipSync/Result CannotCreateContext
      static void _set_CannotCreateContext(::GlobalNamespace::OVRLipSync::Result value);
      // static field const value: static public OVRLipSync/Result InvalidParam
      static constexpr const int InvalidParam = -2202;
      // Get static field: static public OVRLipSync/Result InvalidParam
      static ::GlobalNamespace::OVRLipSync::Result _get_InvalidParam();
      // Set static field: static public OVRLipSync/Result InvalidParam
      static void _set_InvalidParam(::GlobalNamespace::OVRLipSync::Result value);
      // static field const value: static public OVRLipSync/Result BadSampleRate
      static constexpr const int BadSampleRate = -2203;
      // Get static field: static public OVRLipSync/Result BadSampleRate
      static ::GlobalNamespace::OVRLipSync::Result _get_BadSampleRate();
      // Set static field: static public OVRLipSync/Result BadSampleRate
      static void _set_BadSampleRate(::GlobalNamespace::OVRLipSync::Result value);
      // static field const value: static public OVRLipSync/Result MissingDLL
      static constexpr const int MissingDLL = -2204;
      // Get static field: static public OVRLipSync/Result MissingDLL
      static ::GlobalNamespace::OVRLipSync::Result _get_MissingDLL();
      // Set static field: static public OVRLipSync/Result MissingDLL
      static void _set_MissingDLL(::GlobalNamespace::OVRLipSync::Result value);
      // static field const value: static public OVRLipSync/Result BadVersion
      static constexpr const int BadVersion = -2205;
      // Get static field: static public OVRLipSync/Result BadVersion
      static ::GlobalNamespace::OVRLipSync::Result _get_BadVersion();
      // Set static field: static public OVRLipSync/Result BadVersion
      static void _set_BadVersion(::GlobalNamespace::OVRLipSync::Result value);
      // static field const value: static public OVRLipSync/Result UndefinedFunction
      static constexpr const int UndefinedFunction = -2206;
      // Get static field: static public OVRLipSync/Result UndefinedFunction
      static ::GlobalNamespace::OVRLipSync::Result _get_UndefinedFunction();
      // Set static field: static public OVRLipSync/Result UndefinedFunction
      static void _set_UndefinedFunction(::GlobalNamespace::OVRLipSync::Result value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRLipSync/Result
    #pragma pack(pop)
    static check_size<sizeof(OVRLipSync::Result), 0 + sizeof(int)> __GlobalNamespace_OVRLipSync_ResultSizeCheck;
    static_assert(sizeof(OVRLipSync::Result) == 0x4);
    // Get static field: static public readonly System.Int32 VisemeCount
    static int _get_VisemeCount();
    // Set static field: static public readonly System.Int32 VisemeCount
    static void _set_VisemeCount(int value);
    // Get static field: static public readonly System.Int32 SignalCount
    static int _get_SignalCount();
    // Set static field: static public readonly System.Int32 SignalCount
    static void _set_SignalCount(int value);
    // static field const value: static public System.String strOVRLS
    static constexpr const char* strOVRLS = "OVRLipSync";
    // Get static field: static public System.String strOVRLS
    static ::StringW _get_strOVRLS();
    // Set static field: static public System.String strOVRLS
    static void _set_strOVRLS(::StringW value);
    // Get static field: static private OVRLipSync/Result sInitialized
    static ::GlobalNamespace::OVRLipSync::Result _get_sInitialized();
    // Set static field: static private OVRLipSync/Result sInitialized
    static void _set_sInitialized(::GlobalNamespace::OVRLipSync::Result value);
    // Get static field: static public OVRLipSync sInstance
    static ::GlobalNamespace::OVRLipSync* _get_sInstance();
    // Set static field: static public OVRLipSync sInstance
    static void _set_sInstance(::GlobalNamespace::OVRLipSync* value);
    // public System.Void .ctor()
    // Offset: 0x18A9300
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRLipSync* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRLipSync::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRLipSync*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x18A9308
    static void _cctor();
    // static private System.Int32 ovrLipSyncDll_Initialize(System.Int32 samplerate, System.Int32 buffersize)
    // Offset: 0x18A7D40
    static int ovrLipSyncDll_Initialize(int samplerate, int buffersize);
    // static private System.Void ovrLipSyncDll_Shutdown()
    // Offset: 0x18A7DD0
    static void ovrLipSyncDll_Shutdown();
    // static private System.IntPtr ovrLipSyncDll_GetVersion(ref System.Int32 Major, ref System.Int32 Minor, ref System.Int32 Patch)
    // Offset: 0x18A7E40
    static ::System::IntPtr ovrLipSyncDll_GetVersion(ByRef<int> Major, ByRef<int> Minor, ByRef<int> Patch);
    // static private System.Int32 ovrLipSyncDll_CreateContextEx(ref System.UInt32 context, OVRLipSync/ContextProviders provider, System.Int32 sampleRate, System.Boolean enableAcceleration)
    // Offset: 0x18A7ED4
    static int ovrLipSyncDll_CreateContextEx(ByRef<uint> context, ::GlobalNamespace::OVRLipSync::ContextProviders provider, int sampleRate, bool enableAcceleration);
    // static private System.Int32 ovrLipSyncDll_CreateContextWithModelFile(ref System.UInt32 context, OVRLipSync/ContextProviders provider, System.String modelPath, System.Int32 sampleRate, System.Boolean enableAcceleration)
    // Offset: 0x18A7F7C
    static int ovrLipSyncDll_CreateContextWithModelFile(ByRef<uint> context, ::GlobalNamespace::OVRLipSync::ContextProviders provider, ::StringW modelPath, int sampleRate, bool enableAcceleration);
    // static private System.Int32 ovrLipSyncDll_DestroyContext(System.UInt32 context)
    // Offset: 0x18A8048
    static int ovrLipSyncDll_DestroyContext(uint context);
    // static private System.Int32 ovrLipSyncDll_ResetContext(System.UInt32 context)
    // Offset: 0x18A80C8
    static int ovrLipSyncDll_ResetContext(uint context);
    // static private System.Int32 ovrLipSyncDll_SendSignal(System.UInt32 context, OVRLipSync/Signals signal, System.Int32 arg1, System.Int32 arg2)
    // Offset: 0x18A8148
    static int ovrLipSyncDll_SendSignal(uint context, ::GlobalNamespace::OVRLipSync::Signals signal, int arg1, int arg2);
    // static private System.Int32 ovrLipSyncDll_ProcessFrameEx(System.UInt32 context, System.IntPtr audioBuffer, System.UInt32 bufferSize, OVRLipSync/AudioDataType dataType, ref System.Int32 frameNumber, ref System.Int32 frameDelay, System.Single[] visemes, System.Int32 visemeCount, ref System.Single laughterScore, System.Single[] laughterCategories, System.Int32 laughterCategoriesLength)
    // Offset: 0x18A81F0
    static int ovrLipSyncDll_ProcessFrameEx(uint context, ::System::IntPtr audioBuffer, uint bufferSize, ::GlobalNamespace::OVRLipSync::AudioDataType dataType, ByRef<int> frameNumber, ByRef<int> frameDelay, ::ArrayW<float> visemes, int visemeCount, ByRef<float> laughterScore, ::ArrayW<float> laughterCategories, int laughterCategoriesLength);
    // private System.Void Awake()
    // Offset: 0x18A82F8
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x18A87D4
    void OnDestroy();
    // static public OVRLipSync/Result Initialize()
    // Offset: 0x18A8678
    static ::GlobalNamespace::OVRLipSync::Result Initialize();
    // static public OVRLipSync/Result Initialize(System.Int32 sampleRate, System.Int32 bufferSize)
    // Offset: 0x18A88D4
    static ::GlobalNamespace::OVRLipSync::Result Initialize(int sampleRate, int bufferSize);
    // static public System.Void Shutdown()
    // Offset: 0x18A8A08
    static void Shutdown();
    // static public OVRLipSync/Result IsInitialized()
    // Offset: 0x18A8A74
    static ::GlobalNamespace::OVRLipSync::Result IsInitialized();
    // static public OVRLipSync/Result CreateContext(ref System.UInt32 context, OVRLipSync/ContextProviders provider, System.Int32 sampleRate, System.Boolean enableAcceleration)
    // Offset: 0x18A8AD8
    static ::GlobalNamespace::OVRLipSync::Result CreateContext(ByRef<uint> context, ::GlobalNamespace::OVRLipSync::ContextProviders provider, int sampleRate, bool enableAcceleration);
    // static public OVRLipSync/Result CreateContextWithModelFile(ref System.UInt32 context, OVRLipSync/ContextProviders provider, System.String modelPath, System.Int32 sampleRate, System.Boolean enableAcceleration)
    // Offset: 0x18A8BF4
    static ::GlobalNamespace::OVRLipSync::Result CreateContextWithModelFile(ByRef<uint> context, ::GlobalNamespace::OVRLipSync::ContextProviders provider, ::StringW modelPath, int sampleRate, bool enableAcceleration);
    // static public OVRLipSync/Result DestroyContext(System.UInt32 context)
    // Offset: 0x18A8D24
    static ::GlobalNamespace::OVRLipSync::Result DestroyContext(uint context);
    // static public OVRLipSync/Result ResetContext(System.UInt32 context)
    // Offset: 0x18A8DFC
    static ::GlobalNamespace::OVRLipSync::Result ResetContext(uint context);
    // static public OVRLipSync/Result SendSignal(System.UInt32 context, OVRLipSync/Signals signal, System.Int32 arg1, System.Int32 arg2)
    // Offset: 0x18A8ED4
    static ::GlobalNamespace::OVRLipSync::Result SendSignal(uint context, ::GlobalNamespace::OVRLipSync::Signals signal, int arg1, int arg2);
    // static public OVRLipSync/Result ProcessFrame(System.UInt32 context, System.Single[] audioBuffer, OVRLipSync/Frame frame, System.Boolean stereo)
    // Offset: 0x18A8FD0
    static ::GlobalNamespace::OVRLipSync::Result ProcessFrame(uint context, ::ArrayW<float> audioBuffer, ::GlobalNamespace::OVRLipSync::Frame* frame, bool stereo);
    // static public OVRLipSync/Result ProcessFrame(System.UInt32 context, System.Int16[] audioBuffer, OVRLipSync/Frame frame, System.Boolean stereo)
    // Offset: 0x18A916C
    static ::GlobalNamespace::OVRLipSync::Result ProcessFrame(uint context, ::ArrayW<int16_t> audioBuffer, ::GlobalNamespace::OVRLipSync::Frame* frame, bool stereo);
  }; // OVRLipSync
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRLipSync::Result, "", "OVRLipSync/Result");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRLipSync::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::ovrLipSyncDll_Initialize
// Il2CppName: ovrLipSyncDll_Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&GlobalNamespace::OVRLipSync::ovrLipSyncDll_Initialize)> {
  static const MethodInfo* get() {
    static auto* samplerate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buffersize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "ovrLipSyncDll_Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{samplerate, buffersize});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::ovrLipSyncDll_Shutdown
// Il2CppName: ovrLipSyncDll_Shutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRLipSync::ovrLipSyncDll_Shutdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "ovrLipSyncDll_Shutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::ovrLipSyncDll_GetVersion
// Il2CppName: ovrLipSyncDll_GetVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(ByRef<int>, ByRef<int>, ByRef<int>)>(&GlobalNamespace::OVRLipSync::ovrLipSyncDll_GetVersion)> {
  static const MethodInfo* get() {
    static auto* Major = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* Minor = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* Patch = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "ovrLipSyncDll_GetVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Major, Minor, Patch});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::ovrLipSyncDll_CreateContextEx
// Il2CppName: ovrLipSyncDll_CreateContextEx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<uint>, ::GlobalNamespace::OVRLipSync::ContextProviders, int, bool)>(&GlobalNamespace::OVRLipSync::ovrLipSyncDll_CreateContextEx)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("", "OVRLipSync/ContextProviders")->byval_arg;
    static auto* sampleRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* enableAcceleration = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "ovrLipSyncDll_CreateContextEx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, provider, sampleRate, enableAcceleration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::ovrLipSyncDll_CreateContextWithModelFile
// Il2CppName: ovrLipSyncDll_CreateContextWithModelFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<uint>, ::GlobalNamespace::OVRLipSync::ContextProviders, ::StringW, int, bool)>(&GlobalNamespace::OVRLipSync::ovrLipSyncDll_CreateContextWithModelFile)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("", "OVRLipSync/ContextProviders")->byval_arg;
    static auto* modelPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sampleRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* enableAcceleration = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "ovrLipSyncDll_CreateContextWithModelFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, provider, modelPath, sampleRate, enableAcceleration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::ovrLipSyncDll_DestroyContext
// Il2CppName: ovrLipSyncDll_DestroyContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&GlobalNamespace::OVRLipSync::ovrLipSyncDll_DestroyContext)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "ovrLipSyncDll_DestroyContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::ovrLipSyncDll_ResetContext
// Il2CppName: ovrLipSyncDll_ResetContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&GlobalNamespace::OVRLipSync::ovrLipSyncDll_ResetContext)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "ovrLipSyncDll_ResetContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::ovrLipSyncDll_SendSignal
// Il2CppName: ovrLipSyncDll_SendSignal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint, ::GlobalNamespace::OVRLipSync::Signals, int, int)>(&GlobalNamespace::OVRLipSync::ovrLipSyncDll_SendSignal)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* signal = &::il2cpp_utils::GetClassFromName("", "OVRLipSync/Signals")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* arg2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "ovrLipSyncDll_SendSignal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, signal, arg1, arg2});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::ovrLipSyncDll_ProcessFrameEx
// Il2CppName: ovrLipSyncDll_ProcessFrameEx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint, ::System::IntPtr, uint, ::GlobalNamespace::OVRLipSync::AudioDataType, ByRef<int>, ByRef<int>, ::ArrayW<float>, int, ByRef<float>, ::ArrayW<float>, int)>(&GlobalNamespace::OVRLipSync::ovrLipSyncDll_ProcessFrameEx)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* audioBuffer = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* bufferSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* dataType = &::il2cpp_utils::GetClassFromName("", "OVRLipSync/AudioDataType")->byval_arg;
    static auto* frameNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* frameDelay = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* visemes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* visemeCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* laughterScore = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* laughterCategories = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* laughterCategoriesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "ovrLipSyncDll_ProcessFrameEx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, audioBuffer, bufferSize, dataType, frameNumber, frameDelay, visemes, visemeCount, laughterScore, laughterCategories, laughterCategoriesLength});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRLipSync::*)()>(&GlobalNamespace::OVRLipSync::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRLipSync::*)()>(&GlobalNamespace::OVRLipSync::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRLipSync::Result (*)()>(&GlobalNamespace::OVRLipSync::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRLipSync::Result (*)(int, int)>(&GlobalNamespace::OVRLipSync::Initialize)> {
  static const MethodInfo* get() {
    static auto* sampleRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bufferSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sampleRate, bufferSize});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::Shutdown
// Il2CppName: Shutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRLipSync::Shutdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "Shutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::IsInitialized
// Il2CppName: IsInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRLipSync::Result (*)()>(&GlobalNamespace::OVRLipSync::IsInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "IsInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::CreateContext
// Il2CppName: CreateContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRLipSync::Result (*)(ByRef<uint>, ::GlobalNamespace::OVRLipSync::ContextProviders, int, bool)>(&GlobalNamespace::OVRLipSync::CreateContext)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("", "OVRLipSync/ContextProviders")->byval_arg;
    static auto* sampleRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* enableAcceleration = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "CreateContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, provider, sampleRate, enableAcceleration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::CreateContextWithModelFile
// Il2CppName: CreateContextWithModelFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRLipSync::Result (*)(ByRef<uint>, ::GlobalNamespace::OVRLipSync::ContextProviders, ::StringW, int, bool)>(&GlobalNamespace::OVRLipSync::CreateContextWithModelFile)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("", "OVRLipSync/ContextProviders")->byval_arg;
    static auto* modelPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sampleRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* enableAcceleration = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "CreateContextWithModelFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, provider, modelPath, sampleRate, enableAcceleration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::DestroyContext
// Il2CppName: DestroyContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRLipSync::Result (*)(uint)>(&GlobalNamespace::OVRLipSync::DestroyContext)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "DestroyContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::ResetContext
// Il2CppName: ResetContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRLipSync::Result (*)(uint)>(&GlobalNamespace::OVRLipSync::ResetContext)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "ResetContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::SendSignal
// Il2CppName: SendSignal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRLipSync::Result (*)(uint, ::GlobalNamespace::OVRLipSync::Signals, int, int)>(&GlobalNamespace::OVRLipSync::SendSignal)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* signal = &::il2cpp_utils::GetClassFromName("", "OVRLipSync/Signals")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* arg2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "SendSignal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, signal, arg1, arg2});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::ProcessFrame
// Il2CppName: ProcessFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRLipSync::Result (*)(uint, ::ArrayW<float>, ::GlobalNamespace::OVRLipSync::Frame*, bool)>(&GlobalNamespace::OVRLipSync::ProcessFrame)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* audioBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* frame = &::il2cpp_utils::GetClassFromName("", "OVRLipSync/Frame")->byval_arg;
    static auto* stereo = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "ProcessFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, audioBuffer, frame, stereo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLipSync::ProcessFrame
// Il2CppName: ProcessFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRLipSync::Result (*)(uint, ::ArrayW<int16_t>, ::GlobalNamespace::OVRLipSync::Frame*, bool)>(&GlobalNamespace::OVRLipSync::ProcessFrame)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* audioBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    static auto* frame = &::il2cpp_utils::GetClassFromName("", "OVRLipSync/Frame")->byval_arg;
    static auto* stereo = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLipSync*), "ProcessFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, audioBuffer, frame, stereo});
  }
};
