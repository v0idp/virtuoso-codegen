// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: OvrAvatar
#include "GlobalNamespace/OvrAvatar.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: RoomManager
  class RoomManager;
  // Forward declaring type: RemotePlayer
  class RemotePlayer;
  // Forward declaring type: P2PManager
  class P2PManager;
  // Forward declaring type: VoipManager
  class VoipManager;
  // Skipping declaration: State because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: UIntPtr
  struct UIntPtr;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message`1<T>
  template<typename T>
  class Message_1;
  // Forward declaring type: Message
  class Message;
}
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: PlatformInitialize
  class PlatformInitialize;
  // Forward declaring type: User
  class User;
  // Forward declaring type: UserAndRoomList
  class UserAndRoomList;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SocialPlatformManager
  class SocialPlatformManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SocialPlatformManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SocialPlatformManager*, "", "SocialPlatformManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC0
  #pragma pack(push, 1)
  // Autogenerated type: SocialPlatformManager
  // [TokenAttribute] Offset: FFFFFFFF
  class SocialPlatformManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::SocialPlatformManager::State
    struct State;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SocialPlatformManager/State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SocialPlatformManager/State INITIALIZING
      static constexpr const int INITIALIZING = 0;
      // Get static field: static public SocialPlatformManager/State INITIALIZING
      static ::GlobalNamespace::SocialPlatformManager::State _get_INITIALIZING();
      // Set static field: static public SocialPlatformManager/State INITIALIZING
      static void _set_INITIALIZING(::GlobalNamespace::SocialPlatformManager::State value);
      // static field const value: static public SocialPlatformManager/State CHECKING_LAUNCH_STATE
      static constexpr const int CHECKING_LAUNCH_STATE = 1;
      // Get static field: static public SocialPlatformManager/State CHECKING_LAUNCH_STATE
      static ::GlobalNamespace::SocialPlatformManager::State _get_CHECKING_LAUNCH_STATE();
      // Set static field: static public SocialPlatformManager/State CHECKING_LAUNCH_STATE
      static void _set_CHECKING_LAUNCH_STATE(::GlobalNamespace::SocialPlatformManager::State value);
      // static field const value: static public SocialPlatformManager/State CREATING_A_ROOM
      static constexpr const int CREATING_A_ROOM = 2;
      // Get static field: static public SocialPlatformManager/State CREATING_A_ROOM
      static ::GlobalNamespace::SocialPlatformManager::State _get_CREATING_A_ROOM();
      // Set static field: static public SocialPlatformManager/State CREATING_A_ROOM
      static void _set_CREATING_A_ROOM(::GlobalNamespace::SocialPlatformManager::State value);
      // static field const value: static public SocialPlatformManager/State WAITING_IN_A_ROOM
      static constexpr const int WAITING_IN_A_ROOM = 3;
      // Get static field: static public SocialPlatformManager/State WAITING_IN_A_ROOM
      static ::GlobalNamespace::SocialPlatformManager::State _get_WAITING_IN_A_ROOM();
      // Set static field: static public SocialPlatformManager/State WAITING_IN_A_ROOM
      static void _set_WAITING_IN_A_ROOM(::GlobalNamespace::SocialPlatformManager::State value);
      // static field const value: static public SocialPlatformManager/State JOINING_A_ROOM
      static constexpr const int JOINING_A_ROOM = 4;
      // Get static field: static public SocialPlatformManager/State JOINING_A_ROOM
      static ::GlobalNamespace::SocialPlatformManager::State _get_JOINING_A_ROOM();
      // Set static field: static public SocialPlatformManager/State JOINING_A_ROOM
      static void _set_JOINING_A_ROOM(::GlobalNamespace::SocialPlatformManager::State value);
      // static field const value: static public SocialPlatformManager/State CONNECTED_IN_A_ROOM
      static constexpr const int CONNECTED_IN_A_ROOM = 5;
      // Get static field: static public SocialPlatformManager/State CONNECTED_IN_A_ROOM
      static ::GlobalNamespace::SocialPlatformManager::State _get_CONNECTED_IN_A_ROOM();
      // Set static field: static public SocialPlatformManager/State CONNECTED_IN_A_ROOM
      static void _set_CONNECTED_IN_A_ROOM(::GlobalNamespace::SocialPlatformManager::State value);
      // static field const value: static public SocialPlatformManager/State LEAVING_A_ROOM
      static constexpr const int LEAVING_A_ROOM = 6;
      // Get static field: static public SocialPlatformManager/State LEAVING_A_ROOM
      static ::GlobalNamespace::SocialPlatformManager::State _get_LEAVING_A_ROOM();
      // Set static field: static public SocialPlatformManager/State LEAVING_A_ROOM
      static void _set_LEAVING_A_ROOM(::GlobalNamespace::SocialPlatformManager::State value);
      // static field const value: static public SocialPlatformManager/State SHUTDOWN
      static constexpr const int SHUTDOWN = 7;
      // Get static field: static public SocialPlatformManager/State SHUTDOWN
      static ::GlobalNamespace::SocialPlatformManager::State _get_SHUTDOWN();
      // Set static field: static public SocialPlatformManager/State SHUTDOWN
      static void _set_SHUTDOWN(::GlobalNamespace::SocialPlatformManager::State value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated]] int& dyn_value__();
    }; // SocialPlatformManager/State
    #pragma pack(pop)
    static check_size<sizeof(SocialPlatformManager::State), 0 + sizeof(int)> __GlobalNamespace_SocialPlatformManager_StateSizeCheck;
    static_assert(sizeof(SocialPlatformManager::State) == 0x4);
    public:
    // private System.Single voiceCurrent
    // Size: 0x4
    // Offset: 0x18
    float voiceCurrent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.UInt32 packetSequence
    // Size: 0x4
    // Offset: 0x1C
    uint packetSequence;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public OvrAvatar localAvatarPrefab
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::OvrAvatar* localAvatarPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OvrAvatar*) == 0x8);
    // public OvrAvatar remoteAvatarPrefab
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::OvrAvatar* remoteAvatarPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OvrAvatar*) == 0x8);
    // public UnityEngine.GameObject helpPanel
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* helpPanel;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // protected UnityEngine.MeshRenderer helpMesh
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::MeshRenderer* helpMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.Material riftMaterial
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Material* riftMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material gearMaterial
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Material* gearMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // protected OvrAvatar localAvatar
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::OvrAvatar* localAvatar;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OvrAvatar*) == 0x8);
    // protected UnityEngine.GameObject localTrackingSpace
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::GameObject* localTrackingSpace;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // protected UnityEngine.GameObject localPlayerHead
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::GameObject* localPlayerHead;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // protected System.Collections.Generic.Dictionary`2<System.UInt64,RemotePlayer> remoteUsers
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::Dictionary_2<uint64_t, ::GlobalNamespace::RemotePlayer*>* remoteUsers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint64_t, ::GlobalNamespace::RemotePlayer*>*) == 0x8);
    // public UnityEngine.GameObject roomSphere
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::GameObject* roomSphere;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // protected UnityEngine.MeshRenderer sphereMesh
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::MeshRenderer* sphereMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.GameObject roomFloor
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::GameObject* roomFloor;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // protected UnityEngine.MeshRenderer floorMesh
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::MeshRenderer* floorMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // protected SocialPlatformManager/State currentState
    // Size: 0x4
    // Offset: 0x90
    ::GlobalNamespace::SocialPlatformManager::State currentState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SocialPlatformManager::State) == 0x4);
    // Padding between fields: currentState and: roomManager
    char __padding16[0x4] = {};
    // protected RoomManager roomManager
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::RoomManager* roomManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RoomManager*) == 0x8);
    // protected P2PManager p2pManager
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::P2PManager* p2pManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::P2PManager*) == 0x8);
    // protected VoipManager voipManager
    // Size: 0x8
    // Offset: 0xA8
    ::GlobalNamespace::VoipManager* voipManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VoipManager*) == 0x8);
    // protected System.UInt64 myID
    // Size: 0x8
    // Offset: 0xB0
    uint64_t myID;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // protected System.String myOculusID
    // Size: 0x8
    // Offset: 0xB8
    ::StringW myOculusID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private readonly UnityEngine.Vector3 START_ROTATION_ONE
    static ::UnityEngine::Vector3 _get_START_ROTATION_ONE();
    // Set static field: static private readonly UnityEngine.Vector3 START_ROTATION_ONE
    static void _set_START_ROTATION_ONE(::UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Vector3 START_POSITION_ONE
    static ::UnityEngine::Vector3 _get_START_POSITION_ONE();
    // Set static field: static private readonly UnityEngine.Vector3 START_POSITION_ONE
    static void _set_START_POSITION_ONE(::UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Vector3 START_ROTATION_TWO
    static ::UnityEngine::Vector3 _get_START_ROTATION_TWO();
    // Set static field: static private readonly UnityEngine.Vector3 START_ROTATION_TWO
    static void _set_START_ROTATION_TWO(::UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Vector3 START_POSITION_TWO
    static ::UnityEngine::Vector3 _get_START_POSITION_TWO();
    // Set static field: static private readonly UnityEngine.Vector3 START_POSITION_TWO
    static void _set_START_POSITION_TWO(::UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Vector3 START_ROTATION_THREE
    static ::UnityEngine::Vector3 _get_START_ROTATION_THREE();
    // Set static field: static private readonly UnityEngine.Vector3 START_ROTATION_THREE
    static void _set_START_ROTATION_THREE(::UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Vector3 START_POSITION_THREE
    static ::UnityEngine::Vector3 _get_START_POSITION_THREE();
    // Set static field: static private readonly UnityEngine.Vector3 START_POSITION_THREE
    static void _set_START_POSITION_THREE(::UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Vector3 START_ROTATION_FOUR
    static ::UnityEngine::Vector3 _get_START_ROTATION_FOUR();
    // Set static field: static private readonly UnityEngine.Vector3 START_ROTATION_FOUR
    static void _set_START_ROTATION_FOUR(::UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Vector3 START_POSITION_FOUR
    static ::UnityEngine::Vector3 _get_START_POSITION_FOUR();
    // Set static field: static private readonly UnityEngine.Vector3 START_POSITION_FOUR
    static void _set_START_POSITION_FOUR(::UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Color BLACK
    static ::UnityEngine::Color _get_BLACK();
    // Set static field: static private readonly UnityEngine.Color BLACK
    static void _set_BLACK(::UnityEngine::Color value);
    // Get static field: static private readonly UnityEngine.Color WHITE
    static ::UnityEngine::Color _get_WHITE();
    // Set static field: static private readonly UnityEngine.Color WHITE
    static void _set_WHITE(::UnityEngine::Color value);
    // Get static field: static private readonly UnityEngine.Color CYAN
    static ::UnityEngine::Color _get_CYAN();
    // Set static field: static private readonly UnityEngine.Color CYAN
    static void _set_CYAN(::UnityEngine::Color value);
    // Get static field: static private readonly UnityEngine.Color BLUE
    static ::UnityEngine::Color _get_BLUE();
    // Set static field: static private readonly UnityEngine.Color BLUE
    static void _set_BLUE(::UnityEngine::Color value);
    // Get static field: static private readonly UnityEngine.Color GREEN
    static ::UnityEngine::Color _get_GREEN();
    // Set static field: static private readonly UnityEngine.Color GREEN
    static void _set_GREEN(::UnityEngine::Color value);
    // Get static field: static protected SocialPlatformManager s_instance
    static ::GlobalNamespace::SocialPlatformManager* _get_s_instance();
    // Set static field: static protected SocialPlatformManager s_instance
    static void _set_s_instance(::GlobalNamespace::SocialPlatformManager* value);
    // Get static field: static public readonly System.Single VOIP_SCALE
    static float _get_VOIP_SCALE();
    // Set static field: static public readonly System.Single VOIP_SCALE
    static void _set_VOIP_SCALE(float value);
    // Get instance field reference: private System.Single voiceCurrent
    [[deprecated]] float& dyn_voiceCurrent();
    // Get instance field reference: private System.UInt32 packetSequence
    [[deprecated]] uint& dyn_packetSequence();
    // Get instance field reference: public OvrAvatar localAvatarPrefab
    [[deprecated]] ::GlobalNamespace::OvrAvatar*& dyn_localAvatarPrefab();
    // Get instance field reference: public OvrAvatar remoteAvatarPrefab
    [[deprecated]] ::GlobalNamespace::OvrAvatar*& dyn_remoteAvatarPrefab();
    // Get instance field reference: public UnityEngine.GameObject helpPanel
    [[deprecated]] ::UnityEngine::GameObject*& dyn_helpPanel();
    // Get instance field reference: protected UnityEngine.MeshRenderer helpMesh
    [[deprecated]] ::UnityEngine::MeshRenderer*& dyn_helpMesh();
    // Get instance field reference: public UnityEngine.Material riftMaterial
    [[deprecated]] ::UnityEngine::Material*& dyn_riftMaterial();
    // Get instance field reference: public UnityEngine.Material gearMaterial
    [[deprecated]] ::UnityEngine::Material*& dyn_gearMaterial();
    // Get instance field reference: protected OvrAvatar localAvatar
    [[deprecated]] ::GlobalNamespace::OvrAvatar*& dyn_localAvatar();
    // Get instance field reference: protected UnityEngine.GameObject localTrackingSpace
    [[deprecated]] ::UnityEngine::GameObject*& dyn_localTrackingSpace();
    // Get instance field reference: protected UnityEngine.GameObject localPlayerHead
    [[deprecated]] ::UnityEngine::GameObject*& dyn_localPlayerHead();
    // Get instance field reference: protected System.Collections.Generic.Dictionary`2<System.UInt64,RemotePlayer> remoteUsers
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<uint64_t, ::GlobalNamespace::RemotePlayer*>*& dyn_remoteUsers();
    // Get instance field reference: public UnityEngine.GameObject roomSphere
    [[deprecated]] ::UnityEngine::GameObject*& dyn_roomSphere();
    // Get instance field reference: protected UnityEngine.MeshRenderer sphereMesh
    [[deprecated]] ::UnityEngine::MeshRenderer*& dyn_sphereMesh();
    // Get instance field reference: public UnityEngine.GameObject roomFloor
    [[deprecated]] ::UnityEngine::GameObject*& dyn_roomFloor();
    // Get instance field reference: protected UnityEngine.MeshRenderer floorMesh
    [[deprecated]] ::UnityEngine::MeshRenderer*& dyn_floorMesh();
    // Get instance field reference: protected SocialPlatformManager/State currentState
    [[deprecated]] ::GlobalNamespace::SocialPlatformManager::State& dyn_currentState();
    // Get instance field reference: protected RoomManager roomManager
    [[deprecated]] ::GlobalNamespace::RoomManager*& dyn_roomManager();
    // Get instance field reference: protected P2PManager p2pManager
    [[deprecated]] ::GlobalNamespace::P2PManager*& dyn_p2pManager();
    // Get instance field reference: protected VoipManager voipManager
    [[deprecated]] ::GlobalNamespace::VoipManager*& dyn_voipManager();
    // Get instance field reference: protected System.UInt64 myID
    [[deprecated]] uint64_t& dyn_myID();
    // Get instance field reference: protected System.String myOculusID
    [[deprecated]] ::StringW& dyn_myOculusID();
    // static public SocialPlatformManager/State get_CurrentState()
    // Offset: 0x192AC7C
    static ::GlobalNamespace::SocialPlatformManager::State get_CurrentState();
    // static public System.UInt64 get_MyID()
    // Offset: 0x192ACEC
    static uint64_t get_MyID();
    // static public System.String get_MyOculusID()
    // Offset: 0x192ADCC
    static ::StringW get_MyOculusID();
    // public System.Void Update()
    // Offset: 0x1928E9C
    void Update();
    // public System.Void Awake()
    // Offset: 0x192922C
    void Awake();
    // private System.Void InitCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.PlatformInitialize> msg)
    // Offset: 0x1929938
    void InitCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::PlatformInitialize*>* msg);
    // public System.Void Start()
    // Offset: 0x1929C58
    void Start();
    // private System.Void IsEntitledCallback(Oculus.Platform.Message msg)
    // Offset: 0x1929C5C
    void IsEntitledCallback(::Oculus::Platform::Message* msg);
    // private System.Void GetLoggedInUserCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.User> msg)
    // Offset: 0x1929D7C
    void GetLoggedInUserCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::User*>* msg);
    // private System.Void GetLoggedInUserFriendsAndRoomsCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.UserAndRoomList> msg)
    // Offset: 0x192A484
    void GetLoggedInUserFriendsAndRoomsCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::UserAndRoomList*>* msg);
    // public System.Void OnLocalAvatarPacketRecorded(System.Object sender, OvrAvatar/PacketEventArgs args)
    // Offset: 0x192A878
    void OnLocalAvatarPacketRecorded(::Il2CppObject* sender, ::GlobalNamespace::OvrAvatar::PacketEventArgs* args);
    // public System.Void OnApplicationQuit()
    // Offset: 0x192AA88
    void OnApplicationQuit();
    // public System.Void AddUser(System.UInt64 userID, ref RemotePlayer remoteUser)
    // Offset: 0x192AC10
    void AddUser(uint64_t userID, ByRef<::GlobalNamespace::RemotePlayer*> remoteUser);
    // public System.Void LogOutputLine(System.String line)
    // Offset: 0x19295C4
    void LogOutputLine(::StringW line);
    // static public System.Void TerminateWithError(Oculus.Platform.Message msg)
    // Offset: 0x1929AE0
    static void TerminateWithError(::Oculus::Platform::Message* msg);
    // static public System.Void TransitionToState(SocialPlatformManager/State newState)
    // Offset: 0x1929678
    static void TransitionToState(::GlobalNamespace::SocialPlatformManager::State newState);
    // static private System.Void SetSphereColorForState()
    // Offset: 0x192AEF4
    static void SetSphereColorForState();
    // static public System.Void SetFloorColorForState(System.Boolean host)
    // Offset: 0x192B070
    static void SetFloorColorForState(bool host);
    // static public System.Void MarkAllRemoteUsersAsNotInRoom()
    // Offset: 0x192B154
    static void MarkAllRemoteUsersAsNotInRoom();
    // static public System.Void MarkRemoteUserInRoom(System.UInt64 userID)
    // Offset: 0x192B2B0
    static void MarkRemoteUserInRoom(uint64_t userID);
    // static public System.Void ForgetRemoteUsersNotInRoom()
    // Offset: 0x192B394
    static void ForgetRemoteUsersNotInRoom();
    // static public System.Void LogOutput(System.String line)
    // Offset: 0x1929B98
    static void LogOutput(::StringW line);
    // static public System.Boolean IsUserInRoom(System.UInt64 userID)
    // Offset: 0x192B8DC
    static bool IsUserInRoom(uint64_t userID);
    // static public System.Void AddRemoteUser(System.UInt64 userID)
    // Offset: 0x192B970
    static void AddRemoteUser(uint64_t userID);
    // static public System.Void RemoveRemoteUser(System.UInt64 userID)
    // Offset: 0x192B6C8
    static void RemoveRemoteUser(uint64_t userID);
    // public System.Void UpdateVoiceData(System.Int16[] pcmData, System.Int32 numChannels)
    // Offset: 0x192BB60
    void UpdateVoiceData(::ArrayW<int16_t> pcmData, int numChannels);
    // static public System.Void MicFilter(System.Int16[] pcmData, System.UIntPtr pcmDataLength, System.Int32 frequency, System.Int32 numChannels)
    // Offset: 0x1928E18
    static void MicFilter(::ArrayW<int16_t> pcmData, ::System::UIntPtr pcmDataLength, int frequency, int numChannels);
    // static public RemotePlayer GetRemoteUser(System.UInt64 userID)
    // Offset: 0x192BCA4
    static ::GlobalNamespace::RemotePlayer* GetRemoteUser(uint64_t userID);
    // public System.Void .ctor()
    // Offset: 0x192BD80
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SocialPlatformManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SocialPlatformManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SocialPlatformManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x192BDF8
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // SocialPlatformManager
  #pragma pack(pop)
  static check_size<sizeof(SocialPlatformManager), 184 + sizeof(::StringW)> __GlobalNamespace_SocialPlatformManagerSizeCheck;
  static_assert(sizeof(SocialPlatformManager) == 0xC0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SocialPlatformManager::State, "", "SocialPlatformManager/State");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::get_CurrentState
// Il2CppName: get_CurrentState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SocialPlatformManager::State (*)()>(&GlobalNamespace::SocialPlatformManager::get_CurrentState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "get_CurrentState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::get_MyID
// Il2CppName: get_MyID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)()>(&GlobalNamespace::SocialPlatformManager::get_MyID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "get_MyID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::get_MyOculusID
// Il2CppName: get_MyOculusID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::SocialPlatformManager::get_MyOculusID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "get_MyOculusID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SocialPlatformManager::*)()>(&GlobalNamespace::SocialPlatformManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SocialPlatformManager::*)()>(&GlobalNamespace::SocialPlatformManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::InitCallback
// Il2CppName: InitCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SocialPlatformManager::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::PlatformInitialize*>*)>(&GlobalNamespace::SocialPlatformManager::InitCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "PlatformInitialize")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "InitCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SocialPlatformManager::*)()>(&GlobalNamespace::SocialPlatformManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::IsEntitledCallback
// Il2CppName: IsEntitledCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SocialPlatformManager::*)(::Oculus::Platform::Message*)>(&GlobalNamespace::SocialPlatformManager::IsEntitledCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "IsEntitledCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::GetLoggedInUserCallback
// Il2CppName: GetLoggedInUserCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SocialPlatformManager::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::User*>*)>(&GlobalNamespace::SocialPlatformManager::GetLoggedInUserCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "User")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "GetLoggedInUserCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::GetLoggedInUserFriendsAndRoomsCallback
// Il2CppName: GetLoggedInUserFriendsAndRoomsCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SocialPlatformManager::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::UserAndRoomList*>*)>(&GlobalNamespace::SocialPlatformManager::GetLoggedInUserFriendsAndRoomsCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "UserAndRoomList")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "GetLoggedInUserFriendsAndRoomsCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::OnLocalAvatarPacketRecorded
// Il2CppName: OnLocalAvatarPacketRecorded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SocialPlatformManager::*)(::Il2CppObject*, ::GlobalNamespace::OvrAvatar::PacketEventArgs*)>(&GlobalNamespace::SocialPlatformManager::OnLocalAvatarPacketRecorded)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* args = &::il2cpp_utils::GetClassFromName("", "OvrAvatar/PacketEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "OnLocalAvatarPacketRecorded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, args});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SocialPlatformManager::*)()>(&GlobalNamespace::SocialPlatformManager::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::AddUser
// Il2CppName: AddUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SocialPlatformManager::*)(uint64_t, ByRef<::GlobalNamespace::RemotePlayer*>)>(&GlobalNamespace::SocialPlatformManager::AddUser)> {
  static const MethodInfo* get() {
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* remoteUser = &::il2cpp_utils::GetClassFromName("", "RemotePlayer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "AddUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userID, remoteUser});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::LogOutputLine
// Il2CppName: LogOutputLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SocialPlatformManager::*)(::StringW)>(&GlobalNamespace::SocialPlatformManager::LogOutputLine)> {
  static const MethodInfo* get() {
    static auto* line = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "LogOutputLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{line});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::TerminateWithError
// Il2CppName: TerminateWithError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Oculus::Platform::Message*)>(&GlobalNamespace::SocialPlatformManager::TerminateWithError)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "TerminateWithError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::TransitionToState
// Il2CppName: TransitionToState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::SocialPlatformManager::State)>(&GlobalNamespace::SocialPlatformManager::TransitionToState)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("", "SocialPlatformManager/State")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "TransitionToState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::SetSphereColorForState
// Il2CppName: SetSphereColorForState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::SocialPlatformManager::SetSphereColorForState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "SetSphereColorForState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::SetFloorColorForState
// Il2CppName: SetFloorColorForState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::SocialPlatformManager::SetFloorColorForState)> {
  static const MethodInfo* get() {
    static auto* host = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "SetFloorColorForState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::MarkAllRemoteUsersAsNotInRoom
// Il2CppName: MarkAllRemoteUsersAsNotInRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::SocialPlatformManager::MarkAllRemoteUsersAsNotInRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "MarkAllRemoteUsersAsNotInRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::MarkRemoteUserInRoom
// Il2CppName: MarkRemoteUserInRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::SocialPlatformManager::MarkRemoteUserInRoom)> {
  static const MethodInfo* get() {
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "MarkRemoteUserInRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::ForgetRemoteUsersNotInRoom
// Il2CppName: ForgetRemoteUsersNotInRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::SocialPlatformManager::ForgetRemoteUsersNotInRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "ForgetRemoteUsersNotInRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::LogOutput
// Il2CppName: LogOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&GlobalNamespace::SocialPlatformManager::LogOutput)> {
  static const MethodInfo* get() {
    static auto* line = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "LogOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{line});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::IsUserInRoom
// Il2CppName: IsUserInRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t)>(&GlobalNamespace::SocialPlatformManager::IsUserInRoom)> {
  static const MethodInfo* get() {
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "IsUserInRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::AddRemoteUser
// Il2CppName: AddRemoteUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::SocialPlatformManager::AddRemoteUser)> {
  static const MethodInfo* get() {
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "AddRemoteUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::RemoveRemoteUser
// Il2CppName: RemoveRemoteUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::SocialPlatformManager::RemoveRemoteUser)> {
  static const MethodInfo* get() {
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "RemoveRemoteUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::UpdateVoiceData
// Il2CppName: UpdateVoiceData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SocialPlatformManager::*)(::ArrayW<int16_t>, int)>(&GlobalNamespace::SocialPlatformManager::UpdateVoiceData)> {
  static const MethodInfo* get() {
    static auto* pcmData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    static auto* numChannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "UpdateVoiceData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcmData, numChannels});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::MicFilter
// Il2CppName: MicFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<int16_t>, ::System::UIntPtr, int, int)>(&GlobalNamespace::SocialPlatformManager::MicFilter)> {
  static const MethodInfo* get() {
    static auto* pcmData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    static auto* pcmDataLength = &::il2cpp_utils::GetClassFromName("System", "UIntPtr")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* numChannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "MicFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcmData, pcmDataLength, frequency, numChannels});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::GetRemoteUser
// Il2CppName: GetRemoteUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::RemotePlayer* (*)(uint64_t)>(&GlobalNamespace::SocialPlatformManager::GetRemoteUser)> {
  static const MethodInfo* get() {
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), "GetRemoteUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SocialPlatformManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::SocialPlatformManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SocialPlatformManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
