// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PunchKeyboardInputField
  class PunchKeyboardInputField;
  // Forward declaring type: KeySoundController
  class KeySoundController;
  // Forward declaring type: Key
  class Key;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: UIButton
  class UIButton;
  // Forward declaring type: ObjectActivation
  class ObjectActivation;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PunchKeyboard
  class PunchKeyboard;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PunchKeyboard);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PunchKeyboard*, "", "PunchKeyboard");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x6A
  #pragma pack(push, 1)
  // Autogenerated type: PunchKeyboard
  // [TokenAttribute] Offset: FFFFFFFF
  class PunchKeyboard : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::PunchKeyboard::HitKey
    class HitKey;
    // Nested type: ::GlobalNamespace::PunchKeyboard::$Animate$d__35
    class $Animate$d__35;
    public:
    // private PunchKeyboardInputField _previewInputField
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::PunchKeyboardInputField* previewInputField;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PunchKeyboardInputField*) == 0x8);
    // private KeySoundController _keySoundController
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::KeySoundController* keySoundController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::KeySoundController*) == 0x8);
    // private System.Single _simultaneousKeyPressFilterDuration
    // Size: 0x4
    // Offset: 0x28
    float simultaneousKeyPressFilterDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: simultaneousKeyPressFilterDuration and: closeButton
    char __padding2[0x4] = {};
    // private VROSC.UIButton _closeButton
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::UIButton* closeButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.UIButton _clearButton
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::UIButton* clearButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.ObjectActivation _objectActivation
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::ObjectActivation* objectActivation;
    // Field size check
    static_assert(sizeof(::VROSC::ObjectActivation*) == 0x8);
    // private System.Single _openAnimationDuration
    // Size: 0x4
    // Offset: 0x48
    float openAnimationDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _closeAnimationDuration
    // Size: 0x4
    // Offset: 0x4C
    float closeAnimationDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Key[] _keys
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::GlobalNamespace::Key*> keys;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::Key*>) == 0x8);
    // private System.Collections.Generic.List`1<PunchKeyboard/HitKey> _hitKeys
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::GlobalNamespace::PunchKeyboard::HitKey*>* hitKeys;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::PunchKeyboard::HitKey*>*) == 0x8);
    // private System.Boolean _isActive
    // Size: 0x1
    // Offset: 0x60
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isActive and: filterTimer
    char __padding10[0x3] = {};
    // private System.Single _filterTimer
    // Size: 0x4
    // Offset: 0x64
    float filterTimer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _hasSubmitted
    // Size: 0x1
    // Offset: 0x68
    bool hasSubmitted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isMultiline
    // Size: 0x1
    // Offset: 0x69
    bool isMultiline;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public System.Boolean IsUppercase
    static bool _get_IsUppercase();
    // Set static field: static public System.Boolean IsUppercase
    static void _set_IsUppercase(bool value);
    // Get static field: static public System.Boolean IsSymbol
    static bool _get_IsSymbol();
    // Set static field: static public System.Boolean IsSymbol
    static void _set_IsSymbol(bool value);
    // Get static field: static public System.Action`1<Key> OnKeyPressed
    static ::System::Action_1<::GlobalNamespace::Key*>* _get_OnKeyPressed();
    // Set static field: static public System.Action`1<Key> OnKeyPressed
    static void _set_OnKeyPressed(::System::Action_1<::GlobalNamespace::Key*>* value);
    // Get static field: static public System.Action`1<System.String> OnTextSubmitted
    static ::System::Action_1<::StringW>* _get_OnTextSubmitted();
    // Set static field: static public System.Action`1<System.String> OnTextSubmitted
    static void _set_OnTextSubmitted(::System::Action_1<::StringW>* value);
    // Get static field: static public System.Action OnClosed
    static ::System::Action* _get_OnClosed();
    // Set static field: static public System.Action OnClosed
    static void _set_OnClosed(::System::Action* value);
    // static field const value: static public System.String KeyboardLayerName
    static constexpr const char* KeyboardLayerName = "Keyboard";
    // Get static field: static public System.String KeyboardLayerName
    static ::StringW _get_KeyboardLayerName();
    // Set static field: static public System.String KeyboardLayerName
    static void _set_KeyboardLayerName(::StringW value);
    // Get instance field reference: private PunchKeyboardInputField _previewInputField
    [[deprecated]] ::GlobalNamespace::PunchKeyboardInputField*& dyn__previewInputField();
    // Get instance field reference: private KeySoundController _keySoundController
    [[deprecated]] ::GlobalNamespace::KeySoundController*& dyn__keySoundController();
    // Get instance field reference: private System.Single _simultaneousKeyPressFilterDuration
    [[deprecated]] float& dyn__simultaneousKeyPressFilterDuration();
    // Get instance field reference: private VROSC.UIButton _closeButton
    [[deprecated]] ::VROSC::UIButton*& dyn__closeButton();
    // Get instance field reference: private VROSC.UIButton _clearButton
    [[deprecated]] ::VROSC::UIButton*& dyn__clearButton();
    // Get instance field reference: private VROSC.ObjectActivation _objectActivation
    [[deprecated]] ::VROSC::ObjectActivation*& dyn__objectActivation();
    // Get instance field reference: private System.Single _openAnimationDuration
    [[deprecated]] float& dyn__openAnimationDuration();
    // Get instance field reference: private System.Single _closeAnimationDuration
    [[deprecated]] float& dyn__closeAnimationDuration();
    // Get instance field reference: private Key[] _keys
    [[deprecated]] ::ArrayW<::GlobalNamespace::Key*>& dyn__keys();
    // Get instance field reference: private System.Collections.Generic.List`1<PunchKeyboard/HitKey> _hitKeys
    [[deprecated]] ::System::Collections::Generic::List_1<::GlobalNamespace::PunchKeyboard::HitKey*>*& dyn__hitKeys();
    // Get instance field reference: private System.Boolean _isActive
    [[deprecated]] bool& dyn__isActive();
    // Get instance field reference: private System.Single _filterTimer
    [[deprecated]] float& dyn__filterTimer();
    // Get instance field reference: private System.Boolean _hasSubmitted
    [[deprecated]] bool& dyn__hasSubmitted();
    // Get instance field reference: private System.Boolean _isMultiline
    [[deprecated]] bool& dyn__isMultiline();
    // private System.Void Awake()
    // Offset: 0xB2A8B4
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0xB2AB28
    void OnDestroy();
    // public System.Void Request(System.String startText, System.String infoText, System.Boolean multiline, System.Boolean secret)
    // Offset: 0xB2AD58
    void Request(::StringW startText, ::StringW infoText, bool multiline, bool secret);
    // public System.Void Release()
    // Offset: 0xB2B118
    void Release();
    // private System.Void Toggle()
    // Offset: 0xB2AEA0
    void Toggle();
    // private System.Void SetKeyHittersActive(System.Boolean active)
    // Offset: 0xB2B128
    void SetKeyHittersActive(bool active);
    // private System.Void MoveToFront()
    // Offset: 0xB2AFD0
    void MoveToFront();
    // private System.Void Update()
    // Offset: 0xB2B2DC
    void Update();
    // private System.Void KeyHit(Key hitKey, System.Single strength)
    // Offset: 0xB2B680
    void KeyHit(::GlobalNamespace::Key* hitKey, float strength);
    // private System.Void PressKey(Key pressedKey)
    // Offset: 0xB2B44C
    void PressKey(::GlobalNamespace::Key* pressedKey);
    // private System.Void SubmitText()
    // Offset: 0xB2B728
    void SubmitText();
    // private System.Void EnterPressed()
    // Offset: 0xB2B88C
    void EnterPressed();
    // private System.Void CloseButtonPressed()
    // Offset: 0xB2B7E4
    void CloseButtonPressed();
    // private System.Void ClearButtonPressed()
    // Offset: 0xB2B89C
    void ClearButtonPressed();
    // private System.Collections.IEnumerator Animate(System.Boolean open, System.Action callback)
    // Offset: 0xB2B258
    ::System::Collections::IEnumerator* Animate(bool open, ::System::Action* callback);
    // private System.Void <Toggle>b__25_0()
    // Offset: 0xB2B9D0
    void $Toggle$b__25_0();
    // public System.Void .ctor()
    // Offset: 0xB2B918
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PunchKeyboard* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PunchKeyboard::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PunchKeyboard*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xB2B9CC
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // PunchKeyboard
  #pragma pack(pop)
  static check_size<sizeof(PunchKeyboard), 105 + sizeof(bool)> __GlobalNamespace_PunchKeyboardSizeCheck;
  static_assert(sizeof(PunchKeyboard) == 0x6A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboard::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboard::*)()>(&GlobalNamespace::PunchKeyboard::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboard*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboard::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboard::*)()>(&GlobalNamespace::PunchKeyboard::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboard*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboard::Request
// Il2CppName: Request
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboard::*)(::StringW, ::StringW, bool, bool)>(&GlobalNamespace::PunchKeyboard::Request)> {
  static const MethodInfo* get() {
    static auto* startText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* infoText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* multiline = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* secret = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboard*), "Request", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startText, infoText, multiline, secret});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboard::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboard::*)()>(&GlobalNamespace::PunchKeyboard::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboard*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboard::Toggle
// Il2CppName: Toggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboard::*)()>(&GlobalNamespace::PunchKeyboard::Toggle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboard*), "Toggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboard::SetKeyHittersActive
// Il2CppName: SetKeyHittersActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboard::*)(bool)>(&GlobalNamespace::PunchKeyboard::SetKeyHittersActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboard*), "SetKeyHittersActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboard::MoveToFront
// Il2CppName: MoveToFront
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboard::*)()>(&GlobalNamespace::PunchKeyboard::MoveToFront)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboard*), "MoveToFront", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboard::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboard::*)()>(&GlobalNamespace::PunchKeyboard::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboard*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboard::KeyHit
// Il2CppName: KeyHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboard::*)(::GlobalNamespace::Key*, float)>(&GlobalNamespace::PunchKeyboard::KeyHit)> {
  static const MethodInfo* get() {
    static auto* hitKey = &::il2cpp_utils::GetClassFromName("", "Key")->byval_arg;
    static auto* strength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboard*), "KeyHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitKey, strength});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboard::PressKey
// Il2CppName: PressKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboard::*)(::GlobalNamespace::Key*)>(&GlobalNamespace::PunchKeyboard::PressKey)> {
  static const MethodInfo* get() {
    static auto* pressedKey = &::il2cpp_utils::GetClassFromName("", "Key")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboard*), "PressKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pressedKey});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboard::SubmitText
// Il2CppName: SubmitText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboard::*)()>(&GlobalNamespace::PunchKeyboard::SubmitText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboard*), "SubmitText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboard::EnterPressed
// Il2CppName: EnterPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboard::*)()>(&GlobalNamespace::PunchKeyboard::EnterPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboard*), "EnterPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboard::CloseButtonPressed
// Il2CppName: CloseButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboard::*)()>(&GlobalNamespace::PunchKeyboard::CloseButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboard*), "CloseButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboard::ClearButtonPressed
// Il2CppName: ClearButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboard::*)()>(&GlobalNamespace::PunchKeyboard::ClearButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboard*), "ClearButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboard::Animate
// Il2CppName: Animate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::PunchKeyboard::*)(bool, ::System::Action*)>(&GlobalNamespace::PunchKeyboard::Animate)> {
  static const MethodInfo* get() {
    static auto* open = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboard*), "Animate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{open, callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboard::$Toggle$b__25_0
// Il2CppName: <Toggle>b__25_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboard::*)()>(&GlobalNamespace::PunchKeyboard::$Toggle$b__25_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboard*), "<Toggle>b__25_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboard::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboard::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::PunchKeyboard::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboard*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
