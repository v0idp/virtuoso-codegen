// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TutorialSettings
  class TutorialSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TutorialSettings);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TutorialSettings*, "", "TutorialSettings");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: TutorialSettings
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: 77E540
  class TutorialSettings : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // [HeaderAttribute] Offset: 0x782E74
    // private UnityEngine.AnimationCurve _pattern
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AnimationCurve* pattern;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single _patternDuration
    // Size: 0x4
    // Offset: 0x20
    float patternDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color _flashColor
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::Color flashColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.AnimationCurve _pattern
    [[deprecated]] ::UnityEngine::AnimationCurve*& dyn__pattern();
    // Get instance field reference: private System.Single _patternDuration
    [[deprecated]] float& dyn__patternDuration();
    // Get instance field reference: private UnityEngine.Color _flashColor
    [[deprecated]] ::UnityEngine::Color& dyn__flashColor();
    // public UnityEngine.Color get_FlashColor()
    // Offset: 0xA31FB0
    ::UnityEngine::Color get_FlashColor();
    // public System.Single GetBlink()
    // Offset: 0xA31FBC
    float GetBlink();
    // System.Single GetNextBlinkStart()
    // Offset: 0xA3200C
    float GetNextBlinkStart();
    // public System.Void .ctor()
    // Offset: 0xA32068
    // Implemented from: UnityEngine.ScriptableObject
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TutorialSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TutorialSettings*, creationType>()));
    }
  }; // TutorialSettings
  #pragma pack(pop)
  static check_size<sizeof(TutorialSettings), 36 + sizeof(::UnityEngine::Color)> __GlobalNamespace_TutorialSettingsSizeCheck;
  static_assert(sizeof(TutorialSettings) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TutorialSettings::get_FlashColor
// Il2CppName: get_FlashColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::TutorialSettings::*)()>(&GlobalNamespace::TutorialSettings::get_FlashColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialSettings*), "get_FlashColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialSettings::GetBlink
// Il2CppName: GetBlink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::TutorialSettings::*)()>(&GlobalNamespace::TutorialSettings::GetBlink)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialSettings*), "GetBlink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialSettings::GetNextBlinkStart
// Il2CppName: GetNextBlinkStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::TutorialSettings::*)()>(&GlobalNamespace::TutorialSettings::GetNextBlinkStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialSettings*), "GetNextBlinkStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
