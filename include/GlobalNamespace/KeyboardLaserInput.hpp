// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.Clickable
#include "VROSC/Clickable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Key
  class Key;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: KeyboardLaserInput
  class KeyboardLaserInput;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::KeyboardLaserInput);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::KeyboardLaserInput*, "", "KeyboardLaserInput");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: KeyboardLaserInput
  // [TokenAttribute] Offset: FFFFFFFF
  class KeyboardLaserInput : public ::VROSC::Clickable {
    public:
    public:
    // private Key _key
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::Key* key;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Key*) == 0x8);
    // private UnityEngine.Collider _collider
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Collider* collider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // private System.Single _startRepeatedPressesDelay
    // Size: 0x4
    // Offset: 0x98
    float startRepeatedPressesDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _repeatedPressDelay
    // Size: 0x4
    // Offset: 0x9C
    float repeatedPressDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _repeatedClickStartTime
    // Size: 0x4
    // Offset: 0xA0
    float repeatedClickStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _sentRepeatedClicks
    // Size: 0x4
    // Offset: 0xA4
    int sentRepeatedClicks;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private Key _key
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Key*& dyn__key();
    // Get instance field reference: private UnityEngine.Collider _collider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn__collider();
    // Get instance field reference: private System.Single _startRepeatedPressesDelay
    [[deprecated("Use field access instead!")]] float& dyn__startRepeatedPressesDelay();
    // Get instance field reference: private System.Single _repeatedPressDelay
    [[deprecated("Use field access instead!")]] float& dyn__repeatedPressDelay();
    // Get instance field reference: private System.Single _repeatedClickStartTime
    [[deprecated("Use field access instead!")]] float& dyn__repeatedClickStartTime();
    // Get instance field reference: private System.Int32 _sentRepeatedClicks
    [[deprecated("Use field access instead!")]] int& dyn__sentRepeatedClicks();
    // private System.Void Awake()
    // Offset: 0x194C570
    void Awake();
    // private System.Void Clicked(System.Boolean clicked)
    // Offset: 0x194C74C
    void Clicked(bool clicked);
    // private System.Void SettingsUpdated()
    // Offset: 0x194C6D0
    void SettingsUpdated();
    // private System.Void Update()
    // Offset: 0x194C7A0
    void Update();
    // private System.Boolean ShouldSendRepeatedClick()
    // Offset: 0x194C800
    bool ShouldSendRepeatedClick();
    // private System.Void OnDestroy()
    // Offset: 0x194C864
    void OnDestroy();
    // public override System.Boolean get_InteractionStopsLaser()
    // Offset: 0x194C568
    // Implemented from: VROSC.Clickable
    // Base method: System.Boolean Clickable::get_InteractionStopsLaser()
    bool get_InteractionStopsLaser();
    // public System.Void .ctor()
    // Offset: 0x194C9C0
    // Implemented from: VROSC.Clickable
    // Base method: System.Void Clickable::.ctor()
    // Base method: System.Void Interactable::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static KeyboardLaserInput* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeyboardLaserInput::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<KeyboardLaserInput*, creationType>()));
    }
  }; // KeyboardLaserInput
  #pragma pack(pop)
  static check_size<sizeof(KeyboardLaserInput), 164 + sizeof(int)> __GlobalNamespace_KeyboardLaserInputSizeCheck;
  static_assert(sizeof(KeyboardLaserInput) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::KeyboardLaserInput::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::KeyboardLaserInput::*)()>(&GlobalNamespace::KeyboardLaserInput::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::KeyboardLaserInput*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::KeyboardLaserInput::Clicked
// Il2CppName: Clicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::KeyboardLaserInput::*)(bool)>(&GlobalNamespace::KeyboardLaserInput::Clicked)> {
  static const MethodInfo* get() {
    static auto* clicked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::KeyboardLaserInput*), "Clicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clicked});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::KeyboardLaserInput::SettingsUpdated
// Il2CppName: SettingsUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::KeyboardLaserInput::*)()>(&GlobalNamespace::KeyboardLaserInput::SettingsUpdated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::KeyboardLaserInput*), "SettingsUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::KeyboardLaserInput::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::KeyboardLaserInput::*)()>(&GlobalNamespace::KeyboardLaserInput::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::KeyboardLaserInput*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::KeyboardLaserInput::ShouldSendRepeatedClick
// Il2CppName: ShouldSendRepeatedClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::KeyboardLaserInput::*)()>(&GlobalNamespace::KeyboardLaserInput::ShouldSendRepeatedClick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::KeyboardLaserInput*), "ShouldSendRepeatedClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::KeyboardLaserInput::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::KeyboardLaserInput::*)()>(&GlobalNamespace::KeyboardLaserInput::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::KeyboardLaserInput*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::KeyboardLaserInput::get_InteractionStopsLaser
// Il2CppName: get_InteractionStopsLaser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::KeyboardLaserInput::*)()>(&GlobalNamespace::KeyboardLaserInput::get_InteractionStopsLaser)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::KeyboardLaserInput*), "get_InteractionStopsLaser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::KeyboardLaserInput::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
