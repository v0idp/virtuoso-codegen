// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVRPlugin/InsightPassthroughStyleFlags
#include "GlobalNamespace/OVRPlugin_InsightPassthroughStyleFlags.hpp"
// Including type: OVRPlugin/Colorf
#include "GlobalNamespace/OVRPlugin_Colorf.hpp"
// Including type: OVRPlugin/InsightPassthroughColorMapType
#include "GlobalNamespace/OVRPlugin_InsightPassthroughColorMapType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::InsightPassthroughStyle, "", "OVRPlugin/InsightPassthroughStyle");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/InsightPassthroughStyle
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPlugin::InsightPassthroughStyle/*, public ::System::ValueType*/ {
    public:
    public:
    // public OVRPlugin/InsightPassthroughStyleFlags Flags
    // Size: 0x4
    // Offset: 0x0
    ::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags Flags;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags) == 0x4);
    // public System.Single TextureOpacityFactor
    // Size: 0x4
    // Offset: 0x4
    float TextureOpacityFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public OVRPlugin/Colorf EdgeColor
    // Size: 0x10
    // Offset: 0x8
    ::GlobalNamespace::OVRPlugin::Colorf EdgeColor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::Colorf) == 0x10);
    // public OVRPlugin/InsightPassthroughColorMapType TextureColorMapType
    // Size: 0x4
    // Offset: 0x18
    ::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType TextureColorMapType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType) == 0x4);
    // public System.UInt32 TextureColorMapDataSize
    // Size: 0x4
    // Offset: 0x1C
    uint TextureColorMapDataSize;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.IntPtr TextureColorMapData
    // Size: 0x8
    // Offset: 0x20
    ::System::IntPtr TextureColorMapData;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: InsightPassthroughStyle
    constexpr InsightPassthroughStyle(::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags Flags_ = {}, float TextureOpacityFactor_ = {}, ::GlobalNamespace::OVRPlugin::Colorf EdgeColor_ = {}, ::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType TextureColorMapType_ = {}, uint TextureColorMapDataSize_ = {}, ::System::IntPtr TextureColorMapData_ = {}) noexcept : Flags{Flags_}, TextureOpacityFactor{TextureOpacityFactor_}, EdgeColor{EdgeColor_}, TextureColorMapType{TextureColorMapType_}, TextureColorMapDataSize{TextureColorMapDataSize_}, TextureColorMapData{TextureColorMapData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public OVRPlugin/InsightPassthroughStyleFlags Flags
    ::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags& dyn_Flags();
    // Get instance field reference: public System.Single TextureOpacityFactor
    float& dyn_TextureOpacityFactor();
    // Get instance field reference: public OVRPlugin/Colorf EdgeColor
    ::GlobalNamespace::OVRPlugin::Colorf& dyn_EdgeColor();
    // Get instance field reference: public OVRPlugin/InsightPassthroughColorMapType TextureColorMapType
    ::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType& dyn_TextureColorMapType();
    // Get instance field reference: public System.UInt32 TextureColorMapDataSize
    uint& dyn_TextureColorMapDataSize();
    // Get instance field reference: public System.IntPtr TextureColorMapData
    ::System::IntPtr& dyn_TextureColorMapData();
  }; // OVRPlugin/InsightPassthroughStyle
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::InsightPassthroughStyle), 32 + sizeof(::System::IntPtr)> __GlobalNamespace_OVRPlugin_InsightPassthroughStyleSizeCheck;
  static_assert(sizeof(OVRPlugin::InsightPassthroughStyle) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
