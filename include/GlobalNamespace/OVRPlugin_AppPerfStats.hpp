// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVRPlugin/AppPerfFrameStats
#include "GlobalNamespace/OVRPlugin_AppPerfFrameStats.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::AppPerfStats, "", "OVRPlugin/AppPerfStats");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/AppPerfStats
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPlugin::AppPerfStats/*, public ::System::ValueType*/ {
    public:
    public:
    // public OVRPlugin/AppPerfFrameStats[] FrameStats
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<::GlobalNamespace::OVRPlugin::AppPerfFrameStats> FrameStats;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::OVRPlugin::AppPerfFrameStats>) == 0x8);
    // public System.Int32 FrameStatsCount
    // Size: 0x4
    // Offset: 0x8
    int FrameStatsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public OVRPlugin/Bool AnyFrameStatsDropped
    // Size: 0x4
    // Offset: 0xC
    ::GlobalNamespace::OVRPlugin::Bool AnyFrameStatsDropped;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bool) == 0x4);
    // public System.Single AdaptiveGpuPerformanceScale
    // Size: 0x4
    // Offset: 0x10
    float AdaptiveGpuPerformanceScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: AppPerfStats
    constexpr AppPerfStats(::ArrayW<::GlobalNamespace::OVRPlugin::AppPerfFrameStats> FrameStats_ = ::ArrayW<::GlobalNamespace::OVRPlugin::AppPerfFrameStats>(static_cast<void*>(nullptr)), int FrameStatsCount_ = {}, ::GlobalNamespace::OVRPlugin::Bool AnyFrameStatsDropped_ = {}, float AdaptiveGpuPerformanceScale_ = {}) noexcept : FrameStats{FrameStats_}, FrameStatsCount{FrameStatsCount_}, AnyFrameStatsDropped{AnyFrameStatsDropped_}, AdaptiveGpuPerformanceScale{AdaptiveGpuPerformanceScale_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public OVRPlugin/AppPerfFrameStats[] FrameStats
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRPlugin::AppPerfFrameStats>& dyn_FrameStats();
    // Get instance field reference: public System.Int32 FrameStatsCount
    [[deprecated("Use field access instead!")]] int& dyn_FrameStatsCount();
    // Get instance field reference: public OVRPlugin/Bool AnyFrameStatsDropped
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bool& dyn_AnyFrameStatsDropped();
    // Get instance field reference: public System.Single AdaptiveGpuPerformanceScale
    [[deprecated("Use field access instead!")]] float& dyn_AdaptiveGpuPerformanceScale();
  }; // OVRPlugin/AppPerfStats
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::AppPerfStats), 16 + sizeof(float)> __GlobalNamespace_OVRPlugin_AppPerfStatsSizeCheck;
  static_assert(sizeof(OVRPlugin::AppPerfStats) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
