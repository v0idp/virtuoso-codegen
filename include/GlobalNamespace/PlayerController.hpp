// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: SocialPlatformManager
#include "GlobalNamespace/SocialPlatformManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PlayerController
  class PlayerController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PlayerController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PlayerController*, "", "PlayerController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD1
  #pragma pack(push, 1)
  // Autogenerated type: PlayerController
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayerController : public ::GlobalNamespace::SocialPlatformManager {
    public:
    public:
    // public UnityEngine.Camera spyCamera
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::Camera* spyCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private UnityEngine.GameObject cameraRig
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::GameObject* cameraRig;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean showUI
    // Size: 0x1
    // Offset: 0xD0
    bool showUI;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.Camera spyCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_spyCamera();
    // Get instance field reference: private UnityEngine.GameObject cameraRig
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_cameraRig();
    // Get instance field reference: private System.Boolean showUI
    [[deprecated("Use field access instead!")]] bool& dyn_showUI();
    // private System.Void checkInput()
    // Offset: 0xAE1E2C
    void checkInput();
    // private System.Void ToggleCamera()
    // Offset: 0xAE1FC8
    void ToggleCamera();
    // private System.Void ToggleUI()
    // Offset: 0xAE2048
    void ToggleUI();
    // public System.Void .ctor()
    // Offset: 0xAE209C
    // Implemented from: SocialPlatformManager
    // Base method: System.Void SocialPlatformManager::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerController*, creationType>()));
    }
    // public override System.Void Awake()
    // Offset: 0xAE1D90
    // Implemented from: SocialPlatformManager
    // Base method: System.Void SocialPlatformManager::Awake()
    void Awake();
    // public override System.Void Start()
    // Offset: 0xAE1DCC
    // Implemented from: SocialPlatformManager
    // Base method: System.Void SocialPlatformManager::Start()
    void Start();
    // public override System.Void Update()
    // Offset: 0xAE1E04
    // Implemented from: SocialPlatformManager
    // Base method: System.Void SocialPlatformManager::Update()
    void Update();
  }; // PlayerController
  #pragma pack(pop)
  static check_size<sizeof(PlayerController), 208 + sizeof(bool)> __GlobalNamespace_PlayerControllerSizeCheck;
  static_assert(sizeof(PlayerController) == 0xD1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlayerController::checkInput
// Il2CppName: checkInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerController::*)()>(&GlobalNamespace::PlayerController::checkInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerController*), "checkInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerController::ToggleCamera
// Il2CppName: ToggleCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerController::*)()>(&GlobalNamespace::PlayerController::ToggleCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerController*), "ToggleCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerController::ToggleUI
// Il2CppName: ToggleUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerController::*)()>(&GlobalNamespace::PlayerController::ToggleUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerController*), "ToggleUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PlayerController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerController::*)()>(&GlobalNamespace::PlayerController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerController::*)()>(&GlobalNamespace::PlayerController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerController::*)()>(&GlobalNamespace::PlayerController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
