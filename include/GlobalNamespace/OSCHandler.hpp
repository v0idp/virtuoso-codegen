// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: ClientLog
#include "GlobalNamespace/ClientLog.hpp"
// Including type: ServerLog
#include "GlobalNamespace/ServerLog.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Forward declaring namespace: UnityOSC
namespace UnityOSC {
  // Forward declaring type: OSCServer
  class OSCServer;
  // Forward declaring type: OSCPacket
  class OSCPacket;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OSCHandler
  class OSCHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OSCHandler);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OSCHandler*, "", "OSCHandler");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: OSCHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class OSCHandler : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Collections.Generic.Dictionary`2<System.String,ClientLog> _clients
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::ClientLog>* clients;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::ClientLog>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,ServerLog> _servers
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::ServerLog>* servers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::ServerLog>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private OSCHandler _instance
    static ::GlobalNamespace::OSCHandler* _get__instance();
    // Set static field: static private OSCHandler _instance
    static void _set__instance(::GlobalNamespace::OSCHandler* value);
    // static field const value: static private System.Int32 _loglength
    static constexpr const int _loglength = 25;
    // Get static field: static private System.Int32 _loglength
    static int _get__loglength();
    // Set static field: static private System.Int32 _loglength
    static void _set__loglength(int value);
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,ClientLog> _clients
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::ClientLog>*& dyn__clients();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,ServerLog> _servers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::ServerLog>*& dyn__servers();
    // static public OSCHandler get_Instance()
    // Offset: 0xC5BD94
    static ::GlobalNamespace::OSCHandler* get_Instance();
    // public System.Collections.Generic.Dictionary`2<System.String,ClientLog> get_Clients()
    // Offset: 0xC5BEF8
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::ClientLog>* get_Clients();
    // public System.Collections.Generic.Dictionary`2<System.String,ServerLog> get_Servers()
    // Offset: 0xC5BF00
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::ServerLog>* get_Servers();
    // static private System.Void .cctor()
    // Offset: 0xC5BCD8
    static void _cctor();
    // private System.Void .ctor()
    // Offset: 0xC5BCDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OSCHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OSCHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OSCHandler*, creationType>()));
    }
    // public System.Void Init()
    // Offset: 0xC5BEF4
    void Init();
    // private System.Void OnApplicationQuit()
    // Offset: 0xC5BF08
    void OnApplicationQuit();
    // public System.Void CreateClient(System.String clientId, System.Net.IPAddress destination, System.Int32 port)
    // Offset: 0xC5C224
    void CreateClient(::StringW clientId, ::System::Net::IPAddress* destination, int port);
    // public System.Void CreateServer(System.String serverId, System.Int32 port)
    // Offset: 0xC5C9A0
    void CreateServer(::StringW serverId, int port);
    // private System.Void OnPacketReceived(UnityOSC.OSCServer server, UnityOSC.OSCPacket packet)
    // Offset: 0xC5CCD4
    void OnPacketReceived(::UnityOSC::OSCServer* server, ::UnityOSC::OSCPacket* packet);
    // public System.Void SendMessageToClient(System.String clientId, System.String address, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SendMessageToClient(::StringW clientId, ::StringW address, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OSCHandler::SendMessageToClient");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMessageToClient", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clientId), ::il2cpp_utils::ExtractType(address), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, clientId, address, value);
    }
    // public System.Void SendMessageToClient(System.String clientId, System.String address, System.Collections.Generic.List`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SendMessageToClient(::StringW clientId, ::StringW address, ::System::Collections::Generic::List_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OSCHandler::SendMessageToClient");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMessageToClient", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clientId), ::il2cpp_utils::ExtractType(address), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, clientId, address, values);
    }
    // public System.Void UpdateLogs()
    // Offset: 0xC5CCD8
    void UpdateLogs();
    // private System.String DataToString(System.Collections.Generic.List`1<System.Object> data)
    // Offset: 0xC5C898
    ::StringW DataToString(::System::Collections::Generic::List_1<::Il2CppObject*>* data);
    // private System.String FormatMilliseconds(System.Int32 milliseconds)
    // Offset: 0xC5C7F8
    ::StringW FormatMilliseconds(int milliseconds);
  }; // OSCHandler
  #pragma pack(pop)
  static check_size<sizeof(OSCHandler), 32 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::ServerLog>*)> __GlobalNamespace_OSCHandlerSizeCheck;
  static_assert(sizeof(OSCHandler) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OSCHandler::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OSCHandler* (*)()>(&GlobalNamespace::OSCHandler::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OSCHandler*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OSCHandler::get_Clients
// Il2CppName: get_Clients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::ClientLog>* (GlobalNamespace::OSCHandler::*)()>(&GlobalNamespace::OSCHandler::get_Clients)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OSCHandler*), "get_Clients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OSCHandler::get_Servers
// Il2CppName: get_Servers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::ServerLog>* (GlobalNamespace::OSCHandler::*)()>(&GlobalNamespace::OSCHandler::get_Servers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OSCHandler*), "get_Servers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OSCHandler::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OSCHandler::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OSCHandler*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OSCHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OSCHandler::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OSCHandler::*)()>(&GlobalNamespace::OSCHandler::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OSCHandler*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OSCHandler::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OSCHandler::*)()>(&GlobalNamespace::OSCHandler::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OSCHandler*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OSCHandler::CreateClient
// Il2CppName: CreateClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OSCHandler::*)(::StringW, ::System::Net::IPAddress*, int)>(&GlobalNamespace::OSCHandler::CreateClient)> {
  static const MethodInfo* get() {
    static auto* clientId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->byval_arg;
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OSCHandler*), "CreateClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clientId, destination, port});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OSCHandler::CreateServer
// Il2CppName: CreateServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OSCHandler::*)(::StringW, int)>(&GlobalNamespace::OSCHandler::CreateServer)> {
  static const MethodInfo* get() {
    static auto* serverId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OSCHandler*), "CreateServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serverId, port});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OSCHandler::OnPacketReceived
// Il2CppName: OnPacketReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OSCHandler::*)(::UnityOSC::OSCServer*, ::UnityOSC::OSCPacket*)>(&GlobalNamespace::OSCHandler::OnPacketReceived)> {
  static const MethodInfo* get() {
    static auto* server = &::il2cpp_utils::GetClassFromName("UnityOSC", "OSCServer")->byval_arg;
    static auto* packet = &::il2cpp_utils::GetClassFromName("UnityOSC", "OSCPacket")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OSCHandler*), "OnPacketReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{server, packet});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OSCHandler::SendMessageToClient
// Il2CppName: SendMessageToClient
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OSCHandler::SendMessageToClient
// Il2CppName: SendMessageToClient
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OSCHandler::UpdateLogs
// Il2CppName: UpdateLogs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OSCHandler::*)()>(&GlobalNamespace::OSCHandler::UpdateLogs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OSCHandler*), "UpdateLogs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OSCHandler::DataToString
// Il2CppName: DataToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::OSCHandler::*)(::System::Collections::Generic::List_1<::Il2CppObject*>*)>(&GlobalNamespace::OSCHandler::DataToString)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OSCHandler*), "DataToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OSCHandler::FormatMilliseconds
// Il2CppName: FormatMilliseconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::OSCHandler::*)(int)>(&GlobalNamespace::OSCHandler::FormatMilliseconds)> {
  static const MethodInfo* get() {
    static auto* milliseconds = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OSCHandler*), "FormatMilliseconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{milliseconds});
  }
};
