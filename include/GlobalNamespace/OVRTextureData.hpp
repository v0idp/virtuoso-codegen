// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVRTextureFormat
#include "GlobalNamespace/OVRTextureFormat.hpp"
// Including type: UnityEngine.TextureFormat
#include "UnityEngine/TextureFormat.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRTextureData
  struct OVRTextureData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTextureData, "", "OVRTextureData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRTextureData
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRTextureData/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Byte[] data
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<uint8_t> data;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.Int32 width
    // Size: 0x4
    // Offset: 0x8
    int width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 height
    // Size: 0x4
    // Offset: 0xC
    int height;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public OVRTextureFormat format
    // Size: 0x4
    // Offset: 0x10
    ::GlobalNamespace::OVRTextureFormat format;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRTextureFormat) == 0x4);
    // public UnityEngine.TextureFormat transcodedFormat
    // Size: 0x4
    // Offset: 0x14
    ::UnityEngine::TextureFormat transcodedFormat;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextureFormat) == 0x4);
    public:
    // Creating value type constructor for type: OVRTextureData
    constexpr OVRTextureData(::ArrayW<uint8_t> data_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr)), int width_ = {}, int height_ = {}, ::GlobalNamespace::OVRTextureFormat format_ = {}, ::UnityEngine::TextureFormat transcodedFormat_ = {}) noexcept : data{data_}, width{width_}, height{height_}, format{format_}, transcodedFormat{transcodedFormat_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Byte[] data
    ::ArrayW<uint8_t>& dyn_data();
    // Get instance field reference: public System.Int32 width
    int& dyn_width();
    // Get instance field reference: public System.Int32 height
    int& dyn_height();
    // Get instance field reference: public OVRTextureFormat format
    ::GlobalNamespace::OVRTextureFormat& dyn_format();
    // Get instance field reference: public UnityEngine.TextureFormat transcodedFormat
    ::UnityEngine::TextureFormat& dyn_transcodedFormat();
  }; // OVRTextureData
  #pragma pack(pop)
  static check_size<sizeof(OVRTextureData), 20 + sizeof(::UnityEngine::TextureFormat)> __GlobalNamespace_OVRTextureDataSizeCheck;
  static_assert(sizeof(OVRTextureData) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
