// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OvrAvatarComponent
#include "GlobalNamespace/OvrAvatarComponent_.hpp"
// Including type: ovrAvatarControllerComponent
#include "GlobalNamespace/ovrAvatarControllerComponent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OvrAvatarTouchController
  class OvrAvatarTouchController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OvrAvatarTouchController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OvrAvatarTouchController*, "", "OvrAvatarTouchController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC8
  #pragma pack(push, 1)
  // Autogenerated type: OvrAvatarTouchController
  // [TokenAttribute] Offset: FFFFFFFF
  class OvrAvatarTouchController : public ::GlobalNamespace::OvrAvatarComponent_ {
    public:
    public:
    // public System.Boolean isLeftHand
    // Size: 0x1
    // Offset: 0x70
    bool isLeftHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isLeftHand and: component
    char __padding0[0x7] = {};
    // private ovrAvatarControllerComponent component
    // Size: 0x50
    // Offset: 0x78
    ::GlobalNamespace::ovrAvatarControllerComponent component;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ovrAvatarControllerComponent) == 0x50);
    public:
    // Get instance field reference: public System.Boolean isLeftHand
    [[deprecated]] bool& dyn_isLeftHand();
    // Get instance field reference: private ovrAvatarControllerComponent component
    [[deprecated]] ::GlobalNamespace::ovrAvatarControllerComponent& dyn_component();
    // private System.Void Update()
    // Offset: 0xAD9C94
    void Update();
    // public System.Void .ctor()
    // Offset: 0xAD9DFC
    // Implemented from: OvrAvatarComponent
    // Base method: System.Void OvrAvatarComponent_::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OvrAvatarTouchController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OvrAvatarTouchController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OvrAvatarTouchController*, creationType>()));
    }
  }; // OvrAvatarTouchController
  #pragma pack(pop)
  static check_size<sizeof(OvrAvatarTouchController), 120 + sizeof(::GlobalNamespace::ovrAvatarControllerComponent)> __GlobalNamespace_OvrAvatarTouchControllerSizeCheck;
  static_assert(sizeof(OvrAvatarTouchController) == 0xC8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarTouchController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarTouchController::*)()>(&GlobalNamespace::OvrAvatarTouchController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarTouchController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarTouchController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
