// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: TimeOfDayType
#include "GlobalNamespace/TimeOfDayType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TimeOfDayPreset
  class TimeOfDayPreset;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: Light
  class Light;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: EnvironmentManager
  class EnvironmentManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::EnvironmentManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::EnvironmentManager*, "", "EnvironmentManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x74
  #pragma pack(push, 1)
  // Autogenerated type: EnvironmentManager
  // [TokenAttribute] Offset: FFFFFFFF
  class EnvironmentManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::EnvironmentManager::$AnimateLight$d__14
    class $AnimateLight$d__14;
    public:
    // public TimeOfDayPreset[] TimeOfDayPresets
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::GlobalNamespace::TimeOfDayPreset*> TimeOfDayPresets;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::TimeOfDayPreset*>) == 0x8);
    // public UnityEngine.GameObject DirLightObject
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* DirLightObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Coroutine _activeCoroutine
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Coroutine* activeCoroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private UnityEngine.Light _activeLight
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Light* activeLight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Light*) == 0x8);
    // private UnityEngine.Material _skyboxMaterial
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Material* skyboxMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material SunMaterial
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Material* SunMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.GameObject SunObject
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* SunObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject AnimationPivot
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* AnimationPivot;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Material _sunMaterial
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Material* sunMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private TimeOfDayPreset _currentLighting
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::TimeOfDayPreset* currentLighting;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TimeOfDayPreset*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<TimeOfDayType,TimeOfDayPreset> _presetsMap
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::TimeOfDayType, ::GlobalNamespace::TimeOfDayPreset*>* presetsMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::TimeOfDayType, ::GlobalNamespace::TimeOfDayPreset*>*) == 0x8);
    // private System.Int32 cycleIndex
    // Size: 0x4
    // Offset: 0x70
    int cycleIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public TimeOfDayPreset[] TimeOfDayPresets
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TimeOfDayPreset*>& dyn_TimeOfDayPresets();
    // Get instance field reference: public UnityEngine.GameObject DirLightObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_DirLightObject();
    // Get instance field reference: private UnityEngine.Coroutine _activeCoroutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn__activeCoroutine();
    // Get instance field reference: private UnityEngine.Light _activeLight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Light*& dyn__activeLight();
    // Get instance field reference: private UnityEngine.Material _skyboxMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__skyboxMaterial();
    // Get instance field reference: public UnityEngine.Material SunMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_SunMaterial();
    // Get instance field reference: public UnityEngine.GameObject SunObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_SunObject();
    // Get instance field reference: public UnityEngine.GameObject AnimationPivot
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_AnimationPivot();
    // Get instance field reference: private UnityEngine.Material _sunMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__sunMaterial();
    // Get instance field reference: private TimeOfDayPreset _currentLighting
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeOfDayPreset*& dyn__currentLighting();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<TimeOfDayType,TimeOfDayPreset> _presetsMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::TimeOfDayType, ::GlobalNamespace::TimeOfDayPreset*>*& dyn__presetsMap();
    // Get instance field reference: private System.Int32 cycleIndex
    [[deprecated("Use field access instead!")]] int& dyn_cycleIndex();
    // public System.Void .ctor()
    // Offset: 0x8EF0B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EnvironmentManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EnvironmentManager*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x8EEB34
    void Start();
    // private System.Void TransitionTimeOfDay(TimeOfDayType timeOfDay, System.Single animationTime)
    // Offset: 0x8EEE64
    void TransitionTimeOfDay(::GlobalNamespace::TimeOfDayType timeOfDay, float animationTime);
    // private System.Collections.IEnumerator AnimateLight(TimeOfDayType timeOfDay, System.Single animationTime)
    // Offset: 0x8EEECC
    ::System::Collections::IEnumerator* AnimateLight(::GlobalNamespace::TimeOfDayType timeOfDay, float animationTime);
    // private System.Void SetTimeOfDay(TimeOfDayType timeOfDay)
    // Offset: 0x8EED18
    void SetTimeOfDay(::GlobalNamespace::TimeOfDayType timeOfDay);
    // public System.Void CycleTimeOfDay()
    // Offset: 0x8EEF58
    void CycleTimeOfDay();
    // public System.Void CycleTimeOfDayTransition()
    // Offset: 0x8EEFD8
    void CycleTimeOfDayTransition();
    // private System.Void Update()
    // Offset: 0x8EF05C
    void Update();
  }; // EnvironmentManager
  #pragma pack(pop)
  static check_size<sizeof(EnvironmentManager), 112 + sizeof(int)> __GlobalNamespace_EnvironmentManagerSizeCheck;
  static_assert(sizeof(EnvironmentManager) == 0x74);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::EnvironmentManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::EnvironmentManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EnvironmentManager::*)()>(&GlobalNamespace::EnvironmentManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EnvironmentManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EnvironmentManager::TransitionTimeOfDay
// Il2CppName: TransitionTimeOfDay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EnvironmentManager::*)(::GlobalNamespace::TimeOfDayType, float)>(&GlobalNamespace::EnvironmentManager::TransitionTimeOfDay)> {
  static const MethodInfo* get() {
    static auto* timeOfDay = &::il2cpp_utils::GetClassFromName("", "TimeOfDayType")->byval_arg;
    static auto* animationTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EnvironmentManager*), "TransitionTimeOfDay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeOfDay, animationTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EnvironmentManager::AnimateLight
// Il2CppName: AnimateLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::EnvironmentManager::*)(::GlobalNamespace::TimeOfDayType, float)>(&GlobalNamespace::EnvironmentManager::AnimateLight)> {
  static const MethodInfo* get() {
    static auto* timeOfDay = &::il2cpp_utils::GetClassFromName("", "TimeOfDayType")->byval_arg;
    static auto* animationTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EnvironmentManager*), "AnimateLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeOfDay, animationTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EnvironmentManager::SetTimeOfDay
// Il2CppName: SetTimeOfDay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EnvironmentManager::*)(::GlobalNamespace::TimeOfDayType)>(&GlobalNamespace::EnvironmentManager::SetTimeOfDay)> {
  static const MethodInfo* get() {
    static auto* timeOfDay = &::il2cpp_utils::GetClassFromName("", "TimeOfDayType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EnvironmentManager*), "SetTimeOfDay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeOfDay});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EnvironmentManager::CycleTimeOfDay
// Il2CppName: CycleTimeOfDay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EnvironmentManager::*)()>(&GlobalNamespace::EnvironmentManager::CycleTimeOfDay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EnvironmentManager*), "CycleTimeOfDay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EnvironmentManager::CycleTimeOfDayTransition
// Il2CppName: CycleTimeOfDayTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EnvironmentManager::*)()>(&GlobalNamespace::EnvironmentManager::CycleTimeOfDayTransition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EnvironmentManager*), "CycleTimeOfDayTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EnvironmentManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EnvironmentManager::*)()>(&GlobalNamespace::EnvironmentManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EnvironmentManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
