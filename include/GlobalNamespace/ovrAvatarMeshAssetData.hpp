// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: ovrAvatarSkinnedMeshPose
#include "GlobalNamespace/ovrAvatarSkinnedMeshPose.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ovrAvatarMeshAssetData
  struct ovrAvatarMeshAssetData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ovrAvatarMeshAssetData, "", "ovrAvatarMeshAssetData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ovrAvatarMeshAssetData
  // [TokenAttribute] Offset: FFFFFFFF
  struct ovrAvatarMeshAssetData/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt32 vertexCount
    // Size: 0x4
    // Offset: 0x0
    uint vertexCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: vertexCount and: vertexBuffer
    char __padding0[0x4] = {};
    // public System.IntPtr vertexBuffer
    // Size: 0x8
    // Offset: 0x8
    ::System::IntPtr vertexBuffer;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.UInt32 indexCount
    // Size: 0x4
    // Offset: 0x10
    uint indexCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: indexCount and: indexBuffer
    char __padding2[0x4] = {};
    // public System.IntPtr indexBuffer
    // Size: 0x8
    // Offset: 0x18
    ::System::IntPtr indexBuffer;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public ovrAvatarSkinnedMeshPose skinnedBindPose
    // Size: 0x20
    // Offset: 0x20
    ::GlobalNamespace::ovrAvatarSkinnedMeshPose skinnedBindPose;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ovrAvatarSkinnedMeshPose) == 0x20);
    public:
    // Creating value type constructor for type: ovrAvatarMeshAssetData
    constexpr ovrAvatarMeshAssetData(uint vertexCount_ = {}, ::System::IntPtr vertexBuffer_ = {}, uint indexCount_ = {}, ::System::IntPtr indexBuffer_ = {}, ::GlobalNamespace::ovrAvatarSkinnedMeshPose skinnedBindPose_ = {}) noexcept : vertexCount{vertexCount_}, vertexBuffer{vertexBuffer_}, indexCount{indexCount_}, indexBuffer{indexBuffer_}, skinnedBindPose{skinnedBindPose_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt32 vertexCount
    [[deprecated("Use field access instead!")]] uint& dyn_vertexCount();
    // Get instance field reference: public System.IntPtr vertexBuffer
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_vertexBuffer();
    // Get instance field reference: public System.UInt32 indexCount
    [[deprecated("Use field access instead!")]] uint& dyn_indexCount();
    // Get instance field reference: public System.IntPtr indexBuffer
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_indexBuffer();
    // Get instance field reference: public ovrAvatarSkinnedMeshPose skinnedBindPose
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ovrAvatarSkinnedMeshPose& dyn_skinnedBindPose();
  }; // ovrAvatarMeshAssetData
  #pragma pack(pop)
  static check_size<sizeof(ovrAvatarMeshAssetData), 32 + sizeof(::GlobalNamespace::ovrAvatarSkinnedMeshPose)> __GlobalNamespace_ovrAvatarMeshAssetDataSizeCheck;
  static_assert(sizeof(ovrAvatarMeshAssetData) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
