// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MessengerHelper
  class MessengerHelper;
  // Forward declaring type: OVRCallback
  class OVRCallback;
  // Forward declaring type: OVRCallback`1<T>
  template<typename T>
  class OVRCallback_1;
  // Forward declaring type: OVRCallback`2<T, U>
  template<typename T, typename U>
  class OVRCallback_2;
  // Forward declaring type: OVRCallback`3<T, U, V>
  template<typename T, typename U, typename V>
  class OVRCallback_3;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Delegate
  class Delegate;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRMessenger
  class OVRMessenger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRMessenger);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRMessenger*, "", "OVRMessenger");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OVRMessenger
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRMessenger : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::OVRMessenger::BroadcastException
    class BroadcastException;
    // Nested type: ::GlobalNamespace::OVRMessenger::ListenerException
    class ListenerException;
    // Get static field: static private MessengerHelper messengerHelper
    static ::GlobalNamespace::MessengerHelper* _get_messengerHelper();
    // Set static field: static private MessengerHelper messengerHelper
    static void _set_messengerHelper(::GlobalNamespace::MessengerHelper* value);
    // Get static field: static public System.Collections.Generic.Dictionary`2<System.String,System.Delegate> eventTable
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Delegate*>* _get_eventTable();
    // Set static field: static public System.Collections.Generic.Dictionary`2<System.String,System.Delegate> eventTable
    static void _set_eventTable(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Delegate*>* value);
    // Get static field: static public System.Collections.Generic.List`1<System.String> permanentMessages
    static ::System::Collections::Generic::List_1<::StringW>* _get_permanentMessages();
    // Set static field: static public System.Collections.Generic.List`1<System.String> permanentMessages
    static void _set_permanentMessages(::System::Collections::Generic::List_1<::StringW>* value);
    // static private System.Void .cctor()
    // Offset: 0xC6041C
    static void _cctor();
    // static public System.Void MarkAsPermanent(System.String eventType)
    // Offset: 0xC5F288
    static void MarkAsPermanent(::StringW eventType);
    // static public System.Void Cleanup()
    // Offset: 0xC5F314
    static void Cleanup();
    // static public System.Void PrintEventTable()
    // Offset: 0xC5F7EC
    static void PrintEventTable();
    // static public System.Void OnListenerAdding(System.String eventType, System.Delegate listenerBeingAdded)
    // Offset: 0xC5FA84
    static void OnListenerAdding(::StringW eventType, ::System::Delegate* listenerBeingAdded);
    // static public System.Void OnListenerRemoving(System.String eventType, System.Delegate listenerBeingRemoved)
    // Offset: 0xC5FCE8
    static void OnListenerRemoving(::StringW eventType, ::System::Delegate* listenerBeingRemoved);
    // static public System.Void OnListenerRemoved(System.String eventType)
    // Offset: 0xC5FF28
    static void OnListenerRemoved(::StringW eventType);
    // static public System.Void OnBroadcasting(System.String eventType)
    // Offset: 0xC6000C
    static void OnBroadcasting(::StringW eventType);
    // static public OVRMessenger/BroadcastException CreateBroadcastSignatureException(System.String eventType)
    // Offset: 0xC60010
    static ::GlobalNamespace::OVRMessenger::BroadcastException* CreateBroadcastSignatureException(::StringW eventType);
    // static public System.Void AddListener(System.String eventType, OVRCallback handler)
    // Offset: 0xC6009C
    static void AddListener(::StringW eventType, ::GlobalNamespace::OVRCallback* handler);
    // static public System.Void AddListener(System.String eventType, OVRCallback`1<T> handler)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void AddListener(::StringW eventType, ::GlobalNamespace::OVRCallback_1<T>* handler) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMessenger::AddListener");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRMessenger", "AddListener", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(handler)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, eventType, handler);
    }
    // static public System.Void AddListener(System.String eventType, OVRCallback`2<T,U> handler)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class U>
    static void AddListener(::StringW eventType, ::GlobalNamespace::OVRCallback_2<T, U>* handler) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMessenger::AddListener");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRMessenger", "AddListener", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(handler)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, eventType, handler);
    }
    // static public System.Void AddListener(System.String eventType, OVRCallback`3<T,U,V> handler)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class U, class V>
    static void AddListener(::StringW eventType, ::GlobalNamespace::OVRCallback_3<T, U, V>* handler) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMessenger::AddListener");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRMessenger", "AddListener", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<V>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(handler)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<V>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, eventType, handler);
    }
    // static public System.Void RemoveListener(System.String eventType, OVRCallback handler)
    // Offset: 0xC601C0
    static void RemoveListener(::StringW eventType, ::GlobalNamespace::OVRCallback* handler);
    // static public System.Void RemoveListener(System.String eventType, OVRCallback`1<T> handler)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void RemoveListener(::StringW eventType, ::GlobalNamespace::OVRCallback_1<T>* handler) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMessenger::RemoveListener");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRMessenger", "RemoveListener", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(handler)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, eventType, handler);
    }
    // static public System.Void RemoveListener(System.String eventType, OVRCallback`2<T,U> handler)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class U>
    static void RemoveListener(::StringW eventType, ::GlobalNamespace::OVRCallback_2<T, U>* handler) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMessenger::RemoveListener");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRMessenger", "RemoveListener", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(handler)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, eventType, handler);
    }
    // static public System.Void RemoveListener(System.String eventType, OVRCallback`3<T,U,V> handler)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class U, class V>
    static void RemoveListener(::StringW eventType, ::GlobalNamespace::OVRCallback_3<T, U, V>* handler) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMessenger::RemoveListener");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRMessenger", "RemoveListener", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<V>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(handler)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<V>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, eventType, handler);
    }
    // static public System.Void Broadcast(System.String eventType)
    // Offset: 0xC602EC
    static void Broadcast(::StringW eventType);
    // static public System.Void Broadcast(System.String eventType, T arg1)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Broadcast(::StringW eventType, T arg1) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMessenger::Broadcast");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRMessenger", "Broadcast", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(arg1)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, eventType, arg1);
    }
    // static public System.Void Broadcast(System.String eventType, T arg1, U arg2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class U>
    static void Broadcast(::StringW eventType, T arg1, U arg2) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMessenger::Broadcast");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRMessenger", "Broadcast", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, eventType, arg1, arg2);
    }
    // static public System.Void Broadcast(System.String eventType, T arg1, U arg2, V arg3)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class U, class V>
    static void Broadcast(::StringW eventType, T arg1, U arg2, V arg3) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMessenger::Broadcast");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRMessenger", "Broadcast", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<V>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<V>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, eventType, arg1, arg2, arg3);
    }
  }; // OVRMessenger
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRMessenger::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMessenger*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::MarkAsPermanent
// Il2CppName: MarkAsPermanent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&GlobalNamespace::OVRMessenger::MarkAsPermanent)> {
  static const MethodInfo* get() {
    static auto* eventType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMessenger*), "MarkAsPermanent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRMessenger::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMessenger*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::PrintEventTable
// Il2CppName: PrintEventTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRMessenger::PrintEventTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMessenger*), "PrintEventTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::OnListenerAdding
// Il2CppName: OnListenerAdding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::System::Delegate*)>(&GlobalNamespace::OVRMessenger::OnListenerAdding)> {
  static const MethodInfo* get() {
    static auto* eventType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* listenerBeingAdded = &::il2cpp_utils::GetClassFromName("System", "Delegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMessenger*), "OnListenerAdding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventType, listenerBeingAdded});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::OnListenerRemoving
// Il2CppName: OnListenerRemoving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::System::Delegate*)>(&GlobalNamespace::OVRMessenger::OnListenerRemoving)> {
  static const MethodInfo* get() {
    static auto* eventType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* listenerBeingRemoved = &::il2cpp_utils::GetClassFromName("System", "Delegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMessenger*), "OnListenerRemoving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventType, listenerBeingRemoved});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::OnListenerRemoved
// Il2CppName: OnListenerRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&GlobalNamespace::OVRMessenger::OnListenerRemoved)> {
  static const MethodInfo* get() {
    static auto* eventType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMessenger*), "OnListenerRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::OnBroadcasting
// Il2CppName: OnBroadcasting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&GlobalNamespace::OVRMessenger::OnBroadcasting)> {
  static const MethodInfo* get() {
    static auto* eventType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMessenger*), "OnBroadcasting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::CreateBroadcastSignatureException
// Il2CppName: CreateBroadcastSignatureException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRMessenger::BroadcastException* (*)(::StringW)>(&GlobalNamespace::OVRMessenger::CreateBroadcastSignatureException)> {
  static const MethodInfo* get() {
    static auto* eventType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMessenger*), "CreateBroadcastSignatureException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::AddListener
// Il2CppName: AddListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::GlobalNamespace::OVRCallback*)>(&GlobalNamespace::OVRMessenger::AddListener)> {
  static const MethodInfo* get() {
    static auto* eventType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* handler = &::il2cpp_utils::GetClassFromName("", "OVRCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMessenger*), "AddListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventType, handler});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::AddListener
// Il2CppName: AddListener
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::AddListener
// Il2CppName: AddListener
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::AddListener
// Il2CppName: AddListener
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::RemoveListener
// Il2CppName: RemoveListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::GlobalNamespace::OVRCallback*)>(&GlobalNamespace::OVRMessenger::RemoveListener)> {
  static const MethodInfo* get() {
    static auto* eventType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* handler = &::il2cpp_utils::GetClassFromName("", "OVRCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMessenger*), "RemoveListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventType, handler});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::RemoveListener
// Il2CppName: RemoveListener
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::RemoveListener
// Il2CppName: RemoveListener
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::RemoveListener
// Il2CppName: RemoveListener
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::Broadcast
// Il2CppName: Broadcast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&GlobalNamespace::OVRMessenger::Broadcast)> {
  static const MethodInfo* get() {
    static auto* eventType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMessenger*), "Broadcast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::Broadcast
// Il2CppName: Broadcast
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::Broadcast
// Il2CppName: Broadcast
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRMessenger::Broadcast
// Il2CppName: Broadcast
// Cannot write MetadataGetter for generic methods!
