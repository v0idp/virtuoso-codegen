// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Rendering.ReflectionProbeBlendInfo
#include "UnityEngine/Rendering/ReflectionProbeBlendInfo.hpp"
// Including type: ovrAvatarPBSMaterialState
#include "GlobalNamespace/ovrAvatarPBSMaterialState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ovrAvatarBodyPartType
  struct ovrAvatarBodyPartType;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: Texture2DArray
  class Texture2DArray;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OvrAvatarMaterialManager
  class OvrAvatarMaterialManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OvrAvatarMaterialManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OvrAvatarMaterialManager*, "", "OvrAvatarMaterialManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: OvrAvatarMaterialManager
  // [TokenAttribute] Offset: FFFFFFFF
  class OvrAvatarMaterialManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::OvrAvatarMaterialManager::TextureType
    struct TextureType;
    // Nested type: ::GlobalNamespace::OvrAvatarMaterialManager::AvatarComponentMaterialProperties
    struct AvatarComponentMaterialProperties;
    // Nested type: ::GlobalNamespace::OvrAvatarMaterialManager::AvatarTextureArrayProperties
    struct AvatarTextureArrayProperties;
    // Nested type: ::GlobalNamespace::OvrAvatarMaterialManager::AvatarMaterialPropertyBlock
    struct AvatarMaterialPropertyBlock;
    // Nested type: ::GlobalNamespace::OvrAvatarMaterialManager::AvatarMaterialConfig
    class AvatarMaterialConfig;
    // Nested type: ::GlobalNamespace::OvrAvatarMaterialManager::$RunLoadingAnimation$d__49
    class $RunLoadingAnimation$d__49;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OvrAvatarMaterialManager/AvatarTextureArrayProperties
    // [TokenAttribute] Offset: FFFFFFFF
    struct AvatarTextureArrayProperties/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Texture2D[] Textures
      // Size: 0x8
      // Offset: 0x0
      ::ArrayW<::UnityEngine::Texture2D*> Textures;
      // Field size check
      static_assert(sizeof(::ArrayW<::UnityEngine::Texture2D*>) == 0x8);
      // public UnityEngine.Texture2DArray TextureArray
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::Texture2DArray* TextureArray;
      // Field size check
      static_assert(sizeof(::UnityEngine::Texture2DArray*) == 0x8);
      public:
      // Creating value type constructor for type: AvatarTextureArrayProperties
      constexpr AvatarTextureArrayProperties(::ArrayW<::UnityEngine::Texture2D*> Textures_ = ::ArrayW<::UnityEngine::Texture2D*>(static_cast<void*>(nullptr)), ::UnityEngine::Texture2DArray* TextureArray_ = {}) noexcept : Textures{Textures_}, TextureArray{TextureArray_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Texture2D[] Textures
      [[deprecated]] ::ArrayW<::UnityEngine::Texture2D*>& dyn_Textures();
      // Get instance field reference: public UnityEngine.Texture2DArray TextureArray
      [[deprecated]] ::UnityEngine::Texture2DArray*& dyn_TextureArray();
    }; // OvrAvatarMaterialManager/AvatarTextureArrayProperties
    #pragma pack(pop)
    static check_size<sizeof(OvrAvatarMaterialManager::AvatarTextureArrayProperties), 8 + sizeof(::UnityEngine::Texture2DArray*)> __GlobalNamespace_OvrAvatarMaterialManager_AvatarTextureArrayPropertiesSizeCheck;
    static_assert(sizeof(OvrAvatarMaterialManager::AvatarTextureArrayProperties) == 0x10);
    public:
    // private UnityEngine.Renderer TargetRenderer
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Renderer* TargetRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private OvrAvatarMaterialManager/AvatarTextureArrayProperties[] TextureArrays
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::OvrAvatarMaterialManager::AvatarTextureArrayProperties> TextureArrays;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::OvrAvatarMaterialManager::AvatarTextureArrayProperties>) == 0x8);
    // private readonly System.String[] TextureTypeToShaderProperties
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::StringW> TextureTypeToShaderProperties;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public OvrAvatarMaterialManager/AvatarMaterialConfig LocalAvatarConfig
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::OvrAvatarMaterialManager::AvatarMaterialConfig* LocalAvatarConfig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OvrAvatarMaterialManager::AvatarMaterialConfig*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Rendering.ReflectionProbeBlendInfo> ReflectionProbes
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::ReflectionProbeBlendInfo>* ReflectionProbes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::ReflectionProbeBlendInfo>*) == 0x8);
    // private UnityEngine.Shader CombinedShader
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Shader* CombinedShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public System.String AVATAR_SHADER_LOADER
    static ::StringW _get_AVATAR_SHADER_LOADER();
    // Set static field: static public System.String AVATAR_SHADER_LOADER
    static void _set_AVATAR_SHADER_LOADER(::StringW value);
    // Get static field: static public System.String AVATAR_SHADER_MAINTEX
    static ::StringW _get_AVATAR_SHADER_MAINTEX();
    // Set static field: static public System.String AVATAR_SHADER_MAINTEX
    static void _set_AVATAR_SHADER_MAINTEX(::StringW value);
    // Get static field: static public System.String AVATAR_SHADER_NORMALMAP
    static ::StringW _get_AVATAR_SHADER_NORMALMAP();
    // Set static field: static public System.String AVATAR_SHADER_NORMALMAP
    static void _set_AVATAR_SHADER_NORMALMAP(::StringW value);
    // Get static field: static public System.String AVATAR_SHADER_ROUGHNESSMAP
    static ::StringW _get_AVATAR_SHADER_ROUGHNESSMAP();
    // Set static field: static public System.String AVATAR_SHADER_ROUGHNESSMAP
    static void _set_AVATAR_SHADER_ROUGHNESSMAP(::StringW value);
    // Get static field: static public System.String AVATAR_SHADER_COLOR
    static ::StringW _get_AVATAR_SHADER_COLOR();
    // Set static field: static public System.String AVATAR_SHADER_COLOR
    static void _set_AVATAR_SHADER_COLOR(::StringW value);
    // Get static field: static public System.String AVATAR_SHADER_DIFFUSEINTENSITY
    static ::StringW _get_AVATAR_SHADER_DIFFUSEINTENSITY();
    // Set static field: static public System.String AVATAR_SHADER_DIFFUSEINTENSITY
    static void _set_AVATAR_SHADER_DIFFUSEINTENSITY(::StringW value);
    // Get static field: static public System.String AVATAR_SHADER_RIMINTENSITY
    static ::StringW _get_AVATAR_SHADER_RIMINTENSITY();
    // Set static field: static public System.String AVATAR_SHADER_RIMINTENSITY
    static void _set_AVATAR_SHADER_RIMINTENSITY(::StringW value);
    // Get static field: static public System.String AVATAR_SHADER_REFLECTIONINTENSITY
    static ::StringW _get_AVATAR_SHADER_REFLECTIONINTENSITY();
    // Set static field: static public System.String AVATAR_SHADER_REFLECTIONINTENSITY
    static void _set_AVATAR_SHADER_REFLECTIONINTENSITY(::StringW value);
    // Get static field: static public System.String AVATAR_SHADER_CUBEMAP
    static ::StringW _get_AVATAR_SHADER_CUBEMAP();
    // Set static field: static public System.String AVATAR_SHADER_CUBEMAP
    static void _set_AVATAR_SHADER_CUBEMAP(::StringW value);
    // Get static field: static public System.String AVATAR_SHADER_ALPHA
    static ::StringW _get_AVATAR_SHADER_ALPHA();
    // Set static field: static public System.String AVATAR_SHADER_ALPHA
    static void _set_AVATAR_SHADER_ALPHA(::StringW value);
    // Get static field: static public System.String AVATAR_SHADER_LOADING_DIMMER
    static ::StringW _get_AVATAR_SHADER_LOADING_DIMMER();
    // Set static field: static public System.String AVATAR_SHADER_LOADING_DIMMER
    static void _set_AVATAR_SHADER_LOADING_DIMMER(::StringW value);
    // Get static field: static public System.String AVATAR_SHADER_IRIS_COLOR
    static ::StringW _get_AVATAR_SHADER_IRIS_COLOR();
    // Set static field: static public System.String AVATAR_SHADER_IRIS_COLOR
    static void _set_AVATAR_SHADER_IRIS_COLOR(::StringW value);
    // Get static field: static public System.String AVATAR_SHADER_LIP_COLOR
    static ::StringW _get_AVATAR_SHADER_LIP_COLOR();
    // Set static field: static public System.String AVATAR_SHADER_LIP_COLOR
    static void _set_AVATAR_SHADER_LIP_COLOR(::StringW value);
    // Get static field: static public System.String AVATAR_SHADER_BROW_COLOR
    static ::StringW _get_AVATAR_SHADER_BROW_COLOR();
    // Set static field: static public System.String AVATAR_SHADER_BROW_COLOR
    static void _set_AVATAR_SHADER_BROW_COLOR(::StringW value);
    // Get static field: static public System.String AVATAR_SHADER_LASH_COLOR
    static ::StringW _get_AVATAR_SHADER_LASH_COLOR();
    // Set static field: static public System.String AVATAR_SHADER_LASH_COLOR
    static void _set_AVATAR_SHADER_LASH_COLOR(::StringW value);
    // Get static field: static public System.String AVATAR_SHADER_SCLERA_COLOR
    static ::StringW _get_AVATAR_SHADER_SCLERA_COLOR();
    // Set static field: static public System.String AVATAR_SHADER_SCLERA_COLOR
    static void _set_AVATAR_SHADER_SCLERA_COLOR(::StringW value);
    // Get static field: static public System.String AVATAR_SHADER_GUM_COLOR
    static ::StringW _get_AVATAR_SHADER_GUM_COLOR();
    // Set static field: static public System.String AVATAR_SHADER_GUM_COLOR
    static void _set_AVATAR_SHADER_GUM_COLOR(::StringW value);
    // Get static field: static public System.String AVATAR_SHADER_TEETH_COLOR
    static ::StringW _get_AVATAR_SHADER_TEETH_COLOR();
    // Set static field: static public System.String AVATAR_SHADER_TEETH_COLOR
    static void _set_AVATAR_SHADER_TEETH_COLOR(::StringW value);
    // Get static field: static public System.String AVATAR_SHADER_LIP_SMOOTHNESS
    static ::StringW _get_AVATAR_SHADER_LIP_SMOOTHNESS();
    // Set static field: static public System.String AVATAR_SHADER_LIP_SMOOTHNESS
    static void _set_AVATAR_SHADER_LIP_SMOOTHNESS(::StringW value);
    // Get static field: static public System.Single[] DiffuseIntensities
    static ::ArrayW<float> _get_DiffuseIntensities();
    // Set static field: static public System.Single[] DiffuseIntensities
    static void _set_DiffuseIntensities(::ArrayW<float> value);
    // Get static field: static public System.Single[] RimIntensities
    static ::ArrayW<float> _get_RimIntensities();
    // Set static field: static public System.Single[] RimIntensities
    static void _set_RimIntensities(::ArrayW<float> value);
    // Get static field: static public System.Single[] ReflectionIntensities
    static ::ArrayW<float> _get_ReflectionIntensities();
    // Set static field: static public System.Single[] ReflectionIntensities
    static void _set_ReflectionIntensities(::ArrayW<float> value);
    // static field const value: static private System.Single LOADING_ANIMATION_AMPLITUDE
    static constexpr const float LOADING_ANIMATION_AMPLITUDE = 0.5;
    // Get static field: static private System.Single LOADING_ANIMATION_AMPLITUDE
    static float _get_LOADING_ANIMATION_AMPLITUDE();
    // Set static field: static private System.Single LOADING_ANIMATION_AMPLITUDE
    static void _set_LOADING_ANIMATION_AMPLITUDE(float value);
    // static field const value: static private System.Single LOADING_ANIMATION_PERIOD
    static constexpr const float LOADING_ANIMATION_PERIOD = 0.35;
    // Get static field: static private System.Single LOADING_ANIMATION_PERIOD
    static float _get_LOADING_ANIMATION_PERIOD();
    // Set static field: static private System.Single LOADING_ANIMATION_PERIOD
    static void _set_LOADING_ANIMATION_PERIOD(float value);
    // static field const value: static private System.Single LOADING_ANIMATION_CURVE_SCALE
    static constexpr const float LOADING_ANIMATION_CURVE_SCALE = 0.25;
    // Get static field: static private System.Single LOADING_ANIMATION_CURVE_SCALE
    static float _get_LOADING_ANIMATION_CURVE_SCALE();
    // Set static field: static private System.Single LOADING_ANIMATION_CURVE_SCALE
    static void _set_LOADING_ANIMATION_CURVE_SCALE(float value);
    // static field const value: static private System.Single LOADING_ANIMATION_DIMMER_MIN
    static constexpr const float LOADING_ANIMATION_DIMMER_MIN = 0.3;
    // Get static field: static private System.Single LOADING_ANIMATION_DIMMER_MIN
    static float _get_LOADING_ANIMATION_DIMMER_MIN();
    // Set static field: static private System.Single LOADING_ANIMATION_DIMMER_MIN
    static void _set_LOADING_ANIMATION_DIMMER_MIN(float value);
    // Get instance field reference: private UnityEngine.Renderer TargetRenderer
    [[deprecated]] ::UnityEngine::Renderer*& dyn_TargetRenderer();
    // Get instance field reference: private OvrAvatarMaterialManager/AvatarTextureArrayProperties[] TextureArrays
    [[deprecated]] ::ArrayW<::GlobalNamespace::OvrAvatarMaterialManager::AvatarTextureArrayProperties>& dyn_TextureArrays();
    // Get instance field reference: private readonly System.String[] TextureTypeToShaderProperties
    [[deprecated]] ::ArrayW<::StringW>& dyn_TextureTypeToShaderProperties();
    // Get instance field reference: public OvrAvatarMaterialManager/AvatarMaterialConfig LocalAvatarConfig
    [[deprecated]] ::GlobalNamespace::OvrAvatarMaterialManager::AvatarMaterialConfig*& dyn_LocalAvatarConfig();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Rendering.ReflectionProbeBlendInfo> ReflectionProbes
    [[deprecated]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::ReflectionProbeBlendInfo>*& dyn_ReflectionProbes();
    // Get instance field reference: private UnityEngine.Shader CombinedShader
    [[deprecated]] ::UnityEngine::Shader*& dyn_CombinedShader();
    // public System.Void CreateTextureArrays()
    // Offset: 0xF8C0EC
    void CreateTextureArrays();
    // public System.Void SetRenderer(UnityEngine.Renderer renderer)
    // Offset: 0xF8C278
    void SetRenderer(::UnityEngine::Renderer* renderer);
    // public System.Void OnCombinedMeshReady()
    // Offset: 0xF8C2A0
    void OnCombinedMeshReady();
    // public System.Void AddTextureIDToTextureManager(System.UInt64 assetID, System.Boolean isSingleComponent)
    // Offset: 0xF8C9FC
    void AddTextureIDToTextureManager(uint64_t assetID, bool isSingleComponent);
    // private System.Void DeleteTextureSet()
    // Offset: 0xF8CAE0
    void DeleteTextureSet();
    // public System.Void InitTextureArrays()
    // Offset: 0xF8C33C
    void InitTextureArrays();
    // private System.Void ProcessTexturesWithMips(UnityEngine.Texture2D[] textures, System.Int32 texArrayResolution, UnityEngine.Texture2DArray texArray)
    // Offset: 0xF8CB2C
    void ProcessTexturesWithMips(::ArrayW<::UnityEngine::Texture2D*> textures, int texArrayResolution, ::UnityEngine::Texture2DArray* texArray);
    // private System.Void SetMaterialPropertyBlock()
    // Offset: 0xF8C774
    void SetMaterialPropertyBlock();
    // private System.Void ApplyMaterialPropertyBlock()
    // Offset: 0xF8CC14
    void ApplyMaterialPropertyBlock();
    // static public ovrAvatarBodyPartType GetComponentType(System.String objectName)
    // Offset: 0xF8CEB8
    static ::GlobalNamespace::ovrAvatarBodyPartType GetComponentType(::StringW objectName);
    // private System.UInt64 GetTextureIDForType(ovrAvatarPBSMaterialState materialState, OvrAvatarMaterialManager/TextureType type)
    // Offset: 0xF8CFE0
    uint64_t GetTextureIDForType(::GlobalNamespace::ovrAvatarPBSMaterialState materialState, ::GlobalNamespace::OvrAvatarMaterialManager::TextureType type);
    // public System.Void ValidateTextures(ovrAvatarPBSMaterialState[] materialStates)
    // Offset: 0xF8D018
    void ValidateTextures(::ArrayW<::GlobalNamespace::ovrAvatarPBSMaterialState> materialStates);
    // private System.Collections.IEnumerator RunLoadingAnimation(System.Action callBack)
    // Offset: 0xF8C984
    ::System::Collections::IEnumerator* RunLoadingAnimation(::System::Action* callBack);
    // public System.Void .ctor()
    // Offset: 0xF8DE90
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OvrAvatarMaterialManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OvrAvatarMaterialManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OvrAvatarMaterialManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xF8E040
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // OvrAvatarMaterialManager
  #pragma pack(pop)
  static check_size<sizeof(OvrAvatarMaterialManager), 64 + sizeof(::UnityEngine::Shader*)> __GlobalNamespace_OvrAvatarMaterialManagerSizeCheck;
  static_assert(sizeof(OvrAvatarMaterialManager) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OvrAvatarMaterialManager::AvatarTextureArrayProperties, "", "OvrAvatarMaterialManager/AvatarTextureArrayProperties");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMaterialManager::CreateTextureArrays
// Il2CppName: CreateTextureArrays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarMaterialManager::*)()>(&GlobalNamespace::OvrAvatarMaterialManager::CreateTextureArrays)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMaterialManager*), "CreateTextureArrays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMaterialManager::SetRenderer
// Il2CppName: SetRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarMaterialManager::*)(::UnityEngine::Renderer*)>(&GlobalNamespace::OvrAvatarMaterialManager::SetRenderer)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMaterialManager*), "SetRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMaterialManager::OnCombinedMeshReady
// Il2CppName: OnCombinedMeshReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarMaterialManager::*)()>(&GlobalNamespace::OvrAvatarMaterialManager::OnCombinedMeshReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMaterialManager*), "OnCombinedMeshReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMaterialManager::AddTextureIDToTextureManager
// Il2CppName: AddTextureIDToTextureManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarMaterialManager::*)(uint64_t, bool)>(&GlobalNamespace::OvrAvatarMaterialManager::AddTextureIDToTextureManager)> {
  static const MethodInfo* get() {
    static auto* assetID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* isSingleComponent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMaterialManager*), "AddTextureIDToTextureManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetID, isSingleComponent});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMaterialManager::DeleteTextureSet
// Il2CppName: DeleteTextureSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarMaterialManager::*)()>(&GlobalNamespace::OvrAvatarMaterialManager::DeleteTextureSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMaterialManager*), "DeleteTextureSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMaterialManager::InitTextureArrays
// Il2CppName: InitTextureArrays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarMaterialManager::*)()>(&GlobalNamespace::OvrAvatarMaterialManager::InitTextureArrays)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMaterialManager*), "InitTextureArrays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMaterialManager::ProcessTexturesWithMips
// Il2CppName: ProcessTexturesWithMips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarMaterialManager::*)(::ArrayW<::UnityEngine::Texture2D*>, int, ::UnityEngine::Texture2DArray*)>(&GlobalNamespace::OvrAvatarMaterialManager::ProcessTexturesWithMips)> {
  static const MethodInfo* get() {
    static auto* textures = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D"), 1)->byval_arg;
    static auto* texArrayResolution = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* texArray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2DArray")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMaterialManager*), "ProcessTexturesWithMips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textures, texArrayResolution, texArray});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMaterialManager::SetMaterialPropertyBlock
// Il2CppName: SetMaterialPropertyBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarMaterialManager::*)()>(&GlobalNamespace::OvrAvatarMaterialManager::SetMaterialPropertyBlock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMaterialManager*), "SetMaterialPropertyBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMaterialManager::ApplyMaterialPropertyBlock
// Il2CppName: ApplyMaterialPropertyBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarMaterialManager::*)()>(&GlobalNamespace::OvrAvatarMaterialManager::ApplyMaterialPropertyBlock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMaterialManager*), "ApplyMaterialPropertyBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMaterialManager::GetComponentType
// Il2CppName: GetComponentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ovrAvatarBodyPartType (*)(::StringW)>(&GlobalNamespace::OvrAvatarMaterialManager::GetComponentType)> {
  static const MethodInfo* get() {
    static auto* objectName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMaterialManager*), "GetComponentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMaterialManager::GetTextureIDForType
// Il2CppName: GetTextureIDForType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (GlobalNamespace::OvrAvatarMaterialManager::*)(::GlobalNamespace::ovrAvatarPBSMaterialState, ::GlobalNamespace::OvrAvatarMaterialManager::TextureType)>(&GlobalNamespace::OvrAvatarMaterialManager::GetTextureIDForType)> {
  static const MethodInfo* get() {
    static auto* materialState = &::il2cpp_utils::GetClassFromName("", "ovrAvatarPBSMaterialState")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("", "OvrAvatarMaterialManager/TextureType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMaterialManager*), "GetTextureIDForType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialState, type});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMaterialManager::ValidateTextures
// Il2CppName: ValidateTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarMaterialManager::*)(::ArrayW<::GlobalNamespace::ovrAvatarPBSMaterialState>)>(&GlobalNamespace::OvrAvatarMaterialManager::ValidateTextures)> {
  static const MethodInfo* get() {
    static auto* materialStates = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "ovrAvatarPBSMaterialState"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMaterialManager*), "ValidateTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialStates});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMaterialManager::RunLoadingAnimation
// Il2CppName: RunLoadingAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::OvrAvatarMaterialManager::*)(::System::Action*)>(&GlobalNamespace::OvrAvatarMaterialManager::RunLoadingAnimation)> {
  static const MethodInfo* get() {
    static auto* callBack = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMaterialManager*), "RunLoadingAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callBack});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMaterialManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMaterialManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OvrAvatarMaterialManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMaterialManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
