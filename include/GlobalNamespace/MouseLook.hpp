// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MouseLook
  class MouseLook;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MouseLook);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MouseLook*, "", "MouseLook");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: MouseLook
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 701498
  class MouseLook : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::MouseLook::RotationAxes
    struct RotationAxes;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MouseLook/RotationAxes
    // [TokenAttribute] Offset: FFFFFFFF
    struct RotationAxes/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RotationAxes
      constexpr RotationAxes(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MouseLook/RotationAxes MouseXAndY
      static constexpr const int MouseXAndY = 0;
      // Get static field: static public MouseLook/RotationAxes MouseXAndY
      static ::GlobalNamespace::MouseLook::RotationAxes _get_MouseXAndY();
      // Set static field: static public MouseLook/RotationAxes MouseXAndY
      static void _set_MouseXAndY(::GlobalNamespace::MouseLook::RotationAxes value);
      // static field const value: static public MouseLook/RotationAxes MouseX
      static constexpr const int MouseX = 1;
      // Get static field: static public MouseLook/RotationAxes MouseX
      static ::GlobalNamespace::MouseLook::RotationAxes _get_MouseX();
      // Set static field: static public MouseLook/RotationAxes MouseX
      static void _set_MouseX(::GlobalNamespace::MouseLook::RotationAxes value);
      // static field const value: static public MouseLook/RotationAxes MouseY
      static constexpr const int MouseY = 2;
      // Get static field: static public MouseLook/RotationAxes MouseY
      static ::GlobalNamespace::MouseLook::RotationAxes _get_MouseY();
      // Set static field: static public MouseLook/RotationAxes MouseY
      static void _set_MouseY(::GlobalNamespace::MouseLook::RotationAxes value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated]] int& dyn_value__();
    }; // MouseLook/RotationAxes
    #pragma pack(pop)
    static check_size<sizeof(MouseLook::RotationAxes), 0 + sizeof(int)> __GlobalNamespace_MouseLook_RotationAxesSizeCheck;
    static_assert(sizeof(MouseLook::RotationAxes) == 0x4);
    public:
    // public MouseLook/RotationAxes axes
    // Size: 0x4
    // Offset: 0x18
    ::GlobalNamespace::MouseLook::RotationAxes axes;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MouseLook::RotationAxes) == 0x4);
    // public System.Single sensitivityX
    // Size: 0x4
    // Offset: 0x1C
    float sensitivityX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single sensitivityY
    // Size: 0x4
    // Offset: 0x20
    float sensitivityY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minimumX
    // Size: 0x4
    // Offset: 0x24
    float minimumX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maximumX
    // Size: 0x4
    // Offset: 0x28
    float maximumX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minimumY
    // Size: 0x4
    // Offset: 0x2C
    float minimumY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maximumY
    // Size: 0x4
    // Offset: 0x30
    float maximumY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single rotationY
    // Size: 0x4
    // Offset: 0x34
    float rotationY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public MouseLook/RotationAxes axes
    [[deprecated]] ::GlobalNamespace::MouseLook::RotationAxes& dyn_axes();
    // Get instance field reference: public System.Single sensitivityX
    [[deprecated]] float& dyn_sensitivityX();
    // Get instance field reference: public System.Single sensitivityY
    [[deprecated]] float& dyn_sensitivityY();
    // Get instance field reference: public System.Single minimumX
    [[deprecated]] float& dyn_minimumX();
    // Get instance field reference: public System.Single maximumX
    [[deprecated]] float& dyn_maximumX();
    // Get instance field reference: public System.Single minimumY
    [[deprecated]] float& dyn_minimumY();
    // Get instance field reference: public System.Single maximumY
    [[deprecated]] float& dyn_maximumY();
    // Get instance field reference: private System.Single rotationY
    [[deprecated]] float& dyn_rotationY();
    // private System.Void Update()
    // Offset: 0x175EFA0
    void Update();
    // private System.Void Start()
    // Offset: 0x175F178
    void Start();
    // public System.Void .ctor()
    // Offset: 0x175F240
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MouseLook* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MouseLook::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MouseLook*, creationType>()));
    }
  }; // MouseLook
  #pragma pack(pop)
  static check_size<sizeof(MouseLook), 52 + sizeof(float)> __GlobalNamespace_MouseLookSizeCheck;
  static_assert(sizeof(MouseLook) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MouseLook::RotationAxes, "", "MouseLook/RotationAxes");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MouseLook::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MouseLook::*)()>(&GlobalNamespace::MouseLook::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MouseLook*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MouseLook::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MouseLook::*)()>(&GlobalNamespace::MouseLook::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MouseLook*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MouseLook::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
