// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: UISlideToggle
  class UISlideToggle;
  // Forward declaring type: UIToggle
  class UIToggle;
  // Forward declaring type: UserDataControllers
  class UserDataControllers;
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PunchKeyboardSettings
  class PunchKeyboardSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PunchKeyboardSettings);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PunchKeyboardSettings*, "", "PunchKeyboardSettings");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: PunchKeyboardSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class PunchKeyboardSettings : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.UISlideToggle _usePointAndClick
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::UISlideToggle* usePointAndClick;
    // Field size check
    static_assert(sizeof(::VROSC::UISlideToggle*) == 0x8);
    // private VROSC.UISlideToggle _useTouchables
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::UISlideToggle* useTouchables;
    // Field size check
    static_assert(sizeof(::VROSC::UISlideToggle*) == 0x8);
    // private VROSC.UISlideToggle _allowExternalKeyboard
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::UISlideToggle* allowExternalKeyboard;
    // Field size check
    static_assert(sizeof(::VROSC::UISlideToggle*) == 0x8);
    // private VROSC.UISlideToggle _keySounds
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::UISlideToggle* keySounds;
    // Field size check
    static_assert(sizeof(::VROSC::UISlideToggle*) == 0x8);
    // private VROSC.UIToggle _settingsButton
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::UIToggle* settingsButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIToggle*) == 0x8);
    // private UnityEngine.GameObject _panelObject
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* panelObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public System.Boolean AllowExternalKeyboard
    static bool _get_AllowExternalKeyboard();
    // Set static field: static public System.Boolean AllowExternalKeyboard
    static void _set_AllowExternalKeyboard(bool value);
    // Get static field: static public System.Boolean UseTouch
    static bool _get_UseTouch();
    // Set static field: static public System.Boolean UseTouch
    static void _set_UseTouch(bool value);
    // Get static field: static public System.Boolean UsePointAndClick
    static bool _get_UsePointAndClick();
    // Set static field: static public System.Boolean UsePointAndClick
    static void _set_UsePointAndClick(bool value);
    // Get static field: static public System.Boolean KeyboardPlaysClickSound
    static bool _get_KeyboardPlaysClickSound();
    // Set static field: static public System.Boolean KeyboardPlaysClickSound
    static void _set_KeyboardPlaysClickSound(bool value);
    // Get static field: static public System.Action OnSettingsUpdated
    static ::System::Action* _get_OnSettingsUpdated();
    // Set static field: static public System.Action OnSettingsUpdated
    static void _set_OnSettingsUpdated(::System::Action* value);
    // Get instance field reference: private VROSC.UISlideToggle _usePointAndClick
    [[deprecated]] ::VROSC::UISlideToggle*& dyn__usePointAndClick();
    // Get instance field reference: private VROSC.UISlideToggle _useTouchables
    [[deprecated]] ::VROSC::UISlideToggle*& dyn__useTouchables();
    // Get instance field reference: private VROSC.UISlideToggle _allowExternalKeyboard
    [[deprecated]] ::VROSC::UISlideToggle*& dyn__allowExternalKeyboard();
    // Get instance field reference: private VROSC.UISlideToggle _keySounds
    [[deprecated]] ::VROSC::UISlideToggle*& dyn__keySounds();
    // Get instance field reference: private VROSC.UIToggle _settingsButton
    [[deprecated]] ::VROSC::UIToggle*& dyn__settingsButton();
    // Get instance field reference: private UnityEngine.GameObject _panelObject
    [[deprecated]] ::UnityEngine::GameObject*& dyn__panelObject();
    // private System.Void Awake()
    // Offset: 0xB2C0E0
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0xB2C410
    void OnDestroy();
    // private System.Void OnEnable()
    // Offset: 0xB2C71C
    void OnEnable();
    // private System.Void UserDataLoaded(VROSC.UserDataControllers user)
    // Offset: 0xB2C770
    void UserDataLoaded(::VROSC::UserDataControllers* user);
    // private System.Void OnDisable()
    // Offset: 0xB2C8EC
    void OnDisable();
    // private System.Void TogglePanel(VROSC.InputDevice device, System.Boolean toggled)
    // Offset: 0xB2C940
    void TogglePanel(::VROSC::InputDevice* device, bool toggled);
    // private System.Void UseExternalKeyboardToggled(VROSC.InputDevice arg1, System.Boolean toggled)
    // Offset: 0xB2C960
    void UseExternalKeyboardToggled(::VROSC::InputDevice* arg1, bool toggled);
    // private System.Void UseTouchablesToggled(VROSC.InputDevice arg1, System.Boolean toggled)
    // Offset: 0xB2CA10
    void UseTouchablesToggled(::VROSC::InputDevice* arg1, bool toggled);
    // private System.Void UsePointAndClickToggled(VROSC.InputDevice arg1, System.Boolean toggled)
    // Offset: 0xB2CAC0
    void UsePointAndClickToggled(::VROSC::InputDevice* arg1, bool toggled);
    // private System.Void KeySoundsToggled(VROSC.InputDevice arg1, System.Boolean toggled)
    // Offset: 0xB2CB70
    void KeySoundsToggled(::VROSC::InputDevice* arg1, bool toggled);
    // public System.Void .ctor()
    // Offset: 0xB2CC20
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PunchKeyboardSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PunchKeyboardSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PunchKeyboardSettings*, creationType>()));
    }
  }; // PunchKeyboardSettings
  #pragma pack(pop)
  static check_size<sizeof(PunchKeyboardSettings), 64 + sizeof(::UnityEngine::GameObject*)> __GlobalNamespace_PunchKeyboardSettingsSizeCheck;
  static_assert(sizeof(PunchKeyboardSettings) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboardSettings::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboardSettings::*)()>(&GlobalNamespace::PunchKeyboardSettings::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboardSettings*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboardSettings::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboardSettings::*)()>(&GlobalNamespace::PunchKeyboardSettings::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboardSettings*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboardSettings::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboardSettings::*)()>(&GlobalNamespace::PunchKeyboardSettings::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboardSettings*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboardSettings::UserDataLoaded
// Il2CppName: UserDataLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboardSettings::*)(::VROSC::UserDataControllers*)>(&GlobalNamespace::PunchKeyboardSettings::UserDataLoaded)> {
  static const MethodInfo* get() {
    static auto* user = &::il2cpp_utils::GetClassFromName("VROSC", "UserDataControllers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboardSettings*), "UserDataLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{user});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboardSettings::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboardSettings::*)()>(&GlobalNamespace::PunchKeyboardSettings::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboardSettings*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboardSettings::TogglePanel
// Il2CppName: TogglePanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboardSettings::*)(::VROSC::InputDevice*, bool)>(&GlobalNamespace::PunchKeyboardSettings::TogglePanel)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* toggled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboardSettings*), "TogglePanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, toggled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboardSettings::UseExternalKeyboardToggled
// Il2CppName: UseExternalKeyboardToggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboardSettings::*)(::VROSC::InputDevice*, bool)>(&GlobalNamespace::PunchKeyboardSettings::UseExternalKeyboardToggled)> {
  static const MethodInfo* get() {
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* toggled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboardSettings*), "UseExternalKeyboardToggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arg1, toggled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboardSettings::UseTouchablesToggled
// Il2CppName: UseTouchablesToggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboardSettings::*)(::VROSC::InputDevice*, bool)>(&GlobalNamespace::PunchKeyboardSettings::UseTouchablesToggled)> {
  static const MethodInfo* get() {
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* toggled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboardSettings*), "UseTouchablesToggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arg1, toggled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboardSettings::UsePointAndClickToggled
// Il2CppName: UsePointAndClickToggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboardSettings::*)(::VROSC::InputDevice*, bool)>(&GlobalNamespace::PunchKeyboardSettings::UsePointAndClickToggled)> {
  static const MethodInfo* get() {
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* toggled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboardSettings*), "UsePointAndClickToggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arg1, toggled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboardSettings::KeySoundsToggled
// Il2CppName: KeySoundsToggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunchKeyboardSettings::*)(::VROSC::InputDevice*, bool)>(&GlobalNamespace::PunchKeyboardSettings::KeySoundsToggled)> {
  static const MethodInfo* get() {
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* toggled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunchKeyboardSettings*), "KeySoundsToggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arg1, toggled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunchKeyboardSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
