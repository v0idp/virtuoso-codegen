// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: ovrAvatarTransform
#include "GlobalNamespace/ovrAvatarTransform.hpp"
// Including type: ovrAvatarDebugContext
#include "GlobalNamespace/ovrAvatarDebugContext.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ovrAvatarDebugTransform
  struct ovrAvatarDebugTransform;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ovrAvatarDebugTransform, "", "ovrAvatarDebugTransform");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ovrAvatarDebugTransform
  // [TokenAttribute] Offset: FFFFFFFF
  struct ovrAvatarDebugTransform/*, public ::System::ValueType*/ {
    public:
    public:
    // public ovrAvatarTransform transform
    // Size: 0x28
    // Offset: 0x0
    ::GlobalNamespace::ovrAvatarTransform transform;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ovrAvatarTransform) == 0x28);
    // public ovrAvatarDebugContext context
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::ovrAvatarDebugContext context;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ovrAvatarDebugContext) == 0x4);
    // Padding between fields: context and: text
    char __padding1[0x4] = {};
    // public System.IntPtr text
    // Size: 0x8
    // Offset: 0x30
    ::System::IntPtr text;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: ovrAvatarDebugTransform
    constexpr ovrAvatarDebugTransform(::GlobalNamespace::ovrAvatarTransform transform_ = {}, ::GlobalNamespace::ovrAvatarDebugContext context_ = {}, ::System::IntPtr text_ = {}) noexcept : transform{transform_}, context{context_}, text{text_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public ovrAvatarTransform transform
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ovrAvatarTransform& dyn_transform();
    // Get instance field reference: public ovrAvatarDebugContext context
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ovrAvatarDebugContext& dyn_context();
    // Get instance field reference: public System.IntPtr text
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_text();
  }; // ovrAvatarDebugTransform
  #pragma pack(pop)
  static check_size<sizeof(ovrAvatarDebugTransform), 48 + sizeof(::System::IntPtr)> __GlobalNamespace_ovrAvatarDebugTransformSizeCheck;
  static_assert(sizeof(ovrAvatarDebugTransform) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
