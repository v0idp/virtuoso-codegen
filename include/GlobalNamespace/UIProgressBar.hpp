// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: AdjustableMesh
  class AdjustableMesh;
  // Forward declaring type: AdjustableMeshTransformUVEffect
  class AdjustableMeshTransformUVEffect;
  // Forward declaring type: AdjustableMeshColorChangeEffect
  class AdjustableMeshColorChangeEffect;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: UIProgressBar
  class UIProgressBar;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::UIProgressBar);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::UIProgressBar*, "", "UIProgressBar");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: UIProgressBar
  // [TokenAttribute] Offset: FFFFFFFF
  class UIProgressBar : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.AdjustableMesh _progressBar
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::AdjustableMesh* progressBar;
    // Field size check
    static_assert(sizeof(::VROSC::AdjustableMesh*) == 0x8);
    // private VROSC.AdjustableMeshTransformUVEffect _progressBarValue
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::AdjustableMeshTransformUVEffect* progressBarValue;
    // Field size check
    static_assert(sizeof(::VROSC::AdjustableMeshTransformUVEffect*) == 0x8);
    // private VROSC.AdjustableMeshColorChangeEffect _progressBarColor
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::AdjustableMeshColorChangeEffect* progressBarColor;
    // Field size check
    static_assert(sizeof(::VROSC::AdjustableMeshColorChangeEffect*) == 0x8);
    // private UnityEngine.Color _successColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color successColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _failureColor
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color failureColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _inProgressColor
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Color inProgressColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single <Progress>k__BackingField
    // Size: 0x4
    // Offset: 0x60
    float Progress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.AdjustableMesh _progressBar
    [[deprecated("Use field access instead!")]] ::VROSC::AdjustableMesh*& dyn__progressBar();
    // Get instance field reference: private VROSC.AdjustableMeshTransformUVEffect _progressBarValue
    [[deprecated("Use field access instead!")]] ::VROSC::AdjustableMeshTransformUVEffect*& dyn__progressBarValue();
    // Get instance field reference: private VROSC.AdjustableMeshColorChangeEffect _progressBarColor
    [[deprecated("Use field access instead!")]] ::VROSC::AdjustableMeshColorChangeEffect*& dyn__progressBarColor();
    // Get instance field reference: private UnityEngine.Color _successColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__successColor();
    // Get instance field reference: private UnityEngine.Color _failureColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__failureColor();
    // Get instance field reference: private UnityEngine.Color _inProgressColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__inProgressColor();
    // Get instance field reference: private System.Single <Progress>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$Progress$k__BackingField();
    // public System.Single get_Progress()
    // Offset: 0x1912C9C
    float get_Progress();
    // private System.Void set_Progress(System.Single value)
    // Offset: 0x1912CA4
    void set_Progress(float value);
    // public System.Void .ctor()
    // Offset: 0x1912D90
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIProgressBar* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UIProgressBar::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIProgressBar*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x1912CAC
    void Awake();
    // public System.Void StartUpdating()
    // Offset: 0x1912CB0
    void StartUpdating();
    // public System.Void StopUpdating(System.Boolean success)
    // Offset: 0x1912CF8
    void StopUpdating(bool success);
    // public System.Void UpdateValue(System.Single value)
    // Offset: 0x1912D6C
    void UpdateValue(float value);
  }; // UIProgressBar
  #pragma pack(pop)
  static check_size<sizeof(UIProgressBar), 96 + sizeof(float)> __GlobalNamespace_UIProgressBarSizeCheck;
  static_assert(sizeof(UIProgressBar) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::UIProgressBar::get_Progress
// Il2CppName: get_Progress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::UIProgressBar::*)()>(&GlobalNamespace::UIProgressBar::get_Progress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UIProgressBar*), "get_Progress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UIProgressBar::set_Progress
// Il2CppName: set_Progress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UIProgressBar::*)(float)>(&GlobalNamespace::UIProgressBar::set_Progress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UIProgressBar*), "set_Progress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UIProgressBar::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::UIProgressBar::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UIProgressBar::*)()>(&GlobalNamespace::UIProgressBar::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UIProgressBar*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UIProgressBar::StartUpdating
// Il2CppName: StartUpdating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UIProgressBar::*)()>(&GlobalNamespace::UIProgressBar::StartUpdating)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UIProgressBar*), "StartUpdating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UIProgressBar::StopUpdating
// Il2CppName: StopUpdating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UIProgressBar::*)(bool)>(&GlobalNamespace::UIProgressBar::StopUpdating)> {
  static const MethodInfo* get() {
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UIProgressBar*), "StopUpdating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{success});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UIProgressBar::UpdateValue
// Il2CppName: UpdateValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UIProgressBar::*)(float)>(&GlobalNamespace::UIProgressBar::UpdateValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UIProgressBar*), "UpdateValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
