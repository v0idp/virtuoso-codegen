// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: ovrAvatarCapabilities
#include "GlobalNamespace/ovrAvatarCapabilities.hpp"
// Including type: ovrAvatarAssetLevelOfDetail
#include "GlobalNamespace/ovrAvatarAssetLevelOfDetail.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: OVRLipSync
#include "GlobalNamespace/OVRLipSync.hpp"
// Including type: ovrAvatarTransform
#include "GlobalNamespace/ovrAvatarTransform.hpp"
// Including type: ovrAvatarLookAndFeelVersion
#include "GlobalNamespace/ovrAvatarLookAndFeelVersion.hpp"
// Including type: ovrAvatarVisemes
#include "GlobalNamespace/ovrAvatarVisemes.hpp"
// Including type: System.Boolean
#include "System/Boolean.hpp"
// Including type: ovrAvatarLights
#include "GlobalNamespace/ovrAvatarLights.hpp"
// Including type: ovrAvatarComponent
#include "GlobalNamespace/ovrAvatarComponent.hpp"
// Including type: OvrAvatarDriver
#include "GlobalNamespace/OvrAvatarDriver.hpp"
// Including type: ovrAvatarBodyComponent
#include "GlobalNamespace/ovrAvatarBodyComponent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PacketRecordSettings
  class PacketRecordSettings;
  // Forward declaring type: AvatarLayer
  class AvatarLayer;
  // Forward declaring type: OvrAvatarMaterialManager
  class OvrAvatarMaterialManager;
  // Forward declaring type: OVRLipSyncMicInput
  class OVRLipSyncMicInput;
  // Forward declaring type: OVRLipSyncContext
  class OVRLipSyncContext;
  // Forward declaring type: ONSPAudioSource
  class ONSPAudioSource;
  // Forward declaring type: OvrAvatarBase
  class OvrAvatarBase;
  // Forward declaring type: OvrAvatarTouchController
  class OvrAvatarTouchController;
  // Forward declaring type: OvrAvatarBody
  class OvrAvatarBody;
  // Forward declaring type: OvrAvatarHand
  class OvrAvatarHand;
  // Forward declaring type: OvrAvatarPacket
  class OvrAvatarPacket;
  // Forward declaring type: OvrAvatarAsset
  class OvrAvatarAsset;
  // Forward declaring type: OvrAvatarSkinnedMeshRenderComponent
  class OvrAvatarSkinnedMeshRenderComponent;
  // Forward declaring type: ovrAvatarRenderPart_SkinnedMeshRender
  struct ovrAvatarRenderPart_SkinnedMeshRender;
  // Forward declaring type: OvrAvatarSkinnedMeshRenderPBSComponent
  class OvrAvatarSkinnedMeshRenderPBSComponent;
  // Forward declaring type: ovrAvatarRenderPart_SkinnedMeshRenderPBS
  struct ovrAvatarRenderPart_SkinnedMeshRenderPBS;
  // Forward declaring type: OvrAvatarSkinnedMeshPBSV2RenderComponent
  class OvrAvatarSkinnedMeshPBSV2RenderComponent;
  // Forward declaring type: ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2
  struct ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2;
  // Forward declaring type: ovrAvatarHandInputState
  struct ovrAvatarHandInputState;
  // Forward declaring type: ovrAvatarGazeTarget
  struct ovrAvatarGazeTarget;
  // Forward declaring type: ovrAvatarGazeTargetType
  struct ovrAvatarGazeTargetType;
  // Forward declaring type: OvrAvatarComponent
  class OvrAvatarComponent_;
  // Skipping declaration: ovrAvatarLight because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OvrAvatar
  class OvrAvatar;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OvrAvatar);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OvrAvatar*, "", "OvrAvatar");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1E5
  #pragma pack(push, 1)
  // Autogenerated type: OvrAvatar
  // [TokenAttribute] Offset: FFFFFFFF
  class OvrAvatar : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::OvrAvatar::PacketEventArgs
    class PacketEventArgs;
    // Nested type: ::GlobalNamespace::OvrAvatar::HandType
    struct HandType;
    // Nested type: ::GlobalNamespace::OvrAvatar::HandJoint
    struct HandJoint;
    // Nested type: ::GlobalNamespace::OvrAvatar::$WaitForMouthAudioSource$d__137
    class $WaitForMouthAudioSource$d__137;
    public:
    // [HeaderAttribute] Offset: 0x7829C4
    // public System.IntPtr sdkAvatar
    // Size: 0x8
    // Offset: 0x18
    ::System::IntPtr sdkAvatar;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.String oculusUserID
    // Size: 0x8
    // Offset: 0x20
    ::StringW oculusUserID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public OvrAvatarDriver Driver
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::OvrAvatarDriver* Driver;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OvrAvatarDriver*) == 0x8);
    // [HeaderAttribute] Offset: 0x7829FC
    // public System.Boolean EnableBody
    // Size: 0x1
    // Offset: 0x30
    bool EnableBody;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean EnableHands
    // Size: 0x1
    // Offset: 0x31
    bool EnableHands;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean EnableBase
    // Size: 0x1
    // Offset: 0x32
    bool EnableBase;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean EnableExpressive
    // Size: 0x1
    // Offset: 0x33
    bool EnableExpressive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [HeaderAttribute] Offset: 0x782A34
    // public System.Boolean RecordPackets
    // Size: 0x1
    // Offset: 0x34
    bool RecordPackets;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean UseSDKPackets
    // Size: 0x1
    // Offset: 0x35
    bool UseSDKPackets;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UseSDKPackets and: PacketSettings
    char __padding8[0x2] = {};
    // public PacketRecordSettings PacketSettings
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::PacketRecordSettings* PacketSettings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PacketRecordSettings*) == 0x8);
    // [HeaderAttribute] Offset: 0x782A6C
    // public System.Boolean StartWithControllers
    // Size: 0x1
    // Offset: 0x40
    bool StartWithControllers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: StartWithControllers and: FirstPersonLayer
    char __padding10[0x7] = {};
    // public AvatarLayer FirstPersonLayer
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::AvatarLayer* FirstPersonLayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AvatarLayer*) == 0x8);
    // public AvatarLayer ThirdPersonLayer
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::AvatarLayer* ThirdPersonLayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AvatarLayer*) == 0x8);
    // public System.Boolean ShowFirstPerson
    // Size: 0x1
    // Offset: 0x58
    bool ShowFirstPerson;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean ShowThirdPerson
    // Size: 0x1
    // Offset: 0x59
    bool ShowThirdPerson;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ShowThirdPerson and: Capabilities
    char __padding14[0x2] = {};
    // ovrAvatarCapabilities Capabilities
    // Size: 0x4
    // Offset: 0x5C
    ::GlobalNamespace::ovrAvatarCapabilities Capabilities;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ovrAvatarCapabilities) == 0x4);
    // [TooltipAttribute] Offset: 0x782AA4
    // [HeaderAttribute] Offset: 0x782AA4
    // ovrAvatarAssetLevelOfDetail LevelOfDetail
    // Size: 0x4
    // Offset: 0x60
    ::GlobalNamespace::ovrAvatarAssetLevelOfDetail LevelOfDetail;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ovrAvatarAssetLevelOfDetail) == 0x4);
    // [TooltipAttribute] Offset: 0x782B14
    // private System.Boolean CombineMeshes
    // Size: 0x1
    // Offset: 0x64
    bool CombineMeshes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x782B4C
    // public System.Boolean UseTransparentRenderQueue
    // Size: 0x1
    // Offset: 0x65
    bool UseTransparentRenderQueue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UseTransparentRenderQueue and: Monochrome_SurfaceShader
    char __padding18[0x2] = {};
    // [HeaderAttribute] Offset: 0x782B84
    // public UnityEngine.Shader Monochrome_SurfaceShader
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Shader* Monochrome_SurfaceShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader Monochrome_SurfaceShader_SelfOccluding
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Shader* Monochrome_SurfaceShader_SelfOccluding;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader Monochrome_SurfaceShader_PBS
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Shader* Monochrome_SurfaceShader_PBS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader Skinshaded_SurfaceShader_SingleComponent
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Shader* Skinshaded_SurfaceShader_SingleComponent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader Skinshaded_VertFrag_SingleComponent
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Shader* Skinshaded_VertFrag_SingleComponent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader Skinshaded_VertFrag_CombinedMesh
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Shader* Skinshaded_VertFrag_CombinedMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader Skinshaded_Expressive_SurfaceShader_SingleComponent
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Shader* Skinshaded_Expressive_SurfaceShader_SingleComponent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader Skinshaded_Expressive_VertFrag_SingleComponent
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Shader* Skinshaded_Expressive_VertFrag_SingleComponent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader Skinshaded_Expressive_VertFrag_CombinedMesh
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::Shader* Skinshaded_Expressive_VertFrag_CombinedMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader Loader_VertFrag_CombinedMesh
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::Shader* Loader_VertFrag_CombinedMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader EyeLens
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::Shader* EyeLens;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader ControllerShader
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::Shader* ControllerShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // [HeaderAttribute] Offset: 0x782BBC
    // public System.Boolean CanOwnMicrophone
    // Size: 0x1
    // Offset: 0xC8
    bool CanOwnMicrophone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x782BF4
    // public System.Boolean EnableLaughter
    // Size: 0x1
    // Offset: 0xC9
    bool EnableLaughter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: EnableLaughter and: MouthAnchor
    char __padding32[0x6] = {};
    // public UnityEngine.GameObject MouthAnchor
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::GameObject* MouthAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Transform LeftHandCustomPose
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::Transform* LeftHandCustomPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform RightHandCustomPose
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::Transform* RightHandCustomPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Collections.Generic.HashSet`1<System.UInt64> assetLoadingIds
    // Size: 0x8
    // Offset: 0xE8
    ::System::Collections::Generic::HashSet_1<uint64_t>* assetLoadingIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<uint64_t>*) == 0x8);
    // private System.Boolean assetsFinishedLoading
    // Size: 0x1
    // Offset: 0xF0
    bool assetsFinishedLoading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: assetsFinishedLoading and: materialManager
    char __padding37[0x7] = {};
    // private OvrAvatarMaterialManager materialManager
    // Size: 0x8
    // Offset: 0xF8
    ::GlobalNamespace::OvrAvatarMaterialManager* materialManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OvrAvatarMaterialManager*) == 0x8);
    // private System.Boolean waitingForCombinedMesh
    // Size: 0x1
    // Offset: 0x100
    bool waitingForCombinedMesh;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: waitingForCombinedMesh and: clothingAlphaOffset
    char __padding39[0x3] = {};
    // private UnityEngine.Vector4 clothingAlphaOffset
    // Size: 0x10
    // Offset: 0x104
    ::UnityEngine::Vector4 clothingAlphaOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // Padding between fields: clothingAlphaOffset and: clothingAlphaTexture
    char __padding40[0x4] = {};
    // private System.UInt64 clothingAlphaTexture
    // Size: 0x8
    // Offset: 0x118
    uint64_t clothingAlphaTexture;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private OVRLipSyncMicInput micInput
    // Size: 0x8
    // Offset: 0x120
    ::GlobalNamespace::OVRLipSyncMicInput* micInput;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRLipSyncMicInput*) == 0x8);
    // private OVRLipSyncContext lipsyncContext
    // Size: 0x8
    // Offset: 0x128
    ::GlobalNamespace::OVRLipSyncContext* lipsyncContext;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRLipSyncContext*) == 0x8);
    // private OVRLipSync/Frame currentFrame
    // Size: 0x8
    // Offset: 0x130
    ::GlobalNamespace::OVRLipSync::Frame* currentFrame;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRLipSync::Frame*) == 0x8);
    // private System.Single[] visemes
    // Size: 0x8
    // Offset: 0x138
    ::ArrayW<float> visemes;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x140
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private ONSPAudioSource spatializedSource
    // Size: 0x8
    // Offset: 0x148
    ::GlobalNamespace::ONSPAudioSource* spatializedSource;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ONSPAudioSource*) == 0x8);
    // private System.Collections.Generic.List`1<System.Single[]> voiceUpdates
    // Size: 0x8
    // Offset: 0x150
    ::System::Collections::Generic::List_1<::ArrayW<float>>* voiceUpdates;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::ArrayW<float>>*) == 0x8);
    // private UnityEngine.Transform cachedLeftHandCustomPose
    // Size: 0x8
    // Offset: 0x158
    ::UnityEngine::Transform* cachedLeftHandCustomPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform[] cachedCustomLeftHandJoints
    // Size: 0x8
    // Offset: 0x160
    ::ArrayW<::UnityEngine::Transform*> cachedCustomLeftHandJoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // private ovrAvatarTransform[] cachedLeftHandTransforms
    // Size: 0x8
    // Offset: 0x168
    ::ArrayW<::GlobalNamespace::ovrAvatarTransform> cachedLeftHandTransforms;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::ovrAvatarTransform>) == 0x8);
    // private UnityEngine.Transform cachedRightHandCustomPose
    // Size: 0x8
    // Offset: 0x170
    ::UnityEngine::Transform* cachedRightHandCustomPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform[] cachedCustomRightHandJoints
    // Size: 0x8
    // Offset: 0x178
    ::ArrayW<::UnityEngine::Transform*> cachedCustomRightHandJoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // private ovrAvatarTransform[] cachedRightHandTransforms
    // Size: 0x8
    // Offset: 0x180
    ::ArrayW<::GlobalNamespace::ovrAvatarTransform> cachedRightHandTransforms;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::ovrAvatarTransform>) == 0x8);
    // private System.Boolean showLeftController
    // Size: 0x1
    // Offset: 0x188
    bool showLeftController;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean showRightController
    // Size: 0x1
    // Offset: 0x189
    bool showRightController;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showRightController and: oculusUserIDInternal
    char __padding56[0x6] = {};
    // System.UInt64 oculusUserIDInternal
    // Size: 0x8
    // Offset: 0x190
    uint64_t oculusUserIDInternal;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // OvrAvatarBase Base
    // Size: 0x8
    // Offset: 0x198
    ::GlobalNamespace::OvrAvatarBase* Base;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OvrAvatarBase*) == 0x8);
    // OvrAvatarTouchController ControllerLeft
    // Size: 0x8
    // Offset: 0x1A0
    ::GlobalNamespace::OvrAvatarTouchController* ControllerLeft;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OvrAvatarTouchController*) == 0x8);
    // OvrAvatarTouchController ControllerRight
    // Size: 0x8
    // Offset: 0x1A8
    ::GlobalNamespace::OvrAvatarTouchController* ControllerRight;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OvrAvatarTouchController*) == 0x8);
    // OvrAvatarBody Body
    // Size: 0x8
    // Offset: 0x1B0
    ::GlobalNamespace::OvrAvatarBody* Body;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OvrAvatarBody*) == 0x8);
    // OvrAvatarHand HandLeft
    // Size: 0x8
    // Offset: 0x1B8
    ::GlobalNamespace::OvrAvatarHand* HandLeft;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OvrAvatarHand*) == 0x8);
    // OvrAvatarHand HandRight
    // Size: 0x8
    // Offset: 0x1C0
    ::GlobalNamespace::OvrAvatarHand* HandRight;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OvrAvatarHand*) == 0x8);
    // ovrAvatarLookAndFeelVersion LookAndFeelVersion
    // Size: 0x4
    // Offset: 0x1C8
    ::GlobalNamespace::ovrAvatarLookAndFeelVersion LookAndFeelVersion;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ovrAvatarLookAndFeelVersion) == 0x4);
    // ovrAvatarLookAndFeelVersion FallbackLookAndFeelVersion
    // Size: 0x4
    // Offset: 0x1CC
    ::GlobalNamespace::ovrAvatarLookAndFeelVersion FallbackLookAndFeelVersion;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ovrAvatarLookAndFeelVersion) == 0x4);
    // private OvrAvatarPacket CurrentUnityPacket
    // Size: 0x8
    // Offset: 0x1D0
    ::GlobalNamespace::OvrAvatarPacket* CurrentUnityPacket;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OvrAvatarPacket*) == 0x8);
    // public System.EventHandler`1<OvrAvatar/PacketEventArgs> PacketRecorded
    // Size: 0x8
    // Offset: 0x1D8
    ::System::EventHandler_1<::GlobalNamespace::OvrAvatar::PacketEventArgs*>* PacketRecorded;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::GlobalNamespace::OvrAvatar::PacketEventArgs*>*) == 0x8);
    // public System.Single VoiceAmplitude
    // Size: 0x4
    // Offset: 0x1E0
    float VoiceAmplitude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean EnableMouthVertexAnimation
    // Size: 0x1
    // Offset: 0x1E4
    bool EnableMouthVertexAnimation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private System.Boolean doneExpressiveGlobalInit
    static bool _get_doneExpressiveGlobalInit();
    // Set static field: static private System.Boolean doneExpressiveGlobalInit
    static void _set_doneExpressiveGlobalInit(bool value);
    // Get static field: static private ovrAvatarVisemes RuntimeVisemes
    static ::GlobalNamespace::ovrAvatarVisemes _get_RuntimeVisemes();
    // Set static field: static private ovrAvatarVisemes RuntimeVisemes
    static void _set_RuntimeVisemes(::GlobalNamespace::ovrAvatarVisemes value);
    // static field const value: static private System.Boolean USE_MOBILE_TEXTURE_FORMAT
    static constexpr const bool USE_MOBILE_TEXTURE_FORMAT = true;
    // Get static field: static private System.Boolean USE_MOBILE_TEXTURE_FORMAT
    static bool _get_USE_MOBILE_TEXTURE_FORMAT();
    // Set static field: static private System.Boolean USE_MOBILE_TEXTURE_FORMAT
    static void _set_USE_MOBILE_TEXTURE_FORMAT(bool value);
    // Get static field: static private readonly UnityEngine.Vector3 MOUTH_HEAD_OFFSET
    static ::UnityEngine::Vector3 _get_MOUTH_HEAD_OFFSET();
    // Set static field: static private readonly UnityEngine.Vector3 MOUTH_HEAD_OFFSET
    static void _set_MOUTH_HEAD_OFFSET(::UnityEngine::Vector3 value);
    // static field const value: static private System.String MOUTH_HELPER_NAME
    static constexpr const char* MOUTH_HELPER_NAME = "MouthAnchor";
    // Get static field: static private System.String MOUTH_HELPER_NAME
    static ::StringW _get_MOUTH_HELPER_NAME();
    // Set static field: static private System.String MOUTH_HELPER_NAME
    static void _set_MOUTH_HELPER_NAME(::StringW value);
    // static field const value: static private System.Int32 VISEME_COUNT
    static constexpr const int VISEME_COUNT = 16;
    // Get static field: static private System.Int32 VISEME_COUNT
    static int _get_VISEME_COUNT();
    // Set static field: static private System.Int32 VISEME_COUNT
    static void _set_VISEME_COUNT(int value);
    // static field const value: static private System.Single ACTION_UNIT_ONSET_SPEED
    static constexpr const float ACTION_UNIT_ONSET_SPEED = 30;
    // Get static field: static private System.Single ACTION_UNIT_ONSET_SPEED
    static float _get_ACTION_UNIT_ONSET_SPEED();
    // Set static field: static private System.Single ACTION_UNIT_ONSET_SPEED
    static void _set_ACTION_UNIT_ONSET_SPEED(float value);
    // static field const value: static private System.Single ACTION_UNIT_FALLOFF_SPEED
    static constexpr const float ACTION_UNIT_FALLOFF_SPEED = 20;
    // Get static field: static private System.Single ACTION_UNIT_FALLOFF_SPEED
    static float _get_ACTION_UNIT_FALLOFF_SPEED();
    // Set static field: static private System.Single ACTION_UNIT_FALLOFF_SPEED
    static void _set_ACTION_UNIT_FALLOFF_SPEED(float value);
    // static field const value: static private System.Single VISEME_LEVEL_MULTIPLIER
    static constexpr const float VISEME_LEVEL_MULTIPLIER = 1.5;
    // Get static field: static private System.Single VISEME_LEVEL_MULTIPLIER
    static float _get_VISEME_LEVEL_MULTIPLIER();
    // Set static field: static private System.Single VISEME_LEVEL_MULTIPLIER
    static void _set_VISEME_LEVEL_MULTIPLIER(float value);
    // Get static field: static private System.String[,] HandJoints
    static ::ArrayW<::StringW> _get_HandJoints();
    // Set static field: static private System.String[,] HandJoints
    static void _set_HandJoints(::ArrayW<::StringW> value);
    // Get static field: static private UnityEngine.Vector3 MOUTH_POSITION_OFFSET
    static ::UnityEngine::Vector3 _get_MOUTH_POSITION_OFFSET();
    // Set static field: static private UnityEngine.Vector3 MOUTH_POSITION_OFFSET
    static void _set_MOUTH_POSITION_OFFSET(::UnityEngine::Vector3 value);
    // Get static field: static private System.String VOICE_PROPERTY
    static ::StringW _get_VOICE_PROPERTY();
    // Set static field: static private System.String VOICE_PROPERTY
    static void _set_VOICE_PROPERTY(::StringW value);
    // Get static field: static private System.String MOUTH_POSITION_PROPERTY
    static ::StringW _get_MOUTH_POSITION_PROPERTY();
    // Set static field: static private System.String MOUTH_POSITION_PROPERTY
    static void _set_MOUTH_POSITION_PROPERTY(::StringW value);
    // Get static field: static private System.String MOUTH_DIRECTION_PROPERTY
    static ::StringW _get_MOUTH_DIRECTION_PROPERTY();
    // Set static field: static private System.String MOUTH_DIRECTION_PROPERTY
    static void _set_MOUTH_DIRECTION_PROPERTY(::StringW value);
    // Get static field: static private System.String MOUTH_SCALE_PROPERTY
    static ::StringW _get_MOUTH_SCALE_PROPERTY();
    // Set static field: static private System.String MOUTH_SCALE_PROPERTY
    static void _set_MOUTH_SCALE_PROPERTY(::StringW value);
    // Get static field: static private System.Single MOUTH_SCALE_GLOBAL
    static float _get_MOUTH_SCALE_GLOBAL();
    // Set static field: static private System.Single MOUTH_SCALE_GLOBAL
    static void _set_MOUTH_SCALE_GLOBAL(float value);
    // Get static field: static private System.Single MOUTH_MAX_GLOBAL
    static float _get_MOUTH_MAX_GLOBAL();
    // Set static field: static private System.Single MOUTH_MAX_GLOBAL
    static void _set_MOUTH_MAX_GLOBAL(float value);
    // Get static field: static private System.String NECK_JONT
    static ::StringW _get_NECK_JONT();
    // Set static field: static private System.String NECK_JONT
    static void _set_NECK_JONT(::StringW value);
    // Get static field: static private ovrAvatarLights ovrLights
    static ::GlobalNamespace::ovrAvatarLights _get_ovrLights();
    // Set static field: static private ovrAvatarLights ovrLights
    static void _set_ovrLights(::GlobalNamespace::ovrAvatarLights value);
    // Get instance field reference: public System.IntPtr sdkAvatar
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_sdkAvatar();
    // Get instance field reference: public System.String oculusUserID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_oculusUserID();
    // Get instance field reference: public OvrAvatarDriver Driver
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OvrAvatarDriver*& dyn_Driver();
    // Get instance field reference: public System.Boolean EnableBody
    [[deprecated("Use field access instead!")]] bool& dyn_EnableBody();
    // Get instance field reference: public System.Boolean EnableHands
    [[deprecated("Use field access instead!")]] bool& dyn_EnableHands();
    // Get instance field reference: public System.Boolean EnableBase
    [[deprecated("Use field access instead!")]] bool& dyn_EnableBase();
    // Get instance field reference: public System.Boolean EnableExpressive
    [[deprecated("Use field access instead!")]] bool& dyn_EnableExpressive();
    // Get instance field reference: public System.Boolean RecordPackets
    [[deprecated("Use field access instead!")]] bool& dyn_RecordPackets();
    // Get instance field reference: public System.Boolean UseSDKPackets
    [[deprecated("Use field access instead!")]] bool& dyn_UseSDKPackets();
    // Get instance field reference: public PacketRecordSettings PacketSettings
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PacketRecordSettings*& dyn_PacketSettings();
    // Get instance field reference: public System.Boolean StartWithControllers
    [[deprecated("Use field access instead!")]] bool& dyn_StartWithControllers();
    // Get instance field reference: public AvatarLayer FirstPersonLayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AvatarLayer*& dyn_FirstPersonLayer();
    // Get instance field reference: public AvatarLayer ThirdPersonLayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AvatarLayer*& dyn_ThirdPersonLayer();
    // Get instance field reference: public System.Boolean ShowFirstPerson
    [[deprecated("Use field access instead!")]] bool& dyn_ShowFirstPerson();
    // Get instance field reference: public System.Boolean ShowThirdPerson
    [[deprecated("Use field access instead!")]] bool& dyn_ShowThirdPerson();
    // Get instance field reference: ovrAvatarCapabilities Capabilities
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ovrAvatarCapabilities& dyn_Capabilities();
    // Get instance field reference: ovrAvatarAssetLevelOfDetail LevelOfDetail
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ovrAvatarAssetLevelOfDetail& dyn_LevelOfDetail();
    // Get instance field reference: private System.Boolean CombineMeshes
    [[deprecated("Use field access instead!")]] bool& dyn_CombineMeshes();
    // Get instance field reference: public System.Boolean UseTransparentRenderQueue
    [[deprecated("Use field access instead!")]] bool& dyn_UseTransparentRenderQueue();
    // Get instance field reference: public UnityEngine.Shader Monochrome_SurfaceShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_Monochrome_SurfaceShader();
    // Get instance field reference: public UnityEngine.Shader Monochrome_SurfaceShader_SelfOccluding
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_Monochrome_SurfaceShader_SelfOccluding();
    // Get instance field reference: public UnityEngine.Shader Monochrome_SurfaceShader_PBS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_Monochrome_SurfaceShader_PBS();
    // Get instance field reference: public UnityEngine.Shader Skinshaded_SurfaceShader_SingleComponent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_Skinshaded_SurfaceShader_SingleComponent();
    // Get instance field reference: public UnityEngine.Shader Skinshaded_VertFrag_SingleComponent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_Skinshaded_VertFrag_SingleComponent();
    // Get instance field reference: public UnityEngine.Shader Skinshaded_VertFrag_CombinedMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_Skinshaded_VertFrag_CombinedMesh();
    // Get instance field reference: public UnityEngine.Shader Skinshaded_Expressive_SurfaceShader_SingleComponent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_Skinshaded_Expressive_SurfaceShader_SingleComponent();
    // Get instance field reference: public UnityEngine.Shader Skinshaded_Expressive_VertFrag_SingleComponent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_Skinshaded_Expressive_VertFrag_SingleComponent();
    // Get instance field reference: public UnityEngine.Shader Skinshaded_Expressive_VertFrag_CombinedMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_Skinshaded_Expressive_VertFrag_CombinedMesh();
    // Get instance field reference: public UnityEngine.Shader Loader_VertFrag_CombinedMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_Loader_VertFrag_CombinedMesh();
    // Get instance field reference: public UnityEngine.Shader EyeLens
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_EyeLens();
    // Get instance field reference: public UnityEngine.Shader ControllerShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_ControllerShader();
    // Get instance field reference: public System.Boolean CanOwnMicrophone
    [[deprecated("Use field access instead!")]] bool& dyn_CanOwnMicrophone();
    // Get instance field reference: public System.Boolean EnableLaughter
    [[deprecated("Use field access instead!")]] bool& dyn_EnableLaughter();
    // Get instance field reference: public UnityEngine.GameObject MouthAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_MouthAnchor();
    // Get instance field reference: public UnityEngine.Transform LeftHandCustomPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_LeftHandCustomPose();
    // Get instance field reference: public UnityEngine.Transform RightHandCustomPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_RightHandCustomPose();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.UInt64> assetLoadingIds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<uint64_t>*& dyn_assetLoadingIds();
    // Get instance field reference: private System.Boolean assetsFinishedLoading
    [[deprecated("Use field access instead!")]] bool& dyn_assetsFinishedLoading();
    // Get instance field reference: private OvrAvatarMaterialManager materialManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OvrAvatarMaterialManager*& dyn_materialManager();
    // Get instance field reference: private System.Boolean waitingForCombinedMesh
    [[deprecated("Use field access instead!")]] bool& dyn_waitingForCombinedMesh();
    // Get instance field reference: private UnityEngine.Vector4 clothingAlphaOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_clothingAlphaOffset();
    // Get instance field reference: private System.UInt64 clothingAlphaTexture
    [[deprecated("Use field access instead!")]] uint64_t& dyn_clothingAlphaTexture();
    // Get instance field reference: private OVRLipSyncMicInput micInput
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRLipSyncMicInput*& dyn_micInput();
    // Get instance field reference: private OVRLipSyncContext lipsyncContext
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRLipSyncContext*& dyn_lipsyncContext();
    // Get instance field reference: private OVRLipSync/Frame currentFrame
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRLipSync::Frame*& dyn_currentFrame();
    // Get instance field reference: private System.Single[] visemes
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_visemes();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private ONSPAudioSource spatializedSource
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ONSPAudioSource*& dyn_spatializedSource();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Single[]> voiceUpdates
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::ArrayW<float>>*& dyn_voiceUpdates();
    // Get instance field reference: private UnityEngine.Transform cachedLeftHandCustomPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_cachedLeftHandCustomPose();
    // Get instance field reference: private UnityEngine.Transform[] cachedCustomLeftHandJoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_cachedCustomLeftHandJoints();
    // Get instance field reference: private ovrAvatarTransform[] cachedLeftHandTransforms
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ovrAvatarTransform>& dyn_cachedLeftHandTransforms();
    // Get instance field reference: private UnityEngine.Transform cachedRightHandCustomPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_cachedRightHandCustomPose();
    // Get instance field reference: private UnityEngine.Transform[] cachedCustomRightHandJoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_cachedCustomRightHandJoints();
    // Get instance field reference: private ovrAvatarTransform[] cachedRightHandTransforms
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ovrAvatarTransform>& dyn_cachedRightHandTransforms();
    // Get instance field reference: private System.Boolean showLeftController
    [[deprecated("Use field access instead!")]] bool& dyn_showLeftController();
    // Get instance field reference: private System.Boolean showRightController
    [[deprecated("Use field access instead!")]] bool& dyn_showRightController();
    // Get instance field reference: System.UInt64 oculusUserIDInternal
    [[deprecated("Use field access instead!")]] uint64_t& dyn_oculusUserIDInternal();
    // Get instance field reference: OvrAvatarBase Base
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OvrAvatarBase*& dyn_Base();
    // Get instance field reference: OvrAvatarTouchController ControllerLeft
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OvrAvatarTouchController*& dyn_ControllerLeft();
    // Get instance field reference: OvrAvatarTouchController ControllerRight
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OvrAvatarTouchController*& dyn_ControllerRight();
    // Get instance field reference: OvrAvatarBody Body
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OvrAvatarBody*& dyn_Body();
    // Get instance field reference: OvrAvatarHand HandLeft
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OvrAvatarHand*& dyn_HandLeft();
    // Get instance field reference: OvrAvatarHand HandRight
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OvrAvatarHand*& dyn_HandRight();
    // Get instance field reference: ovrAvatarLookAndFeelVersion LookAndFeelVersion
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ovrAvatarLookAndFeelVersion& dyn_LookAndFeelVersion();
    // Get instance field reference: ovrAvatarLookAndFeelVersion FallbackLookAndFeelVersion
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ovrAvatarLookAndFeelVersion& dyn_FallbackLookAndFeelVersion();
    // Get instance field reference: private OvrAvatarPacket CurrentUnityPacket
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OvrAvatarPacket*& dyn_CurrentUnityPacket();
    // Get instance field reference: public System.EventHandler`1<OvrAvatar/PacketEventArgs> PacketRecorded
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::GlobalNamespace::OvrAvatar::PacketEventArgs*>*& dyn_PacketRecorded();
    // Get instance field reference: public System.Single VoiceAmplitude
    [[deprecated("Use field access instead!")]] float& dyn_VoiceAmplitude();
    // Get instance field reference: public System.Boolean EnableMouthVertexAnimation
    [[deprecated("Use field access instead!")]] bool& dyn_EnableMouthVertexAnimation();
    // static private System.Void .cctor()
    // Offset: 0xF80FE4
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0xF871AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OvrAvatar* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OvrAvatar::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OvrAvatar*, creationType>()));
    }
    // private System.Void OnDestroy()
    // Offset: 0xF813D0
    void OnDestroy();
    // public System.Void AssetLoadedCallback(OvrAvatarAsset asset)
    // Offset: 0xF81464
    void AssetLoadedCallback(::GlobalNamespace::OvrAvatarAsset* asset);
    // public System.Void CombinedMeshLoadedCallback(System.IntPtr assetPtr)
    // Offset: 0xF814CC
    void CombinedMeshLoadedCallback(::System::IntPtr assetPtr);
    // private OvrAvatarSkinnedMeshRenderComponent AddSkinnedMeshRenderComponent(UnityEngine.GameObject gameObject, ovrAvatarRenderPart_SkinnedMeshRender skinnedMeshRender)
    // Offset: 0xF815FC
    ::GlobalNamespace::OvrAvatarSkinnedMeshRenderComponent* AddSkinnedMeshRenderComponent(::UnityEngine::GameObject* gameObject, ::GlobalNamespace::ovrAvatarRenderPart_SkinnedMeshRender skinnedMeshRender);
    // private OvrAvatarSkinnedMeshRenderPBSComponent AddSkinnedMeshRenderPBSComponent(UnityEngine.GameObject gameObject, ovrAvatarRenderPart_SkinnedMeshRenderPBS skinnedMeshRenderPBS)
    // Offset: 0xF816DC
    ::GlobalNamespace::OvrAvatarSkinnedMeshRenderPBSComponent* AddSkinnedMeshRenderPBSComponent(::UnityEngine::GameObject* gameObject, ::GlobalNamespace::ovrAvatarRenderPart_SkinnedMeshRenderPBS skinnedMeshRenderPBS);
    // private OvrAvatarSkinnedMeshPBSV2RenderComponent AddSkinnedMeshRenderPBSV2Component(System.IntPtr renderPart, UnityEngine.GameObject go, ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 skinnedMeshRenderPBSV2, System.Boolean isBodyPartZero, System.Boolean isControllerModel)
    // Offset: 0xF817B8
    ::GlobalNamespace::OvrAvatarSkinnedMeshPBSV2RenderComponent* AddSkinnedMeshRenderPBSV2Component(::System::IntPtr renderPart, ::UnityEngine::GameObject* go, ::GlobalNamespace::ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 skinnedMeshRenderPBSV2, bool isBodyPartZero, bool isControllerModel);
    // static public System.IntPtr GetRenderPart(ovrAvatarComponent component, System.UInt32 renderPartIndex)
    // Offset: 0xF81D84
    static ::System::IntPtr GetRenderPart(::GlobalNamespace::ovrAvatarComponent component, uint renderPartIndex);
    // static private System.String GetRenderPartName(ovrAvatarComponent component, System.UInt32 renderPartIndex)
    // Offset: 0xF81E60
    static ::StringW GetRenderPartName(::GlobalNamespace::ovrAvatarComponent component, uint renderPartIndex);
    // static System.Void ConvertTransform(System.Single[] transform, ref ovrAvatarTransform target)
    // Offset: 0xF81ED8
    static void ConvertTransform(::ArrayW<float> transform, ByRef<::GlobalNamespace::ovrAvatarTransform> target);
    // static System.Void ConvertTransform(ovrAvatarTransform transform, UnityEngine.Transform target)
    // Offset: 0xF81FC0
    static void ConvertTransform(::GlobalNamespace::ovrAvatarTransform transform, ::UnityEngine::Transform* target);
    // static public ovrAvatarTransform CreateOvrAvatarTransform(UnityEngine.Vector3 position, UnityEngine.Quaternion orientation)
    // Offset: 0xF8204C
    static ::GlobalNamespace::ovrAvatarTransform CreateOvrAvatarTransform(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion orientation);
    // static private ovrAvatarGazeTarget CreateOvrGazeTarget(System.UInt32 targetId, UnityEngine.Vector3 targetPosition, ovrAvatarGazeTargetType targetType)
    // Offset: 0xF820D4
    static ::GlobalNamespace::ovrAvatarGazeTarget CreateOvrGazeTarget(uint targetId, ::UnityEngine::Vector3 targetPosition, ::GlobalNamespace::ovrAvatarGazeTargetType targetType);
    // private System.Void BuildRenderComponents()
    // Offset: 0xF820EC
    void BuildRenderComponents();
    // private System.Void AddAvatarComponent(ref T root, ovrAvatarComponent nativeComponent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AddAvatarComponent(ByRef<T> root, ::GlobalNamespace::ovrAvatarComponent nativeComponent) {
      static_assert(std::is_convertible_v<T, ::GlobalNamespace::OvrAvatarComponent_*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OvrAvatar::AddAvatarComponent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddAvatarComponent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractType(nativeComponent)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, byref(root), nativeComponent);
    }
    // private System.Void UpdateCustomPoses()
    // Offset: 0xF8259C
    void UpdateCustomPoses();
    // static private System.Boolean UpdatePoseRoot(UnityEngine.Transform poseRoot, ref UnityEngine.Transform cachedPoseRoot, ref UnityEngine.Transform[] cachedPoseJoints, ref ovrAvatarTransform[] transforms)
    // Offset: 0xF8291C
    static bool UpdatePoseRoot(::UnityEngine::Transform* poseRoot, ByRef<::UnityEngine::Transform*> cachedPoseRoot, ByRef<::ArrayW<::UnityEngine::Transform*>> cachedPoseJoints, ByRef<::ArrayW<::GlobalNamespace::ovrAvatarTransform>> transforms);
    // static private System.Boolean UpdateTransforms(UnityEngine.Transform[] joints, ovrAvatarTransform[] transforms)
    // Offset: 0xF82AC4
    static bool UpdateTransforms(::ArrayW<::UnityEngine::Transform*> joints, ::ArrayW<::GlobalNamespace::ovrAvatarTransform> transforms);
    // static private System.Void OrderJoints(UnityEngine.Transform transform, System.Collections.Generic.List`1<UnityEngine.Transform> joints)
    // Offset: 0xF82D10
    static void OrderJoints(::UnityEngine::Transform* transform, ::System::Collections::Generic::List_1<::UnityEngine::Transform*>* joints);
    // private System.Void AvatarSpecificationCallback(System.IntPtr avatarSpecification)
    // Offset: 0xF82E04
    void AvatarSpecificationCallback(::System::IntPtr avatarSpecification);
    // private System.Void Start()
    // Offset: 0xF838F4
    void Start();
    // private System.Void Update()
    // Offset: 0xF83D00
    void Update();
    // static public ovrAvatarHandInputState CreateInputState(ovrAvatarTransform transform, OvrAvatarDriver/ControllerPose pose)
    // Offset: 0xF8477C
    static ::GlobalNamespace::ovrAvatarHandInputState CreateInputState(::GlobalNamespace::ovrAvatarTransform transform, ::GlobalNamespace::OvrAvatarDriver::ControllerPose pose);
    // public System.Void ShowControllers(System.Boolean show)
    // Offset: 0xF847D0
    void ShowControllers(bool show);
    // public System.Void ShowLeftController(System.Boolean show)
    // Offset: 0xF830AC
    void ShowLeftController(bool show);
    // public System.Void ShowRightController(System.Boolean show)
    // Offset: 0xF83150
    void ShowRightController(bool show);
    // public System.Void UpdateVoiceVisualization(System.Single[] voiceSamples)
    // Offset: 0xF84800
    void UpdateVoiceVisualization(::ArrayW<float> voiceSamples);
    // private System.Void RecordFrame()
    // Offset: 0xF840CC
    void RecordFrame();
    // private System.Void RecordUnityFrame()
    // Offset: 0xF84A70
    void RecordUnityFrame();
    // private System.Void RecordSDKFrame()
    // Offset: 0xF84864
    void RecordSDKFrame();
    // private System.Void AddRenderParts(OvrAvatarComponent ovrComponent, ovrAvatarComponent component, UnityEngine.Transform parent)
    // Offset: 0xF85184
    void AddRenderParts(::GlobalNamespace::OvrAvatarComponent_* ovrComponent, ::GlobalNamespace::ovrAvatarComponent component, ::UnityEngine::Transform* parent);
    // public System.Void RefreshBodyParts()
    // Offset: 0xF85600
    void RefreshBodyParts();
    // public System.Nullable`1<ovrAvatarBodyComponent> GetBodyComponent()
    // Offset: 0xF85A04
    ::System::Nullable_1<::GlobalNamespace::ovrAvatarBodyComponent> GetBodyComponent();
    // public UnityEngine.Transform GetHandTransform(OvrAvatar/HandType hand, OvrAvatar/HandJoint joint)
    // Offset: 0xF85B58
    ::UnityEngine::Transform* GetHandTransform(::GlobalNamespace::OvrAvatar::HandType hand, ::GlobalNamespace::OvrAvatar::HandJoint joint);
    // public System.Void GetPointingDirection(OvrAvatar/HandType hand, ref UnityEngine.Vector3 forward, ref UnityEngine.Vector3 up)
    // Offset: 0xF85D3C
    void GetPointingDirection(::GlobalNamespace::OvrAvatar::HandType hand, ByRef<::UnityEngine::Vector3> forward, ByRef<::UnityEngine::Vector3> up);
    // private System.Void UpdateVoiceBehavior()
    // Offset: 0xF842FC
    void UpdateVoiceBehavior();
    // private System.Boolean IsValidMic()
    // Offset: 0xF85E10
    bool IsValidMic();
    // private System.Void InitPostLoad()
    // Offset: 0xF840DC
    void InitPostLoad();
    // static private System.Void ExpressiveGlobalInit()
    // Offset: 0xF85F00
    static void ExpressiveGlobalInit();
    // static private System.Void InitializeLights()
    // Offset: 0xF86558
    static void InitializeLights();
    // static private ovrAvatarLight CreateLightDirectional(System.UInt32 id, UnityEngine.Vector3 direction, System.Single intensity, ref ovrAvatarLight light)
    // Offset: 0xF86A3C
    static ::GlobalNamespace::ovrAvatarLight CreateLightDirectional(uint id, ::UnityEngine::Vector3 direction, float intensity, ByRef<::GlobalNamespace::ovrAvatarLight> light);
    // static private ovrAvatarLight CreateLightPoint(System.UInt32 id, UnityEngine.Vector3 position, System.Single range, System.Single intensity, ref ovrAvatarLight light)
    // Offset: 0xF86A64
    static ::GlobalNamespace::ovrAvatarLight CreateLightPoint(uint id, ::UnityEngine::Vector3 position, float range, float intensity, ByRef<::GlobalNamespace::ovrAvatarLight> light);
    // static private ovrAvatarLight CreateLightSpot(System.UInt32 id, UnityEngine.Vector3 position, UnityEngine.Vector3 direction, System.Single spotAngleDeg, System.Single range, System.Single intensity, ref ovrAvatarLight light)
    // Offset: 0xF86A8C
    static ::GlobalNamespace::ovrAvatarLight CreateLightSpot(uint id, ::UnityEngine::Vector3 position, ::UnityEngine::Vector3 direction, float spotAngleDeg, float range, float intensity, ByRef<::GlobalNamespace::ovrAvatarLight> light);
    // private System.Void UpdateExpressive()
    // Offset: 0xF84608
    void UpdateExpressive();
    // private System.Void ConfigureHelpers()
    // Offset: 0xF85FC4
    void ConfigureHelpers();
    // private System.Collections.IEnumerator WaitForMouthAudioSource()
    // Offset: 0xF86EAC
    ::System::Collections::IEnumerator* WaitForMouthAudioSource();
    // public System.Void DestroyHelperObjects()
    // Offset: 0xF86F18
    void DestroyHelperObjects();
    // public UnityEngine.GameObject CreateHelperObject(UnityEngine.Transform parent, UnityEngine.Vector3 localPositionOffset, System.String helperName, System.String helperTag)
    // Offset: 0xF86D6C
    ::UnityEngine::GameObject* CreateHelperObject(::UnityEngine::Transform* parent, ::UnityEngine::Vector3 localPositionOffset, ::StringW helperName, ::StringW helperTag);
    // public System.Void UpdateVoiceData(System.Int16[] pcmData, System.Int32 numChannels)
    // Offset: 0xF86FDC
    void UpdateVoiceData(::ArrayW<int16_t> pcmData, int numChannels);
    // public System.Void UpdateVoiceData(System.Single[] pcmData, System.Int32 numChannels)
    // Offset: 0xF870C4
    void UpdateVoiceData(::ArrayW<float> pcmData, int numChannels);
    // private System.Void UpdateFacewave()
    // Offset: 0xF86AC8
    void UpdateFacewave();
  }; // OvrAvatar
  #pragma pack(pop)
  static check_size<sizeof(OvrAvatar), 484 + sizeof(bool)> __GlobalNamespace_OvrAvatarSizeCheck;
  static_assert(sizeof(OvrAvatar) == 0x1E5);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OvrAvatar::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)()>(&GlobalNamespace::OvrAvatar::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::AssetLoadedCallback
// Il2CppName: AssetLoadedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)(::GlobalNamespace::OvrAvatarAsset*)>(&GlobalNamespace::OvrAvatar::AssetLoadedCallback)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("", "OvrAvatarAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "AssetLoadedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::CombinedMeshLoadedCallback
// Il2CppName: CombinedMeshLoadedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)(::System::IntPtr)>(&GlobalNamespace::OvrAvatar::CombinedMeshLoadedCallback)> {
  static const MethodInfo* get() {
    static auto* assetPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "CombinedMeshLoadedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetPtr});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::AddSkinnedMeshRenderComponent
// Il2CppName: AddSkinnedMeshRenderComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OvrAvatarSkinnedMeshRenderComponent* (GlobalNamespace::OvrAvatar::*)(::UnityEngine::GameObject*, ::GlobalNamespace::ovrAvatarRenderPart_SkinnedMeshRender)>(&GlobalNamespace::OvrAvatar::AddSkinnedMeshRenderComponent)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* skinnedMeshRender = &::il2cpp_utils::GetClassFromName("", "ovrAvatarRenderPart_SkinnedMeshRender")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "AddSkinnedMeshRenderComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, skinnedMeshRender});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::AddSkinnedMeshRenderPBSComponent
// Il2CppName: AddSkinnedMeshRenderPBSComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OvrAvatarSkinnedMeshRenderPBSComponent* (GlobalNamespace::OvrAvatar::*)(::UnityEngine::GameObject*, ::GlobalNamespace::ovrAvatarRenderPart_SkinnedMeshRenderPBS)>(&GlobalNamespace::OvrAvatar::AddSkinnedMeshRenderPBSComponent)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* skinnedMeshRenderPBS = &::il2cpp_utils::GetClassFromName("", "ovrAvatarRenderPart_SkinnedMeshRenderPBS")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "AddSkinnedMeshRenderPBSComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, skinnedMeshRenderPBS});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::AddSkinnedMeshRenderPBSV2Component
// Il2CppName: AddSkinnedMeshRenderPBSV2Component
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OvrAvatarSkinnedMeshPBSV2RenderComponent* (GlobalNamespace::OvrAvatar::*)(::System::IntPtr, ::UnityEngine::GameObject*, ::GlobalNamespace::ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2, bool, bool)>(&GlobalNamespace::OvrAvatar::AddSkinnedMeshRenderPBSV2Component)> {
  static const MethodInfo* get() {
    static auto* renderPart = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* skinnedMeshRenderPBSV2 = &::il2cpp_utils::GetClassFromName("", "ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2")->byval_arg;
    static auto* isBodyPartZero = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isControllerModel = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "AddSkinnedMeshRenderPBSV2Component", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderPart, go, skinnedMeshRenderPBSV2, isBodyPartZero, isControllerModel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::GetRenderPart
// Il2CppName: GetRenderPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::GlobalNamespace::ovrAvatarComponent, uint)>(&GlobalNamespace::OvrAvatar::GetRenderPart)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("", "ovrAvatarComponent")->byval_arg;
    static auto* renderPartIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "GetRenderPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component, renderPartIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::GetRenderPartName
// Il2CppName: GetRenderPartName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::GlobalNamespace::ovrAvatarComponent, uint)>(&GlobalNamespace::OvrAvatar::GetRenderPartName)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("", "ovrAvatarComponent")->byval_arg;
    static auto* renderPartIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "GetRenderPartName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component, renderPartIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::ConvertTransform
// Il2CppName: ConvertTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<float>, ByRef<::GlobalNamespace::ovrAvatarTransform>)>(&GlobalNamespace::OvrAvatar::ConvertTransform)> {
  static const MethodInfo* get() {
    static auto* transform = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("", "ovrAvatarTransform")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "ConvertTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, target});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::ConvertTransform
// Il2CppName: ConvertTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::ovrAvatarTransform, ::UnityEngine::Transform*)>(&GlobalNamespace::OvrAvatar::ConvertTransform)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("", "ovrAvatarTransform")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "ConvertTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, target});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::CreateOvrAvatarTransform
// Il2CppName: CreateOvrAvatarTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ovrAvatarTransform (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&GlobalNamespace::OvrAvatar::CreateOvrAvatarTransform)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* orientation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "CreateOvrAvatarTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, orientation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::CreateOvrGazeTarget
// Il2CppName: CreateOvrGazeTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ovrAvatarGazeTarget (*)(uint, ::UnityEngine::Vector3, ::GlobalNamespace::ovrAvatarGazeTargetType)>(&GlobalNamespace::OvrAvatar::CreateOvrGazeTarget)> {
  static const MethodInfo* get() {
    static auto* targetId = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* targetPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* targetType = &::il2cpp_utils::GetClassFromName("", "ovrAvatarGazeTargetType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "CreateOvrGazeTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetId, targetPosition, targetType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::BuildRenderComponents
// Il2CppName: BuildRenderComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)()>(&GlobalNamespace::OvrAvatar::BuildRenderComponents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "BuildRenderComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::AddAvatarComponent
// Il2CppName: AddAvatarComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::UpdateCustomPoses
// Il2CppName: UpdateCustomPoses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)()>(&GlobalNamespace::OvrAvatar::UpdateCustomPoses)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "UpdateCustomPoses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::UpdatePoseRoot
// Il2CppName: UpdatePoseRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Transform*, ByRef<::UnityEngine::Transform*>, ByRef<::ArrayW<::UnityEngine::Transform*>>, ByRef<::ArrayW<::GlobalNamespace::ovrAvatarTransform>>)>(&GlobalNamespace::OvrAvatar::UpdatePoseRoot)> {
  static const MethodInfo* get() {
    static auto* poseRoot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* cachedPoseRoot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    static auto* cachedPoseJoints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), 1)->this_arg;
    static auto* transforms = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "ovrAvatarTransform"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "UpdatePoseRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poseRoot, cachedPoseRoot, cachedPoseJoints, transforms});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::UpdateTransforms
// Il2CppName: UpdateTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::UnityEngine::Transform*>, ::ArrayW<::GlobalNamespace::ovrAvatarTransform>)>(&GlobalNamespace::OvrAvatar::UpdateTransforms)> {
  static const MethodInfo* get() {
    static auto* joints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), 1)->byval_arg;
    static auto* transforms = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "ovrAvatarTransform"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "UpdateTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{joints, transforms});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::OrderJoints
// Il2CppName: OrderJoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ::System::Collections::Generic::List_1<::UnityEngine::Transform*>*)>(&GlobalNamespace::OvrAvatar::OrderJoints)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* joints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "OrderJoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, joints});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::AvatarSpecificationCallback
// Il2CppName: AvatarSpecificationCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)(::System::IntPtr)>(&GlobalNamespace::OvrAvatar::AvatarSpecificationCallback)> {
  static const MethodInfo* get() {
    static auto* avatarSpecification = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "AvatarSpecificationCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{avatarSpecification});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)()>(&GlobalNamespace::OvrAvatar::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)()>(&GlobalNamespace::OvrAvatar::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::CreateInputState
// Il2CppName: CreateInputState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ovrAvatarHandInputState (*)(::GlobalNamespace::ovrAvatarTransform, ::GlobalNamespace::OvrAvatarDriver::ControllerPose)>(&GlobalNamespace::OvrAvatar::CreateInputState)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("", "ovrAvatarTransform")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("", "OvrAvatarDriver/ControllerPose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "CreateInputState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, pose});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::ShowControllers
// Il2CppName: ShowControllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)(bool)>(&GlobalNamespace::OvrAvatar::ShowControllers)> {
  static const MethodInfo* get() {
    static auto* show = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "ShowControllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{show});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::ShowLeftController
// Il2CppName: ShowLeftController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)(bool)>(&GlobalNamespace::OvrAvatar::ShowLeftController)> {
  static const MethodInfo* get() {
    static auto* show = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "ShowLeftController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{show});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::ShowRightController
// Il2CppName: ShowRightController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)(bool)>(&GlobalNamespace::OvrAvatar::ShowRightController)> {
  static const MethodInfo* get() {
    static auto* show = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "ShowRightController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{show});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::UpdateVoiceVisualization
// Il2CppName: UpdateVoiceVisualization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)(::ArrayW<float>)>(&GlobalNamespace::OvrAvatar::UpdateVoiceVisualization)> {
  static const MethodInfo* get() {
    static auto* voiceSamples = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "UpdateVoiceVisualization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{voiceSamples});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::RecordFrame
// Il2CppName: RecordFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)()>(&GlobalNamespace::OvrAvatar::RecordFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "RecordFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::RecordUnityFrame
// Il2CppName: RecordUnityFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)()>(&GlobalNamespace::OvrAvatar::RecordUnityFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "RecordUnityFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::RecordSDKFrame
// Il2CppName: RecordSDKFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)()>(&GlobalNamespace::OvrAvatar::RecordSDKFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "RecordSDKFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::AddRenderParts
// Il2CppName: AddRenderParts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)(::GlobalNamespace::OvrAvatarComponent_*, ::GlobalNamespace::ovrAvatarComponent, ::UnityEngine::Transform*)>(&GlobalNamespace::OvrAvatar::AddRenderParts)> {
  static const MethodInfo* get() {
    static auto* ovrComponent = &::il2cpp_utils::GetClassFromName("", "OvrAvatarComponent")->byval_arg;
    static auto* component = &::il2cpp_utils::GetClassFromName("", "ovrAvatarComponent")->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "AddRenderParts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ovrComponent, component, parent});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::RefreshBodyParts
// Il2CppName: RefreshBodyParts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)()>(&GlobalNamespace::OvrAvatar::RefreshBodyParts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "RefreshBodyParts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::GetBodyComponent
// Il2CppName: GetBodyComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::GlobalNamespace::ovrAvatarBodyComponent> (GlobalNamespace::OvrAvatar::*)()>(&GlobalNamespace::OvrAvatar::GetBodyComponent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "GetBodyComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::GetHandTransform
// Il2CppName: GetHandTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::OvrAvatar::*)(::GlobalNamespace::OvrAvatar::HandType, ::GlobalNamespace::OvrAvatar::HandJoint)>(&GlobalNamespace::OvrAvatar::GetHandTransform)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("", "OvrAvatar/HandType")->byval_arg;
    static auto* joint = &::il2cpp_utils::GetClassFromName("", "OvrAvatar/HandJoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "GetHandTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, joint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::GetPointingDirection
// Il2CppName: GetPointingDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)(::GlobalNamespace::OvrAvatar::HandType, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&GlobalNamespace::OvrAvatar::GetPointingDirection)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("", "OvrAvatar/HandType")->byval_arg;
    static auto* forward = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "GetPointingDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, forward, up});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::UpdateVoiceBehavior
// Il2CppName: UpdateVoiceBehavior
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)()>(&GlobalNamespace::OvrAvatar::UpdateVoiceBehavior)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "UpdateVoiceBehavior", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::IsValidMic
// Il2CppName: IsValidMic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OvrAvatar::*)()>(&GlobalNamespace::OvrAvatar::IsValidMic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "IsValidMic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::InitPostLoad
// Il2CppName: InitPostLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)()>(&GlobalNamespace::OvrAvatar::InitPostLoad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "InitPostLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::ExpressiveGlobalInit
// Il2CppName: ExpressiveGlobalInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OvrAvatar::ExpressiveGlobalInit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "ExpressiveGlobalInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::InitializeLights
// Il2CppName: InitializeLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OvrAvatar::InitializeLights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "InitializeLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::CreateLightDirectional
// Il2CppName: CreateLightDirectional
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ovrAvatarLight (*)(uint, ::UnityEngine::Vector3, float, ByRef<::GlobalNamespace::ovrAvatarLight>)>(&GlobalNamespace::OvrAvatar::CreateLightDirectional)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* intensity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* light = &::il2cpp_utils::GetClassFromName("", "ovrAvatarLight")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "CreateLightDirectional", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, direction, intensity, light});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::CreateLightPoint
// Il2CppName: CreateLightPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ovrAvatarLight (*)(uint, ::UnityEngine::Vector3, float, float, ByRef<::GlobalNamespace::ovrAvatarLight>)>(&GlobalNamespace::OvrAvatar::CreateLightPoint)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* range = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* intensity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* light = &::il2cpp_utils::GetClassFromName("", "ovrAvatarLight")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "CreateLightPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, position, range, intensity, light});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::CreateLightSpot
// Il2CppName: CreateLightSpot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ovrAvatarLight (*)(uint, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, float, ByRef<::GlobalNamespace::ovrAvatarLight>)>(&GlobalNamespace::OvrAvatar::CreateLightSpot)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* spotAngleDeg = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* range = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* intensity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* light = &::il2cpp_utils::GetClassFromName("", "ovrAvatarLight")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "CreateLightSpot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, position, direction, spotAngleDeg, range, intensity, light});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::UpdateExpressive
// Il2CppName: UpdateExpressive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)()>(&GlobalNamespace::OvrAvatar::UpdateExpressive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "UpdateExpressive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::ConfigureHelpers
// Il2CppName: ConfigureHelpers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)()>(&GlobalNamespace::OvrAvatar::ConfigureHelpers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "ConfigureHelpers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::WaitForMouthAudioSource
// Il2CppName: WaitForMouthAudioSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::OvrAvatar::*)()>(&GlobalNamespace::OvrAvatar::WaitForMouthAudioSource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "WaitForMouthAudioSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::DestroyHelperObjects
// Il2CppName: DestroyHelperObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)()>(&GlobalNamespace::OvrAvatar::DestroyHelperObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "DestroyHelperObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::CreateHelperObject
// Il2CppName: CreateHelperObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::OvrAvatar::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3, ::StringW, ::StringW)>(&GlobalNamespace::OvrAvatar::CreateHelperObject)> {
  static const MethodInfo* get() {
    static auto* parent = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* localPositionOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* helperName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* helperTag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "CreateHelperObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parent, localPositionOffset, helperName, helperTag});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::UpdateVoiceData
// Il2CppName: UpdateVoiceData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)(::ArrayW<int16_t>, int)>(&GlobalNamespace::OvrAvatar::UpdateVoiceData)> {
  static const MethodInfo* get() {
    static auto* pcmData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    static auto* numChannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "UpdateVoiceData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcmData, numChannels});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::UpdateVoiceData
// Il2CppName: UpdateVoiceData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)(::ArrayW<float>, int)>(&GlobalNamespace::OvrAvatar::UpdateVoiceData)> {
  static const MethodInfo* get() {
    static auto* pcmData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* numChannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "UpdateVoiceData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcmData, numChannels});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatar::UpdateFacewave
// Il2CppName: UpdateFacewave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatar::*)()>(&GlobalNamespace::OvrAvatar::UpdateFacewave)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatar*), "UpdateFacewave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
