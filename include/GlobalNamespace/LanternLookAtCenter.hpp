// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LanternLookAtCenter
  class LanternLookAtCenter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LanternLookAtCenter);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LanternLookAtCenter*, "", "LanternLookAtCenter");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: LanternLookAtCenter
  // [TokenAttribute] Offset: FFFFFFFF
  class LanternLookAtCenter : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single _height
    // Size: 0x4
    // Offset: 0x18
    float height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single _height
    [[deprecated("Use field access instead!")]] float& dyn__height();
    // public System.Void .ctor()
    // Offset: 0x194DB64
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LanternLookAtCenter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LanternLookAtCenter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LanternLookAtCenter*, creationType>()));
    }
    // private System.Void OnEnable()
    // Offset: 0x194DAC4
    void OnEnable();
    // private System.Void LookAtCenter()
    // Offset: 0x194DB14
    void LookAtCenter();
  }; // LanternLookAtCenter
  #pragma pack(pop)
  static check_size<sizeof(LanternLookAtCenter), 24 + sizeof(float)> __GlobalNamespace_LanternLookAtCenterSizeCheck;
  static_assert(sizeof(LanternLookAtCenter) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LanternLookAtCenter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LanternLookAtCenter::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LanternLookAtCenter::*)()>(&GlobalNamespace::LanternLookAtCenter::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LanternLookAtCenter*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LanternLookAtCenter::LookAtCenter
// Il2CppName: LookAtCenter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LanternLookAtCenter::*)()>(&GlobalNamespace::LanternLookAtCenter::LookAtCenter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LanternLookAtCenter*), "LookAtCenter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
