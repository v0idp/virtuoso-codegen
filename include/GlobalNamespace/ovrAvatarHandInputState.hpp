// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: ovrAvatarTransform
#include "GlobalNamespace/ovrAvatarTransform.hpp"
// Including type: ovrAvatarButton
#include "GlobalNamespace/ovrAvatarButton.hpp"
// Including type: ovrAvatarTouch
#include "GlobalNamespace/ovrAvatarTouch.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ovrAvatarHandInputState
  struct ovrAvatarHandInputState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ovrAvatarHandInputState, "", "ovrAvatarHandInputState");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x41
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ovrAvatarHandInputState
  // [TokenAttribute] Offset: FFFFFFFF
  struct ovrAvatarHandInputState/*, public ::System::ValueType*/ {
    public:
    public:
    // public ovrAvatarTransform transform
    // Size: 0x28
    // Offset: 0x0
    ::GlobalNamespace::ovrAvatarTransform transform;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ovrAvatarTransform) == 0x28);
    // public ovrAvatarButton buttonMask
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::ovrAvatarButton buttonMask;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ovrAvatarButton) == 0x4);
    // public ovrAvatarTouch touchMask
    // Size: 0x4
    // Offset: 0x2C
    ::GlobalNamespace::ovrAvatarTouch touchMask;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ovrAvatarTouch) == 0x4);
    // public System.Single joystickX
    // Size: 0x4
    // Offset: 0x30
    float joystickX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single joystickY
    // Size: 0x4
    // Offset: 0x34
    float joystickY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single indexTrigger
    // Size: 0x4
    // Offset: 0x38
    float indexTrigger;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single handTrigger
    // Size: 0x4
    // Offset: 0x3C
    float handTrigger;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean isActive
    // Size: 0x1
    // Offset: 0x40
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: ovrAvatarHandInputState
    constexpr ovrAvatarHandInputState(::GlobalNamespace::ovrAvatarTransform transform_ = {}, ::GlobalNamespace::ovrAvatarButton buttonMask_ = {}, ::GlobalNamespace::ovrAvatarTouch touchMask_ = {}, float joystickX_ = {}, float joystickY_ = {}, float indexTrigger_ = {}, float handTrigger_ = {}, bool isActive_ = {}) noexcept : transform{transform_}, buttonMask{buttonMask_}, touchMask{touchMask_}, joystickX{joystickX_}, joystickY{joystickY_}, indexTrigger{indexTrigger_}, handTrigger{handTrigger_}, isActive{isActive_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public ovrAvatarTransform transform
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ovrAvatarTransform& dyn_transform();
    // Get instance field reference: public ovrAvatarButton buttonMask
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ovrAvatarButton& dyn_buttonMask();
    // Get instance field reference: public ovrAvatarTouch touchMask
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ovrAvatarTouch& dyn_touchMask();
    // Get instance field reference: public System.Single joystickX
    [[deprecated("Use field access instead!")]] float& dyn_joystickX();
    // Get instance field reference: public System.Single joystickY
    [[deprecated("Use field access instead!")]] float& dyn_joystickY();
    // Get instance field reference: public System.Single indexTrigger
    [[deprecated("Use field access instead!")]] float& dyn_indexTrigger();
    // Get instance field reference: public System.Single handTrigger
    [[deprecated("Use field access instead!")]] float& dyn_handTrigger();
    // Get instance field reference: public System.Boolean isActive
    [[deprecated("Use field access instead!")]] bool& dyn_isActive();
  }; // ovrAvatarHandInputState
  #pragma pack(pop)
  static check_size<sizeof(ovrAvatarHandInputState), 64 + sizeof(bool)> __GlobalNamespace_ovrAvatarHandInputStateSizeCheck;
  static_assert(sizeof(ovrAvatarHandInputState) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
