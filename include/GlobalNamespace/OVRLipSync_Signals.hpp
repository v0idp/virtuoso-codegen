// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRLipSync
#include "GlobalNamespace/OVRLipSync.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRLipSync::Signals, "", "OVRLipSync/Signals");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: OVRLipSync/Signals
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRLipSync::Signals/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Signals
    constexpr Signals(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public OVRLipSync/Signals VisemeOn
    static constexpr const int VisemeOn = 0;
    // Get static field: static public OVRLipSync/Signals VisemeOn
    static ::GlobalNamespace::OVRLipSync::Signals _get_VisemeOn();
    // Set static field: static public OVRLipSync/Signals VisemeOn
    static void _set_VisemeOn(::GlobalNamespace::OVRLipSync::Signals value);
    // static field const value: static public OVRLipSync/Signals VisemeOff
    static constexpr const int VisemeOff = 1;
    // Get static field: static public OVRLipSync/Signals VisemeOff
    static ::GlobalNamespace::OVRLipSync::Signals _get_VisemeOff();
    // Set static field: static public OVRLipSync/Signals VisemeOff
    static void _set_VisemeOff(::GlobalNamespace::OVRLipSync::Signals value);
    // static field const value: static public OVRLipSync/Signals VisemeAmount
    static constexpr const int VisemeAmount = 2;
    // Get static field: static public OVRLipSync/Signals VisemeAmount
    static ::GlobalNamespace::OVRLipSync::Signals _get_VisemeAmount();
    // Set static field: static public OVRLipSync/Signals VisemeAmount
    static void _set_VisemeAmount(::GlobalNamespace::OVRLipSync::Signals value);
    // static field const value: static public OVRLipSync/Signals VisemeSmoothing
    static constexpr const int VisemeSmoothing = 3;
    // Get static field: static public OVRLipSync/Signals VisemeSmoothing
    static ::GlobalNamespace::OVRLipSync::Signals _get_VisemeSmoothing();
    // Set static field: static public OVRLipSync/Signals VisemeSmoothing
    static void _set_VisemeSmoothing(::GlobalNamespace::OVRLipSync::Signals value);
    // static field const value: static public OVRLipSync/Signals LaughterAmount
    static constexpr const int LaughterAmount = 4;
    // Get static field: static public OVRLipSync/Signals LaughterAmount
    static ::GlobalNamespace::OVRLipSync::Signals _get_LaughterAmount();
    // Set static field: static public OVRLipSync/Signals LaughterAmount
    static void _set_LaughterAmount(::GlobalNamespace::OVRLipSync::Signals value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // OVRLipSync/Signals
  #pragma pack(pop)
  static check_size<sizeof(OVRLipSync::Signals), 0 + sizeof(int)> __GlobalNamespace_OVRLipSync_SignalsSizeCheck;
  static_assert(sizeof(OVRLipSync::Signals) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
