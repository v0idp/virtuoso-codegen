// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRDebugConsole
  class OVRDebugConsole;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRDebugConsole);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRDebugConsole*, "", "OVRDebugConsole");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: OVRDebugConsole
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRDebugConsole : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Collections.ArrayList messages
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::ArrayList* messages;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // public System.Int32 maxMessages
    // Size: 0x4
    // Offset: 0x20
    int maxMessages;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: maxMessages and: textMsg
    char __padding1[0x4] = {};
    // public UnityEngine.UI.Text textMsg
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Text* textMsg;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private System.Boolean clearTimeoutOn
    // Size: 0x1
    // Offset: 0x30
    bool clearTimeoutOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: clearTimeoutOn and: clearTimeout
    char __padding3[0x3] = {};
    // private System.Single clearTimeout
    // Size: 0x4
    // Offset: 0x34
    float clearTimeout;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private OVRDebugConsole s_Instance
    static ::GlobalNamespace::OVRDebugConsole* _get_s_Instance();
    // Set static field: static private OVRDebugConsole s_Instance
    static void _set_s_Instance(::GlobalNamespace::OVRDebugConsole* value);
    // Get instance field reference: public System.Collections.ArrayList messages
    [[deprecated]] ::System::Collections::ArrayList*& dyn_messages();
    // Get instance field reference: public System.Int32 maxMessages
    [[deprecated]] int& dyn_maxMessages();
    // Get instance field reference: public UnityEngine.UI.Text textMsg
    [[deprecated]] ::UnityEngine::UI::Text*& dyn_textMsg();
    // Get instance field reference: private System.Boolean clearTimeoutOn
    [[deprecated]] bool& dyn_clearTimeoutOn();
    // Get instance field reference: private System.Single clearTimeout
    [[deprecated]] float& dyn_clearTimeout();
    // static public OVRDebugConsole get_instance()
    // Offset: 0xC5E74C
    static ::GlobalNamespace::OVRDebugConsole* get_instance();
    // private System.Void Awake()
    // Offset: 0xC5EA48
    void Awake();
    // private System.Void Update()
    // Offset: 0xC5EBA0
    void Update();
    // public System.Void Init()
    // Offset: 0xC5EAB4
    void Init();
    // static public System.Void Log(System.String message)
    // Offset: 0xC5EC98
    static void Log(::StringW message);
    // static public System.Void Log(System.String message, UnityEngine.Color color)
    // Offset: 0xC5EE00
    static void Log(::StringW message, ::UnityEngine::Color color);
    // static public System.Void Clear()
    // Offset: 0xC5EC34
    static void Clear();
    // static public System.Void ClearTimeout(System.Single timeToClear)
    // Offset: 0xC5EED8
    static void ClearTimeout(float timeToClear);
    // public System.Void AddMessage(System.String message, UnityEngine.Color color)
    // Offset: 0xC5ED14
    void AddMessage(::StringW message, ::UnityEngine::Color color);
    // public System.Void ClearMessages()
    // Offset: 0xC5EE9C
    void ClearMessages();
    // public System.Void SetClearTimeout(System.Single timeout)
    // Offset: 0xC5EF54
    void SetClearTimeout(float timeout);
    // private System.Void Prune()
    // Offset: 0xC5F168
    void Prune();
    // private System.Void Display()
    // Offset: 0xC5EF64
    void Display();
    // public System.Void .ctor()
    // Offset: 0xC5F218
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRDebugConsole* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRDebugConsole::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRDebugConsole*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xC5F284
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // OVRDebugConsole
  #pragma pack(pop)
  static check_size<sizeof(OVRDebugConsole), 52 + sizeof(float)> __GlobalNamespace_OVRDebugConsoleSizeCheck;
  static_assert(sizeof(OVRDebugConsole) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRDebugConsole::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRDebugConsole* (*)()>(&GlobalNamespace::OVRDebugConsole::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRDebugConsole*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRDebugConsole::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRDebugConsole::*)()>(&GlobalNamespace::OVRDebugConsole::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRDebugConsole*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRDebugConsole::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRDebugConsole::*)()>(&GlobalNamespace::OVRDebugConsole::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRDebugConsole*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRDebugConsole::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRDebugConsole::*)()>(&GlobalNamespace::OVRDebugConsole::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRDebugConsole*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRDebugConsole::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&GlobalNamespace::OVRDebugConsole::Log)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRDebugConsole*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRDebugConsole::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::UnityEngine::Color)>(&GlobalNamespace::OVRDebugConsole::Log)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRDebugConsole*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRDebugConsole::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRDebugConsole::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRDebugConsole*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRDebugConsole::ClearTimeout
// Il2CppName: ClearTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&GlobalNamespace::OVRDebugConsole::ClearTimeout)> {
  static const MethodInfo* get() {
    static auto* timeToClear = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRDebugConsole*), "ClearTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeToClear});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRDebugConsole::AddMessage
// Il2CppName: AddMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRDebugConsole::*)(::StringW, ::UnityEngine::Color)>(&GlobalNamespace::OVRDebugConsole::AddMessage)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRDebugConsole*), "AddMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRDebugConsole::ClearMessages
// Il2CppName: ClearMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRDebugConsole::*)()>(&GlobalNamespace::OVRDebugConsole::ClearMessages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRDebugConsole*), "ClearMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRDebugConsole::SetClearTimeout
// Il2CppName: SetClearTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRDebugConsole::*)(float)>(&GlobalNamespace::OVRDebugConsole::SetClearTimeout)> {
  static const MethodInfo* get() {
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRDebugConsole*), "SetClearTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeout});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRDebugConsole::Prune
// Il2CppName: Prune
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRDebugConsole::*)()>(&GlobalNamespace::OVRDebugConsole::Prune)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRDebugConsole*), "Prune", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRDebugConsole::Display
// Il2CppName: Display
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRDebugConsole::*)()>(&GlobalNamespace::OVRDebugConsole::Display)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRDebugConsole*), "Display", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRDebugConsole::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRDebugConsole::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRDebugConsole::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRDebugConsole*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
