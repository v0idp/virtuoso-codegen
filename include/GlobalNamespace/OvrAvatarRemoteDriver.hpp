// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OvrAvatarDriver
#include "GlobalNamespace/OvrAvatarDriver.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OvrAvatarPacket
  class OvrAvatarPacket;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OvrAvatarRemoteDriver
  class OvrAvatarRemoteDriver;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OvrAvatarRemoteDriver);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OvrAvatarRemoteDriver*, "", "OvrAvatarRemoteDriver");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD8
  #pragma pack(push, 1)
  // Autogenerated type: OvrAvatarRemoteDriver
  // [TokenAttribute] Offset: FFFFFFFF
  class OvrAvatarRemoteDriver : public ::GlobalNamespace::OvrAvatarDriver {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Collections.Generic.Queue`1<OvrAvatarPacket> packetQueue
    // Size: 0x8
    // Offset: 0xB0
    ::System::Collections::Generic::Queue_1<::GlobalNamespace::OvrAvatarPacket*>* packetQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::GlobalNamespace::OvrAvatarPacket*>*) == 0x8);
    // private System.IntPtr CurrentSDKPacket
    // Size: 0x8
    // Offset: 0xB8
    ::System::IntPtr CurrentSDKPacket;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private System.Single CurrentPacketTime
    // Size: 0x4
    // Offset: 0xC0
    float CurrentPacketTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 CurrentSequence
    // Size: 0x4
    // Offset: 0xC4
    int CurrentSequence;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean isStreaming
    // Size: 0x1
    // Offset: 0xC8
    bool isStreaming;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isStreaming and: currentPacket
    char __padding4[0x7] = {};
    // private OvrAvatarPacket currentPacket
    // Size: 0x8
    // Offset: 0xD0
    ::GlobalNamespace::OvrAvatarPacket* currentPacket;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OvrAvatarPacket*) == 0x8);
    public:
    // static field const value: static private System.Int32 MinPacketQueue
    static constexpr const int MinPacketQueue = 1;
    // Get static field: static private System.Int32 MinPacketQueue
    static int _get_MinPacketQueue();
    // Set static field: static private System.Int32 MinPacketQueue
    static void _set_MinPacketQueue(int value);
    // static field const value: static private System.Int32 MaxPacketQueue
    static constexpr const int MaxPacketQueue = 4;
    // Get static field: static private System.Int32 MaxPacketQueue
    static int _get_MaxPacketQueue();
    // Set static field: static private System.Int32 MaxPacketQueue
    static void _set_MaxPacketQueue(int value);
    // Get instance field reference: private System.Collections.Generic.Queue`1<OvrAvatarPacket> packetQueue
    ::System::Collections::Generic::Queue_1<::GlobalNamespace::OvrAvatarPacket*>*& dyn_packetQueue();
    // Get instance field reference: private System.IntPtr CurrentSDKPacket
    ::System::IntPtr& dyn_CurrentSDKPacket();
    // Get instance field reference: private System.Single CurrentPacketTime
    float& dyn_CurrentPacketTime();
    // Get instance field reference: private System.Int32 CurrentSequence
    int& dyn_CurrentSequence();
    // Get instance field reference: private System.Boolean isStreaming
    bool& dyn_isStreaming();
    // Get instance field reference: private OvrAvatarPacket currentPacket
    ::GlobalNamespace::OvrAvatarPacket*& dyn_currentPacket();
    // public System.Void QueuePacket(System.Int32 sequence, OvrAvatarPacket packet)
    // Offset: 0x8EFB90
    void QueuePacket(int sequence, ::GlobalNamespace::OvrAvatarPacket* packet);
    // private System.Void UpdateFromSDKPacket(System.IntPtr sdkAvatar)
    // Offset: 0x8EFC34
    void UpdateFromSDKPacket(::System::IntPtr sdkAvatar);
    // private System.Void UpdateFromUnityPacket(System.IntPtr sdkAvatar)
    // Offset: 0x8EFDD8
    void UpdateFromUnityPacket(::System::IntPtr sdkAvatar);
    // public System.Void .ctor()
    // Offset: 0x8EFFB0
    // Implemented from: OvrAvatarDriver
    // Base method: System.Void OvrAvatarDriver::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OvrAvatarRemoteDriver* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OvrAvatarRemoteDriver::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OvrAvatarRemoteDriver*, creationType>()));
    }
    // public override System.Void UpdateTransforms(System.IntPtr sdkAvatar)
    // Offset: 0x8EFC18
    // Implemented from: OvrAvatarDriver
    // Base method: System.Void OvrAvatarDriver::UpdateTransforms(System.IntPtr sdkAvatar)
    void UpdateTransforms(::System::IntPtr sdkAvatar);
  }; // OvrAvatarRemoteDriver
  #pragma pack(pop)
  static check_size<sizeof(OvrAvatarRemoteDriver), 208 + sizeof(::GlobalNamespace::OvrAvatarPacket*)> __GlobalNamespace_OvrAvatarRemoteDriverSizeCheck;
  static_assert(sizeof(OvrAvatarRemoteDriver) == 0xD8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarRemoteDriver::QueuePacket
// Il2CppName: QueuePacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarRemoteDriver::*)(int, ::GlobalNamespace::OvrAvatarPacket*)>(&GlobalNamespace::OvrAvatarRemoteDriver::QueuePacket)> {
  static const MethodInfo* get() {
    static auto* sequence = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* packet = &::il2cpp_utils::GetClassFromName("", "OvrAvatarPacket")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarRemoteDriver*), "QueuePacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sequence, packet});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarRemoteDriver::UpdateFromSDKPacket
// Il2CppName: UpdateFromSDKPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarRemoteDriver::*)(::System::IntPtr)>(&GlobalNamespace::OvrAvatarRemoteDriver::UpdateFromSDKPacket)> {
  static const MethodInfo* get() {
    static auto* sdkAvatar = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarRemoteDriver*), "UpdateFromSDKPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sdkAvatar});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarRemoteDriver::UpdateFromUnityPacket
// Il2CppName: UpdateFromUnityPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarRemoteDriver::*)(::System::IntPtr)>(&GlobalNamespace::OvrAvatarRemoteDriver::UpdateFromUnityPacket)> {
  static const MethodInfo* get() {
    static auto* sdkAvatar = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarRemoteDriver*), "UpdateFromUnityPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sdkAvatar});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarRemoteDriver::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarRemoteDriver::UpdateTransforms
// Il2CppName: UpdateTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarRemoteDriver::*)(::System::IntPtr)>(&GlobalNamespace::OvrAvatarRemoteDriver::UpdateTransforms)> {
  static const MethodInfo* get() {
    static auto* sdkAvatar = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarRemoteDriver*), "UpdateTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sdkAvatar});
  }
};
