// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PunchKeyData
  class PunchKeyData;
}
// Forward declaring namespace: VROSC::UI
namespace VROSC::UI {
  // Forward declaring type: UIInteractableColoring
  class UIInteractableColoring;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Key
  class Key;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Key);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Key*, "", "Key");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x9D
  #pragma pack(push, 1)
  // Autogenerated type: Key
  // [TokenAttribute] Offset: FFFFFFFF
  class Key : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::Key::Type
    struct Type;
    public:
    // private PunchKeyData _data
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::PunchKeyData* data;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PunchKeyData*) == 0x8);
    // private VROSC.UI.UIInteractableColoring _coloring
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::UI::UIInteractableColoring* coloring;
    // Field size check
    static_assert(sizeof(::VROSC::UI::UIInteractableColoring*) == 0x8);
    // private UnityEngine.Collider _collider
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Collider* collider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // private UnityEngine.Rigidbody _rigidBody
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Rigidbody* rigidBody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // public System.Boolean KeyPressed
    // Size: 0x1
    // Offset: 0x38
    bool KeyPressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: KeyPressed and: startRepeatedPressesDelay
    char __padding4[0x3] = {};
    // private System.Single _startRepeatedPressesDelay
    // Size: 0x4
    // Offset: 0x3C
    float startRepeatedPressesDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _repeatedPressDelay
    // Size: 0x4
    // Offset: 0x40
    float repeatedPressDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: repeatedPressDelay and: initialPosition
    char __padding6[0x4] = {};
    // protected UnityEngine.Transform initialPosition
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* initialPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private TMPro.TextMeshPro keyCapText
    // Size: 0x8
    // Offset: 0x50
    ::TMPro::TextMeshPro* keyCapText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private UnityEngine.Vector3 initialLocalPosition
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 initialLocalPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion initialLocalRotation
    // Size: 0x10
    // Offset: 0x64
    ::UnityEngine::Quaternion initialLocalRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 constrainedPosition
    // Size: 0xC
    // Offset: 0x74
    ::UnityEngine::Vector3 constrainedPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion constrainedRotation
    // Size: 0x10
    // Offset: 0x80
    ::UnityEngine::Quaternion constrainedRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Boolean checkForButton
    // Size: 0x1
    // Offset: 0x90
    bool checkForButton;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: checkForButton and: currentDistance
    char __padding13[0x3] = {};
    // private System.Single currentDistance
    // Size: 0x4
    // Offset: 0x94
    float currentDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _pressedTimer
    // Size: 0x4
    // Offset: 0x98
    float pressedTimer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _isRepeating
    // Size: 0x1
    // Offset: 0x9C
    bool isRepeating;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single DistanceToBePressed
    static constexpr const float DistanceToBePressed = 0.01;
    // Get static field: static private System.Single DistanceToBePressed
    static float _get_DistanceToBePressed();
    // Set static field: static private System.Single DistanceToBePressed
    static void _set_DistanceToBePressed(float value);
    // static field const value: static private System.Single KeyBounceBackMultiplier
    static constexpr const float KeyBounceBackMultiplier = 1500;
    // Get static field: static private System.Single KeyBounceBackMultiplier
    static float _get_KeyBounceBackMultiplier();
    // Set static field: static private System.Single KeyBounceBackMultiplier
    static void _set_KeyBounceBackMultiplier(float value);
    // Get static field: static public System.Action`2<Key,System.Single> OnKeyHit
    static ::System::Action_2<::GlobalNamespace::Key*, float>* _get_OnKeyHit();
    // Set static field: static public System.Action`2<Key,System.Single> OnKeyHit
    static void _set_OnKeyHit(::System::Action_2<::GlobalNamespace::Key*, float>* value);
    // Get instance field reference: private PunchKeyData _data
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PunchKeyData*& dyn__data();
    // Get instance field reference: private VROSC.UI.UIInteractableColoring _coloring
    [[deprecated("Use field access instead!")]] ::VROSC::UI::UIInteractableColoring*& dyn__coloring();
    // Get instance field reference: private UnityEngine.Collider _collider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn__collider();
    // Get instance field reference: private UnityEngine.Rigidbody _rigidBody
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn__rigidBody();
    // Get instance field reference: public System.Boolean KeyPressed
    [[deprecated("Use field access instead!")]] bool& dyn_KeyPressed();
    // Get instance field reference: private System.Single _startRepeatedPressesDelay
    [[deprecated("Use field access instead!")]] float& dyn__startRepeatedPressesDelay();
    // Get instance field reference: private System.Single _repeatedPressDelay
    [[deprecated("Use field access instead!")]] float& dyn__repeatedPressDelay();
    // Get instance field reference: protected UnityEngine.Transform initialPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_initialPosition();
    // Get instance field reference: private TMPro.TextMeshPro keyCapText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& dyn_keyCapText();
    // Get instance field reference: private UnityEngine.Vector3 initialLocalPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_initialLocalPosition();
    // Get instance field reference: private UnityEngine.Quaternion initialLocalRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_initialLocalRotation();
    // Get instance field reference: private UnityEngine.Vector3 constrainedPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_constrainedPosition();
    // Get instance field reference: private UnityEngine.Quaternion constrainedRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_constrainedRotation();
    // Get instance field reference: private System.Boolean checkForButton
    [[deprecated("Use field access instead!")]] bool& dyn_checkForButton();
    // Get instance field reference: private System.Single currentDistance
    [[deprecated("Use field access instead!")]] float& dyn_currentDistance();
    // Get instance field reference: private System.Single _pressedTimer
    [[deprecated("Use field access instead!")]] float& dyn__pressedTimer();
    // Get instance field reference: private System.Boolean _isRepeating
    [[deprecated("Use field access instead!")]] bool& dyn__isRepeating();
    // public Key/Type get_KeyType()
    // Offset: 0x194B3A8
    ::GlobalNamespace::Key::Type get_KeyType();
    // public System.String get_KeyCapChar()
    // Offset: 0x194B3C4
    ::StringW get_KeyCapChar();
    // public System.String get_AlterateKeyCapChar()
    // Offset: 0x194B3E0
    ::StringW get_AlterateKeyCapChar();
    // public System.String get_OutputChar()
    // Offset: 0x194B3FC
    ::StringW get_OutputChar();
    // public System.Void .ctor()
    // Offset: 0x194BFF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Key* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Key::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Key*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x194B478
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x194B8CC
    void OnDestroy();
    // private System.Void FixedUpdate()
    // Offset: 0x194B9A4
    void FixedUpdate();
    // private System.Void Update()
    // Offset: 0x194BB5C
    void Update();
    // private System.Void LateUpdate()
    // Offset: 0x194BD50
    void LateUpdate();
    // private System.Void ChangeKeyColorOnPress()
    // Offset: 0x194BCC0
    void ChangeKeyColorOnPress();
    // private System.Void ConstrainPosition()
    // Offset: 0x194BAC0
    void ConstrainPosition();
    // public System.Void SwitchKeycapCharCase()
    // Offset: 0x194B798
    void SwitchKeycapCharCase();
    // public System.Void SwitchToSymbols()
    // Offset: 0x194BD54
    void SwitchToSymbols();
    // public System.Void HitKey(System.Boolean send)
    // Offset: 0x194BE5C
    void HitKey(bool send);
    // private System.Void SetTextToDefault()
    // Offset: 0x194BF78
    void SetTextToDefault();
    // private System.Void SettingsUpdated()
    // Offset: 0x194B86C
    void SettingsUpdated();
  }; // Key
  #pragma pack(pop)
  static check_size<sizeof(Key), 156 + sizeof(bool)> __GlobalNamespace_KeySizeCheck;
  static_assert(sizeof(Key) == 0x9D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Key::get_KeyType
// Il2CppName: get_KeyType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::Key::Type (GlobalNamespace::Key::*)()>(&GlobalNamespace::Key::get_KeyType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Key*), "get_KeyType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Key::get_KeyCapChar
// Il2CppName: get_KeyCapChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::Key::*)()>(&GlobalNamespace::Key::get_KeyCapChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Key*), "get_KeyCapChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Key::get_AlterateKeyCapChar
// Il2CppName: get_AlterateKeyCapChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::Key::*)()>(&GlobalNamespace::Key::get_AlterateKeyCapChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Key*), "get_AlterateKeyCapChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Key::get_OutputChar
// Il2CppName: get_OutputChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::Key::*)()>(&GlobalNamespace::Key::get_OutputChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Key*), "get_OutputChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Key::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::Key::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Key::*)()>(&GlobalNamespace::Key::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Key*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Key::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Key::*)()>(&GlobalNamespace::Key::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Key*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Key::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Key::*)()>(&GlobalNamespace::Key::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Key*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Key::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Key::*)()>(&GlobalNamespace::Key::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Key*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Key::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Key::*)()>(&GlobalNamespace::Key::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Key*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Key::ChangeKeyColorOnPress
// Il2CppName: ChangeKeyColorOnPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Key::*)()>(&GlobalNamespace::Key::ChangeKeyColorOnPress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Key*), "ChangeKeyColorOnPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Key::ConstrainPosition
// Il2CppName: ConstrainPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Key::*)()>(&GlobalNamespace::Key::ConstrainPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Key*), "ConstrainPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Key::SwitchKeycapCharCase
// Il2CppName: SwitchKeycapCharCase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Key::*)()>(&GlobalNamespace::Key::SwitchKeycapCharCase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Key*), "SwitchKeycapCharCase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Key::SwitchToSymbols
// Il2CppName: SwitchToSymbols
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Key::*)()>(&GlobalNamespace::Key::SwitchToSymbols)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Key*), "SwitchToSymbols", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Key::HitKey
// Il2CppName: HitKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Key::*)(bool)>(&GlobalNamespace::Key::HitKey)> {
  static const MethodInfo* get() {
    static auto* send = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Key*), "HitKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{send});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Key::SetTextToDefault
// Il2CppName: SetTextToDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Key::*)()>(&GlobalNamespace::Key::SetTextToDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Key*), "SetTextToDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Key::SettingsUpdated
// Il2CppName: SettingsUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Key::*)()>(&GlobalNamespace::Key::SettingsUpdated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Key*), "SettingsUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
