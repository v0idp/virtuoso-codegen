// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NGramGenerator
  class NGramGenerator;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Levenshtein
  class Levenshtein;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Levenshtein);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Levenshtein*, "", "Levenshtein");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x32
  #pragma pack(push, 1)
  // Autogenerated type: Levenshtein
  // [TokenAttribute] Offset: FFFFFFFF
  class Levenshtein : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::Levenshtein::LevenshteinDistance
    class LevenshteinDistance;
    // Nested type: ::GlobalNamespace::Levenshtein::$$c
    class $$c;
    public:
    // public NGramGenerator NGramHandler
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::NGramGenerator* NGramHandler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NGramGenerator*) == 0x8);
    // public UnityEngine.UI.Text[] ButtonLabels
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::UI::Text*> ButtonLabels;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UI::Text*>) == 0x8);
    // private System.Collections.Generic.List`1<System.String> corpus
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::StringW>* corpus;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Boolean isUppercase
    // Size: 0x1
    // Offset: 0x30
    bool isUppercase;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isFirstLetterUpper
    // Size: 0x1
    // Offset: 0x31
    bool isFirstLetterUpper;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 maxWordLength
    static constexpr const int maxWordLength = 15;
    // Get static field: static private System.Int32 maxWordLength
    static int _get_maxWordLength();
    // Set static field: static private System.Int32 maxWordLength
    static void _set_maxWordLength(int value);
    // static field const value: static private System.Int32 maxLevenshteinCost
    static constexpr const int maxLevenshteinCost = 7;
    // Get static field: static private System.Int32 maxLevenshteinCost
    static int _get_maxLevenshteinCost();
    // Set static field: static private System.Int32 maxLevenshteinCost
    static void _set_maxLevenshteinCost(int value);
    // static field const value: static private System.Int32 minLevenshteinCost
    static constexpr const int minLevenshteinCost = 1;
    // Get static field: static private System.Int32 minLevenshteinCost
    static int _get_minLevenshteinCost();
    // Set static field: static private System.Int32 minLevenshteinCost
    static void _set_minLevenshteinCost(int value);
    // Get instance field reference: public NGramGenerator NGramHandler
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NGramGenerator*& dyn_NGramHandler();
    // Get instance field reference: public UnityEngine.UI.Text[] ButtonLabels
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UI::Text*>& dyn_ButtonLabels();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> corpus
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_corpus();
    // Get instance field reference: private System.Boolean isUppercase
    [[deprecated("Use field access instead!")]] bool& dyn_isUppercase();
    // Get instance field reference: private System.Boolean isFirstLetterUpper
    [[deprecated("Use field access instead!")]] bool& dyn_isFirstLetterUpper();
    // public System.Void .ctor()
    // Offset: 0x1950B58
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Levenshtein* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Levenshtein::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Levenshtein*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x1950298
    void Start();
    // public System.Void RunAutoComplete(System.String input)
    // Offset: 0x195036C
    void RunAutoComplete(::StringW input);
  }; // Levenshtein
  #pragma pack(pop)
  static check_size<sizeof(Levenshtein), 49 + sizeof(bool)> __GlobalNamespace_LevenshteinSizeCheck;
  static_assert(sizeof(Levenshtein) == 0x32);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Levenshtein::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::Levenshtein::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Levenshtein::*)()>(&GlobalNamespace::Levenshtein::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Levenshtein*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Levenshtein::RunAutoComplete
// Il2CppName: RunAutoComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Levenshtein::*)(::StringW)>(&GlobalNamespace::Levenshtein::RunAutoComplete)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Levenshtein*), "RunAutoComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
