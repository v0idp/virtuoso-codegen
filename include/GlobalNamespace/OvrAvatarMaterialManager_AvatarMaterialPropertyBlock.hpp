// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OvrAvatarMaterialManager
#include "GlobalNamespace/OvrAvatarMaterialManager.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OvrAvatarMaterialManager::AvatarMaterialPropertyBlock, "", "OvrAvatarMaterialManager/AvatarMaterialPropertyBlock");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OvrAvatarMaterialManager/AvatarMaterialPropertyBlock
  // [TokenAttribute] Offset: FFFFFFFF
  struct OvrAvatarMaterialManager::AvatarMaterialPropertyBlock/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector4[] Colors
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<::UnityEngine::Vector4> Colors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // public System.Single[] DiffuseIntensities
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<float> DiffuseIntensities;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Single[] RimIntensities
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<float> RimIntensities;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Single[] ReflectionIntensities
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<float> ReflectionIntensities;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Creating value type constructor for type: AvatarMaterialPropertyBlock
    constexpr AvatarMaterialPropertyBlock(::ArrayW<::UnityEngine::Vector4> Colors_ = ::ArrayW<::UnityEngine::Vector4>(static_cast<void*>(nullptr)), ::ArrayW<float> DiffuseIntensities_ = ::ArrayW<float>(static_cast<void*>(nullptr)), ::ArrayW<float> RimIntensities_ = ::ArrayW<float>(static_cast<void*>(nullptr)), ::ArrayW<float> ReflectionIntensities_ = ::ArrayW<float>(static_cast<void*>(nullptr))) noexcept : Colors{Colors_}, DiffuseIntensities{DiffuseIntensities_}, RimIntensities{RimIntensities_}, ReflectionIntensities{ReflectionIntensities_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector4[] Colors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_Colors();
    // Get instance field reference: public System.Single[] DiffuseIntensities
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_DiffuseIntensities();
    // Get instance field reference: public System.Single[] RimIntensities
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_RimIntensities();
    // Get instance field reference: public System.Single[] ReflectionIntensities
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_ReflectionIntensities();
  }; // OvrAvatarMaterialManager/AvatarMaterialPropertyBlock
  #pragma pack(pop)
  static check_size<sizeof(OvrAvatarMaterialManager::AvatarMaterialPropertyBlock), 24 + sizeof(::ArrayW<float>)> __GlobalNamespace_OvrAvatarMaterialManager_AvatarMaterialPropertyBlockSizeCheck;
  static_assert(sizeof(OvrAvatarMaterialManager::AvatarMaterialPropertyBlock) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
