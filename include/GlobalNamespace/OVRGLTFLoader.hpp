// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRBinaryChunk
#include "GlobalNamespace/OVRBinaryChunk.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRGLTFScene
  struct OVRGLTFScene;
  // Forward declaring type: OVRChunkType
  struct OVRChunkType;
  // Forward declaring type: OVRMeshData
  struct OVRMeshData;
  // Forward declaring type: OVRMaterialData
  struct OVRMaterialData;
  // Forward declaring type: OVRTextureData
  struct OVRTextureData;
}
// Forward declaring namespace: OVRSimpleJSON
namespace OVRSimpleJSON {
  // Forward declaring type: JSONNode
  class JSONNode;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRGLTFLoader
  class OVRGLTFLoader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRGLTFLoader);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRGLTFLoader*, "", "OVRGLTFLoader");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: OVRGLTFLoader
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRGLTFLoader : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::OVRGLTFLoader::$$c__DisplayClass16_0
    class $$c__DisplayClass16_0;
    public:
    // private OVRSimpleJSON.JSONNode m_jsonData
    // Size: 0x8
    // Offset: 0x10
    ::OVRSimpleJSON::JSONNode* m_jsonData;
    // Field size check
    static_assert(sizeof(::OVRSimpleJSON::JSONNode*) == 0x8);
    // private System.IO.Stream m_glbStream
    // Size: 0x8
    // Offset: 0x18
    ::System::IO::Stream* m_glbStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private OVRBinaryChunk m_binaryChunk
    // Size: 0x18
    // Offset: 0x20
    ::GlobalNamespace::OVRBinaryChunk m_binaryChunk;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRBinaryChunk) == 0x18);
    // private System.Collections.Generic.List`1<UnityEngine.GameObject> m_Nodes
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* m_Nodes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // private UnityEngine.Shader m_Shader
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Shader* m_Shader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    public:
    // Get static field: static private readonly UnityEngine.Vector3 GLTFToUnitySpace
    static ::UnityEngine::Vector3 _get_GLTFToUnitySpace();
    // Set static field: static private readonly UnityEngine.Vector3 GLTFToUnitySpace
    static void _set_GLTFToUnitySpace(::UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Vector3 GLTFToUnityTangent
    static ::UnityEngine::Vector3 _get_GLTFToUnityTangent();
    // Set static field: static private readonly UnityEngine.Vector3 GLTFToUnityTangent
    static void _set_GLTFToUnityTangent(::UnityEngine::Vector3 value);
    // Get instance field reference: private OVRSimpleJSON.JSONNode m_jsonData
    [[deprecated("Use field access instead!")]] ::OVRSimpleJSON::JSONNode*& dyn_m_jsonData();
    // Get instance field reference: private System.IO.Stream m_glbStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn_m_glbStream();
    // Get instance field reference: private OVRBinaryChunk m_binaryChunk
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRBinaryChunk& dyn_m_binaryChunk();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.GameObject> m_Nodes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_m_Nodes();
    // Get instance field reference: private UnityEngine.Shader m_Shader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_Shader();
    // public System.Void .ctor(System.String fileName)
    // Offset: 0xFB83F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRGLTFLoader* New_ctor(::StringW fileName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGLTFLoader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRGLTFLoader*, creationType>(fileName)));
    }
    // public System.Void .ctor(System.Byte[] data)
    // Offset: 0xFB8434
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRGLTFLoader* New_ctor(::ArrayW<uint8_t> data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGLTFLoader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRGLTFLoader*, creationType>(data)));
    }
    // static private System.Void .cctor()
    // Offset: 0xFBBCB4
    static void _cctor();
    // public OVRGLTFScene LoadGLB()
    // Offset: 0xFB84C4
    ::GlobalNamespace::OVRGLTFScene LoadGLB();
    // public System.Void SetModelShader(UnityEngine.Shader shader)
    // Offset: 0xFB8F64
    void SetModelShader(::UnityEngine::Shader* shader);
    // private System.Boolean ValidateGLB(System.IO.Stream glbStream)
    // Offset: 0xFB875C
    bool ValidateGLB(::System::IO::Stream* glbStream);
    // private System.Byte[] ReadChunk(System.IO.Stream glbStream, OVRChunkType type)
    // Offset: 0xFB89A8
    ::ArrayW<uint8_t> ReadChunk(::System::IO::Stream* glbStream, ::GlobalNamespace::OVRChunkType type);
    // private System.Boolean ValidateChunk(System.IO.Stream glbStream, OVRChunkType type, out System.UInt32 chunkLength)
    // Offset: 0xFB8A58
    bool ValidateChunk(::System::IO::Stream* glbStream, ::GlobalNamespace::OVRChunkType type, ByRef<uint> chunkLength);
    // private System.Void LoadGLTF()
    // Offset: 0xFB8BB4
    void LoadGLTF();
    // private System.Void ProcessNode(OVRSimpleJSON.JSONNode node, System.Int32 nodeId)
    // Offset: 0xFB8F6C
    void ProcessNode(::OVRSimpleJSON::JSONNode* node, int nodeId);
    // private OVRMeshData ProcessMesh(OVRSimpleJSON.JSONNode meshNode)
    // Offset: 0xFB98A8
    ::GlobalNamespace::OVRMeshData ProcessMesh(::OVRSimpleJSON::JSONNode* meshNode);
    // static private System.Void FlipTraingleIndices(ref System.Int32[] indices)
    // Offset: 0xFBBA90
    static void FlipTraingleIndices(ByRef<::ArrayW<int>> indices);
    // private System.Void ProcessSkin(OVRSimpleJSON.JSONNode skinNode, UnityEngine.SkinnedMeshRenderer renderer)
    // Offset: 0xFBAF44
    void ProcessSkin(::OVRSimpleJSON::JSONNode* skinNode, ::UnityEngine::SkinnedMeshRenderer* renderer);
    // private OVRMaterialData ProcessMaterial(System.Int32 matId)
    // Offset: 0xFBB438
    ::GlobalNamespace::OVRMaterialData ProcessMaterial(int matId);
    // private OVRTextureData ProcessTexture(System.Int32 textureId)
    // Offset: 0xFBB64C
    ::GlobalNamespace::OVRTextureData ProcessTexture(int textureId);
    // private System.Void TranscodeTexture(ref OVRTextureData textureData)
    // Offset: 0xFBBC18
    void TranscodeTexture(ByRef<::GlobalNamespace::OVRTextureData> textureData);
    // private UnityEngine.Material CreateUnityMaterial(OVRMaterialData matData)
    // Offset: 0xFBBB18
    ::UnityEngine::Material* CreateUnityMaterial(::GlobalNamespace::OVRMaterialData matData);
  }; // OVRGLTFLoader
  #pragma pack(pop)
  static check_size<sizeof(OVRGLTFLoader), 64 + sizeof(::UnityEngine::Shader*)> __GlobalNamespace_OVRGLTFLoaderSizeCheck;
  static_assert(sizeof(OVRGLTFLoader) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRGLTFLoader::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::LoadGLB
// Il2CppName: LoadGLB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRGLTFScene (GlobalNamespace::OVRGLTFLoader::*)()>(&GlobalNamespace::OVRGLTFLoader::LoadGLB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "LoadGLB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::SetModelShader
// Il2CppName: SetModelShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRGLTFLoader::*)(::UnityEngine::Shader*)>(&GlobalNamespace::OVRGLTFLoader::SetModelShader)> {
  static const MethodInfo* get() {
    static auto* shader = &::il2cpp_utils::GetClassFromName("UnityEngine", "Shader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "SetModelShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shader});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ValidateGLB
// Il2CppName: ValidateGLB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRGLTFLoader::*)(::System::IO::Stream*)>(&GlobalNamespace::OVRGLTFLoader::ValidateGLB)> {
  static const MethodInfo* get() {
    static auto* glbStream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ValidateGLB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glbStream});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ReadChunk
// Il2CppName: ReadChunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (GlobalNamespace::OVRGLTFLoader::*)(::System::IO::Stream*, ::GlobalNamespace::OVRChunkType)>(&GlobalNamespace::OVRGLTFLoader::ReadChunk)> {
  static const MethodInfo* get() {
    static auto* glbStream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("", "OVRChunkType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ReadChunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glbStream, type});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ValidateChunk
// Il2CppName: ValidateChunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRGLTFLoader::*)(::System::IO::Stream*, ::GlobalNamespace::OVRChunkType, ByRef<uint>)>(&GlobalNamespace::OVRGLTFLoader::ValidateChunk)> {
  static const MethodInfo* get() {
    static auto* glbStream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("", "OVRChunkType")->byval_arg;
    static auto* chunkLength = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ValidateChunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glbStream, type, chunkLength});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::LoadGLTF
// Il2CppName: LoadGLTF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRGLTFLoader::*)()>(&GlobalNamespace::OVRGLTFLoader::LoadGLTF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "LoadGLTF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ProcessNode
// Il2CppName: ProcessNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRGLTFLoader::*)(::OVRSimpleJSON::JSONNode*, int)>(&GlobalNamespace::OVRGLTFLoader::ProcessNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("OVRSimpleJSON", "JSONNode")->byval_arg;
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ProcessNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, nodeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ProcessMesh
// Il2CppName: ProcessMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRMeshData (GlobalNamespace::OVRGLTFLoader::*)(::OVRSimpleJSON::JSONNode*)>(&GlobalNamespace::OVRGLTFLoader::ProcessMesh)> {
  static const MethodInfo* get() {
    static auto* meshNode = &::il2cpp_utils::GetClassFromName("OVRSimpleJSON", "JSONNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ProcessMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshNode});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::FlipTraingleIndices
// Il2CppName: FlipTraingleIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::ArrayW<int>>)>(&GlobalNamespace::OVRGLTFLoader::FlipTraingleIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "FlipTraingleIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ProcessSkin
// Il2CppName: ProcessSkin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRGLTFLoader::*)(::OVRSimpleJSON::JSONNode*, ::UnityEngine::SkinnedMeshRenderer*)>(&GlobalNamespace::OVRGLTFLoader::ProcessSkin)> {
  static const MethodInfo* get() {
    static auto* skinNode = &::il2cpp_utils::GetClassFromName("OVRSimpleJSON", "JSONNode")->byval_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "SkinnedMeshRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ProcessSkin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{skinNode, renderer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ProcessMaterial
// Il2CppName: ProcessMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRMaterialData (GlobalNamespace::OVRGLTFLoader::*)(int)>(&GlobalNamespace::OVRGLTFLoader::ProcessMaterial)> {
  static const MethodInfo* get() {
    static auto* matId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ProcessMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ProcessTexture
// Il2CppName: ProcessTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTextureData (GlobalNamespace::OVRGLTFLoader::*)(int)>(&GlobalNamespace::OVRGLTFLoader::ProcessTexture)> {
  static const MethodInfo* get() {
    static auto* textureId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ProcessTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textureId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::TranscodeTexture
// Il2CppName: TranscodeTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRGLTFLoader::*)(ByRef<::GlobalNamespace::OVRTextureData>)>(&GlobalNamespace::OVRGLTFLoader::TranscodeTexture)> {
  static const MethodInfo* get() {
    static auto* textureData = &::il2cpp_utils::GetClassFromName("", "OVRTextureData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "TranscodeTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textureData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::CreateUnityMaterial
// Il2CppName: CreateUnityMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (GlobalNamespace::OVRGLTFLoader::*)(::GlobalNamespace::OVRMaterialData)>(&GlobalNamespace::OVRGLTFLoader::CreateUnityMaterial)> {
  static const MethodInfo* get() {
    static auto* matData = &::il2cpp_utils::GetClassFromName("", "OVRMaterialData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "CreateUnityMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matData});
  }
};
