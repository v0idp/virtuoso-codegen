// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GazeTargetSpawner
  class GazeTargetSpawner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GazeTargetSpawner);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GazeTargetSpawner*, "", "GazeTargetSpawner");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: GazeTargetSpawner
  // [TokenAttribute] Offset: FFFFFFFF
  class GazeTargetSpawner : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject GazeTargetPrefab
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* GazeTargetPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Int32 NumberOfDummyTargets
    // Size: 0x4
    // Offset: 0x20
    int NumberOfDummyTargets;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 RadiusMultiplier
    // Size: 0x4
    // Offset: 0x24
    int RadiusMultiplier;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean isVisible
    // Size: 0x1
    // Offset: 0x28
    bool isVisible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject GazeTargetPrefab
    [[deprecated]] ::UnityEngine::GameObject*& dyn_GazeTargetPrefab();
    // Get instance field reference: public System.Int32 NumberOfDummyTargets
    [[deprecated]] int& dyn_NumberOfDummyTargets();
    // Get instance field reference: public System.Int32 RadiusMultiplier
    [[deprecated]] int& dyn_RadiusMultiplier();
    // Get instance field reference: private System.Boolean isVisible
    [[deprecated]] bool& dyn_isVisible();
    // public System.Boolean get_IsVisible()
    // Offset: 0x19A2F34
    bool get_IsVisible();
    // public System.Void set_IsVisible(System.Boolean value)
    // Offset: 0x19A2F3C
    void set_IsVisible(bool value);
    // private System.Void Start()
    // Offset: 0x19A3078
    void Start();
    // private System.Void OnValidate()
    // Offset: 0x19A3240
    void OnValidate();
    // public System.Void .ctor()
    // Offset: 0x19A3248
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GazeTargetSpawner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GazeTargetSpawner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GazeTargetSpawner*, creationType>()));
    }
  }; // GazeTargetSpawner
  #pragma pack(pop)
  static check_size<sizeof(GazeTargetSpawner), 40 + sizeof(bool)> __GlobalNamespace_GazeTargetSpawnerSizeCheck;
  static_assert(sizeof(GazeTargetSpawner) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GazeTargetSpawner::get_IsVisible
// Il2CppName: get_IsVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GazeTargetSpawner::*)()>(&GlobalNamespace::GazeTargetSpawner::get_IsVisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GazeTargetSpawner*), "get_IsVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GazeTargetSpawner::set_IsVisible
// Il2CppName: set_IsVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GazeTargetSpawner::*)(bool)>(&GlobalNamespace::GazeTargetSpawner::set_IsVisible)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GazeTargetSpawner*), "set_IsVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GazeTargetSpawner::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GazeTargetSpawner::*)()>(&GlobalNamespace::GazeTargetSpawner::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GazeTargetSpawner*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GazeTargetSpawner::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GazeTargetSpawner::*)()>(&GlobalNamespace::GazeTargetSpawner::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GazeTargetSpawner*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GazeTargetSpawner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
