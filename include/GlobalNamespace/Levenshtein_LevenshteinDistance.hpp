// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Levenshtein
#include "GlobalNamespace/Levenshtein.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Levenshtein::LevenshteinDistance);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Levenshtein::LevenshteinDistance*, "", "Levenshtein/LevenshteinDistance");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Levenshtein/LevenshteinDistance
  // [TokenAttribute] Offset: FFFFFFFF
  class Levenshtein::LevenshteinDistance : public ::Il2CppObject {
    public:
    // static public System.Int32 Compute(System.String s, System.String t)
    // Offset: 0x195C39C
    static int Compute(::StringW s, ::StringW t);
  }; // Levenshtein/LevenshteinDistance
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Levenshtein::LevenshteinDistance::Compute
// Il2CppName: Compute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::StringW, ::StringW)>(&GlobalNamespace::Levenshtein::LevenshteinDistance::Compute)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Levenshtein::LevenshteinDistance*), "Compute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, t});
  }
};
