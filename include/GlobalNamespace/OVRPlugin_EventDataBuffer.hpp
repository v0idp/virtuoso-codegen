// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVRPlugin/EventType
#include "GlobalNamespace/OVRPlugin_EventType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::EventDataBuffer, "", "OVRPlugin/EventDataBuffer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/EventDataBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPlugin::EventDataBuffer/*, public ::System::ValueType*/ {
    public:
    public:
    // public OVRPlugin/EventType EventType
    // Size: 0x4
    // Offset: 0x0
    ::GlobalNamespace::OVRPlugin::EventType EventType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::EventType) == 0x4);
    // Padding between fields: EventType and: EventData
    char __padding0[0x4] = {};
    // public System.Byte[] EventData
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<uint8_t> EventData;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Creating value type constructor for type: EventDataBuffer
    constexpr EventDataBuffer(::GlobalNamespace::OVRPlugin::EventType EventType_ = {}, ::ArrayW<uint8_t> EventData_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr))) noexcept : EventType{EventType_}, EventData{EventData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public OVRPlugin/EventType EventType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::EventType& dyn_EventType();
    // Get instance field reference: public System.Byte[] EventData
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_EventData();
  }; // OVRPlugin/EventDataBuffer
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::EventDataBuffer), 8 + sizeof(::ArrayW<uint8_t>)> __GlobalNamespace_OVRPlugin_EventDataBufferSizeCheck;
  static_assert(sizeof(OVRPlugin::EventDataBuffer) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
