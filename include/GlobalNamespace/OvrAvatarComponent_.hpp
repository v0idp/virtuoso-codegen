// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: ovrAvatarMaterialState
#include "GlobalNamespace/ovrAvatarMaterialState.hpp"
// Including type: ovrAvatarComponent
#include "GlobalNamespace/ovrAvatarComponent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OvrAvatarRenderComponent
  class OvrAvatarRenderComponent;
  // Forward declaring type: OvrAvatar
  class OvrAvatar;
  // Forward declaring type: ovrAvatarVisibilityFlags
  struct ovrAvatarVisibilityFlags;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IntPtr because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OvrAvatarComponent
  class OvrAvatarComponent_;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OvrAvatarComponent_);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OvrAvatarComponent_*, "", "OvrAvatarComponent");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: OvrAvatarComponent
  // [TokenAttribute] Offset: FFFFFFFF
  class OvrAvatarComponent_ : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Collections.Generic.Dictionary`2<UnityEngine.Material,ovrAvatarMaterialState> materialStates
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Material*, ::GlobalNamespace::ovrAvatarMaterialState>* materialStates;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Material*, ::GlobalNamespace::ovrAvatarMaterialState>*) == 0x8);
    // public System.Collections.Generic.List`1<OvrAvatarRenderComponent> RenderParts
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::GlobalNamespace::OvrAvatarRenderComponent*>* RenderParts;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::OvrAvatarRenderComponent*>*) == 0x8);
    // protected OvrAvatar owner
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::OvrAvatar* owner;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OvrAvatar*) == 0x8);
    // protected ovrAvatarComponent nativeAvatarComponent
    // Size: 0x40
    // Offset: 0x30
    ::GlobalNamespace::ovrAvatarComponent nativeAvatarComponent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ovrAvatarComponent) == 0x40);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public readonly System.String[] LayerKeywords
    static ::ArrayW<::StringW> _get_LayerKeywords();
    // Set static field: static public readonly System.String[] LayerKeywords
    static void _set_LayerKeywords(::ArrayW<::StringW> value);
    // Get static field: static public readonly System.String[] LayerSampleModeParameters
    static ::ArrayW<::StringW> _get_LayerSampleModeParameters();
    // Set static field: static public readonly System.String[] LayerSampleModeParameters
    static void _set_LayerSampleModeParameters(::ArrayW<::StringW> value);
    // Get static field: static public readonly System.String[] LayerBlendModeParameters
    static ::ArrayW<::StringW> _get_LayerBlendModeParameters();
    // Set static field: static public readonly System.String[] LayerBlendModeParameters
    static void _set_LayerBlendModeParameters(::ArrayW<::StringW> value);
    // Get static field: static public readonly System.String[] LayerMaskTypeParameters
    static ::ArrayW<::StringW> _get_LayerMaskTypeParameters();
    // Set static field: static public readonly System.String[] LayerMaskTypeParameters
    static void _set_LayerMaskTypeParameters(::ArrayW<::StringW> value);
    // Get static field: static public readonly System.String[] LayerColorParameters
    static ::ArrayW<::StringW> _get_LayerColorParameters();
    // Set static field: static public readonly System.String[] LayerColorParameters
    static void _set_LayerColorParameters(::ArrayW<::StringW> value);
    // Get static field: static public readonly System.String[] LayerSurfaceParameters
    static ::ArrayW<::StringW> _get_LayerSurfaceParameters();
    // Set static field: static public readonly System.String[] LayerSurfaceParameters
    static void _set_LayerSurfaceParameters(::ArrayW<::StringW> value);
    // Get static field: static public readonly System.String[] LayerSampleParametersParameters
    static ::ArrayW<::StringW> _get_LayerSampleParametersParameters();
    // Set static field: static public readonly System.String[] LayerSampleParametersParameters
    static void _set_LayerSampleParametersParameters(::ArrayW<::StringW> value);
    // Get static field: static public readonly System.String[] LayerMaskParametersParameters
    static ::ArrayW<::StringW> _get_LayerMaskParametersParameters();
    // Set static field: static public readonly System.String[] LayerMaskParametersParameters
    static void _set_LayerMaskParametersParameters(::ArrayW<::StringW> value);
    // Get static field: static public readonly System.String[] LayerMaskAxisParameters
    static ::ArrayW<::StringW> _get_LayerMaskAxisParameters();
    // Set static field: static public readonly System.String[] LayerMaskAxisParameters
    static void _set_LayerMaskAxisParameters(::ArrayW<::StringW> value);
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.Material,ovrAvatarMaterialState> materialStates
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Material*, ::GlobalNamespace::ovrAvatarMaterialState>*& dyn_materialStates();
    // Get instance field reference: public System.Collections.Generic.List`1<OvrAvatarRenderComponent> RenderParts
    [[deprecated]] ::System::Collections::Generic::List_1<::GlobalNamespace::OvrAvatarRenderComponent*>*& dyn_RenderParts();
    // Get instance field reference: protected OvrAvatar owner
    [[deprecated]] ::GlobalNamespace::OvrAvatar*& dyn_owner();
    // Get instance field reference: protected ovrAvatarComponent nativeAvatarComponent
    [[deprecated]] ::GlobalNamespace::ovrAvatarComponent& dyn_nativeAvatarComponent();
    // public System.Void SetOvrAvatarOwner(OvrAvatar ovrAvatarOwner)
    // Offset: 0xF89820
    void SetOvrAvatarOwner(::GlobalNamespace::OvrAvatar* ovrAvatarOwner);
    // public System.Void UpdateAvatar(System.IntPtr nativeComponent)
    // Offset: 0xF8925C
    void UpdateAvatar(::System::IntPtr nativeComponent);
    // protected System.Void UpdateActive(OvrAvatar avatar, ovrAvatarVisibilityFlags mask)
    // Offset: 0xF89A64
    void UpdateActive(::GlobalNamespace::OvrAvatar* avatar, ::GlobalNamespace::ovrAvatarVisibilityFlags mask);
    // public System.Void UpdateAvatarMaterial(UnityEngine.Material mat, ovrAvatarMaterialState matState)
    // Offset: 0xF89AC4
    void UpdateAvatarMaterial(::UnityEngine::Material* mat, ::GlobalNamespace::ovrAvatarMaterialState matState);
    // static public UnityEngine.Texture2D GetLoadedTexture(System.UInt64 assetId)
    // Offset: 0xF8A278
    static ::UnityEngine::Texture2D* GetLoadedTexture(uint64_t assetId);
    // public System.Void .ctor()
    // Offset: 0xF895E4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OvrAvatarComponent_* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OvrAvatarComponent_::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OvrAvatarComponent_*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xF8A308
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // OvrAvatarComponent
  #pragma pack(pop)
  static check_size<sizeof(OvrAvatarComponent_), 48 + sizeof(::GlobalNamespace::ovrAvatarComponent)> __GlobalNamespace_OvrAvatarComponent_SizeCheck;
  static_assert(sizeof(OvrAvatarComponent_) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarComponent_::SetOvrAvatarOwner
// Il2CppName: SetOvrAvatarOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarComponent_::*)(::GlobalNamespace::OvrAvatar*)>(&GlobalNamespace::OvrAvatarComponent_::SetOvrAvatarOwner)> {
  static const MethodInfo* get() {
    static auto* ovrAvatarOwner = &::il2cpp_utils::GetClassFromName("", "OvrAvatar")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarComponent_*), "SetOvrAvatarOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ovrAvatarOwner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarComponent_::UpdateAvatar
// Il2CppName: UpdateAvatar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarComponent_::*)(::System::IntPtr)>(&GlobalNamespace::OvrAvatarComponent_::UpdateAvatar)> {
  static const MethodInfo* get() {
    static auto* nativeComponent = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarComponent_*), "UpdateAvatar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nativeComponent});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarComponent_::UpdateActive
// Il2CppName: UpdateActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarComponent_::*)(::GlobalNamespace::OvrAvatar*, ::GlobalNamespace::ovrAvatarVisibilityFlags)>(&GlobalNamespace::OvrAvatarComponent_::UpdateActive)> {
  static const MethodInfo* get() {
    static auto* avatar = &::il2cpp_utils::GetClassFromName("", "OvrAvatar")->byval_arg;
    static auto* mask = &::il2cpp_utils::GetClassFromName("", "ovrAvatarVisibilityFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarComponent_*), "UpdateActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{avatar, mask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarComponent_::UpdateAvatarMaterial
// Il2CppName: UpdateAvatarMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarComponent_::*)(::UnityEngine::Material*, ::GlobalNamespace::ovrAvatarMaterialState)>(&GlobalNamespace::OvrAvatarComponent_::UpdateAvatarMaterial)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* matState = &::il2cpp_utils::GetClassFromName("", "ovrAvatarMaterialState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarComponent_*), "UpdateAvatarMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat, matState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarComponent_::GetLoadedTexture
// Il2CppName: GetLoadedTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)(uint64_t)>(&GlobalNamespace::OvrAvatarComponent_::GetLoadedTexture)> {
  static const MethodInfo* get() {
    static auto* assetId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarComponent_*), "GetLoadedTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarComponent_::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarComponent_::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OvrAvatarComponent_::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarComponent_*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
