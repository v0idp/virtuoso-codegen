// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: ovrAvatarLight
#include "GlobalNamespace/ovrAvatarLight.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ovrAvatarLights
  struct ovrAvatarLights;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ovrAvatarLights, "", "ovrAvatarLights");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ovrAvatarLights
  // [TokenAttribute] Offset: FFFFFFFF
  struct ovrAvatarLights/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single ambientIntensity
    // Size: 0x4
    // Offset: 0x0
    float ambientIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.UInt32 lightCount
    // Size: 0x4
    // Offset: 0x4
    uint lightCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public ovrAvatarLight[] lights
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<::GlobalNamespace::ovrAvatarLight> lights;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::ovrAvatarLight>) == 0x8);
    public:
    // Creating value type constructor for type: ovrAvatarLights
    constexpr ovrAvatarLights(float ambientIntensity_ = {}, uint lightCount_ = {}, ::ArrayW<::GlobalNamespace::ovrAvatarLight> lights_ = ::ArrayW<::GlobalNamespace::ovrAvatarLight>(static_cast<void*>(nullptr))) noexcept : ambientIntensity{ambientIntensity_}, lightCount{lightCount_}, lights{lights_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single ambientIntensity
    [[deprecated("Use field access instead!")]] float& dyn_ambientIntensity();
    // Get instance field reference: public System.UInt32 lightCount
    [[deprecated("Use field access instead!")]] uint& dyn_lightCount();
    // Get instance field reference: public ovrAvatarLight[] lights
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ovrAvatarLight>& dyn_lights();
  }; // ovrAvatarLights
  #pragma pack(pop)
  static check_size<sizeof(ovrAvatarLights), 8 + sizeof(::ArrayW<::GlobalNamespace::ovrAvatarLight>)> __GlobalNamespace_ovrAvatarLightsSizeCheck;
  static_assert(sizeof(ovrAvatarLights) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
