// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ovrAvatarMeshVertexV2
  struct ovrAvatarMeshVertexV2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ovrAvatarMeshVertexV2, "", "ovrAvatarMeshVertexV2");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ovrAvatarMeshVertexV2
  // [TokenAttribute] Offset: FFFFFFFF
  struct ovrAvatarMeshVertexV2/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single x
    // Size: 0x4
    // Offset: 0x0
    float x;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single y
    // Size: 0x4
    // Offset: 0x4
    float y;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single z
    // Size: 0x4
    // Offset: 0x8
    float z;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single nx
    // Size: 0x4
    // Offset: 0xC
    float nx;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ny
    // Size: 0x4
    // Offset: 0x10
    float ny;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single nz
    // Size: 0x4
    // Offset: 0x14
    float nz;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tx
    // Size: 0x4
    // Offset: 0x18
    float tx;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ty
    // Size: 0x4
    // Offset: 0x1C
    float ty;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tz
    // Size: 0x4
    // Offset: 0x20
    float tz;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tw
    // Size: 0x4
    // Offset: 0x24
    float tw;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single u
    // Size: 0x4
    // Offset: 0x28
    float u;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single v
    // Size: 0x4
    // Offset: 0x2C
    float v;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single r
    // Size: 0x4
    // Offset: 0x30
    float r;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single g
    // Size: 0x4
    // Offset: 0x34
    float g;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single b
    // Size: 0x4
    // Offset: 0x38
    float b;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single a
    // Size: 0x4
    // Offset: 0x3C
    float a;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Byte[] blendIndices
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<uint8_t> blendIndices;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.Single[] blendWeights
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<float> blendWeights;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Creating value type constructor for type: ovrAvatarMeshVertexV2
    constexpr ovrAvatarMeshVertexV2(float x_ = {}, float y_ = {}, float z_ = {}, float nx_ = {}, float ny_ = {}, float nz_ = {}, float tx_ = {}, float ty_ = {}, float tz_ = {}, float tw_ = {}, float u_ = {}, float v_ = {}, float r_ = {}, float g_ = {}, float b_ = {}, float a_ = {}, ::ArrayW<uint8_t> blendIndices_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr)), ::ArrayW<float> blendWeights_ = ::ArrayW<float>(static_cast<void*>(nullptr))) noexcept : x{x_}, y{y_}, z{z_}, nx{nx_}, ny{ny_}, nz{nz_}, tx{tx_}, ty{ty_}, tz{tz_}, tw{tw_}, u{u_}, v{v_}, r{r_}, g{g_}, b{b_}, a{a_}, blendIndices{blendIndices_}, blendWeights{blendWeights_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single x
    [[deprecated("Use field access instead!")]] float& dyn_x();
    // Get instance field reference: public System.Single y
    [[deprecated("Use field access instead!")]] float& dyn_y();
    // Get instance field reference: public System.Single z
    [[deprecated("Use field access instead!")]] float& dyn_z();
    // Get instance field reference: public System.Single nx
    [[deprecated("Use field access instead!")]] float& dyn_nx();
    // Get instance field reference: public System.Single ny
    [[deprecated("Use field access instead!")]] float& dyn_ny();
    // Get instance field reference: public System.Single nz
    [[deprecated("Use field access instead!")]] float& dyn_nz();
    // Get instance field reference: public System.Single tx
    [[deprecated("Use field access instead!")]] float& dyn_tx();
    // Get instance field reference: public System.Single ty
    [[deprecated("Use field access instead!")]] float& dyn_ty();
    // Get instance field reference: public System.Single tz
    [[deprecated("Use field access instead!")]] float& dyn_tz();
    // Get instance field reference: public System.Single tw
    [[deprecated("Use field access instead!")]] float& dyn_tw();
    // Get instance field reference: public System.Single u
    [[deprecated("Use field access instead!")]] float& dyn_u();
    // Get instance field reference: public System.Single v
    [[deprecated("Use field access instead!")]] float& dyn_v();
    // Get instance field reference: public System.Single r
    [[deprecated("Use field access instead!")]] float& dyn_r();
    // Get instance field reference: public System.Single g
    [[deprecated("Use field access instead!")]] float& dyn_g();
    // Get instance field reference: public System.Single b
    [[deprecated("Use field access instead!")]] float& dyn_b();
    // Get instance field reference: public System.Single a
    [[deprecated("Use field access instead!")]] float& dyn_a();
    // Get instance field reference: public System.Byte[] blendIndices
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_blendIndices();
    // Get instance field reference: public System.Single[] blendWeights
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_blendWeights();
  }; // ovrAvatarMeshVertexV2
  #pragma pack(pop)
  static check_size<sizeof(ovrAvatarMeshVertexV2), 72 + sizeof(::ArrayW<float>)> __GlobalNamespace_ovrAvatarMeshVertexV2SizeCheck;
  static_assert(sizeof(ovrAvatarMeshVertexV2) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
