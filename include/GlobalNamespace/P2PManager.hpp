// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: RemotePlayer
  class RemotePlayer;
}
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message`1<T>
  template<typename T>
  class Message_1;
}
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: NetworkingPeer
  class NetworkingPeer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: P2PManager
  class P2PManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::P2PManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::P2PManager*, "", "P2PManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: P2PManager
  // [TokenAttribute] Offset: FFFFFFFF
  class P2PManager : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::P2PManager::MessageType
    struct MessageType;
    // public System.Void .ctor()
    // Offset: 0xAD9E68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static P2PManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::P2PManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<P2PManager*, creationType>()));
    }
    // public System.Void ConnectTo(System.UInt64 userID)
    // Offset: 0xAD9F48
    void ConnectTo(uint64_t userID);
    // public System.Void Disconnect(System.UInt64 userID)
    // Offset: 0xADA02C
    void Disconnect(uint64_t userID);
    // private System.Void PeerConnectRequestCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.NetworkingPeer> msg)
    // Offset: 0xADA0AC
    void PeerConnectRequestCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::NetworkingPeer*>* msg);
    // private System.Void ConnectionStateChangedCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.NetworkingPeer> msg)
    // Offset: 0xADA21C
    void ConnectionStateChangedCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::NetworkingPeer*>* msg);
    // public System.Void SendAvatarUpdate(System.UInt64 userID, UnityEngine.Transform rootTransform, System.UInt32 sequence, System.Byte[] avatarPacket)
    // Offset: 0xADA45C
    void SendAvatarUpdate(uint64_t userID, ::UnityEngine::Transform* rootTransform, uint sequence, ::ArrayW<uint8_t> avatarPacket);
    // public System.Void GetRemotePackets()
    // Offset: 0xADA84C
    void GetRemotePackets();
    // public System.Void processAvatarPacket(RemotePlayer remote, ref System.Byte[] packet, ref System.Int32 offset)
    // Offset: 0xADAB08
    void processAvatarPacket(::GlobalNamespace::RemotePlayer* remote, ByRef<::ArrayW<uint8_t>> packet, ByRef<int> offset);
    // private System.Void PackByte(System.Byte b, System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xADA628
    void PackByte(uint8_t b, ::ArrayW<uint8_t> buf, ByRef<int> offset);
    // private System.Byte ReadByte(System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xADAA3C
    uint8_t ReadByte(::ArrayW<uint8_t> buf, ByRef<int> offset);
    // private System.Void PackFloat(System.Single f, System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xADA70C
    void PackFloat(float f, ::ArrayW<uint8_t> buf, ByRef<int> offset);
    // private System.Single ReadFloat(System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xADAD48
    float ReadFloat(::ArrayW<uint8_t> buf, ByRef<int> offset);
    // private System.Void PackULong(System.UInt64 u, System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xADA670
    void PackULong(uint64_t u, ::ArrayW<uint8_t> buf, ByRef<int> offset);
    // private System.UInt64 ReadULong(System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xADAA80
    uint64_t ReadULong(::ArrayW<uint8_t> buf, ByRef<int> offset);
    // private System.Void PackUInt32(System.UInt32 u, System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xADA7B0
    void PackUInt32(uint u, ::ArrayW<uint8_t> buf, ByRef<int> offset);
    // private System.UInt32 ReadUInt32(System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xADADD0
    uint ReadUInt32(::ArrayW<uint8_t> buf, ByRef<int> offset);
  }; // P2PManager
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::P2PManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::P2PManager::ConnectTo
// Il2CppName: ConnectTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::P2PManager::*)(uint64_t)>(&GlobalNamespace::P2PManager::ConnectTo)> {
  static const MethodInfo* get() {
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::P2PManager*), "ConnectTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::P2PManager::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::P2PManager::*)(uint64_t)>(&GlobalNamespace::P2PManager::Disconnect)> {
  static const MethodInfo* get() {
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::P2PManager*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::P2PManager::PeerConnectRequestCallback
// Il2CppName: PeerConnectRequestCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::P2PManager::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::NetworkingPeer*>*)>(&GlobalNamespace::P2PManager::PeerConnectRequestCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "NetworkingPeer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::P2PManager*), "PeerConnectRequestCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::P2PManager::ConnectionStateChangedCallback
// Il2CppName: ConnectionStateChangedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::P2PManager::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::NetworkingPeer*>*)>(&GlobalNamespace::P2PManager::ConnectionStateChangedCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "NetworkingPeer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::P2PManager*), "ConnectionStateChangedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::P2PManager::SendAvatarUpdate
// Il2CppName: SendAvatarUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::P2PManager::*)(uint64_t, ::UnityEngine::Transform*, uint, ::ArrayW<uint8_t>)>(&GlobalNamespace::P2PManager::SendAvatarUpdate)> {
  static const MethodInfo* get() {
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* rootTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* sequence = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* avatarPacket = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::P2PManager*), "SendAvatarUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userID, rootTransform, sequence, avatarPacket});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::P2PManager::GetRemotePackets
// Il2CppName: GetRemotePackets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::P2PManager::*)()>(&GlobalNamespace::P2PManager::GetRemotePackets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::P2PManager*), "GetRemotePackets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::P2PManager::processAvatarPacket
// Il2CppName: processAvatarPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::P2PManager::*)(::GlobalNamespace::RemotePlayer*, ByRef<::ArrayW<uint8_t>>, ByRef<int>)>(&GlobalNamespace::P2PManager::processAvatarPacket)> {
  static const MethodInfo* get() {
    static auto* remote = &::il2cpp_utils::GetClassFromName("", "RemotePlayer")->byval_arg;
    static auto* packet = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::P2PManager*), "processAvatarPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remote, packet, offset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::P2PManager::PackByte
// Il2CppName: PackByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::P2PManager::*)(uint8_t, ::ArrayW<uint8_t>, ByRef<int>)>(&GlobalNamespace::P2PManager::PackByte)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::P2PManager*), "PackByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b, buf, offset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::P2PManager::ReadByte
// Il2CppName: ReadByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (GlobalNamespace::P2PManager::*)(::ArrayW<uint8_t>, ByRef<int>)>(&GlobalNamespace::P2PManager::ReadByte)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::P2PManager*), "ReadByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf, offset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::P2PManager::PackFloat
// Il2CppName: PackFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::P2PManager::*)(float, ::ArrayW<uint8_t>, ByRef<int>)>(&GlobalNamespace::P2PManager::PackFloat)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::P2PManager*), "PackFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f, buf, offset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::P2PManager::ReadFloat
// Il2CppName: ReadFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::P2PManager::*)(::ArrayW<uint8_t>, ByRef<int>)>(&GlobalNamespace::P2PManager::ReadFloat)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::P2PManager*), "ReadFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf, offset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::P2PManager::PackULong
// Il2CppName: PackULong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::P2PManager::*)(uint64_t, ::ArrayW<uint8_t>, ByRef<int>)>(&GlobalNamespace::P2PManager::PackULong)> {
  static const MethodInfo* get() {
    static auto* u = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::P2PManager*), "PackULong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{u, buf, offset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::P2PManager::ReadULong
// Il2CppName: ReadULong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (GlobalNamespace::P2PManager::*)(::ArrayW<uint8_t>, ByRef<int>)>(&GlobalNamespace::P2PManager::ReadULong)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::P2PManager*), "ReadULong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf, offset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::P2PManager::PackUInt32
// Il2CppName: PackUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::P2PManager::*)(uint, ::ArrayW<uint8_t>, ByRef<int>)>(&GlobalNamespace::P2PManager::PackUInt32)> {
  static const MethodInfo* get() {
    static auto* u = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::P2PManager*), "PackUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{u, buf, offset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::P2PManager::ReadUInt32
// Il2CppName: ReadUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (GlobalNamespace::P2PManager::*)(::ArrayW<uint8_t>, ByRef<int>)>(&GlobalNamespace::P2PManager::ReadUInt32)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::P2PManager*), "ReadUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf, offset});
  }
};
