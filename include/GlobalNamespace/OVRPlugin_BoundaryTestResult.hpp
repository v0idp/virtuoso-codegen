// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/Vector3f
// Already included the same include: GlobalNamespace/OVRPlugin.hpp
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::BoundaryTestResult, "", "OVRPlugin/BoundaryTestResult");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/BoundaryTestResult
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: 6949FC
  struct OVRPlugin::BoundaryTestResult/*, public ::System::ValueType*/ {
    public:
    public:
    // public OVRPlugin/Bool IsTriggering
    // Size: 0x4
    // Offset: 0x0
    ::GlobalNamespace::OVRPlugin::Bool IsTriggering;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bool) == 0x4);
    // public System.Single ClosestDistance
    // Size: 0x4
    // Offset: 0x4
    float ClosestDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public OVRPlugin/Vector3f ClosestPoint
    // Size: 0xC
    // Offset: 0x8
    ::GlobalNamespace::OVRPlugin::Vector3f ClosestPoint;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::Vector3f) == 0xC);
    // public OVRPlugin/Vector3f ClosestPointNormal
    // Size: 0xC
    // Offset: 0x14
    ::GlobalNamespace::OVRPlugin::Vector3f ClosestPointNormal;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::Vector3f) == 0xC);
    public:
    // Creating value type constructor for type: BoundaryTestResult
    constexpr BoundaryTestResult(::GlobalNamespace::OVRPlugin::Bool IsTriggering_ = {}, float ClosestDistance_ = {}, ::GlobalNamespace::OVRPlugin::Vector3f ClosestPoint_ = {}, ::GlobalNamespace::OVRPlugin::Vector3f ClosestPointNormal_ = {}) noexcept : IsTriggering{IsTriggering_}, ClosestDistance{ClosestDistance_}, ClosestPoint{ClosestPoint_}, ClosestPointNormal{ClosestPointNormal_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public OVRPlugin/Bool IsTriggering
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bool& dyn_IsTriggering();
    // Get instance field reference: public System.Single ClosestDistance
    [[deprecated("Use field access instead!")]] float& dyn_ClosestDistance();
    // Get instance field reference: public OVRPlugin/Vector3f ClosestPoint
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Vector3f& dyn_ClosestPoint();
    // Get instance field reference: public OVRPlugin/Vector3f ClosestPointNormal
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Vector3f& dyn_ClosestPointNormal();
  }; // OVRPlugin/BoundaryTestResult
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::BoundaryTestResult), 20 + sizeof(::GlobalNamespace::OVRPlugin::Vector3f)> __GlobalNamespace_OVRPlugin_BoundaryTestResultSizeCheck;
  static_assert(sizeof(OVRPlugin::BoundaryTestResult) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
