// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OvrAvatarMaterialManager
#include "GlobalNamespace/OvrAvatarMaterialManager.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: ovrAvatarBodyPartType
#include "GlobalNamespace/ovrAvatarBodyPartType.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OvrAvatarMaterialManager::AvatarComponentMaterialProperties, "", "OvrAvatarMaterialManager/AvatarComponentMaterialProperties");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OvrAvatarMaterialManager/AvatarComponentMaterialProperties
  // [TokenAttribute] Offset: FFFFFFFF
  struct OvrAvatarMaterialManager::AvatarComponentMaterialProperties/*, public ::System::ValueType*/ {
    public:
    public:
    // public ovrAvatarBodyPartType TypeIndex
    // Size: 0x4
    // Offset: 0x0
    ::GlobalNamespace::ovrAvatarBodyPartType TypeIndex;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ovrAvatarBodyPartType) == 0x4);
    // public UnityEngine.Color Color
    // Size: 0x10
    // Offset: 0x4
    ::UnityEngine::Color Color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // Padding between fields: Color and: Textures
    char __padding1[0x4] = {};
    // public UnityEngine.Texture2D[] Textures
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Texture2D*> Textures;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Texture2D*>) == 0x8);
    // public System.Single DiffuseIntensity
    // Size: 0x4
    // Offset: 0x20
    float DiffuseIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single RimIntensity
    // Size: 0x4
    // Offset: 0x24
    float RimIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ReflectionIntensity
    // Size: 0x4
    // Offset: 0x28
    float ReflectionIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: AvatarComponentMaterialProperties
    constexpr AvatarComponentMaterialProperties(::GlobalNamespace::ovrAvatarBodyPartType TypeIndex_ = {}, ::UnityEngine::Color Color_ = {}, ::ArrayW<::UnityEngine::Texture2D*> Textures_ = ::ArrayW<::UnityEngine::Texture2D*>(static_cast<void*>(nullptr)), float DiffuseIntensity_ = {}, float RimIntensity_ = {}, float ReflectionIntensity_ = {}) noexcept : TypeIndex{TypeIndex_}, Color{Color_}, Textures{Textures_}, DiffuseIntensity{DiffuseIntensity_}, RimIntensity{RimIntensity_}, ReflectionIntensity{ReflectionIntensity_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public ovrAvatarBodyPartType TypeIndex
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ovrAvatarBodyPartType& dyn_TypeIndex();
    // Get instance field reference: public UnityEngine.Color Color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_Color();
    // Get instance field reference: public UnityEngine.Texture2D[] Textures
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Texture2D*>& dyn_Textures();
    // Get instance field reference: public System.Single DiffuseIntensity
    [[deprecated("Use field access instead!")]] float& dyn_DiffuseIntensity();
    // Get instance field reference: public System.Single RimIntensity
    [[deprecated("Use field access instead!")]] float& dyn_RimIntensity();
    // Get instance field reference: public System.Single ReflectionIntensity
    [[deprecated("Use field access instead!")]] float& dyn_ReflectionIntensity();
  }; // OvrAvatarMaterialManager/AvatarComponentMaterialProperties
  #pragma pack(pop)
  static check_size<sizeof(OvrAvatarMaterialManager::AvatarComponentMaterialProperties), 40 + sizeof(float)> __GlobalNamespace_OvrAvatarMaterialManager_AvatarComponentMaterialPropertiesSizeCheck;
  static_assert(sizeof(OvrAvatarMaterialManager::AvatarComponentMaterialProperties) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
