// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: ovrAvatarLogLevel
#include "GlobalNamespace/ovrAvatarLogLevel.hpp"
// Including type: ovrAvatarAssetLevelOfDetail
#include "GlobalNamespace/ovrAvatarAssetLevelOfDetail.hpp"
// Including type: ovrAvatarLookAndFeelVersion
#include "GlobalNamespace/ovrAvatarLookAndFeelVersion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: specificationCallback
  class specificationCallback;
  // Forward declaring type: assetLoadedCallback
  class assetLoadedCallback;
  // Forward declaring type: combinedMeshLoadedCallback
  class combinedMeshLoadedCallback;
  // Forward declaring type: OvrAvatarAsset
  class OvrAvatarAsset;
  // Forward declaring type: OvrAvatarTextureCopyManager
  class OvrAvatarTextureCopyManager;
  // Skipping declaration: AvatarSpecRequestParams because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OvrAvatarSDKManager
  class OvrAvatarSDKManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OvrAvatarSDKManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OvrAvatarSDKManager*, "", "OvrAvatarSDKManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: OvrAvatarSDKManager
  // [TokenAttribute] Offset: FFFFFFFF
  class OvrAvatarSDKManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::OvrAvatarSDKManager::AvatarSpecRequestParams
    struct AvatarSpecRequestParams;
    // Size: 0x25
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OvrAvatarSDKManager/AvatarSpecRequestParams
    // [TokenAttribute] Offset: FFFFFFFF
    struct AvatarSpecRequestParams/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.UInt64 _userId
      // Size: 0x8
      // Offset: 0x0
      uint64_t userId;
      // Field size check
      static_assert(sizeof(uint64_t) == 0x8);
      // public specificationCallback _callback
      // Size: 0x8
      // Offset: 0x8
      ::GlobalNamespace::specificationCallback* callback;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::specificationCallback*) == 0x8);
      // public System.Boolean _useCombinedMesh
      // Size: 0x1
      // Offset: 0x10
      bool useCombinedMesh;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: useCombinedMesh and: lod
      char __padding2[0x3] = {};
      // public ovrAvatarAssetLevelOfDetail _lod
      // Size: 0x4
      // Offset: 0x14
      ::GlobalNamespace::ovrAvatarAssetLevelOfDetail lod;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::ovrAvatarAssetLevelOfDetail) == 0x4);
      // public System.Boolean _forceMobileTextureFormat
      // Size: 0x1
      // Offset: 0x18
      bool forceMobileTextureFormat;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: forceMobileTextureFormat and: lookVersion
      char __padding4[0x3] = {};
      // public ovrAvatarLookAndFeelVersion _lookVersion
      // Size: 0x4
      // Offset: 0x1C
      ::GlobalNamespace::ovrAvatarLookAndFeelVersion lookVersion;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::ovrAvatarLookAndFeelVersion) == 0x4);
      // public ovrAvatarLookAndFeelVersion _fallbackVersion
      // Size: 0x4
      // Offset: 0x20
      ::GlobalNamespace::ovrAvatarLookAndFeelVersion fallbackVersion;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::ovrAvatarLookAndFeelVersion) == 0x4);
      // public System.Boolean _enableExpressive
      // Size: 0x1
      // Offset: 0x24
      bool enableExpressive;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: AvatarSpecRequestParams
      constexpr AvatarSpecRequestParams(uint64_t userId_ = {}, ::GlobalNamespace::specificationCallback* callback_ = {}, bool useCombinedMesh_ = {}, ::GlobalNamespace::ovrAvatarAssetLevelOfDetail lod_ = {}, bool forceMobileTextureFormat_ = {}, ::GlobalNamespace::ovrAvatarLookAndFeelVersion lookVersion_ = {}, ::GlobalNamespace::ovrAvatarLookAndFeelVersion fallbackVersion_ = {}, bool enableExpressive_ = {}) noexcept : userId{userId_}, callback{callback_}, useCombinedMesh{useCombinedMesh_}, lod{lod_}, forceMobileTextureFormat{forceMobileTextureFormat_}, lookVersion{lookVersion_}, fallbackVersion{fallbackVersion_}, enableExpressive{enableExpressive_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.UInt64 _userId
      [[deprecated("Use field access instead!")]] uint64_t& dyn__userId();
      // Get instance field reference: public specificationCallback _callback
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::specificationCallback*& dyn__callback();
      // Get instance field reference: public System.Boolean _useCombinedMesh
      [[deprecated("Use field access instead!")]] bool& dyn__useCombinedMesh();
      // Get instance field reference: public ovrAvatarAssetLevelOfDetail _lod
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::ovrAvatarAssetLevelOfDetail& dyn__lod();
      // Get instance field reference: public System.Boolean _forceMobileTextureFormat
      [[deprecated("Use field access instead!")]] bool& dyn__forceMobileTextureFormat();
      // Get instance field reference: public ovrAvatarLookAndFeelVersion _lookVersion
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::ovrAvatarLookAndFeelVersion& dyn__lookVersion();
      // Get instance field reference: public ovrAvatarLookAndFeelVersion _fallbackVersion
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::ovrAvatarLookAndFeelVersion& dyn__fallbackVersion();
      // Get instance field reference: public System.Boolean _enableExpressive
      [[deprecated("Use field access instead!")]] bool& dyn__enableExpressive();
      // public System.Void .ctor(System.UInt64 userId, specificationCallback callback, System.Boolean useCombinedMesh, ovrAvatarAssetLevelOfDetail lod, System.Boolean forceMobileTextureFormat, ovrAvatarLookAndFeelVersion lookVersion, ovrAvatarLookAndFeelVersion fallbackVersion, System.Boolean enableExpressive)
      // Offset: 0x8CCA58
      // ABORTED: conflicts with another method.  AvatarSpecRequestParams(uint64_t userId, ::GlobalNamespace::specificationCallback* callback, bool useCombinedMesh, ::GlobalNamespace::ovrAvatarAssetLevelOfDetail lod, bool forceMobileTextureFormat, ::GlobalNamespace::ovrAvatarLookAndFeelVersion lookVersion, ::GlobalNamespace::ovrAvatarLookAndFeelVersion fallbackVersion, bool enableExpressive);
    }; // OvrAvatarSDKManager/AvatarSpecRequestParams
    #pragma pack(pop)
    static check_size<sizeof(OvrAvatarSDKManager::AvatarSpecRequestParams), 36 + sizeof(bool)> __GlobalNamespace_OvrAvatarSDKManager_AvatarSpecRequestParamsSizeCheck;
    static_assert(sizeof(OvrAvatarSDKManager::AvatarSpecRequestParams) == 0x25);
    public:
    // private System.Boolean initialized
    // Size: 0x1
    // Offset: 0x18
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialized and: specificationCallbacks
    char __padding0[0x7] = {};
    // private System.Collections.Generic.Dictionary`2<System.UInt64,System.Collections.Generic.HashSet`1<specificationCallback>> specificationCallbacks
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Dictionary_2<uint64_t, ::System::Collections::Generic::HashSet_1<::GlobalNamespace::specificationCallback*>*>* specificationCallbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint64_t, ::System::Collections::Generic::HashSet_1<::GlobalNamespace::specificationCallback*>*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.UInt64,System.Collections.Generic.HashSet`1<assetLoadedCallback>> assetLoadedCallbacks
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<uint64_t, ::System::Collections::Generic::HashSet_1<::GlobalNamespace::assetLoadedCallback*>*>* assetLoadedCallbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint64_t, ::System::Collections::Generic::HashSet_1<::GlobalNamespace::assetLoadedCallback*>*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.IntPtr,combinedMeshLoadedCallback> combinedMeshLoadedCallbacks
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<::System::IntPtr, ::GlobalNamespace::combinedMeshLoadedCallback*>* combinedMeshLoadedCallbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::IntPtr, ::GlobalNamespace::combinedMeshLoadedCallback*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.UInt64,OvrAvatarAsset> assetCache
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<uint64_t, ::GlobalNamespace::OvrAvatarAsset*>* assetCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint64_t, ::GlobalNamespace::OvrAvatarAsset*>*) == 0x8);
    // private OvrAvatarTextureCopyManager textureCopyManager
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::OvrAvatarTextureCopyManager* textureCopyManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OvrAvatarTextureCopyManager*) == 0x8);
    // public ovrAvatarLogLevel LoggingLevel
    // Size: 0x4
    // Offset: 0x48
    ::GlobalNamespace::ovrAvatarLogLevel LoggingLevel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ovrAvatarLogLevel) == 0x4);
    // Padding between fields: LoggingLevel and: avatarSpecificationQueue
    char __padding6[0x4] = {};
    // private System.Collections.Generic.Queue`1<OvrAvatarSDKManager/AvatarSpecRequestParams> avatarSpecificationQueue
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Queue_1<::GlobalNamespace::OvrAvatarSDKManager::AvatarSpecRequestParams>* avatarSpecificationQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::GlobalNamespace::OvrAvatarSDKManager::AvatarSpecRequestParams>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> loadingAvatars
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<int>* loadingAvatars;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Boolean avatarSpecRequestAvailable
    // Size: 0x1
    // Offset: 0x60
    bool avatarSpecRequestAvailable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: avatarSpecRequestAvailable and: lastDispatchedAvatarSpecRequestTime
    char __padding9[0x3] = {};
    // private System.Single lastDispatchedAvatarSpecRequestTime
    // Size: 0x4
    // Offset: 0x64
    float lastDispatchedAvatarSpecRequestTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private OvrAvatarSDKManager _instance
    static ::GlobalNamespace::OvrAvatarSDKManager* _get__instance();
    // Set static field: static private OvrAvatarSDKManager _instance
    static void _set__instance(::GlobalNamespace::OvrAvatarSDKManager* value);
    // static field const value: static private System.Single AVATAR_SPEC_REQUEST_TIMEOUT
    static constexpr const float AVATAR_SPEC_REQUEST_TIMEOUT = 5;
    // Get static field: static private System.Single AVATAR_SPEC_REQUEST_TIMEOUT
    static float _get_AVATAR_SPEC_REQUEST_TIMEOUT();
    // Set static field: static private System.Single AVATAR_SPEC_REQUEST_TIMEOUT
    static void _set_AVATAR_SPEC_REQUEST_TIMEOUT(float value);
    // Get instance field reference: private System.Boolean initialized
    [[deprecated("Use field access instead!")]] bool& dyn_initialized();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.UInt64,System.Collections.Generic.HashSet`1<specificationCallback>> specificationCallbacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<uint64_t, ::System::Collections::Generic::HashSet_1<::GlobalNamespace::specificationCallback*>*>*& dyn_specificationCallbacks();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.UInt64,System.Collections.Generic.HashSet`1<assetLoadedCallback>> assetLoadedCallbacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<uint64_t, ::System::Collections::Generic::HashSet_1<::GlobalNamespace::assetLoadedCallback*>*>*& dyn_assetLoadedCallbacks();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.IntPtr,combinedMeshLoadedCallback> combinedMeshLoadedCallbacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::IntPtr, ::GlobalNamespace::combinedMeshLoadedCallback*>*& dyn_combinedMeshLoadedCallbacks();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.UInt64,OvrAvatarAsset> assetCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<uint64_t, ::GlobalNamespace::OvrAvatarAsset*>*& dyn_assetCache();
    // Get instance field reference: private OvrAvatarTextureCopyManager textureCopyManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OvrAvatarTextureCopyManager*& dyn_textureCopyManager();
    // Get instance field reference: public ovrAvatarLogLevel LoggingLevel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ovrAvatarLogLevel& dyn_LoggingLevel();
    // Get instance field reference: private System.Collections.Generic.Queue`1<OvrAvatarSDKManager/AvatarSpecRequestParams> avatarSpecificationQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::GlobalNamespace::OvrAvatarSDKManager::AvatarSpecRequestParams>*& dyn_avatarSpecificationQueue();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> loadingAvatars
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_loadingAvatars();
    // Get instance field reference: private System.Boolean avatarSpecRequestAvailable
    [[deprecated("Use field access instead!")]] bool& dyn_avatarSpecRequestAvailable();
    // Get instance field reference: private System.Single lastDispatchedAvatarSpecRequestTime
    [[deprecated("Use field access instead!")]] float& dyn_lastDispatchedAvatarSpecRequestTime();
    // static public OvrAvatarSDKManager get_Instance()
    // Offset: 0xF8345C
    static ::GlobalNamespace::OvrAvatarSDKManager* get_Instance();
    // public System.Void .ctor()
    // Offset: 0xF91D48
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OvrAvatarSDKManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OvrAvatarSDKManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OvrAvatarSDKManager*, creationType>()));
    }
    // private System.Boolean Initialize()
    // Offset: 0xF90E74
    bool Initialize();
    // private System.Void OnDestroy()
    // Offset: 0xF9117C
    void OnDestroy();
    // private System.Void Update()
    // Offset: 0xF911EC
    void Update();
    // public System.Boolean IsAvatarSpecWaiting()
    // Offset: 0xF91BC0
    bool IsAvatarSpecWaiting();
    // public System.Boolean IsAvatarLoading()
    // Offset: 0xF91C14
    bool IsAvatarLoading();
    // public System.Void AddLoadingAvatar(System.Int32 gameobjectID)
    // Offset: 0xF83C9C
    void AddLoadingAvatar(int gameobjectID);
    // public System.Void RemoveLoadingAvatar(System.Int32 gameobjectID)
    // Offset: 0xF84298
    void RemoveLoadingAvatar(int gameobjectID);
    // public System.Void RequestAvatarSpecification(OvrAvatarSDKManager/AvatarSpecRequestParams avatarSpecRequest)
    // Offset: 0xF83C0C
    void RequestAvatarSpecification(::GlobalNamespace::OvrAvatarSDKManager::AvatarSpecRequestParams avatarSpecRequest);
    // private System.Void DispatchAvatarSpecificationRequest(OvrAvatarSDKManager/AvatarSpecRequestParams avatarSpecRequest)
    // Offset: 0xF919BC
    void DispatchAvatarSpecificationRequest(::GlobalNamespace::OvrAvatarSDKManager::AvatarSpecRequestParams avatarSpecRequest);
    // public System.Void BeginLoadingAsset(System.UInt64 assetId, ovrAvatarAssetLevelOfDetail lod, assetLoadedCallback callback)
    // Offset: 0xF836AC
    void BeginLoadingAsset(uint64_t assetId, ::GlobalNamespace::ovrAvatarAssetLevelOfDetail lod, ::GlobalNamespace::assetLoadedCallback* callback);
    // public System.Void RegisterCombinedMeshCallback(System.IntPtr sdkAvatar, combinedMeshLoadedCallback callback)
    // Offset: 0xF83800
    void RegisterCombinedMeshCallback(::System::IntPtr sdkAvatar, ::GlobalNamespace::combinedMeshLoadedCallback* callback);
    // public OvrAvatarAsset GetAsset(System.UInt64 assetId)
    // Offset: 0xF83630
    ::GlobalNamespace::OvrAvatarAsset* GetAsset(uint64_t assetId);
    // public System.Void DeleteAssetFromCache(System.UInt64 assetId)
    // Offset: 0xF91C68
    void DeleteAssetFromCache(uint64_t assetId);
    // public System.String GetAppId()
    // Offset: 0xF91130
    ::StringW GetAppId();
    // public OvrAvatarTextureCopyManager GetTextureCopyManager()
    // Offset: 0xF8CA60
    ::GlobalNamespace::OvrAvatarTextureCopyManager* GetTextureCopyManager();
  }; // OvrAvatarSDKManager
  #pragma pack(pop)
  static check_size<sizeof(OvrAvatarSDKManager), 100 + sizeof(float)> __GlobalNamespace_OvrAvatarSDKManagerSizeCheck;
  static_assert(sizeof(OvrAvatarSDKManager) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OvrAvatarSDKManager::AvatarSpecRequestParams, "", "OvrAvatarSDKManager/AvatarSpecRequestParams");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarSDKManager::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OvrAvatarSDKManager* (*)()>(&GlobalNamespace::OvrAvatarSDKManager::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarSDKManager*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarSDKManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarSDKManager::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OvrAvatarSDKManager::*)()>(&GlobalNamespace::OvrAvatarSDKManager::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarSDKManager*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarSDKManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarSDKManager::*)()>(&GlobalNamespace::OvrAvatarSDKManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarSDKManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarSDKManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarSDKManager::*)()>(&GlobalNamespace::OvrAvatarSDKManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarSDKManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarSDKManager::IsAvatarSpecWaiting
// Il2CppName: IsAvatarSpecWaiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OvrAvatarSDKManager::*)()>(&GlobalNamespace::OvrAvatarSDKManager::IsAvatarSpecWaiting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarSDKManager*), "IsAvatarSpecWaiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarSDKManager::IsAvatarLoading
// Il2CppName: IsAvatarLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OvrAvatarSDKManager::*)()>(&GlobalNamespace::OvrAvatarSDKManager::IsAvatarLoading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarSDKManager*), "IsAvatarLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarSDKManager::AddLoadingAvatar
// Il2CppName: AddLoadingAvatar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarSDKManager::*)(int)>(&GlobalNamespace::OvrAvatarSDKManager::AddLoadingAvatar)> {
  static const MethodInfo* get() {
    static auto* gameobjectID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarSDKManager*), "AddLoadingAvatar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameobjectID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarSDKManager::RemoveLoadingAvatar
// Il2CppName: RemoveLoadingAvatar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarSDKManager::*)(int)>(&GlobalNamespace::OvrAvatarSDKManager::RemoveLoadingAvatar)> {
  static const MethodInfo* get() {
    static auto* gameobjectID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarSDKManager*), "RemoveLoadingAvatar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameobjectID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarSDKManager::RequestAvatarSpecification
// Il2CppName: RequestAvatarSpecification
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarSDKManager::*)(::GlobalNamespace::OvrAvatarSDKManager::AvatarSpecRequestParams)>(&GlobalNamespace::OvrAvatarSDKManager::RequestAvatarSpecification)> {
  static const MethodInfo* get() {
    static auto* avatarSpecRequest = &::il2cpp_utils::GetClassFromName("", "OvrAvatarSDKManager/AvatarSpecRequestParams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarSDKManager*), "RequestAvatarSpecification", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{avatarSpecRequest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarSDKManager::DispatchAvatarSpecificationRequest
// Il2CppName: DispatchAvatarSpecificationRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarSDKManager::*)(::GlobalNamespace::OvrAvatarSDKManager::AvatarSpecRequestParams)>(&GlobalNamespace::OvrAvatarSDKManager::DispatchAvatarSpecificationRequest)> {
  static const MethodInfo* get() {
    static auto* avatarSpecRequest = &::il2cpp_utils::GetClassFromName("", "OvrAvatarSDKManager/AvatarSpecRequestParams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarSDKManager*), "DispatchAvatarSpecificationRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{avatarSpecRequest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarSDKManager::BeginLoadingAsset
// Il2CppName: BeginLoadingAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarSDKManager::*)(uint64_t, ::GlobalNamespace::ovrAvatarAssetLevelOfDetail, ::GlobalNamespace::assetLoadedCallback*)>(&GlobalNamespace::OvrAvatarSDKManager::BeginLoadingAsset)> {
  static const MethodInfo* get() {
    static auto* assetId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* lod = &::il2cpp_utils::GetClassFromName("", "ovrAvatarAssetLevelOfDetail")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("", "assetLoadedCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarSDKManager*), "BeginLoadingAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetId, lod, callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarSDKManager::RegisterCombinedMeshCallback
// Il2CppName: RegisterCombinedMeshCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarSDKManager::*)(::System::IntPtr, ::GlobalNamespace::combinedMeshLoadedCallback*)>(&GlobalNamespace::OvrAvatarSDKManager::RegisterCombinedMeshCallback)> {
  static const MethodInfo* get() {
    static auto* sdkAvatar = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("", "combinedMeshLoadedCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarSDKManager*), "RegisterCombinedMeshCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sdkAvatar, callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarSDKManager::GetAsset
// Il2CppName: GetAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OvrAvatarAsset* (GlobalNamespace::OvrAvatarSDKManager::*)(uint64_t)>(&GlobalNamespace::OvrAvatarSDKManager::GetAsset)> {
  static const MethodInfo* get() {
    static auto* assetId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarSDKManager*), "GetAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarSDKManager::DeleteAssetFromCache
// Il2CppName: DeleteAssetFromCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarSDKManager::*)(uint64_t)>(&GlobalNamespace::OvrAvatarSDKManager::DeleteAssetFromCache)> {
  static const MethodInfo* get() {
    static auto* assetId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarSDKManager*), "DeleteAssetFromCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarSDKManager::GetAppId
// Il2CppName: GetAppId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::OvrAvatarSDKManager::*)()>(&GlobalNamespace::OvrAvatarSDKManager::GetAppId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarSDKManager*), "GetAppId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarSDKManager::GetTextureCopyManager
// Il2CppName: GetTextureCopyManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OvrAvatarTextureCopyManager* (GlobalNamespace::OvrAvatarSDKManager::*)()>(&GlobalNamespace::OvrAvatarSDKManager::GetTextureCopyManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarSDKManager*), "GetTextureCopyManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
