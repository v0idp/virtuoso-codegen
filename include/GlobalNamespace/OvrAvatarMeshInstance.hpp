// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: ovrAvatarBodyPartType
#include "GlobalNamespace/ovrAvatarBodyPartType.hpp"
// Including type: ovrAvatarMaterialState
#include "GlobalNamespace/ovrAvatarMaterialState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OvrAvatarAsset
  class OvrAvatarAsset;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OvrAvatarMeshInstance
  class OvrAvatarMeshInstance;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OvrAvatarMeshInstance);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OvrAvatarMeshInstance*, "", "OvrAvatarMeshInstance");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xF8
  #pragma pack(push, 1)
  // Autogenerated type: OvrAvatarMeshInstance
  // [TokenAttribute] Offset: FFFFFFFF
  class OvrAvatarMeshInstance : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Collections.Generic.HashSet`1<System.UInt64> AssetsToLoad
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::HashSet_1<uint64_t>* AssetsToLoad;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<uint64_t>*) == 0x8);
    // public System.UInt64 MeshID
    // Size: 0x8
    // Offset: 0x20
    uint64_t MeshID;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.UInt64 MaterialID
    // Size: 0x8
    // Offset: 0x28
    uint64_t MaterialID;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.UInt64 FadeTextureID
    // Size: 0x8
    // Offset: 0x30
    uint64_t FadeTextureID;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public ovrAvatarBodyPartType MeshType
    // Size: 0x4
    // Offset: 0x38
    ::GlobalNamespace::ovrAvatarBodyPartType MeshType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ovrAvatarBodyPartType) == 0x4);
    // Padding between fields: MeshType and: MaterialState
    char __padding4[0x4] = {};
    // public ovrAvatarMaterialState MaterialState
    // Size: 0xA8
    // Offset: 0x40
    ::GlobalNamespace::ovrAvatarMaterialState MaterialState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ovrAvatarMaterialState) == 0xA8);
    // private UnityEngine.MeshFilter Mesh
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::MeshFilter* Mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // private UnityEngine.MeshRenderer MeshInstance
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::MeshRenderer* MeshInstance;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.UInt64> AssetsToLoad
    ::System::Collections::Generic::HashSet_1<uint64_t>*& dyn_AssetsToLoad();
    // Get instance field reference: public System.UInt64 MeshID
    uint64_t& dyn_MeshID();
    // Get instance field reference: private System.UInt64 MaterialID
    uint64_t& dyn_MaterialID();
    // Get instance field reference: private System.UInt64 FadeTextureID
    uint64_t& dyn_FadeTextureID();
    // Get instance field reference: public ovrAvatarBodyPartType MeshType
    ::GlobalNamespace::ovrAvatarBodyPartType& dyn_MeshType();
    // Get instance field reference: public ovrAvatarMaterialState MaterialState
    ::GlobalNamespace::ovrAvatarMaterialState& dyn_MaterialState();
    // Get instance field reference: private UnityEngine.MeshFilter Mesh
    ::UnityEngine::MeshFilter*& dyn_Mesh();
    // Get instance field reference: private UnityEngine.MeshRenderer MeshInstance
    ::UnityEngine::MeshRenderer*& dyn_MeshInstance();
    // public System.Void AssetLoadedCallback(OvrAvatarAsset asset)
    // Offset: 0x92CF6C
    void AssetLoadedCallback(::GlobalNamespace::OvrAvatarAsset* asset);
    // public System.Void SetMeshAssets(System.UInt64 fadeTexture, System.UInt64 meshID, System.UInt64 materialID, ovrAvatarBodyPartType type)
    // Offset: 0x92DA5C
    void SetMeshAssets(uint64_t fadeTexture, uint64_t meshID, uint64_t materialID, ::GlobalNamespace::ovrAvatarBodyPartType type);
    // private System.Void HandleAssetAvailable(OvrAvatarAsset asset)
    // Offset: 0x92D018
    void HandleAssetAvailable(::GlobalNamespace::OvrAvatarAsset* asset);
    // public System.Void ChangeMaterial(System.UInt64 assetID)
    // Offset: 0x92DCCC
    void ChangeMaterial(uint64_t assetID);
    // private System.Void RequestAsset(System.UInt64 assetID)
    // Offset: 0x92DB18
    void RequestAsset(uint64_t assetID);
    // private System.Void RequestMaterialTextures()
    // Offset: 0x92DC30
    void RequestMaterialTextures();
    // public System.Void SetActive(System.Boolean active)
    // Offset: 0x92DCD4
    void SetActive(bool active);
    // private System.Void UpdateMaterial()
    // Offset: 0x92D21C
    void UpdateMaterial();
    // public System.Void .ctor()
    // Offset: 0x92DD24
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OvrAvatarMeshInstance* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OvrAvatarMeshInstance::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OvrAvatarMeshInstance*, creationType>()));
    }
  }; // OvrAvatarMeshInstance
  #pragma pack(pop)
  static check_size<sizeof(OvrAvatarMeshInstance), 240 + sizeof(::UnityEngine::MeshRenderer*)> __GlobalNamespace_OvrAvatarMeshInstanceSizeCheck;
  static_assert(sizeof(OvrAvatarMeshInstance) == 0xF8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMeshInstance::AssetLoadedCallback
// Il2CppName: AssetLoadedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarMeshInstance::*)(::GlobalNamespace::OvrAvatarAsset*)>(&GlobalNamespace::OvrAvatarMeshInstance::AssetLoadedCallback)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("", "OvrAvatarAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMeshInstance*), "AssetLoadedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMeshInstance::SetMeshAssets
// Il2CppName: SetMeshAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarMeshInstance::*)(uint64_t, uint64_t, uint64_t, ::GlobalNamespace::ovrAvatarBodyPartType)>(&GlobalNamespace::OvrAvatarMeshInstance::SetMeshAssets)> {
  static const MethodInfo* get() {
    static auto* fadeTexture = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* meshID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* materialID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("", "ovrAvatarBodyPartType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMeshInstance*), "SetMeshAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fadeTexture, meshID, materialID, type});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMeshInstance::HandleAssetAvailable
// Il2CppName: HandleAssetAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarMeshInstance::*)(::GlobalNamespace::OvrAvatarAsset*)>(&GlobalNamespace::OvrAvatarMeshInstance::HandleAssetAvailable)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("", "OvrAvatarAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMeshInstance*), "HandleAssetAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMeshInstance::ChangeMaterial
// Il2CppName: ChangeMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarMeshInstance::*)(uint64_t)>(&GlobalNamespace::OvrAvatarMeshInstance::ChangeMaterial)> {
  static const MethodInfo* get() {
    static auto* assetID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMeshInstance*), "ChangeMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMeshInstance::RequestAsset
// Il2CppName: RequestAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarMeshInstance::*)(uint64_t)>(&GlobalNamespace::OvrAvatarMeshInstance::RequestAsset)> {
  static const MethodInfo* get() {
    static auto* assetID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMeshInstance*), "RequestAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMeshInstance::RequestMaterialTextures
// Il2CppName: RequestMaterialTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarMeshInstance::*)()>(&GlobalNamespace::OvrAvatarMeshInstance::RequestMaterialTextures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMeshInstance*), "RequestMaterialTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMeshInstance::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarMeshInstance::*)(bool)>(&GlobalNamespace::OvrAvatarMeshInstance::SetActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMeshInstance*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMeshInstance::UpdateMaterial
// Il2CppName: UpdateMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OvrAvatarMeshInstance::*)()>(&GlobalNamespace::OvrAvatarMeshInstance::UpdateMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OvrAvatarMeshInstance*), "UpdateMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OvrAvatarMeshInstance::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
