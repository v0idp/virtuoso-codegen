// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OculusXRPlugin
  class OculusXRPlugin;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OculusXRPlugin);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OculusXRPlugin*, "", "OculusXRPlugin");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OculusXRPlugin
  // [TokenAttribute] Offset: FFFFFFFF
  class OculusXRPlugin : public ::Il2CppObject {
    public:
    // static public System.Void SetColorScale(System.Single x, System.Single y, System.Single z, System.Single w)
    // Offset: 0x8032D0
    static void SetColorScale(float x, float y, float z, float w);
    // static public System.Void SetColorOffset(System.Single x, System.Single y, System.Single z, System.Single w)
    // Offset: 0x803374
    static void SetColorOffset(float x, float y, float z, float w);
    // static public System.Void SetSpaceWarp(OVRPlugin/Bool on)
    // Offset: 0x803414
    static void SetSpaceWarp(::GlobalNamespace::OVRPlugin::Bool on);
    // static public System.Void SetAppSpacePosition(System.Single x, System.Single y, System.Single z)
    // Offset: 0x803494
    static void SetAppSpacePosition(float x, float y, float z);
    // static public System.Void SetAppSpaceRotation(System.Single x, System.Single y, System.Single z, System.Single w)
    // Offset: 0x803530
    static void SetAppSpaceRotation(float x, float y, float z, float w);
  }; // OculusXRPlugin
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OculusXRPlugin::SetColorScale
// Il2CppName: SetColorScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float, float, float)>(&GlobalNamespace::OculusXRPlugin::SetColorScale)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusXRPlugin*), "SetColorScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z, w});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusXRPlugin::SetColorOffset
// Il2CppName: SetColorOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float, float, float)>(&GlobalNamespace::OculusXRPlugin::SetColorOffset)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusXRPlugin*), "SetColorOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z, w});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusXRPlugin::SetSpaceWarp
// Il2CppName: SetSpaceWarp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRPlugin::Bool)>(&GlobalNamespace::OculusXRPlugin::SetSpaceWarp)> {
  static const MethodInfo* get() {
    static auto* on = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusXRPlugin*), "SetSpaceWarp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{on});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusXRPlugin::SetAppSpacePosition
// Il2CppName: SetAppSpacePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float, float)>(&GlobalNamespace::OculusXRPlugin::SetAppSpacePosition)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusXRPlugin*), "SetAppSpacePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusXRPlugin::SetAppSpaceRotation
// Il2CppName: SetAppSpaceRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float, float, float)>(&GlobalNamespace::OculusXRPlugin::SetAppSpaceRotation)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusXRPlugin*), "SetAppSpaceRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z, w});
  }
};
