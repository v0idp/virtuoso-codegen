// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: FirebaseHelper
#include "GlobalNamespace/FirebaseHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FirebaseHelper::LinkedUser);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FirebaseHelper::LinkedUser*, "", "FirebaseHelper/LinkedUser");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: FirebaseHelper/LinkedUser
  // [TokenAttribute] Offset: FFFFFFFF
  class FirebaseHelper::LinkedUser : public ::Il2CppObject {
    public:
    public:
    // public System.String localId
    // Size: 0x8
    // Offset: 0x10
    ::StringW localId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String email
    // Size: 0x8
    // Offset: 0x18
    ::StringW email;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String displayName
    // Size: 0x8
    // Offset: 0x20
    ::StringW displayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String photoUrl
    // Size: 0x8
    // Offset: 0x28
    ::StringW photoUrl;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String passwordHash
    // Size: 0x8
    // Offset: 0x30
    ::StringW passwordHash;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Collections.Generic.List`1<System.Object> providerUserInfo
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::Il2CppObject*>* providerUserInfo;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Il2CppObject*>*) == 0x8);
    // public System.Boolean emailVerified
    // Size: 0x1
    // Offset: 0x40
    bool emailVerified;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: emailVerified and: idToken
    char __padding6[0x7] = {};
    // public System.String idToken
    // Size: 0x8
    // Offset: 0x48
    ::StringW idToken;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String refreshToken
    // Size: 0x8
    // Offset: 0x50
    ::StringW refreshToken;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String expiresIn
    // Size: 0x8
    // Offset: 0x58
    ::StringW expiresIn;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.String localId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_localId();
    // Get instance field reference: public System.String email
    [[deprecated("Use field access instead!")]] ::StringW& dyn_email();
    // Get instance field reference: public System.String displayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_displayName();
    // Get instance field reference: public System.String photoUrl
    [[deprecated("Use field access instead!")]] ::StringW& dyn_photoUrl();
    // Get instance field reference: public System.String passwordHash
    [[deprecated("Use field access instead!")]] ::StringW& dyn_passwordHash();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Object> providerUserInfo
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Il2CppObject*>*& dyn_providerUserInfo();
    // Get instance field reference: public System.Boolean emailVerified
    [[deprecated("Use field access instead!")]] bool& dyn_emailVerified();
    // Get instance field reference: public System.String idToken
    [[deprecated("Use field access instead!")]] ::StringW& dyn_idToken();
    // Get instance field reference: public System.String refreshToken
    [[deprecated("Use field access instead!")]] ::StringW& dyn_refreshToken();
    // Get instance field reference: public System.String expiresIn
    [[deprecated("Use field access instead!")]] ::StringW& dyn_expiresIn();
    // public System.Void .ctor()
    // Offset: 0x1952868
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FirebaseHelper::LinkedUser* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FirebaseHelper::LinkedUser::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FirebaseHelper::LinkedUser*, creationType>()));
    }
  }; // FirebaseHelper/LinkedUser
  #pragma pack(pop)
  static check_size<sizeof(FirebaseHelper::LinkedUser), 88 + sizeof(::StringW)> __GlobalNamespace_FirebaseHelper_LinkedUserSizeCheck;
  static_assert(sizeof(FirebaseHelper::LinkedUser) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FirebaseHelper::LinkedUser::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
