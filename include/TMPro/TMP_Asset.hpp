// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_Asset
  class TMP_Asset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::TMPro::TMP_Asset);
DEFINE_IL2CPP_ARG_TYPE(::TMPro::TMP_Asset*, "TMPro", "TMP_Asset");
// Type namespace: TMPro
namespace TMPro {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: TMPro.TMP_Asset
  // [TokenAttribute] Offset: FFFFFFFF
  class TMP_Asset : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // private System.Int32 m_InstanceID
    // Size: 0x4
    // Offset: 0x18
    int m_InstanceID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 hashCode
    // Size: 0x4
    // Offset: 0x1C
    int hashCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Material material
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.Int32 materialHashCode
    // Size: 0x4
    // Offset: 0x28
    int materialHashCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Int32 m_InstanceID
    [[deprecated]] int& dyn_m_InstanceID();
    // Get instance field reference: public System.Int32 hashCode
    [[deprecated]] int& dyn_hashCode();
    // Get instance field reference: public UnityEngine.Material material
    [[deprecated]] ::UnityEngine::Material*& dyn_material();
    // Get instance field reference: public System.Int32 materialHashCode
    [[deprecated]] int& dyn_materialHashCode();
    // public System.Int32 get_instanceID()
    // Offset: 0xC2E068
    int get_instanceID();
    // protected System.Void .ctor()
    // Offset: 0xC2E09C
    // Implemented from: UnityEngine.ScriptableObject
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TMP_Asset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_Asset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TMP_Asset*, creationType>()));
    }
  }; // TMPro.TMP_Asset
  #pragma pack(pop)
  static check_size<sizeof(TMP_Asset), 40 + sizeof(int)> __TMPro_TMP_AssetSizeCheck;
  static_assert(sizeof(TMP_Asset) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: TMPro::TMP_Asset::get_instanceID
// Il2CppName: get_instanceID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Asset::*)()>(&TMPro::TMP_Asset::get_instanceID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Asset*), "get_instanceID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Asset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
