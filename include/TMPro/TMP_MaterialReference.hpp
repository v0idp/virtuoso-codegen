// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_MaterialReference
  struct TMP_MaterialReference;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::TMPro::TMP_MaterialReference, "TMPro", "TMP_MaterialReference");
// Type namespace: TMPro
namespace TMPro {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: TMPro.TMP_MaterialReference
  // [TokenAttribute] Offset: FFFFFFFF
  struct TMP_MaterialReference/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Material material
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.Int32 referenceCount
    // Size: 0x4
    // Offset: 0x8
    int referenceCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: TMP_MaterialReference
    constexpr TMP_MaterialReference(::UnityEngine::Material* material_ = {}, int referenceCount_ = {}) noexcept : material{material_}, referenceCount{referenceCount_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Material material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_material();
    // Get instance field reference: public System.Int32 referenceCount
    [[deprecated("Use field access instead!")]] int& dyn_referenceCount();
  }; // TMPro.TMP_MaterialReference
  #pragma pack(pop)
  static check_size<sizeof(TMP_MaterialReference), 8 + sizeof(int)> __TMPro_TMP_MaterialReferenceSizeCheck;
  static_assert(sizeof(TMP_MaterialReference) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
