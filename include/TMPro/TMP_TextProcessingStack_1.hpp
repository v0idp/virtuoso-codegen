// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_TextProcessingStack`1<T>
  template<typename T>
  struct TMP_TextProcessingStack_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::TMPro::TMP_TextProcessingStack_1, "TMPro", "TMP_TextProcessingStack`1");
// Type namespace: TMPro
namespace TMPro {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: TMPro.TMP_TextProcessingStack`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: 6B1F0C
  template<typename T>
  struct TMP_TextProcessingStack_1/*, public ::System::ValueType*/ {
    public:
    public:
    // public T[] itemStack
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> itemStack;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    // public System.Int32 index
    // Size: 0x4
    // Offset: 0x0
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private T m_DefaultItem
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T m_DefaultItem;
    // private System.Int32 m_Capacity
    // Size: 0x4
    // Offset: 0x0
    int m_Capacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_RolloverSize
    // Size: 0x4
    // Offset: 0x0
    int m_RolloverSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_Count
    // Size: 0x4
    // Offset: 0x0
    int m_Count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: TMP_TextProcessingStack_1
    constexpr TMP_TextProcessingStack_1(::ArrayW<T> itemStack_ = ::ArrayW<T>(static_cast<void*>(nullptr)), int index_ = {}, T m_DefaultItem_ = {}, int m_Capacity_ = {}, int m_RolloverSize_ = {}, int m_Count_ = {}) noexcept : itemStack{itemStack_}, index{index_}, m_DefaultItem{m_DefaultItem_}, m_Capacity{m_Capacity_}, m_RolloverSize{m_RolloverSize_}, m_Count{m_Count_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 k_DefaultCapacity
    static int _get_k_DefaultCapacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::_get_k_DefaultCapacity");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TMP_TextProcessingStack_1<T>>::get(), "k_DefaultCapacity"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 k_DefaultCapacity
    static void _set_k_DefaultCapacity(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::_set_k_DefaultCapacity");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TMP_TextProcessingStack_1<T>>::get(), "k_DefaultCapacity", value));
    }
    // Autogenerated instance field getter
    // Get instance field: public T[] itemStack
    [[deprecated]] ::ArrayW<T>& dyn_itemStack() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::dyn_itemStack");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "itemStack"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Int32 index
    [[deprecated]] int& dyn_index() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::dyn_index");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "index"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T m_DefaultItem
    [[deprecated]] T& dyn_m_DefaultItem() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::dyn_m_DefaultItem");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DefaultItem"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 m_Capacity
    [[deprecated]] int& dyn_m_Capacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::dyn_m_Capacity");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Capacity"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 m_RolloverSize
    [[deprecated]] int& dyn_m_RolloverSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::dyn_m_RolloverSize");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_RolloverSize"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 m_Count
    [[deprecated]] int& dyn_m_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::dyn_m_Count");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Count"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::get_Count");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public T get_current()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_current() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::get_current");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Int32 get_rolloverSize()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_rolloverSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::get_rolloverSize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_rolloverSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Void set_rolloverSize(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_rolloverSize(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::set_rolloverSize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_rolloverSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void .ctor(T[] stack)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TMP_TextProcessingStack_1(::ArrayW<T> stack) {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stack)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stack);
    }
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TMP_TextProcessingStack_1(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(capacity)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, capacity);
    }
    // public System.Void .ctor(System.Int32 capacity, System.Int32 rolloverSize)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TMP_TextProcessingStack_1(int capacity, int rolloverSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(capacity), ::il2cpp_utils::ExtractType(rolloverSize)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, capacity, rolloverSize);
    }
    // static System.Void SetDefault(TMPro.TMP_TextProcessingStack`1<T>[] stack, T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void SetDefault(::ArrayW<::TMPro::TMP_TextProcessingStack_1<T>> stack, T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::SetDefault");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TMP_TextProcessingStack_1<T>>::get(), "SetDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stack), ::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, stack, item);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void SetDefault(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetDefault(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::SetDefault");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
    // public System.Void Add(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Add(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
    // public T Remove()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Remove() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::Remove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void Push(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Push(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::Push");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Push", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
    // public T Pop()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Pop() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::Pop");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Pop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public T Peek()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Peek() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::Peek");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Peek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public T CurrentItem()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T CurrentItem() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::CurrentItem");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CurrentItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public T PreviousItem()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T PreviousItem() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextProcessingStack_1::PreviousItem");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "PreviousItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
  }; // TMPro.TMP_TextProcessingStack`1
  // Could not write size check! Type: TMPro.TMP_TextProcessingStack`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
