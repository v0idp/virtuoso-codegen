// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TMPro.TMP_Asset
#include "TMPro/TMP_Asset.hpp"
// Including type: TMPro.AtlasPopulationMode
#include "TMPro/AtlasPopulationMode.hpp"
// Including type: UnityEngine.TextCore.FaceInfo
#include "UnityEngine/TextCore/FaceInfo.hpp"
// Including type: UnityEngine.TextCore.GlyphRect
#include "UnityEngine/TextCore/GlyphRect.hpp"
// Including type: UnityEngine.TextCore.LowLevel.GlyphRenderMode
#include "UnityEngine/TextCore/LowLevel/GlyphRenderMode.hpp"
// Including type: TMPro.FontAssetCreationSettings
#include "TMPro/FontAssetCreationSettings.hpp"
// Including type: TMPro.TMP_FontWeightPair
#include "TMPro/TMP_FontWeightPair.hpp"
// Including type: Unity.Profiling.ProfilerMarker
#include "Unity/Profiling/ProfilerMarker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_Character
  class TMP_Character;
  // Forward declaring type: FaceInfo_Legacy
  class FaceInfo_Legacy;
  // Forward declaring type: TMP_Glyph
  class TMP_Glyph;
  // Forward declaring type: KerningTable
  class KerningTable;
  // Forward declaring type: TMP_FontFeatureTable
  class TMP_FontFeatureTable;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Font
  class Font;
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: UnityEngine::TextCore
namespace UnityEngine::TextCore {
  // Forward declaring type: Glyph
  class Glyph;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_FontAsset
  class TMP_FontAsset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::TMPro::TMP_FontAsset);
DEFINE_IL2CPP_ARG_TYPE(::TMPro::TMP_FontAsset*, "TMPro", "TMP_FontAsset");
// Type namespace: TMPro
namespace TMPro {
  // Size: 0x218
  #pragma pack(push, 1)
  // Autogenerated type: TMPro.TMP_FontAsset
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExcludeFromPresetAttribute] Offset: FFFFFFFF
  class TMP_FontAsset : public ::TMPro::TMP_Asset {
    public:
    // Writing base type padding for base size: 0x2C to desired offset: 0x30
    char ___base_padding[0x4] = {};
    // Nested type: ::TMPro::TMP_FontAsset::$$c
    class $$c;
    public:
    // private System.String m_Version
    // Size: 0x8
    // Offset: 0x30
    ::StringW m_Version;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String m_SourceFontFileGUID
    // Size: 0x8
    // Offset: 0x38
    ::StringW m_SourceFontFileGUID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Font m_SourceFontFile
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Font* m_SourceFontFile;
    // Field size check
    static_assert(sizeof(::UnityEngine::Font*) == 0x8);
    // private TMPro.AtlasPopulationMode m_AtlasPopulationMode
    // Size: 0x4
    // Offset: 0x48
    ::TMPro::AtlasPopulationMode m_AtlasPopulationMode;
    // Field size check
    static_assert(sizeof(::TMPro::AtlasPopulationMode) == 0x4);
    // Padding between fields: m_AtlasPopulationMode and: m_FaceInfo
    char __padding3[0x4] = {};
    // UnityEngine.TextCore.FaceInfo m_FaceInfo
    // Size: 0x5C
    // Offset: 0x50
    ::UnityEngine::TextCore::FaceInfo m_FaceInfo;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::FaceInfo) == 0x5C);
    // Padding between fields: m_FaceInfo and: m_GlyphTable
    char __padding4[0x4] = {};
    // System.Collections.Generic.List`1<UnityEngine.TextCore.Glyph> m_GlyphTable
    // Size: 0x8
    // Offset: 0xB0
    ::System::Collections::Generic::List_1<::UnityEngine::TextCore::Glyph*>* m_GlyphTable;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::TextCore::Glyph*>*) == 0x8);
    // System.Collections.Generic.Dictionary`2<System.UInt32,UnityEngine.TextCore.Glyph> m_GlyphLookupDictionary
    // Size: 0x8
    // Offset: 0xB8
    ::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::TextCore::Glyph*>* m_GlyphLookupDictionary;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::TextCore::Glyph*>*) == 0x8);
    // System.Collections.Generic.List`1<TMPro.TMP_Character> m_CharacterTable
    // Size: 0x8
    // Offset: 0xC0
    ::System::Collections::Generic::List_1<::TMPro::TMP_Character*>* m_CharacterTable;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::TMPro::TMP_Character*>*) == 0x8);
    // System.Collections.Generic.Dictionary`2<System.UInt32,TMPro.TMP_Character> m_CharacterLookupDictionary
    // Size: 0x8
    // Offset: 0xC8
    ::System::Collections::Generic::Dictionary_2<uint, ::TMPro::TMP_Character*>* m_CharacterLookupDictionary;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint, ::TMPro::TMP_Character*>*) == 0x8);
    // UnityEngine.Texture2D m_AtlasTexture
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::Texture2D* m_AtlasTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // UnityEngine.Texture2D[] m_AtlasTextures
    // Size: 0x8
    // Offset: 0xD8
    ::ArrayW<::UnityEngine::Texture2D*> m_AtlasTextures;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Texture2D*>) == 0x8);
    // System.Int32 m_AtlasTextureIndex
    // Size: 0x4
    // Offset: 0xE0
    int m_AtlasTextureIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_IsMultiAtlasTexturesEnabled
    // Size: 0x1
    // Offset: 0xE4
    bool m_IsMultiAtlasTexturesEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ClearDynamicDataOnBuild
    // Size: 0x1
    // Offset: 0xE5
    bool m_ClearDynamicDataOnBuild;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ClearDynamicDataOnBuild and: m_UsedGlyphRects
    char __padding13[0x2] = {};
    // private System.Collections.Generic.List`1<UnityEngine.TextCore.GlyphRect> m_UsedGlyphRects
    // Size: 0x8
    // Offset: 0xE8
    ::System::Collections::Generic::List_1<::UnityEngine::TextCore::GlyphRect>* m_UsedGlyphRects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::TextCore::GlyphRect>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.TextCore.GlyphRect> m_FreeGlyphRects
    // Size: 0x8
    // Offset: 0xF0
    ::System::Collections::Generic::List_1<::UnityEngine::TextCore::GlyphRect>* m_FreeGlyphRects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::TextCore::GlyphRect>*) == 0x8);
    // private TMPro.FaceInfo_Legacy m_fontInfo
    // Size: 0x8
    // Offset: 0xF8
    ::TMPro::FaceInfo_Legacy* m_fontInfo;
    // Field size check
    static_assert(sizeof(::TMPro::FaceInfo_Legacy*) == 0x8);
    // public UnityEngine.Texture2D atlas
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::Texture2D* atlas;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // System.Int32 m_AtlasWidth
    // Size: 0x4
    // Offset: 0x108
    int m_AtlasWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 m_AtlasHeight
    // Size: 0x4
    // Offset: 0x10C
    int m_AtlasHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 m_AtlasPadding
    // Size: 0x4
    // Offset: 0x110
    int m_AtlasPadding;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // UnityEngine.TextCore.LowLevel.GlyphRenderMode m_AtlasRenderMode
    // Size: 0x4
    // Offset: 0x114
    ::UnityEngine::TextCore::LowLevel::GlyphRenderMode m_AtlasRenderMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::LowLevel::GlyphRenderMode) == 0x4);
    // System.Collections.Generic.List`1<TMPro.TMP_Glyph> m_glyphInfoList
    // Size: 0x8
    // Offset: 0x118
    ::System::Collections::Generic::List_1<::TMPro::TMP_Glyph*>* m_glyphInfoList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::TMPro::TMP_Glyph*>*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0x6B249C
    // TMPro.KerningTable m_KerningTable
    // Size: 0x8
    // Offset: 0x120
    ::TMPro::KerningTable* m_KerningTable;
    // Field size check
    static_assert(sizeof(::TMPro::KerningTable*) == 0x8);
    // TMPro.TMP_FontFeatureTable m_FontFeatureTable
    // Size: 0x8
    // Offset: 0x128
    ::TMPro::TMP_FontFeatureTable* m_FontFeatureTable;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_FontFeatureTable*) == 0x8);
    // private System.Collections.Generic.List`1<TMPro.TMP_FontAsset> fallbackFontAssets
    // Size: 0x8
    // Offset: 0x130
    ::System::Collections::Generic::List_1<::TMPro::TMP_FontAsset*>* fallbackFontAssets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::TMPro::TMP_FontAsset*>*) == 0x8);
    // System.Collections.Generic.List`1<TMPro.TMP_FontAsset> m_FallbackFontAssetTable
    // Size: 0x8
    // Offset: 0x138
    ::System::Collections::Generic::List_1<::TMPro::TMP_FontAsset*>* m_FallbackFontAssetTable;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::TMPro::TMP_FontAsset*>*) == 0x8);
    // TMPro.FontAssetCreationSettings m_CreationSettings
    // Size: 0x55
    // Offset: 0x140
    ::TMPro::FontAssetCreationSettings m_CreationSettings;
    // Field size check
    static_assert(sizeof(::TMPro::FontAssetCreationSettings) == 0x55);
    // Padding between fields: m_CreationSettings and: m_FontWeightTable
    char __padding27[0x3] = {};
    // private TMPro.TMP_FontWeightPair[] m_FontWeightTable
    // Size: 0x8
    // Offset: 0x198
    ::ArrayW<::TMPro::TMP_FontWeightPair> m_FontWeightTable;
    // Field size check
    static_assert(sizeof(::ArrayW<::TMPro::TMP_FontWeightPair>) == 0x8);
    // private TMPro.TMP_FontWeightPair[] fontWeights
    // Size: 0x8
    // Offset: 0x1A0
    ::ArrayW<::TMPro::TMP_FontWeightPair> fontWeights;
    // Field size check
    static_assert(sizeof(::ArrayW<::TMPro::TMP_FontWeightPair>) == 0x8);
    // public System.Single normalStyle
    // Size: 0x4
    // Offset: 0x1A8
    float normalStyle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single normalSpacingOffset
    // Size: 0x4
    // Offset: 0x1AC
    float normalSpacingOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single boldStyle
    // Size: 0x4
    // Offset: 0x1B0
    float boldStyle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single boldSpacing
    // Size: 0x4
    // Offset: 0x1B4
    float boldSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Byte italicStyle
    // Size: 0x1
    // Offset: 0x1B8
    uint8_t italicStyle;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte tabSize
    // Size: 0x1
    // Offset: 0x1B9
    uint8_t tabSize;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Boolean IsFontAssetLookupTablesDirty
    // Size: 0x1
    // Offset: 0x1BA
    bool IsFontAssetLookupTablesDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsFontAssetLookupTablesDirty and: FallbackSearchQueryLookup
    char __padding36[0x5] = {};
    // System.Collections.Generic.HashSet`1<System.Int32> FallbackSearchQueryLookup
    // Size: 0x8
    // Offset: 0x1C0
    ::System::Collections::Generic::HashSet_1<int>* FallbackSearchQueryLookup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<int>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.TextCore.Glyph> m_GlyphsToRender
    // Size: 0x8
    // Offset: 0x1C8
    ::System::Collections::Generic::List_1<::UnityEngine::TextCore::Glyph*>* m_GlyphsToRender;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::TextCore::Glyph*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.TextCore.Glyph> m_GlyphsRendered
    // Size: 0x8
    // Offset: 0x1D0
    ::System::Collections::Generic::List_1<::UnityEngine::TextCore::Glyph*>* m_GlyphsRendered;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::TextCore::Glyph*>*) == 0x8);
    // private System.Collections.Generic.List`1<System.UInt32> m_GlyphIndexList
    // Size: 0x8
    // Offset: 0x1D8
    ::System::Collections::Generic::List_1<uint>* m_GlyphIndexList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<uint>*) == 0x8);
    // private System.Collections.Generic.List`1<System.UInt32> m_GlyphIndexListNewlyAdded
    // Size: 0x8
    // Offset: 0x1E0
    ::System::Collections::Generic::List_1<uint>* m_GlyphIndexListNewlyAdded;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<uint>*) == 0x8);
    // System.Collections.Generic.List`1<System.UInt32> m_GlyphsToAdd
    // Size: 0x8
    // Offset: 0x1E8
    ::System::Collections::Generic::List_1<uint>* m_GlyphsToAdd;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<uint>*) == 0x8);
    // System.Collections.Generic.HashSet`1<System.UInt32> m_GlyphsToAddLookup
    // Size: 0x8
    // Offset: 0x1F0
    ::System::Collections::Generic::HashSet_1<uint>* m_GlyphsToAddLookup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<uint>*) == 0x8);
    // System.Collections.Generic.List`1<TMPro.TMP_Character> m_CharactersToAdd
    // Size: 0x8
    // Offset: 0x1F8
    ::System::Collections::Generic::List_1<::TMPro::TMP_Character*>* m_CharactersToAdd;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::TMPro::TMP_Character*>*) == 0x8);
    // System.Collections.Generic.HashSet`1<System.UInt32> m_CharactersToAddLookup
    // Size: 0x8
    // Offset: 0x200
    ::System::Collections::Generic::HashSet_1<uint>* m_CharactersToAddLookup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<uint>*) == 0x8);
    // System.Collections.Generic.List`1<System.UInt32> s_MissingCharacterList
    // Size: 0x8
    // Offset: 0x208
    ::System::Collections::Generic::List_1<uint>* s_MissingCharacterList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<uint>*) == 0x8);
    // System.Collections.Generic.HashSet`1<System.UInt32> m_MissingUnicodesFromFontFile
    // Size: 0x8
    // Offset: 0x210
    ::System::Collections::Generic::HashSet_1<uint>* m_MissingUnicodesFromFontFile;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<uint>*) == 0x8);
    public:
    // Get static field: static private Unity.Profiling.ProfilerMarker k_ReadFontAssetDefinitionMarker
    static ::Unity::Profiling::ProfilerMarker _get_k_ReadFontAssetDefinitionMarker();
    // Set static field: static private Unity.Profiling.ProfilerMarker k_ReadFontAssetDefinitionMarker
    static void _set_k_ReadFontAssetDefinitionMarker(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private Unity.Profiling.ProfilerMarker k_AddSynthesizedCharactersMarker
    static ::Unity::Profiling::ProfilerMarker _get_k_AddSynthesizedCharactersMarker();
    // Set static field: static private Unity.Profiling.ProfilerMarker k_AddSynthesizedCharactersMarker
    static void _set_k_AddSynthesizedCharactersMarker(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private Unity.Profiling.ProfilerMarker k_TryAddCharacterMarker
    static ::Unity::Profiling::ProfilerMarker _get_k_TryAddCharacterMarker();
    // Set static field: static private Unity.Profiling.ProfilerMarker k_TryAddCharacterMarker
    static void _set_k_TryAddCharacterMarker(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private Unity.Profiling.ProfilerMarker k_TryAddCharactersMarker
    static ::Unity::Profiling::ProfilerMarker _get_k_TryAddCharactersMarker();
    // Set static field: static private Unity.Profiling.ProfilerMarker k_TryAddCharactersMarker
    static void _set_k_TryAddCharactersMarker(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private Unity.Profiling.ProfilerMarker k_UpdateGlyphAdjustmentRecordsMarker
    static ::Unity::Profiling::ProfilerMarker _get_k_UpdateGlyphAdjustmentRecordsMarker();
    // Set static field: static private Unity.Profiling.ProfilerMarker k_UpdateGlyphAdjustmentRecordsMarker
    static void _set_k_UpdateGlyphAdjustmentRecordsMarker(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private Unity.Profiling.ProfilerMarker k_ClearFontAssetDataMarker
    static ::Unity::Profiling::ProfilerMarker _get_k_ClearFontAssetDataMarker();
    // Set static field: static private Unity.Profiling.ProfilerMarker k_ClearFontAssetDataMarker
    static void _set_k_ClearFontAssetDataMarker(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private Unity.Profiling.ProfilerMarker k_UpdateFontAssetDataMarker
    static ::Unity::Profiling::ProfilerMarker _get_k_UpdateFontAssetDataMarker();
    // Set static field: static private Unity.Profiling.ProfilerMarker k_UpdateFontAssetDataMarker
    static void _set_k_UpdateFontAssetDataMarker(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private System.String s_DefaultMaterialSuffix
    static ::StringW _get_s_DefaultMaterialSuffix();
    // Set static field: static private System.String s_DefaultMaterialSuffix
    static void _set_s_DefaultMaterialSuffix(::StringW value);
    // Get static field: static private System.Collections.Generic.HashSet`1<System.Int32> k_SearchedFontAssetLookup
    static ::System::Collections::Generic::HashSet_1<int>* _get_k_SearchedFontAssetLookup();
    // Set static field: static private System.Collections.Generic.HashSet`1<System.Int32> k_SearchedFontAssetLookup
    static void _set_k_SearchedFontAssetLookup(::System::Collections::Generic::HashSet_1<int>* value);
    // Get static field: static private System.Collections.Generic.List`1<TMPro.TMP_FontAsset> k_FontAssets_FontFeaturesUpdateQueue
    static ::System::Collections::Generic::List_1<::TMPro::TMP_FontAsset*>* _get_k_FontAssets_FontFeaturesUpdateQueue();
    // Set static field: static private System.Collections.Generic.List`1<TMPro.TMP_FontAsset> k_FontAssets_FontFeaturesUpdateQueue
    static void _set_k_FontAssets_FontFeaturesUpdateQueue(::System::Collections::Generic::List_1<::TMPro::TMP_FontAsset*>* value);
    // Get static field: static private System.Collections.Generic.HashSet`1<System.Int32> k_FontAssets_FontFeaturesUpdateQueueLookup
    static ::System::Collections::Generic::HashSet_1<int>* _get_k_FontAssets_FontFeaturesUpdateQueueLookup();
    // Set static field: static private System.Collections.Generic.HashSet`1<System.Int32> k_FontAssets_FontFeaturesUpdateQueueLookup
    static void _set_k_FontAssets_FontFeaturesUpdateQueueLookup(::System::Collections::Generic::HashSet_1<int>* value);
    // Get static field: static private System.Collections.Generic.List`1<TMPro.TMP_FontAsset> k_FontAssets_AtlasTexturesUpdateQueue
    static ::System::Collections::Generic::List_1<::TMPro::TMP_FontAsset*>* _get_k_FontAssets_AtlasTexturesUpdateQueue();
    // Set static field: static private System.Collections.Generic.List`1<TMPro.TMP_FontAsset> k_FontAssets_AtlasTexturesUpdateQueue
    static void _set_k_FontAssets_AtlasTexturesUpdateQueue(::System::Collections::Generic::List_1<::TMPro::TMP_FontAsset*>* value);
    // Get static field: static private System.Collections.Generic.HashSet`1<System.Int32> k_FontAssets_AtlasTexturesUpdateQueueLookup
    static ::System::Collections::Generic::HashSet_1<int>* _get_k_FontAssets_AtlasTexturesUpdateQueueLookup();
    // Set static field: static private System.Collections.Generic.HashSet`1<System.Int32> k_FontAssets_AtlasTexturesUpdateQueueLookup
    static void _set_k_FontAssets_AtlasTexturesUpdateQueueLookup(::System::Collections::Generic::HashSet_1<int>* value);
    // Get static field: static System.UInt32[] k_GlyphIndexArray
    static ::ArrayW<uint> _get_k_GlyphIndexArray();
    // Set static field: static System.UInt32[] k_GlyphIndexArray
    static void _set_k_GlyphIndexArray(::ArrayW<uint> value);
    // Get instance field reference: private System.String m_Version
    [[deprecated]] ::StringW& dyn_m_Version();
    // Get instance field reference: System.String m_SourceFontFileGUID
    [[deprecated]] ::StringW& dyn_m_SourceFontFileGUID();
    // Get instance field reference: private UnityEngine.Font m_SourceFontFile
    [[deprecated]] ::UnityEngine::Font*& dyn_m_SourceFontFile();
    // Get instance field reference: private TMPro.AtlasPopulationMode m_AtlasPopulationMode
    [[deprecated]] ::TMPro::AtlasPopulationMode& dyn_m_AtlasPopulationMode();
    // Get instance field reference: UnityEngine.TextCore.FaceInfo m_FaceInfo
    [[deprecated]] ::UnityEngine::TextCore::FaceInfo& dyn_m_FaceInfo();
    // Get instance field reference: System.Collections.Generic.List`1<UnityEngine.TextCore.Glyph> m_GlyphTable
    [[deprecated]] ::System::Collections::Generic::List_1<::UnityEngine::TextCore::Glyph*>*& dyn_m_GlyphTable();
    // Get instance field reference: System.Collections.Generic.Dictionary`2<System.UInt32,UnityEngine.TextCore.Glyph> m_GlyphLookupDictionary
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::TextCore::Glyph*>*& dyn_m_GlyphLookupDictionary();
    // Get instance field reference: System.Collections.Generic.List`1<TMPro.TMP_Character> m_CharacterTable
    [[deprecated]] ::System::Collections::Generic::List_1<::TMPro::TMP_Character*>*& dyn_m_CharacterTable();
    // Get instance field reference: System.Collections.Generic.Dictionary`2<System.UInt32,TMPro.TMP_Character> m_CharacterLookupDictionary
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<uint, ::TMPro::TMP_Character*>*& dyn_m_CharacterLookupDictionary();
    // Get instance field reference: UnityEngine.Texture2D m_AtlasTexture
    [[deprecated]] ::UnityEngine::Texture2D*& dyn_m_AtlasTexture();
    // Get instance field reference: UnityEngine.Texture2D[] m_AtlasTextures
    [[deprecated]] ::ArrayW<::UnityEngine::Texture2D*>& dyn_m_AtlasTextures();
    // Get instance field reference: System.Int32 m_AtlasTextureIndex
    [[deprecated]] int& dyn_m_AtlasTextureIndex();
    // Get instance field reference: private System.Boolean m_IsMultiAtlasTexturesEnabled
    [[deprecated]] bool& dyn_m_IsMultiAtlasTexturesEnabled();
    // Get instance field reference: private System.Boolean m_ClearDynamicDataOnBuild
    [[deprecated]] bool& dyn_m_ClearDynamicDataOnBuild();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.TextCore.GlyphRect> m_UsedGlyphRects
    [[deprecated]] ::System::Collections::Generic::List_1<::UnityEngine::TextCore::GlyphRect>*& dyn_m_UsedGlyphRects();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.TextCore.GlyphRect> m_FreeGlyphRects
    [[deprecated]] ::System::Collections::Generic::List_1<::UnityEngine::TextCore::GlyphRect>*& dyn_m_FreeGlyphRects();
    // Get instance field reference: private TMPro.FaceInfo_Legacy m_fontInfo
    [[deprecated]] ::TMPro::FaceInfo_Legacy*& dyn_m_fontInfo();
    // Get instance field reference: public UnityEngine.Texture2D atlas
    [[deprecated]] ::UnityEngine::Texture2D*& dyn_atlas();
    // Get instance field reference: System.Int32 m_AtlasWidth
    [[deprecated]] int& dyn_m_AtlasWidth();
    // Get instance field reference: System.Int32 m_AtlasHeight
    [[deprecated]] int& dyn_m_AtlasHeight();
    // Get instance field reference: System.Int32 m_AtlasPadding
    [[deprecated]] int& dyn_m_AtlasPadding();
    // Get instance field reference: UnityEngine.TextCore.LowLevel.GlyphRenderMode m_AtlasRenderMode
    [[deprecated]] ::UnityEngine::TextCore::LowLevel::GlyphRenderMode& dyn_m_AtlasRenderMode();
    // Get instance field reference: System.Collections.Generic.List`1<TMPro.TMP_Glyph> m_glyphInfoList
    [[deprecated]] ::System::Collections::Generic::List_1<::TMPro::TMP_Glyph*>*& dyn_m_glyphInfoList();
    // Get instance field reference: TMPro.KerningTable m_KerningTable
    [[deprecated]] ::TMPro::KerningTable*& dyn_m_KerningTable();
    // Get instance field reference: TMPro.TMP_FontFeatureTable m_FontFeatureTable
    [[deprecated]] ::TMPro::TMP_FontFeatureTable*& dyn_m_FontFeatureTable();
    // Get instance field reference: private System.Collections.Generic.List`1<TMPro.TMP_FontAsset> fallbackFontAssets
    [[deprecated]] ::System::Collections::Generic::List_1<::TMPro::TMP_FontAsset*>*& dyn_fallbackFontAssets();
    // Get instance field reference: System.Collections.Generic.List`1<TMPro.TMP_FontAsset> m_FallbackFontAssetTable
    [[deprecated]] ::System::Collections::Generic::List_1<::TMPro::TMP_FontAsset*>*& dyn_m_FallbackFontAssetTable();
    // Get instance field reference: TMPro.FontAssetCreationSettings m_CreationSettings
    [[deprecated]] ::TMPro::FontAssetCreationSettings& dyn_m_CreationSettings();
    // Get instance field reference: private TMPro.TMP_FontWeightPair[] m_FontWeightTable
    [[deprecated]] ::ArrayW<::TMPro::TMP_FontWeightPair>& dyn_m_FontWeightTable();
    // Get instance field reference: private TMPro.TMP_FontWeightPair[] fontWeights
    [[deprecated]] ::ArrayW<::TMPro::TMP_FontWeightPair>& dyn_fontWeights();
    // Get instance field reference: public System.Single normalStyle
    [[deprecated]] float& dyn_normalStyle();
    // Get instance field reference: public System.Single normalSpacingOffset
    [[deprecated]] float& dyn_normalSpacingOffset();
    // Get instance field reference: public System.Single boldStyle
    [[deprecated]] float& dyn_boldStyle();
    // Get instance field reference: public System.Single boldSpacing
    [[deprecated]] float& dyn_boldSpacing();
    // Get instance field reference: public System.Byte italicStyle
    [[deprecated]] uint8_t& dyn_italicStyle();
    // Get instance field reference: public System.Byte tabSize
    [[deprecated]] uint8_t& dyn_tabSize();
    // Get instance field reference: System.Boolean IsFontAssetLookupTablesDirty
    [[deprecated]] bool& dyn_IsFontAssetLookupTablesDirty();
    // Get instance field reference: System.Collections.Generic.HashSet`1<System.Int32> FallbackSearchQueryLookup
    [[deprecated]] ::System::Collections::Generic::HashSet_1<int>*& dyn_FallbackSearchQueryLookup();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.TextCore.Glyph> m_GlyphsToRender
    [[deprecated]] ::System::Collections::Generic::List_1<::UnityEngine::TextCore::Glyph*>*& dyn_m_GlyphsToRender();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.TextCore.Glyph> m_GlyphsRendered
    [[deprecated]] ::System::Collections::Generic::List_1<::UnityEngine::TextCore::Glyph*>*& dyn_m_GlyphsRendered();
    // Get instance field reference: private System.Collections.Generic.List`1<System.UInt32> m_GlyphIndexList
    [[deprecated]] ::System::Collections::Generic::List_1<uint>*& dyn_m_GlyphIndexList();
    // Get instance field reference: private System.Collections.Generic.List`1<System.UInt32> m_GlyphIndexListNewlyAdded
    [[deprecated]] ::System::Collections::Generic::List_1<uint>*& dyn_m_GlyphIndexListNewlyAdded();
    // Get instance field reference: System.Collections.Generic.List`1<System.UInt32> m_GlyphsToAdd
    [[deprecated]] ::System::Collections::Generic::List_1<uint>*& dyn_m_GlyphsToAdd();
    // Get instance field reference: System.Collections.Generic.HashSet`1<System.UInt32> m_GlyphsToAddLookup
    [[deprecated]] ::System::Collections::Generic::HashSet_1<uint>*& dyn_m_GlyphsToAddLookup();
    // Get instance field reference: System.Collections.Generic.List`1<TMPro.TMP_Character> m_CharactersToAdd
    [[deprecated]] ::System::Collections::Generic::List_1<::TMPro::TMP_Character*>*& dyn_m_CharactersToAdd();
    // Get instance field reference: System.Collections.Generic.HashSet`1<System.UInt32> m_CharactersToAddLookup
    [[deprecated]] ::System::Collections::Generic::HashSet_1<uint>*& dyn_m_CharactersToAddLookup();
    // Get instance field reference: System.Collections.Generic.List`1<System.UInt32> s_MissingCharacterList
    [[deprecated]] ::System::Collections::Generic::List_1<uint>*& dyn_s_MissingCharacterList();
    // Get instance field reference: System.Collections.Generic.HashSet`1<System.UInt32> m_MissingUnicodesFromFontFile
    [[deprecated]] ::System::Collections::Generic::HashSet_1<uint>*& dyn_m_MissingUnicodesFromFontFile();
    // public System.String get_version()
    // Offset: 0xC33054
    ::StringW get_version();
    // System.Void set_version(System.String value)
    // Offset: 0xC3305C
    void set_version(::StringW value);
    // public UnityEngine.Font get_sourceFontFile()
    // Offset: 0xC33064
    ::UnityEngine::Font* get_sourceFontFile();
    // System.Void set_sourceFontFile(UnityEngine.Font value)
    // Offset: 0xC3306C
    void set_sourceFontFile(::UnityEngine::Font* value);
    // public TMPro.AtlasPopulationMode get_atlasPopulationMode()
    // Offset: 0xC33074
    ::TMPro::AtlasPopulationMode get_atlasPopulationMode();
    // public System.Void set_atlasPopulationMode(TMPro.AtlasPopulationMode value)
    // Offset: 0xC3307C
    void set_atlasPopulationMode(::TMPro::AtlasPopulationMode value);
    // public UnityEngine.TextCore.FaceInfo get_faceInfo()
    // Offset: 0xC33084
    ::UnityEngine::TextCore::FaceInfo get_faceInfo();
    // public System.Void set_faceInfo(UnityEngine.TextCore.FaceInfo value)
    // Offset: 0xC33094
    void set_faceInfo(::UnityEngine::TextCore::FaceInfo value);
    // public System.Collections.Generic.List`1<UnityEngine.TextCore.Glyph> get_glyphTable()
    // Offset: 0xC330B0
    ::System::Collections::Generic::List_1<::UnityEngine::TextCore::Glyph*>* get_glyphTable();
    // System.Void set_glyphTable(System.Collections.Generic.List`1<UnityEngine.TextCore.Glyph> value)
    // Offset: 0xC330B8
    void set_glyphTable(::System::Collections::Generic::List_1<::UnityEngine::TextCore::Glyph*>* value);
    // public System.Collections.Generic.Dictionary`2<System.UInt32,UnityEngine.TextCore.Glyph> get_glyphLookupTable()
    // Offset: 0xC330C0
    ::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::TextCore::Glyph*>* get_glyphLookupTable();
    // public System.Collections.Generic.List`1<TMPro.TMP_Character> get_characterTable()
    // Offset: 0xC33360
    ::System::Collections::Generic::List_1<::TMPro::TMP_Character*>* get_characterTable();
    // System.Void set_characterTable(System.Collections.Generic.List`1<TMPro.TMP_Character> value)
    // Offset: 0xC33368
    void set_characterTable(::System::Collections::Generic::List_1<::TMPro::TMP_Character*>* value);
    // public System.Collections.Generic.Dictionary`2<System.UInt32,TMPro.TMP_Character> get_characterLookupTable()
    // Offset: 0xC33370
    ::System::Collections::Generic::Dictionary_2<uint, ::TMPro::TMP_Character*>* get_characterLookupTable();
    // public UnityEngine.Texture2D get_atlasTexture()
    // Offset: 0xC333A0
    ::UnityEngine::Texture2D* get_atlasTexture();
    // public UnityEngine.Texture2D[] get_atlasTextures()
    // Offset: 0xC33444
    ::ArrayW<::UnityEngine::Texture2D*> get_atlasTextures();
    // public System.Void set_atlasTextures(UnityEngine.Texture2D[] value)
    // Offset: 0xC3344C
    void set_atlasTextures(::ArrayW<::UnityEngine::Texture2D*> value);
    // public System.Int32 get_atlasTextureCount()
    // Offset: 0xC33454
    int get_atlasTextureCount();
    // public System.Boolean get_isMultiAtlasTexturesEnabled()
    // Offset: 0xC33460
    bool get_isMultiAtlasTexturesEnabled();
    // public System.Void set_isMultiAtlasTexturesEnabled(System.Boolean value)
    // Offset: 0xC33468
    void set_isMultiAtlasTexturesEnabled(bool value);
    // System.Boolean get_clearDynamicDataOnBuild()
    // Offset: 0xC33474
    bool get_clearDynamicDataOnBuild();
    // System.Void set_clearDynamicDataOnBuild(System.Boolean value)
    // Offset: 0xC3347C
    void set_clearDynamicDataOnBuild(bool value);
    // System.Collections.Generic.List`1<UnityEngine.TextCore.GlyphRect> get_usedGlyphRects()
    // Offset: 0xC33488
    ::System::Collections::Generic::List_1<::UnityEngine::TextCore::GlyphRect>* get_usedGlyphRects();
    // System.Void set_usedGlyphRects(System.Collections.Generic.List`1<UnityEngine.TextCore.GlyphRect> value)
    // Offset: 0xC33490
    void set_usedGlyphRects(::System::Collections::Generic::List_1<::UnityEngine::TextCore::GlyphRect>* value);
    // System.Collections.Generic.List`1<UnityEngine.TextCore.GlyphRect> get_freeGlyphRects()
    // Offset: 0xC33498
    ::System::Collections::Generic::List_1<::UnityEngine::TextCore::GlyphRect>* get_freeGlyphRects();
    // System.Void set_freeGlyphRects(System.Collections.Generic.List`1<UnityEngine.TextCore.GlyphRect> value)
    // Offset: 0xC334A0
    void set_freeGlyphRects(::System::Collections::Generic::List_1<::UnityEngine::TextCore::GlyphRect>* value);
    // public TMPro.FaceInfo_Legacy get_fontInfo()
    // Offset: 0xC334A8
    ::TMPro::FaceInfo_Legacy* get_fontInfo();
    // public System.Int32 get_atlasWidth()
    // Offset: 0xC334B0
    int get_atlasWidth();
    // System.Void set_atlasWidth(System.Int32 value)
    // Offset: 0xC334B8
    void set_atlasWidth(int value);
    // public System.Int32 get_atlasHeight()
    // Offset: 0xC334C0
    int get_atlasHeight();
    // System.Void set_atlasHeight(System.Int32 value)
    // Offset: 0xC334C8
    void set_atlasHeight(int value);
    // public System.Int32 get_atlasPadding()
    // Offset: 0xC334D0
    int get_atlasPadding();
    // System.Void set_atlasPadding(System.Int32 value)
    // Offset: 0xC334D8
    void set_atlasPadding(int value);
    // public UnityEngine.TextCore.LowLevel.GlyphRenderMode get_atlasRenderMode()
    // Offset: 0xC334E0
    ::UnityEngine::TextCore::LowLevel::GlyphRenderMode get_atlasRenderMode();
    // System.Void set_atlasRenderMode(UnityEngine.TextCore.LowLevel.GlyphRenderMode value)
    // Offset: 0xC334E8
    void set_atlasRenderMode(::UnityEngine::TextCore::LowLevel::GlyphRenderMode value);
    // public TMPro.TMP_FontFeatureTable get_fontFeatureTable()
    // Offset: 0xC334F0
    ::TMPro::TMP_FontFeatureTable* get_fontFeatureTable();
    // System.Void set_fontFeatureTable(TMPro.TMP_FontFeatureTable value)
    // Offset: 0xC334F8
    void set_fontFeatureTable(::TMPro::TMP_FontFeatureTable* value);
    // public System.Collections.Generic.List`1<TMPro.TMP_FontAsset> get_fallbackFontAssetTable()
    // Offset: 0xC33500
    ::System::Collections::Generic::List_1<::TMPro::TMP_FontAsset*>* get_fallbackFontAssetTable();
    // public System.Void set_fallbackFontAssetTable(System.Collections.Generic.List`1<TMPro.TMP_FontAsset> value)
    // Offset: 0xC33508
    void set_fallbackFontAssetTable(::System::Collections::Generic::List_1<::TMPro::TMP_FontAsset*>* value);
    // public TMPro.FontAssetCreationSettings get_creationSettings()
    // Offset: 0xC33510
    ::TMPro::FontAssetCreationSettings get_creationSettings();
    // public System.Void set_creationSettings(TMPro.FontAssetCreationSettings value)
    // Offset: 0xC33520
    void set_creationSettings(::TMPro::FontAssetCreationSettings value);
    // public TMPro.TMP_FontWeightPair[] get_fontWeightTable()
    // Offset: 0xC3353C
    ::ArrayW<::TMPro::TMP_FontWeightPair> get_fontWeightTable();
    // System.Void set_fontWeightTable(TMPro.TMP_FontWeightPair[] value)
    // Offset: 0xC33544
    void set_fontWeightTable(::ArrayW<::TMPro::TMP_FontWeightPair> value);
    // static public TMPro.TMP_FontAsset CreateFontAsset(UnityEngine.Font font)
    // Offset: 0xC3354C
    static ::TMPro::TMP_FontAsset* CreateFontAsset(::UnityEngine::Font* font);
    // static public TMPro.TMP_FontAsset CreateFontAsset(UnityEngine.Font font, System.Int32 samplingPointSize, System.Int32 atlasPadding, UnityEngine.TextCore.LowLevel.GlyphRenderMode renderMode, System.Int32 atlasWidth, System.Int32 atlasHeight, TMPro.AtlasPopulationMode atlasPopulationMode, System.Boolean enableMultiAtlasSupport)
    // Offset: 0xC335D4
    static ::TMPro::TMP_FontAsset* CreateFontAsset(::UnityEngine::Font* font, int samplingPointSize, int atlasPadding, ::UnityEngine::TextCore::LowLevel::GlyphRenderMode renderMode, int atlasWidth, int atlasHeight, ::TMPro::AtlasPopulationMode atlasPopulationMode, bool enableMultiAtlasSupport);
    // private System.Void Awake()
    // Offset: 0xC33AEC
    void Awake();
    // public System.Void ReadFontAssetDefinition()
    // Offset: 0xC330F0
    void ReadFontAssetDefinition();
    // System.Void InitializeDictionaryLookupTables()
    // Offset: 0xC34688
    void InitializeDictionaryLookupTables();
    // System.Void InitializeGlyphLookupDictionary()
    // Offset: 0xC349E4
    void InitializeGlyphLookupDictionary();
    // System.Void InitializeCharacterLookupDictionary()
    // Offset: 0xC34C40
    void InitializeCharacterLookupDictionary();
    // System.Void InitializeGlyphPaidAdjustmentRecordsLookupDictionary()
    // Offset: 0xC34E58
    void InitializeGlyphPaidAdjustmentRecordsLookupDictionary();
    // System.Void AddSynthesizedCharactersAndFaceMetrics()
    // Offset: 0xC346B4
    void AddSynthesizedCharactersAndFaceMetrics();
    // private System.Void AddSynthesizedCharacter(System.UInt32 unicode, System.Boolean isFontFaceLoaded, System.Boolean addImmediately)
    // Offset: 0xC35380
    void AddSynthesizedCharacter(uint unicode, bool isFontFaceLoaded, bool addImmediately);
    // System.Void AddCharacterToLookupCache(System.UInt32 unicode, TMPro.TMP_Character character)
    // Offset: 0xC355BC
    void AddCharacterToLookupCache(uint unicode, ::TMPro::TMP_Character* character);
    // System.Void SortCharacterTable()
    // Offset: 0xC35678
    void SortCharacterTable();
    // System.Void SortGlyphTable()
    // Offset: 0xC357DC
    void SortGlyphTable();
    // System.Void SortFontFeatureTable()
    // Offset: 0xC35940
    void SortFontFeatureTable();
    // System.Void SortAllTables()
    // Offset: 0xC3595C
    void SortAllTables();
    // public System.Boolean HasCharacter(System.Int32 character)
    // Offset: 0xC35994
    bool HasCharacter(int character);
    // public System.Boolean HasCharacter(System.Char character, System.Boolean searchFallbacks, System.Boolean tryAddCharacter)
    // Offset: 0xC35A04
    bool HasCharacter(::Il2CppChar character, bool searchFallbacks, bool tryAddCharacter);
    // private System.Boolean HasCharacter_Internal(System.UInt32 character, System.Boolean searchFallbacks, System.Boolean tryAddCharacter)
    // Offset: 0xC3675C
    bool HasCharacter_Internal(uint character, bool searchFallbacks, bool tryAddCharacter);
    // public System.Boolean HasCharacters(System.String text, out System.Collections.Generic.List`1<System.Char> missingCharacters)
    // Offset: 0xC369A4
    bool HasCharacters(::StringW text, ByRef<::System::Collections::Generic::List_1<::Il2CppChar>*> missingCharacters);
    // public System.Boolean HasCharacters(System.String text, out System.UInt32[] missingCharacters, System.Boolean searchFallbacks, System.Boolean tryAddCharacter)
    // Offset: 0xC36B0C
    bool HasCharacters(::StringW text, ByRef<::ArrayW<uint>> missingCharacters, bool searchFallbacks, bool tryAddCharacter);
    // public System.Boolean HasCharacters(System.String text)
    // Offset: 0xC3714C
    bool HasCharacters(::StringW text);
    // static public System.String GetCharacters(TMPro.TMP_FontAsset fontAsset)
    // Offset: 0xC3720C
    static ::StringW GetCharacters(::TMPro::TMP_FontAsset* fontAsset);
    // static public System.Int32[] GetCharactersArray(TMPro.TMP_FontAsset fontAsset)
    // Offset: 0xC37300
    static ::ArrayW<int> GetCharactersArray(::TMPro::TMP_FontAsset* fontAsset);
    // System.UInt32 GetGlyphIndex(System.UInt32 unicode)
    // Offset: 0xC373FC
    uint GetGlyphIndex(uint unicode);
    // static System.Void RegisterFontAssetForFontFeatureUpdate(TMPro.TMP_FontAsset fontAsset)
    // Offset: 0xC37528
    static void RegisterFontAssetForFontFeatureUpdate(::TMPro::TMP_FontAsset* fontAsset);
    // static System.Void UpdateFontFeaturesForFontAssetsInQueue()
    // Offset: 0xC37638
    static void UpdateFontFeaturesForFontAssetsInQueue();
    // static System.Void RegisterFontAssetForAtlasTextureUpdate(TMPro.TMP_FontAsset fontAsset)
    // Offset: 0xC37AA8
    static void RegisterFontAssetForAtlasTextureUpdate(::TMPro::TMP_FontAsset* fontAsset);
    // static System.Void UpdateAtlasTexturesForFontAssetsInQueue()
    // Offset: 0xC37BB8
    static void UpdateAtlasTexturesForFontAssetsInQueue();
    // public System.Boolean TryAddCharacters(System.UInt32[] unicodes, System.Boolean includeFontFeatures)
    // Offset: 0xC37D3C
    bool TryAddCharacters(::ArrayW<uint> unicodes, bool includeFontFeatures);
    // public System.Boolean TryAddCharacters(System.UInt32[] unicodes, out System.UInt32[] missingUnicodes, System.Boolean includeFontFeatures)
    // Offset: 0xC37D68
    bool TryAddCharacters(::ArrayW<uint> unicodes, ByRef<::ArrayW<uint>> missingUnicodes, bool includeFontFeatures);
    // public System.Boolean TryAddCharacters(System.String characters, System.Boolean includeFontFeatures)
    // Offset: 0xC38A64
    bool TryAddCharacters(::StringW characters, bool includeFontFeatures);
    // public System.Boolean TryAddCharacters(System.String characters, out System.String missingCharacters, System.Boolean includeFontFeatures)
    // Offset: 0xC38A90
    bool TryAddCharacters(::StringW characters, ByRef<::StringW> missingCharacters, bool includeFontFeatures);
    // System.Boolean TryAddCharacterInternal(System.UInt32 unicode, out TMPro.TMP_Character character)
    // Offset: 0xC35F60
    bool TryAddCharacterInternal(uint unicode, ByRef<::TMPro::TMP_Character*> character);
    // System.Boolean TryGetCharacter_and_QueueRenderToTexture(System.UInt32 unicode, out TMPro.TMP_Character character)
    // Offset: 0xC39610
    bool TryGetCharacter_and_QueueRenderToTexture(uint unicode, ByRef<::TMPro::TMP_Character*> character);
    // System.Void TryAddGlyphsToAtlasTextures()
    // Offset: 0xC37D38
    void TryAddGlyphsToAtlasTextures();
    // private System.Boolean TryAddGlyphsToNewAtlasTexture()
    // Offset: 0xC38724
    bool TryAddGlyphsToNewAtlasTexture();
    // private System.Void SetupNewAtlasTexture()
    // Offset: 0xC39404
    void SetupNewAtlasTexture();
    // System.Void UpdateAtlasTexture()
    // Offset: 0xC39A60
    void UpdateAtlasTexture();
    // System.Void UpdateGlyphAdjustmentRecords()
    // Offset: 0xC377BC
    void UpdateGlyphAdjustmentRecords();
    // System.Void UpdateGlyphAdjustmentRecords(System.UInt32[] glyphIndexes)
    // Offset: 0xC39BEC
    void UpdateGlyphAdjustmentRecords(::ArrayW<uint> glyphIndexes);
    // System.Void UpdateGlyphAdjustmentRecords(System.Collections.Generic.List`1<System.UInt32> glyphIndexes)
    // Offset: 0xC39EA8
    void UpdateGlyphAdjustmentRecords(::System::Collections::Generic::List_1<uint>* glyphIndexes);
    // System.Void UpdateGlyphAdjustmentRecords(System.Collections.Generic.List`1<System.UInt32> newGlyphIndexes, System.Collections.Generic.List`1<System.UInt32> allGlyphIndexes)
    // Offset: 0xC39EAC
    void UpdateGlyphAdjustmentRecords(::System::Collections::Generic::List_1<uint>* newGlyphIndexes, ::System::Collections::Generic::List_1<uint>* allGlyphIndexes);
    // private System.Void CopyListDataToArray(System.Collections.Generic.List`1<T> srcList, ref T[] dstArray)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void CopyListDataToArray(::System::Collections::Generic::List_1<T>* srcList, ByRef<::ArrayW<T>> dstArray) {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_FontAsset::CopyListDataToArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyListDataToArray", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(srcList), ::il2cpp_utils::ExtractType(dstArray)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, srcList, byref(dstArray));
    }
    // public System.Void ClearFontAssetData(System.Boolean setAtlasSizeToZero)
    // Offset: 0xC39EB0
    void ClearFontAssetData(bool setAtlasSizeToZero);
    // System.Void ClearFontAssetDataInternal()
    // Offset: 0xC3A438
    void ClearFontAssetDataInternal();
    // System.Void UpdateFontAssetData()
    // Offset: 0xC3A460
    void UpdateFontAssetData();
    // System.Void ClearFontAssetTables()
    // Offset: 0xC39EE4
    void ClearFontAssetTables();
    // System.Void ClearAtlasTextures(System.Boolean setAtlasSizeToZero)
    // Offset: 0xC3A068
    void ClearAtlasTextures(bool setAtlasSizeToZero);
    // System.Void UpgradeFontAsset()
    // Offset: 0xC33B80
    void UpgradeFontAsset();
    // private System.Void UpgradeGlyphAdjustmentTableToFontFeatureTable()
    // Offset: 0xC35020
    void UpgradeGlyphAdjustmentTableToFontFeatureTable();
    // public System.Void .ctor()
    // Offset: 0xC3A594
    // Implemented from: TMPro.TMP_Asset
    // Base method: System.Void TMP_Asset::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TMP_FontAsset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_FontAsset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TMP_FontAsset*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xC3A870
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // TMPro.TMP_FontAsset
  #pragma pack(pop)
  static check_size<sizeof(TMP_FontAsset), 528 + sizeof(::System::Collections::Generic::HashSet_1<uint>*)> __TMPro_TMP_FontAssetSizeCheck;
  static_assert(sizeof(TMP_FontAsset) == 0x218);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_version
// Il2CppName: get_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_version
// Il2CppName: set_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::StringW)>(&TMPro::TMP_FontAsset::set_version)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_sourceFontFile
// Il2CppName: get_sourceFontFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Font* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_sourceFontFile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_sourceFontFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_sourceFontFile
// Il2CppName: set_sourceFontFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::UnityEngine::Font*)>(&TMPro::TMP_FontAsset::set_sourceFontFile)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Font")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_sourceFontFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_atlasPopulationMode
// Il2CppName: get_atlasPopulationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::AtlasPopulationMode (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_atlasPopulationMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_atlasPopulationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_atlasPopulationMode
// Il2CppName: set_atlasPopulationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::TMPro::AtlasPopulationMode)>(&TMPro::TMP_FontAsset::set_atlasPopulationMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "AtlasPopulationMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_atlasPopulationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_faceInfo
// Il2CppName: get_faceInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TextCore::FaceInfo (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_faceInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_faceInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_faceInfo
// Il2CppName: set_faceInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::UnityEngine::TextCore::FaceInfo)>(&TMPro::TMP_FontAsset::set_faceInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore", "FaceInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_faceInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_glyphTable
// Il2CppName: get_glyphTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::TextCore::Glyph*>* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_glyphTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_glyphTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_glyphTable
// Il2CppName: set_glyphTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::System::Collections::Generic::List_1<::UnityEngine::TextCore::Glyph*>*)>(&TMPro::TMP_FontAsset::set_glyphTable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.TextCore", "Glyph")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_glyphTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_glyphLookupTable
// Il2CppName: get_glyphLookupTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::TextCore::Glyph*>* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_glyphLookupTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_glyphLookupTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_characterTable
// Il2CppName: get_characterTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::TMPro::TMP_Character*>* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_characterTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_characterTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_characterTable
// Il2CppName: set_characterTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::System::Collections::Generic::List_1<::TMPro::TMP_Character*>*)>(&TMPro::TMP_FontAsset::set_characterTable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("TMPro", "TMP_Character")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_characterTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_characterLookupTable
// Il2CppName: get_characterLookupTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<uint, ::TMPro::TMP_Character*>* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_characterLookupTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_characterLookupTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_atlasTexture
// Il2CppName: get_atlasTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_atlasTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_atlasTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_atlasTextures
// Il2CppName: get_atlasTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Texture2D*> (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_atlasTextures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_atlasTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_atlasTextures
// Il2CppName: set_atlasTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::ArrayW<::UnityEngine::Texture2D*>)>(&TMPro::TMP_FontAsset::set_atlasTextures)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_atlasTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_atlasTextureCount
// Il2CppName: get_atlasTextureCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_atlasTextureCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_atlasTextureCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_isMultiAtlasTexturesEnabled
// Il2CppName: get_isMultiAtlasTexturesEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_isMultiAtlasTexturesEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_isMultiAtlasTexturesEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_isMultiAtlasTexturesEnabled
// Il2CppName: set_isMultiAtlasTexturesEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(bool)>(&TMPro::TMP_FontAsset::set_isMultiAtlasTexturesEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_isMultiAtlasTexturesEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_clearDynamicDataOnBuild
// Il2CppName: get_clearDynamicDataOnBuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_clearDynamicDataOnBuild)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_clearDynamicDataOnBuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_clearDynamicDataOnBuild
// Il2CppName: set_clearDynamicDataOnBuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(bool)>(&TMPro::TMP_FontAsset::set_clearDynamicDataOnBuild)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_clearDynamicDataOnBuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_usedGlyphRects
// Il2CppName: get_usedGlyphRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::TextCore::GlyphRect>* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_usedGlyphRects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_usedGlyphRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_usedGlyphRects
// Il2CppName: set_usedGlyphRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::System::Collections::Generic::List_1<::UnityEngine::TextCore::GlyphRect>*)>(&TMPro::TMP_FontAsset::set_usedGlyphRects)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.TextCore", "GlyphRect")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_usedGlyphRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_freeGlyphRects
// Il2CppName: get_freeGlyphRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::TextCore::GlyphRect>* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_freeGlyphRects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_freeGlyphRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_freeGlyphRects
// Il2CppName: set_freeGlyphRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::System::Collections::Generic::List_1<::UnityEngine::TextCore::GlyphRect>*)>(&TMPro::TMP_FontAsset::set_freeGlyphRects)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.TextCore", "GlyphRect")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_freeGlyphRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_fontInfo
// Il2CppName: get_fontInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::FaceInfo_Legacy* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_fontInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_fontInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_atlasWidth
// Il2CppName: get_atlasWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_atlasWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_atlasWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_atlasWidth
// Il2CppName: set_atlasWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(int)>(&TMPro::TMP_FontAsset::set_atlasWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_atlasWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_atlasHeight
// Il2CppName: get_atlasHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_atlasHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_atlasHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_atlasHeight
// Il2CppName: set_atlasHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(int)>(&TMPro::TMP_FontAsset::set_atlasHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_atlasHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_atlasPadding
// Il2CppName: get_atlasPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_atlasPadding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_atlasPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_atlasPadding
// Il2CppName: set_atlasPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(int)>(&TMPro::TMP_FontAsset::set_atlasPadding)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_atlasPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_atlasRenderMode
// Il2CppName: get_atlasRenderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TextCore::LowLevel::GlyphRenderMode (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_atlasRenderMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_atlasRenderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_atlasRenderMode
// Il2CppName: set_atlasRenderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::UnityEngine::TextCore::LowLevel::GlyphRenderMode)>(&TMPro::TMP_FontAsset::set_atlasRenderMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.LowLevel", "GlyphRenderMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_atlasRenderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_fontFeatureTable
// Il2CppName: get_fontFeatureTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_FontFeatureTable* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_fontFeatureTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_fontFeatureTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_fontFeatureTable
// Il2CppName: set_fontFeatureTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::TMPro::TMP_FontFeatureTable*)>(&TMPro::TMP_FontAsset::set_fontFeatureTable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_FontFeatureTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_fontFeatureTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_fallbackFontAssetTable
// Il2CppName: get_fallbackFontAssetTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::TMPro::TMP_FontAsset*>* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_fallbackFontAssetTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_fallbackFontAssetTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_fallbackFontAssetTable
// Il2CppName: set_fallbackFontAssetTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::System::Collections::Generic::List_1<::TMPro::TMP_FontAsset*>*)>(&TMPro::TMP_FontAsset::set_fallbackFontAssetTable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("TMPro", "TMP_FontAsset")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_fallbackFontAssetTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_creationSettings
// Il2CppName: get_creationSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::FontAssetCreationSettings (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_creationSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_creationSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_creationSettings
// Il2CppName: set_creationSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::TMPro::FontAssetCreationSettings)>(&TMPro::TMP_FontAsset::set_creationSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "FontAssetCreationSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_creationSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_fontWeightTable
// Il2CppName: get_fontWeightTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::TMPro::TMP_FontWeightPair> (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_fontWeightTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_fontWeightTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_fontWeightTable
// Il2CppName: set_fontWeightTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::ArrayW<::TMPro::TMP_FontWeightPair>)>(&TMPro::TMP_FontAsset::set_fontWeightTable)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("TMPro", "TMP_FontWeightPair"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_fontWeightTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::CreateFontAsset
// Il2CppName: CreateFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_FontAsset* (*)(::UnityEngine::Font*)>(&TMPro::TMP_FontAsset::CreateFontAsset)> {
  static const MethodInfo* get() {
    static auto* font = &::il2cpp_utils::GetClassFromName("UnityEngine", "Font")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "CreateFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{font});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::CreateFontAsset
// Il2CppName: CreateFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_FontAsset* (*)(::UnityEngine::Font*, int, int, ::UnityEngine::TextCore::LowLevel::GlyphRenderMode, int, int, ::TMPro::AtlasPopulationMode, bool)>(&TMPro::TMP_FontAsset::CreateFontAsset)> {
  static const MethodInfo* get() {
    static auto* font = &::il2cpp_utils::GetClassFromName("UnityEngine", "Font")->byval_arg;
    static auto* samplingPointSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* atlasPadding = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* renderMode = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.LowLevel", "GlyphRenderMode")->byval_arg;
    static auto* atlasWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* atlasHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* atlasPopulationMode = &::il2cpp_utils::GetClassFromName("TMPro", "AtlasPopulationMode")->byval_arg;
    static auto* enableMultiAtlasSupport = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "CreateFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{font, samplingPointSize, atlasPadding, renderMode, atlasWidth, atlasHeight, atlasPopulationMode, enableMultiAtlasSupport});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::ReadFontAssetDefinition
// Il2CppName: ReadFontAssetDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::ReadFontAssetDefinition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "ReadFontAssetDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::InitializeDictionaryLookupTables
// Il2CppName: InitializeDictionaryLookupTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::InitializeDictionaryLookupTables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "InitializeDictionaryLookupTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::InitializeGlyphLookupDictionary
// Il2CppName: InitializeGlyphLookupDictionary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::InitializeGlyphLookupDictionary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "InitializeGlyphLookupDictionary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::InitializeCharacterLookupDictionary
// Il2CppName: InitializeCharacterLookupDictionary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::InitializeCharacterLookupDictionary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "InitializeCharacterLookupDictionary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::InitializeGlyphPaidAdjustmentRecordsLookupDictionary
// Il2CppName: InitializeGlyphPaidAdjustmentRecordsLookupDictionary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::InitializeGlyphPaidAdjustmentRecordsLookupDictionary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "InitializeGlyphPaidAdjustmentRecordsLookupDictionary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::AddSynthesizedCharactersAndFaceMetrics
// Il2CppName: AddSynthesizedCharactersAndFaceMetrics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::AddSynthesizedCharactersAndFaceMetrics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "AddSynthesizedCharactersAndFaceMetrics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::AddSynthesizedCharacter
// Il2CppName: AddSynthesizedCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(uint, bool, bool)>(&TMPro::TMP_FontAsset::AddSynthesizedCharacter)> {
  static const MethodInfo* get() {
    static auto* unicode = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* isFontFaceLoaded = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* addImmediately = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "AddSynthesizedCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unicode, isFontFaceLoaded, addImmediately});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::AddCharacterToLookupCache
// Il2CppName: AddCharacterToLookupCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(uint, ::TMPro::TMP_Character*)>(&TMPro::TMP_FontAsset::AddCharacterToLookupCache)> {
  static const MethodInfo* get() {
    static auto* unicode = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* character = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_Character")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "AddCharacterToLookupCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unicode, character});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::SortCharacterTable
// Il2CppName: SortCharacterTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::SortCharacterTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "SortCharacterTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::SortGlyphTable
// Il2CppName: SortGlyphTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::SortGlyphTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "SortGlyphTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::SortFontFeatureTable
// Il2CppName: SortFontFeatureTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::SortFontFeatureTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "SortFontFeatureTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::SortAllTables
// Il2CppName: SortAllTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::SortAllTables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "SortAllTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::HasCharacter
// Il2CppName: HasCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(int)>(&TMPro::TMP_FontAsset::HasCharacter)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "HasCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::HasCharacter
// Il2CppName: HasCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(::Il2CppChar, bool, bool)>(&TMPro::TMP_FontAsset::HasCharacter)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* searchFallbacks = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tryAddCharacter = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "HasCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character, searchFallbacks, tryAddCharacter});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::HasCharacter_Internal
// Il2CppName: HasCharacter_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(uint, bool, bool)>(&TMPro::TMP_FontAsset::HasCharacter_Internal)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* searchFallbacks = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tryAddCharacter = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "HasCharacter_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character, searchFallbacks, tryAddCharacter});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::HasCharacters
// Il2CppName: HasCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(::StringW, ByRef<::System::Collections::Generic::List_1<::Il2CppChar>*>)>(&TMPro::TMP_FontAsset::HasCharacters)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* missingCharacters = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "HasCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, missingCharacters});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::HasCharacters
// Il2CppName: HasCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(::StringW, ByRef<::ArrayW<uint>>, bool, bool)>(&TMPro::TMP_FontAsset::HasCharacters)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* missingCharacters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->this_arg;
    static auto* searchFallbacks = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tryAddCharacter = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "HasCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, missingCharacters, searchFallbacks, tryAddCharacter});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::HasCharacters
// Il2CppName: HasCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(::StringW)>(&TMPro::TMP_FontAsset::HasCharacters)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "HasCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::GetCharacters
// Il2CppName: GetCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::TMPro::TMP_FontAsset*)>(&TMPro::TMP_FontAsset::GetCharacters)> {
  static const MethodInfo* get() {
    static auto* fontAsset = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_FontAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "GetCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fontAsset});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::GetCharactersArray
// Il2CppName: GetCharactersArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (*)(::TMPro::TMP_FontAsset*)>(&TMPro::TMP_FontAsset::GetCharactersArray)> {
  static const MethodInfo* get() {
    static auto* fontAsset = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_FontAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "GetCharactersArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fontAsset});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::GetGlyphIndex
// Il2CppName: GetGlyphIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (TMPro::TMP_FontAsset::*)(uint)>(&TMPro::TMP_FontAsset::GetGlyphIndex)> {
  static const MethodInfo* get() {
    static auto* unicode = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "GetGlyphIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unicode});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::RegisterFontAssetForFontFeatureUpdate
// Il2CppName: RegisterFontAssetForFontFeatureUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::TMPro::TMP_FontAsset*)>(&TMPro::TMP_FontAsset::RegisterFontAssetForFontFeatureUpdate)> {
  static const MethodInfo* get() {
    static auto* fontAsset = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_FontAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "RegisterFontAssetForFontFeatureUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fontAsset});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::UpdateFontFeaturesForFontAssetsInQueue
// Il2CppName: UpdateFontFeaturesForFontAssetsInQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMPro::TMP_FontAsset::UpdateFontFeaturesForFontAssetsInQueue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "UpdateFontFeaturesForFontAssetsInQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::RegisterFontAssetForAtlasTextureUpdate
// Il2CppName: RegisterFontAssetForAtlasTextureUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::TMPro::TMP_FontAsset*)>(&TMPro::TMP_FontAsset::RegisterFontAssetForAtlasTextureUpdate)> {
  static const MethodInfo* get() {
    static auto* fontAsset = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_FontAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "RegisterFontAssetForAtlasTextureUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fontAsset});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::UpdateAtlasTexturesForFontAssetsInQueue
// Il2CppName: UpdateAtlasTexturesForFontAssetsInQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMPro::TMP_FontAsset::UpdateAtlasTexturesForFontAssetsInQueue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "UpdateAtlasTexturesForFontAssetsInQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::TryAddCharacters
// Il2CppName: TryAddCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(::ArrayW<uint>, bool)>(&TMPro::TMP_FontAsset::TryAddCharacters)> {
  static const MethodInfo* get() {
    static auto* unicodes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* includeFontFeatures = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "TryAddCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unicodes, includeFontFeatures});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::TryAddCharacters
// Il2CppName: TryAddCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(::ArrayW<uint>, ByRef<::ArrayW<uint>>, bool)>(&TMPro::TMP_FontAsset::TryAddCharacters)> {
  static const MethodInfo* get() {
    static auto* unicodes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* missingUnicodes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->this_arg;
    static auto* includeFontFeatures = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "TryAddCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unicodes, missingUnicodes, includeFontFeatures});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::TryAddCharacters
// Il2CppName: TryAddCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(::StringW, bool)>(&TMPro::TMP_FontAsset::TryAddCharacters)> {
  static const MethodInfo* get() {
    static auto* characters = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* includeFontFeatures = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "TryAddCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{characters, includeFontFeatures});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::TryAddCharacters
// Il2CppName: TryAddCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(::StringW, ByRef<::StringW>, bool)>(&TMPro::TMP_FontAsset::TryAddCharacters)> {
  static const MethodInfo* get() {
    static auto* characters = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* missingCharacters = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* includeFontFeatures = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "TryAddCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{characters, missingCharacters, includeFontFeatures});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::TryAddCharacterInternal
// Il2CppName: TryAddCharacterInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(uint, ByRef<::TMPro::TMP_Character*>)>(&TMPro::TMP_FontAsset::TryAddCharacterInternal)> {
  static const MethodInfo* get() {
    static auto* unicode = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* character = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_Character")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "TryAddCharacterInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unicode, character});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::TryGetCharacter_and_QueueRenderToTexture
// Il2CppName: TryGetCharacter_and_QueueRenderToTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(uint, ByRef<::TMPro::TMP_Character*>)>(&TMPro::TMP_FontAsset::TryGetCharacter_and_QueueRenderToTexture)> {
  static const MethodInfo* get() {
    static auto* unicode = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* character = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_Character")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "TryGetCharacter_and_QueueRenderToTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unicode, character});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::TryAddGlyphsToAtlasTextures
// Il2CppName: TryAddGlyphsToAtlasTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::TryAddGlyphsToAtlasTextures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "TryAddGlyphsToAtlasTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::TryAddGlyphsToNewAtlasTexture
// Il2CppName: TryAddGlyphsToNewAtlasTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::TryAddGlyphsToNewAtlasTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "TryAddGlyphsToNewAtlasTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::SetupNewAtlasTexture
// Il2CppName: SetupNewAtlasTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::SetupNewAtlasTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "SetupNewAtlasTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::UpdateAtlasTexture
// Il2CppName: UpdateAtlasTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::UpdateAtlasTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "UpdateAtlasTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::UpdateGlyphAdjustmentRecords
// Il2CppName: UpdateGlyphAdjustmentRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::UpdateGlyphAdjustmentRecords)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "UpdateGlyphAdjustmentRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::UpdateGlyphAdjustmentRecords
// Il2CppName: UpdateGlyphAdjustmentRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::ArrayW<uint>)>(&TMPro::TMP_FontAsset::UpdateGlyphAdjustmentRecords)> {
  static const MethodInfo* get() {
    static auto* glyphIndexes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "UpdateGlyphAdjustmentRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glyphIndexes});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::UpdateGlyphAdjustmentRecords
// Il2CppName: UpdateGlyphAdjustmentRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::System::Collections::Generic::List_1<uint>*)>(&TMPro::TMP_FontAsset::UpdateGlyphAdjustmentRecords)> {
  static const MethodInfo* get() {
    static auto* glyphIndexes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "UpdateGlyphAdjustmentRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glyphIndexes});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::UpdateGlyphAdjustmentRecords
// Il2CppName: UpdateGlyphAdjustmentRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::System::Collections::Generic::List_1<uint>*, ::System::Collections::Generic::List_1<uint>*)>(&TMPro::TMP_FontAsset::UpdateGlyphAdjustmentRecords)> {
  static const MethodInfo* get() {
    static auto* newGlyphIndexes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt32")})->byval_arg;
    static auto* allGlyphIndexes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "UpdateGlyphAdjustmentRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newGlyphIndexes, allGlyphIndexes});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::CopyListDataToArray
// Il2CppName: CopyListDataToArray
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::ClearFontAssetData
// Il2CppName: ClearFontAssetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(bool)>(&TMPro::TMP_FontAsset::ClearFontAssetData)> {
  static const MethodInfo* get() {
    static auto* setAtlasSizeToZero = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "ClearFontAssetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{setAtlasSizeToZero});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::ClearFontAssetDataInternal
// Il2CppName: ClearFontAssetDataInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::ClearFontAssetDataInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "ClearFontAssetDataInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::UpdateFontAssetData
// Il2CppName: UpdateFontAssetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::UpdateFontAssetData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "UpdateFontAssetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::ClearFontAssetTables
// Il2CppName: ClearFontAssetTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::ClearFontAssetTables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "ClearFontAssetTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::ClearAtlasTextures
// Il2CppName: ClearAtlasTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(bool)>(&TMPro::TMP_FontAsset::ClearAtlasTextures)> {
  static const MethodInfo* get() {
    static auto* setAtlasSizeToZero = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "ClearAtlasTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{setAtlasSizeToZero});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::UpgradeFontAsset
// Il2CppName: UpgradeFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::UpgradeFontAsset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "UpgradeFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::UpgradeGlyphAdjustmentTableToFontFeatureTable
// Il2CppName: UpgradeGlyphAdjustmentTableToFontFeatureTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::UpgradeGlyphAdjustmentTableToFontFeatureTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "UpgradeGlyphAdjustmentTableToFontFeatureTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMPro::TMP_FontAsset::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
