// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ComponentModel.PropertyDescriptor
#include "System/ComponentModel/PropertyDescriptor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Linq
namespace System::Xml::Linq {
  // Forward declaring type: XObject
  class XObject;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: MS.Internal.Xml.Linq.ComponentModel
namespace MS::Internal::Xml::Linq::ComponentModel {
  // Forward declaring type: XPropertyDescriptor`2<T, TProperty>
  template<typename T, typename TProperty>
  class XPropertyDescriptor_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::MS::Internal::Xml::Linq::ComponentModel::XPropertyDescriptor_2, "MS.Internal.Xml.Linq.ComponentModel", "XPropertyDescriptor`2");
// Type namespace: MS.Internal.Xml.Linq.ComponentModel
namespace MS::Internal::Xml::Linq::ComponentModel {
  // WARNING Size may be invalid!
  // Autogenerated type: MS.Internal.Xml.Linq.ComponentModel.XPropertyDescriptor`2
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T, typename TProperty>
  class XPropertyDescriptor_2 : public ::System::ComponentModel::PropertyDescriptor {
    public:
    // public System.Void .ctor(System.String name)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XPropertyDescriptor_2<T, TProperty>* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::MS::Internal::Xml::Linq::ComponentModel::XPropertyDescriptor_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XPropertyDescriptor_2<T, TProperty>*, creationType>(name)));
    }
    // public override System.Type get_ComponentType()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ComponentModel.PropertyDescriptor
    // Base method: System.Type PropertyDescriptor::get_ComponentType()
    ::System::Type* get_ComponentType() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MS::Internal::Xml::Linq::ComponentModel::XPropertyDescriptor_2::get_ComponentType");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::ComponentModel::PropertyDescriptor*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
    }
    // public override System.Boolean get_IsReadOnly()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ComponentModel.PropertyDescriptor
    // Base method: System.Boolean PropertyDescriptor::get_IsReadOnly()
    bool get_IsReadOnly() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MS::Internal::Xml::Linq::ComponentModel::XPropertyDescriptor_2::get_IsReadOnly");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::ComponentModel::PropertyDescriptor*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public override System.Type get_PropertyType()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ComponentModel.PropertyDescriptor
    // Base method: System.Type PropertyDescriptor::get_PropertyType()
    ::System::Type* get_PropertyType() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MS::Internal::Xml::Linq::ComponentModel::XPropertyDescriptor_2::get_PropertyType");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::ComponentModel::PropertyDescriptor*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
    }
    // public override System.Void SetValue(System.Object component, System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ComponentModel.PropertyDescriptor
    // Base method: System.Void PropertyDescriptor::SetValue(System.Object component, System.Object value)
    void SetValue(::Il2CppObject* component, ::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::MS::Internal::Xml::Linq::ComponentModel::XPropertyDescriptor_2::SetValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::ComponentModel::PropertyDescriptor*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, component, value);
    }
    // public override System.Boolean ShouldSerializeValue(System.Object component)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ComponentModel.PropertyDescriptor
    // Base method: System.Boolean PropertyDescriptor::ShouldSerializeValue(System.Object component)
    bool ShouldSerializeValue(::Il2CppObject* component) {
      static auto ___internal__logger = ::Logger::get().WithContext("::MS::Internal::Xml::Linq::ComponentModel::XPropertyDescriptor_2::ShouldSerializeValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::ComponentModel::PropertyDescriptor*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, component);
    }
  }; // MS.Internal.Xml.Linq.ComponentModel.XPropertyDescriptor`2
  // Could not write size check! Type: MS.Internal.Xml.Linq.ComponentModel.XPropertyDescriptor`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
