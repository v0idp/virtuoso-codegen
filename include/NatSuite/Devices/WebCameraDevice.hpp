// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: NatSuite.Devices.ICameraDevice
#include "NatSuite/Devices/ICameraDevice.hpp"
// Including type: UnityEngine.WebCamDevice
#include "UnityEngine/WebCamDevice.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: NatSuite::Devices
namespace NatSuite::Devices {
  // Skipping declaration: IMediaDevice because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: WebCamTexture
  class WebCamTexture;
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Completed forward declares
// Type namespace: NatSuite.Devices
namespace NatSuite::Devices {
  // Forward declaring type: WebCameraDevice
  class WebCameraDevice;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::NatSuite::Devices::WebCameraDevice);
DEFINE_IL2CPP_ARG_TYPE(::NatSuite::Devices::WebCameraDevice*, "NatSuite.Devices", "WebCameraDevice");
// Type namespace: NatSuite.Devices
namespace NatSuite::Devices {
  // WARNING Size may be invalid!
  // Autogenerated type: NatSuite.Devices.WebCameraDevice
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocAttribute] Offset: 781C38
  class WebCameraDevice : public ::Il2CppObject/*, public ::NatSuite::Devices::ICameraDevice*/ {
    public:
    // Nested type: ::NatSuite::Devices::WebCameraDevice::WebCameraDeviceAttachment
    class WebCameraDeviceAttachment;
    // Nested type: ::NatSuite::Devices::WebCameraDevice::$$c__DisplayClass15_0
    class $$c__DisplayClass15_0;
    public:
    // [DocAttribute] Offset: 0x78EA68
    // public readonly UnityEngine.WebCamDevice device
    // Size: 0x20
    // Offset: 0x10
    ::UnityEngine::WebCamDevice device;
    // Field size check
    static_assert(sizeof(::UnityEngine::WebCamDevice) == 0x20);
    // [TupleElementNamesAttribute] Offset: 0x78EAA0
    // private System.ValueTuple`2<System.Int32,System.Int32> <previewResolution>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x30
    ::System::ValueTuple_2<int, int> previewResolution;
    // private System.Int32 <frameRate>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    int frameRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.WebCamTexture webCamTexture
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::WebCamTexture* webCamTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::WebCamTexture*) == 0x8);
    // private UnityEngine.Texture2D previewTexture
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Texture2D* previewTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private UnityEngine.Color32[] pixelBuffer
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::Color32> pixelBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color32>) == 0x8);
    // private NatSuite.Devices.WebCameraDevice/NatSuite.Devices.WebCameraDeviceAttachment attachment
    // Size: 0x8
    // Offset: 0x58
    ::NatSuite::Devices::WebCameraDevice::WebCameraDeviceAttachment* attachment;
    // Field size check
    static_assert(sizeof(::NatSuite::Devices::WebCameraDevice::WebCameraDeviceAttachment*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::NatSuite::Devices::ICameraDevice
    operator ::NatSuite::Devices::ICameraDevice() noexcept {
      return *reinterpret_cast<::NatSuite::Devices::ICameraDevice*>(this);
    }
    // Get instance field reference: public readonly UnityEngine.WebCamDevice device
    [[deprecated("Use field access instead!")]] ::UnityEngine::WebCamDevice& dyn_device();
    // Get instance field reference: private System.ValueTuple`2<System.Int32,System.Int32> <previewResolution>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::ValueTuple_2<int, int>& dyn_$previewResolution$k__BackingField();
    // Get instance field reference: private System.Int32 <frameRate>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$frameRate$k__BackingField();
    // Get instance field reference: private UnityEngine.WebCamTexture webCamTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::WebCamTexture*& dyn_webCamTexture();
    // Get instance field reference: private UnityEngine.Texture2D previewTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_previewTexture();
    // Get instance field reference: private UnityEngine.Color32[] pixelBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color32>& dyn_pixelBuffer();
    // Get instance field reference: private NatSuite.Devices.WebCameraDevice/NatSuite.Devices.WebCameraDeviceAttachment attachment
    [[deprecated("Use field access instead!")]] ::NatSuite::Devices::WebCameraDevice::WebCameraDeviceAttachment*& dyn_attachment();
    // public System.String get_uniqueID()
    // Offset: 0x950B30
    ::StringW get_uniqueID();
    // public System.Boolean get_frontFacing()
    // Offset: 0x950B5C
    bool get_frontFacing();
    // public System.ValueTuple`2<System.Int32,System.Int32> get_previewResolution()
    // Offset: 0x950B8C
    ::System::ValueTuple_2<int, int> get_previewResolution();
    // public System.Void set_previewResolution(System.ValueTuple`2<System.Int32,System.Int32> value)
    // Offset: 0x950B94
    void set_previewResolution(::System::ValueTuple_2<int, int> value);
    // public System.Int32 get_frameRate()
    // Offset: 0x950B9C
    int get_frameRate();
    // public System.Void set_frameRate(System.Int32 value)
    // Offset: 0x950BA4
    void set_frameRate(int value);
    // public System.Boolean get_running()
    // Offset: 0x950BAC
    bool get_running();
    // public System.Void .ctor(UnityEngine.WebCamDevice device)
    // Offset: 0x950E84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebCameraDevice* New_ctor(::UnityEngine::WebCamDevice device) {
      static auto ___internal__logger = ::Logger::get().WithContext("::NatSuite::Devices::WebCameraDevice::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebCameraDevice*, creationType>(device)));
    }
    // public System.Threading.Tasks.Task`1<UnityEngine.Texture2D> StartRunning()
    // Offset: 0x950BC8
    ::System::Threading::Tasks::Task_1<::UnityEngine::Texture2D*>* StartRunning();
    // public System.Void StopRunning()
    // Offset: 0x950DD4
    void StopRunning();
    // public System.Boolean Equals(NatSuite.Devices.IMediaDevice other)
    // Offset: 0x950F10
    bool Equals(::NatSuite::Devices::IMediaDevice* other);
    // public override System.String ToString()
    // Offset: 0x951020
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // NatSuite.Devices.WebCameraDevice
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: NatSuite::Devices::WebCameraDevice::get_uniqueID
// Il2CppName: get_uniqueID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (NatSuite::Devices::WebCameraDevice::*)()>(&NatSuite::Devices::WebCameraDevice::get_uniqueID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::WebCameraDevice*), "get_uniqueID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Devices::WebCameraDevice::get_frontFacing
// Il2CppName: get_frontFacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NatSuite::Devices::WebCameraDevice::*)()>(&NatSuite::Devices::WebCameraDevice::get_frontFacing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::WebCameraDevice*), "get_frontFacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Devices::WebCameraDevice::get_previewResolution
// Il2CppName: get_previewResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<int, int> (NatSuite::Devices::WebCameraDevice::*)()>(&NatSuite::Devices::WebCameraDevice::get_previewResolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::WebCameraDevice*), "get_previewResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Devices::WebCameraDevice::set_previewResolution
// Il2CppName: set_previewResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NatSuite::Devices::WebCameraDevice::*)(::System::ValueTuple_2<int, int>)>(&NatSuite::Devices::WebCameraDevice::set_previewResolution)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ValueTuple`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::WebCameraDevice*), "set_previewResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: NatSuite::Devices::WebCameraDevice::get_frameRate
// Il2CppName: get_frameRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (NatSuite::Devices::WebCameraDevice::*)()>(&NatSuite::Devices::WebCameraDevice::get_frameRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::WebCameraDevice*), "get_frameRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Devices::WebCameraDevice::set_frameRate
// Il2CppName: set_frameRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NatSuite::Devices::WebCameraDevice::*)(int)>(&NatSuite::Devices::WebCameraDevice::set_frameRate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::WebCameraDevice*), "set_frameRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: NatSuite::Devices::WebCameraDevice::get_running
// Il2CppName: get_running
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NatSuite::Devices::WebCameraDevice::*)()>(&NatSuite::Devices::WebCameraDevice::get_running)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::WebCameraDevice*), "get_running", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Devices::WebCameraDevice::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: NatSuite::Devices::WebCameraDevice::StartRunning
// Il2CppName: StartRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::UnityEngine::Texture2D*>* (NatSuite::Devices::WebCameraDevice::*)()>(&NatSuite::Devices::WebCameraDevice::StartRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::WebCameraDevice*), "StartRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Devices::WebCameraDevice::StopRunning
// Il2CppName: StopRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NatSuite::Devices::WebCameraDevice::*)()>(&NatSuite::Devices::WebCameraDevice::StopRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::WebCameraDevice*), "StopRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Devices::WebCameraDevice::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NatSuite::Devices::WebCameraDevice::*)(::NatSuite::Devices::IMediaDevice*)>(&NatSuite::Devices::WebCameraDevice::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("NatSuite.Devices", "IMediaDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::WebCameraDevice*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: NatSuite::Devices::WebCameraDevice::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (NatSuite::Devices::WebCameraDevice::*)()>(&NatSuite::Devices::WebCameraDevice::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::WebCameraDevice*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
