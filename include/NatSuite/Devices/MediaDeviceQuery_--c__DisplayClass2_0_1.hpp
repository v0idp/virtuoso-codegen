// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: NatSuite.Devices.MediaDeviceQuery
#include "NatSuite/Devices/MediaDeviceQuery.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: NatSuite::Devices
namespace NatSuite::Devices {
  // Forward declaring type: IMediaDevice
  class IMediaDevice;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: TaskCompletionSource`1<TResult>
  template<typename TResult>
  class TaskCompletionSource_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::NatSuite::Devices::MediaDeviceQuery::$$c__DisplayClass2_0_1, "NatSuite.Devices", "MediaDeviceQuery/<>c__DisplayClass2_0`1");
// Type namespace: NatSuite.Devices
namespace NatSuite::Devices {
  // WARNING Size may be invalid!
  // Autogenerated type: NatSuite.Devices.MediaDeviceQuery/NatSuite.Devices.<>c__DisplayClass2_0`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  template<typename T>
  class MediaDeviceQuery::$$c__DisplayClass2_0_1 : public ::Il2CppObject {
    public:
    public:
    // public System.Threading.Tasks.TaskCompletionSource`1<System.Boolean> permissionTask
    // Size: 0x8
    // Offset: 0x0
    ::System::Threading::Tasks::TaskCompletionSource_1<bool>* permissionTask;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::TaskCompletionSource_1<bool>*) == 0x8);
    // public NatSuite.Devices.MediaDeviceQuery/NatSuite.Devices.MediaDeviceQueryPermissionsHelper requester
    // Size: 0x8
    // Offset: 0x0
    ::NatSuite::Devices::MediaDeviceQuery::MediaDeviceQueryPermissionsHelper* requester;
    // Field size check
    static_assert(sizeof(::NatSuite::Devices::MediaDeviceQuery::MediaDeviceQueryPermissionsHelper*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: public System.Threading.Tasks.TaskCompletionSource`1<System.Boolean> permissionTask
    [[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskCompletionSource_1<bool>*& dyn_permissionTask() {
      static auto ___internal__logger = ::Logger::get().WithContext("::NatSuite::Devices::MediaDeviceQuery::$$c__DisplayClass2_0_1::dyn_permissionTask");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "permissionTask"))->offset;
      return *reinterpret_cast<::System::Threading::Tasks::TaskCompletionSource_1<bool>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public NatSuite.Devices.MediaDeviceQuery/NatSuite.Devices.MediaDeviceQueryPermissionsHelper requester
    [[deprecated("Use field access instead!")]] ::NatSuite::Devices::MediaDeviceQuery::MediaDeviceQueryPermissionsHelper*& dyn_requester() {
      static auto ___internal__logger = ::Logger::get().WithContext("::NatSuite::Devices::MediaDeviceQuery::$$c__DisplayClass2_0_1::dyn_requester");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "requester"))->offset;
      return *reinterpret_cast<::NatSuite::Devices::MediaDeviceQuery::MediaDeviceQueryPermissionsHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MediaDeviceQuery::$$c__DisplayClass2_0_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::NatSuite::Devices::MediaDeviceQuery::$$c__DisplayClass2_0_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MediaDeviceQuery::$$c__DisplayClass2_0_1<T>*, creationType>()));
    }
    // System.Void <RequestPermissions>b__0(System.Boolean granted)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void $RequestPermissions$b__0(bool granted) {
      static auto ___internal__logger = ::Logger::get().WithContext("::NatSuite::Devices::MediaDeviceQuery::$$c__DisplayClass2_0_1::<RequestPermissions>b__0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RequestPermissions>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(granted)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, granted);
    }
  }; // NatSuite.Devices.MediaDeviceQuery/NatSuite.Devices.<>c__DisplayClass2_0`1
  // Could not write size check! Type: NatSuite.Devices.MediaDeviceQuery/NatSuite.Devices.<>c__DisplayClass2_0`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
