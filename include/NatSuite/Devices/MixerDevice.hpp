// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: NatSuite.Devices.IAudioDevice
#include "NatSuite/Devices/IAudioDevice.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: NatSuite::Devices
namespace NatSuite::Devices {
  // Forward declaring type: SampleBufferDelegate
  class SampleBufferDelegate;
  // Skipping declaration: IMediaDevice because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioListener
  class AudioListener;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: NatSuite.Devices
namespace NatSuite::Devices {
  // Forward declaring type: MixerDevice
  class MixerDevice;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::NatSuite::Devices::MixerDevice);
DEFINE_IL2CPP_ARG_TYPE(::NatSuite::Devices::MixerDevice*, "NatSuite.Devices", "MixerDevice");
// Type namespace: NatSuite.Devices
namespace NatSuite::Devices {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: NatSuite.Devices.MixerDevice
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocAttribute] Offset: 781BF0
  class MixerDevice : public ::Il2CppObject/*, public ::System::IDisposable, public ::NatSuite::Devices::IAudioDevice*/ {
    public:
    // Nested type: ::NatSuite::Devices::MixerDevice::MixerDeviceAttachment
    class MixerDeviceAttachment;
    // Nested type: ::NatSuite::Devices::MixerDevice::$$c__DisplayClass10_0
    class $$c__DisplayClass10_0;
    public:
    // private readonly NatSuite.Devices.IAudioDevice audioDevice
    // Size: 0x8
    // Offset: 0x10
    ::NatSuite::Devices::IAudioDevice* audioDevice;
    // Field size check
    static_assert(sizeof(::NatSuite::Devices::IAudioDevice*) == 0x8);
    // private readonly NatSuite.Devices.MixerDevice/NatSuite.Devices.MixerDeviceAttachment attachment
    // Size: 0x8
    // Offset: 0x18
    ::NatSuite::Devices::MixerDevice::MixerDeviceAttachment* attachment;
    // Field size check
    static_assert(sizeof(::NatSuite::Devices::MixerDevice::MixerDeviceAttachment*) == 0x8);
    // private readonly System.Collections.Generic.List`1<System.Single> stagingBuffer
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<float>* stagingBuffer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<float>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::NatSuite::Devices::IAudioDevice
    operator ::NatSuite::Devices::IAudioDevice() noexcept {
      return *reinterpret_cast<::NatSuite::Devices::IAudioDevice*>(this);
    }
    // Get instance field reference: private readonly NatSuite.Devices.IAudioDevice audioDevice
    [[deprecated("Use field access instead!")]] ::NatSuite::Devices::IAudioDevice*& dyn_audioDevice();
    // Get instance field reference: private readonly NatSuite.Devices.MixerDevice/NatSuite.Devices.MixerDeviceAttachment attachment
    [[deprecated("Use field access instead!")]] ::NatSuite::Devices::MixerDevice::MixerDeviceAttachment*& dyn_attachment();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.Single> stagingBuffer
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<float>*& dyn_stagingBuffer();
    // public System.String get_uniqueID()
    // Offset: 0xAC9904
    ::StringW get_uniqueID();
    // public System.Int32 get_sampleRate()
    // Offset: 0xAC9B34
    int get_sampleRate();
    // public System.Int32 get_channelCount()
    // Offset: 0xAC9B3C
    int get_channelCount();
    // public System.Boolean get_running()
    // Offset: 0xAC9B44
    bool get_running();
    // public System.Void .ctor(NatSuite.Devices.IAudioDevice audioDevice, UnityEngine.AudioSource audioSource)
    // Offset: 0xAC9BF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MixerDevice* New_ctor(::NatSuite::Devices::IAudioDevice* audioDevice, ::UnityEngine::AudioSource* audioSource) {
      static auto ___internal__logger = ::Logger::get().WithContext("::NatSuite::Devices::MixerDevice::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MixerDevice*, creationType>(audioDevice, audioSource)));
    }
    // public System.Void .ctor(NatSuite.Devices.IAudioDevice audioDevice, UnityEngine.AudioListener audioListener)
    // Offset: 0xAC9D88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MixerDevice* New_ctor(::NatSuite::Devices::IAudioDevice* audioDevice, ::UnityEngine::AudioListener* audioListener) {
      static auto ___internal__logger = ::Logger::get().WithContext("::NatSuite::Devices::MixerDevice::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MixerDevice*, creationType>(audioDevice, audioListener)));
    }
    // private System.Void .ctor(NatSuite.Devices.IAudioDevice audioDevice, UnityEngine.GameObject gameObject)
    // Offset: 0xAC9C34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MixerDevice* New_ctor(::NatSuite::Devices::IAudioDevice* audioDevice, ::UnityEngine::GameObject* gameObject) {
      static auto ___internal__logger = ::Logger::get().WithContext("::NatSuite::Devices::MixerDevice::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MixerDevice*, creationType>(audioDevice, gameObject)));
    }
    // public System.Void StartRunning(NatSuite.Devices.SampleBufferDelegate delegate)
    // Offset: 0xAC9DC8
    void StartRunning(::NatSuite::Devices::SampleBufferDelegate* delegate);
    // public System.Void StopRunning()
    // Offset: 0xAC9F68
    void StopRunning();
    // public System.Void Dispose()
    // Offset: 0xACA048
    void Dispose();
    // public System.Boolean Equals(NatSuite.Devices.IMediaDevice other)
    // Offset: 0xACA0B0
    bool Equals(::NatSuite::Devices::IMediaDevice* other);
    // public override System.String ToString()
    // Offset: 0xACA1B0
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // NatSuite.Devices.MixerDevice
  #pragma pack(pop)
  static check_size<sizeof(MixerDevice), 32 + sizeof(::System::Collections::Generic::List_1<float>*)> __NatSuite_Devices_MixerDeviceSizeCheck;
  static_assert(sizeof(MixerDevice) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: NatSuite::Devices::MixerDevice::get_uniqueID
// Il2CppName: get_uniqueID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (NatSuite::Devices::MixerDevice::*)()>(&NatSuite::Devices::MixerDevice::get_uniqueID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::MixerDevice*), "get_uniqueID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Devices::MixerDevice::get_sampleRate
// Il2CppName: get_sampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (NatSuite::Devices::MixerDevice::*)()>(&NatSuite::Devices::MixerDevice::get_sampleRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::MixerDevice*), "get_sampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Devices::MixerDevice::get_channelCount
// Il2CppName: get_channelCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (NatSuite::Devices::MixerDevice::*)()>(&NatSuite::Devices::MixerDevice::get_channelCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::MixerDevice*), "get_channelCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Devices::MixerDevice::get_running
// Il2CppName: get_running
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NatSuite::Devices::MixerDevice::*)()>(&NatSuite::Devices::MixerDevice::get_running)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::MixerDevice*), "get_running", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Devices::MixerDevice::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: NatSuite::Devices::MixerDevice::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: NatSuite::Devices::MixerDevice::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: NatSuite::Devices::MixerDevice::StartRunning
// Il2CppName: StartRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NatSuite::Devices::MixerDevice::*)(::NatSuite::Devices::SampleBufferDelegate*)>(&NatSuite::Devices::MixerDevice::StartRunning)> {
  static const MethodInfo* get() {
    static auto* delegate = &::il2cpp_utils::GetClassFromName("NatSuite.Devices", "SampleBufferDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::MixerDevice*), "StartRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delegate});
  }
};
// Writing MetadataGetter for method: NatSuite::Devices::MixerDevice::StopRunning
// Il2CppName: StopRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NatSuite::Devices::MixerDevice::*)()>(&NatSuite::Devices::MixerDevice::StopRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::MixerDevice*), "StopRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Devices::MixerDevice::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NatSuite::Devices::MixerDevice::*)()>(&NatSuite::Devices::MixerDevice::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::MixerDevice*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Devices::MixerDevice::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NatSuite::Devices::MixerDevice::*)(::NatSuite::Devices::IMediaDevice*)>(&NatSuite::Devices::MixerDevice::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("NatSuite.Devices", "IMediaDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::MixerDevice*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: NatSuite::Devices::MixerDevice::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (NatSuite::Devices::MixerDevice::*)()>(&NatSuite::Devices::MixerDevice::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Devices::MixerDevice*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
