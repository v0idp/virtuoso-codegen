// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: NatSuite::Examples
namespace NatSuite::Examples {
}
// Forward declaring namespace: NatSuite::Devices
namespace NatSuite::Devices {
  // Forward declaring type: IAudioDevice
  class IAudioDevice;
}
// Forward declaring namespace: NatSuite::Examples::Components
namespace NatSuite::Examples::Components {
  // Forward declaring type: ClipRecorder
  class ClipRecorder;
}
// Completed forward declares
// Type namespace: NatSuite.Examples
namespace NatSuite::Examples {
  // Forward declaring type: HotMic
  class HotMic;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::NatSuite::Examples::HotMic);
DEFINE_IL2CPP_ARG_TYPE(::NatSuite::Examples::HotMic*, "NatSuite.Examples", "HotMic");
// Type namespace: NatSuite.Examples
namespace NatSuite::Examples {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: NatSuite.Examples.HotMic
  // [TokenAttribute] Offset: FFFFFFFF
  class HotMic : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::NatSuite::Examples::HotMic::$Start$d__2
    struct $Start$d__2;
    public:
    // private NatSuite.Devices.IAudioDevice device
    // Size: 0x8
    // Offset: 0x18
    ::NatSuite::Devices::IAudioDevice* device;
    // Field size check
    static_assert(sizeof(::NatSuite::Devices::IAudioDevice*) == 0x8);
    // private NatSuite.Examples.Components.ClipRecorder recorder
    // Size: 0x8
    // Offset: 0x20
    ::NatSuite::Examples::Components::ClipRecorder* recorder;
    // Field size check
    static_assert(sizeof(::NatSuite::Examples::Components::ClipRecorder*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private NatSuite.Devices.IAudioDevice device
    [[deprecated]] ::NatSuite::Devices::IAudioDevice*& dyn_device();
    // Get instance field reference: private NatSuite.Examples.Components.ClipRecorder recorder
    [[deprecated]] ::NatSuite::Examples::Components::ClipRecorder*& dyn_recorder();
    // private System.Void Start()
    // Offset: 0x1941D5C
    void Start();
    // public System.Void StartRecording()
    // Offset: 0x1941E20
    void StartRecording();
    // public System.Void StopRecording()
    // Offset: 0x19421C0
    void StopRecording();
    // public System.Void .ctor()
    // Offset: 0x1942298
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HotMic* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::NatSuite::Examples::HotMic::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HotMic*, creationType>()));
    }
  }; // NatSuite.Examples.HotMic
  #pragma pack(pop)
  static check_size<sizeof(HotMic), 32 + sizeof(::NatSuite::Examples::Components::ClipRecorder*)> __NatSuite_Examples_HotMicSizeCheck;
  static_assert(sizeof(HotMic) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: NatSuite::Examples::HotMic::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NatSuite::Examples::HotMic::*)()>(&NatSuite::Examples::HotMic::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Examples::HotMic*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Examples::HotMic::StartRecording
// Il2CppName: StartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NatSuite::Examples::HotMic::*)()>(&NatSuite::Examples::HotMic::StartRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Examples::HotMic*), "StartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Examples::HotMic::StopRecording
// Il2CppName: StopRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NatSuite::Examples::HotMic::*)()>(&NatSuite::Examples::HotMic::StopRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Examples::HotMic*), "StopRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Examples::HotMic::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
