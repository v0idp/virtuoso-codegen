// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: NatSuite::Examples
namespace NatSuite::Examples {
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: RawImage
  class RawImage;
  // Forward declaring type: AspectRatioFitter
  class AspectRatioFitter;
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: NatSuite::Devices
namespace NatSuite::Devices {
  // Forward declaring type: MediaDeviceQuery
  class MediaDeviceQuery;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: BaseEventData
  class BaseEventData;
}
// Completed forward declares
// Type namespace: NatSuite.Examples
namespace NatSuite::Examples {
  // Forward declaring type: MiniCam
  class MiniCam;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::NatSuite::Examples::MiniCam);
DEFINE_IL2CPP_ARG_TYPE(::NatSuite::Examples::MiniCam*, "NatSuite.Examples", "MiniCam");
// Type namespace: NatSuite.Examples
namespace NatSuite::Examples {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: NatSuite.Examples.MiniCam
  // [TokenAttribute] Offset: FFFFFFFF
  class MiniCam : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::NatSuite::Examples::MiniCam::$Start$d__7
    struct $Start$d__7;
    // Nested type: ::NatSuite::Examples::MiniCam::$CapturePhoto$d__8
    struct $CapturePhoto$d__8;
    // Nested type: ::NatSuite::Examples::MiniCam::$SwitchCamera$d__9
    struct $SwitchCamera$d__9;
    public:
    // [HeaderAttribute] Offset: 0x78EB44
    // public UnityEngine.UI.RawImage previewPanel
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::RawImage* previewPanel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::RawImage*) == 0x8);
    // public UnityEngine.UI.AspectRatioFitter previewAspectFitter
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::AspectRatioFitter* previewAspectFitter;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::AspectRatioFitter*) == 0x8);
    // [HeaderAttribute] Offset: 0x78EB7C
    // public UnityEngine.UI.RawImage photoPanel
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::RawImage* photoPanel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::RawImage*) == 0x8);
    // public UnityEngine.UI.AspectRatioFitter photoAspectFitter
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::AspectRatioFitter* photoAspectFitter;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::AspectRatioFitter*) == 0x8);
    // public UnityEngine.UI.Image flashIcon
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UI::Image* flashIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public UnityEngine.UI.Image switchIcon
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::UI::Image* switchIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // private NatSuite.Devices.MediaDeviceQuery deviceQuery
    // Size: 0x8
    // Offset: 0x48
    ::NatSuite::Devices::MediaDeviceQuery* deviceQuery;
    // Field size check
    static_assert(sizeof(::NatSuite::Devices::MediaDeviceQuery*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.UI.RawImage previewPanel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::RawImage*& dyn_previewPanel();
    // Get instance field reference: public UnityEngine.UI.AspectRatioFitter previewAspectFitter
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::AspectRatioFitter*& dyn_previewAspectFitter();
    // Get instance field reference: public UnityEngine.UI.RawImage photoPanel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::RawImage*& dyn_photoPanel();
    // Get instance field reference: public UnityEngine.UI.AspectRatioFitter photoAspectFitter
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::AspectRatioFitter*& dyn_photoAspectFitter();
    // Get instance field reference: public UnityEngine.UI.Image flashIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_flashIcon();
    // Get instance field reference: public UnityEngine.UI.Image switchIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_switchIcon();
    // Get instance field reference: private NatSuite.Devices.MediaDeviceQuery deviceQuery
    [[deprecated("Use field access instead!")]] ::NatSuite::Devices::MediaDeviceQuery*& dyn_deviceQuery();
    // public System.Void .ctor()
    // Offset: 0xAC9640
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MiniCam* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::NatSuite::Examples::MiniCam::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MiniCam*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0xAC90A8
    void Start();
    // public System.Void CapturePhoto()
    // Offset: 0xAC9168
    void CapturePhoto();
    // public System.Void SwitchCamera()
    // Offset: 0xAC9228
    void SwitchCamera();
    // public System.Void FocusCamera(UnityEngine.EventSystems.BaseEventData e)
    // Offset: 0xAC92EC
    void FocusCamera(::UnityEngine::EventSystems::BaseEventData* e);
    // public System.Void ToggleFlashMode()
    // Offset: 0xAC952C
    void ToggleFlashMode();
  }; // NatSuite.Examples.MiniCam
  #pragma pack(pop)
  static check_size<sizeof(MiniCam), 72 + sizeof(::NatSuite::Devices::MediaDeviceQuery*)> __NatSuite_Examples_MiniCamSizeCheck;
  static_assert(sizeof(MiniCam) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: NatSuite::Examples::MiniCam::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: NatSuite::Examples::MiniCam::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NatSuite::Examples::MiniCam::*)()>(&NatSuite::Examples::MiniCam::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Examples::MiniCam*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Examples::MiniCam::CapturePhoto
// Il2CppName: CapturePhoto
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NatSuite::Examples::MiniCam::*)()>(&NatSuite::Examples::MiniCam::CapturePhoto)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Examples::MiniCam*), "CapturePhoto", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Examples::MiniCam::SwitchCamera
// Il2CppName: SwitchCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NatSuite::Examples::MiniCam::*)()>(&NatSuite::Examples::MiniCam::SwitchCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Examples::MiniCam*), "SwitchCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NatSuite::Examples::MiniCam::FocusCamera
// Il2CppName: FocusCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NatSuite::Examples::MiniCam::*)(::UnityEngine::EventSystems::BaseEventData*)>(&NatSuite::Examples::MiniCam::FocusCamera)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "BaseEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Examples::MiniCam*), "FocusCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: NatSuite::Examples::MiniCam::ToggleFlashMode
// Il2CppName: ToggleFlashMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NatSuite::Examples::MiniCam::*)()>(&NatSuite::Examples::MiniCam::ToggleFlashMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NatSuite::Examples::MiniCam*), "ToggleFlashMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
