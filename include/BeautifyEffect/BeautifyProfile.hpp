// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.FilterMode
#include "UnityEngine/FilterMode.hpp"
// Including type: BeautifyEffect.BEAUTIFY_TMO
#include "BeautifyEffect/BEAUTIFY_TMO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: BeautifyEffect
namespace BeautifyEffect {
  // Forward declaring type: Beautify
  class Beautify;
}
// Completed forward declares
// Type namespace: BeautifyEffect
namespace BeautifyEffect {
  // Forward declaring type: BeautifyProfile
  class BeautifyProfile;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BeautifyEffect::BeautifyProfile);
DEFINE_IL2CPP_ARG_TYPE(::BeautifyEffect::BeautifyProfile*, "BeautifyEffect", "BeautifyProfile");
// Type namespace: BeautifyEffect
namespace BeautifyEffect {
  // Size: 0x2B1
  #pragma pack(push, 1)
  // Autogenerated type: BeautifyEffect.BeautifyProfile
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: 781ED8
  class BeautifyProfile : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // [RangeAttribute] Offset: 0x790A30
    // public System.Single dither
    // Size: 0x4
    // Offset: 0x18
    float dither;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790A4C
    // public System.Single ditherDepth
    // Size: 0x4
    // Offset: 0x1C
    float ditherDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790A64
    // public System.Single sharpenMinDepth
    // Size: 0x4
    // Offset: 0x20
    float sharpenMinDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790A7C
    // public System.Single sharpenMaxDepth
    // Size: 0x4
    // Offset: 0x24
    float sharpenMaxDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790A98
    // public System.Single sharpen
    // Size: 0x4
    // Offset: 0x28
    float sharpen;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790AB0
    // public System.Single sharpenDepthThreshold
    // Size: 0x4
    // Offset: 0x2C
    float sharpenDepthThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color tintColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color tintColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [RangeAttribute] Offset: 0x790ACC
    // public System.Single sharpenRelaxation
    // Size: 0x4
    // Offset: 0x40
    float sharpenRelaxation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790AE8
    // public System.Single sharpenClamp
    // Size: 0x4
    // Offset: 0x44
    float sharpenClamp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790B00
    // public System.Single sharpenMotionSensibility
    // Size: 0x4
    // Offset: 0x48
    float sharpenMotionSensibility;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790B18
    // public System.Single antialiasStrength
    // Size: 0x4
    // Offset: 0x4C
    float antialiasStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790B30
    // public System.Single antialiasDepthThreshold
    // Size: 0x4
    // Offset: 0x50
    float antialiasDepthThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790B4C
    // public System.Single saturate
    // Size: 0x4
    // Offset: 0x54
    float saturate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790B64
    // public System.Single contrast
    // Size: 0x4
    // Offset: 0x58
    float contrast;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790B7C
    // public System.Single brightness
    // Size: 0x4
    // Offset: 0x5C
    float brightness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790B94
    // public System.Single daltonize
    // Size: 0x4
    // Offset: 0x60
    float daltonize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean vignetting
    // Size: 0x1
    // Offset: 0x64
    bool vignetting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: vignetting and: vignettingColor
    char __padding16[0x3] = {};
    // public UnityEngine.Color vignettingColor
    // Size: 0x10
    // Offset: 0x68
    ::UnityEngine::Color vignettingColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Single vignettingFade
    // Size: 0x4
    // Offset: 0x78
    float vignettingFade;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean vignettingCircularShape
    // Size: 0x1
    // Offset: 0x7C
    bool vignettingCircularShape;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: vignettingCircularShape and: vignettingAspectRatio
    char __padding19[0x3] = {};
    // public System.Single vignettingAspectRatio
    // Size: 0x4
    // Offset: 0x80
    float vignettingAspectRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790BAC
    // public System.Single vignettingBlink
    // Size: 0x4
    // Offset: 0x84
    float vignettingBlink;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Texture2D vignettingMask
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Texture2D* vignettingMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public System.Boolean frame
    // Size: 0x1
    // Offset: 0x90
    bool frame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: frame and: frameColor
    char __padding23[0x3] = {};
    // public UnityEngine.Color frameColor
    // Size: 0x10
    // Offset: 0x94
    ::UnityEngine::Color frameColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // Padding between fields: frameColor and: frameMask
    char __padding24[0x4] = {};
    // public UnityEngine.Texture2D frameMask
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::Texture2D* frameMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public System.Boolean lut
    // Size: 0x1
    // Offset: 0xB0
    bool lut;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: lut and: lutIntensity
    char __padding26[0x3] = {};
    // [RangeAttribute] Offset: 0x790BC4
    // public System.Single lutIntensity
    // Size: 0x4
    // Offset: 0xB4
    float lutIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Texture2D lutTexture
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::Texture2D* lutTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public System.Boolean nightVision
    // Size: 0x1
    // Offset: 0xC0
    bool nightVision;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: nightVision and: nightVisionColor
    char __padding29[0x3] = {};
    // public UnityEngine.Color nightVisionColor
    // Size: 0x10
    // Offset: 0xC4
    ::UnityEngine::Color nightVisionColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Boolean outline
    // Size: 0x1
    // Offset: 0xD4
    bool outline;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: outline and: outlineColor
    char __padding31[0x3] = {};
    // public UnityEngine.Color outlineColor
    // Size: 0x10
    // Offset: 0xD8
    ::UnityEngine::Color outlineColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Boolean thermalVision
    // Size: 0x1
    // Offset: 0xE8
    bool thermalVision;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean lensDirt
    // Size: 0x1
    // Offset: 0xE9
    bool lensDirt;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: lensDirt and: lensDirtThreshold
    char __padding34[0x2] = {};
    // [RangeAttribute] Offset: 0x790BDC
    // public System.Single lensDirtThreshold
    // Size: 0x4
    // Offset: 0xEC
    float lensDirtThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790BF4
    // public System.Single lensDirtIntensity
    // Size: 0x4
    // Offset: 0xF0
    float lensDirtIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lensDirtIntensity and: lensDirtTexture
    char __padding36[0x4] = {};
    // public UnityEngine.Texture2D lensDirtTexture
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Texture2D* lensDirtTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public System.Boolean bloom
    // Size: 0x1
    // Offset: 0x100
    bool bloom;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: bloom and: bloomCullingMask
    char __padding38[0x3] = {};
    // public UnityEngine.LayerMask bloomCullingMask
    // Size: 0x4
    // Offset: 0x104
    ::UnityEngine::LayerMask bloomCullingMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // [RangeAttribute] Offset: 0x790C0C
    // public System.Single bloomLayerMaskDownsampling
    // Size: 0x4
    // Offset: 0x108
    float bloomLayerMaskDownsampling;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790C24
    // public System.Single bloomIntensity
    // Size: 0x4
    // Offset: 0x10C
    float bloomIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single bloomMaxBrightness
    // Size: 0x4
    // Offset: 0x110
    float bloomMaxBrightness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790C3C
    // public System.Single bloomBoost0
    // Size: 0x4
    // Offset: 0x114
    float bloomBoost0;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790C54
    // public System.Single bloomBoost1
    // Size: 0x4
    // Offset: 0x118
    float bloomBoost1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790C6C
    // public System.Single bloomBoost2
    // Size: 0x4
    // Offset: 0x11C
    float bloomBoost2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790C84
    // public System.Single bloomBoost3
    // Size: 0x4
    // Offset: 0x120
    float bloomBoost3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790C9C
    // public System.Single bloomBoost4
    // Size: 0x4
    // Offset: 0x124
    float bloomBoost4;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790CB4
    // public System.Single bloomBoost5
    // Size: 0x4
    // Offset: 0x128
    float bloomBoost5;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean bloomAntiflicker
    // Size: 0x1
    // Offset: 0x12C
    bool bloomAntiflicker;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean bloomUltra
    // Size: 0x1
    // Offset: 0x12D
    bool bloomUltra;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: bloomUltra and: bloomThreshold
    char __padding50[0x2] = {};
    // [RangeAttribute] Offset: 0x790CCC
    // public System.Single bloomThreshold
    // Size: 0x4
    // Offset: 0x130
    float bloomThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean bloomCustomize
    // Size: 0x1
    // Offset: 0x134
    bool bloomCustomize;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: bloomCustomize and: bloomWeight0
    char __padding52[0x3] = {};
    // [RangeAttribute] Offset: 0x790CE4
    // public System.Single bloomWeight0
    // Size: 0x4
    // Offset: 0x138
    float bloomWeight0;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790CFC
    // public System.Single bloomWeight1
    // Size: 0x4
    // Offset: 0x13C
    float bloomWeight1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790D14
    // public System.Single bloomWeight2
    // Size: 0x4
    // Offset: 0x140
    float bloomWeight2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790D2C
    // public System.Single bloomWeight3
    // Size: 0x4
    // Offset: 0x144
    float bloomWeight3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790D44
    // public System.Single bloomWeight4
    // Size: 0x4
    // Offset: 0x148
    float bloomWeight4;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790D5C
    // public System.Single bloomWeight5
    // Size: 0x4
    // Offset: 0x14C
    float bloomWeight5;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean bloomBlur
    // Size: 0x1
    // Offset: 0x150
    bool bloomBlur;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: bloomBlur and: bloomDepthAtten
    char __padding59[0x3] = {};
    // [RangeAttribute] Offset: 0x790D74
    // public System.Single bloomDepthAtten
    // Size: 0x4
    // Offset: 0x154
    float bloomDepthAtten;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790D8C
    // public System.Single bloomLayerZBias
    // Size: 0x4
    // Offset: 0x158
    float bloomLayerZBias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean anamorphicFlares
    // Size: 0x1
    // Offset: 0x15C
    bool anamorphicFlares;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: anamorphicFlares and: anamorphicFlaresIntensity
    char __padding62[0x3] = {};
    // [RangeAttribute] Offset: 0x790DA4
    // public System.Single anamorphicFlaresIntensity
    // Size: 0x4
    // Offset: 0x160
    float anamorphicFlaresIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean anamorphicFlaresAntiflicker
    // Size: 0x1
    // Offset: 0x164
    bool anamorphicFlaresAntiflicker;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean anamorphicFlaresUltra
    // Size: 0x1
    // Offset: 0x165
    bool anamorphicFlaresUltra;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: anamorphicFlaresUltra and: anamorphicFlaresThreshold
    char __padding65[0x2] = {};
    // [RangeAttribute] Offset: 0x790DBC
    // public System.Single anamorphicFlaresThreshold
    // Size: 0x4
    // Offset: 0x168
    float anamorphicFlaresThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790DD4
    // public System.Single anamorphicFlaresSpread
    // Size: 0x4
    // Offset: 0x16C
    float anamorphicFlaresSpread;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean anamorphicFlaresVertical
    // Size: 0x1
    // Offset: 0x170
    bool anamorphicFlaresVertical;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: anamorphicFlaresVertical and: anamorphicFlaresTint
    char __padding68[0x3] = {};
    // public UnityEngine.Color anamorphicFlaresTint
    // Size: 0x10
    // Offset: 0x174
    ::UnityEngine::Color anamorphicFlaresTint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Boolean anamorphicFlaresBlur
    // Size: 0x1
    // Offset: 0x184
    bool anamorphicFlaresBlur;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean depthOfField
    // Size: 0x1
    // Offset: 0x185
    bool depthOfField;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean depthOfFieldTransparencySupport
    // Size: 0x1
    // Offset: 0x186
    bool depthOfFieldTransparencySupport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: depthOfFieldTransparencySupport and: depthOfFieldTargetFocus
    char __padding72[0x1] = {};
    // public UnityEngine.Transform depthOfFieldTargetFocus
    // Size: 0x8
    // Offset: 0x188
    ::UnityEngine::Transform* depthOfFieldTargetFocus;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Boolean depthOfFieldAutofocus
    // Size: 0x1
    // Offset: 0x190
    bool depthOfFieldAutofocus;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: depthOfFieldAutofocus and: depthofFieldAutofocusViewportPoint
    char __padding74[0x3] = {};
    // public UnityEngine.Vector2 depthofFieldAutofocusViewportPoint
    // Size: 0x8
    // Offset: 0x194
    ::UnityEngine::Vector2 depthofFieldAutofocusViewportPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.LayerMask depthOfFieldAutofocusLayerMask
    // Size: 0x4
    // Offset: 0x19C
    ::UnityEngine::LayerMask depthOfFieldAutofocusLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public System.Single depthOfFieldAutofocusMinDistance
    // Size: 0x4
    // Offset: 0x1A0
    float depthOfFieldAutofocusMinDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single depthOfFieldAutofocusMaxDistance
    // Size: 0x4
    // Offset: 0x1A4
    float depthOfFieldAutofocusMaxDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.LayerMask depthOfFieldExclusionLayerMask
    // Size: 0x4
    // Offset: 0x1A8
    ::UnityEngine::LayerMask depthOfFieldExclusionLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // [RangeAttribute] Offset: 0x790DF0
    // public System.Single depthOfFieldExclusionLayerMaskDownsampling
    // Size: 0x4
    // Offset: 0x1AC
    float depthOfFieldExclusionLayerMaskDownsampling;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790E08
    // public System.Single depthOfFieldTransparencySupportDownsampling
    // Size: 0x4
    // Offset: 0x1B0
    float depthOfFieldTransparencySupportDownsampling;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790E20
    // public System.Single depthOfFieldExclusionBias
    // Size: 0x4
    // Offset: 0x1B4
    float depthOfFieldExclusionBias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790E3C
    // public System.Single depthOfFieldDistance
    // Size: 0x4
    // Offset: 0x1B8
    float depthOfFieldDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790E58
    // public System.Single depthOfFieldFocusSpeed
    // Size: 0x4
    // Offset: 0x1BC
    float depthOfFieldFocusSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790E74
    // public System.Int32 depthOfFieldDownsampling
    // Size: 0x4
    // Offset: 0x1C0
    int depthOfFieldDownsampling;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [RangeAttribute] Offset: 0x790E8C
    // public System.Int32 depthOfFieldMaxSamples
    // Size: 0x4
    // Offset: 0x1C4
    int depthOfFieldMaxSamples;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [RangeAttribute] Offset: 0x790EA4
    // public System.Single depthOfFieldFocalLength
    // Size: 0x4
    // Offset: 0x1C8
    float depthOfFieldFocalLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single depthOfFieldAperture
    // Size: 0x4
    // Offset: 0x1CC
    float depthOfFieldAperture;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean depthOfFieldForegroundBlur
    // Size: 0x1
    // Offset: 0x1D0
    bool depthOfFieldForegroundBlur;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean depthOfFieldForegroundBlurHQ
    // Size: 0x1
    // Offset: 0x1D1
    bool depthOfFieldForegroundBlurHQ;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: depthOfFieldForegroundBlurHQ and: depthOfFieldForegroundDistance
    char __padding90[0x2] = {};
    // public System.Single depthOfFieldForegroundDistance
    // Size: 0x4
    // Offset: 0x1D4
    float depthOfFieldForegroundDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean depthOfFieldBokeh
    // Size: 0x1
    // Offset: 0x1D8
    bool depthOfFieldBokeh;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: depthOfFieldBokeh and: depthOfFieldBokehThreshold
    char __padding92[0x3] = {};
    // [RangeAttribute] Offset: 0x790EC0
    // public System.Single depthOfFieldBokehThreshold
    // Size: 0x4
    // Offset: 0x1DC
    float depthOfFieldBokehThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790ED8
    // public System.Single depthOfFieldBokehIntensity
    // Size: 0x4
    // Offset: 0x1E0
    float depthOfFieldBokehIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single depthOfFieldMaxBrightness
    // Size: 0x4
    // Offset: 0x1E4
    float depthOfFieldMaxBrightness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single depthOfFieldMaxDistance
    // Size: 0x4
    // Offset: 0x1E8
    float depthOfFieldMaxDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.FilterMode depthOfFieldFilterMode
    // Size: 0x4
    // Offset: 0x1EC
    ::UnityEngine::FilterMode depthOfFieldFilterMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::FilterMode) == 0x4);
    // public UnityEngine.LayerMask depthOfFieldTransparencyLayerMask
    // Size: 0x4
    // Offset: 0x1F0
    ::UnityEngine::LayerMask depthOfFieldTransparencyLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public System.Boolean eyeAdaptation
    // Size: 0x1
    // Offset: 0x1F4
    bool eyeAdaptation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: eyeAdaptation and: eyeAdaptationMinExposure
    char __padding99[0x3] = {};
    // [RangeAttribute] Offset: 0x790EF0
    // public System.Single eyeAdaptationMinExposure
    // Size: 0x4
    // Offset: 0x1F8
    float eyeAdaptationMinExposure;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790F08
    // public System.Single eyeAdaptationMaxExposure
    // Size: 0x4
    // Offset: 0x1FC
    float eyeAdaptationMaxExposure;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790F24
    // public System.Single eyeAdaptationSpeedToLight
    // Size: 0x4
    // Offset: 0x200
    float eyeAdaptationSpeedToLight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790F3C
    // public System.Single eyeAdaptationSpeedToDark
    // Size: 0x4
    // Offset: 0x204
    float eyeAdaptationSpeedToDark;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean purkinje
    // Size: 0x1
    // Offset: 0x208
    bool purkinje;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: purkinje and: purkinjeAmount
    char __padding104[0x3] = {};
    // [RangeAttribute] Offset: 0x790F54
    // public System.Single purkinjeAmount
    // Size: 0x4
    // Offset: 0x20C
    float purkinjeAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790F6C
    // public System.Single purkinjeLuminanceThreshold
    // Size: 0x4
    // Offset: 0x210
    float purkinjeLuminanceThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public BeautifyEffect.BEAUTIFY_TMO tonemap
    // Size: 0x4
    // Offset: 0x214
    ::BeautifyEffect::BEAUTIFY_TMO tonemap;
    // Field size check
    static_assert(sizeof(::BeautifyEffect::BEAUTIFY_TMO) == 0x4);
    // public System.Boolean sunFlares
    // Size: 0x1
    // Offset: 0x218
    bool sunFlares;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sunFlares and: sunFlaresIntensity
    char __padding108[0x3] = {};
    // [RangeAttribute] Offset: 0x790F84
    // public System.Single sunFlaresIntensity
    // Size: 0x4
    // Offset: 0x21C
    float sunFlaresIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790F9C
    // public System.Single sunFlaresSolarWindSpeed
    // Size: 0x4
    // Offset: 0x220
    float sunFlaresSolarWindSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color sunFlaresTint
    // Size: 0x10
    // Offset: 0x224
    ::UnityEngine::Color sunFlaresTint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [RangeAttribute] Offset: 0x790FB4
    // public System.Int32 sunFlaresDownsampling
    // Size: 0x4
    // Offset: 0x234
    int sunFlaresDownsampling;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [RangeAttribute] Offset: 0x790FCC
    // public System.Single sunFlaresSunIntensity
    // Size: 0x4
    // Offset: 0x238
    float sunFlaresSunIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790FE4
    // public System.Single sunFlaresSunDiskSize
    // Size: 0x4
    // Offset: 0x23C
    float sunFlaresSunDiskSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x790FFC
    // public System.Single sunFlaresSunRayDiffractionIntensity
    // Size: 0x4
    // Offset: 0x240
    float sunFlaresSunRayDiffractionIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x791014
    // public System.Single sunFlaresSunRayDiffractionThreshold
    // Size: 0x4
    // Offset: 0x244
    float sunFlaresSunRayDiffractionThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x79102C
    // public System.Single sunFlaresCoronaRays1Length
    // Size: 0x4
    // Offset: 0x248
    float sunFlaresCoronaRays1Length;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x791048
    // public System.Int32 sunFlaresCoronaRays1Streaks
    // Size: 0x4
    // Offset: 0x24C
    int sunFlaresCoronaRays1Streaks;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [RangeAttribute] Offset: 0x791060
    // public System.Single sunFlaresCoronaRays1Spread
    // Size: 0x4
    // Offset: 0x250
    float sunFlaresCoronaRays1Spread;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x79107C
    // public System.Single sunFlaresCoronaRays1AngleOffset
    // Size: 0x4
    // Offset: 0x254
    float sunFlaresCoronaRays1AngleOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x791098
    // public System.Single sunFlaresCoronaRays2Length
    // Size: 0x4
    // Offset: 0x258
    float sunFlaresCoronaRays2Length;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x7910B4
    // public System.Int32 sunFlaresCoronaRays2Streaks
    // Size: 0x4
    // Offset: 0x25C
    int sunFlaresCoronaRays2Streaks;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [RangeAttribute] Offset: 0x7910CC
    // public System.Single sunFlaresCoronaRays2Spread
    // Size: 0x4
    // Offset: 0x260
    float sunFlaresCoronaRays2Spread;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x7910E8
    // public System.Single sunFlaresCoronaRays2AngleOffset
    // Size: 0x4
    // Offset: 0x264
    float sunFlaresCoronaRays2AngleOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x791104
    // public System.Single sunFlaresGhosts1Size
    // Size: 0x4
    // Offset: 0x268
    float sunFlaresGhosts1Size;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x79111C
    // public System.Single sunFlaresGhosts1Offset
    // Size: 0x4
    // Offset: 0x26C
    float sunFlaresGhosts1Offset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x791134
    // public System.Single sunFlaresGhosts1Brightness
    // Size: 0x4
    // Offset: 0x270
    float sunFlaresGhosts1Brightness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x79114C
    // public System.Single sunFlaresGhosts2Size
    // Size: 0x4
    // Offset: 0x274
    float sunFlaresGhosts2Size;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x791164
    // public System.Single sunFlaresGhosts2Offset
    // Size: 0x4
    // Offset: 0x278
    float sunFlaresGhosts2Offset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x79117C
    // public System.Single sunFlaresGhosts2Brightness
    // Size: 0x4
    // Offset: 0x27C
    float sunFlaresGhosts2Brightness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x791194
    // public System.Single sunFlaresGhosts3Size
    // Size: 0x4
    // Offset: 0x280
    float sunFlaresGhosts3Size;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x7911AC
    // public System.Single sunFlaresGhosts3Brightness
    // Size: 0x4
    // Offset: 0x284
    float sunFlaresGhosts3Brightness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x7911C4
    // public System.Single sunFlaresGhosts3Offset
    // Size: 0x4
    // Offset: 0x288
    float sunFlaresGhosts3Offset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x7911DC
    // public System.Single sunFlaresGhosts4Size
    // Size: 0x4
    // Offset: 0x28C
    float sunFlaresGhosts4Size;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x7911F4
    // public System.Single sunFlaresGhosts4Offset
    // Size: 0x4
    // Offset: 0x290
    float sunFlaresGhosts4Offset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x79120C
    // public System.Single sunFlaresGhosts4Brightness
    // Size: 0x4
    // Offset: 0x294
    float sunFlaresGhosts4Brightness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x791224
    // public System.Single sunFlaresHaloOffset
    // Size: 0x4
    // Offset: 0x298
    float sunFlaresHaloOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x79123C
    // public System.Single sunFlaresHaloAmplitude
    // Size: 0x4
    // Offset: 0x29C
    float sunFlaresHaloAmplitude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x791258
    // public System.Single sunFlaresHaloIntensity
    // Size: 0x4
    // Offset: 0x2A0
    float sunFlaresHaloIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean sunFlaresRotationDeadZone
    // Size: 0x1
    // Offset: 0x2A4
    bool sunFlaresRotationDeadZone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean blur
    // Size: 0x1
    // Offset: 0x2A5
    bool blur;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: blur and: blurIntensity
    char __padding141[0x2] = {};
    // [RangeAttribute] Offset: 0x791270
    // public System.Single blurIntensity
    // Size: 0x4
    // Offset: 0x2A8
    float blurIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 pixelateAmount
    // Size: 0x4
    // Offset: 0x2AC
    int pixelateAmount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean pixelateDownscale
    // Size: 0x1
    // Offset: 0x2B0
    bool pixelateDownscale;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Single dither
    [[deprecated("Use field access instead!")]] float& dyn_dither();
    // Get instance field reference: public System.Single ditherDepth
    [[deprecated("Use field access instead!")]] float& dyn_ditherDepth();
    // Get instance field reference: public System.Single sharpenMinDepth
    [[deprecated("Use field access instead!")]] float& dyn_sharpenMinDepth();
    // Get instance field reference: public System.Single sharpenMaxDepth
    [[deprecated("Use field access instead!")]] float& dyn_sharpenMaxDepth();
    // Get instance field reference: public System.Single sharpen
    [[deprecated("Use field access instead!")]] float& dyn_sharpen();
    // Get instance field reference: public System.Single sharpenDepthThreshold
    [[deprecated("Use field access instead!")]] float& dyn_sharpenDepthThreshold();
    // Get instance field reference: public UnityEngine.Color tintColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_tintColor();
    // Get instance field reference: public System.Single sharpenRelaxation
    [[deprecated("Use field access instead!")]] float& dyn_sharpenRelaxation();
    // Get instance field reference: public System.Single sharpenClamp
    [[deprecated("Use field access instead!")]] float& dyn_sharpenClamp();
    // Get instance field reference: public System.Single sharpenMotionSensibility
    [[deprecated("Use field access instead!")]] float& dyn_sharpenMotionSensibility();
    // Get instance field reference: public System.Single antialiasStrength
    [[deprecated("Use field access instead!")]] float& dyn_antialiasStrength();
    // Get instance field reference: public System.Single antialiasDepthThreshold
    [[deprecated("Use field access instead!")]] float& dyn_antialiasDepthThreshold();
    // Get instance field reference: public System.Single saturate
    [[deprecated("Use field access instead!")]] float& dyn_saturate();
    // Get instance field reference: public System.Single contrast
    [[deprecated("Use field access instead!")]] float& dyn_contrast();
    // Get instance field reference: public System.Single brightness
    [[deprecated("Use field access instead!")]] float& dyn_brightness();
    // Get instance field reference: public System.Single daltonize
    [[deprecated("Use field access instead!")]] float& dyn_daltonize();
    // Get instance field reference: public System.Boolean vignetting
    [[deprecated("Use field access instead!")]] bool& dyn_vignetting();
    // Get instance field reference: public UnityEngine.Color vignettingColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_vignettingColor();
    // Get instance field reference: public System.Single vignettingFade
    [[deprecated("Use field access instead!")]] float& dyn_vignettingFade();
    // Get instance field reference: public System.Boolean vignettingCircularShape
    [[deprecated("Use field access instead!")]] bool& dyn_vignettingCircularShape();
    // Get instance field reference: public System.Single vignettingAspectRatio
    [[deprecated("Use field access instead!")]] float& dyn_vignettingAspectRatio();
    // Get instance field reference: public System.Single vignettingBlink
    [[deprecated("Use field access instead!")]] float& dyn_vignettingBlink();
    // Get instance field reference: public UnityEngine.Texture2D vignettingMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_vignettingMask();
    // Get instance field reference: public System.Boolean frame
    [[deprecated("Use field access instead!")]] bool& dyn_frame();
    // Get instance field reference: public UnityEngine.Color frameColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_frameColor();
    // Get instance field reference: public UnityEngine.Texture2D frameMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_frameMask();
    // Get instance field reference: public System.Boolean lut
    [[deprecated("Use field access instead!")]] bool& dyn_lut();
    // Get instance field reference: public System.Single lutIntensity
    [[deprecated("Use field access instead!")]] float& dyn_lutIntensity();
    // Get instance field reference: public UnityEngine.Texture2D lutTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_lutTexture();
    // Get instance field reference: public System.Boolean nightVision
    [[deprecated("Use field access instead!")]] bool& dyn_nightVision();
    // Get instance field reference: public UnityEngine.Color nightVisionColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_nightVisionColor();
    // Get instance field reference: public System.Boolean outline
    [[deprecated("Use field access instead!")]] bool& dyn_outline();
    // Get instance field reference: public UnityEngine.Color outlineColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_outlineColor();
    // Get instance field reference: public System.Boolean thermalVision
    [[deprecated("Use field access instead!")]] bool& dyn_thermalVision();
    // Get instance field reference: public System.Boolean lensDirt
    [[deprecated("Use field access instead!")]] bool& dyn_lensDirt();
    // Get instance field reference: public System.Single lensDirtThreshold
    [[deprecated("Use field access instead!")]] float& dyn_lensDirtThreshold();
    // Get instance field reference: public System.Single lensDirtIntensity
    [[deprecated("Use field access instead!")]] float& dyn_lensDirtIntensity();
    // Get instance field reference: public UnityEngine.Texture2D lensDirtTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_lensDirtTexture();
    // Get instance field reference: public System.Boolean bloom
    [[deprecated("Use field access instead!")]] bool& dyn_bloom();
    // Get instance field reference: public UnityEngine.LayerMask bloomCullingMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_bloomCullingMask();
    // Get instance field reference: public System.Single bloomLayerMaskDownsampling
    [[deprecated("Use field access instead!")]] float& dyn_bloomLayerMaskDownsampling();
    // Get instance field reference: public System.Single bloomIntensity
    [[deprecated("Use field access instead!")]] float& dyn_bloomIntensity();
    // Get instance field reference: public System.Single bloomMaxBrightness
    [[deprecated("Use field access instead!")]] float& dyn_bloomMaxBrightness();
    // Get instance field reference: public System.Single bloomBoost0
    [[deprecated("Use field access instead!")]] float& dyn_bloomBoost0();
    // Get instance field reference: public System.Single bloomBoost1
    [[deprecated("Use field access instead!")]] float& dyn_bloomBoost1();
    // Get instance field reference: public System.Single bloomBoost2
    [[deprecated("Use field access instead!")]] float& dyn_bloomBoost2();
    // Get instance field reference: public System.Single bloomBoost3
    [[deprecated("Use field access instead!")]] float& dyn_bloomBoost3();
    // Get instance field reference: public System.Single bloomBoost4
    [[deprecated("Use field access instead!")]] float& dyn_bloomBoost4();
    // Get instance field reference: public System.Single bloomBoost5
    [[deprecated("Use field access instead!")]] float& dyn_bloomBoost5();
    // Get instance field reference: public System.Boolean bloomAntiflicker
    [[deprecated("Use field access instead!")]] bool& dyn_bloomAntiflicker();
    // Get instance field reference: public System.Boolean bloomUltra
    [[deprecated("Use field access instead!")]] bool& dyn_bloomUltra();
    // Get instance field reference: public System.Single bloomThreshold
    [[deprecated("Use field access instead!")]] float& dyn_bloomThreshold();
    // Get instance field reference: public System.Boolean bloomCustomize
    [[deprecated("Use field access instead!")]] bool& dyn_bloomCustomize();
    // Get instance field reference: public System.Single bloomWeight0
    [[deprecated("Use field access instead!")]] float& dyn_bloomWeight0();
    // Get instance field reference: public System.Single bloomWeight1
    [[deprecated("Use field access instead!")]] float& dyn_bloomWeight1();
    // Get instance field reference: public System.Single bloomWeight2
    [[deprecated("Use field access instead!")]] float& dyn_bloomWeight2();
    // Get instance field reference: public System.Single bloomWeight3
    [[deprecated("Use field access instead!")]] float& dyn_bloomWeight3();
    // Get instance field reference: public System.Single bloomWeight4
    [[deprecated("Use field access instead!")]] float& dyn_bloomWeight4();
    // Get instance field reference: public System.Single bloomWeight5
    [[deprecated("Use field access instead!")]] float& dyn_bloomWeight5();
    // Get instance field reference: public System.Boolean bloomBlur
    [[deprecated("Use field access instead!")]] bool& dyn_bloomBlur();
    // Get instance field reference: public System.Single bloomDepthAtten
    [[deprecated("Use field access instead!")]] float& dyn_bloomDepthAtten();
    // Get instance field reference: public System.Single bloomLayerZBias
    [[deprecated("Use field access instead!")]] float& dyn_bloomLayerZBias();
    // Get instance field reference: public System.Boolean anamorphicFlares
    [[deprecated("Use field access instead!")]] bool& dyn_anamorphicFlares();
    // Get instance field reference: public System.Single anamorphicFlaresIntensity
    [[deprecated("Use field access instead!")]] float& dyn_anamorphicFlaresIntensity();
    // Get instance field reference: public System.Boolean anamorphicFlaresAntiflicker
    [[deprecated("Use field access instead!")]] bool& dyn_anamorphicFlaresAntiflicker();
    // Get instance field reference: public System.Boolean anamorphicFlaresUltra
    [[deprecated("Use field access instead!")]] bool& dyn_anamorphicFlaresUltra();
    // Get instance field reference: public System.Single anamorphicFlaresThreshold
    [[deprecated("Use field access instead!")]] float& dyn_anamorphicFlaresThreshold();
    // Get instance field reference: public System.Single anamorphicFlaresSpread
    [[deprecated("Use field access instead!")]] float& dyn_anamorphicFlaresSpread();
    // Get instance field reference: public System.Boolean anamorphicFlaresVertical
    [[deprecated("Use field access instead!")]] bool& dyn_anamorphicFlaresVertical();
    // Get instance field reference: public UnityEngine.Color anamorphicFlaresTint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_anamorphicFlaresTint();
    // Get instance field reference: public System.Boolean anamorphicFlaresBlur
    [[deprecated("Use field access instead!")]] bool& dyn_anamorphicFlaresBlur();
    // Get instance field reference: public System.Boolean depthOfField
    [[deprecated("Use field access instead!")]] bool& dyn_depthOfField();
    // Get instance field reference: public System.Boolean depthOfFieldTransparencySupport
    [[deprecated("Use field access instead!")]] bool& dyn_depthOfFieldTransparencySupport();
    // Get instance field reference: public UnityEngine.Transform depthOfFieldTargetFocus
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_depthOfFieldTargetFocus();
    // Get instance field reference: public System.Boolean depthOfFieldAutofocus
    [[deprecated("Use field access instead!")]] bool& dyn_depthOfFieldAutofocus();
    // Get instance field reference: public UnityEngine.Vector2 depthofFieldAutofocusViewportPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_depthofFieldAutofocusViewportPoint();
    // Get instance field reference: public UnityEngine.LayerMask depthOfFieldAutofocusLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_depthOfFieldAutofocusLayerMask();
    // Get instance field reference: public System.Single depthOfFieldAutofocusMinDistance
    [[deprecated("Use field access instead!")]] float& dyn_depthOfFieldAutofocusMinDistance();
    // Get instance field reference: public System.Single depthOfFieldAutofocusMaxDistance
    [[deprecated("Use field access instead!")]] float& dyn_depthOfFieldAutofocusMaxDistance();
    // Get instance field reference: public UnityEngine.LayerMask depthOfFieldExclusionLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_depthOfFieldExclusionLayerMask();
    // Get instance field reference: public System.Single depthOfFieldExclusionLayerMaskDownsampling
    [[deprecated("Use field access instead!")]] float& dyn_depthOfFieldExclusionLayerMaskDownsampling();
    // Get instance field reference: public System.Single depthOfFieldTransparencySupportDownsampling
    [[deprecated("Use field access instead!")]] float& dyn_depthOfFieldTransparencySupportDownsampling();
    // Get instance field reference: public System.Single depthOfFieldExclusionBias
    [[deprecated("Use field access instead!")]] float& dyn_depthOfFieldExclusionBias();
    // Get instance field reference: public System.Single depthOfFieldDistance
    [[deprecated("Use field access instead!")]] float& dyn_depthOfFieldDistance();
    // Get instance field reference: public System.Single depthOfFieldFocusSpeed
    [[deprecated("Use field access instead!")]] float& dyn_depthOfFieldFocusSpeed();
    // Get instance field reference: public System.Int32 depthOfFieldDownsampling
    [[deprecated("Use field access instead!")]] int& dyn_depthOfFieldDownsampling();
    // Get instance field reference: public System.Int32 depthOfFieldMaxSamples
    [[deprecated("Use field access instead!")]] int& dyn_depthOfFieldMaxSamples();
    // Get instance field reference: public System.Single depthOfFieldFocalLength
    [[deprecated("Use field access instead!")]] float& dyn_depthOfFieldFocalLength();
    // Get instance field reference: public System.Single depthOfFieldAperture
    [[deprecated("Use field access instead!")]] float& dyn_depthOfFieldAperture();
    // Get instance field reference: public System.Boolean depthOfFieldForegroundBlur
    [[deprecated("Use field access instead!")]] bool& dyn_depthOfFieldForegroundBlur();
    // Get instance field reference: public System.Boolean depthOfFieldForegroundBlurHQ
    [[deprecated("Use field access instead!")]] bool& dyn_depthOfFieldForegroundBlurHQ();
    // Get instance field reference: public System.Single depthOfFieldForegroundDistance
    [[deprecated("Use field access instead!")]] float& dyn_depthOfFieldForegroundDistance();
    // Get instance field reference: public System.Boolean depthOfFieldBokeh
    [[deprecated("Use field access instead!")]] bool& dyn_depthOfFieldBokeh();
    // Get instance field reference: public System.Single depthOfFieldBokehThreshold
    [[deprecated("Use field access instead!")]] float& dyn_depthOfFieldBokehThreshold();
    // Get instance field reference: public System.Single depthOfFieldBokehIntensity
    [[deprecated("Use field access instead!")]] float& dyn_depthOfFieldBokehIntensity();
    // Get instance field reference: public System.Single depthOfFieldMaxBrightness
    [[deprecated("Use field access instead!")]] float& dyn_depthOfFieldMaxBrightness();
    // Get instance field reference: public System.Single depthOfFieldMaxDistance
    [[deprecated("Use field access instead!")]] float& dyn_depthOfFieldMaxDistance();
    // Get instance field reference: public UnityEngine.FilterMode depthOfFieldFilterMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::FilterMode& dyn_depthOfFieldFilterMode();
    // Get instance field reference: public UnityEngine.LayerMask depthOfFieldTransparencyLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_depthOfFieldTransparencyLayerMask();
    // Get instance field reference: public System.Boolean eyeAdaptation
    [[deprecated("Use field access instead!")]] bool& dyn_eyeAdaptation();
    // Get instance field reference: public System.Single eyeAdaptationMinExposure
    [[deprecated("Use field access instead!")]] float& dyn_eyeAdaptationMinExposure();
    // Get instance field reference: public System.Single eyeAdaptationMaxExposure
    [[deprecated("Use field access instead!")]] float& dyn_eyeAdaptationMaxExposure();
    // Get instance field reference: public System.Single eyeAdaptationSpeedToLight
    [[deprecated("Use field access instead!")]] float& dyn_eyeAdaptationSpeedToLight();
    // Get instance field reference: public System.Single eyeAdaptationSpeedToDark
    [[deprecated("Use field access instead!")]] float& dyn_eyeAdaptationSpeedToDark();
    // Get instance field reference: public System.Boolean purkinje
    [[deprecated("Use field access instead!")]] bool& dyn_purkinje();
    // Get instance field reference: public System.Single purkinjeAmount
    [[deprecated("Use field access instead!")]] float& dyn_purkinjeAmount();
    // Get instance field reference: public System.Single purkinjeLuminanceThreshold
    [[deprecated("Use field access instead!")]] float& dyn_purkinjeLuminanceThreshold();
    // Get instance field reference: public BeautifyEffect.BEAUTIFY_TMO tonemap
    [[deprecated("Use field access instead!")]] ::BeautifyEffect::BEAUTIFY_TMO& dyn_tonemap();
    // Get instance field reference: public System.Boolean sunFlares
    [[deprecated("Use field access instead!")]] bool& dyn_sunFlares();
    // Get instance field reference: public System.Single sunFlaresIntensity
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresIntensity();
    // Get instance field reference: public System.Single sunFlaresSolarWindSpeed
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresSolarWindSpeed();
    // Get instance field reference: public UnityEngine.Color sunFlaresTint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_sunFlaresTint();
    // Get instance field reference: public System.Int32 sunFlaresDownsampling
    [[deprecated("Use field access instead!")]] int& dyn_sunFlaresDownsampling();
    // Get instance field reference: public System.Single sunFlaresSunIntensity
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresSunIntensity();
    // Get instance field reference: public System.Single sunFlaresSunDiskSize
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresSunDiskSize();
    // Get instance field reference: public System.Single sunFlaresSunRayDiffractionIntensity
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresSunRayDiffractionIntensity();
    // Get instance field reference: public System.Single sunFlaresSunRayDiffractionThreshold
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresSunRayDiffractionThreshold();
    // Get instance field reference: public System.Single sunFlaresCoronaRays1Length
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresCoronaRays1Length();
    // Get instance field reference: public System.Int32 sunFlaresCoronaRays1Streaks
    [[deprecated("Use field access instead!")]] int& dyn_sunFlaresCoronaRays1Streaks();
    // Get instance field reference: public System.Single sunFlaresCoronaRays1Spread
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresCoronaRays1Spread();
    // Get instance field reference: public System.Single sunFlaresCoronaRays1AngleOffset
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresCoronaRays1AngleOffset();
    // Get instance field reference: public System.Single sunFlaresCoronaRays2Length
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresCoronaRays2Length();
    // Get instance field reference: public System.Int32 sunFlaresCoronaRays2Streaks
    [[deprecated("Use field access instead!")]] int& dyn_sunFlaresCoronaRays2Streaks();
    // Get instance field reference: public System.Single sunFlaresCoronaRays2Spread
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresCoronaRays2Spread();
    // Get instance field reference: public System.Single sunFlaresCoronaRays2AngleOffset
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresCoronaRays2AngleOffset();
    // Get instance field reference: public System.Single sunFlaresGhosts1Size
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresGhosts1Size();
    // Get instance field reference: public System.Single sunFlaresGhosts1Offset
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresGhosts1Offset();
    // Get instance field reference: public System.Single sunFlaresGhosts1Brightness
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresGhosts1Brightness();
    // Get instance field reference: public System.Single sunFlaresGhosts2Size
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresGhosts2Size();
    // Get instance field reference: public System.Single sunFlaresGhosts2Offset
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresGhosts2Offset();
    // Get instance field reference: public System.Single sunFlaresGhosts2Brightness
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresGhosts2Brightness();
    // Get instance field reference: public System.Single sunFlaresGhosts3Size
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresGhosts3Size();
    // Get instance field reference: public System.Single sunFlaresGhosts3Brightness
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresGhosts3Brightness();
    // Get instance field reference: public System.Single sunFlaresGhosts3Offset
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresGhosts3Offset();
    // Get instance field reference: public System.Single sunFlaresGhosts4Size
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresGhosts4Size();
    // Get instance field reference: public System.Single sunFlaresGhosts4Offset
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresGhosts4Offset();
    // Get instance field reference: public System.Single sunFlaresGhosts4Brightness
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresGhosts4Brightness();
    // Get instance field reference: public System.Single sunFlaresHaloOffset
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresHaloOffset();
    // Get instance field reference: public System.Single sunFlaresHaloAmplitude
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresHaloAmplitude();
    // Get instance field reference: public System.Single sunFlaresHaloIntensity
    [[deprecated("Use field access instead!")]] float& dyn_sunFlaresHaloIntensity();
    // Get instance field reference: public System.Boolean sunFlaresRotationDeadZone
    [[deprecated("Use field access instead!")]] bool& dyn_sunFlaresRotationDeadZone();
    // Get instance field reference: public System.Boolean blur
    [[deprecated("Use field access instead!")]] bool& dyn_blur();
    // Get instance field reference: public System.Single blurIntensity
    [[deprecated("Use field access instead!")]] float& dyn_blurIntensity();
    // Get instance field reference: public System.Int32 pixelateAmount
    [[deprecated("Use field access instead!")]] int& dyn_pixelateAmount();
    // Get instance field reference: public System.Boolean pixelateDownscale
    [[deprecated("Use field access instead!")]] bool& dyn_pixelateDownscale();
    // public System.Void .ctor()
    // Offset: 0x936C24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeautifyProfile* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::BeautifyEffect::BeautifyProfile::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeautifyProfile*, creationType>()));
    }
    // public System.Void Load(BeautifyEffect.Beautify b)
    // Offset: 0x935E04
    void Load(::BeautifyEffect::Beautify* b);
    // public System.Void Save(BeautifyEffect.Beautify b)
    // Offset: 0x936768
    void Save(::BeautifyEffect::Beautify* b);
  }; // BeautifyEffect.BeautifyProfile
  #pragma pack(pop)
  static check_size<sizeof(BeautifyProfile), 688 + sizeof(bool)> __BeautifyEffect_BeautifyProfileSizeCheck;
  static_assert(sizeof(BeautifyProfile) == 0x2B1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BeautifyEffect::BeautifyProfile::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: BeautifyEffect::BeautifyProfile::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeautifyEffect::BeautifyProfile::*)(::BeautifyEffect::Beautify*)>(&BeautifyEffect::BeautifyProfile::Load)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("BeautifyEffect", "Beautify")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BeautifyEffect::BeautifyProfile*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b});
  }
};
// Writing MetadataGetter for method: BeautifyEffect::BeautifyProfile::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeautifyEffect::BeautifyProfile::*)(::BeautifyEffect::Beautify*)>(&BeautifyEffect::BeautifyProfile::Save)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("BeautifyEffect", "Beautify")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BeautifyEffect::BeautifyProfile*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b});
  }
};
