// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: MalbersAnimations
namespace MalbersAnimations {
  // Forward declaring type: UseTransform
  class UseTransform;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MalbersAnimations::UseTransform);
DEFINE_IL2CPP_ARG_TYPE(::MalbersAnimations::UseTransform*, "MalbersAnimations", "UseTransform");
// Type namespace: MalbersAnimations
namespace MalbersAnimations {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: MalbersAnimations.UseTransform
  // [TokenAttribute] Offset: FFFFFFFF
  class UseTransform : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::MalbersAnimations::UseTransform::UpdateMode
    struct UpdateMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MalbersAnimations.UseTransform/MalbersAnimations.UpdateMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct UpdateMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: UpdateMode
      constexpr UpdateMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MalbersAnimations.UseTransform/MalbersAnimations.UpdateMode Update
      static constexpr const int Update = 1;
      // Get static field: static public MalbersAnimations.UseTransform/MalbersAnimations.UpdateMode Update
      static ::MalbersAnimations::UseTransform::UpdateMode _get_Update();
      // Set static field: static public MalbersAnimations.UseTransform/MalbersAnimations.UpdateMode Update
      static void _set_Update(::MalbersAnimations::UseTransform::UpdateMode value);
      // static field const value: static public MalbersAnimations.UseTransform/MalbersAnimations.UpdateMode FixedUpdate
      static constexpr const int FixedUpdate = 2;
      // Get static field: static public MalbersAnimations.UseTransform/MalbersAnimations.UpdateMode FixedUpdate
      static ::MalbersAnimations::UseTransform::UpdateMode _get_FixedUpdate();
      // Set static field: static public MalbersAnimations.UseTransform/MalbersAnimations.UpdateMode FixedUpdate
      static void _set_FixedUpdate(::MalbersAnimations::UseTransform::UpdateMode value);
      // static field const value: static public MalbersAnimations.UseTransform/MalbersAnimations.UpdateMode LateUpdate
      static constexpr const int LateUpdate = 4;
      // Get static field: static public MalbersAnimations.UseTransform/MalbersAnimations.UpdateMode LateUpdate
      static ::MalbersAnimations::UseTransform::UpdateMode _get_LateUpdate();
      // Set static field: static public MalbersAnimations.UseTransform/MalbersAnimations.UpdateMode LateUpdate
      static void _set_LateUpdate(::MalbersAnimations::UseTransform::UpdateMode value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // MalbersAnimations.UseTransform/MalbersAnimations.UpdateMode
    #pragma pack(pop)
    static check_size<sizeof(UseTransform::UpdateMode), 0 + sizeof(int)> __MalbersAnimations_UseTransform_UpdateModeSizeCheck;
    static_assert(sizeof(UseTransform::UpdateMode) == 0x4);
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public UnityEngine.Transform Reference
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* Reference;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Boolean rotation
    // Size: 0x1
    // Offset: 0x20
    bool rotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: rotation and: updateMode
    char __padding1[0x3] = {};
    // public MalbersAnimations.UseTransform/MalbersAnimations.UpdateMode updateMode
    // Size: 0x4
    // Offset: 0x24
    ::MalbersAnimations::UseTransform::UpdateMode updateMode;
    // Field size check
    static_assert(sizeof(::MalbersAnimations::UseTransform::UpdateMode) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Transform Reference
    ::UnityEngine::Transform*& dyn_Reference();
    // Get instance field reference: public System.Boolean rotation
    bool& dyn_rotation();
    // Get instance field reference: public MalbersAnimations.UseTransform/MalbersAnimations.UpdateMode updateMode
    ::MalbersAnimations::UseTransform::UpdateMode& dyn_updateMode();
    // private System.Void Update()
    // Offset: 0x13A5ECC
    void Update();
    // private System.Void LateUpdate()
    // Offset: 0x13A5FCC
    void LateUpdate();
    // private System.Void FixedUpdate()
    // Offset: 0x13A5FE0
    void FixedUpdate();
    // private System.Void SetTransformReference()
    // Offset: 0x13A5EE0
    void SetTransformReference();
    // public System.Void .ctor()
    // Offset: 0x13A5FF4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UseTransform* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MalbersAnimations::UseTransform::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UseTransform*, creationType>()));
    }
  }; // MalbersAnimations.UseTransform
  #pragma pack(pop)
  static check_size<sizeof(UseTransform), 36 + sizeof(::MalbersAnimations::UseTransform::UpdateMode)> __MalbersAnimations_UseTransformSizeCheck;
  static_assert(sizeof(UseTransform) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::MalbersAnimations::UseTransform::UpdateMode, "MalbersAnimations", "UseTransform/UpdateMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MalbersAnimations::UseTransform::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MalbersAnimations::UseTransform::*)()>(&MalbersAnimations::UseTransform::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MalbersAnimations::UseTransform*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MalbersAnimations::UseTransform::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MalbersAnimations::UseTransform::*)()>(&MalbersAnimations::UseTransform::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MalbersAnimations::UseTransform*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MalbersAnimations::UseTransform::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MalbersAnimations::UseTransform::*)()>(&MalbersAnimations::UseTransform::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MalbersAnimations::UseTransform*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MalbersAnimations::UseTransform::SetTransformReference
// Il2CppName: SetTransformReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MalbersAnimations::UseTransform::*)()>(&MalbersAnimations::UseTransform::SetTransformReference)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MalbersAnimations::UseTransform*), "SetTransformReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MalbersAnimations::UseTransform::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
