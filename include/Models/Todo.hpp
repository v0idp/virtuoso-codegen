// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Models
namespace Models {
  // Forward declaring type: Todo
  class Todo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Models::Todo);
DEFINE_IL2CPP_ARG_TYPE(::Models::Todo*, "Models", "Todo");
// Type namespace: Models
namespace Models {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: Models.Todo
  // [TokenAttribute] Offset: FFFFFFFF
  class Todo : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 id
    // Size: 0x4
    // Offset: 0x10
    int id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 userId
    // Size: 0x4
    // Offset: 0x14
    int userId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.String title
    // Size: 0x8
    // Offset: 0x18
    ::StringW title;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean completed
    // Size: 0x1
    // Offset: 0x20
    bool completed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Int32 id
    [[deprecated("Use field access instead!")]] int& dyn_id();
    // Get instance field reference: public System.Int32 userId
    [[deprecated("Use field access instead!")]] int& dyn_userId();
    // Get instance field reference: public System.String title
    [[deprecated("Use field access instead!")]] ::StringW& dyn_title();
    // Get instance field reference: public System.Boolean completed
    [[deprecated("Use field access instead!")]] bool& dyn_completed();
    // public System.Void .ctor()
    // Offset: 0xA2808C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Todo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Models::Todo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Todo*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0xA28080
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Models.Todo
  #pragma pack(pop)
  static check_size<sizeof(Todo), 32 + sizeof(bool)> __Models_TodoSizeCheck;
  static_assert(sizeof(Todo) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Models::Todo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Models::Todo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Models::Todo::*)()>(&Models::Todo::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Models::Todo*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
