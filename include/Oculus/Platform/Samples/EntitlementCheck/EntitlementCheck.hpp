// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message
  class Message;
}
// Completed forward declares
// Type namespace: Oculus.Platform.Samples.EntitlementCheck
namespace Oculus::Platform::Samples::EntitlementCheck {
  // Forward declaring type: EntitlementCheck
  class EntitlementCheck;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck*, "Oculus.Platform.Samples.EntitlementCheck", "EntitlementCheck");
// Type namespace: Oculus.Platform.Samples.EntitlementCheck
namespace Oculus::Platform::Samples::EntitlementCheck {
  // Size: 0x19
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Samples.EntitlementCheck.EntitlementCheck
  // [TokenAttribute] Offset: FFFFFFFF
  class EntitlementCheck : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean exitAppOnFailure
    // Size: 0x1
    // Offset: 0x18
    bool exitAppOnFailure;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private System.Action UserFailedEntitlementCheck
    static ::System::Action* _get_UserFailedEntitlementCheck();
    // Set static field: static private System.Action UserFailedEntitlementCheck
    static void _set_UserFailedEntitlementCheck(::System::Action* value);
    // Get static field: static private System.Action UserPassedEntitlementCheck
    static ::System::Action* _get_UserPassedEntitlementCheck();
    // Set static field: static private System.Action UserPassedEntitlementCheck
    static void _set_UserPassedEntitlementCheck(::System::Action* value);
    // Get instance field reference: public System.Boolean exitAppOnFailure
    [[deprecated("Use field access instead!")]] bool& dyn_exitAppOnFailure();
    // static public System.Void add_UserFailedEntitlementCheck(System.Action value)
    // Offset: 0x92DE74
    static void add_UserFailedEntitlementCheck(::System::Action* value);
    // static public System.Void remove_UserFailedEntitlementCheck(System.Action value)
    // Offset: 0x92DF30
    static void remove_UserFailedEntitlementCheck(::System::Action* value);
    // static public System.Void add_UserPassedEntitlementCheck(System.Action value)
    // Offset: 0x92DFEC
    static void add_UserPassedEntitlementCheck(::System::Action* value);
    // static public System.Void remove_UserPassedEntitlementCheck(System.Action value)
    // Offset: 0x92E0AC
    static void remove_UserPassedEntitlementCheck(::System::Action* value);
    // public System.Void .ctor()
    // Offset: 0x92E64C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EntitlementCheck* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EntitlementCheck*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x92E16C
    void Start();
    // private System.Void EntitlementCheckCallback(Oculus.Platform.Message msg)
    // Offset: 0x92E610
    void EntitlementCheckCallback(::Oculus::Platform::Message* msg);
    // private System.Void HandleEntitlementCheckResult(System.Boolean result)
    // Offset: 0x92E334
    void HandleEntitlementCheckResult(bool result);
  }; // Oculus.Platform.Samples.EntitlementCheck.EntitlementCheck
  #pragma pack(pop)
  static check_size<sizeof(EntitlementCheck), 24 + sizeof(bool)> __Oculus_Platform_Samples_EntitlementCheck_EntitlementCheckSizeCheck;
  static_assert(sizeof(EntitlementCheck) == 0x19);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::add_UserFailedEntitlementCheck
// Il2CppName: add_UserFailedEntitlementCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::add_UserFailedEntitlementCheck)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck*), "add_UserFailedEntitlementCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::remove_UserFailedEntitlementCheck
// Il2CppName: remove_UserFailedEntitlementCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::remove_UserFailedEntitlementCheck)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck*), "remove_UserFailedEntitlementCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::add_UserPassedEntitlementCheck
// Il2CppName: add_UserPassedEntitlementCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::add_UserPassedEntitlementCheck)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck*), "add_UserPassedEntitlementCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::remove_UserPassedEntitlementCheck
// Il2CppName: remove_UserPassedEntitlementCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::remove_UserPassedEntitlementCheck)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck*), "remove_UserPassedEntitlementCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::*)()>(&Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::EntitlementCheckCallback
// Il2CppName: EntitlementCheckCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::*)(::Oculus::Platform::Message*)>(&Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::EntitlementCheckCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck*), "EntitlementCheckCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::HandleEntitlementCheckResult
// Il2CppName: HandleEntitlementCheckResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::*)(bool)>(&Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck::HandleEntitlementCheckResult)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::EntitlementCheck::EntitlementCheck*), "HandleEntitlementCheckResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
