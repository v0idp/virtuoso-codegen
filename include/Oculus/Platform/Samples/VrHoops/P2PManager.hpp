// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Platform::Samples::VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Forward declaring type: P2PNetworkBall
  class P2PNetworkBall;
  // Forward declaring type: RemotePlayer
  class RemotePlayer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message`1<T>
  template<typename T>
  class Message_1;
}
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: NetworkingPeer
  class NetworkingPeer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: Oculus.Platform.Samples.VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Forward declaring type: P2PManager
  class P2PManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Samples::VrHoops::P2PManager);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::VrHoops::P2PManager*, "Oculus.Platform.Samples.VrHoops", "P2PManager");
// Type namespace: Oculus.Platform.Samples.VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Samples.VrHoops.P2PManager
  // [TokenAttribute] Offset: FFFFFFFF
  class P2PManager : public ::Il2CppObject {
    public:
    // Nested type: ::Oculus::Platform::Samples::VrHoops::P2PManager::RemotePlayerData
    class RemotePlayerData;
    // Nested type: ::Oculus::Platform::Samples::VrHoops::P2PManager::StartTimeOffer
    class StartTimeOffer;
    public:
    // private readonly System.Collections.Generic.Dictionary`2<System.UInt64,Oculus.Platform.Samples.VrHoops.P2PManager/Oculus.Platform.Samples.VrHoops.RemotePlayerData> m_remotePlayers
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<uint64_t, ::Oculus::Platform::Samples::VrHoops::P2PManager::RemotePlayerData*>* m_remotePlayers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint64_t, ::Oculus::Platform::Samples::VrHoops::P2PManager::RemotePlayerData*>*) == 0x8);
    // private System.Single m_timeForNextBallUpdate
    // Size: 0x4
    // Offset: 0x18
    float m_timeForNextBallUpdate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_timeForNextBallUpdate and: m_localBalls
    char __padding1[0x4] = {};
    // private readonly System.Collections.Generic.Dictionary`2<System.Int32,Oculus.Platform.Samples.VrHoops.P2PNetworkBall> m_localBalls
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Dictionary_2<int, ::Oculus::Platform::Samples::VrHoops::P2PNetworkBall*>* m_localBalls;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::Oculus::Platform::Samples::VrHoops::P2PNetworkBall*>*) == 0x8);
    // private readonly System.Byte[] readBuffer
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<uint8_t> readBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.UInt64,System.Collections.Generic.List`1<System.Single>> m_remoteSyncTimeCache
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<uint64_t, ::System::Collections::Generic::List_1<float>*>* m_remoteSyncTimeCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint64_t, ::System::Collections::Generic::List_1<float>*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.UInt64,System.Single> m_remoteSentTimeCache
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<uint64_t, float>* m_remoteSentTimeCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint64_t, float>*) == 0x8);
    // private Oculus.Platform.Samples.VrHoops.P2PManager/Oculus.Platform.Samples.VrHoops.StartTimeOffer m_startTimeOfferCallback
    // Size: 0x8
    // Offset: 0x40
    ::Oculus::Platform::Samples::VrHoops::P2PManager::StartTimeOffer* m_startTimeOfferCallback;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::VrHoops::P2PManager::StartTimeOffer*) == 0x8);
    public:
    // static field const value: static private System.Byte TIME_SYNC_MESSAGE
    static constexpr const uint8_t TIME_SYNC_MESSAGE = 1u;
    // Get static field: static private System.Byte TIME_SYNC_MESSAGE
    static uint8_t _get_TIME_SYNC_MESSAGE();
    // Set static field: static private System.Byte TIME_SYNC_MESSAGE
    static void _set_TIME_SYNC_MESSAGE(uint8_t value);
    // static field const value: static private System.UInt32 TIME_SYNC_MESSAGE_SIZE
    static constexpr const uint TIME_SYNC_MESSAGE_SIZE = 5u;
    // Get static field: static private System.UInt32 TIME_SYNC_MESSAGE_SIZE
    static uint _get_TIME_SYNC_MESSAGE_SIZE();
    // Set static field: static private System.UInt32 TIME_SYNC_MESSAGE_SIZE
    static void _set_TIME_SYNC_MESSAGE_SIZE(uint value);
    // static field const value: static private System.Int32 TIME_SYNC_MESSAGE_COUNT
    static constexpr const int TIME_SYNC_MESSAGE_COUNT = 7;
    // Get static field: static private System.Int32 TIME_SYNC_MESSAGE_COUNT
    static int _get_TIME_SYNC_MESSAGE_COUNT();
    // Set static field: static private System.Int32 TIME_SYNC_MESSAGE_COUNT
    static void _set_TIME_SYNC_MESSAGE_COUNT(int value);
    // static field const value: static private System.Byte START_TIME_MESSAGE
    static constexpr const uint8_t START_TIME_MESSAGE = 2u;
    // Get static field: static private System.Byte START_TIME_MESSAGE
    static uint8_t _get_START_TIME_MESSAGE();
    // Set static field: static private System.Byte START_TIME_MESSAGE
    static void _set_START_TIME_MESSAGE(uint8_t value);
    // static field const value: static private System.UInt32 START_TIME_MESSAGE_SIZE
    static constexpr const uint START_TIME_MESSAGE_SIZE = 5u;
    // Get static field: static private System.UInt32 START_TIME_MESSAGE_SIZE
    static uint _get_START_TIME_MESSAGE_SIZE();
    // Set static field: static private System.UInt32 START_TIME_MESSAGE_SIZE
    static void _set_START_TIME_MESSAGE_SIZE(uint value);
    // static field const value: static private System.Byte BACKBOARD_UPDATE_MESSAGE
    static constexpr const uint8_t BACKBOARD_UPDATE_MESSAGE = 3u;
    // Get static field: static private System.Byte BACKBOARD_UPDATE_MESSAGE
    static uint8_t _get_BACKBOARD_UPDATE_MESSAGE();
    // Set static field: static private System.Byte BACKBOARD_UPDATE_MESSAGE
    static void _set_BACKBOARD_UPDATE_MESSAGE(uint8_t value);
    // static field const value: static private System.UInt32 BACKBOARD_UPDATE_MESSAGE_SIZE
    static constexpr const uint BACKBOARD_UPDATE_MESSAGE_SIZE = 41u;
    // Get static field: static private System.UInt32 BACKBOARD_UPDATE_MESSAGE_SIZE
    static uint _get_BACKBOARD_UPDATE_MESSAGE_SIZE();
    // Set static field: static private System.UInt32 BACKBOARD_UPDATE_MESSAGE_SIZE
    static void _set_BACKBOARD_UPDATE_MESSAGE_SIZE(uint value);
    // static field const value: static private System.Byte LOCAL_BALLS_UPDATE_MESSAGE
    static constexpr const uint8_t LOCAL_BALLS_UPDATE_MESSAGE = 4u;
    // Get static field: static private System.Byte LOCAL_BALLS_UPDATE_MESSAGE
    static uint8_t _get_LOCAL_BALLS_UPDATE_MESSAGE();
    // Set static field: static private System.Byte LOCAL_BALLS_UPDATE_MESSAGE
    static void _set_LOCAL_BALLS_UPDATE_MESSAGE(uint8_t value);
    // static field const value: static private System.UInt32 LOCAL_BALLS_UPDATE_MESSATE_SIZE_MAX
    static constexpr const uint LOCAL_BALLS_UPDATE_MESSATE_SIZE_MAX = 353u;
    // Get static field: static private System.UInt32 LOCAL_BALLS_UPDATE_MESSATE_SIZE_MAX
    static uint _get_LOCAL_BALLS_UPDATE_MESSATE_SIZE_MAX();
    // Set static field: static private System.UInt32 LOCAL_BALLS_UPDATE_MESSATE_SIZE_MAX
    static void _set_LOCAL_BALLS_UPDATE_MESSATE_SIZE_MAX(uint value);
    // static field const value: static private System.Single LOCAL_BALLS_UPDATE_DELAY
    static constexpr const float LOCAL_BALLS_UPDATE_DELAY = 0.1;
    // Get static field: static private System.Single LOCAL_BALLS_UPDATE_DELAY
    static float _get_LOCAL_BALLS_UPDATE_DELAY();
    // Set static field: static private System.Single LOCAL_BALLS_UPDATE_DELAY
    static void _set_LOCAL_BALLS_UPDATE_DELAY(float value);
    // static field const value: static private System.Byte SCORE_UPDATE_MESSAGE
    static constexpr const uint8_t SCORE_UPDATE_MESSAGE = 5u;
    // Get static field: static private System.Byte SCORE_UPDATE_MESSAGE
    static uint8_t _get_SCORE_UPDATE_MESSAGE();
    // Set static field: static private System.Byte SCORE_UPDATE_MESSAGE
    static void _set_SCORE_UPDATE_MESSAGE(uint8_t value);
    // static field const value: static private System.UInt32 SCORE_UPDATE_MESSAGE_SIZE
    static constexpr const uint SCORE_UPDATE_MESSAGE_SIZE = 5u;
    // Get static field: static private System.UInt32 SCORE_UPDATE_MESSAGE_SIZE
    static uint _get_SCORE_UPDATE_MESSAGE_SIZE();
    // Set static field: static private System.UInt32 SCORE_UPDATE_MESSAGE_SIZE
    static void _set_SCORE_UPDATE_MESSAGE_SIZE(uint value);
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.UInt64,Oculus.Platform.Samples.VrHoops.P2PManager/Oculus.Platform.Samples.VrHoops.RemotePlayerData> m_remotePlayers
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<uint64_t, ::Oculus::Platform::Samples::VrHoops::P2PManager::RemotePlayerData*>*& dyn_m_remotePlayers();
    // Get instance field reference: private System.Single m_timeForNextBallUpdate
    [[deprecated]] float& dyn_m_timeForNextBallUpdate();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Int32,Oculus.Platform.Samples.VrHoops.P2PNetworkBall> m_localBalls
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<int, ::Oculus::Platform::Samples::VrHoops::P2PNetworkBall*>*& dyn_m_localBalls();
    // Get instance field reference: private readonly System.Byte[] readBuffer
    [[deprecated]] ::ArrayW<uint8_t>& dyn_readBuffer();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.UInt64,System.Collections.Generic.List`1<System.Single>> m_remoteSyncTimeCache
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<uint64_t, ::System::Collections::Generic::List_1<float>*>*& dyn_m_remoteSyncTimeCache();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.UInt64,System.Single> m_remoteSentTimeCache
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<uint64_t, float>*& dyn_m_remoteSentTimeCache();
    // Get instance field reference: private Oculus.Platform.Samples.VrHoops.P2PManager/Oculus.Platform.Samples.VrHoops.StartTimeOffer m_startTimeOfferCallback
    [[deprecated]] ::Oculus::Platform::Samples::VrHoops::P2PManager::StartTimeOffer*& dyn_m_startTimeOfferCallback();
    // private Oculus.Platform.Samples.VrHoops.P2PManager/Oculus.Platform.Samples.VrHoops.StartTimeOffer get_StartTimeOfferCallback()
    // Offset: 0xB546D0
    ::Oculus::Platform::Samples::VrHoops::P2PManager::StartTimeOffer* get_StartTimeOfferCallback();
    // public System.Void set_StartTimeOfferCallback(Oculus.Platform.Samples.VrHoops.P2PManager/Oculus.Platform.Samples.VrHoops.StartTimeOffer value)
    // Offset: 0xB546D8
    void set_StartTimeOfferCallback(::Oculus::Platform::Samples::VrHoops::P2PManager::StartTimeOffer* value);
    // public System.Void UpdateNetwork()
    // Offset: 0xB5284C
    void UpdateNetwork();
    // public System.Void AddRemotePlayer(Oculus.Platform.Samples.VrHoops.RemotePlayer player)
    // Offset: 0xB4517C
    void AddRemotePlayer(::Oculus::Platform::Samples::VrHoops::RemotePlayer* player);
    // public System.Void DisconnectAll()
    // Offset: 0xB4583C
    void DisconnectAll();
    // private System.Void PeerConnectRequestCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.NetworkingPeer> msg)
    // Offset: 0xB53CC4
    void PeerConnectRequestCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::NetworkingPeer*>* msg);
    // private System.Void ConnectionStateChangedCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.NetworkingPeer> msg)
    // Offset: 0xB53ECC
    void ConnectionStateChangedCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::NetworkingPeer*>* msg);
    // private System.Void SendTimeSyncMessage(System.UInt64 remoteID)
    // Offset: 0xB54174
    void SendTimeSyncMessage(uint64_t remoteID);
    // private System.Void ReadTimeSyncMessage(System.UInt64 remoteID, System.Byte[] msg)
    // Offset: 0xB52BFC
    void ReadTimeSyncMessage(uint64_t remoteID, ::ArrayW<uint8_t> msg);
    // private System.Single ShiftRemoteTime(System.UInt64 remoteID, System.Single remoteTime)
    // Offset: 0xB54620
    float ShiftRemoteTime(uint64_t remoteID, float remoteTime);
    // private System.Void OfferMatchStartTime()
    // Offset: 0xB54420
    void OfferMatchStartTime();
    // private System.Void ReceiveMatchStartTimeOffer(System.UInt64 remoteID, System.Byte[] msg)
    // Offset: 0xB53310
    void ReceiveMatchStartTimeOffer(uint64_t remoteID, ::ArrayW<uint8_t> msg);
    // public System.Void SendBackboardUpdate(System.Single time, UnityEngine.Vector3 pos, UnityEngine.Vector3 moveDir, UnityEngine.Vector3 nextMoveDir)
    // Offset: 0xB54714
    void SendBackboardUpdate(float time, ::UnityEngine::Vector3 pos, ::UnityEngine::Vector3 moveDir, ::UnityEngine::Vector3 nextMoveDir);
    // private System.Void ReceiveBackboardUpdate(System.UInt64 remoteID, System.Byte[] msg)
    // Offset: 0xB53370
    void ReceiveBackboardUpdate(uint64_t remoteID, ::ArrayW<uint8_t> msg);
    // public System.Void AddNetworkBall(UnityEngine.GameObject ball)
    // Offset: 0xB3DF98
    void AddNetworkBall(::UnityEngine::GameObject* ball);
    // public System.Void RemoveNetworkBall(UnityEngine.GameObject ball)
    // Offset: 0xB54B40
    void RemoveNetworkBall(::UnityEngine::GameObject* ball);
    // private System.Void SendLocalBallTransforms()
    // Offset: 0xB538C0
    void SendLocalBallTransforms();
    // private System.Void ReceiveBallTransforms(System.UInt64 remoteID, System.Byte[] msg, System.UInt64 msgLength)
    // Offset: 0xB534A8
    void ReceiveBallTransforms(uint64_t remoteID, ::ArrayW<uint8_t> msg, uint64_t msgLength);
    // public System.Void SendScoreUpdate(System.UInt32 score)
    // Offset: 0xB3DCE4
    void SendScoreUpdate(uint score);
    // private System.Void ReceiveScoredUpdate(System.UInt64 remoteID, System.Byte[] msg)
    // Offset: 0xB53818
    void ReceiveScoredUpdate(uint64_t remoteID, ::ArrayW<uint8_t> msg);
    // private System.Void PackVector3(UnityEngine.Vector3 vec, System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xB5494C
    void PackVector3(::UnityEngine::Vector3 vec, ::ArrayW<uint8_t> buf, ByRef<int> offset);
    // private UnityEngine.Vector3 UnpackVector3(System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xB5499C
    ::UnityEngine::Vector3 UnpackVector3(::ArrayW<uint8_t> buf, ByRef<int> offset);
    // private System.Void PackQuaternion(UnityEngine.Quaternion quat, System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xB55048
    void PackQuaternion(::UnityEngine::Quaternion quat, ::ArrayW<uint8_t> buf, ByRef<int> offset);
    // private System.Void PackFloat(System.Single value, System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xB542F4
    void PackFloat(float value, ::ArrayW<uint8_t> buf, ByRef<int> offset);
    // private System.Single UnpackFloat(System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xB54398
    float UnpackFloat(::ArrayW<uint8_t> buf, ByRef<int> offset);
    // private System.Single UnpackTime(System.UInt64 remoteID, System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xB546E0
    float UnpackTime(uint64_t remoteID, ::ArrayW<uint8_t> buf, ByRef<int> offset);
    // private System.Void PackInt32(System.Int32 value, System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xB54C2C
    void PackInt32(int value, ::ArrayW<uint8_t> buf, ByRef<int> offset);
    // private System.Int32 UnpackInt32(System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xB54D30
    int UnpackInt32(::ArrayW<uint8_t> buf, ByRef<int> offset);
    // private System.Void PackUint32(System.UInt32 value, System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xB54F24
    void PackUint32(uint value, ::ArrayW<uint8_t> buf, ByRef<int> offset);
    // private System.UInt32 UnpackUint32(System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xB54FC0
    uint UnpackUint32(::ArrayW<uint8_t> buf, ByRef<int> offset);
    // private System.Void PackBool(System.Boolean value, System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xB54BE4
    void PackBool(bool value, ::ArrayW<uint8_t> buf, ByRef<int> offset);
    // private System.Boolean UnpackBool(System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xB54CE4
    bool UnpackBool(::ArrayW<uint8_t> buf, ByRef<int> offset);
    // public System.Void .ctor()
    // Offset: 0xB52650
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static P2PManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Samples::VrHoops::P2PManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<P2PManager*, creationType>()));
    }
  }; // Oculus.Platform.Samples.VrHoops.P2PManager
  #pragma pack(pop)
  static check_size<sizeof(P2PManager), 64 + sizeof(::Oculus::Platform::Samples::VrHoops::P2PManager::StartTimeOffer*)> __Oculus_Platform_Samples_VrHoops_P2PManagerSizeCheck;
  static_assert(sizeof(P2PManager) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::get_StartTimeOfferCallback
// Il2CppName: get_StartTimeOfferCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Platform::Samples::VrHoops::P2PManager::StartTimeOffer* (Oculus::Platform::Samples::VrHoops::P2PManager::*)()>(&Oculus::Platform::Samples::VrHoops::P2PManager::get_StartTimeOfferCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "get_StartTimeOfferCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::set_StartTimeOfferCallback
// Il2CppName: set_StartTimeOfferCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(::Oculus::Platform::Samples::VrHoops::P2PManager::StartTimeOffer*)>(&Oculus::Platform::Samples::VrHoops::P2PManager::set_StartTimeOfferCallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Platform.Samples.VrHoops", "P2PManager/StartTimeOffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "set_StartTimeOfferCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::UpdateNetwork
// Il2CppName: UpdateNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)()>(&Oculus::Platform::Samples::VrHoops::P2PManager::UpdateNetwork)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "UpdateNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::AddRemotePlayer
// Il2CppName: AddRemotePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(::Oculus::Platform::Samples::VrHoops::RemotePlayer*)>(&Oculus::Platform::Samples::VrHoops::P2PManager::AddRemotePlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Oculus.Platform.Samples.VrHoops", "RemotePlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "AddRemotePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::DisconnectAll
// Il2CppName: DisconnectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)()>(&Oculus::Platform::Samples::VrHoops::P2PManager::DisconnectAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "DisconnectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::PeerConnectRequestCallback
// Il2CppName: PeerConnectRequestCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::NetworkingPeer*>*)>(&Oculus::Platform::Samples::VrHoops::P2PManager::PeerConnectRequestCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "NetworkingPeer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "PeerConnectRequestCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::ConnectionStateChangedCallback
// Il2CppName: ConnectionStateChangedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::NetworkingPeer*>*)>(&Oculus::Platform::Samples::VrHoops::P2PManager::ConnectionStateChangedCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "NetworkingPeer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "ConnectionStateChangedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::SendTimeSyncMessage
// Il2CppName: SendTimeSyncMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(uint64_t)>(&Oculus::Platform::Samples::VrHoops::P2PManager::SendTimeSyncMessage)> {
  static const MethodInfo* get() {
    static auto* remoteID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "SendTimeSyncMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteID});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::ReadTimeSyncMessage
// Il2CppName: ReadTimeSyncMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(uint64_t, ::ArrayW<uint8_t>)>(&Oculus::Platform::Samples::VrHoops::P2PManager::ReadTimeSyncMessage)> {
  static const MethodInfo* get() {
    static auto* remoteID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* msg = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "ReadTimeSyncMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteID, msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::ShiftRemoteTime
// Il2CppName: ShiftRemoteTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Platform::Samples::VrHoops::P2PManager::*)(uint64_t, float)>(&Oculus::Platform::Samples::VrHoops::P2PManager::ShiftRemoteTime)> {
  static const MethodInfo* get() {
    static auto* remoteID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* remoteTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "ShiftRemoteTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteID, remoteTime});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::OfferMatchStartTime
// Il2CppName: OfferMatchStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)()>(&Oculus::Platform::Samples::VrHoops::P2PManager::OfferMatchStartTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "OfferMatchStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::ReceiveMatchStartTimeOffer
// Il2CppName: ReceiveMatchStartTimeOffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(uint64_t, ::ArrayW<uint8_t>)>(&Oculus::Platform::Samples::VrHoops::P2PManager::ReceiveMatchStartTimeOffer)> {
  static const MethodInfo* get() {
    static auto* remoteID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* msg = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "ReceiveMatchStartTimeOffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteID, msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::SendBackboardUpdate
// Il2CppName: SendBackboardUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(float, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Oculus::Platform::Samples::VrHoops::P2PManager::SendBackboardUpdate)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* moveDir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* nextMoveDir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "SendBackboardUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, pos, moveDir, nextMoveDir});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::ReceiveBackboardUpdate
// Il2CppName: ReceiveBackboardUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(uint64_t, ::ArrayW<uint8_t>)>(&Oculus::Platform::Samples::VrHoops::P2PManager::ReceiveBackboardUpdate)> {
  static const MethodInfo* get() {
    static auto* remoteID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* msg = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "ReceiveBackboardUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteID, msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::AddNetworkBall
// Il2CppName: AddNetworkBall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(::UnityEngine::GameObject*)>(&Oculus::Platform::Samples::VrHoops::P2PManager::AddNetworkBall)> {
  static const MethodInfo* get() {
    static auto* ball = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "AddNetworkBall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ball});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::RemoveNetworkBall
// Il2CppName: RemoveNetworkBall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(::UnityEngine::GameObject*)>(&Oculus::Platform::Samples::VrHoops::P2PManager::RemoveNetworkBall)> {
  static const MethodInfo* get() {
    static auto* ball = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "RemoveNetworkBall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ball});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::SendLocalBallTransforms
// Il2CppName: SendLocalBallTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)()>(&Oculus::Platform::Samples::VrHoops::P2PManager::SendLocalBallTransforms)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "SendLocalBallTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::ReceiveBallTransforms
// Il2CppName: ReceiveBallTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(uint64_t, ::ArrayW<uint8_t>, uint64_t)>(&Oculus::Platform::Samples::VrHoops::P2PManager::ReceiveBallTransforms)> {
  static const MethodInfo* get() {
    static auto* remoteID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* msg = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* msgLength = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "ReceiveBallTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteID, msg, msgLength});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::SendScoreUpdate
// Il2CppName: SendScoreUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(uint)>(&Oculus::Platform::Samples::VrHoops::P2PManager::SendScoreUpdate)> {
  static const MethodInfo* get() {
    static auto* score = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "SendScoreUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{score});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::ReceiveScoredUpdate
// Il2CppName: ReceiveScoredUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(uint64_t, ::ArrayW<uint8_t>)>(&Oculus::Platform::Samples::VrHoops::P2PManager::ReceiveScoredUpdate)> {
  static const MethodInfo* get() {
    static auto* remoteID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* msg = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "ReceiveScoredUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteID, msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::PackVector3
// Il2CppName: PackVector3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(::UnityEngine::Vector3, ::ArrayW<uint8_t>, ByRef<int>)>(&Oculus::Platform::Samples::VrHoops::P2PManager::PackVector3)> {
  static const MethodInfo* get() {
    static auto* vec = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "PackVector3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vec, buf, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::UnpackVector3
// Il2CppName: UnpackVector3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Platform::Samples::VrHoops::P2PManager::*)(::ArrayW<uint8_t>, ByRef<int>)>(&Oculus::Platform::Samples::VrHoops::P2PManager::UnpackVector3)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "UnpackVector3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::PackQuaternion
// Il2CppName: PackQuaternion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(::UnityEngine::Quaternion, ::ArrayW<uint8_t>, ByRef<int>)>(&Oculus::Platform::Samples::VrHoops::P2PManager::PackQuaternion)> {
  static const MethodInfo* get() {
    static auto* quat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "PackQuaternion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{quat, buf, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::PackFloat
// Il2CppName: PackFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(float, ::ArrayW<uint8_t>, ByRef<int>)>(&Oculus::Platform::Samples::VrHoops::P2PManager::PackFloat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "PackFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buf, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::UnpackFloat
// Il2CppName: UnpackFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Platform::Samples::VrHoops::P2PManager::*)(::ArrayW<uint8_t>, ByRef<int>)>(&Oculus::Platform::Samples::VrHoops::P2PManager::UnpackFloat)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "UnpackFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::UnpackTime
// Il2CppName: UnpackTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Platform::Samples::VrHoops::P2PManager::*)(uint64_t, ::ArrayW<uint8_t>, ByRef<int>)>(&Oculus::Platform::Samples::VrHoops::P2PManager::UnpackTime)> {
  static const MethodInfo* get() {
    static auto* remoteID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "UnpackTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteID, buf, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::PackInt32
// Il2CppName: PackInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(int, ::ArrayW<uint8_t>, ByRef<int>)>(&Oculus::Platform::Samples::VrHoops::P2PManager::PackInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "PackInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buf, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::UnpackInt32
// Il2CppName: UnpackInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Platform::Samples::VrHoops::P2PManager::*)(::ArrayW<uint8_t>, ByRef<int>)>(&Oculus::Platform::Samples::VrHoops::P2PManager::UnpackInt32)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "UnpackInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::PackUint32
// Il2CppName: PackUint32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(uint, ::ArrayW<uint8_t>, ByRef<int>)>(&Oculus::Platform::Samples::VrHoops::P2PManager::PackUint32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "PackUint32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buf, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::UnpackUint32
// Il2CppName: UnpackUint32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Oculus::Platform::Samples::VrHoops::P2PManager::*)(::ArrayW<uint8_t>, ByRef<int>)>(&Oculus::Platform::Samples::VrHoops::P2PManager::UnpackUint32)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "UnpackUint32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::PackBool
// Il2CppName: PackBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PManager::*)(bool, ::ArrayW<uint8_t>, ByRef<int>)>(&Oculus::Platform::Samples::VrHoops::P2PManager::PackBool)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "PackBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buf, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::UnpackBool
// Il2CppName: UnpackBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Platform::Samples::VrHoops::P2PManager::*)(::ArrayW<uint8_t>, ByRef<int>)>(&Oculus::Platform::Samples::VrHoops::P2PManager::UnpackBool)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PManager*), "UnpackBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
