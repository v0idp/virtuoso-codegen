// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Collision
  class Collision;
}
// Completed forward declares
// Type namespace: Oculus.Platform.Samples.VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Forward declaring type: P2PNetworkBall
  class P2PNetworkBall;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Samples::VrHoops::P2PNetworkBall);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::VrHoops::P2PNetworkBall*, "Oculus.Platform.Samples.VrHoops", "P2PNetworkBall");
// Type namespace: Oculus.Platform.Samples.VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Samples.VrHoops.P2PNetworkBall
  // [TokenAttribute] Offset: FFFFFFFF
  class P2PNetworkBall : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single lastCollisionTime
    // Size: 0x4
    // Offset: 0x18
    float lastCollisionTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastCollisionTime and: rigidBody
    char __padding0[0x4] = {};
    // private UnityEngine.Rigidbody rigidBody
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rigidbody* rigidBody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single lastCollisionTime
    [[deprecated]] float& dyn_lastCollisionTime();
    // Get instance field reference: private UnityEngine.Rigidbody rigidBody
    [[deprecated]] ::UnityEngine::Rigidbody*& dyn_rigidBody();
    // public UnityEngine.Vector3 get_velocity()
    // Offset: 0xB54CC8
    ::UnityEngine::Vector3 get_velocity();
    // private System.Void Awake()
    // Offset: 0xB560D4
    void Awake();
    // public System.Boolean IsHeld()
    // Offset: 0xB54BB8
    bool IsHeld();
    // public System.Void ProcessRemoteUpdate(System.Single remoteTime, System.Boolean isHeld, UnityEngine.Vector3 pos, UnityEngine.Vector3 vel)
    // Offset: 0xB54DB8
    void ProcessRemoteUpdate(float remoteTime, bool isHeld, ::UnityEngine::Vector3 pos, ::UnityEngine::Vector3 vel);
    // private UnityEngine.Vector3 estimatePosition(UnityEngine.Vector3 startPosition, UnityEngine.Vector3 startVelocty, System.Single time)
    // Offset: 0xB56138
    ::UnityEngine::Vector3 estimatePosition(::UnityEngine::Vector3 startPosition, ::UnityEngine::Vector3 startVelocty, float time);
    // private UnityEngine.Vector3 estimateVelocity(UnityEngine.Vector3 startVelocity, System.Single time)
    // Offset: 0xB561B0
    ::UnityEngine::Vector3 estimateVelocity(::UnityEngine::Vector3 startVelocity, float time);
    // private System.Void OnCollisionEnter(UnityEngine.Collision collision)
    // Offset: 0xB56250
    void OnCollisionEnter(::UnityEngine::Collision* collision);
    // private System.Void OnDestroy()
    // Offset: 0xB56278
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0xB562B8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static P2PNetworkBall* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Samples::VrHoops::P2PNetworkBall::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<P2PNetworkBall*, creationType>()));
    }
  }; // Oculus.Platform.Samples.VrHoops.P2PNetworkBall
  #pragma pack(pop)
  static check_size<sizeof(P2PNetworkBall), 32 + sizeof(::UnityEngine::Rigidbody*)> __Oculus_Platform_Samples_VrHoops_P2PNetworkBallSizeCheck;
  static_assert(sizeof(P2PNetworkBall) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PNetworkBall::get_velocity
// Il2CppName: get_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Platform::Samples::VrHoops::P2PNetworkBall::*)()>(&Oculus::Platform::Samples::VrHoops::P2PNetworkBall::get_velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PNetworkBall*), "get_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PNetworkBall::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PNetworkBall::*)()>(&Oculus::Platform::Samples::VrHoops::P2PNetworkBall::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PNetworkBall*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PNetworkBall::IsHeld
// Il2CppName: IsHeld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Platform::Samples::VrHoops::P2PNetworkBall::*)()>(&Oculus::Platform::Samples::VrHoops::P2PNetworkBall::IsHeld)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PNetworkBall*), "IsHeld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PNetworkBall::ProcessRemoteUpdate
// Il2CppName: ProcessRemoteUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PNetworkBall::*)(float, bool, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Oculus::Platform::Samples::VrHoops::P2PNetworkBall::ProcessRemoteUpdate)> {
  static const MethodInfo* get() {
    static auto* remoteTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* isHeld = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* vel = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PNetworkBall*), "ProcessRemoteUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteTime, isHeld, pos, vel});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PNetworkBall::estimatePosition
// Il2CppName: estimatePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Platform::Samples::VrHoops::P2PNetworkBall::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Oculus::Platform::Samples::VrHoops::P2PNetworkBall::estimatePosition)> {
  static const MethodInfo* get() {
    static auto* startPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* startVelocty = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PNetworkBall*), "estimatePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startPosition, startVelocty, time});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PNetworkBall::estimateVelocity
// Il2CppName: estimateVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Platform::Samples::VrHoops::P2PNetworkBall::*)(::UnityEngine::Vector3, float)>(&Oculus::Platform::Samples::VrHoops::P2PNetworkBall::estimateVelocity)> {
  static const MethodInfo* get() {
    static auto* startVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PNetworkBall*), "estimateVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startVelocity, time});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PNetworkBall::OnCollisionEnter
// Il2CppName: OnCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PNetworkBall::*)(::UnityEngine::Collision*)>(&Oculus::Platform::Samples::VrHoops::P2PNetworkBall::OnCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PNetworkBall*), "OnCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PNetworkBall::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PNetworkBall::*)()>(&Oculus::Platform::Samples::VrHoops::P2PNetworkBall::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PNetworkBall*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PNetworkBall::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
