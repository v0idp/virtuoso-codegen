// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Platform::Samples::VrHoops
namespace Oculus::Platform::Samples::VrHoops {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: User
  class User;
  // Forward declaring type: Room
  class Room;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message
  class Message;
  // Forward declaring type: Message`1<T>
  template<typename T>
  class Message_1;
}
// Completed forward declares
// Type namespace: Oculus.Platform.Samples.VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Forward declaring type: MatchmakingManager
  class MatchmakingManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Samples::VrHoops::MatchmakingManager);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::VrHoops::MatchmakingManager*, "Oculus.Platform.Samples.VrHoops", "MatchmakingManager");
// Type namespace: Oculus.Platform.Samples.VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Samples.VrHoops.MatchmakingManager
  // [TokenAttribute] Offset: FFFFFFFF
  class MatchmakingManager : public ::Il2CppObject {
    public:
    // Nested type: ::Oculus::Platform::Samples::VrHoops::MatchmakingManager::OnEnqueueResult
    class OnEnqueueResult;
    // Nested type: ::Oculus::Platform::Samples::VrHoops::MatchmakingManager::OnMatchPlayerAdded
    class OnMatchPlayerAdded;
    public:
    // private System.UInt64 m_matchRoom
    // Size: 0x8
    // Offset: 0x10
    uint64_t m_matchRoom;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.UInt64,Oculus.Platform.Models.User> m_remotePlayers
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<uint64_t, ::Oculus::Platform::Models::User*>* m_remotePlayers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint64_t, ::Oculus::Platform::Models::User*>*) == 0x8);
    // private Oculus.Platform.Samples.VrHoops.MatchmakingManager/Oculus.Platform.Samples.VrHoops.OnEnqueueResult m_enqueueCallback
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Platform::Samples::VrHoops::MatchmakingManager::OnEnqueueResult* m_enqueueCallback;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::VrHoops::MatchmakingManager::OnEnqueueResult*) == 0x8);
    // private Oculus.Platform.Samples.VrHoops.MatchmakingManager/Oculus.Platform.Samples.VrHoops.OnMatchPlayerAdded m_playerCallback
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Platform::Samples::VrHoops::MatchmakingManager::OnMatchPlayerAdded* m_playerCallback;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::VrHoops::MatchmakingManager::OnMatchPlayerAdded*) == 0x8);
    public:
    // static field const value: static private System.String NORMAL_POOL
    static constexpr const char* NORMAL_POOL = "NORMAL_QUICKMATCH";
    // Get static field: static private System.String NORMAL_POOL
    static ::StringW _get_NORMAL_POOL();
    // Set static field: static private System.String NORMAL_POOL
    static void _set_NORMAL_POOL(::StringW value);
    // Get instance field reference: private System.UInt64 m_matchRoom
    [[deprecated]] uint64_t& dyn_m_matchRoom();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.UInt64,Oculus.Platform.Models.User> m_remotePlayers
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<uint64_t, ::Oculus::Platform::Models::User*>*& dyn_m_remotePlayers();
    // Get instance field reference: private Oculus.Platform.Samples.VrHoops.MatchmakingManager/Oculus.Platform.Samples.VrHoops.OnEnqueueResult m_enqueueCallback
    [[deprecated]] ::Oculus::Platform::Samples::VrHoops::MatchmakingManager::OnEnqueueResult*& dyn_m_enqueueCallback();
    // Get instance field reference: private Oculus.Platform.Samples.VrHoops.MatchmakingManager/Oculus.Platform.Samples.VrHoops.OnMatchPlayerAdded m_playerCallback
    [[deprecated]] ::Oculus::Platform::Samples::VrHoops::MatchmakingManager::OnMatchPlayerAdded*& dyn_m_playerCallback();
    // private Oculus.Platform.Samples.VrHoops.MatchmakingManager/Oculus.Platform.Samples.VrHoops.OnEnqueueResult get_EnqueueResultCallback()
    // Offset: 0xB44B4C
    ::Oculus::Platform::Samples::VrHoops::MatchmakingManager::OnEnqueueResult* get_EnqueueResultCallback();
    // public System.Void set_EnqueueResultCallback(Oculus.Platform.Samples.VrHoops.MatchmakingManager/Oculus.Platform.Samples.VrHoops.OnEnqueueResult value)
    // Offset: 0xB44B54
    void set_EnqueueResultCallback(::Oculus::Platform::Samples::VrHoops::MatchmakingManager::OnEnqueueResult* value);
    // private Oculus.Platform.Samples.VrHoops.MatchmakingManager/Oculus.Platform.Samples.VrHoops.OnMatchPlayerAdded get_MatchPlayerAddedCallback()
    // Offset: 0xB44B5C
    ::Oculus::Platform::Samples::VrHoops::MatchmakingManager::OnMatchPlayerAdded* get_MatchPlayerAddedCallback();
    // public System.Void set_MatchPlayerAddedCallback(Oculus.Platform.Samples.VrHoops.MatchmakingManager/Oculus.Platform.Samples.VrHoops.OnMatchPlayerAdded value)
    // Offset: 0xB44B64
    void set_MatchPlayerAddedCallback(::Oculus::Platform::Samples::VrHoops::MatchmakingManager::OnMatchPlayerAdded* value);
    // public System.Void QueueForMatch()
    // Offset: 0xB3F618
    void QueueForMatch();
    // private System.Void MatchmakingEnqueueCallback(Oculus.Platform.Message msg)
    // Offset: 0xB44B6C
    void MatchmakingEnqueueCallback(::Oculus::Platform::Message* msg);
    // private System.Void MatchFoundCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.Room> msg)
    // Offset: 0xB44C2C
    void MatchFoundCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>* msg);
    // private System.Void MatchmakingJoinRoomCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.Room> msg)
    // Offset: 0xB44D24
    void MatchmakingJoinRoomCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>* msg);
    // private System.Void MatchmakingRoomUpdateCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.Room> msg)
    // Offset: 0xB45390
    void MatchmakingRoomUpdateCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>* msg);
    // public System.Void EndMatch()
    // Offset: 0xB3F140
    void EndMatch();
    // public System.Void LeaveQueue()
    // Offset: 0xB3F6F8
    void LeaveQueue();
    // public System.Void .ctor()
    // Offset: 0xB44A30
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MatchmakingManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Samples::VrHoops::MatchmakingManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MatchmakingManager*, creationType>()));
    }
  }; // Oculus.Platform.Samples.VrHoops.MatchmakingManager
  #pragma pack(pop)
  static check_size<sizeof(MatchmakingManager), 40 + sizeof(::Oculus::Platform::Samples::VrHoops::MatchmakingManager::OnMatchPlayerAdded*)> __Oculus_Platform_Samples_VrHoops_MatchmakingManagerSizeCheck;
  static_assert(sizeof(MatchmakingManager) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::MatchmakingManager::get_EnqueueResultCallback
// Il2CppName: get_EnqueueResultCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Platform::Samples::VrHoops::MatchmakingManager::OnEnqueueResult* (Oculus::Platform::Samples::VrHoops::MatchmakingManager::*)()>(&Oculus::Platform::Samples::VrHoops::MatchmakingManager::get_EnqueueResultCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::MatchmakingManager*), "get_EnqueueResultCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::MatchmakingManager::set_EnqueueResultCallback
// Il2CppName: set_EnqueueResultCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::MatchmakingManager::*)(::Oculus::Platform::Samples::VrHoops::MatchmakingManager::OnEnqueueResult*)>(&Oculus::Platform::Samples::VrHoops::MatchmakingManager::set_EnqueueResultCallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Platform.Samples.VrHoops", "MatchmakingManager/OnEnqueueResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::MatchmakingManager*), "set_EnqueueResultCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::MatchmakingManager::get_MatchPlayerAddedCallback
// Il2CppName: get_MatchPlayerAddedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Platform::Samples::VrHoops::MatchmakingManager::OnMatchPlayerAdded* (Oculus::Platform::Samples::VrHoops::MatchmakingManager::*)()>(&Oculus::Platform::Samples::VrHoops::MatchmakingManager::get_MatchPlayerAddedCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::MatchmakingManager*), "get_MatchPlayerAddedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::MatchmakingManager::set_MatchPlayerAddedCallback
// Il2CppName: set_MatchPlayerAddedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::MatchmakingManager::*)(::Oculus::Platform::Samples::VrHoops::MatchmakingManager::OnMatchPlayerAdded*)>(&Oculus::Platform::Samples::VrHoops::MatchmakingManager::set_MatchPlayerAddedCallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Platform.Samples.VrHoops", "MatchmakingManager/OnMatchPlayerAdded")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::MatchmakingManager*), "set_MatchPlayerAddedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::MatchmakingManager::QueueForMatch
// Il2CppName: QueueForMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::MatchmakingManager::*)()>(&Oculus::Platform::Samples::VrHoops::MatchmakingManager::QueueForMatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::MatchmakingManager*), "QueueForMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::MatchmakingManager::MatchmakingEnqueueCallback
// Il2CppName: MatchmakingEnqueueCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::MatchmakingManager::*)(::Oculus::Platform::Message*)>(&Oculus::Platform::Samples::VrHoops::MatchmakingManager::MatchmakingEnqueueCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::MatchmakingManager*), "MatchmakingEnqueueCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::MatchmakingManager::MatchFoundCallback
// Il2CppName: MatchFoundCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::MatchmakingManager::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>*)>(&Oculus::Platform::Samples::VrHoops::MatchmakingManager::MatchFoundCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "Room")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::MatchmakingManager*), "MatchFoundCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::MatchmakingManager::MatchmakingJoinRoomCallback
// Il2CppName: MatchmakingJoinRoomCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::MatchmakingManager::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>*)>(&Oculus::Platform::Samples::VrHoops::MatchmakingManager::MatchmakingJoinRoomCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "Room")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::MatchmakingManager*), "MatchmakingJoinRoomCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::MatchmakingManager::MatchmakingRoomUpdateCallback
// Il2CppName: MatchmakingRoomUpdateCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::MatchmakingManager::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>*)>(&Oculus::Platform::Samples::VrHoops::MatchmakingManager::MatchmakingRoomUpdateCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "Room")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::MatchmakingManager*), "MatchmakingRoomUpdateCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::MatchmakingManager::EndMatch
// Il2CppName: EndMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::MatchmakingManager::*)()>(&Oculus::Platform::Samples::VrHoops::MatchmakingManager::EndMatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::MatchmakingManager*), "EndMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::MatchmakingManager::LeaveQueue
// Il2CppName: LeaveQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::MatchmakingManager::*)()>(&Oculus::Platform::Samples::VrHoops::MatchmakingManager::LeaveQueue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::MatchmakingManager*), "LeaveQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::MatchmakingManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
