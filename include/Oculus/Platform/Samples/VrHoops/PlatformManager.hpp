// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Platform::Samples::VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Forward declaring type: MatchmakingManager
  class MatchmakingManager;
  // Forward declaring type: P2PManager
  class P2PManager;
  // Forward declaring type: LeaderboardManager
  class LeaderboardManager;
  // Forward declaring type: AchievementsManager
  class AchievementsManager;
  // Skipping declaration: State because it is already included!
}
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message
  class Message;
  // Forward declaring type: Message`1<T>
  template<typename T>
  class Message_1;
}
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: User
  class User;
}
// Completed forward declares
// Type namespace: Oculus.Platform.Samples.VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Forward declaring type: PlatformManager
  class PlatformManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Samples::VrHoops::PlatformManager);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::VrHoops::PlatformManager*, "Oculus.Platform.Samples.VrHoops", "PlatformManager");
// Type namespace: Oculus.Platform.Samples.VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Samples.VrHoops.PlatformManager
  // [TokenAttribute] Offset: FFFFFFFF
  class PlatformManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Platform::Samples::VrHoops::PlatformManager::State
    struct State;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State INITIALIZING
      static constexpr const int INITIALIZING = 0;
      // Get static field: static public Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State INITIALIZING
      static ::Oculus::Platform::Samples::VrHoops::PlatformManager::State _get_INITIALIZING();
      // Set static field: static public Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State INITIALIZING
      static void _set_INITIALIZING(::Oculus::Platform::Samples::VrHoops::PlatformManager::State value);
      // static field const value: static public Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State WAITING_TO_PRACTICE_OR_MATCHMAKE
      static constexpr const int WAITING_TO_PRACTICE_OR_MATCHMAKE = 1;
      // Get static field: static public Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State WAITING_TO_PRACTICE_OR_MATCHMAKE
      static ::Oculus::Platform::Samples::VrHoops::PlatformManager::State _get_WAITING_TO_PRACTICE_OR_MATCHMAKE();
      // Set static field: static public Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State WAITING_TO_PRACTICE_OR_MATCHMAKE
      static void _set_WAITING_TO_PRACTICE_OR_MATCHMAKE(::Oculus::Platform::Samples::VrHoops::PlatformManager::State value);
      // static field const value: static public Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State MATCH_TRANSITION
      static constexpr const int MATCH_TRANSITION = 2;
      // Get static field: static public Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State MATCH_TRANSITION
      static ::Oculus::Platform::Samples::VrHoops::PlatformManager::State _get_MATCH_TRANSITION();
      // Set static field: static public Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State MATCH_TRANSITION
      static void _set_MATCH_TRANSITION(::Oculus::Platform::Samples::VrHoops::PlatformManager::State value);
      // static field const value: static public Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State PLAYING_A_LOCAL_MATCH
      static constexpr const int PLAYING_A_LOCAL_MATCH = 3;
      // Get static field: static public Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State PLAYING_A_LOCAL_MATCH
      static ::Oculus::Platform::Samples::VrHoops::PlatformManager::State _get_PLAYING_A_LOCAL_MATCH();
      // Set static field: static public Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State PLAYING_A_LOCAL_MATCH
      static void _set_PLAYING_A_LOCAL_MATCH(::Oculus::Platform::Samples::VrHoops::PlatformManager::State value);
      // static field const value: static public Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State PLAYING_A_NETWORKED_MATCH
      static constexpr const int PLAYING_A_NETWORKED_MATCH = 4;
      // Get static field: static public Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State PLAYING_A_NETWORKED_MATCH
      static ::Oculus::Platform::Samples::VrHoops::PlatformManager::State _get_PLAYING_A_NETWORKED_MATCH();
      // Set static field: static public Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State PLAYING_A_NETWORKED_MATCH
      static void _set_PLAYING_A_NETWORKED_MATCH(::Oculus::Platform::Samples::VrHoops::PlatformManager::State value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated]] int& dyn_value__();
    }; // Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State
    #pragma pack(pop)
    static check_size<sizeof(PlatformManager::State), 0 + sizeof(int)> __Oculus_Platform_Samples_VrHoops_PlatformManager_StateSizeCheck;
    static_assert(sizeof(PlatformManager::State) == 0x4);
    public:
    // private Oculus.Platform.Samples.VrHoops.MatchmakingManager m_matchmaking
    // Size: 0x8
    // Offset: 0x18
    ::Oculus::Platform::Samples::VrHoops::MatchmakingManager* m_matchmaking;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::VrHoops::MatchmakingManager*) == 0x8);
    // private Oculus.Platform.Samples.VrHoops.P2PManager m_p2p
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Platform::Samples::VrHoops::P2PManager* m_p2p;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::VrHoops::P2PManager*) == 0x8);
    // private Oculus.Platform.Samples.VrHoops.LeaderboardManager m_leaderboards
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Platform::Samples::VrHoops::LeaderboardManager* m_leaderboards;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::VrHoops::LeaderboardManager*) == 0x8);
    // private Oculus.Platform.Samples.VrHoops.AchievementsManager m_achievements
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Platform::Samples::VrHoops::AchievementsManager* m_achievements;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::VrHoops::AchievementsManager*) == 0x8);
    // private Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State m_currentState
    // Size: 0x4
    // Offset: 0x38
    ::Oculus::Platform::Samples::VrHoops::PlatformManager::State m_currentState;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::VrHoops::PlatformManager::State) == 0x4);
    // Padding between fields: m_currentState and: m_myID
    char __padding4[0x4] = {};
    // private System.UInt64 m_myID
    // Size: 0x8
    // Offset: 0x40
    uint64_t m_myID;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.String m_myOculusID
    // Size: 0x8
    // Offset: 0x48
    ::StringW m_myOculusID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private Oculus.Platform.Samples.VrHoops.PlatformManager s_instance
    static ::Oculus::Platform::Samples::VrHoops::PlatformManager* _get_s_instance();
    // Set static field: static private Oculus.Platform.Samples.VrHoops.PlatformManager s_instance
    static void _set_s_instance(::Oculus::Platform::Samples::VrHoops::PlatformManager* value);
    // Get instance field reference: private Oculus.Platform.Samples.VrHoops.MatchmakingManager m_matchmaking
    [[deprecated]] ::Oculus::Platform::Samples::VrHoops::MatchmakingManager*& dyn_m_matchmaking();
    // Get instance field reference: private Oculus.Platform.Samples.VrHoops.P2PManager m_p2p
    [[deprecated]] ::Oculus::Platform::Samples::VrHoops::P2PManager*& dyn_m_p2p();
    // Get instance field reference: private Oculus.Platform.Samples.VrHoops.LeaderboardManager m_leaderboards
    [[deprecated]] ::Oculus::Platform::Samples::VrHoops::LeaderboardManager*& dyn_m_leaderboards();
    // Get instance field reference: private Oculus.Platform.Samples.VrHoops.AchievementsManager m_achievements
    [[deprecated]] ::Oculus::Platform::Samples::VrHoops::AchievementsManager*& dyn_m_achievements();
    // Get instance field reference: private Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State m_currentState
    [[deprecated]] ::Oculus::Platform::Samples::VrHoops::PlatformManager::State& dyn_m_currentState();
    // Get instance field reference: private System.UInt64 m_myID
    [[deprecated]] uint64_t& dyn_m_myID();
    // Get instance field reference: private System.String m_myOculusID
    [[deprecated]] ::StringW& dyn_m_myOculusID();
    // static public Oculus.Platform.Samples.VrHoops.MatchmakingManager get_Matchmaking()
    // Offset: 0xB3E23C
    static ::Oculus::Platform::Samples::VrHoops::MatchmakingManager* get_Matchmaking();
    // static public Oculus.Platform.Samples.VrHoops.P2PManager get_P2P()
    // Offset: 0xB3DC8C
    static ::Oculus::Platform::Samples::VrHoops::P2PManager* get_P2P();
    // static public Oculus.Platform.Samples.VrHoops.LeaderboardManager get_Leaderboards()
    // Offset: 0xB3E294
    static ::Oculus::Platform::Samples::VrHoops::LeaderboardManager* get_Leaderboards();
    // static public Oculus.Platform.Samples.VrHoops.AchievementsManager get_Achievements()
    // Offset: 0xB40438
    static ::Oculus::Platform::Samples::VrHoops::AchievementsManager* get_Achievements();
    // static public Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State get_CurrentState()
    // Offset: 0xB3BA38
    static ::Oculus::Platform::Samples::VrHoops::PlatformManager::State get_CurrentState();
    // static public System.UInt64 get_MyID()
    // Offset: 0xB3C2F8
    static uint64_t get_MyID();
    // static public System.String get_MyOculusID()
    // Offset: 0xB3F1B8
    static ::StringW get_MyOculusID();
    // private System.Void Update()
    // Offset: 0xB56EAC
    void Update();
    // private System.Void Awake()
    // Offset: 0xB56EE0
    void Awake();
    // private System.Void Start()
    // Offset: 0xB570E0
    void Start();
    // private System.Void IsEntitledCallback(Oculus.Platform.Message msg)
    // Offset: 0xB57180
    void IsEntitledCallback(::Oculus::Platform::Message* msg);
    // private System.Void GetLoggedInUserCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.User> msg)
    // Offset: 0xB5726C
    void GetLoggedInUserCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::User*>* msg);
    // static public System.Void TerminateWithError(Oculus.Platform.Message msg)
    // Offset: 0xB45788
    static void TerminateWithError(::Oculus::Platform::Message* msg);
    // public System.Void QuitButtonPressed()
    // Offset: 0xB5730C
    void QuitButtonPressed();
    // private System.Void OnApplicationQuit()
    // Offset: 0xB57314
    void OnApplicationQuit();
    // static public System.Void TransitionToState(Oculus.Platform.Samples.VrHoops.PlatformManager/Oculus.Platform.Samples.VrHoops.State newState)
    // Offset: 0xB3EA9C
    static void TransitionToState(::Oculus::Platform::Samples::VrHoops::PlatformManager::State newState);
    // public System.Void .ctor()
    // Offset: 0xB57344
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlatformManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Samples::VrHoops::PlatformManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlatformManager*, creationType>()));
    }
  }; // Oculus.Platform.Samples.VrHoops.PlatformManager
  #pragma pack(pop)
  static check_size<sizeof(PlatformManager), 72 + sizeof(::StringW)> __Oculus_Platform_Samples_VrHoops_PlatformManagerSizeCheck;
  static_assert(sizeof(PlatformManager) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::VrHoops::PlatformManager::State, "Oculus.Platform.Samples.VrHoops", "PlatformManager/State");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlatformManager::get_Matchmaking
// Il2CppName: get_Matchmaking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Platform::Samples::VrHoops::MatchmakingManager* (*)()>(&Oculus::Platform::Samples::VrHoops::PlatformManager::get_Matchmaking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlatformManager*), "get_Matchmaking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlatformManager::get_P2P
// Il2CppName: get_P2P
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Platform::Samples::VrHoops::P2PManager* (*)()>(&Oculus::Platform::Samples::VrHoops::PlatformManager::get_P2P)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlatformManager*), "get_P2P", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlatformManager::get_Leaderboards
// Il2CppName: get_Leaderboards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Platform::Samples::VrHoops::LeaderboardManager* (*)()>(&Oculus::Platform::Samples::VrHoops::PlatformManager::get_Leaderboards)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlatformManager*), "get_Leaderboards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlatformManager::get_Achievements
// Il2CppName: get_Achievements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Platform::Samples::VrHoops::AchievementsManager* (*)()>(&Oculus::Platform::Samples::VrHoops::PlatformManager::get_Achievements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlatformManager*), "get_Achievements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlatformManager::get_CurrentState
// Il2CppName: get_CurrentState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Platform::Samples::VrHoops::PlatformManager::State (*)()>(&Oculus::Platform::Samples::VrHoops::PlatformManager::get_CurrentState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlatformManager*), "get_CurrentState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlatformManager::get_MyID
// Il2CppName: get_MyID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)()>(&Oculus::Platform::Samples::VrHoops::PlatformManager::get_MyID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlatformManager*), "get_MyID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlatformManager::get_MyOculusID
// Il2CppName: get_MyOculusID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&Oculus::Platform::Samples::VrHoops::PlatformManager::get_MyOculusID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlatformManager*), "get_MyOculusID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlatformManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::PlatformManager::*)()>(&Oculus::Platform::Samples::VrHoops::PlatformManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlatformManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlatformManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::PlatformManager::*)()>(&Oculus::Platform::Samples::VrHoops::PlatformManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlatformManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlatformManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::PlatformManager::*)()>(&Oculus::Platform::Samples::VrHoops::PlatformManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlatformManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlatformManager::IsEntitledCallback
// Il2CppName: IsEntitledCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::PlatformManager::*)(::Oculus::Platform::Message*)>(&Oculus::Platform::Samples::VrHoops::PlatformManager::IsEntitledCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlatformManager*), "IsEntitledCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlatformManager::GetLoggedInUserCallback
// Il2CppName: GetLoggedInUserCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::PlatformManager::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::User*>*)>(&Oculus::Platform::Samples::VrHoops::PlatformManager::GetLoggedInUserCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "User")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlatformManager*), "GetLoggedInUserCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlatformManager::TerminateWithError
// Il2CppName: TerminateWithError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Oculus::Platform::Message*)>(&Oculus::Platform::Samples::VrHoops::PlatformManager::TerminateWithError)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlatformManager*), "TerminateWithError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlatformManager::QuitButtonPressed
// Il2CppName: QuitButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::PlatformManager::*)()>(&Oculus::Platform::Samples::VrHoops::PlatformManager::QuitButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlatformManager*), "QuitButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlatformManager::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::PlatformManager::*)()>(&Oculus::Platform::Samples::VrHoops::PlatformManager::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlatformManager*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlatformManager::TransitionToState
// Il2CppName: TransitionToState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Oculus::Platform::Samples::VrHoops::PlatformManager::State)>(&Oculus::Platform::Samples::VrHoops::PlatformManager::TransitionToState)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("Oculus.Platform.Samples.VrHoops", "PlatformManager/State")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlatformManager*), "TransitionToState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlatformManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
