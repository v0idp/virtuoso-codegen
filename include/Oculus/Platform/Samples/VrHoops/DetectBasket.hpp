// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Platform::Samples::VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: Oculus.Platform.Samples.VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Forward declaring type: DetectBasket
  class DetectBasket;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Samples::VrHoops::DetectBasket);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::VrHoops::DetectBasket*, "Oculus.Platform.Samples.VrHoops", "DetectBasket");
// Type namespace: Oculus.Platform.Samples.VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Samples.VrHoops.DetectBasket
  // [TokenAttribute] Offset: FFFFFFFF
  class DetectBasket : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Platform::Samples::VrHoops::DetectBasket::BasketPhase
    struct BasketPhase;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Platform.Samples.VrHoops.DetectBasket/Oculus.Platform.Samples.VrHoops.BasketPhase
    // [TokenAttribute] Offset: FFFFFFFF
    struct BasketPhase/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BasketPhase
      constexpr BasketPhase(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Platform.Samples.VrHoops.DetectBasket/Oculus.Platform.Samples.VrHoops.BasketPhase NONE
      static constexpr const int NONE = 0;
      // Get static field: static public Oculus.Platform.Samples.VrHoops.DetectBasket/Oculus.Platform.Samples.VrHoops.BasketPhase NONE
      static ::Oculus::Platform::Samples::VrHoops::DetectBasket::BasketPhase _get_NONE();
      // Set static field: static public Oculus.Platform.Samples.VrHoops.DetectBasket/Oculus.Platform.Samples.VrHoops.BasketPhase NONE
      static void _set_NONE(::Oculus::Platform::Samples::VrHoops::DetectBasket::BasketPhase value);
      // static field const value: static public Oculus.Platform.Samples.VrHoops.DetectBasket/Oculus.Platform.Samples.VrHoops.BasketPhase TOP
      static constexpr const int TOP = 1;
      // Get static field: static public Oculus.Platform.Samples.VrHoops.DetectBasket/Oculus.Platform.Samples.VrHoops.BasketPhase TOP
      static ::Oculus::Platform::Samples::VrHoops::DetectBasket::BasketPhase _get_TOP();
      // Set static field: static public Oculus.Platform.Samples.VrHoops.DetectBasket/Oculus.Platform.Samples.VrHoops.BasketPhase TOP
      static void _set_TOP(::Oculus::Platform::Samples::VrHoops::DetectBasket::BasketPhase value);
      // static field const value: static public Oculus.Platform.Samples.VrHoops.DetectBasket/Oculus.Platform.Samples.VrHoops.BasketPhase BOTH
      static constexpr const int BOTH = 2;
      // Get static field: static public Oculus.Platform.Samples.VrHoops.DetectBasket/Oculus.Platform.Samples.VrHoops.BasketPhase BOTH
      static ::Oculus::Platform::Samples::VrHoops::DetectBasket::BasketPhase _get_BOTH();
      // Set static field: static public Oculus.Platform.Samples.VrHoops.DetectBasket/Oculus.Platform.Samples.VrHoops.BasketPhase BOTH
      static void _set_BOTH(::Oculus::Platform::Samples::VrHoops::DetectBasket::BasketPhase value);
      // static field const value: static public Oculus.Platform.Samples.VrHoops.DetectBasket/Oculus.Platform.Samples.VrHoops.BasketPhase BOTTOM
      static constexpr const int BOTTOM = 3;
      // Get static field: static public Oculus.Platform.Samples.VrHoops.DetectBasket/Oculus.Platform.Samples.VrHoops.BasketPhase BOTTOM
      static ::Oculus::Platform::Samples::VrHoops::DetectBasket::BasketPhase _get_BOTTOM();
      // Set static field: static public Oculus.Platform.Samples.VrHoops.DetectBasket/Oculus.Platform.Samples.VrHoops.BasketPhase BOTTOM
      static void _set_BOTTOM(::Oculus::Platform::Samples::VrHoops::DetectBasket::BasketPhase value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // Oculus.Platform.Samples.VrHoops.DetectBasket/Oculus.Platform.Samples.VrHoops.BasketPhase
    #pragma pack(pop)
    static check_size<sizeof(DetectBasket::BasketPhase), 0 + sizeof(int)> __Oculus_Platform_Samples_VrHoops_DetectBasket_BasketPhaseSizeCheck;
    static_assert(sizeof(DetectBasket::BasketPhase) == 0x4);
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private Oculus.Platform.Samples.VrHoops.DetectBasket/Oculus.Platform.Samples.VrHoops.BasketPhase m_phase
    // Size: 0x4
    // Offset: 0x18
    ::Oculus::Platform::Samples::VrHoops::DetectBasket::BasketPhase m_phase;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::VrHoops::DetectBasket::BasketPhase) == 0x4);
    // Padding between fields: m_phase and: m_owningPlayer
    char __padding0[0x4] = {};
    // private Oculus.Platform.Samples.VrHoops.Player m_owningPlayer
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Platform::Samples::VrHoops::Player* m_owningPlayer;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::VrHoops::Player*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private Oculus.Platform.Samples.VrHoops.DetectBasket/Oculus.Platform.Samples.VrHoops.BasketPhase m_phase
    ::Oculus::Platform::Samples::VrHoops::DetectBasket::BasketPhase& dyn_m_phase();
    // Get instance field reference: private Oculus.Platform.Samples.VrHoops.Player m_owningPlayer
    ::Oculus::Platform::Samples::VrHoops::Player*& dyn_m_owningPlayer();
    // public System.Void set_Player(Oculus.Platform.Samples.VrHoops.Player value)
    // Offset: 0x7E7828
    void set_Player(::Oculus::Platform::Samples::VrHoops::Player* value);
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x7E7830
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x7E7918
    void OnTriggerExit(::UnityEngine::Collider* other);
    // public System.Void .ctor()
    // Offset: 0x7E7A8C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DetectBasket* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Samples::VrHoops::DetectBasket::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DetectBasket*, creationType>()));
    }
  }; // Oculus.Platform.Samples.VrHoops.DetectBasket
  #pragma pack(pop)
  static check_size<sizeof(DetectBasket), 32 + sizeof(::Oculus::Platform::Samples::VrHoops::Player*)> __Oculus_Platform_Samples_VrHoops_DetectBasketSizeCheck;
  static_assert(sizeof(DetectBasket) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::VrHoops::DetectBasket::BasketPhase, "Oculus.Platform.Samples.VrHoops", "DetectBasket/BasketPhase");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::DetectBasket::set_Player
// Il2CppName: set_Player
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::DetectBasket::*)(::Oculus::Platform::Samples::VrHoops::Player*)>(&Oculus::Platform::Samples::VrHoops::DetectBasket::set_Player)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Platform.Samples.VrHoops", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::DetectBasket*), "set_Player", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::DetectBasket::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::DetectBasket::*)(::UnityEngine::Collider*)>(&Oculus::Platform::Samples::VrHoops::DetectBasket::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::DetectBasket*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::DetectBasket::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::DetectBasket::*)(::UnityEngine::Collider*)>(&Oculus::Platform::Samples::VrHoops::DetectBasket::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::DetectBasket*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::DetectBasket::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
