// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: Oculus::Platform::Samples::VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Forward declaring type: P2PNetworkGoal
  class P2PNetworkGoal;
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: Oculus.Platform.Samples.VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Forward declaring type: PlayerArea
  class PlayerArea;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Samples::VrHoops::PlayerArea);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::VrHoops::PlayerArea*, "Oculus.Platform.Samples.VrHoops", "PlayerArea");
// Type namespace: Oculus.Platform.Samples.VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Samples.VrHoops.PlayerArea
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayerArea : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.GameObject m_ballPrefab
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* m_ballPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject m_playerHead
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* m_playerHead;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.UI.Text m_nameText
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Text* m_nameText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private Oculus.Platform.Samples.VrHoops.P2PNetworkGoal m_p2pGoal
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Platform::Samples::VrHoops::P2PNetworkGoal* m_p2pGoal;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::VrHoops::P2PNetworkGoal*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.GameObject m_ballPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_ballPrefab();
    // Get instance field reference: private UnityEngine.GameObject m_playerHead
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_playerHead();
    // Get instance field reference: private UnityEngine.UI.Text m_nameText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_m_nameText();
    // Get instance field reference: private Oculus.Platform.Samples.VrHoops.P2PNetworkGoal m_p2pGoal
    [[deprecated("Use field access instead!")]] ::Oculus::Platform::Samples::VrHoops::P2PNetworkGoal*& dyn_m_p2pGoal();
    // public Oculus.Platform.Samples.VrHoops.Player get_Player()
    // Offset: 0x1712D78
    ::Oculus::Platform::Samples::VrHoops::Player* get_Player();
    // public UnityEngine.UI.Text get_NameText()
    // Offset: 0x1712DCC
    ::UnityEngine::UI::Text* get_NameText();
    // public System.Void .ctor()
    // Offset: 0x1712ED4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerArea* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Samples::VrHoops::PlayerArea::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerArea*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x1712DD4
    void Awake();
    // public T SetupForPlayer(System.String name)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T SetupForPlayer(::StringW name) {
      static_assert(std::is_convertible_v<T, ::Oculus::Platform::Samples::VrHoops::Player*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Samples::VrHoops::PlayerArea::SetupForPlayer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupForPlayer", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, name);
    }
  }; // Oculus.Platform.Samples.VrHoops.PlayerArea
  #pragma pack(pop)
  static check_size<sizeof(PlayerArea), 48 + sizeof(::Oculus::Platform::Samples::VrHoops::P2PNetworkGoal*)> __Oculus_Platform_Samples_VrHoops_PlayerAreaSizeCheck;
  static_assert(sizeof(PlayerArea) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlayerArea::get_Player
// Il2CppName: get_Player
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Platform::Samples::VrHoops::Player* (Oculus::Platform::Samples::VrHoops::PlayerArea::*)()>(&Oculus::Platform::Samples::VrHoops::PlayerArea::get_Player)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlayerArea*), "get_Player", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlayerArea::get_NameText
// Il2CppName: get_NameText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::Text* (Oculus::Platform::Samples::VrHoops::PlayerArea::*)()>(&Oculus::Platform::Samples::VrHoops::PlayerArea::get_NameText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlayerArea*), "get_NameText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlayerArea::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlayerArea::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::PlayerArea::*)()>(&Oculus::Platform::Samples::VrHoops::PlayerArea::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::PlayerArea*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::PlayerArea::SetupForPlayer
// Il2CppName: SetupForPlayer
// Cannot write MetadataGetter for generic methods!
