// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Platform::Samples::VrHoops
namespace Oculus::Platform::Samples::VrHoops {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: SortedDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class SortedDictionary_2;
}
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: LeaderboardEntry
  class LeaderboardEntry;
  // Forward declaring type: LeaderboardEntryList
  class LeaderboardEntryList;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message`1<T>
  template<typename T>
  class Message_1;
}
// Completed forward declares
// Type namespace: Oculus.Platform.Samples.VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Forward declaring type: LeaderboardManager
  class LeaderboardManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Samples::VrHoops::LeaderboardManager);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::VrHoops::LeaderboardManager*, "Oculus.Platform.Samples.VrHoops", "LeaderboardManager");
// Type namespace: Oculus.Platform.Samples.VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Samples.VrHoops.LeaderboardManager
  // [TokenAttribute] Offset: FFFFFFFF
  class LeaderboardManager : public ::Il2CppObject {
    public:
    // Nested type: ::Oculus::Platform::Samples::VrHoops::LeaderboardManager::OnMostWinsLeaderboardUpdated
    class OnMostWinsLeaderboardUpdated;
    // Nested type: ::Oculus::Platform::Samples::VrHoops::LeaderboardManager::OnHighScoreLeaderboardUpdated
    class OnHighScoreLeaderboardUpdated;
    public:
    // private System.Single m_nextCheckTime
    // Size: 0x4
    // Offset: 0x10
    float m_nextCheckTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_nextCheckTime and: m_mostWins
    char __padding0[0x4] = {};
    // private System.Collections.Generic.SortedDictionary`2<System.Int32,Oculus.Platform.Models.LeaderboardEntry> m_mostWins
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::SortedDictionary_2<int, ::Oculus::Platform::Models::LeaderboardEntry*>* m_mostWins;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::SortedDictionary_2<int, ::Oculus::Platform::Models::LeaderboardEntry*>*) == 0x8);
    // private System.Boolean m_foundLocalUserMostWinsEntry
    // Size: 0x1
    // Offset: 0x20
    bool m_foundLocalUserMostWinsEntry;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_foundLocalUserMostWinsEntry and: m_numWins
    char __padding2[0x7] = {};
    // private System.Int64 m_numWins
    // Size: 0x8
    // Offset: 0x28
    int64_t m_numWins;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private Oculus.Platform.Samples.VrHoops.LeaderboardManager/Oculus.Platform.Samples.VrHoops.OnMostWinsLeaderboardUpdated m_mostWinsCallback
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Platform::Samples::VrHoops::LeaderboardManager::OnMostWinsLeaderboardUpdated* m_mostWinsCallback;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::VrHoops::LeaderboardManager::OnMostWinsLeaderboardUpdated*) == 0x8);
    // private System.Collections.Generic.SortedDictionary`2<System.Int32,Oculus.Platform.Models.LeaderboardEntry> m_highScores
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::SortedDictionary_2<int, ::Oculus::Platform::Models::LeaderboardEntry*>* m_highScores;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::SortedDictionary_2<int, ::Oculus::Platform::Models::LeaderboardEntry*>*) == 0x8);
    // private System.Boolean m_foundLocalUserHighScore
    // Size: 0x1
    // Offset: 0x40
    bool m_foundLocalUserHighScore;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_foundLocalUserHighScore and: m_highScoreCallback
    char __padding6[0x7] = {};
    // private Oculus.Platform.Samples.VrHoops.LeaderboardManager/Oculus.Platform.Samples.VrHoops.OnHighScoreLeaderboardUpdated m_highScoreCallback
    // Size: 0x8
    // Offset: 0x48
    ::Oculus::Platform::Samples::VrHoops::LeaderboardManager::OnHighScoreLeaderboardUpdated* m_highScoreCallback;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::VrHoops::LeaderboardManager::OnHighScoreLeaderboardUpdated*) == 0x8);
    public:
    // static field const value: static private System.String MOST_MATCHES_WON
    static constexpr const char* MOST_MATCHES_WON = "MOST_MATCHES_WON";
    // Get static field: static private System.String MOST_MATCHES_WON
    static ::StringW _get_MOST_MATCHES_WON();
    // Set static field: static private System.String MOST_MATCHES_WON
    static void _set_MOST_MATCHES_WON(::StringW value);
    // static field const value: static private System.String HIGHEST_MATCH_SCORE
    static constexpr const char* HIGHEST_MATCH_SCORE = "HIGHEST_MATCH_SCORE";
    // Get static field: static private System.String HIGHEST_MATCH_SCORE
    static ::StringW _get_HIGHEST_MATCH_SCORE();
    // Set static field: static private System.String HIGHEST_MATCH_SCORE
    static void _set_HIGHEST_MATCH_SCORE(::StringW value);
    // static field const value: static private System.Int32 TOP_N_COUNT
    static constexpr const int TOP_N_COUNT = 5;
    // Get static field: static private System.Int32 TOP_N_COUNT
    static int _get_TOP_N_COUNT();
    // Set static field: static private System.Int32 TOP_N_COUNT
    static void _set_TOP_N_COUNT(int value);
    // static field const value: static private System.Single LEADERBOARD_POLL_FREQ
    static constexpr const float LEADERBOARD_POLL_FREQ = 30;
    // Get static field: static private System.Single LEADERBOARD_POLL_FREQ
    static float _get_LEADERBOARD_POLL_FREQ();
    // Set static field: static private System.Single LEADERBOARD_POLL_FREQ
    static void _set_LEADERBOARD_POLL_FREQ(float value);
    // Get instance field reference: private System.Single m_nextCheckTime
    [[deprecated("Use field access instead!")]] float& dyn_m_nextCheckTime();
    // Get instance field reference: private System.Collections.Generic.SortedDictionary`2<System.Int32,Oculus.Platform.Models.LeaderboardEntry> m_mostWins
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::SortedDictionary_2<int, ::Oculus::Platform::Models::LeaderboardEntry*>*& dyn_m_mostWins();
    // Get instance field reference: private System.Boolean m_foundLocalUserMostWinsEntry
    [[deprecated("Use field access instead!")]] bool& dyn_m_foundLocalUserMostWinsEntry();
    // Get instance field reference: private System.Int64 m_numWins
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_numWins();
    // Get instance field reference: private Oculus.Platform.Samples.VrHoops.LeaderboardManager/Oculus.Platform.Samples.VrHoops.OnMostWinsLeaderboardUpdated m_mostWinsCallback
    [[deprecated("Use field access instead!")]] ::Oculus::Platform::Samples::VrHoops::LeaderboardManager::OnMostWinsLeaderboardUpdated*& dyn_m_mostWinsCallback();
    // Get instance field reference: private System.Collections.Generic.SortedDictionary`2<System.Int32,Oculus.Platform.Models.LeaderboardEntry> m_highScores
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::SortedDictionary_2<int, ::Oculus::Platform::Models::LeaderboardEntry*>*& dyn_m_highScores();
    // Get instance field reference: private System.Boolean m_foundLocalUserHighScore
    [[deprecated("Use field access instead!")]] bool& dyn_m_foundLocalUserHighScore();
    // Get instance field reference: private Oculus.Platform.Samples.VrHoops.LeaderboardManager/Oculus.Platform.Samples.VrHoops.OnHighScoreLeaderboardUpdated m_highScoreCallback
    [[deprecated("Use field access instead!")]] ::Oculus::Platform::Samples::VrHoops::LeaderboardManager::OnHighScoreLeaderboardUpdated*& dyn_m_highScoreCallback();
    // public System.Void set_MostWinsLeaderboardUpdatedCallback(Oculus.Platform.Samples.VrHoops.LeaderboardManager/Oculus.Platform.Samples.VrHoops.OnMostWinsLeaderboardUpdated value)
    // Offset: 0xB3BD28
    void set_MostWinsLeaderboardUpdatedCallback(::Oculus::Platform::Samples::VrHoops::LeaderboardManager::OnMostWinsLeaderboardUpdated* value);
    // public System.Void set_HighScoreLeaderboardUpdatedCallback(Oculus.Platform.Samples.VrHoops.LeaderboardManager/Oculus.Platform.Samples.VrHoops.OnHighScoreLeaderboardUpdated value)
    // Offset: 0xB3C554
    void set_HighScoreLeaderboardUpdatedCallback(::Oculus::Platform::Samples::VrHoops::LeaderboardManager::OnHighScoreLeaderboardUpdated* value);
    // public System.Void .ctor()
    // Offset: 0xB3CBE4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LeaderboardManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Samples::VrHoops::LeaderboardManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LeaderboardManager*, creationType>()));
    }
    // public System.Void CheckForUpdates()
    // Offset: 0xB3B9D0
    void CheckForUpdates();
    // private System.Void QueryMostWinsLeaderboard()
    // Offset: 0xB3BA90
    void QueryMostWinsLeaderboard();
    // private System.Void MostWinsGetEntriesCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.LeaderboardEntryList> msg)
    // Offset: 0xB3BEE0
    void MostWinsGetEntriesCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::LeaderboardEntryList*>* msg);
    // private System.Void QueryHighScoreLeaderboard()
    // Offset: 0xB3BBDC
    void QueryHighScoreLeaderboard();
    // private System.Void HighestScoreGetEntriesCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.LeaderboardEntryList> msg)
    // Offset: 0xB3C55C
    void HighestScoreGetEntriesCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::LeaderboardEntryList*>* msg);
    // public System.Void SubmitMatchScores(System.Boolean wonMatch, System.UInt32 score)
    // Offset: 0xB3C96C
    void SubmitMatchScores(bool wonMatch, uint score);
  }; // Oculus.Platform.Samples.VrHoops.LeaderboardManager
  #pragma pack(pop)
  static check_size<sizeof(LeaderboardManager), 72 + sizeof(::Oculus::Platform::Samples::VrHoops::LeaderboardManager::OnHighScoreLeaderboardUpdated*)> __Oculus_Platform_Samples_VrHoops_LeaderboardManagerSizeCheck;
  static_assert(sizeof(LeaderboardManager) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::LeaderboardManager::set_MostWinsLeaderboardUpdatedCallback
// Il2CppName: set_MostWinsLeaderboardUpdatedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::LeaderboardManager::*)(::Oculus::Platform::Samples::VrHoops::LeaderboardManager::OnMostWinsLeaderboardUpdated*)>(&Oculus::Platform::Samples::VrHoops::LeaderboardManager::set_MostWinsLeaderboardUpdatedCallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Platform.Samples.VrHoops", "LeaderboardManager/OnMostWinsLeaderboardUpdated")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::LeaderboardManager*), "set_MostWinsLeaderboardUpdatedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::LeaderboardManager::set_HighScoreLeaderboardUpdatedCallback
// Il2CppName: set_HighScoreLeaderboardUpdatedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::LeaderboardManager::*)(::Oculus::Platform::Samples::VrHoops::LeaderboardManager::OnHighScoreLeaderboardUpdated*)>(&Oculus::Platform::Samples::VrHoops::LeaderboardManager::set_HighScoreLeaderboardUpdatedCallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Platform.Samples.VrHoops", "LeaderboardManager/OnHighScoreLeaderboardUpdated")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::LeaderboardManager*), "set_HighScoreLeaderboardUpdatedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::LeaderboardManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::LeaderboardManager::CheckForUpdates
// Il2CppName: CheckForUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::LeaderboardManager::*)()>(&Oculus::Platform::Samples::VrHoops::LeaderboardManager::CheckForUpdates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::LeaderboardManager*), "CheckForUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::LeaderboardManager::QueryMostWinsLeaderboard
// Il2CppName: QueryMostWinsLeaderboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::LeaderboardManager::*)()>(&Oculus::Platform::Samples::VrHoops::LeaderboardManager::QueryMostWinsLeaderboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::LeaderboardManager*), "QueryMostWinsLeaderboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::LeaderboardManager::MostWinsGetEntriesCallback
// Il2CppName: MostWinsGetEntriesCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::LeaderboardManager::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::LeaderboardEntryList*>*)>(&Oculus::Platform::Samples::VrHoops::LeaderboardManager::MostWinsGetEntriesCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "LeaderboardEntryList")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::LeaderboardManager*), "MostWinsGetEntriesCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::LeaderboardManager::QueryHighScoreLeaderboard
// Il2CppName: QueryHighScoreLeaderboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::LeaderboardManager::*)()>(&Oculus::Platform::Samples::VrHoops::LeaderboardManager::QueryHighScoreLeaderboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::LeaderboardManager*), "QueryHighScoreLeaderboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::LeaderboardManager::HighestScoreGetEntriesCallback
// Il2CppName: HighestScoreGetEntriesCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::LeaderboardManager::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::LeaderboardEntryList*>*)>(&Oculus::Platform::Samples::VrHoops::LeaderboardManager::HighestScoreGetEntriesCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "LeaderboardEntryList")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::LeaderboardManager*), "HighestScoreGetEntriesCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::LeaderboardManager::SubmitMatchScores
// Il2CppName: SubmitMatchScores
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::LeaderboardManager::*)(bool, uint)>(&Oculus::Platform::Samples::VrHoops::LeaderboardManager::SubmitMatchScores)> {
  static const MethodInfo* get() {
    static auto* wonMatch = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* score = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::LeaderboardManager*), "SubmitMatchScores", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wonMatch, score});
  }
};
