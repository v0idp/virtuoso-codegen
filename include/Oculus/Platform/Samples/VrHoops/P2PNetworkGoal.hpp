// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Platform::Samples::VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Forward declaring type: GoalMover
  class GoalMover;
}
// Completed forward declares
// Type namespace: Oculus.Platform.Samples.VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Forward declaring type: P2PNetworkGoal
  class P2PNetworkGoal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Samples::VrHoops::P2PNetworkGoal);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::VrHoops::P2PNetworkGoal*, "Oculus.Platform.Samples.VrHoops", "P2PNetworkGoal");
// Type namespace: Oculus.Platform.Samples.VrHoops
namespace Oculus::Platform::Samples::VrHoops {
  // Size: 0x2D
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Samples.VrHoops.P2PNetworkGoal
  // [TokenAttribute] Offset: FFFFFFFF
  class P2PNetworkGoal : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Oculus.Platform.Samples.VrHoops.GoalMover m_goal
    // Size: 0x8
    // Offset: 0x18
    ::Oculus::Platform::Samples::VrHoops::GoalMover* m_goal;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::VrHoops::GoalMover*) == 0x8);
    // private UnityEngine.Vector3 m_lastSentMoveDirection
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 m_lastSentMoveDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean m_sendUpdates
    // Size: 0x1
    // Offset: 0x2C
    bool m_sendUpdates;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private Oculus.Platform.Samples.VrHoops.GoalMover m_goal
    [[deprecated]] ::Oculus::Platform::Samples::VrHoops::GoalMover*& dyn_m_goal();
    // Get instance field reference: private UnityEngine.Vector3 m_lastSentMoveDirection
    [[deprecated]] ::UnityEngine::Vector3& dyn_m_lastSentMoveDirection();
    // Get instance field reference: private System.Boolean m_sendUpdates
    [[deprecated]] bool& dyn_m_sendUpdates();
    // public System.Void set_SendUpdates(System.Boolean value)
    // Offset: 0xB562C0
    void set_SendUpdates(bool value);
    // private System.Void Awake()
    // Offset: 0xB562CC
    void Awake();
    // private System.Void FixedUpdate()
    // Offset: 0xB56330
    void FixedUpdate();
    // public System.Void SendBackboardUpdate()
    // Offset: 0xB5638C
    void SendBackboardUpdate();
    // public System.Void RemoteBackboardUpdate(System.Single remoteTime, UnityEngine.Vector3 pos, UnityEngine.Vector3 moveDir, UnityEngine.Vector3 nextMoveDir)
    // Offset: 0xB549F4
    void RemoteBackboardUpdate(float remoteTime, ::UnityEngine::Vector3 pos, ::UnityEngine::Vector3 moveDir, ::UnityEngine::Vector3 nextMoveDir);
    // public System.Void .ctor()
    // Offset: 0xB56448
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static P2PNetworkGoal* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Samples::VrHoops::P2PNetworkGoal::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<P2PNetworkGoal*, creationType>()));
    }
  }; // Oculus.Platform.Samples.VrHoops.P2PNetworkGoal
  #pragma pack(pop)
  static check_size<sizeof(P2PNetworkGoal), 44 + sizeof(bool)> __Oculus_Platform_Samples_VrHoops_P2PNetworkGoalSizeCheck;
  static_assert(sizeof(P2PNetworkGoal) == 0x2D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PNetworkGoal::set_SendUpdates
// Il2CppName: set_SendUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PNetworkGoal::*)(bool)>(&Oculus::Platform::Samples::VrHoops::P2PNetworkGoal::set_SendUpdates)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PNetworkGoal*), "set_SendUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PNetworkGoal::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PNetworkGoal::*)()>(&Oculus::Platform::Samples::VrHoops::P2PNetworkGoal::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PNetworkGoal*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PNetworkGoal::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PNetworkGoal::*)()>(&Oculus::Platform::Samples::VrHoops::P2PNetworkGoal::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PNetworkGoal*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PNetworkGoal::SendBackboardUpdate
// Il2CppName: SendBackboardUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PNetworkGoal::*)()>(&Oculus::Platform::Samples::VrHoops::P2PNetworkGoal::SendBackboardUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PNetworkGoal*), "SendBackboardUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PNetworkGoal::RemoteBackboardUpdate
// Il2CppName: RemoteBackboardUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrHoops::P2PNetworkGoal::*)(float, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Oculus::Platform::Samples::VrHoops::P2PNetworkGoal::RemoteBackboardUpdate)> {
  static const MethodInfo* get() {
    static auto* remoteTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* moveDir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* nextMoveDir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrHoops::P2PNetworkGoal*), "RemoteBackboardUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteTime, pos, moveDir, nextMoveDir});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrHoops::P2PNetworkGoal::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
