// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: Oculus::Platform::Samples::VrBoardGame
namespace Oculus::Platform::Samples::VrBoardGame {
  // Forward declaring type: BoardPosition
  class BoardPosition;
  // Forward declaring type: GamePiece
  class GamePiece;
}
// Completed forward declares
// Type namespace: Oculus.Platform.Samples.VrBoardGame
namespace Oculus::Platform::Samples::VrBoardGame {
  // Forward declaring type: GameBoard
  class GameBoard;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Samples::VrBoardGame::GameBoard);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::VrBoardGame::GameBoard*, "Oculus.Platform.Samples.VrBoardGame", "GameBoard");
// Type namespace: Oculus.Platform.Samples.VrBoardGame
namespace Oculus::Platform::Samples::VrBoardGame {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Samples.VrBoardGame.GameBoard
  // [TokenAttribute] Offset: FFFFFFFF
  class GameBoard : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Platform::Samples::VrBoardGame::GameBoard::PositionInfo
    struct PositionInfo;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Oculus.Platform.Samples.VrBoardGame.GameBoard/Oculus.Platform.Samples.VrBoardGame.PositionInfo
    // [TokenAttribute] Offset: FFFFFFFF
    struct PositionInfo/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.GameObject piece
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::GameObject* piece;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // public System.Int32 pieceOwner
      // Size: 0x4
      // Offset: 0x8
      int pieceOwner;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 powerPieceOwner
      // Size: 0x4
      // Offset: 0xC
      int powerPieceOwner;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: PositionInfo
      constexpr PositionInfo(::UnityEngine::GameObject* piece_ = {}, int pieceOwner_ = {}, int powerPieceOwner_ = {}) noexcept : piece{piece_}, pieceOwner{pieceOwner_}, powerPieceOwner{powerPieceOwner_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.GameObject piece
      [[deprecated]] ::UnityEngine::GameObject*& dyn_piece();
      // Get instance field reference: public System.Int32 pieceOwner
      [[deprecated]] int& dyn_pieceOwner();
      // Get instance field reference: public System.Int32 powerPieceOwner
      [[deprecated]] int& dyn_powerPieceOwner();
    }; // Oculus.Platform.Samples.VrBoardGame.GameBoard/Oculus.Platform.Samples.VrBoardGame.PositionInfo
    #pragma pack(pop)
    static check_size<sizeof(GameBoard::PositionInfo), 12 + sizeof(int)> __Oculus_Platform_Samples_VrBoardGame_GameBoard_PositionInfoSizeCheck;
    static_assert(sizeof(GameBoard::PositionInfo) == 0x10);
    public:
    // private UnityEngine.Color[] m_playerColors
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Color> m_playerColors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // private UnityEngine.Color m_proposedMoveColor
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Color m_proposedMoveColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Int32[] m_scores
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<int> m_scores;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private Oculus.Platform.Samples.VrBoardGame.BoardPosition[] m_positions
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::Oculus::Platform::Samples::VrBoardGame::BoardPosition*> m_positions;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Platform::Samples::VrBoardGame::BoardPosition*>) == 0x8);
    // private readonly Oculus.Platform.Samples.VrBoardGame.GameBoard/Oculus.Platform.Samples.VrBoardGame.PositionInfo[,] m_pieces
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::Oculus::Platform::Samples::VrBoardGame::GameBoard::PositionInfo> m_pieces;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Platform::Samples::VrBoardGame::GameBoard::PositionInfo>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.Int32 LENGTH_X
    static constexpr const int LENGTH_X = 3;
    // Get static field: static public System.Int32 LENGTH_X
    static int _get_LENGTH_X();
    // Set static field: static public System.Int32 LENGTH_X
    static void _set_LENGTH_X(int value);
    // static field const value: static public System.Int32 LENGTH_Y
    static constexpr const int LENGTH_Y = 3;
    // Get static field: static public System.Int32 LENGTH_Y
    static int _get_LENGTH_Y();
    // Set static field: static public System.Int32 LENGTH_Y
    static void _set_LENGTH_Y(int value);
    // static field const value: static public System.Int32 MAX_PLAYERS
    static constexpr const int MAX_PLAYERS = 2;
    // Get static field: static public System.Int32 MAX_PLAYERS
    static int _get_MAX_PLAYERS();
    // Set static field: static public System.Int32 MAX_PLAYERS
    static void _set_MAX_PLAYERS(int value);
    // Get instance field reference: private UnityEngine.Color[] m_playerColors
    [[deprecated]] ::ArrayW<::UnityEngine::Color>& dyn_m_playerColors();
    // Get instance field reference: private UnityEngine.Color m_proposedMoveColor
    [[deprecated]] ::UnityEngine::Color& dyn_m_proposedMoveColor();
    // Get instance field reference: private System.Int32[] m_scores
    [[deprecated]] ::ArrayW<int>& dyn_m_scores();
    // Get instance field reference: private Oculus.Platform.Samples.VrBoardGame.BoardPosition[] m_positions
    [[deprecated]] ::ArrayW<::Oculus::Platform::Samples::VrBoardGame::BoardPosition*>& dyn_m_positions();
    // Get instance field reference: private readonly Oculus.Platform.Samples.VrBoardGame.GameBoard/Oculus.Platform.Samples.VrBoardGame.PositionInfo[,] m_pieces
    [[deprecated]] ::ArrayW<::Oculus::Platform::Samples::VrBoardGame::GameBoard::PositionInfo>& dyn_m_pieces();
    // public System.Void Reset()
    // Offset: 0x92F130
    void Reset();
    // public System.Boolean IsFull()
    // Offset: 0x92F300
    bool IsFull();
    // public System.Boolean CanPlayerMoveToPostion(System.Int32 x, System.Int32 y)
    // Offset: 0x92F3F0
    bool CanPlayerMoveToPostion(int x, int y);
    // public System.Boolean CanPlayerPowerUpPosition(System.Int32 x, System.Int32 y)
    // Offset: 0x92F4B0
    bool CanPlayerPowerUpPosition(int x, int y);
    // public System.Void AddPiece(System.Int32 player, UnityEngine.GameObject prefab, System.Int32 x, System.Int32 y)
    // Offset: 0x92F570
    void AddPiece(int player, ::UnityEngine::GameObject* prefab, int x, int y);
    // public Oculus.Platform.Samples.VrBoardGame.GamePiece AddProposedPiece(UnityEngine.GameObject prefab, Oculus.Platform.Samples.VrBoardGame.BoardPosition pos)
    // Offset: 0x92FAC8
    ::Oculus::Platform::Samples::VrBoardGame::GamePiece* AddProposedPiece(::UnityEngine::GameObject* prefab, ::Oculus::Platform::Samples::VrBoardGame::BoardPosition* pos);
    // public System.Void AddPowerPiece(System.Int32 player, UnityEngine.GameObject prefab, System.Int32 x, System.Int32 y)
    // Offset: 0x92FB80
    void AddPowerPiece(int player, ::UnityEngine::GameObject* prefab, int x, int y);
    // public Oculus.Platform.Samples.VrBoardGame.GamePiece AddProposedPowerPiece(UnityEngine.GameObject prefab, Oculus.Platform.Samples.VrBoardGame.BoardPosition pos)
    // Offset: 0x92FD08
    ::Oculus::Platform::Samples::VrBoardGame::GamePiece* AddProposedPowerPiece(::UnityEngine::GameObject* prefab, ::Oculus::Platform::Samples::VrBoardGame::BoardPosition* pos);
    // private Oculus.Platform.Samples.VrBoardGame.GamePiece Create(UnityEngine.GameObject prefab, UnityEngine.GameObject parent, Oculus.Platform.Samples.VrBoardGame.BoardPosition pos, UnityEngine.Vector3 off)
    // Offset: 0x92F73C
    ::Oculus::Platform::Samples::VrBoardGame::GamePiece* Create(::UnityEngine::GameObject* prefab, ::UnityEngine::GameObject* parent, ::Oculus::Platform::Samples::VrBoardGame::BoardPosition* pos, ::UnityEngine::Vector3 off);
    // public System.Int32 GetPlayerScore(System.Int32 player)
    // Offset: 0x92FE08
    int GetPlayerScore(int player);
    // private System.Void UpdateScores()
    // Offset: 0x92F87C
    void UpdateScores();
    // public System.Void .ctor()
    // Offset: 0x92FE44
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameBoard* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Samples::VrBoardGame::GameBoard::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameBoard*, creationType>()));
    }
  }; // Oculus.Platform.Samples.VrBoardGame.GameBoard
  #pragma pack(pop)
  static check_size<sizeof(GameBoard), 64 + sizeof(::ArrayW<::Oculus::Platform::Samples::VrBoardGame::GameBoard::PositionInfo>)> __Oculus_Platform_Samples_VrBoardGame_GameBoardSizeCheck;
  static_assert(sizeof(GameBoard) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::VrBoardGame::GameBoard::PositionInfo, "Oculus.Platform.Samples.VrBoardGame", "GameBoard/PositionInfo");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::GameBoard::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrBoardGame::GameBoard::*)()>(&Oculus::Platform::Samples::VrBoardGame::GameBoard::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrBoardGame::GameBoard*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::GameBoard::IsFull
// Il2CppName: IsFull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Platform::Samples::VrBoardGame::GameBoard::*)()>(&Oculus::Platform::Samples::VrBoardGame::GameBoard::IsFull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrBoardGame::GameBoard*), "IsFull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::GameBoard::CanPlayerMoveToPostion
// Il2CppName: CanPlayerMoveToPostion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Platform::Samples::VrBoardGame::GameBoard::*)(int, int)>(&Oculus::Platform::Samples::VrBoardGame::GameBoard::CanPlayerMoveToPostion)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrBoardGame::GameBoard*), "CanPlayerMoveToPostion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::GameBoard::CanPlayerPowerUpPosition
// Il2CppName: CanPlayerPowerUpPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Platform::Samples::VrBoardGame::GameBoard::*)(int, int)>(&Oculus::Platform::Samples::VrBoardGame::GameBoard::CanPlayerPowerUpPosition)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrBoardGame::GameBoard*), "CanPlayerPowerUpPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::GameBoard::AddPiece
// Il2CppName: AddPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrBoardGame::GameBoard::*)(int, ::UnityEngine::GameObject*, int, int)>(&Oculus::Platform::Samples::VrBoardGame::GameBoard::AddPiece)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* prefab = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrBoardGame::GameBoard*), "AddPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, prefab, x, y});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::GameBoard::AddProposedPiece
// Il2CppName: AddProposedPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Platform::Samples::VrBoardGame::GamePiece* (Oculus::Platform::Samples::VrBoardGame::GameBoard::*)(::UnityEngine::GameObject*, ::Oculus::Platform::Samples::VrBoardGame::BoardPosition*)>(&Oculus::Platform::Samples::VrBoardGame::GameBoard::AddProposedPiece)> {
  static const MethodInfo* get() {
    static auto* prefab = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("Oculus.Platform.Samples.VrBoardGame", "BoardPosition")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrBoardGame::GameBoard*), "AddProposedPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefab, pos});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::GameBoard::AddPowerPiece
// Il2CppName: AddPowerPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrBoardGame::GameBoard::*)(int, ::UnityEngine::GameObject*, int, int)>(&Oculus::Platform::Samples::VrBoardGame::GameBoard::AddPowerPiece)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* prefab = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrBoardGame::GameBoard*), "AddPowerPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, prefab, x, y});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::GameBoard::AddProposedPowerPiece
// Il2CppName: AddProposedPowerPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Platform::Samples::VrBoardGame::GamePiece* (Oculus::Platform::Samples::VrBoardGame::GameBoard::*)(::UnityEngine::GameObject*, ::Oculus::Platform::Samples::VrBoardGame::BoardPosition*)>(&Oculus::Platform::Samples::VrBoardGame::GameBoard::AddProposedPowerPiece)> {
  static const MethodInfo* get() {
    static auto* prefab = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("Oculus.Platform.Samples.VrBoardGame", "BoardPosition")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrBoardGame::GameBoard*), "AddProposedPowerPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefab, pos});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::GameBoard::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Platform::Samples::VrBoardGame::GamePiece* (Oculus::Platform::Samples::VrBoardGame::GameBoard::*)(::UnityEngine::GameObject*, ::UnityEngine::GameObject*, ::Oculus::Platform::Samples::VrBoardGame::BoardPosition*, ::UnityEngine::Vector3)>(&Oculus::Platform::Samples::VrBoardGame::GameBoard::Create)> {
  static const MethodInfo* get() {
    static auto* prefab = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("Oculus.Platform.Samples.VrBoardGame", "BoardPosition")->byval_arg;
    static auto* off = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrBoardGame::GameBoard*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefab, parent, pos, off});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::GameBoard::GetPlayerScore
// Il2CppName: GetPlayerScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Platform::Samples::VrBoardGame::GameBoard::*)(int)>(&Oculus::Platform::Samples::VrBoardGame::GameBoard::GetPlayerScore)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrBoardGame::GameBoard*), "GetPlayerScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::GameBoard::UpdateScores
// Il2CppName: UpdateScores
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrBoardGame::GameBoard::*)()>(&Oculus::Platform::Samples::VrBoardGame::GameBoard::UpdateScores)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrBoardGame::GameBoard*), "UpdateScores", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::GameBoard::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
