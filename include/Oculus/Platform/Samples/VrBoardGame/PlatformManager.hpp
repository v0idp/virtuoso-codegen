// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message
  class Message;
  // Forward declaring type: Message`1<T>
  template<typename T>
  class Message_1;
}
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: User
  class User;
}
// Completed forward declares
// Type namespace: Oculus.Platform.Samples.VrBoardGame
namespace Oculus::Platform::Samples::VrBoardGame {
  // Forward declaring type: PlatformManager
  class PlatformManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Samples::VrBoardGame::PlatformManager);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::VrBoardGame::PlatformManager*, "Oculus.Platform.Samples.VrBoardGame", "PlatformManager");
// Type namespace: Oculus.Platform.Samples.VrBoardGame
namespace Oculus::Platform::Samples::VrBoardGame {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Samples.VrBoardGame.PlatformManager
  // [TokenAttribute] Offset: FFFFFFFF
  class PlatformManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.UInt64 m_myID
    // Size: 0x8
    // Offset: 0x18
    uint64_t m_myID;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.String m_myOculusID
    // Size: 0x8
    // Offset: 0x20
    ::StringW m_myOculusID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private Oculus.Platform.Samples.VrBoardGame.PlatformManager s_instance
    static ::Oculus::Platform::Samples::VrBoardGame::PlatformManager* _get_s_instance();
    // Set static field: static private Oculus.Platform.Samples.VrBoardGame.PlatformManager s_instance
    static void _set_s_instance(::Oculus::Platform::Samples::VrBoardGame::PlatformManager* value);
    // Get instance field reference: private System.UInt64 m_myID
    [[deprecated("Use field access instead!")]] uint64_t& dyn_m_myID();
    // Get instance field reference: private System.String m_myOculusID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_myOculusID();
    // static public System.UInt64 get_MyID()
    // Offset: 0xB4339C
    static uint64_t get_MyID();
    // static public System.String get_MyOculusID()
    // Offset: 0xB44874
    static ::StringW get_MyOculusID();
    // public System.Void .ctor()
    // Offset: 0xB56EA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlatformManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Samples::VrBoardGame::PlatformManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlatformManager*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0xB56ADC
    void Awake();
    // private System.Void Start()
    // Offset: 0xB56C30
    void Start();
    // private System.Void IsEntitledCallback(Oculus.Platform.Message msg)
    // Offset: 0xB56CD0
    void IsEntitledCallback(::Oculus::Platform::Message* msg);
    // private System.Void GetLoggedInUserCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.User> msg)
    // Offset: 0xB56DBC
    void GetLoggedInUserCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::User*>* msg);
    // static public System.Void TerminateWithError(Oculus.Platform.Message msg)
    // Offset: 0xB39DD0
    static void TerminateWithError(::Oculus::Platform::Message* msg);
  }; // Oculus.Platform.Samples.VrBoardGame.PlatformManager
  #pragma pack(pop)
  static check_size<sizeof(PlatformManager), 32 + sizeof(::StringW)> __Oculus_Platform_Samples_VrBoardGame_PlatformManagerSizeCheck;
  static_assert(sizeof(PlatformManager) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::PlatformManager::get_MyID
// Il2CppName: get_MyID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)()>(&Oculus::Platform::Samples::VrBoardGame::PlatformManager::get_MyID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrBoardGame::PlatformManager*), "get_MyID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::PlatformManager::get_MyOculusID
// Il2CppName: get_MyOculusID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&Oculus::Platform::Samples::VrBoardGame::PlatformManager::get_MyOculusID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrBoardGame::PlatformManager*), "get_MyOculusID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::PlatformManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::PlatformManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrBoardGame::PlatformManager::*)()>(&Oculus::Platform::Samples::VrBoardGame::PlatformManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrBoardGame::PlatformManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::PlatformManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrBoardGame::PlatformManager::*)()>(&Oculus::Platform::Samples::VrBoardGame::PlatformManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrBoardGame::PlatformManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::PlatformManager::IsEntitledCallback
// Il2CppName: IsEntitledCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrBoardGame::PlatformManager::*)(::Oculus::Platform::Message*)>(&Oculus::Platform::Samples::VrBoardGame::PlatformManager::IsEntitledCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrBoardGame::PlatformManager*), "IsEntitledCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::PlatformManager::GetLoggedInUserCallback
// Il2CppName: GetLoggedInUserCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrBoardGame::PlatformManager::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::User*>*)>(&Oculus::Platform::Samples::VrBoardGame::PlatformManager::GetLoggedInUserCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "User")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrBoardGame::PlatformManager*), "GetLoggedInUserCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrBoardGame::PlatformManager::TerminateWithError
// Il2CppName: TerminateWithError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Oculus::Platform::Message*)>(&Oculus::Platform::Samples::VrBoardGame::PlatformManager::TerminateWithError)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrBoardGame::PlatformManager*), "TerminateWithError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
