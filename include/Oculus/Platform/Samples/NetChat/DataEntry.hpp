// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Platform.Samples.NetChat.states
#include "Oculus/Platform/Samples/NetChat/states.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: User
  class User;
  // Forward declaring type: Room
  class Room;
  // Forward declaring type: MatchmakingEnqueueResultAndRoom
  class MatchmakingEnqueueResultAndRoom;
}
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message
  class Message;
  // Forward declaring type: Message`1<T>
  template<typename T>
  class Message_1;
}
// Completed forward declares
// Type namespace: Oculus.Platform.Samples.NetChat
namespace Oculus::Platform::Samples::NetChat {
  // Forward declaring type: DataEntry
  class DataEntry;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Samples::NetChat::DataEntry);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::NetChat::DataEntry*, "Oculus.Platform.Samples.NetChat", "DataEntry");
// Type namespace: Oculus.Platform.Samples.NetChat
namespace Oculus::Platform::Samples::NetChat {
  // Size: 0x45
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Samples.NetChat.DataEntry
  // [TokenAttribute] Offset: FFFFFFFF
  class DataEntry : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public UnityEngine.UI.Text dataOutput
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::Text* dataOutput;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private Oculus.Platform.Samples.NetChat.states currentState
    // Size: 0x4
    // Offset: 0x20
    ::Oculus::Platform::Samples::NetChat::states currentState;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::NetChat::states) == 0x4);
    // Padding between fields: currentState and: localUser
    char __padding1[0x4] = {};
    // private Oculus.Platform.Models.User localUser
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Platform::Models::User* localUser;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Models::User*) == 0x8);
    // private Oculus.Platform.Models.User remoteUser
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Platform::Models::User* remoteUser;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Models::User*) == 0x8);
    // private Oculus.Platform.Models.Room currentRoom
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Platform::Models::Room* currentRoom;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Models::Room*) == 0x8);
    // private System.Int32 lastPacketID
    // Size: 0x4
    // Offset: 0x40
    int lastPacketID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean ratedMatchStarted
    // Size: 0x1
    // Offset: 0x44
    bool ratedMatchStarted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.UI.Text dataOutput
    ::UnityEngine::UI::Text*& dyn_dataOutput();
    // Get instance field reference: private Oculus.Platform.Samples.NetChat.states currentState
    ::Oculus::Platform::Samples::NetChat::states& dyn_currentState();
    // Get instance field reference: private Oculus.Platform.Models.User localUser
    ::Oculus::Platform::Models::User*& dyn_localUser();
    // Get instance field reference: private Oculus.Platform.Models.User remoteUser
    ::Oculus::Platform::Models::User*& dyn_remoteUser();
    // Get instance field reference: private Oculus.Platform.Models.Room currentRoom
    ::Oculus::Platform::Models::Room*& dyn_currentRoom();
    // Get instance field reference: private System.Int32 lastPacketID
    int& dyn_lastPacketID();
    // Get instance field reference: private System.Boolean ratedMatchStarted
    bool& dyn_ratedMatchStarted();
    // private System.Void Start()
    // Offset: 0x7DFC00
    void Start();
    // private System.Void Update()
    // Offset: 0x7DFDBC
    void Update();
    // private System.Void SubmitCommand(System.String command)
    // Offset: 0x7DFE90
    void SubmitCommand(::StringW command);
    // private System.Void printOutputLine(System.String newLine)
    // Offset: 0x7E1764
    void printOutputLine(::StringW newLine);
    // private System.Void checkEntitlement()
    // Offset: 0x7DFD20
    void checkEntitlement();
    // private System.Void getEntitlementCallback(Oculus.Platform.Message msg)
    // Offset: 0x7E1980
    void getEntitlementCallback(::Oculus::Platform::Message* msg);
    // private System.Void init(Oculus.Platform.Message`1<Oculus.Platform.Models.User> msg)
    // Offset: 0x7E1AAC
    void init(::Oculus::Platform::Message_1<::Oculus::Platform::Models::User*>* msg);
    // private System.Void requestCreateRoom()
    // Offset: 0x7E0428
    void requestCreateRoom();
    // private System.Void createRoomResponse(Oculus.Platform.Message`1<Oculus.Platform.Models.MatchmakingEnqueueResultAndRoom> msg)
    // Offset: 0x7E1C18
    void createRoomResponse(::Oculus::Platform::Message_1<::Oculus::Platform::Models::MatchmakingEnqueueResultAndRoom*>* msg);
    // private System.Void requestCreateFilterRoom()
    // Offset: 0x7E064C
    void requestCreateFilterRoom();
    // private System.Void requestFindRoom()
    // Offset: 0x7E0B90
    void requestFindRoom();
    // private System.Void requestFindFilteredRoom()
    // Offset: 0x7E0DAC
    void requestFindFilteredRoom();
    // private System.Void foundMatch(Oculus.Platform.Message`1<Oculus.Platform.Models.Room> msg)
    // Offset: 0x7E1D8C
    void foundMatch(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>* msg);
    // private System.Void joinRoomResponse(Oculus.Platform.Message`1<Oculus.Platform.Models.Room> msg)
    // Offset: 0x7E1F20
    void joinRoomResponse(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>* msg);
    // private System.Void requestFindMatch()
    // Offset: 0x7E0974
    void requestFindMatch();
    // private System.Void searchingStarted(Oculus.Platform.Message msg)
    // Offset: 0x7E2298
    void searchingStarted(::Oculus::Platform::Message* msg);
    // private System.Void updateRoom(Oculus.Platform.Message`1<Oculus.Platform.Models.Room> msg)
    // Offset: 0x7E2384
    void updateRoom(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>* msg);
    // private System.Void sendChat(System.String chatMessage)
    // Offset: 0x7E1158
    void sendChat(::StringW chatMessage);
    // private System.Void processNetPackets()
    // Offset: 0x7E0260
    void processNetPackets();
    // private System.Void requestLeaveRoom()
    // Offset: 0x7E1278
    void requestLeaveRoom();
    // private System.Void leaveRoomResponse(Oculus.Platform.Message`1<Oculus.Platform.Models.Room> msg)
    // Offset: 0x7E2780
    void leaveRoomResponse(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>* msg);
    // private System.Void requestStartRatedMatch()
    // Offset: 0x7E1400
    void requestStartRatedMatch();
    // private System.Void startRatedMatchResponse(Oculus.Platform.Message msg)
    // Offset: 0x7E2870
    void startRatedMatchResponse(::Oculus::Platform::Message* msg);
    // private System.Void requestReportResults()
    // Offset: 0x7E1544
    void requestReportResults();
    // private System.Void reportResultsResponse(Oculus.Platform.Message msg)
    // Offset: 0x7E295C
    void reportResultsResponse(::Oculus::Platform::Message* msg);
    // public System.Void .ctor()
    // Offset: 0x7E2A28
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DataEntry* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Samples::NetChat::DataEntry::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DataEntry*, creationType>()));
    }
  }; // Oculus.Platform.Samples.NetChat.DataEntry
  #pragma pack(pop)
  static check_size<sizeof(DataEntry), 68 + sizeof(bool)> __Oculus_Platform_Samples_NetChat_DataEntrySizeCheck;
  static_assert(sizeof(DataEntry) == 0x45);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)()>(&Oculus::Platform::Samples::NetChat::DataEntry::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)()>(&Oculus::Platform::Samples::NetChat::DataEntry::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::SubmitCommand
// Il2CppName: SubmitCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)(::StringW)>(&Oculus::Platform::Samples::NetChat::DataEntry::SubmitCommand)> {
  static const MethodInfo* get() {
    static auto* command = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "SubmitCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{command});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::printOutputLine
// Il2CppName: printOutputLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)(::StringW)>(&Oculus::Platform::Samples::NetChat::DataEntry::printOutputLine)> {
  static const MethodInfo* get() {
    static auto* newLine = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "printOutputLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newLine});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::checkEntitlement
// Il2CppName: checkEntitlement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)()>(&Oculus::Platform::Samples::NetChat::DataEntry::checkEntitlement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "checkEntitlement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::getEntitlementCallback
// Il2CppName: getEntitlementCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)(::Oculus::Platform::Message*)>(&Oculus::Platform::Samples::NetChat::DataEntry::getEntitlementCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "getEntitlementCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::init
// Il2CppName: init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::User*>*)>(&Oculus::Platform::Samples::NetChat::DataEntry::init)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "User")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::requestCreateRoom
// Il2CppName: requestCreateRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)()>(&Oculus::Platform::Samples::NetChat::DataEntry::requestCreateRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "requestCreateRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::createRoomResponse
// Il2CppName: createRoomResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::MatchmakingEnqueueResultAndRoom*>*)>(&Oculus::Platform::Samples::NetChat::DataEntry::createRoomResponse)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "MatchmakingEnqueueResultAndRoom")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "createRoomResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::requestCreateFilterRoom
// Il2CppName: requestCreateFilterRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)()>(&Oculus::Platform::Samples::NetChat::DataEntry::requestCreateFilterRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "requestCreateFilterRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::requestFindRoom
// Il2CppName: requestFindRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)()>(&Oculus::Platform::Samples::NetChat::DataEntry::requestFindRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "requestFindRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::requestFindFilteredRoom
// Il2CppName: requestFindFilteredRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)()>(&Oculus::Platform::Samples::NetChat::DataEntry::requestFindFilteredRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "requestFindFilteredRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::foundMatch
// Il2CppName: foundMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>*)>(&Oculus::Platform::Samples::NetChat::DataEntry::foundMatch)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "Room")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "foundMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::joinRoomResponse
// Il2CppName: joinRoomResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>*)>(&Oculus::Platform::Samples::NetChat::DataEntry::joinRoomResponse)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "Room")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "joinRoomResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::requestFindMatch
// Il2CppName: requestFindMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)()>(&Oculus::Platform::Samples::NetChat::DataEntry::requestFindMatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "requestFindMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::searchingStarted
// Il2CppName: searchingStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)(::Oculus::Platform::Message*)>(&Oculus::Platform::Samples::NetChat::DataEntry::searchingStarted)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "searchingStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::updateRoom
// Il2CppName: updateRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>*)>(&Oculus::Platform::Samples::NetChat::DataEntry::updateRoom)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "Room")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "updateRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::sendChat
// Il2CppName: sendChat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)(::StringW)>(&Oculus::Platform::Samples::NetChat::DataEntry::sendChat)> {
  static const MethodInfo* get() {
    static auto* chatMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "sendChat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chatMessage});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::processNetPackets
// Il2CppName: processNetPackets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)()>(&Oculus::Platform::Samples::NetChat::DataEntry::processNetPackets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "processNetPackets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::requestLeaveRoom
// Il2CppName: requestLeaveRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)()>(&Oculus::Platform::Samples::NetChat::DataEntry::requestLeaveRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "requestLeaveRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::leaveRoomResponse
// Il2CppName: leaveRoomResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>*)>(&Oculus::Platform::Samples::NetChat::DataEntry::leaveRoomResponse)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "Room")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "leaveRoomResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::requestStartRatedMatch
// Il2CppName: requestStartRatedMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)()>(&Oculus::Platform::Samples::NetChat::DataEntry::requestStartRatedMatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "requestStartRatedMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::startRatedMatchResponse
// Il2CppName: startRatedMatchResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)(::Oculus::Platform::Message*)>(&Oculus::Platform::Samples::NetChat::DataEntry::startRatedMatchResponse)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "startRatedMatchResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::requestReportResults
// Il2CppName: requestReportResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)()>(&Oculus::Platform::Samples::NetChat::DataEntry::requestReportResults)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "requestReportResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::reportResultsResponse
// Il2CppName: reportResultsResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::DataEntry::*)(::Oculus::Platform::Message*)>(&Oculus::Platform::Samples::NetChat::DataEntry::reportResultsResponse)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::DataEntry*), "reportResultsResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::DataEntry::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
