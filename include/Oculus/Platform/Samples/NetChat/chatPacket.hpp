// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Oculus.Platform.Samples.NetChat
namespace Oculus::Platform::Samples::NetChat {
  // Forward declaring type: chatPacket
  class chatPacket;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Samples::NetChat::chatPacket);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::NetChat::chatPacket*, "Oculus.Platform.Samples.NetChat", "chatPacket");
// Type namespace: Oculus.Platform.Samples.NetChat
namespace Oculus::Platform::Samples::NetChat {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Samples.NetChat.chatPacket
  // [TokenAttribute] Offset: FFFFFFFF
  class chatPacket : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 <packetID>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int packetID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: packetID and: textString
    char __padding0[0x4] = {};
    // private System.String <textString>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW textString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.Int32 <packetID>k__BackingField
    [[deprecated]] int& dyn_$packetID$k__BackingField();
    // Get instance field reference: private System.String <textString>k__BackingField
    [[deprecated]] ::StringW& dyn_$textString$k__BackingField();
    // public System.Int32 get_packetID()
    // Offset: 0x17210E4
    int get_packetID();
    // public System.Void set_packetID(System.Int32 value)
    // Offset: 0x17210EC
    void set_packetID(int value);
    // public System.String get_textString()
    // Offset: 0x17210F4
    ::StringW get_textString();
    // public System.Void set_textString(System.String value)
    // Offset: 0x17210FC
    void set_textString(::StringW value);
    // public System.Byte[] Serialize()
    // Offset: 0x1721104
    ::ArrayW<uint8_t> Serialize();
    // static public Oculus.Platform.Samples.NetChat.chatPacket Deserialize(System.Byte[] data)
    // Offset: 0x1721428
    static ::Oculus::Platform::Samples::NetChat::chatPacket* Deserialize(::ArrayW<uint8_t> data);
    // public System.Void .ctor()
    // Offset: 0x17216F4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static chatPacket* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Samples::NetChat::chatPacket::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<chatPacket*, creationType>()));
    }
  }; // Oculus.Platform.Samples.NetChat.chatPacket
  #pragma pack(pop)
  static check_size<sizeof(chatPacket), 24 + sizeof(::StringW)> __Oculus_Platform_Samples_NetChat_chatPacketSizeCheck;
  static_assert(sizeof(chatPacket) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::chatPacket::get_packetID
// Il2CppName: get_packetID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Platform::Samples::NetChat::chatPacket::*)()>(&Oculus::Platform::Samples::NetChat::chatPacket::get_packetID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::chatPacket*), "get_packetID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::chatPacket::set_packetID
// Il2CppName: set_packetID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::chatPacket::*)(int)>(&Oculus::Platform::Samples::NetChat::chatPacket::set_packetID)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::chatPacket*), "set_packetID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::chatPacket::get_textString
// Il2CppName: get_textString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Oculus::Platform::Samples::NetChat::chatPacket::*)()>(&Oculus::Platform::Samples::NetChat::chatPacket::get_textString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::chatPacket*), "get_textString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::chatPacket::set_textString
// Il2CppName: set_textString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::NetChat::chatPacket::*)(::StringW)>(&Oculus::Platform::Samples::NetChat::chatPacket::set_textString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::chatPacket*), "set_textString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::chatPacket::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Oculus::Platform::Samples::NetChat::chatPacket::*)()>(&Oculus::Platform::Samples::NetChat::chatPacket::Serialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::chatPacket*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::chatPacket::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Platform::Samples::NetChat::chatPacket* (*)(::ArrayW<uint8_t>)>(&Oculus::Platform::Samples::NetChat::chatPacket::Deserialize)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::NetChat::chatPacket*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::NetChat::chatPacket::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
