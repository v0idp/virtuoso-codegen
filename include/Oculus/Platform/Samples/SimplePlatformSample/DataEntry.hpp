// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: Room
  class Room;
  // Forward declaring type: UserList
  class UserList;
  // Forward declaring type: UserProof
  class UserProof;
  // Forward declaring type: LeaderboardEntryList
  class LeaderboardEntryList;
  // Forward declaring type: AchievementProgressList
  class AchievementProgressList;
  // Forward declaring type: AchievementDefinitionList
  class AchievementDefinitionList;
  // Forward declaring type: User
  class User;
}
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message`1<T>
  template<typename T>
  class Message_1;
  // Forward declaring type: Message
  class Message;
}
// Completed forward declares
// Type namespace: Oculus.Platform.Samples.SimplePlatformSample
namespace Oculus::Platform::Samples::SimplePlatformSample {
  // Forward declaring type: DataEntry
  class DataEntry;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Samples::SimplePlatformSample::DataEntry);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::SimplePlatformSample::DataEntry*, "Oculus.Platform.Samples.SimplePlatformSample", "DataEntry");
// Type namespace: Oculus.Platform.Samples.SimplePlatformSample
namespace Oculus::Platform::Samples::SimplePlatformSample {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Samples.SimplePlatformSample.DataEntry
  // [TokenAttribute] Offset: FFFFFFFF
  class DataEntry : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.UI.Text dataOutput
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::Text* dataOutput;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.UI.Text dataOutput
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_dataOutput();
    // public System.Void .ctor()
    // Offset: 0x92D9C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DataEntry* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Samples::SimplePlatformSample::DataEntry::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DataEntry*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x928E10
    void Start();
    // private System.Void Update()
    // Offset: 0x928F14
    void Update();
    // private System.Void SubmitCommand(System.String command)
    // Offset: 0x928FE0
    void SubmitCommand(::StringW command);
    // private System.Void getLeaderboardEntries(System.String leaderboardName)
    // Offset: 0x92B0FC
    void getLeaderboardEntries(::StringW leaderboardName);
    // private System.Void writeLeaderboardEntry(System.String leaderboardName, System.String value)
    // Offset: 0x92AFA0
    void writeLeaderboardEntry(::StringW leaderboardName, ::StringW value);
    // private System.Void addFieldsAchievement(System.String achievementName, System.String fields)
    // Offset: 0x92AECC
    void addFieldsAchievement(::StringW achievementName, ::StringW fields);
    // private System.Void addCountAchievement(System.String achievementName, System.String count)
    // Offset: 0x92ADC0
    void addCountAchievement(::StringW achievementName, ::StringW count);
    // private System.Void unlockAchievement(System.String achievementName)
    // Offset: 0x92ACF4
    void unlockAchievement(::StringW achievementName);
    // private System.Void getAchievementProgress(System.String achievementName)
    // Offset: 0x92ABC4
    void getAchievementProgress(::StringW achievementName);
    // private System.Void getAchievementDefinition(System.String achievementName)
    // Offset: 0x92AA94
    void getAchievementDefinition(::StringW achievementName);
    // private System.Void checkEntitlement()
    // Offset: 0x928E78
    void checkEntitlement();
    // private System.Void getUserNonce()
    // Offset: 0x92A9AC
    void getUserNonce();
    // private System.Void createAndJoinPrivateRoom(System.String joinPolicy, System.String maxUsers)
    // Offset: 0x9298C0
    void createAndJoinPrivateRoom(::StringW joinPolicy, ::StringW maxUsers);
    // private System.Void getCurrentRoom()
    // Offset: 0x929A04
    void getCurrentRoom();
    // private System.Void getRoom(System.String roomID)
    // Offset: 0x929AEC
    void getRoom(::StringW roomID);
    // private System.Void joinRoom(System.String roomID)
    // Offset: 0x929C20
    void joinRoom(::StringW roomID);
    // private System.Void leaveRoom(System.String roomID)
    // Offset: 0x929D58
    void leaveRoom(::StringW roomID);
    // private System.Void kickUser(System.String roomID, System.String userID)
    // Offset: 0x929E8C
    void kickUser(::StringW roomID, ::StringW userID);
    // private System.Void getLoggedInUser()
    // Offset: 0x929FFC
    void getLoggedInUser();
    // private System.Void getUser(System.String userID)
    // Offset: 0x92A0E4
    void getUser(::StringW userID);
    // private System.Void getLoggedInFriends()
    // Offset: 0x92A218
    void getLoggedInFriends();
    // private System.Void getInvitableUsers()
    // Offset: 0x92A300
    void getInvitableUsers();
    // private System.Void inviteUser(System.String roomID, System.String inviteToken)
    // Offset: 0x92A3E8
    void inviteUser(::StringW roomID, ::StringW inviteToken);
    // private System.Void setRoomDescription(System.String roomID, System.String description)
    // Offset: 0x92A540
    void setRoomDescription(::StringW roomID, ::StringW description);
    // private System.Void updateRoomDataStore(System.String roomID, System.String key, System.String value)
    // Offset: 0x92A698
    void updateRoomDataStore(::StringW roomID, ::StringW key, ::StringW value);
    // private System.Void printOutputLine(System.String newLine)
    // Offset: 0x92B1D8
    void printOutputLine(::StringW newLine);
    // private System.Void outputRoomDetails(Oculus.Platform.Models.Room room)
    // Offset: 0x92B28C
    void outputRoomDetails(::Oculus::Platform::Models::Room* room);
    // private System.Void outputUserArray(Oculus.Platform.Models.UserList users)
    // Offset: 0x92B6B8
    void outputUserArray(::Oculus::Platform::Models::UserList* users);
    // private System.Void userProofCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.UserProof> msg)
    // Offset: 0x92BC24
    void userProofCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::UserProof*>* msg);
    // private System.Void getEntitlementCallback(Oculus.Platform.Message msg)
    // Offset: 0x92BD28
    void getEntitlementCallback(::Oculus::Platform::Message* msg);
    // private System.Void leaderboardGetCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.LeaderboardEntryList> msg)
    // Offset: 0x92BDB0
    void leaderboardGetCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::LeaderboardEntryList*>* msg);
    // private System.Void leaderboardWriteCallback(Oculus.Platform.Message msg)
    // Offset: 0x92C3BC
    void leaderboardWriteCallback(::Oculus::Platform::Message* msg);
    // private System.Void achievementFieldsCallback(Oculus.Platform.Message msg)
    // Offset: 0x92C520
    void achievementFieldsCallback(::Oculus::Platform::Message* msg);
    // private System.Void achievementCountCallback(Oculus.Platform.Message msg)
    // Offset: 0x92C5F0
    void achievementCountCallback(::Oculus::Platform::Message* msg);
    // private System.Void achievementUnlockCallback(Oculus.Platform.Message msg)
    // Offset: 0x92C6C0
    void achievementUnlockCallback(::Oculus::Platform::Message* msg);
    // private System.Void achievementProgressCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.AchievementProgressList> msg)
    // Offset: 0x92C790
    void achievementProgressCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::AchievementProgressList*>* msg);
    // private System.Void achievementDefinitionCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.AchievementDefinitionList> msg)
    // Offset: 0x92CBA4
    void achievementDefinitionCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::AchievementDefinitionList*>* msg);
    // private System.Void createAndJoinPrivateRoomCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.Room> msg)
    // Offset: 0x92D048
    void createAndJoinPrivateRoomCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>* msg);
    // private System.Void getCurrentRoomCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.Room> msg)
    // Offset: 0x92D140
    void getCurrentRoomCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>* msg);
    // private System.Void joinRoomCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.Room> msg)
    // Offset: 0x92D238
    void joinRoomCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>* msg);
    // private System.Void leaveRoomCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.Room> msg)
    // Offset: 0x92D330
    void leaveRoomCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>* msg);
    // private System.Void getUserCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.User> msg)
    // Offset: 0x92D428
    void getUserCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::User*>* msg);
    // private System.Void getFriendsCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.UserList> msg)
    // Offset: 0x92D708
    void getFriendsCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::UserList*>* msg);
    // private System.Void getInvitableUsersCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.UserList> msg)
    // Offset: 0x92D800
    void getInvitableUsersCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::UserList*>* msg);
    // private System.Void inviteUserCallback(Oculus.Platform.Message msg)
    // Offset: 0x92D8F8
    void inviteUserCallback(::Oculus::Platform::Message* msg);
  }; // Oculus.Platform.Samples.SimplePlatformSample.DataEntry
  #pragma pack(pop)
  static check_size<sizeof(DataEntry), 24 + sizeof(::UnityEngine::UI::Text*)> __Oculus_Platform_Samples_SimplePlatformSample_DataEntrySizeCheck;
  static_assert(sizeof(DataEntry) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)()>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)()>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::SubmitCommand
// Il2CppName: SubmitCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::StringW)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::SubmitCommand)> {
  static const MethodInfo* get() {
    static auto* command = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "SubmitCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{command});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getLeaderboardEntries
// Il2CppName: getLeaderboardEntries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::StringW)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getLeaderboardEntries)> {
  static const MethodInfo* get() {
    static auto* leaderboardName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "getLeaderboardEntries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leaderboardName});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::writeLeaderboardEntry
// Il2CppName: writeLeaderboardEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::StringW, ::StringW)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::writeLeaderboardEntry)> {
  static const MethodInfo* get() {
    static auto* leaderboardName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "writeLeaderboardEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leaderboardName, value});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::addFieldsAchievement
// Il2CppName: addFieldsAchievement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::StringW, ::StringW)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::addFieldsAchievement)> {
  static const MethodInfo* get() {
    static auto* achievementName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fields = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "addFieldsAchievement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{achievementName, fields});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::addCountAchievement
// Il2CppName: addCountAchievement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::StringW, ::StringW)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::addCountAchievement)> {
  static const MethodInfo* get() {
    static auto* achievementName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "addCountAchievement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{achievementName, count});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::unlockAchievement
// Il2CppName: unlockAchievement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::StringW)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::unlockAchievement)> {
  static const MethodInfo* get() {
    static auto* achievementName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "unlockAchievement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{achievementName});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getAchievementProgress
// Il2CppName: getAchievementProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::StringW)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getAchievementProgress)> {
  static const MethodInfo* get() {
    static auto* achievementName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "getAchievementProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{achievementName});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getAchievementDefinition
// Il2CppName: getAchievementDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::StringW)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getAchievementDefinition)> {
  static const MethodInfo* get() {
    static auto* achievementName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "getAchievementDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{achievementName});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::checkEntitlement
// Il2CppName: checkEntitlement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)()>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::checkEntitlement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "checkEntitlement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getUserNonce
// Il2CppName: getUserNonce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)()>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getUserNonce)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "getUserNonce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::createAndJoinPrivateRoom
// Il2CppName: createAndJoinPrivateRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::StringW, ::StringW)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::createAndJoinPrivateRoom)> {
  static const MethodInfo* get() {
    static auto* joinPolicy = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* maxUsers = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "createAndJoinPrivateRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{joinPolicy, maxUsers});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getCurrentRoom
// Il2CppName: getCurrentRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)()>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getCurrentRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "getCurrentRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getRoom
// Il2CppName: getRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::StringW)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getRoom)> {
  static const MethodInfo* get() {
    static auto* roomID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "getRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomID});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::joinRoom
// Il2CppName: joinRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::StringW)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::joinRoom)> {
  static const MethodInfo* get() {
    static auto* roomID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "joinRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomID});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::leaveRoom
// Il2CppName: leaveRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::StringW)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::leaveRoom)> {
  static const MethodInfo* get() {
    static auto* roomID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "leaveRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomID});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::kickUser
// Il2CppName: kickUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::StringW, ::StringW)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::kickUser)> {
  static const MethodInfo* get() {
    static auto* roomID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "kickUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomID, userID});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getLoggedInUser
// Il2CppName: getLoggedInUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)()>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getLoggedInUser)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "getLoggedInUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getUser
// Il2CppName: getUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::StringW)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getUser)> {
  static const MethodInfo* get() {
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "getUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userID});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getLoggedInFriends
// Il2CppName: getLoggedInFriends
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)()>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getLoggedInFriends)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "getLoggedInFriends", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getInvitableUsers
// Il2CppName: getInvitableUsers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)()>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getInvitableUsers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "getInvitableUsers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::inviteUser
// Il2CppName: inviteUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::StringW, ::StringW)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::inviteUser)> {
  static const MethodInfo* get() {
    static auto* roomID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* inviteToken = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "inviteUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomID, inviteToken});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::setRoomDescription
// Il2CppName: setRoomDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::StringW, ::StringW)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::setRoomDescription)> {
  static const MethodInfo* get() {
    static auto* roomID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* description = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "setRoomDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomID, description});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::updateRoomDataStore
// Il2CppName: updateRoomDataStore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::StringW, ::StringW, ::StringW)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::updateRoomDataStore)> {
  static const MethodInfo* get() {
    static auto* roomID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "updateRoomDataStore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomID, key, value});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::printOutputLine
// Il2CppName: printOutputLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::StringW)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::printOutputLine)> {
  static const MethodInfo* get() {
    static auto* newLine = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "printOutputLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newLine});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::outputRoomDetails
// Il2CppName: outputRoomDetails
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Models::Room*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::outputRoomDetails)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "Room")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "outputRoomDetails", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::outputUserArray
// Il2CppName: outputUserArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Models::UserList*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::outputUserArray)> {
  static const MethodInfo* get() {
    static auto* users = &::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "UserList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "outputUserArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{users});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::userProofCallback
// Il2CppName: userProofCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::UserProof*>*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::userProofCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "UserProof")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "userProofCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getEntitlementCallback
// Il2CppName: getEntitlementCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Message*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getEntitlementCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "getEntitlementCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::leaderboardGetCallback
// Il2CppName: leaderboardGetCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::LeaderboardEntryList*>*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::leaderboardGetCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "LeaderboardEntryList")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "leaderboardGetCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::leaderboardWriteCallback
// Il2CppName: leaderboardWriteCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Message*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::leaderboardWriteCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "leaderboardWriteCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::achievementFieldsCallback
// Il2CppName: achievementFieldsCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Message*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::achievementFieldsCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "achievementFieldsCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::achievementCountCallback
// Il2CppName: achievementCountCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Message*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::achievementCountCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "achievementCountCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::achievementUnlockCallback
// Il2CppName: achievementUnlockCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Message*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::achievementUnlockCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "achievementUnlockCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::achievementProgressCallback
// Il2CppName: achievementProgressCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::AchievementProgressList*>*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::achievementProgressCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "AchievementProgressList")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "achievementProgressCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::achievementDefinitionCallback
// Il2CppName: achievementDefinitionCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::AchievementDefinitionList*>*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::achievementDefinitionCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "AchievementDefinitionList")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "achievementDefinitionCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::createAndJoinPrivateRoomCallback
// Il2CppName: createAndJoinPrivateRoomCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::createAndJoinPrivateRoomCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "Room")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "createAndJoinPrivateRoomCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getCurrentRoomCallback
// Il2CppName: getCurrentRoomCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getCurrentRoomCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "Room")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "getCurrentRoomCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::joinRoomCallback
// Il2CppName: joinRoomCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::joinRoomCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "Room")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "joinRoomCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::leaveRoomCallback
// Il2CppName: leaveRoomCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::leaveRoomCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "Room")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "leaveRoomCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getUserCallback
// Il2CppName: getUserCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::User*>*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getUserCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "User")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "getUserCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getFriendsCallback
// Il2CppName: getFriendsCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::UserList*>*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getFriendsCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "UserList")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "getFriendsCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getInvitableUsersCallback
// Il2CppName: getInvitableUsersCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::UserList*>*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::getInvitableUsersCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "UserList")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "getInvitableUsersCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::SimplePlatformSample::DataEntry::inviteUserCallback
// Il2CppName: inviteUserCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::SimplePlatformSample::DataEntry::*)(::Oculus::Platform::Message*)>(&Oculus::Platform::Samples::SimplePlatformSample::DataEntry::inviteUserCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::SimplePlatformSample::DataEntry*), "inviteUserCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
