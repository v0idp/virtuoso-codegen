// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: EventSystem
  class EventSystem;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Completed forward declares
// Type namespace: Oculus.Platform.Samples.VrVoiceChat
namespace Oculus::Platform::Samples::VrVoiceChat {
  // Forward declaring type: VREyeRaycaster
  class VREyeRaycaster;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Samples::VrVoiceChat::VREyeRaycaster);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::VrVoiceChat::VREyeRaycaster*, "Oculus.Platform.Samples.VrVoiceChat", "VREyeRaycaster");
// Type namespace: Oculus.Platform.Samples.VrVoiceChat
namespace Oculus::Platform::Samples::VrVoiceChat {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Samples.VrVoiceChat.VREyeRaycaster
  // [TokenAttribute] Offset: FFFFFFFF
  class VREyeRaycaster : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.EventSystems.EventSystem m_eventSystem
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::EventSystems::EventSystem* m_eventSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventSystems::EventSystem*) == 0x8);
    // private UnityEngine.UI.Button m_currentButton
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Button* m_currentButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.EventSystems.EventSystem m_eventSystem
    [[deprecated]] ::UnityEngine::EventSystems::EventSystem*& dyn_m_eventSystem();
    // Get instance field reference: private UnityEngine.UI.Button m_currentButton
    [[deprecated]] ::UnityEngine::UI::Button*& dyn_m_currentButton();
    // private System.Void Update()
    // Offset: 0x171E884
    void Update();
    // public System.Void .ctor()
    // Offset: 0x171EA8C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VREyeRaycaster* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Samples::VrVoiceChat::VREyeRaycaster::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VREyeRaycaster*, creationType>()));
    }
  }; // Oculus.Platform.Samples.VrVoiceChat.VREyeRaycaster
  #pragma pack(pop)
  static check_size<sizeof(VREyeRaycaster), 32 + sizeof(::UnityEngine::UI::Button*)> __Oculus_Platform_Samples_VrVoiceChat_VREyeRaycasterSizeCheck;
  static_assert(sizeof(VREyeRaycaster) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::VREyeRaycaster::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrVoiceChat::VREyeRaycaster::*)()>(&Oculus::Platform::Samples::VrVoiceChat::VREyeRaycaster::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::VREyeRaycaster*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::VREyeRaycaster::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
