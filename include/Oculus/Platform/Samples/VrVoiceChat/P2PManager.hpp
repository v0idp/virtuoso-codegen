// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Platform.PeerConnectionState
#include "Oculus/Platform/PeerConnectionState.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message`1<T>
  template<typename T>
  class Message_1;
}
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: NetworkingPeer
  class NetworkingPeer;
}
// Completed forward declares
// Type namespace: Oculus.Platform.Samples.VrVoiceChat
namespace Oculus::Platform::Samples::VrVoiceChat {
  // Forward declaring type: P2PManager
  class P2PManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Samples::VrVoiceChat::P2PManager);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::VrVoiceChat::P2PManager*, "Oculus.Platform.Samples.VrVoiceChat", "P2PManager");
// Type namespace: Oculus.Platform.Samples.VrVoiceChat
namespace Oculus::Platform::Samples::VrVoiceChat {
  // Size: 0x6C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Samples.VrVoiceChat.P2PManager
  // [TokenAttribute] Offset: FFFFFFFF
  class P2PManager : public ::Il2CppObject {
    public:
    public:
    // private System.UInt64 m_remoteID
    // Size: 0x8
    // Offset: 0x10
    uint64_t m_remoteID;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private Oculus.Platform.PeerConnectionState m_state
    // Size: 0x4
    // Offset: 0x18
    ::Oculus::Platform::PeerConnectionState m_state;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::PeerConnectionState) == 0x4);
    // private System.Single m_timeForNextUpdate
    // Size: 0x4
    // Offset: 0x1C
    float m_timeForNextUpdate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Byte[] sendTransformBuffer
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint8_t> sendTransformBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private readonly System.Byte[] receiveTransformBuffer
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<uint8_t> receiveTransformBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private UnityEngine.Vector3 receivedPosition
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 receivedPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 receivedPositionPrior
    // Size: 0xC
    // Offset: 0x3C
    ::UnityEngine::Vector3 receivedPositionPrior;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion receivedRotation
    // Size: 0x10
    // Offset: 0x48
    ::UnityEngine::Quaternion receivedRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion receivedRotationPrior
    // Size: 0x10
    // Offset: 0x58
    ::UnityEngine::Quaternion receivedRotationPrior;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Single receivedTime
    // Size: 0x4
    // Offset: 0x68
    float receivedTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static private readonly System.Single UPDATE_DELAY
    static float _get_UPDATE_DELAY();
    // Set static field: static private readonly System.Single UPDATE_DELAY
    static void _set_UPDATE_DELAY(float value);
    // Get static field: static private readonly System.Byte PACKET_SIZE
    static uint8_t _get_PACKET_SIZE();
    // Set static field: static private readonly System.Byte PACKET_SIZE
    static void _set_PACKET_SIZE(uint8_t value);
    // Get static field: static private readonly System.Byte PACKET_FORMAT
    static uint8_t _get_PACKET_FORMAT();
    // Set static field: static private readonly System.Byte PACKET_FORMAT
    static void _set_PACKET_FORMAT(uint8_t value);
    // Get instance field reference: private System.UInt64 m_remoteID
    [[deprecated("Use field access instead!")]] uint64_t& dyn_m_remoteID();
    // Get instance field reference: private Oculus.Platform.PeerConnectionState m_state
    [[deprecated("Use field access instead!")]] ::Oculus::Platform::PeerConnectionState& dyn_m_state();
    // Get instance field reference: private System.Single m_timeForNextUpdate
    [[deprecated("Use field access instead!")]] float& dyn_m_timeForNextUpdate();
    // Get instance field reference: private readonly System.Byte[] sendTransformBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_sendTransformBuffer();
    // Get instance field reference: private readonly System.Byte[] receiveTransformBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_receiveTransformBuffer();
    // Get instance field reference: private UnityEngine.Vector3 receivedPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_receivedPosition();
    // Get instance field reference: private UnityEngine.Vector3 receivedPositionPrior
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_receivedPositionPrior();
    // Get instance field reference: private UnityEngine.Quaternion receivedRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_receivedRotation();
    // Get instance field reference: private UnityEngine.Quaternion receivedRotationPrior
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_receivedRotationPrior();
    // Get instance field reference: private System.Single receivedTime
    [[deprecated("Use field access instead!")]] float& dyn_receivedTime();
    // public System.Boolean get_Connected()
    // Offset: 0xB553D8
    bool get_Connected();
    // public System.Boolean get_ShouldSendHeadUpdate()
    // Offset: 0xB55A00
    bool get_ShouldSendHeadUpdate();
    // public System.Void .ctor(UnityEngine.Transform initialHeadTransform)
    // Offset: 0xB550B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static P2PManager* New_ctor(::UnityEngine::Transform* initialHeadTransform) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Samples::VrVoiceChat::P2PManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<P2PManager*, creationType>(initialHeadTransform)));
    }
    // static private System.Void .cctor()
    // Offset: 0xB56064
    static void _cctor();
    // public System.Void ConnectTo(System.UInt64 userID)
    // Offset: 0xB5523C
    void ConnectTo(uint64_t userID);
    // public System.Void Disconnect()
    // Offset: 0xB553A8
    void Disconnect();
    // private System.Void PeerConnectRequestCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.NetworkingPeer> msg)
    // Offset: 0xB553E8
    void PeerConnectRequestCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::NetworkingPeer*>* msg);
    // private System.Void ConnectionStateChangedCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.NetworkingPeer> msg)
    // Offset: 0xB5558C
    void ConnectionStateChangedCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::NetworkingPeer*>* msg);
    // public System.Void SendHeadTransform(UnityEngine.Transform headTransform)
    // Offset: 0xB55A44
    void SendHeadTransform(::UnityEngine::Transform* headTransform);
    // private System.Void PackFloat(System.Single f, System.Byte[] buf, ref System.Int32 offset)
    // Offset: 0xB55BE4
    void PackFloat(float f, ::ArrayW<uint8_t> buf, ByRef<int> offset);
    // public System.Void GetRemoteHeadTransform(UnityEngine.Transform headTransform)
    // Offset: 0xB55C88
    void GetRemoteHeadTransform(::UnityEngine::Transform* headTransform);
  }; // Oculus.Platform.Samples.VrVoiceChat.P2PManager
  #pragma pack(pop)
  static check_size<sizeof(P2PManager), 104 + sizeof(float)> __Oculus_Platform_Samples_VrVoiceChat_P2PManagerSizeCheck;
  static_assert(sizeof(P2PManager) == 0x6C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::P2PManager::get_Connected
// Il2CppName: get_Connected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Platform::Samples::VrVoiceChat::P2PManager::*)()>(&Oculus::Platform::Samples::VrVoiceChat::P2PManager::get_Connected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::P2PManager*), "get_Connected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::P2PManager::get_ShouldSendHeadUpdate
// Il2CppName: get_ShouldSendHeadUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Platform::Samples::VrVoiceChat::P2PManager::*)()>(&Oculus::Platform::Samples::VrVoiceChat::P2PManager::get_ShouldSendHeadUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::P2PManager*), "get_ShouldSendHeadUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::P2PManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::P2PManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Platform::Samples::VrVoiceChat::P2PManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::P2PManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::P2PManager::ConnectTo
// Il2CppName: ConnectTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrVoiceChat::P2PManager::*)(uint64_t)>(&Oculus::Platform::Samples::VrVoiceChat::P2PManager::ConnectTo)> {
  static const MethodInfo* get() {
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::P2PManager*), "ConnectTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userID});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::P2PManager::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrVoiceChat::P2PManager::*)()>(&Oculus::Platform::Samples::VrVoiceChat::P2PManager::Disconnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::P2PManager*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::P2PManager::PeerConnectRequestCallback
// Il2CppName: PeerConnectRequestCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrVoiceChat::P2PManager::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::NetworkingPeer*>*)>(&Oculus::Platform::Samples::VrVoiceChat::P2PManager::PeerConnectRequestCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "NetworkingPeer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::P2PManager*), "PeerConnectRequestCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::P2PManager::ConnectionStateChangedCallback
// Il2CppName: ConnectionStateChangedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrVoiceChat::P2PManager::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::NetworkingPeer*>*)>(&Oculus::Platform::Samples::VrVoiceChat::P2PManager::ConnectionStateChangedCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "NetworkingPeer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::P2PManager*), "ConnectionStateChangedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::P2PManager::SendHeadTransform
// Il2CppName: SendHeadTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrVoiceChat::P2PManager::*)(::UnityEngine::Transform*)>(&Oculus::Platform::Samples::VrVoiceChat::P2PManager::SendHeadTransform)> {
  static const MethodInfo* get() {
    static auto* headTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::P2PManager*), "SendHeadTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{headTransform});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::P2PManager::PackFloat
// Il2CppName: PackFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrVoiceChat::P2PManager::*)(float, ::ArrayW<uint8_t>, ByRef<int>)>(&Oculus::Platform::Samples::VrVoiceChat::P2PManager::PackFloat)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::P2PManager*), "PackFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f, buf, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::P2PManager::GetRemoteHeadTransform
// Il2CppName: GetRemoteHeadTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrVoiceChat::P2PManager::*)(::UnityEngine::Transform*)>(&Oculus::Platform::Samples::VrVoiceChat::P2PManager::GetRemoteHeadTransform)> {
  static const MethodInfo* get() {
    static auto* headTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::P2PManager*), "GetRemoteHeadTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{headTransform});
  }
};
