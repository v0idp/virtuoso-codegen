// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Platform.Samples.VrVoiceChat.RoomManager/Oculus.Platform.Samples.VrVoiceChat.Invite
#include "Oculus/Platform/Samples/VrVoiceChat/RoomManager.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Platform::Samples::VrVoiceChat
namespace Oculus::Platform::Samples::VrVoiceChat {
  // Skipping declaration: RoomManager because it is already included!
  // Forward declaring type: P2PManager
  class P2PManager;
  // Forward declaring type: VoipManager
  class VoipManager;
  // Skipping declaration: State because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message
  class Message;
  // Forward declaring type: Message`1<T>
  template<typename T>
  class Message_1;
}
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: User
  class User;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Oculus.Platform.Samples.VrVoiceChat
namespace Oculus::Platform::Samples::VrVoiceChat {
  // Forward declaring type: PlatformManager
  class PlatformManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Samples::VrVoiceChat::PlatformManager);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::VrVoiceChat::PlatformManager*, "Oculus.Platform.Samples.VrVoiceChat", "PlatformManager");
// Type namespace: Oculus.Platform.Samples.VrVoiceChat
namespace Oculus::Platform::Samples::VrVoiceChat {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Samples.VrVoiceChat.PlatformManager
  // [TokenAttribute] Offset: FFFFFFFF
  class PlatformManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State
    struct State;
    // Nested type: ::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::$$c__DisplayClass31_0
    class $$c__DisplayClass31_0;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State INITIALIZING
      static constexpr const int INITIALIZING = 0;
      // Get static field: static public Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State INITIALIZING
      static ::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State _get_INITIALIZING();
      // Set static field: static public Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State INITIALIZING
      static void _set_INITIALIZING(::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State value);
      // static field const value: static public Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State WAITING_TO_CALL_OR_ANSWER
      static constexpr const int WAITING_TO_CALL_OR_ANSWER = 1;
      // Get static field: static public Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State WAITING_TO_CALL_OR_ANSWER
      static ::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State _get_WAITING_TO_CALL_OR_ANSWER();
      // Set static field: static public Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State WAITING_TO_CALL_OR_ANSWER
      static void _set_WAITING_TO_CALL_OR_ANSWER(::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State value);
      // static field const value: static public Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State WAITING_FOR_ANSWER
      static constexpr const int WAITING_FOR_ANSWER = 2;
      // Get static field: static public Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State WAITING_FOR_ANSWER
      static ::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State _get_WAITING_FOR_ANSWER();
      // Set static field: static public Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State WAITING_FOR_ANSWER
      static void _set_WAITING_FOR_ANSWER(::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State value);
      // static field const value: static public Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State CONNECTED_IN_A_ROOM
      static constexpr const int CONNECTED_IN_A_ROOM = 3;
      // Get static field: static public Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State CONNECTED_IN_A_ROOM
      static ::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State _get_CONNECTED_IN_A_ROOM();
      // Set static field: static public Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State CONNECTED_IN_A_ROOM
      static void _set_CONNECTED_IN_A_ROOM(::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State value);
      // static field const value: static public Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State HANGUP
      static constexpr const int HANGUP = 4;
      // Get static field: static public Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State HANGUP
      static ::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State _get_HANGUP();
      // Set static field: static public Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State HANGUP
      static void _set_HANGUP(::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated]] int& dyn_value__();
    }; // Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State
    #pragma pack(pop)
    static check_size<sizeof(PlatformManager::State), 0 + sizeof(int)> __Oculus_Platform_Samples_VrVoiceChat_PlatformManager_StateSizeCheck;
    static_assert(sizeof(PlatformManager::State) == 0x4);
    public:
    // private UnityEngine.GameObject m_invitesList
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* m_invitesList;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject m_invitePrefab
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* m_invitePrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Camera m_camera
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Camera* m_camera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private UnityEngine.GameObject m_remoteHead
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* m_remoteHead;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State m_currentState
    // Size: 0x4
    // Offset: 0x38
    ::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State m_currentState;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State) == 0x4);
    // Padding between fields: m_currentState and: m_roomManager
    char __padding4[0x4] = {};
    // private Oculus.Platform.Samples.VrVoiceChat.RoomManager m_roomManager
    // Size: 0x8
    // Offset: 0x40
    ::Oculus::Platform::Samples::VrVoiceChat::RoomManager* m_roomManager;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::VrVoiceChat::RoomManager*) == 0x8);
    // private Oculus.Platform.Samples.VrVoiceChat.P2PManager m_p2pManager
    // Size: 0x8
    // Offset: 0x48
    ::Oculus::Platform::Samples::VrVoiceChat::P2PManager* m_p2pManager;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::VrVoiceChat::P2PManager*) == 0x8);
    // private Oculus.Platform.Samples.VrVoiceChat.VoipManager m_voipManager
    // Size: 0x8
    // Offset: 0x50
    ::Oculus::Platform::Samples::VrVoiceChat::VoipManager* m_voipManager;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Samples::VrVoiceChat::VoipManager*) == 0x8);
    // private System.UInt64 m_myID
    // Size: 0x8
    // Offset: 0x58
    uint64_t m_myID;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.String m_myOculusID
    // Size: 0x8
    // Offset: 0x60
    ::StringW m_myOculusID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private Oculus.Platform.Samples.VrVoiceChat.PlatformManager s_instance
    static ::Oculus::Platform::Samples::VrVoiceChat::PlatformManager* _get_s_instance();
    // Set static field: static private Oculus.Platform.Samples.VrVoiceChat.PlatformManager s_instance
    static void _set_s_instance(::Oculus::Platform::Samples::VrVoiceChat::PlatformManager* value);
    // Get instance field reference: private UnityEngine.GameObject m_invitesList
    [[deprecated]] ::UnityEngine::GameObject*& dyn_m_invitesList();
    // Get instance field reference: private UnityEngine.GameObject m_invitePrefab
    [[deprecated]] ::UnityEngine::GameObject*& dyn_m_invitePrefab();
    // Get instance field reference: private UnityEngine.Camera m_camera
    [[deprecated]] ::UnityEngine::Camera*& dyn_m_camera();
    // Get instance field reference: private UnityEngine.GameObject m_remoteHead
    [[deprecated]] ::UnityEngine::GameObject*& dyn_m_remoteHead();
    // Get instance field reference: private Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State m_currentState
    [[deprecated]] ::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State& dyn_m_currentState();
    // Get instance field reference: private Oculus.Platform.Samples.VrVoiceChat.RoomManager m_roomManager
    [[deprecated]] ::Oculus::Platform::Samples::VrVoiceChat::RoomManager*& dyn_m_roomManager();
    // Get instance field reference: private Oculus.Platform.Samples.VrVoiceChat.P2PManager m_p2pManager
    [[deprecated]] ::Oculus::Platform::Samples::VrVoiceChat::P2PManager*& dyn_m_p2pManager();
    // Get instance field reference: private Oculus.Platform.Samples.VrVoiceChat.VoipManager m_voipManager
    [[deprecated]] ::Oculus::Platform::Samples::VrVoiceChat::VoipManager*& dyn_m_voipManager();
    // Get instance field reference: private System.UInt64 m_myID
    [[deprecated]] uint64_t& dyn_m_myID();
    // Get instance field reference: private System.String m_myOculusID
    [[deprecated]] ::StringW& dyn_m_myOculusID();
    // static public Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State get_CurrentState()
    // Offset: 0xB57D6C
    static ::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State get_CurrentState();
    // static public System.UInt64 get_MyID()
    // Offset: 0xB552C8
    static uint64_t get_MyID();
    // static public System.String get_MyOculusID()
    // Offset: 0xB57DDC
    static ::StringW get_MyOculusID();
    // private System.Void Update()
    // Offset: 0xB5734C
    void Update();
    // private System.Void Awake()
    // Offset: 0xB573FC
    void Awake();
    // private System.Void Start()
    // Offset: 0xB579BC
    void Start();
    // private System.Void IsEntitledCallback(Oculus.Platform.Message msg)
    // Offset: 0xB57A5C
    void IsEntitledCallback(::Oculus::Platform::Message* msg);
    // private System.Void GetLoggedInUserCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.User> msg)
    // Offset: 0xB57C28
    void GetLoggedInUserCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::User*>* msg);
    // private System.Void OnApplicationQuit()
    // Offset: 0xB57D14
    void OnApplicationQuit();
    // static public System.Void TerminateWithError(Oculus.Platform.Message msg)
    // Offset: 0xB57B74
    static void TerminateWithError(::Oculus::Platform::Message* msg);
    // public System.Void CallFriendOnClick()
    // Offset: 0xB57F04
    void CallFriendOnClick();
    // public System.Void HangupOnClick()
    // Offset: 0xB57F88
    void HangupOnClick();
    // public System.Void QuitOnClick()
    // Offset: 0xB57FA4
    void QuitOnClick();
    // static public System.Void AnswerCallOnClick(System.UInt64 roomID)
    // Offset: 0xB57FAC
    static void AnswerCallOnClick(uint64_t roomID);
    // static public System.Void TransitionToState(Oculus.Platform.Samples.VrVoiceChat.PlatformManager/Oculus.Platform.Samples.VrVoiceChat.State newState)
    // Offset: 0xB57638
    static void TransitionToState(::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State newState);
    // static public System.Void SetBackgroundColorForState()
    // Offset: 0xB557B8
    static void SetBackgroundColorForState();
    // static public System.Void SetActiveInvites(System.Collections.Generic.List`1<Oculus.Platform.Samples.VrVoiceChat.RoomManager/Oculus.Platform.Samples.VrVoiceChat.Invite> invites)
    // Offset: 0xB580A8
    static void SetActiveInvites(::System::Collections::Generic::List_1<::Oculus::Platform::Samples::VrVoiceChat::RoomManager::Invite>* invites);
    // public System.Void .ctor()
    // Offset: 0xB58838
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlatformManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlatformManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xB58840
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // Oculus.Platform.Samples.VrVoiceChat.PlatformManager
  #pragma pack(pop)
  static check_size<sizeof(PlatformManager), 96 + sizeof(::StringW)> __Oculus_Platform_Samples_VrVoiceChat_PlatformManagerSizeCheck;
  static_assert(sizeof(PlatformManager) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State, "Oculus.Platform.Samples.VrVoiceChat", "PlatformManager/State");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::get_CurrentState
// Il2CppName: get_CurrentState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State (*)()>(&Oculus::Platform::Samples::VrVoiceChat::PlatformManager::get_CurrentState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::PlatformManager*), "get_CurrentState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::get_MyID
// Il2CppName: get_MyID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)()>(&Oculus::Platform::Samples::VrVoiceChat::PlatformManager::get_MyID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::PlatformManager*), "get_MyID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::get_MyOculusID
// Il2CppName: get_MyOculusID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&Oculus::Platform::Samples::VrVoiceChat::PlatformManager::get_MyOculusID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::PlatformManager*), "get_MyOculusID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrVoiceChat::PlatformManager::*)()>(&Oculus::Platform::Samples::VrVoiceChat::PlatformManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::PlatformManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrVoiceChat::PlatformManager::*)()>(&Oculus::Platform::Samples::VrVoiceChat::PlatformManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::PlatformManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrVoiceChat::PlatformManager::*)()>(&Oculus::Platform::Samples::VrVoiceChat::PlatformManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::PlatformManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::IsEntitledCallback
// Il2CppName: IsEntitledCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrVoiceChat::PlatformManager::*)(::Oculus::Platform::Message*)>(&Oculus::Platform::Samples::VrVoiceChat::PlatformManager::IsEntitledCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::PlatformManager*), "IsEntitledCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::GetLoggedInUserCallback
// Il2CppName: GetLoggedInUserCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrVoiceChat::PlatformManager::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::User*>*)>(&Oculus::Platform::Samples::VrVoiceChat::PlatformManager::GetLoggedInUserCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "User")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::PlatformManager*), "GetLoggedInUserCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrVoiceChat::PlatformManager::*)()>(&Oculus::Platform::Samples::VrVoiceChat::PlatformManager::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::PlatformManager*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::TerminateWithError
// Il2CppName: TerminateWithError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Oculus::Platform::Message*)>(&Oculus::Platform::Samples::VrVoiceChat::PlatformManager::TerminateWithError)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::PlatformManager*), "TerminateWithError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::CallFriendOnClick
// Il2CppName: CallFriendOnClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrVoiceChat::PlatformManager::*)()>(&Oculus::Platform::Samples::VrVoiceChat::PlatformManager::CallFriendOnClick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::PlatformManager*), "CallFriendOnClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::HangupOnClick
// Il2CppName: HangupOnClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrVoiceChat::PlatformManager::*)()>(&Oculus::Platform::Samples::VrVoiceChat::PlatformManager::HangupOnClick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::PlatformManager*), "HangupOnClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::QuitOnClick
// Il2CppName: QuitOnClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::Samples::VrVoiceChat::PlatformManager::*)()>(&Oculus::Platform::Samples::VrVoiceChat::PlatformManager::QuitOnClick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::PlatformManager*), "QuitOnClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::AnswerCallOnClick
// Il2CppName: AnswerCallOnClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&Oculus::Platform::Samples::VrVoiceChat::PlatformManager::AnswerCallOnClick)> {
  static const MethodInfo* get() {
    static auto* roomID = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::PlatformManager*), "AnswerCallOnClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomID});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::TransitionToState
// Il2CppName: TransitionToState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Oculus::Platform::Samples::VrVoiceChat::PlatformManager::State)>(&Oculus::Platform::Samples::VrVoiceChat::PlatformManager::TransitionToState)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("Oculus.Platform.Samples.VrVoiceChat", "PlatformManager/State")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::PlatformManager*), "TransitionToState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::SetBackgroundColorForState
// Il2CppName: SetBackgroundColorForState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Platform::Samples::VrVoiceChat::PlatformManager::SetBackgroundColorForState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::PlatformManager*), "SetBackgroundColorForState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::SetActiveInvites
// Il2CppName: SetActiveInvites
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::Oculus::Platform::Samples::VrVoiceChat::RoomManager::Invite>*)>(&Oculus::Platform::Samples::VrVoiceChat::PlatformManager::SetActiveInvites)> {
  static const MethodInfo* get() {
    static auto* invites = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Samples.VrVoiceChat", "RoomManager/Invite")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::PlatformManager*), "SetActiveInvites", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{invites});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Platform::Samples::VrVoiceChat::PlatformManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Platform::Samples::VrVoiceChat::PlatformManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::Samples::VrVoiceChat::PlatformManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
