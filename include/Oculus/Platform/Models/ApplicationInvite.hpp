// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: Destination
  class Destination;
  // Forward declaring type: User
  class User;
}
// Completed forward declares
// Type namespace: Oculus.Platform.Models
namespace Oculus::Platform::Models {
  // Forward declaring type: ApplicationInvite
  class ApplicationInvite;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Models::ApplicationInvite);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Models::ApplicationInvite*, "Oculus.Platform.Models", "ApplicationInvite");
// Type namespace: Oculus.Platform.Models
namespace Oculus::Platform::Models {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Models.ApplicationInvite
  // [TokenAttribute] Offset: FFFFFFFF
  class ApplicationInvite : public ::Il2CppObject {
    public:
    public:
    // public readonly Oculus.Platform.Models.Destination DestinationOptional
    // Size: 0x8
    // Offset: 0x10
    ::Oculus::Platform::Models::Destination* DestinationOptional;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Models::Destination*) == 0x8);
    // [ObsoleteAttribute] Offset: 0x6B9250
    // public readonly Oculus.Platform.Models.Destination Destination
    // Size: 0x8
    // Offset: 0x18
    ::Oculus::Platform::Models::Destination* Destination;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Models::Destination*) == 0x8);
    // public readonly System.UInt64 ID
    // Size: 0x8
    // Offset: 0x20
    uint64_t _ID;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public readonly System.Boolean IsActive
    // Size: 0x1
    // Offset: 0x28
    bool IsActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsActive and: LobbySessionId
    char __padding3[0x7] = {};
    // public readonly System.String LobbySessionId
    // Size: 0x8
    // Offset: 0x30
    ::StringW LobbySessionId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly System.String MatchSessionId
    // Size: 0x8
    // Offset: 0x38
    ::StringW MatchSessionId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly Oculus.Platform.Models.User RecipientOptional
    // Size: 0x8
    // Offset: 0x40
    ::Oculus::Platform::Models::User* RecipientOptional;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Models::User*) == 0x8);
    // [ObsoleteAttribute] Offset: 0x6B9288
    // public readonly Oculus.Platform.Models.User Recipient
    // Size: 0x8
    // Offset: 0x48
    ::Oculus::Platform::Models::User* Recipient;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Models::User*) == 0x8);
    public:
    // Get instance field reference: public readonly Oculus.Platform.Models.Destination DestinationOptional
    [[deprecated("Use field access instead!")]] ::Oculus::Platform::Models::Destination*& dyn_DestinationOptional();
    // Get instance field reference: public readonly Oculus.Platform.Models.Destination Destination
    [[deprecated("Use field access instead!")]] ::Oculus::Platform::Models::Destination*& dyn_Destination();
    // Get instance field reference: public readonly System.UInt64 ID
    [[deprecated("Use field access instead!")]] uint64_t& dyn_ID();
    // Get instance field reference: public readonly System.Boolean IsActive
    [[deprecated("Use field access instead!")]] bool& dyn_IsActive();
    // Get instance field reference: public readonly System.String LobbySessionId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_LobbySessionId();
    // Get instance field reference: public readonly System.String MatchSessionId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_MatchSessionId();
    // Get instance field reference: public readonly Oculus.Platform.Models.User RecipientOptional
    [[deprecated("Use field access instead!")]] ::Oculus::Platform::Models::User*& dyn_RecipientOptional();
    // Get instance field reference: public readonly Oculus.Platform.Models.User Recipient
    [[deprecated("Use field access instead!")]] ::Oculus::Platform::Models::User*& dyn_Recipient();
    // public System.Void .ctor(System.IntPtr o)
    // Offset: 0x8F89AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ApplicationInvite* New_ctor(::System::IntPtr o) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Models::ApplicationInvite::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ApplicationInvite*, creationType>(o)));
    }
  }; // Oculus.Platform.Models.ApplicationInvite
  #pragma pack(pop)
  static check_size<sizeof(ApplicationInvite), 72 + sizeof(::Oculus::Platform::Models::User*)> __Oculus_Platform_Models_ApplicationInviteSizeCheck;
  static_assert(sizeof(ApplicationInvite) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Models::ApplicationInvite::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
