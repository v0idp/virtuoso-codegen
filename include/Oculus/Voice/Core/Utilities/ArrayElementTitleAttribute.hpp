// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.PropertyAttribute
#include "UnityEngine/PropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Oculus.Voice.Core.Utilities
namespace Oculus::Voice::Core::Utilities {
  // Forward declaring type: ArrayElementTitleAttribute
  class ArrayElementTitleAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Voice::Core::Utilities::ArrayElementTitleAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Voice::Core::Utilities::ArrayElementTitleAttribute*, "Oculus.Voice.Core.Utilities", "ArrayElementTitleAttribute");
// Type namespace: Oculus.Voice.Core.Utilities
namespace Oculus::Voice::Core::Utilities {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Voice.Core.Utilities.ArrayElementTitleAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  class ArrayElementTitleAttribute : public ::UnityEngine::PropertyAttribute {
    public:
    public:
    // public System.String varname
    // Size: 0x8
    // Offset: 0x10
    ::StringW varname;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String fallbackName
    // Size: 0x8
    // Offset: 0x18
    ::StringW fallbackName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.String varname
    [[deprecated("Use field access instead!")]] ::StringW& dyn_varname();
    // Get instance field reference: public System.String fallbackName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_fallbackName();
    // public System.Void .ctor(System.String elementTitleVar, System.String fallbackName)
    // Offset: 0x190EA1C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ArrayElementTitleAttribute* New_ctor(::StringW elementTitleVar, ::StringW fallbackName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Voice::Core::Utilities::ArrayElementTitleAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ArrayElementTitleAttribute*, creationType>(elementTitleVar, fallbackName)));
    }
  }; // Oculus.Voice.Core.Utilities.ArrayElementTitleAttribute
  #pragma pack(pop)
  static check_size<sizeof(ArrayElementTitleAttribute), 24 + sizeof(::StringW)> __Oculus_Voice_Core_Utilities_ArrayElementTitleAttributeSizeCheck;
  static_assert(sizeof(ArrayElementTitleAttribute) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Voice::Core::Utilities::ArrayElementTitleAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
