// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVR.OpenVR.ETrackedDeviceProperty
#include "OVR/OpenVR/ETrackedDeviceProperty.hpp"
// Completed includes
// Type namespace: OVR.OpenVR
namespace OVR::OpenVR {
  // Forward declaring type: VREvent_Property_t
  struct VREvent_Property_t;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::OVR::OpenVR::VREvent_Property_t, "OVR.OpenVR", "VREvent_Property_t");
// Type namespace: OVR.OpenVR
namespace OVR::OpenVR {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVR.OpenVR.VREvent_Property_t
  // [TokenAttribute] Offset: FFFFFFFF
  struct VREvent_Property_t/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt64 container
    // Size: 0x8
    // Offset: 0x0
    uint64_t container;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public OVR.OpenVR.ETrackedDeviceProperty prop
    // Size: 0x4
    // Offset: 0x8
    ::OVR::OpenVR::ETrackedDeviceProperty prop;
    // Field size check
    static_assert(sizeof(::OVR::OpenVR::ETrackedDeviceProperty) == 0x4);
    public:
    // Creating value type constructor for type: VREvent_Property_t
    constexpr VREvent_Property_t(uint64_t container_ = {}, ::OVR::OpenVR::ETrackedDeviceProperty prop_ = {}) noexcept : container{container_}, prop{prop_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt64 container
    [[deprecated("Use field access instead!")]] uint64_t& dyn_container();
    // Get instance field reference: public OVR.OpenVR.ETrackedDeviceProperty prop
    [[deprecated("Use field access instead!")]] ::OVR::OpenVR::ETrackedDeviceProperty& dyn_prop();
  }; // OVR.OpenVR.VREvent_Property_t
  #pragma pack(pop)
  static check_size<sizeof(VREvent_Property_t), 8 + sizeof(::OVR::OpenVR::ETrackedDeviceProperty)> __OVR_OpenVR_VREvent_Property_tSizeCheck;
  static_assert(sizeof(VREvent_Property_t) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
