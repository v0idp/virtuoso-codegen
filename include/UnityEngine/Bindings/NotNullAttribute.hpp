// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.Bindings
namespace UnityEngine::Bindings {
  // Forward declaring type: NotNullAttribute
  class NotNullAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Bindings::NotNullAttribute);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Bindings::NotNullAttribute*, "UnityEngine.Bindings", "NotNullAttribute");
// Type namespace: UnityEngine.Bindings
namespace UnityEngine::Bindings {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Bindings.NotNullAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: 6D06FC
  // [VisibleToOtherModulesAttribute] Offset: FFFFFFFF
  class NotNullAttribute : public ::System::Attribute {
    public:
    public:
    // [DebuggerBrowsableAttribute] Offset: 0x6D0DF8
    // private System.String <Exception>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Exception;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return Exception;
    }
    // Get instance field reference: private System.String <Exception>k__BackingField
    [[deprecated]] ::StringW& dyn_$Exception$k__BackingField();
    // public System.Void set_Exception(System.String value)
    // Offset: 0x18FFDA8
    void set_Exception(::StringW value);
    // public System.Void .ctor(System.String exception)
    // Offset: 0x18FFDB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NotNullAttribute* New_ctor(::StringW exception) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Bindings::NotNullAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NotNullAttribute*, creationType>(exception)));
    }
  }; // UnityEngine.Bindings.NotNullAttribute
  #pragma pack(pop)
  static check_size<sizeof(NotNullAttribute), 16 + sizeof(::StringW)> __UnityEngine_Bindings_NotNullAttributeSizeCheck;
  static_assert(sizeof(NotNullAttribute) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Bindings::NotNullAttribute::set_Exception
// Il2CppName: set_Exception
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Bindings::NotNullAttribute::*)(::StringW)>(&UnityEngine::Bindings::NotNullAttribute::set_Exception)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Bindings::NotNullAttribute*), "set_Exception", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Bindings::NotNullAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
