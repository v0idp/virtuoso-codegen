// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Camera/UnityEngine.RenderRequestMode
#include "UnityEngine/Camera_RenderRequestMode.hpp"
// Including type: UnityEngine.Camera/UnityEngine.RenderRequestOutputSpace
#include "UnityEngine/Camera_RenderRequestOutputSpace.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTexture
  class RenderTexture;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Camera::RenderRequest, "UnityEngine", "Camera/RenderRequest");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Camera/UnityEngine.RenderRequest
  // [TokenAttribute] Offset: FFFFFFFF
  struct Camera::RenderRequest/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly UnityEngine.Camera/UnityEngine.RenderRequestMode m_CameraRenderMode
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::Camera::RenderRequestMode m_CameraRenderMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera::RenderRequestMode) == 0x4);
    // Padding between fields: m_CameraRenderMode and: m_ResultRT
    char __padding0[0x4] = {};
    // private readonly UnityEngine.RenderTexture m_ResultRT
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::RenderTexture* m_ResultRT;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private readonly UnityEngine.Camera/UnityEngine.RenderRequestOutputSpace m_OutputSpace
    // Size: 0x4
    // Offset: 0x10
    ::UnityEngine::Camera::RenderRequestOutputSpace m_OutputSpace;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera::RenderRequestOutputSpace) == 0x4);
    public:
    // Creating value type constructor for type: RenderRequest
    constexpr RenderRequest(::UnityEngine::Camera::RenderRequestMode m_CameraRenderMode_ = {}, ::UnityEngine::RenderTexture* m_ResultRT_ = {}, ::UnityEngine::Camera::RenderRequestOutputSpace m_OutputSpace_ = {}) noexcept : m_CameraRenderMode{m_CameraRenderMode_}, m_ResultRT{m_ResultRT_}, m_OutputSpace{m_OutputSpace_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly UnityEngine.Camera/UnityEngine.RenderRequestMode m_CameraRenderMode
    [[deprecated]] ::UnityEngine::Camera::RenderRequestMode& dyn_m_CameraRenderMode();
    // Get instance field reference: private readonly UnityEngine.RenderTexture m_ResultRT
    [[deprecated]] ::UnityEngine::RenderTexture*& dyn_m_ResultRT();
    // Get instance field reference: private readonly UnityEngine.Camera/UnityEngine.RenderRequestOutputSpace m_OutputSpace
    [[deprecated]] ::UnityEngine::Camera::RenderRequestOutputSpace& dyn_m_OutputSpace();
  }; // UnityEngine.Camera/UnityEngine.RenderRequest
  #pragma pack(pop)
  static check_size<sizeof(Camera::RenderRequest), 16 + sizeof(::UnityEngine::Camera::RenderRequestOutputSpace)> __UnityEngine_Camera_RenderRequestSizeCheck;
  static_assert(sizeof(Camera::RenderRequest) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
