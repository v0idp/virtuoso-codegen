// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.ContactPoint2D
#include "UnityEngine/ContactPoint2D.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collision2D
  class Collision2D;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Collision2D);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Collision2D*, "UnityEngine", "Collision2D");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x40
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Collision2D
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequiredByNativeCodeAttribute] Offset: 6CBF38
  class Collision2D : public ::Il2CppObject {
    public:
    public:
    // System.Int32 m_Collider
    // Size: 0x4
    // Offset: 0x10
    int m_Collider;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 m_OtherCollider
    // Size: 0x4
    // Offset: 0x14
    int m_OtherCollider;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 m_Rigidbody
    // Size: 0x4
    // Offset: 0x18
    int m_Rigidbody;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 m_OtherRigidbody
    // Size: 0x4
    // Offset: 0x1C
    int m_OtherRigidbody;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // UnityEngine.Vector2 m_RelativeVelocity
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Vector2 m_RelativeVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // System.Int32 m_Enabled
    // Size: 0x4
    // Offset: 0x28
    int m_Enabled;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 m_ContactCount
    // Size: 0x4
    // Offset: 0x2C
    int m_ContactCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // UnityEngine.ContactPoint2D[] m_ReusedContacts
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::ContactPoint2D> m_ReusedContacts;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ContactPoint2D>) == 0x8);
    // UnityEngine.ContactPoint2D[] m_LegacyContacts
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::ContactPoint2D> m_LegacyContacts;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ContactPoint2D>) == 0x8);
    public:
    // Get instance field reference: System.Int32 m_Collider
    [[deprecated("Use field access instead!")]] int& dyn_m_Collider();
    // Get instance field reference: System.Int32 m_OtherCollider
    [[deprecated("Use field access instead!")]] int& dyn_m_OtherCollider();
    // Get instance field reference: System.Int32 m_Rigidbody
    [[deprecated("Use field access instead!")]] int& dyn_m_Rigidbody();
    // Get instance field reference: System.Int32 m_OtherRigidbody
    [[deprecated("Use field access instead!")]] int& dyn_m_OtherRigidbody();
    // Get instance field reference: UnityEngine.Vector2 m_RelativeVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_RelativeVelocity();
    // Get instance field reference: System.Int32 m_Enabled
    [[deprecated("Use field access instead!")]] int& dyn_m_Enabled();
    // Get instance field reference: System.Int32 m_ContactCount
    [[deprecated("Use field access instead!")]] int& dyn_m_ContactCount();
    // Get instance field reference: UnityEngine.ContactPoint2D[] m_ReusedContacts
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ContactPoint2D>& dyn_m_ReusedContacts();
    // Get instance field reference: UnityEngine.ContactPoint2D[] m_LegacyContacts
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ContactPoint2D>& dyn_m_LegacyContacts();
    // public UnityEngine.Vector2 get_relativeVelocity()
    // Offset: 0x18FD92C
    ::UnityEngine::Vector2 get_relativeVelocity();
    // public UnityEngine.ContactPoint2D[] get_contacts()
    // Offset: 0x18FD934
    ::ArrayW<::UnityEngine::ContactPoint2D> get_contacts();
  }; // UnityEngine.Collision2D
  #pragma pack(pop)
  static check_size<sizeof(Collision2D), 56 + sizeof(::ArrayW<::UnityEngine::ContactPoint2D>)> __UnityEngine_Collision2DSizeCheck;
  static_assert(sizeof(Collision2D) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Collision2D::get_relativeVelocity
// Il2CppName: get_relativeVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::Collision2D::*)()>(&UnityEngine::Collision2D::get_relativeVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Collision2D*), "get_relativeVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Collision2D::get_contacts
// Il2CppName: get_contacts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::ContactPoint2D> (UnityEngine::Collision2D::*)()>(&UnityEngine::Collision2D::get_contacts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Collision2D*), "get_contacts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
