// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: WWWForm
  class WWWForm;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::WWWForm);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::WWWForm*, "UnityEngine", "WWWForm");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.WWWForm
  // [TokenAttribute] Offset: FFFFFFFF
  class WWWForm : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.Generic.List`1<System.Byte[]> formData
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::ArrayW<uint8_t>>* formData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::ArrayW<uint8_t>>*) == 0x8);
    // private System.Collections.Generic.List`1<System.String> fieldNames
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::StringW>* fieldNames;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Collections.Generic.List`1<System.String> fileNames
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::StringW>* fileNames;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Collections.Generic.List`1<System.String> types
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::StringW>* types;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Byte[] boundary
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<uint8_t> boundary;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Boolean containsFiles
    // Size: 0x1
    // Offset: 0x38
    bool containsFiles;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<System.Byte[]> formData
    [[deprecated]] ::System::Collections::Generic::List_1<::ArrayW<uint8_t>>*& dyn_formData();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> fieldNames
    [[deprecated]] ::System::Collections::Generic::List_1<::StringW>*& dyn_fieldNames();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> fileNames
    [[deprecated]] ::System::Collections::Generic::List_1<::StringW>*& dyn_fileNames();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> types
    [[deprecated]] ::System::Collections::Generic::List_1<::StringW>*& dyn_types();
    // Get instance field reference: private System.Byte[] boundary
    [[deprecated]] ::ArrayW<uint8_t>& dyn_boundary();
    // Get instance field reference: private System.Boolean containsFiles
    [[deprecated]] bool& dyn_containsFiles();
    // static System.Text.Encoding get_DefaultEncoding()
    // Offset: 0x18BFC18
    static ::System::Text::Encoding* get_DefaultEncoding();
    // public System.Collections.Generic.Dictionary`2<System.String,System.String> get_headers()
    // Offset: 0x18BF148
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* get_headers();
    // public System.Byte[] get_data()
    // Offset: 0x18BDF18
    ::ArrayW<uint8_t> get_data();
  }; // UnityEngine.WWWForm
  #pragma pack(pop)
  static check_size<sizeof(WWWForm), 56 + sizeof(bool)> __UnityEngine_WWWFormSizeCheck;
  static_assert(sizeof(WWWForm) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::WWWForm::get_DefaultEncoding
// Il2CppName: get_DefaultEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::Encoding* (*)()>(&UnityEngine::WWWForm::get_DefaultEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::WWWForm*), "get_DefaultEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::WWWForm::get_headers
// Il2CppName: get_headers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* (UnityEngine::WWWForm::*)()>(&UnityEngine::WWWForm::get_headers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::WWWForm*), "get_headers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::WWWForm::get_data
// Il2CppName: get_data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (UnityEngine::WWWForm::*)()>(&UnityEngine::WWWForm::get_data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::WWWForm*), "get_data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
