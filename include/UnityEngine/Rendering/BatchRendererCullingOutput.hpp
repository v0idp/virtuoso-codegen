// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Jobs.JobHandle
#include "Unity/Jobs/JobHandle.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Plane
  struct Plane;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: BatchVisibility
  struct BatchVisibility;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: BatchRendererCullingOutput
  struct BatchRendererCullingOutput;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::BatchRendererCullingOutput, "UnityEngine.Rendering", "BatchRendererCullingOutput");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x80
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.BatchRendererCullingOutput
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: 6630DC
  // [UsedByNativeCodeAttribute] Offset: 6630DC
  struct BatchRendererCullingOutput/*, public ::System::ValueType*/ {
    public:
    public:
    // public Unity.Jobs.JobHandle cullingJobsFence
    // Size: 0xC
    // Offset: 0x0
    ::Unity::Jobs::JobHandle cullingJobsFence;
    // Field size check
    static_assert(sizeof(::Unity::Jobs::JobHandle) == 0xC);
    // Padding between fields: cullingJobsFence and: cullingMatrix
    char __padding0[0x4] = {};
    // public UnityEngine.Matrix4x4 cullingMatrix
    // Size: 0x40
    // Offset: 0x10
    ::UnityEngine::Matrix4x4 cullingMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // public UnityEngine.Plane* cullingPlanes
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Plane* cullingPlanes;
    // Field size check
    static_assert(sizeof(::UnityEngine::Plane*) == 0x8);
    // public UnityEngine.Rendering.BatchVisibility* batchVisibility
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Rendering::BatchVisibility* batchVisibility;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::BatchVisibility*) == 0x8);
    // public System.Int32* visibleIndices
    // Size: 0x8
    // Offset: 0x60
    int* visibleIndices;
    // Field size check
    static_assert(sizeof(int*) == 0x8);
    // public System.Int32* visibleIndicesY
    // Size: 0x8
    // Offset: 0x68
    int* visibleIndicesY;
    // Field size check
    static_assert(sizeof(int*) == 0x8);
    // public System.Int32 cullingPlanesCount
    // Size: 0x4
    // Offset: 0x70
    int cullingPlanesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 batchVisibilityCount
    // Size: 0x4
    // Offset: 0x74
    int batchVisibilityCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 visibleIndicesCount
    // Size: 0x4
    // Offset: 0x78
    int visibleIndicesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single nearPlane
    // Size: 0x4
    // Offset: 0x7C
    float nearPlane;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: BatchRendererCullingOutput
    constexpr BatchRendererCullingOutput(::Unity::Jobs::JobHandle cullingJobsFence_ = {}, ::UnityEngine::Matrix4x4 cullingMatrix_ = {}, ::UnityEngine::Plane* cullingPlanes_ = {}, ::UnityEngine::Rendering::BatchVisibility* batchVisibility_ = {}, int* visibleIndices_ = {}, int* visibleIndicesY_ = {}, int cullingPlanesCount_ = {}, int batchVisibilityCount_ = {}, int visibleIndicesCount_ = {}, float nearPlane_ = {}) noexcept : cullingJobsFence{cullingJobsFence_}, cullingMatrix{cullingMatrix_}, cullingPlanes{cullingPlanes_}, batchVisibility{batchVisibility_}, visibleIndices{visibleIndices_}, visibleIndicesY{visibleIndicesY_}, cullingPlanesCount{cullingPlanesCount_}, batchVisibilityCount{batchVisibilityCount_}, visibleIndicesCount{visibleIndicesCount_}, nearPlane{nearPlane_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Unity.Jobs.JobHandle cullingJobsFence
    [[deprecated]] ::Unity::Jobs::JobHandle& dyn_cullingJobsFence();
    // Get instance field reference: public UnityEngine.Matrix4x4 cullingMatrix
    [[deprecated]] ::UnityEngine::Matrix4x4& dyn_cullingMatrix();
    // Get instance field reference: public UnityEngine.Plane* cullingPlanes
    [[deprecated]] ::UnityEngine::Plane*& dyn_cullingPlanes();
    // Get instance field reference: public UnityEngine.Rendering.BatchVisibility* batchVisibility
    [[deprecated]] ::UnityEngine::Rendering::BatchVisibility*& dyn_batchVisibility();
    // Get instance field reference: public System.Int32* visibleIndices
    [[deprecated]] int*& dyn_visibleIndices();
    // Get instance field reference: public System.Int32* visibleIndicesY
    [[deprecated]] int*& dyn_visibleIndicesY();
    // Get instance field reference: public System.Int32 cullingPlanesCount
    [[deprecated]] int& dyn_cullingPlanesCount();
    // Get instance field reference: public System.Int32 batchVisibilityCount
    [[deprecated]] int& dyn_batchVisibilityCount();
    // Get instance field reference: public System.Int32 visibleIndicesCount
    [[deprecated]] int& dyn_visibleIndicesCount();
    // Get instance field reference: public System.Single nearPlane
    [[deprecated]] float& dyn_nearPlane();
  }; // UnityEngine.Rendering.BatchRendererCullingOutput
  #pragma pack(pop)
  static check_size<sizeof(BatchRendererCullingOutput), 124 + sizeof(float)> __UnityEngine_Rendering_BatchRendererCullingOutputSizeCheck;
  static_assert(sizeof(BatchRendererCullingOutput) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
