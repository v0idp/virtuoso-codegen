// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MeshSubsetCombineUtility
#include "UnityEngine/MeshSubsetCombineUtility.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::MeshSubsetCombineUtility::MeshInstance, "UnityEngine", "MeshSubsetCombineUtility/MeshInstance");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x70
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.MeshSubsetCombineUtility/UnityEngine.MeshInstance
  // [TokenAttribute] Offset: FFFFFFFF
  struct MeshSubsetCombineUtility::MeshInstance/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 meshInstanceID
    // Size: 0x4
    // Offset: 0x0
    int meshInstanceID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 rendererInstanceID
    // Size: 0x4
    // Offset: 0x4
    int rendererInstanceID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 additionalVertexStreamsMeshInstanceID
    // Size: 0x4
    // Offset: 0x8
    int additionalVertexStreamsMeshInstanceID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 enlightenVertexStreamMeshInstanceID
    // Size: 0x4
    // Offset: 0xC
    int enlightenVertexStreamMeshInstanceID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Matrix4x4 transform
    // Size: 0x40
    // Offset: 0x10
    ::UnityEngine::Matrix4x4 transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // public UnityEngine.Vector4 lightmapScaleOffset
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Vector4 lightmapScaleOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // public UnityEngine.Vector4 realtimeLightmapScaleOffset
    // Size: 0x10
    // Offset: 0x60
    ::UnityEngine::Vector4 realtimeLightmapScaleOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    public:
    // Creating value type constructor for type: MeshInstance
    constexpr MeshInstance(int meshInstanceID_ = {}, int rendererInstanceID_ = {}, int additionalVertexStreamsMeshInstanceID_ = {}, int enlightenVertexStreamMeshInstanceID_ = {}, ::UnityEngine::Matrix4x4 transform_ = {}, ::UnityEngine::Vector4 lightmapScaleOffset_ = {}, ::UnityEngine::Vector4 realtimeLightmapScaleOffset_ = {}) noexcept : meshInstanceID{meshInstanceID_}, rendererInstanceID{rendererInstanceID_}, additionalVertexStreamsMeshInstanceID{additionalVertexStreamsMeshInstanceID_}, enlightenVertexStreamMeshInstanceID{enlightenVertexStreamMeshInstanceID_}, transform{transform_}, lightmapScaleOffset{lightmapScaleOffset_}, realtimeLightmapScaleOffset{realtimeLightmapScaleOffset_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 meshInstanceID
    [[deprecated("Use field access instead!")]] int& dyn_meshInstanceID();
    // Get instance field reference: public System.Int32 rendererInstanceID
    [[deprecated("Use field access instead!")]] int& dyn_rendererInstanceID();
    // Get instance field reference: public System.Int32 additionalVertexStreamsMeshInstanceID
    [[deprecated("Use field access instead!")]] int& dyn_additionalVertexStreamsMeshInstanceID();
    // Get instance field reference: public System.Int32 enlightenVertexStreamMeshInstanceID
    [[deprecated("Use field access instead!")]] int& dyn_enlightenVertexStreamMeshInstanceID();
    // Get instance field reference: public UnityEngine.Matrix4x4 transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_transform();
    // Get instance field reference: public UnityEngine.Vector4 lightmapScaleOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_lightmapScaleOffset();
    // Get instance field reference: public UnityEngine.Vector4 realtimeLightmapScaleOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_realtimeLightmapScaleOffset();
  }; // UnityEngine.MeshSubsetCombineUtility/UnityEngine.MeshInstance
  #pragma pack(pop)
  static check_size<sizeof(MeshSubsetCombineUtility::MeshInstance), 96 + sizeof(::UnityEngine::Vector4)> __UnityEngine_MeshSubsetCombineUtility_MeshInstanceSizeCheck;
  static_assert(sizeof(MeshSubsetCombineUtility::MeshInstance) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
