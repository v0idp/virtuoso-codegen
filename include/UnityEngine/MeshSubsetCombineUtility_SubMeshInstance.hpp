// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MeshSubsetCombineUtility
#include "UnityEngine/MeshSubsetCombineUtility.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::MeshSubsetCombineUtility::SubMeshInstance, "UnityEngine", "MeshSubsetCombineUtility/SubMeshInstance");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x50
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.MeshSubsetCombineUtility/UnityEngine.SubMeshInstance
  // [TokenAttribute] Offset: FFFFFFFF
  struct MeshSubsetCombineUtility::SubMeshInstance/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 meshInstanceID
    // Size: 0x4
    // Offset: 0x0
    int meshInstanceID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 vertexOffset
    // Size: 0x4
    // Offset: 0x4
    int vertexOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 gameObjectInstanceID
    // Size: 0x4
    // Offset: 0x8
    int gameObjectInstanceID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 subMeshIndex
    // Size: 0x4
    // Offset: 0xC
    int subMeshIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Matrix4x4 transform
    // Size: 0x40
    // Offset: 0x10
    ::UnityEngine::Matrix4x4 transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    public:
    // Creating value type constructor for type: SubMeshInstance
    constexpr SubMeshInstance(int meshInstanceID_ = {}, int vertexOffset_ = {}, int gameObjectInstanceID_ = {}, int subMeshIndex_ = {}, ::UnityEngine::Matrix4x4 transform_ = {}) noexcept : meshInstanceID{meshInstanceID_}, vertexOffset{vertexOffset_}, gameObjectInstanceID{gameObjectInstanceID_}, subMeshIndex{subMeshIndex_}, transform{transform_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 meshInstanceID
    [[deprecated("Use field access instead!")]] int& dyn_meshInstanceID();
    // Get instance field reference: public System.Int32 vertexOffset
    [[deprecated("Use field access instead!")]] int& dyn_vertexOffset();
    // Get instance field reference: public System.Int32 gameObjectInstanceID
    [[deprecated("Use field access instead!")]] int& dyn_gameObjectInstanceID();
    // Get instance field reference: public System.Int32 subMeshIndex
    [[deprecated("Use field access instead!")]] int& dyn_subMeshIndex();
    // Get instance field reference: public UnityEngine.Matrix4x4 transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_transform();
  }; // UnityEngine.MeshSubsetCombineUtility/UnityEngine.SubMeshInstance
  #pragma pack(pop)
  static check_size<sizeof(MeshSubsetCombineUtility::SubMeshInstance), 16 + sizeof(::UnityEngine::Matrix4x4)> __UnityEngine_MeshSubsetCombineUtility_SubMeshInstanceSizeCheck;
  static_assert(sizeof(MeshSubsetCombineUtility::SubMeshInstance) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
