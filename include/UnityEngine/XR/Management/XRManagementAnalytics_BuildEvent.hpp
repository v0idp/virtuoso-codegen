// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Management.XRManagementAnalytics
#include "UnityEngine/XR/Management/XRManagementAnalytics.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Management::XRManagementAnalytics::BuildEvent, "UnityEngine.XR.Management", "XRManagementAnalytics/BuildEvent");
// Type namespace: UnityEngine.XR.Management
namespace UnityEngine::XR::Management {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.XR.Management.XRManagementAnalytics/UnityEngine.XR.Management.BuildEvent
  // [TokenAttribute] Offset: FFFFFFFF
  struct XRManagementAnalytics::BuildEvent/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String buildGuid
    // Size: 0x8
    // Offset: 0x0
    ::StringW buildGuid;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String buildTarget
    // Size: 0x8
    // Offset: 0x8
    ::StringW buildTarget;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String buildTargetGroup
    // Size: 0x8
    // Offset: 0x10
    ::StringW buildTargetGroup;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String[] assigned_loaders
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::StringW> assigned_loaders;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    public:
    // Creating value type constructor for type: BuildEvent
    constexpr BuildEvent(::StringW buildGuid_ = {}, ::StringW buildTarget_ = {}, ::StringW buildTargetGroup_ = {}, ::ArrayW<::StringW> assigned_loaders_ = ::ArrayW<::StringW>(static_cast<void*>(nullptr))) noexcept : buildGuid{buildGuid_}, buildTarget{buildTarget_}, buildTargetGroup{buildTargetGroup_}, assigned_loaders{assigned_loaders_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String buildGuid
    [[deprecated]] ::StringW& dyn_buildGuid();
    // Get instance field reference: public System.String buildTarget
    [[deprecated]] ::StringW& dyn_buildTarget();
    // Get instance field reference: public System.String buildTargetGroup
    [[deprecated]] ::StringW& dyn_buildTargetGroup();
    // Get instance field reference: public System.String[] assigned_loaders
    [[deprecated]] ::ArrayW<::StringW>& dyn_assigned_loaders();
  }; // UnityEngine.XR.Management.XRManagementAnalytics/UnityEngine.XR.Management.BuildEvent
  #pragma pack(pop)
  static check_size<sizeof(XRManagementAnalytics::BuildEvent), 24 + sizeof(::ArrayW<::StringW>)> __UnityEngine_XR_Management_XRManagementAnalytics_BuildEventSizeCheck;
  static_assert(sizeof(XRManagementAnalytics::BuildEvent) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
