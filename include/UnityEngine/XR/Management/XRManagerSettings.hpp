// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Management
namespace UnityEngine::XR::Management {
  // Forward declaring type: XRLoader
  class XRLoader;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Management
namespace UnityEngine::XR::Management {
  // Forward declaring type: XRManagerSettings
  class XRManagerSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Management::XRManagerSettings);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Management::XRManagerSettings*, "UnityEngine.XR.Management", "XRManagerSettings");
// Type namespace: UnityEngine.XR.Management
namespace UnityEngine::XR::Management {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Management.XRManagerSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class XRManagerSettings : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::UnityEngine::XR::Management::XRManagerSettings::$InitializeLoader$d__24
    class $InitializeLoader$d__24;
    public:
    // private System.Boolean m_InitializationComplete
    // Size: 0x1
    // Offset: 0x18
    bool m_InitializationComplete;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_RequiresSettingsUpdate
    // Size: 0x1
    // Offset: 0x19
    bool m_RequiresSettingsUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x6F9994
    // [FormerlySerializedAsAttribute] Offset: 0x6F9994
    // private System.Boolean m_AutomaticLoading
    // Size: 0x1
    // Offset: 0x1A
    bool m_AutomaticLoading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [FormerlySerializedAsAttribute] Offset: 0x6F9A04
    // [TooltipAttribute] Offset: 0x6F9A04
    // private System.Boolean m_AutomaticRunning
    // Size: 0x1
    // Offset: 0x1B
    bool m_AutomaticRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_AutomaticRunning and: m_Loaders
    char __padding3[0x4] = {};
    // [FormerlySerializedAsAttribute] Offset: 0x6F9A74
    // [TooltipAttribute] Offset: 0x6F9A74
    // private System.Collections.Generic.List`1<UnityEngine.XR.Management.XRLoader> m_Loaders
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Management::XRLoader*>* m_Loaders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Management::XRLoader*>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<UnityEngine.XR.Management.XRLoader> m_RegisteredLoaders
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::HashSet_1<::UnityEngine::XR::Management::XRLoader*>* m_RegisteredLoaders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::XR::Management::XRLoader*>*) == 0x8);
    // private UnityEngine.XR.Management.XRLoader <activeLoader>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::XR::Management::XRLoader* activeLoader;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Management::XRLoader*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Boolean m_InitializationComplete
    [[deprecated]] bool& dyn_m_InitializationComplete();
    // Get instance field reference: private System.Boolean m_RequiresSettingsUpdate
    [[deprecated]] bool& dyn_m_RequiresSettingsUpdate();
    // Get instance field reference: private System.Boolean m_AutomaticLoading
    [[deprecated]] bool& dyn_m_AutomaticLoading();
    // Get instance field reference: private System.Boolean m_AutomaticRunning
    [[deprecated]] bool& dyn_m_AutomaticRunning();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.XR.Management.XRLoader> m_Loaders
    [[deprecated]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Management::XRLoader*>*& dyn_m_Loaders();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<UnityEngine.XR.Management.XRLoader> m_RegisteredLoaders
    [[deprecated]] ::System::Collections::Generic::HashSet_1<::UnityEngine::XR::Management::XRLoader*>*& dyn_m_RegisteredLoaders();
    // Get instance field reference: private UnityEngine.XR.Management.XRLoader <activeLoader>k__BackingField
    [[deprecated]] ::UnityEngine::XR::Management::XRLoader*& dyn_$activeLoader$k__BackingField();
    // public System.Boolean get_automaticLoading()
    // Offset: 0x18FAEB0
    bool get_automaticLoading();
    // public System.Void set_automaticLoading(System.Boolean value)
    // Offset: 0x18FAEB8
    void set_automaticLoading(bool value);
    // public System.Boolean get_automaticRunning()
    // Offset: 0x18FAEC4
    bool get_automaticRunning();
    // public System.Void set_automaticRunning(System.Boolean value)
    // Offset: 0x18FAECC
    void set_automaticRunning(bool value);
    // public System.Collections.Generic.List`1<UnityEngine.XR.Management.XRLoader> get_loaders()
    // Offset: 0x18FAED8
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Management::XRLoader*>* get_loaders();
    // public System.Collections.Generic.IReadOnlyList`1<UnityEngine.XR.Management.XRLoader> get_activeLoaders()
    // Offset: 0x18FAEE0
    ::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::XR::Management::XRLoader*>* get_activeLoaders();
    // public System.Boolean get_isInitializationComplete()
    // Offset: 0x18FAEE8
    bool get_isInitializationComplete();
    // public UnityEngine.XR.Management.XRLoader get_activeLoader()
    // Offset: 0x18FAEF0
    ::UnityEngine::XR::Management::XRLoader* get_activeLoader();
    // private System.Void set_activeLoader(UnityEngine.XR.Management.XRLoader value)
    // Offset: 0x18FAEF8
    void set_activeLoader(::UnityEngine::XR::Management::XRLoader* value);
    // System.Collections.Generic.List`1<UnityEngine.XR.Management.XRLoader> get_currentLoaders()
    // Offset: 0x18FB4EC
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Management::XRLoader*>* get_currentLoaders();
    // System.Void set_currentLoaders(System.Collections.Generic.List`1<UnityEngine.XR.Management.XRLoader> value)
    // Offset: 0x18FB4F4
    void set_currentLoaders(::System::Collections::Generic::List_1<::UnityEngine::XR::Management::XRLoader*>* value);
    // System.Collections.Generic.HashSet`1<UnityEngine.XR.Management.XRLoader> get_registeredLoaders()
    // Offset: 0x18FB4FC
    ::System::Collections::Generic::HashSet_1<::UnityEngine::XR::Management::XRLoader*>* get_registeredLoaders();
    // public T ActiveLoaderAs()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T ActiveLoaderAs() {
      static_assert(std::is_convertible_v<T, ::UnityEngine::XR::Management::XRLoader*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Management::XRManagerSettings::ActiveLoaderAs");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActiveLoaderAs", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method);
    }
    // public System.Void InitializeLoaderSync()
    // Offset: 0x18FA68C
    void InitializeLoaderSync();
    // public System.Collections.IEnumerator InitializeLoader()
    // Offset: 0x18FB074
    ::System::Collections::IEnumerator* InitializeLoader();
    // public System.Boolean TryAddLoader(UnityEngine.XR.Management.XRLoader loader, System.Int32 index)
    // Offset: 0x18FB10C
    bool TryAddLoader(::UnityEngine::XR::Management::XRLoader* loader, int index);
    // public System.Boolean TryRemoveLoader(UnityEngine.XR.Management.XRLoader loader)
    // Offset: 0x18FB264
    bool TryRemoveLoader(::UnityEngine::XR::Management::XRLoader* loader);
    // public System.Boolean TrySetLoaders(System.Collections.Generic.List`1<UnityEngine.XR.Management.XRLoader> reorderedLoaders)
    // Offset: 0x18FB308
    bool TrySetLoaders(::System::Collections::Generic::List_1<::UnityEngine::XR::Management::XRLoader*>* reorderedLoaders);
    // private System.Boolean CheckGraphicsAPICompatibility(UnityEngine.XR.Management.XRLoader loader)
    // Offset: 0x18FAF00
    bool CheckGraphicsAPICompatibility(::UnityEngine::XR::Management::XRLoader* loader);
    // public System.Void StartSubsystems()
    // Offset: 0x18FA8C0
    void StartSubsystems();
    // public System.Void StopSubsystems()
    // Offset: 0x18FAA78
    void StopSubsystems();
    // public System.Void DeinitializeLoader()
    // Offset: 0x18FAB68
    void DeinitializeLoader();
    // private System.Void Start()
    // Offset: 0x18FB4AC
    void Start();
    // private System.Void OnDisable()
    // Offset: 0x18FB4C4
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0x18FB4DC
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x18FB504
    // Implemented from: UnityEngine.ScriptableObject
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRManagerSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Management::XRManagerSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRManagerSettings*, creationType>()));
    }
  }; // UnityEngine.XR.Management.XRManagerSettings
  #pragma pack(pop)
  static check_size<sizeof(XRManagerSettings), 48 + sizeof(::UnityEngine::XR::Management::XRLoader*)> __UnityEngine_XR_Management_XRManagerSettingsSizeCheck;
  static_assert(sizeof(XRManagerSettings) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::get_automaticLoading
// Il2CppName: get_automaticLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Management::XRManagerSettings::*)()>(&UnityEngine::XR::Management::XRManagerSettings::get_automaticLoading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "get_automaticLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::set_automaticLoading
// Il2CppName: set_automaticLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Management::XRManagerSettings::*)(bool)>(&UnityEngine::XR::Management::XRManagerSettings::set_automaticLoading)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "set_automaticLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::get_automaticRunning
// Il2CppName: get_automaticRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Management::XRManagerSettings::*)()>(&UnityEngine::XR::Management::XRManagerSettings::get_automaticRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "get_automaticRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::set_automaticRunning
// Il2CppName: set_automaticRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Management::XRManagerSettings::*)(bool)>(&UnityEngine::XR::Management::XRManagerSettings::set_automaticRunning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "set_automaticRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::get_loaders
// Il2CppName: get_loaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::XR::Management::XRLoader*>* (UnityEngine::XR::Management::XRManagerSettings::*)()>(&UnityEngine::XR::Management::XRManagerSettings::get_loaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "get_loaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::get_activeLoaders
// Il2CppName: get_activeLoaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::XR::Management::XRLoader*>* (UnityEngine::XR::Management::XRManagerSettings::*)()>(&UnityEngine::XR::Management::XRManagerSettings::get_activeLoaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "get_activeLoaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::get_isInitializationComplete
// Il2CppName: get_isInitializationComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Management::XRManagerSettings::*)()>(&UnityEngine::XR::Management::XRManagerSettings::get_isInitializationComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "get_isInitializationComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::get_activeLoader
// Il2CppName: get_activeLoader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Management::XRLoader* (UnityEngine::XR::Management::XRManagerSettings::*)()>(&UnityEngine::XR::Management::XRManagerSettings::get_activeLoader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "get_activeLoader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::set_activeLoader
// Il2CppName: set_activeLoader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Management::XRManagerSettings::*)(::UnityEngine::XR::Management::XRLoader*)>(&UnityEngine::XR::Management::XRManagerSettings::set_activeLoader)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Management", "XRLoader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "set_activeLoader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::get_currentLoaders
// Il2CppName: get_currentLoaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::XR::Management::XRLoader*>* (UnityEngine::XR::Management::XRManagerSettings::*)()>(&UnityEngine::XR::Management::XRManagerSettings::get_currentLoaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "get_currentLoaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::set_currentLoaders
// Il2CppName: set_currentLoaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Management::XRManagerSettings::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Management::XRLoader*>*)>(&UnityEngine::XR::Management::XRManagerSettings::set_currentLoaders)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Management", "XRLoader")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "set_currentLoaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::get_registeredLoaders
// Il2CppName: get_registeredLoaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::HashSet_1<::UnityEngine::XR::Management::XRLoader*>* (UnityEngine::XR::Management::XRManagerSettings::*)()>(&UnityEngine::XR::Management::XRManagerSettings::get_registeredLoaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "get_registeredLoaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::ActiveLoaderAs
// Il2CppName: ActiveLoaderAs
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::InitializeLoaderSync
// Il2CppName: InitializeLoaderSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Management::XRManagerSettings::*)()>(&UnityEngine::XR::Management::XRManagerSettings::InitializeLoaderSync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "InitializeLoaderSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::InitializeLoader
// Il2CppName: InitializeLoader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (UnityEngine::XR::Management::XRManagerSettings::*)()>(&UnityEngine::XR::Management::XRManagerSettings::InitializeLoader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "InitializeLoader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::TryAddLoader
// Il2CppName: TryAddLoader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Management::XRManagerSettings::*)(::UnityEngine::XR::Management::XRLoader*, int)>(&UnityEngine::XR::Management::XRManagerSettings::TryAddLoader)> {
  static const MethodInfo* get() {
    static auto* loader = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Management", "XRLoader")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "TryAddLoader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loader, index});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::TryRemoveLoader
// Il2CppName: TryRemoveLoader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Management::XRManagerSettings::*)(::UnityEngine::XR::Management::XRLoader*)>(&UnityEngine::XR::Management::XRManagerSettings::TryRemoveLoader)> {
  static const MethodInfo* get() {
    static auto* loader = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Management", "XRLoader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "TryRemoveLoader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loader});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::TrySetLoaders
// Il2CppName: TrySetLoaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Management::XRManagerSettings::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Management::XRLoader*>*)>(&UnityEngine::XR::Management::XRManagerSettings::TrySetLoaders)> {
  static const MethodInfo* get() {
    static auto* reorderedLoaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Management", "XRLoader")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "TrySetLoaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reorderedLoaders});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::CheckGraphicsAPICompatibility
// Il2CppName: CheckGraphicsAPICompatibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Management::XRManagerSettings::*)(::UnityEngine::XR::Management::XRLoader*)>(&UnityEngine::XR::Management::XRManagerSettings::CheckGraphicsAPICompatibility)> {
  static const MethodInfo* get() {
    static auto* loader = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Management", "XRLoader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "CheckGraphicsAPICompatibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loader});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::StartSubsystems
// Il2CppName: StartSubsystems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Management::XRManagerSettings::*)()>(&UnityEngine::XR::Management::XRManagerSettings::StartSubsystems)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "StartSubsystems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::StopSubsystems
// Il2CppName: StopSubsystems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Management::XRManagerSettings::*)()>(&UnityEngine::XR::Management::XRManagerSettings::StopSubsystems)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "StopSubsystems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::DeinitializeLoader
// Il2CppName: DeinitializeLoader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Management::XRManagerSettings::*)()>(&UnityEngine::XR::Management::XRManagerSettings::DeinitializeLoader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "DeinitializeLoader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Management::XRManagerSettings::*)()>(&UnityEngine::XR::Management::XRManagerSettings::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Management::XRManagerSettings::*)()>(&UnityEngine::XR::Management::XRManagerSettings::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Management::XRManagerSettings::*)()>(&UnityEngine::XR::Management::XRManagerSettings::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Management::XRManagerSettings*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Management::XRManagerSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
