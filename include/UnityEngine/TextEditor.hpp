// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TouchScreenKeyboard
  class TouchScreenKeyboard;
  // Forward declaring type: GUIStyle
  class GUIStyle;
  // Forward declaring type: GUIContent
  class GUIContent;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TextEditor
  class TextEditor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::TextEditor);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextEditor*, "UnityEngine", "TextEditor");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.TextEditor
  // [TokenAttribute] Offset: FFFFFFFF
  class TextEditor : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::TextEditor::DblClickSnapping
    struct DblClickSnapping;
    // Size: 0x1
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.TextEditor/UnityEngine.DblClickSnapping
    // [TokenAttribute] Offset: FFFFFFFF
    struct DblClickSnapping/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Byte value__
      // Size: 0x1
      // Offset: 0x0
      uint8_t value;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      public:
      // Creating value type constructor for type: DblClickSnapping
      constexpr DblClickSnapping(uint8_t value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.TextEditor/UnityEngine.DblClickSnapping WORDS
      static constexpr const uint8_t WORDS = 0u;
      // Get static field: static public UnityEngine.TextEditor/UnityEngine.DblClickSnapping WORDS
      static ::UnityEngine::TextEditor::DblClickSnapping _get_WORDS();
      // Set static field: static public UnityEngine.TextEditor/UnityEngine.DblClickSnapping WORDS
      static void _set_WORDS(::UnityEngine::TextEditor::DblClickSnapping value);
      // static field const value: static public UnityEngine.TextEditor/UnityEngine.DblClickSnapping PARAGRAPHS
      static constexpr const uint8_t PARAGRAPHS = 1u;
      // Get static field: static public UnityEngine.TextEditor/UnityEngine.DblClickSnapping PARAGRAPHS
      static ::UnityEngine::TextEditor::DblClickSnapping _get_PARAGRAPHS();
      // Set static field: static public UnityEngine.TextEditor/UnityEngine.DblClickSnapping PARAGRAPHS
      static void _set_PARAGRAPHS(::UnityEngine::TextEditor::DblClickSnapping value);
      // Get instance field reference: public System.Byte value__
      [[deprecated("Use field access instead!")]] uint8_t& dyn_value__();
    }; // UnityEngine.TextEditor/UnityEngine.DblClickSnapping
    #pragma pack(pop)
    static check_size<sizeof(TextEditor::DblClickSnapping), 0 + sizeof(uint8_t)> __UnityEngine_TextEditor_DblClickSnappingSizeCheck;
    static_assert(sizeof(TextEditor::DblClickSnapping) == 0x1);
    public:
    // public UnityEngine.TouchScreenKeyboard keyboardOnScreen
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::TouchScreenKeyboard* keyboardOnScreen;
    // Field size check
    static_assert(sizeof(::UnityEngine::TouchScreenKeyboard*) == 0x8);
    // public System.Int32 controlID
    // Size: 0x4
    // Offset: 0x18
    int controlID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: controlID and: style
    char __padding1[0x4] = {};
    // public UnityEngine.GUIStyle style
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GUIStyle* style;
    // Field size check
    static_assert(sizeof(::UnityEngine::GUIStyle*) == 0x8);
    // public System.Boolean multiline
    // Size: 0x1
    // Offset: 0x28
    bool multiline;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean hasHorizontalCursorPos
    // Size: 0x1
    // Offset: 0x29
    bool hasHorizontalCursorPos;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isPasswordField
    // Size: 0x1
    // Offset: 0x2A
    bool isPasswordField;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isPasswordField and: scrollOffset
    char __padding5[0x1] = {};
    // public UnityEngine.Vector2 scrollOffset
    // Size: 0x8
    // Offset: 0x2C
    ::UnityEngine::Vector2 scrollOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // Padding between fields: scrollOffset and: m_Content
    char __padding6[0x4] = {};
    // private UnityEngine.GUIContent m_Content
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GUIContent* m_Content;
    // Field size check
    static_assert(sizeof(::UnityEngine::GUIContent*) == 0x8);
    // private System.Int32 m_CursorIndex
    // Size: 0x4
    // Offset: 0x40
    int m_CursorIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_SelectIndex
    // Size: 0x4
    // Offset: 0x44
    int m_SelectIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_RevealCursor
    // Size: 0x1
    // Offset: 0x48
    bool m_RevealCursor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_MouseDragSelectsWholeWords
    // Size: 0x1
    // Offset: 0x49
    bool m_MouseDragSelectsWholeWords;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_MouseDragSelectsWholeWords and: m_DblClickInitPos
    char __padding11[0x2] = {};
    // private System.Int32 m_DblClickInitPos
    // Size: 0x4
    // Offset: 0x4C
    int m_DblClickInitPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.TextEditor/UnityEngine.DblClickSnapping m_DblClickSnap
    // Size: 0x1
    // Offset: 0x50
    ::UnityEngine::TextEditor::DblClickSnapping m_DblClickSnap;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextEditor::DblClickSnapping) == 0x1);
    // private System.Boolean m_bJustSelected
    // Size: 0x1
    // Offset: 0x51
    bool m_bJustSelected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_bJustSelected and: m_iAltCursorPos
    char __padding14[0x2] = {};
    // private System.Int32 m_iAltCursorPos
    // Size: 0x4
    // Offset: 0x54
    int m_iAltCursorPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.TouchScreenKeyboard keyboardOnScreen
    [[deprecated("Use field access instead!")]] ::UnityEngine::TouchScreenKeyboard*& dyn_keyboardOnScreen();
    // Get instance field reference: public System.Int32 controlID
    [[deprecated("Use field access instead!")]] int& dyn_controlID();
    // Get instance field reference: public UnityEngine.GUIStyle style
    [[deprecated("Use field access instead!")]] ::UnityEngine::GUIStyle*& dyn_style();
    // Get instance field reference: public System.Boolean multiline
    [[deprecated("Use field access instead!")]] bool& dyn_multiline();
    // Get instance field reference: public System.Boolean hasHorizontalCursorPos
    [[deprecated("Use field access instead!")]] bool& dyn_hasHorizontalCursorPos();
    // Get instance field reference: public System.Boolean isPasswordField
    [[deprecated("Use field access instead!")]] bool& dyn_isPasswordField();
    // Get instance field reference: public UnityEngine.Vector2 scrollOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_scrollOffset();
    // Get instance field reference: private UnityEngine.GUIContent m_Content
    [[deprecated("Use field access instead!")]] ::UnityEngine::GUIContent*& dyn_m_Content();
    // Get instance field reference: private System.Int32 m_CursorIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_CursorIndex();
    // Get instance field reference: private System.Int32 m_SelectIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_SelectIndex();
    // Get instance field reference: private System.Boolean m_RevealCursor
    [[deprecated("Use field access instead!")]] bool& dyn_m_RevealCursor();
    // Get instance field reference: private System.Boolean m_MouseDragSelectsWholeWords
    [[deprecated("Use field access instead!")]] bool& dyn_m_MouseDragSelectsWholeWords();
    // Get instance field reference: private System.Int32 m_DblClickInitPos
    [[deprecated("Use field access instead!")]] int& dyn_m_DblClickInitPos();
    // Get instance field reference: private UnityEngine.TextEditor/UnityEngine.DblClickSnapping m_DblClickSnap
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextEditor::DblClickSnapping& dyn_m_DblClickSnap();
    // Get instance field reference: private System.Boolean m_bJustSelected
    [[deprecated("Use field access instead!")]] bool& dyn_m_bJustSelected();
    // Get instance field reference: private System.Int32 m_iAltCursorPos
    [[deprecated("Use field access instead!")]] int& dyn_m_iAltCursorPos();
    // public System.Void .ctor()
    // Offset: 0x1881330
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextEditor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::TextEditor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextEditor*, creationType>()));
    }
  }; // UnityEngine.TextEditor
  #pragma pack(pop)
  static check_size<sizeof(TextEditor), 84 + sizeof(int)> __UnityEngine_TextEditorSizeCheck;
  static_assert(sizeof(TextEditor) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextEditor::DblClickSnapping, "UnityEngine", "TextEditor/DblClickSnapping");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TextEditor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
