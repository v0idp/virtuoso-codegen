// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ISubsystem
#include "UnityEngine/ISubsystem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::SubsystemsImplementation
namespace UnityEngine::SubsystemsImplementation {
  // Forward declaring type: SubsystemProvider
  class SubsystemProvider;
}
// Completed forward declares
// Type namespace: UnityEngine.SubsystemsImplementation
namespace UnityEngine::SubsystemsImplementation {
  // Forward declaring type: SubsystemWithProvider
  class SubsystemWithProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::SubsystemsImplementation::SubsystemWithProvider);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::SubsystemsImplementation::SubsystemWithProvider*, "UnityEngine.SubsystemsImplementation", "SubsystemWithProvider");
// Type namespace: UnityEngine.SubsystemsImplementation
namespace UnityEngine::SubsystemsImplementation {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.SubsystemsImplementation.SubsystemWithProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class SubsystemWithProvider : public ::Il2CppObject/*, public ::UnityEngine::ISubsystem*/ {
    public:
    public:
    // [DebuggerBrowsableAttribute] Offset: 0x6E0558
    // private System.Boolean <running>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool running;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: running and: providerBase
    char __padding0[0x7] = {};
    // [DebuggerBrowsableAttribute] Offset: 0x6E0594
    // private UnityEngine.SubsystemsImplementation.SubsystemProvider <providerBase>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::SubsystemsImplementation::SubsystemProvider* providerBase;
    // Field size check
    static_assert(sizeof(::UnityEngine::SubsystemsImplementation::SubsystemProvider*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::ISubsystem
    operator ::UnityEngine::ISubsystem() noexcept {
      return *reinterpret_cast<::UnityEngine::ISubsystem*>(this);
    }
    // Get instance field reference: private System.Boolean <running>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$running$k__BackingField();
    // Get instance field reference: private UnityEngine.SubsystemsImplementation.SubsystemProvider <providerBase>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::SubsystemsImplementation::SubsystemProvider*& dyn_$providerBase$k__BackingField();
    // public System.Boolean get_running()
    // Offset: 0x1904974
    bool get_running();
    // private System.Void set_running(System.Boolean value)
    // Offset: 0x190497C
    void set_running(bool value);
    // UnityEngine.SubsystemsImplementation.SubsystemProvider get_providerBase()
    // Offset: 0x1904988
    ::UnityEngine::SubsystemsImplementation::SubsystemProvider* get_providerBase();
    // protected System.Void .ctor()
    // Offset: 0x1904990
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SubsystemWithProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::SubsystemsImplementation::SubsystemWithProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SubsystemWithProvider*, creationType>()));
    }
    // public System.Void Start()
    // Offset: 0x1904860
    void Start();
    // protected System.Void OnStart()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnStart();
    // public System.Void Stop()
    // Offset: 0x19048A8
    void Stop();
    // protected System.Void OnStop()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnStop();
    // public System.Void Destroy()
    // Offset: 0x19048EC
    void Destroy();
    // protected System.Void OnDestroy()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnDestroy();
  }; // UnityEngine.SubsystemsImplementation.SubsystemWithProvider
  #pragma pack(pop)
  static check_size<sizeof(SubsystemWithProvider), 24 + sizeof(::UnityEngine::SubsystemsImplementation::SubsystemProvider*)> __UnityEngine_SubsystemsImplementation_SubsystemWithProviderSizeCheck;
  static_assert(sizeof(SubsystemWithProvider) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::SubsystemsImplementation::SubsystemWithProvider::get_running
// Il2CppName: get_running
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::SubsystemsImplementation::SubsystemWithProvider::*)()>(&UnityEngine::SubsystemsImplementation::SubsystemWithProvider::get_running)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SubsystemsImplementation::SubsystemWithProvider*), "get_running", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SubsystemsImplementation::SubsystemWithProvider::set_running
// Il2CppName: set_running
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SubsystemsImplementation::SubsystemWithProvider::*)(bool)>(&UnityEngine::SubsystemsImplementation::SubsystemWithProvider::set_running)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SubsystemsImplementation::SubsystemWithProvider*), "set_running", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::SubsystemsImplementation::SubsystemWithProvider::get_providerBase
// Il2CppName: get_providerBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SubsystemsImplementation::SubsystemProvider* (UnityEngine::SubsystemsImplementation::SubsystemWithProvider::*)()>(&UnityEngine::SubsystemsImplementation::SubsystemWithProvider::get_providerBase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SubsystemsImplementation::SubsystemWithProvider*), "get_providerBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SubsystemsImplementation::SubsystemWithProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::SubsystemsImplementation::SubsystemWithProvider::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SubsystemsImplementation::SubsystemWithProvider::*)()>(&UnityEngine::SubsystemsImplementation::SubsystemWithProvider::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SubsystemsImplementation::SubsystemWithProvider*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SubsystemsImplementation::SubsystemWithProvider::OnStart
// Il2CppName: OnStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SubsystemsImplementation::SubsystemWithProvider::*)()>(&UnityEngine::SubsystemsImplementation::SubsystemWithProvider::OnStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SubsystemsImplementation::SubsystemWithProvider*), "OnStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SubsystemsImplementation::SubsystemWithProvider::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SubsystemsImplementation::SubsystemWithProvider::*)()>(&UnityEngine::SubsystemsImplementation::SubsystemWithProvider::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SubsystemsImplementation::SubsystemWithProvider*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SubsystemsImplementation::SubsystemWithProvider::OnStop
// Il2CppName: OnStop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SubsystemsImplementation::SubsystemWithProvider::*)()>(&UnityEngine::SubsystemsImplementation::SubsystemWithProvider::OnStop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SubsystemsImplementation::SubsystemWithProvider*), "OnStop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SubsystemsImplementation::SubsystemWithProvider::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SubsystemsImplementation::SubsystemWithProvider::*)()>(&UnityEngine::SubsystemsImplementation::SubsystemWithProvider::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SubsystemsImplementation::SubsystemWithProvider*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SubsystemsImplementation::SubsystemWithProvider::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SubsystemsImplementation::SubsystemWithProvider::*)()>(&UnityEngine::SubsystemsImplementation::SubsystemWithProvider::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SubsystemsImplementation::SubsystemWithProvider*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
