// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.MeshSubsetCombineUtility/UnityEngine.MeshInstance
#include "UnityEngine/MeshSubsetCombineUtility_MeshInstance.hpp"
// Including type: UnityEngine.MeshSubsetCombineUtility/UnityEngine.SubMeshInstance
#include "UnityEngine/MeshSubsetCombineUtility_SubMeshInstance.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: StaticBatchingHelper
  struct StaticBatchingHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::StaticBatchingHelper, "UnityEngine", "StaticBatchingHelper");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.StaticBatchingHelper
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: 6601FC
  // [NativeHeaderAttribute] Offset: 6601FC
  struct StaticBatchingHelper/*, public ::System::ValueType*/ {
    public:
    // Creating value type constructor for type: StaticBatchingHelper
    constexpr StaticBatchingHelper() noexcept {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static UnityEngine.Mesh InternalCombineVertices(UnityEngine.MeshSubsetCombineUtility/UnityEngine.MeshInstance[] meshes, System.String meshName)
    // Offset: 0xBD5938
    static ::UnityEngine::Mesh* InternalCombineVertices(::ArrayW<::UnityEngine::MeshSubsetCombineUtility::MeshInstance> meshes, ::StringW meshName);
    // static System.Void InternalCombineIndices(UnityEngine.MeshSubsetCombineUtility/UnityEngine.SubMeshInstance[] submeshes, UnityEngine.Mesh combinedMesh)
    // Offset: 0xBD5988
    static void InternalCombineIndices(::ArrayW<::UnityEngine::MeshSubsetCombineUtility::SubMeshInstance> submeshes, ::UnityEngine::Mesh* combinedMesh);
    // static System.Boolean IsMeshBatchable(UnityEngine.Mesh mesh)
    // Offset: 0xBD59D8
    static bool IsMeshBatchable(::UnityEngine::Mesh* mesh);
  }; // UnityEngine.StaticBatchingHelper
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::StaticBatchingHelper::InternalCombineVertices
// Il2CppName: InternalCombineVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (*)(::ArrayW<::UnityEngine::MeshSubsetCombineUtility::MeshInstance>, ::StringW)>(&UnityEngine::StaticBatchingHelper::InternalCombineVertices)> {
  static const MethodInfo* get() {
    static auto* meshes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "MeshSubsetCombineUtility/MeshInstance"), 1)->byval_arg;
    static auto* meshName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::StaticBatchingHelper), "InternalCombineVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshes, meshName});
  }
};
// Writing MetadataGetter for method: UnityEngine::StaticBatchingHelper::InternalCombineIndices
// Il2CppName: InternalCombineIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::UnityEngine::MeshSubsetCombineUtility::SubMeshInstance>, ::UnityEngine::Mesh*)>(&UnityEngine::StaticBatchingHelper::InternalCombineIndices)> {
  static const MethodInfo* get() {
    static auto* submeshes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "MeshSubsetCombineUtility/SubMeshInstance"), 1)->byval_arg;
    static auto* combinedMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::StaticBatchingHelper), "InternalCombineIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submeshes, combinedMesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::StaticBatchingHelper::IsMeshBatchable
// Il2CppName: IsMeshBatchable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Mesh*)>(&UnityEngine::StaticBatchingHelper::IsMeshBatchable)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::StaticBatchingHelper), "IsMeshBatchable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh});
  }
};
