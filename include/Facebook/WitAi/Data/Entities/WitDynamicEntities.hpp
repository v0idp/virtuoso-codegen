// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Facebook.WitAi.Interfaces.IDynamicEntitiesProvider
#include "Facebook/WitAi/Interfaces/IDynamicEntitiesProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Facebook::WitAi::Lib
namespace Facebook::WitAi::Lib {
  // Forward declaring type: WitResponseClass
  class WitResponseClass;
}
// Forward declaring namespace: Facebook::WitAi::Data::Entities
namespace Facebook::WitAi::Data::Entities {
  // Forward declaring type: WitSimpleDynamicEntity
  class WitSimpleDynamicEntity;
  // Forward declaring type: WitDynamicEntity
  class WitDynamicEntity;
}
// Completed forward declares
// Type namespace: Facebook.WitAi.Data.Entities
namespace Facebook::WitAi::Data::Entities {
  // Forward declaring type: WitDynamicEntities
  class WitDynamicEntities;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Facebook::WitAi::Data::Entities::WitDynamicEntities);
DEFINE_IL2CPP_ARG_TYPE(::Facebook::WitAi::Data::Entities::WitDynamicEntities*, "Facebook.WitAi.Data.Entities", "WitDynamicEntities");
// Type namespace: Facebook.WitAi.Data.Entities
namespace Facebook::WitAi::Data::Entities {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Facebook.WitAi.Data.Entities.WitDynamicEntities
  // [TokenAttribute] Offset: FFFFFFFF
  class WitDynamicEntities : public ::Il2CppObject/*, public ::Facebook::WitAi::Interfaces::IDynamicEntitiesProvider*/ {
    public:
    public:
    // public Facebook.WitAi.Lib.WitResponseClass entities
    // Size: 0x8
    // Offset: 0x10
    ::Facebook::WitAi::Lib::WitResponseClass* entities;
    // Field size check
    static_assert(sizeof(::Facebook::WitAi::Lib::WitResponseClass*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Facebook::WitAi::Interfaces::IDynamicEntitiesProvider
    operator ::Facebook::WitAi::Interfaces::IDynamicEntitiesProvider() noexcept {
      return *reinterpret_cast<::Facebook::WitAi::Interfaces::IDynamicEntitiesProvider*>(this);
    }
    // Creating conversion operator: operator ::Facebook::WitAi::Lib::WitResponseClass*
    constexpr operator ::Facebook::WitAi::Lib::WitResponseClass*() const noexcept {
      return entities;
    }
    // Get instance field reference: public Facebook.WitAi.Lib.WitResponseClass entities
    [[deprecated("Use field access instead!")]] ::Facebook::WitAi::Lib::WitResponseClass*& dyn_entities();
    // public System.Void .ctor()
    // Offset: 0x16745BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitDynamicEntities* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Facebook::WitAi::Data::Entities::WitDynamicEntities::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitDynamicEntities*, creationType>()));
    }
    // public System.Void Add(Facebook.WitAi.Data.Entities.WitSimpleDynamicEntity entity)
    // Offset: 0x1674698
    void Add(::Facebook::WitAi::Data::Entities::WitSimpleDynamicEntity* entity);
    // public System.Void Add(Facebook.WitAi.Data.Entities.WitDynamicEntity entity)
    // Offset: 0x16749E8
    void Add(::Facebook::WitAi::Data::Entities::WitDynamicEntity* entity);
    // public System.String ToJSON()
    // Offset: 0x1674ED4
    ::StringW ToJSON();
  }; // Facebook.WitAi.Data.Entities.WitDynamicEntities
  #pragma pack(pop)
  static check_size<sizeof(WitDynamicEntities), 16 + sizeof(::Facebook::WitAi::Lib::WitResponseClass*)> __Facebook_WitAi_Data_Entities_WitDynamicEntitiesSizeCheck;
  static_assert(sizeof(WitDynamicEntities) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Facebook::WitAi::Data::Entities::WitDynamicEntities::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Facebook::WitAi::Data::Entities::WitDynamicEntities::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Data::Entities::WitDynamicEntities::*)(::Facebook::WitAi::Data::Entities::WitSimpleDynamicEntity*)>(&Facebook::WitAi::Data::Entities::WitDynamicEntities::Add)> {
  static const MethodInfo* get() {
    static auto* entity = &::il2cpp_utils::GetClassFromName("Facebook.WitAi.Data.Entities", "WitSimpleDynamicEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Data::Entities::WitDynamicEntities*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entity});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Data::Entities::WitDynamicEntities::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Data::Entities::WitDynamicEntities::*)(::Facebook::WitAi::Data::Entities::WitDynamicEntity*)>(&Facebook::WitAi::Data::Entities::WitDynamicEntities::Add)> {
  static const MethodInfo* get() {
    static auto* entity = &::il2cpp_utils::GetClassFromName("Facebook.WitAi.Data.Entities", "WitDynamicEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Data::Entities::WitDynamicEntities*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entity});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Data::Entities::WitDynamicEntities::ToJSON
// Il2CppName: ToJSON
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Facebook::WitAi::Data::Entities::WitDynamicEntities::*)()>(&Facebook::WitAi::Data::Entities::WitDynamicEntities::ToJSON)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Data::Entities::WitDynamicEntities*), "ToJSON", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
