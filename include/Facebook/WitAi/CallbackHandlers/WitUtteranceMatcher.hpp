// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Facebook.WitAi.CallbackHandlers.WitResponseHandler
#include "Facebook/WitAi/CallbackHandlers/WitResponseHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Facebook::WitAi::Utilities
namespace Facebook::WitAi::Utilities {
  // Forward declaring type: StringEvent
  class StringEvent;
}
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: Regex
  class Regex;
}
// Forward declaring namespace: Facebook::WitAi::Lib
namespace Facebook::WitAi::Lib {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Completed forward declares
// Type namespace: Facebook.WitAi.CallbackHandlers
namespace Facebook::WitAi::CallbackHandlers {
  // Forward declaring type: WitUtteranceMatcher
  class WitUtteranceMatcher;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Facebook::WitAi::CallbackHandlers::WitUtteranceMatcher);
DEFINE_IL2CPP_ARG_TYPE(::Facebook::WitAi::CallbackHandlers::WitUtteranceMatcher*, "Facebook.WitAi.CallbackHandlers", "WitUtteranceMatcher");
// Type namespace: Facebook.WitAi.CallbackHandlers
namespace Facebook::WitAi::CallbackHandlers {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Facebook.WitAi.CallbackHandlers.WitUtteranceMatcher
  // [TokenAttribute] Offset: FFFFFFFF
  class WitUtteranceMatcher : public ::Facebook::WitAi::CallbackHandlers::WitResponseHandler {
    public:
    public:
    // private System.String searchText
    // Size: 0x8
    // Offset: 0x20
    ::StringW searchText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean exactMatch
    // Size: 0x1
    // Offset: 0x28
    bool exactMatch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean useRegex
    // Size: 0x1
    // Offset: 0x29
    bool useRegex;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useRegex and: onUtteranceMatched
    char __padding2[0x6] = {};
    // private Facebook.WitAi.Utilities.StringEvent onUtteranceMatched
    // Size: 0x8
    // Offset: 0x30
    ::Facebook::WitAi::Utilities::StringEvent* onUtteranceMatched;
    // Field size check
    static_assert(sizeof(::Facebook::WitAi::Utilities::StringEvent*) == 0x8);
    // private System.Text.RegularExpressions.Regex regex
    // Size: 0x8
    // Offset: 0x38
    ::System::Text::RegularExpressions::Regex* regex;
    // Field size check
    static_assert(sizeof(::System::Text::RegularExpressions::Regex*) == 0x8);
    public:
    // Get instance field reference: private System.String searchText
    [[deprecated]] ::StringW& dyn_searchText();
    // Get instance field reference: private System.Boolean exactMatch
    [[deprecated]] bool& dyn_exactMatch();
    // Get instance field reference: private System.Boolean useRegex
    [[deprecated]] bool& dyn_useRegex();
    // Get instance field reference: private Facebook.WitAi.Utilities.StringEvent onUtteranceMatched
    [[deprecated]] ::Facebook::WitAi::Utilities::StringEvent*& dyn_onUtteranceMatched();
    // Get instance field reference: private System.Text.RegularExpressions.Regex regex
    [[deprecated]] ::System::Text::RegularExpressions::Regex*& dyn_regex();
    // public System.Void .ctor()
    // Offset: 0x167D648
    // Implemented from: Facebook.WitAi.CallbackHandlers.WitResponseHandler
    // Base method: System.Void WitResponseHandler::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitUtteranceMatcher* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Facebook::WitAi::CallbackHandlers::WitUtteranceMatcher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitUtteranceMatcher*, creationType>()));
    }
    // protected override System.Void OnHandleResponse(Facebook.WitAi.Lib.WitResponseNode response)
    // Offset: 0x167D478
    // Implemented from: Facebook.WitAi.CallbackHandlers.WitResponseHandler
    // Base method: System.Void WitResponseHandler::OnHandleResponse(Facebook.WitAi.Lib.WitResponseNode response)
    void OnHandleResponse(::Facebook::WitAi::Lib::WitResponseNode* response);
  }; // Facebook.WitAi.CallbackHandlers.WitUtteranceMatcher
  #pragma pack(pop)
  static check_size<sizeof(WitUtteranceMatcher), 56 + sizeof(::System::Text::RegularExpressions::Regex*)> __Facebook_WitAi_CallbackHandlers_WitUtteranceMatcherSizeCheck;
  static_assert(sizeof(WitUtteranceMatcher) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Facebook::WitAi::CallbackHandlers::WitUtteranceMatcher::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Facebook::WitAi::CallbackHandlers::WitUtteranceMatcher::OnHandleResponse
// Il2CppName: OnHandleResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::CallbackHandlers::WitUtteranceMatcher::*)(::Facebook::WitAi::Lib::WitResponseNode*)>(&Facebook::WitAi::CallbackHandlers::WitUtteranceMatcher::OnHandleResponse)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Facebook.WitAi.Lib", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::CallbackHandlers::WitUtteranceMatcher*), "OnHandleResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
