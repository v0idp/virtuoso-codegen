// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Facebook::WitAi
namespace Facebook::WitAi {
  // Forward declaring type: VoiceService
  class VoiceService;
}
// Forward declaring namespace: Facebook::WitAi::Lib
namespace Facebook::WitAi::Lib {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Completed forward declares
// Type namespace: Facebook.WitAi.CallbackHandlers
namespace Facebook::WitAi::CallbackHandlers {
  // Forward declaring type: WitResponseHandler
  class WitResponseHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Facebook::WitAi::CallbackHandlers::WitResponseHandler);
DEFINE_IL2CPP_ARG_TYPE(::Facebook::WitAi::CallbackHandlers::WitResponseHandler*, "Facebook.WitAi.CallbackHandlers", "WitResponseHandler");
// Type namespace: Facebook.WitAi.CallbackHandlers
namespace Facebook::WitAi::CallbackHandlers {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Facebook.WitAi.CallbackHandlers.WitResponseHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class WitResponseHandler : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public Facebook.WitAi.VoiceService wit
    // Size: 0x8
    // Offset: 0x18
    ::Facebook::WitAi::VoiceService* wit;
    // Field size check
    static_assert(sizeof(::Facebook::WitAi::VoiceService*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public Facebook.WitAi.VoiceService wit
    [[deprecated("Use field access instead!")]] ::Facebook::WitAi::VoiceService*& dyn_wit();
    // protected System.Void .ctor()
    // Offset: 0x16700B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitResponseHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Facebook::WitAi::CallbackHandlers::WitResponseHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitResponseHandler*, creationType>()));
    }
    // private System.Void OnValidate()
    // Offset: 0x1679408
    void OnValidate();
    // private System.Void OnEnable()
    // Offset: 0x16794B8
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x16796EC
    void OnDisable();
    // protected System.Void OnHandleResponse(Facebook.WitAi.Lib.WitResponseNode response)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnHandleResponse(::Facebook::WitAi::Lib::WitResponseNode* response);
  }; // Facebook.WitAi.CallbackHandlers.WitResponseHandler
  #pragma pack(pop)
  static check_size<sizeof(WitResponseHandler), 24 + sizeof(::Facebook::WitAi::VoiceService*)> __Facebook_WitAi_CallbackHandlers_WitResponseHandlerSizeCheck;
  static_assert(sizeof(WitResponseHandler) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Facebook::WitAi::CallbackHandlers::WitResponseHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Facebook::WitAi::CallbackHandlers::WitResponseHandler::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::CallbackHandlers::WitResponseHandler::*)()>(&Facebook::WitAi::CallbackHandlers::WitResponseHandler::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::CallbackHandlers::WitResponseHandler*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::CallbackHandlers::WitResponseHandler::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::CallbackHandlers::WitResponseHandler::*)()>(&Facebook::WitAi::CallbackHandlers::WitResponseHandler::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::CallbackHandlers::WitResponseHandler*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::CallbackHandlers::WitResponseHandler::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::CallbackHandlers::WitResponseHandler::*)()>(&Facebook::WitAi::CallbackHandlers::WitResponseHandler::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::CallbackHandlers::WitResponseHandler*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::CallbackHandlers::WitResponseHandler::OnHandleResponse
// Il2CppName: OnHandleResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::CallbackHandlers::WitResponseHandler::*)(::Facebook::WitAi::Lib::WitResponseNode*)>(&Facebook::WitAi::CallbackHandlers::WitResponseHandler::OnHandleResponse)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Facebook.WitAi.Lib", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::CallbackHandlers::WitResponseHandler*), "OnHandleResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
