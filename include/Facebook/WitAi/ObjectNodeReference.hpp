// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Facebook.WitAi.WitResponseReference
#include "Facebook/WitAi/WitResponseReference.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Facebook::WitAi::Lib
namespace Facebook::WitAi::Lib {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Completed forward declares
// Type namespace: Facebook.WitAi
namespace Facebook::WitAi {
  // Forward declaring type: ObjectNodeReference
  class ObjectNodeReference;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Facebook::WitAi::ObjectNodeReference);
DEFINE_IL2CPP_ARG_TYPE(::Facebook::WitAi::ObjectNodeReference*, "Facebook.WitAi", "ObjectNodeReference");
// Type namespace: Facebook.WitAi
namespace Facebook::WitAi {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Facebook.WitAi.ObjectNodeReference
  // [TokenAttribute] Offset: FFFFFFFF
  class ObjectNodeReference : public ::Facebook::WitAi::WitResponseReference {
    public:
    public:
    // public System.String key
    // Size: 0x8
    // Offset: 0x20
    ::StringW key;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return key;
    }
    // Get instance field reference: public System.String key
    [[deprecated]] ::StringW& dyn_key();
    // public System.Void .ctor()
    // Offset: 0x166FEBC
    // Implemented from: Facebook.WitAi.WitResponseReference
    // Base method: System.Void WitResponseReference::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObjectNodeReference* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Facebook::WitAi::ObjectNodeReference::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObjectNodeReference*, creationType>()));
    }
    // public override System.String GetStringValue(Facebook.WitAi.Lib.WitResponseNode response)
    // Offset: 0x166FCAC
    // Implemented from: Facebook.WitAi.WitResponseReference
    // Base method: System.String WitResponseReference::GetStringValue(Facebook.WitAi.Lib.WitResponseNode response)
    ::StringW GetStringValue(::Facebook::WitAi::Lib::WitResponseNode* response);
    // public override System.Int32 GetIntValue(Facebook.WitAi.Lib.WitResponseNode response)
    // Offset: 0x166FDBC
    // Implemented from: Facebook.WitAi.WitResponseReference
    // Base method: System.Int32 WitResponseReference::GetIntValue(Facebook.WitAi.Lib.WitResponseNode response)
    int GetIntValue(::Facebook::WitAi::Lib::WitResponseNode* response);
    // public override System.Single GetFloatValue(Facebook.WitAi.Lib.WitResponseNode response)
    // Offset: 0x166FE3C
    // Implemented from: Facebook.WitAi.WitResponseReference
    // Base method: System.Single WitResponseReference::GetFloatValue(Facebook.WitAi.Lib.WitResponseNode response)
    float GetFloatValue(::Facebook::WitAi::Lib::WitResponseNode* response);
  }; // Facebook.WitAi.ObjectNodeReference
  #pragma pack(pop)
  static check_size<sizeof(ObjectNodeReference), 32 + sizeof(::StringW)> __Facebook_WitAi_ObjectNodeReferenceSizeCheck;
  static_assert(sizeof(ObjectNodeReference) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Facebook::WitAi::ObjectNodeReference::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Facebook::WitAi::ObjectNodeReference::GetStringValue
// Il2CppName: GetStringValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Facebook::WitAi::ObjectNodeReference::*)(::Facebook::WitAi::Lib::WitResponseNode*)>(&Facebook::WitAi::ObjectNodeReference::GetStringValue)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Facebook.WitAi.Lib", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::ObjectNodeReference*), "GetStringValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::ObjectNodeReference::GetIntValue
// Il2CppName: GetIntValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Facebook::WitAi::ObjectNodeReference::*)(::Facebook::WitAi::Lib::WitResponseNode*)>(&Facebook::WitAi::ObjectNodeReference::GetIntValue)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Facebook.WitAi.Lib", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::ObjectNodeReference*), "GetIntValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::ObjectNodeReference::GetFloatValue
// Il2CppName: GetFloatValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Facebook::WitAi::ObjectNodeReference::*)(::Facebook::WitAi::Lib::WitResponseNode*)>(&Facebook::WitAi::ObjectNodeReference::GetFloatValue)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Facebook.WitAi.Lib", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::ObjectNodeReference*), "GetFloatValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
