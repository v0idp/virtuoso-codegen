// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Facebook::WitAi::Data::Configuration
namespace Facebook::WitAi::Data::Configuration {
  // Forward declaring type: WitConfiguration
  class WitConfiguration;
}
// Forward declaring namespace: Facebook::WitAi::Interfaces
namespace Facebook::WitAi::Interfaces {
  // Forward declaring type: CustomTranscriptionProvider
  class CustomTranscriptionProvider;
}
// Completed forward declares
// Type namespace: Facebook.WitAi.Configuration
namespace Facebook::WitAi::Configuration {
  // Forward declaring type: WitRuntimeConfiguration
  class WitRuntimeConfiguration;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Facebook::WitAi::Configuration::WitRuntimeConfiguration);
DEFINE_IL2CPP_ARG_TYPE(::Facebook::WitAi::Configuration::WitRuntimeConfiguration*, "Facebook.WitAi.Configuration", "WitRuntimeConfiguration");
// Type namespace: Facebook.WitAi.Configuration
namespace Facebook::WitAi::Configuration {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Facebook.WitAi.Configuration.WitRuntimeConfiguration
  // [TokenAttribute] Offset: FFFFFFFF
  class WitRuntimeConfiguration : public ::Il2CppObject {
    public:
    public:
    // [TooltipAttribute] Offset: 0x6C7A68
    // public Facebook.WitAi.Data.Configuration.WitConfiguration witConfiguration
    // Size: 0x8
    // Offset: 0x10
    ::Facebook::WitAi::Data::Configuration::WitConfiguration* witConfiguration;
    // Field size check
    static_assert(sizeof(::Facebook::WitAi::Data::Configuration::WitConfiguration*) == 0x8);
    // [HeaderAttribute] Offset: 0x6C7AB4
    // [TooltipAttribute] Offset: 0x6C7AB4
    // public System.Single minKeepAliveVolume
    // Size: 0x4
    // Offset: 0x18
    float minKeepAliveVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0x6C7B24
    // [TooltipAttribute] Offset: 0x6C7B24
    // public System.Single minKeepAliveTimeInSeconds
    // Size: 0x4
    // Offset: 0x1C
    float minKeepAliveTimeInSeconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0x6C7B94
    // [TooltipAttribute] Offset: 0x6C7B94
    // public System.Single minTranscriptionKeepAliveTimeInSeconds
    // Size: 0x4
    // Offset: 0x20
    float minTranscriptionKeepAliveTimeInSeconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x6C7C04
    // [TooltipAttribute] Offset: 0x6C7C04
    // public System.Single maxRecordingTime
    // Size: 0x4
    // Offset: 0x24
    float maxRecordingTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0x6C7C68
    // public System.Single soundWakeThreshold
    // Size: 0x4
    // Offset: 0x28
    float soundWakeThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x6C7CB4
    // public System.Int32 sampleLengthInMs
    // Size: 0x4
    // Offset: 0x2C
    int sampleLengthInMs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single micBufferLengthInSeconds
    // Size: 0x4
    // Offset: 0x30
    float micBufferLengthInSeconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0x6C7D08
    // [TooltipAttribute] Offset: 0x6C7D08
    // public System.Boolean sendAudioToWit
    // Size: 0x1
    // Offset: 0x34
    bool sendAudioToWit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sendAudioToWit and: customTranscriptionProvider
    char __padding8[0x3] = {};
    // public Facebook.WitAi.Interfaces.CustomTranscriptionProvider customTranscriptionProvider
    // Size: 0x8
    // Offset: 0x38
    ::Facebook::WitAi::Interfaces::CustomTranscriptionProvider* customTranscriptionProvider;
    // Field size check
    static_assert(sizeof(::Facebook::WitAi::Interfaces::CustomTranscriptionProvider*) == 0x8);
    public:
    // Get instance field reference: public Facebook.WitAi.Data.Configuration.WitConfiguration witConfiguration
    [[deprecated("Use field access instead!")]] ::Facebook::WitAi::Data::Configuration::WitConfiguration*& dyn_witConfiguration();
    // Get instance field reference: public System.Single minKeepAliveVolume
    [[deprecated("Use field access instead!")]] float& dyn_minKeepAliveVolume();
    // Get instance field reference: public System.Single minKeepAliveTimeInSeconds
    [[deprecated("Use field access instead!")]] float& dyn_minKeepAliveTimeInSeconds();
    // Get instance field reference: public System.Single minTranscriptionKeepAliveTimeInSeconds
    [[deprecated("Use field access instead!")]] float& dyn_minTranscriptionKeepAliveTimeInSeconds();
    // Get instance field reference: public System.Single maxRecordingTime
    [[deprecated("Use field access instead!")]] float& dyn_maxRecordingTime();
    // Get instance field reference: public System.Single soundWakeThreshold
    [[deprecated("Use field access instead!")]] float& dyn_soundWakeThreshold();
    // Get instance field reference: public System.Int32 sampleLengthInMs
    [[deprecated("Use field access instead!")]] int& dyn_sampleLengthInMs();
    // Get instance field reference: public System.Single micBufferLengthInSeconds
    [[deprecated("Use field access instead!")]] float& dyn_micBufferLengthInSeconds();
    // Get instance field reference: public System.Boolean sendAudioToWit
    [[deprecated("Use field access instead!")]] bool& dyn_sendAudioToWit();
    // Get instance field reference: public Facebook.WitAi.Interfaces.CustomTranscriptionProvider customTranscriptionProvider
    [[deprecated("Use field access instead!")]] ::Facebook::WitAi::Interfaces::CustomTranscriptionProvider*& dyn_customTranscriptionProvider();
    // public System.Void .ctor()
    // Offset: 0x1673F20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitRuntimeConfiguration* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Facebook::WitAi::Configuration::WitRuntimeConfiguration::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitRuntimeConfiguration*, creationType>()));
    }
  }; // Facebook.WitAi.Configuration.WitRuntimeConfiguration
  #pragma pack(pop)
  static check_size<sizeof(WitRuntimeConfiguration), 56 + sizeof(::Facebook::WitAi::Interfaces::CustomTranscriptionProvider*)> __Facebook_WitAi_Configuration_WitRuntimeConfigurationSizeCheck;
  static_assert(sizeof(WitRuntimeConfiguration) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Facebook::WitAi::Configuration::WitRuntimeConfiguration::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
