// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Facebook::WitAi
namespace Facebook::WitAi {
}
// Forward declaring namespace: Facebook::WitAi::Data::Configuration
namespace Facebook::WitAi::Data::Configuration {
  // Forward declaring type: WitConfiguration
  class WitConfiguration;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: HttpWebRequest
  class HttpWebRequest;
  // Forward declaring type: HttpWebResponse
  class HttpWebResponse;
}
// Forward declaring namespace: Facebook::WitAi::Lib
namespace Facebook::WitAi::Lib {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: String
  class String;
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
}
// Forward declaring namespace: Facebook::WitAi::Data
namespace Facebook::WitAi::Data {
  // Forward declaring type: AudioEncoding
  class AudioEncoding;
}
// Completed forward declares
// Type namespace: Facebook.WitAi
namespace Facebook::WitAi {
  // Forward declaring type: WitRequest
  class WitRequest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Facebook::WitAi::WitRequest);
DEFINE_IL2CPP_ARG_TYPE(::Facebook::WitAi::WitRequest*, "Facebook.WitAi", "WitRequest");
// Type namespace: Facebook.WitAi
namespace Facebook::WitAi {
  // Size: 0xC8
  #pragma pack(push, 1)
  // Autogenerated type: Facebook.WitAi.WitRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class WitRequest : public ::Il2CppObject {
    public:
    // Nested type: ::Facebook::WitAi::WitRequest::QueryParam
    class QueryParam;
    // Nested type: ::Facebook::WitAi::WitRequest::$$c
    class $$c;
    public:
    // private Facebook.WitAi.Data.Configuration.WitConfiguration configuration
    // Size: 0x8
    // Offset: 0x10
    ::Facebook::WitAi::Data::Configuration::WitConfiguration* configuration;
    // Field size check
    static_assert(sizeof(::Facebook::WitAi::Data::Configuration::WitConfiguration*) == 0x8);
    // private System.IO.Stream activeStream
    // Size: 0x8
    // Offset: 0x18
    ::System::IO::Stream* activeStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.String command
    // Size: 0x8
    // Offset: 0x20
    ::StringW command;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String path
    // Size: 0x8
    // Offset: 0x28
    ::StringW path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Facebook.WitAi.WitRequest/Facebook.WitAi.QueryParam[] queryParams
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::Facebook::WitAi::WitRequest::QueryParam*> queryParams;
    // Field size check
    static_assert(sizeof(::ArrayW<::Facebook::WitAi::WitRequest::QueryParam*>) == 0x8);
    // private System.Net.HttpWebRequest request
    // Size: 0x8
    // Offset: 0x38
    ::System::Net::HttpWebRequest* request;
    // Field size check
    static_assert(sizeof(::System::Net::HttpWebRequest*) == 0x8);
    // private System.Net.HttpWebResponse response
    // Size: 0x8
    // Offset: 0x40
    ::System::Net::HttpWebResponse* response;
    // Field size check
    static_assert(sizeof(::System::Net::HttpWebResponse*) == 0x8);
    // private System.IO.Stream stream
    // Size: 0x8
    // Offset: 0x48
    ::System::IO::Stream* stream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private Facebook.WitAi.Lib.WitResponseNode responseData
    // Size: 0x8
    // Offset: 0x50
    ::Facebook::WitAi::Lib::WitResponseNode* responseData;
    // Field size check
    static_assert(sizeof(::Facebook::WitAi::Lib::WitResponseNode*) == 0x8);
    // private System.Boolean isActive
    // Size: 0x1
    // Offset: 0x58
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isActive and: postData
    char __padding9[0x7] = {};
    // public System.Byte[] postData
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<uint8_t> postData;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.String postContentType
    // Size: 0x8
    // Offset: 0x68
    ::StringW postContentType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Action`1<Facebook.WitAi.WitRequest> onResponse
    // Size: 0x8
    // Offset: 0x70
    ::System::Action_1<::Facebook::WitAi::WitRequest*>* onResponse;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Facebook::WitAi::WitRequest*>*) == 0x8);
    // public System.Action`1<Facebook.WitAi.WitRequest> onInputStreamReady
    // Size: 0x8
    // Offset: 0x78
    ::System::Action_1<::Facebook::WitAi::WitRequest*>* onInputStreamReady;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Facebook::WitAi::WitRequest*>*) == 0x8);
    // public System.Action`1<System.String> onRawResponse
    // Size: 0x8
    // Offset: 0x80
    ::System::Action_1<::StringW>* onRawResponse;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // public System.Action`1<System.String> onPartialTranscription
    // Size: 0x8
    // Offset: 0x88
    ::System::Action_1<::StringW>* onPartialTranscription;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // public System.Action`1<System.String> onFullTranscription
    // Size: 0x8
    // Offset: 0x90
    ::System::Action_1<::StringW>* onFullTranscription;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // public Facebook.WitAi.Data.AudioEncoding audioEncoding
    // Size: 0x8
    // Offset: 0x98
    ::Facebook::WitAi::Data::AudioEncoding* audioEncoding;
    // Field size check
    static_assert(sizeof(::Facebook::WitAi::Data::AudioEncoding*) == 0x8);
    // private System.Int32 statusCode
    // Size: 0x4
    // Offset: 0xA0
    int statusCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: statusCode and: statusDescription
    char __padding18[0x4] = {};
    // private System.String statusDescription
    // Size: 0x8
    // Offset: 0xA8
    ::StringW statusDescription;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean isRequestStreamActive
    // Size: 0x1
    // Offset: 0xB0
    bool isRequestStreamActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isServerAuthRequired
    // Size: 0x1
    // Offset: 0xB1
    bool isServerAuthRequired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean configurationRequired
    // Size: 0x1
    // Offset: 0xB2
    bool configurationRequired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: configurationRequired and: serverToken
    char __padding22[0x5] = {};
    // private System.String serverToken
    // Size: 0x8
    // Offset: 0xB8
    ::StringW serverToken;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String callingStackTrace
    // Size: 0x8
    // Offset: 0xC0
    ::StringW callingStackTrace;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // static field const value: static public System.Int32 ERROR_CODE_GENERAL
    static constexpr const int ERROR_CODE_GENERAL = -1;
    // Get static field: static public System.Int32 ERROR_CODE_GENERAL
    static int _get_ERROR_CODE_GENERAL();
    // Set static field: static public System.Int32 ERROR_CODE_GENERAL
    static void _set_ERROR_CODE_GENERAL(int value);
    // static field const value: static public System.Int32 ERROR_CODE_NO_CONFIGURATION
    static constexpr const int ERROR_CODE_NO_CONFIGURATION = -2;
    // Get static field: static public System.Int32 ERROR_CODE_NO_CONFIGURATION
    static int _get_ERROR_CODE_NO_CONFIGURATION();
    // Set static field: static public System.Int32 ERROR_CODE_NO_CONFIGURATION
    static void _set_ERROR_CODE_NO_CONFIGURATION(int value);
    // static field const value: static public System.Int32 ERROR_CODE_NO_CLIENT_TOKEN
    static constexpr const int ERROR_CODE_NO_CLIENT_TOKEN = -3;
    // Get static field: static public System.Int32 ERROR_CODE_NO_CLIENT_TOKEN
    static int _get_ERROR_CODE_NO_CLIENT_TOKEN();
    // Set static field: static public System.Int32 ERROR_CODE_NO_CLIENT_TOKEN
    static void _set_ERROR_CODE_NO_CLIENT_TOKEN(int value);
    // static field const value: static private System.String URI_SCHEME
    static constexpr const char* URI_SCHEME = "https";
    // Get static field: static private System.String URI_SCHEME
    static ::StringW _get_URI_SCHEME();
    // Set static field: static private System.String URI_SCHEME
    static void _set_URI_SCHEME(::StringW value);
    // static field const value: static private System.String URI_AUTHORITY
    static constexpr const char* URI_AUTHORITY = "api.wit.ai";
    // Get static field: static private System.String URI_AUTHORITY
    static ::StringW _get_URI_AUTHORITY();
    // Set static field: static private System.String URI_AUTHORITY
    static void _set_URI_AUTHORITY(::StringW value);
    // static field const value: static public System.String WIT_API_VERSION
    static constexpr const char* WIT_API_VERSION = "20210928";
    // Get static field: static public System.String WIT_API_VERSION
    static ::StringW _get_WIT_API_VERSION();
    // Set static field: static public System.String WIT_API_VERSION
    static void _set_WIT_API_VERSION(::StringW value);
    // static field const value: static public System.String WIT_SDK_VERSION
    static constexpr const char* WIT_SDK_VERSION = "0.0.18";
    // Get static field: static public System.String WIT_SDK_VERSION
    static ::StringW _get_WIT_SDK_VERSION();
    // Set static field: static public System.String WIT_SDK_VERSION
    static void _set_WIT_SDK_VERSION(::StringW value);
    // Get static field: static private System.String operatingSystem
    static ::StringW _get_operatingSystem();
    // Set static field: static private System.String operatingSystem
    static void _set_operatingSystem(::StringW value);
    // Get static field: static private System.String deviceModel
    static ::StringW _get_deviceModel();
    // Set static field: static private System.String deviceModel
    static void _set_deviceModel(::StringW value);
    // Get static field: static private System.String deviceName
    static ::StringW _get_deviceName();
    // Set static field: static private System.String deviceName
    static void _set_deviceName(::StringW value);
    // Get instance field reference: private Facebook.WitAi.Data.Configuration.WitConfiguration configuration
    [[deprecated("Use field access instead!")]] ::Facebook::WitAi::Data::Configuration::WitConfiguration*& dyn_configuration();
    // Get instance field reference: private System.IO.Stream activeStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn_activeStream();
    // Get instance field reference: private System.String command
    [[deprecated("Use field access instead!")]] ::StringW& dyn_command();
    // Get instance field reference: private System.String path
    [[deprecated("Use field access instead!")]] ::StringW& dyn_path();
    // Get instance field reference: public Facebook.WitAi.WitRequest/Facebook.WitAi.QueryParam[] queryParams
    [[deprecated("Use field access instead!")]] ::ArrayW<::Facebook::WitAi::WitRequest::QueryParam*>& dyn_queryParams();
    // Get instance field reference: private System.Net.HttpWebRequest request
    [[deprecated("Use field access instead!")]] ::System::Net::HttpWebRequest*& dyn_request();
    // Get instance field reference: private System.Net.HttpWebResponse response
    [[deprecated("Use field access instead!")]] ::System::Net::HttpWebResponse*& dyn_response();
    // Get instance field reference: private System.IO.Stream stream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn_stream();
    // Get instance field reference: private Facebook.WitAi.Lib.WitResponseNode responseData
    [[deprecated("Use field access instead!")]] ::Facebook::WitAi::Lib::WitResponseNode*& dyn_responseData();
    // Get instance field reference: private System.Boolean isActive
    [[deprecated("Use field access instead!")]] bool& dyn_isActive();
    // Get instance field reference: public System.Byte[] postData
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_postData();
    // Get instance field reference: public System.String postContentType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_postContentType();
    // Get instance field reference: public System.Action`1<Facebook.WitAi.WitRequest> onResponse
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Facebook::WitAi::WitRequest*>*& dyn_onResponse();
    // Get instance field reference: public System.Action`1<Facebook.WitAi.WitRequest> onInputStreamReady
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Facebook::WitAi::WitRequest*>*& dyn_onInputStreamReady();
    // Get instance field reference: public System.Action`1<System.String> onRawResponse
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_onRawResponse();
    // Get instance field reference: public System.Action`1<System.String> onPartialTranscription
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_onPartialTranscription();
    // Get instance field reference: public System.Action`1<System.String> onFullTranscription
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_onFullTranscription();
    // Get instance field reference: public Facebook.WitAi.Data.AudioEncoding audioEncoding
    [[deprecated("Use field access instead!")]] ::Facebook::WitAi::Data::AudioEncoding*& dyn_audioEncoding();
    // Get instance field reference: private System.Int32 statusCode
    [[deprecated("Use field access instead!")]] int& dyn_statusCode();
    // Get instance field reference: private System.String statusDescription
    [[deprecated("Use field access instead!")]] ::StringW& dyn_statusDescription();
    // Get instance field reference: private System.Boolean isRequestStreamActive
    [[deprecated("Use field access instead!")]] bool& dyn_isRequestStreamActive();
    // Get instance field reference: private System.Boolean isServerAuthRequired
    [[deprecated("Use field access instead!")]] bool& dyn_isServerAuthRequired();
    // Get instance field reference: private System.Boolean configurationRequired
    [[deprecated("Use field access instead!")]] bool& dyn_configurationRequired();
    // Get instance field reference: private System.String serverToken
    [[deprecated("Use field access instead!")]] ::StringW& dyn_serverToken();
    // Get instance field reference: private System.String callingStackTrace
    [[deprecated("Use field access instead!")]] ::StringW& dyn_callingStackTrace();
    // public System.Boolean get_IsActive()
    // Offset: 0x1675428
    bool get_IsActive();
    // public Facebook.WitAi.Lib.WitResponseNode get_ResponseData()
    // Offset: 0x1675430
    ::Facebook::WitAi::Lib::WitResponseNode* get_ResponseData();
    // public System.Int32 get_StatusCode()
    // Offset: 0x1675438
    int get_StatusCode();
    // public System.Boolean get_IsRequestStreamActive()
    // Offset: 0x1671FE8
    bool get_IsRequestStreamActive();
    // public System.String get_StatusDescription()
    // Offset: 0x1675440
    ::StringW get_StatusDescription();
    // public System.Void .ctor(Facebook.WitAi.Data.Configuration.WitConfiguration configuration, System.String path, params Facebook.WitAi.WitRequest/Facebook.WitAi.QueryParam[] queryParams)
    // Offset: 0x1675450
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitRequest* New_ctor(::Facebook::WitAi::Data::Configuration::WitConfiguration* configuration, ::StringW path, ::ArrayW<::Facebook::WitAi::WitRequest::QueryParam*> queryParams) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Facebook::WitAi::WitRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitRequest*, creationType>(configuration, path, queryParams)));
    }
    // public System.Void .ctor(Facebook.WitAi.Data.Configuration.WitConfiguration configuration, System.String path, System.Boolean isServerAuthRequired, params Facebook.WitAi.WitRequest/Facebook.WitAi.QueryParam[] queryParams)
    // Offset: 0x1675658
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitRequest* New_ctor(::Facebook::WitAi::Data::Configuration::WitConfiguration* configuration, ::StringW path, bool isServerAuthRequired, ::ArrayW<::Facebook::WitAi::WitRequest::QueryParam*> queryParams) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Facebook::WitAi::WitRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitRequest*, creationType>(configuration, path, isServerAuthRequired, queryParams)));
    }
    // public System.Void .ctor(System.String serverToken, System.String path, params Facebook.WitAi.WitRequest/Facebook.WitAi.QueryParam[] queryParams)
    // Offset: 0x1675860
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitRequest* New_ctor(::StringW serverToken, ::StringW path, ::ArrayW<::Facebook::WitAi::WitRequest::QueryParam*> queryParams) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Facebook::WitAi::WitRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitRequest*, creationType>(serverToken, path, queryParams)));
    }
    // public System.Void Request()
    // Offset: 0x1673340
    void Request();
    // private System.Void StartRequest(System.Uri uri)
    // Offset: 0x1675968
    void StartRequest(::System::Uri* uri);
    // private System.Void HandleResponse(System.IAsyncResult ar)
    // Offset: 0x16760D8
    void HandleResponse(::System::IAsyncResult* ar);
    // private System.Void HandleRequestStream(System.IAsyncResult ar)
    // Offset: 0x1676D40
    void HandleRequestStream(::System::IAsyncResult* ar);
    // public System.Void CloseRequestStream()
    // Offset: 0x16737EC
    void CloseRequestStream();
    // public System.Void Write(System.Byte[] data, System.Int32 offset, System.Int32 length)
    // Offset: 0x1672008
    void Write(::ArrayW<uint8_t> data, int offset, int length);
    // public override System.String ToString()
    // Offset: 0x1675448
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Facebook.WitAi.WitRequest
  #pragma pack(pop)
  static check_size<sizeof(WitRequest), 192 + sizeof(::StringW)> __Facebook_WitAi_WitRequestSizeCheck;
  static_assert(sizeof(WitRequest) == 0xC8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Facebook::WitAi::WitRequest::get_IsActive
// Il2CppName: get_IsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Facebook::WitAi::WitRequest::*)()>(&Facebook::WitAi::WitRequest::get_IsActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::WitRequest*), "get_IsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::WitRequest::get_ResponseData
// Il2CppName: get_ResponseData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Facebook::WitAi::Lib::WitResponseNode* (Facebook::WitAi::WitRequest::*)()>(&Facebook::WitAi::WitRequest::get_ResponseData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::WitRequest*), "get_ResponseData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::WitRequest::get_StatusCode
// Il2CppName: get_StatusCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Facebook::WitAi::WitRequest::*)()>(&Facebook::WitAi::WitRequest::get_StatusCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::WitRequest*), "get_StatusCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::WitRequest::get_IsRequestStreamActive
// Il2CppName: get_IsRequestStreamActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Facebook::WitAi::WitRequest::*)()>(&Facebook::WitAi::WitRequest::get_IsRequestStreamActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::WitRequest*), "get_IsRequestStreamActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::WitRequest::get_StatusDescription
// Il2CppName: get_StatusDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Facebook::WitAi::WitRequest::*)()>(&Facebook::WitAi::WitRequest::get_StatusDescription)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::WitRequest*), "get_StatusDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::WitRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Facebook::WitAi::WitRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Facebook::WitAi::WitRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Facebook::WitAi::WitRequest::Request
// Il2CppName: Request
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::WitRequest::*)()>(&Facebook::WitAi::WitRequest::Request)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::WitRequest*), "Request", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::WitRequest::StartRequest
// Il2CppName: StartRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::WitRequest::*)(::System::Uri*)>(&Facebook::WitAi::WitRequest::StartRequest)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::WitRequest*), "StartRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::WitRequest::HandleResponse
// Il2CppName: HandleResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::WitRequest::*)(::System::IAsyncResult*)>(&Facebook::WitAi::WitRequest::HandleResponse)> {
  static const MethodInfo* get() {
    static auto* ar = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::WitRequest*), "HandleResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ar});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::WitRequest::HandleRequestStream
// Il2CppName: HandleRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::WitRequest::*)(::System::IAsyncResult*)>(&Facebook::WitAi::WitRequest::HandleRequestStream)> {
  static const MethodInfo* get() {
    static auto* ar = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::WitRequest*), "HandleRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ar});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::WitRequest::CloseRequestStream
// Il2CppName: CloseRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::WitRequest::*)()>(&Facebook::WitAi::WitRequest::CloseRequestStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::WitRequest*), "CloseRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::WitRequest::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::WitRequest::*)(::ArrayW<uint8_t>, int, int)>(&Facebook::WitAi::WitRequest::Write)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::WitRequest*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, offset, length});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::WitRequest::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Facebook::WitAi::WitRequest::*)()>(&Facebook::WitAi::WitRequest::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::WitRequest*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
