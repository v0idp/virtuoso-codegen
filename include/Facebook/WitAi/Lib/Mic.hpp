// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Facebook.WitAi.Interfaces.IAudioInputSource
#include "Facebook/WitAi/Interfaces/IAudioInputSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Facebook::WitAi::Lib
namespace Facebook::WitAi::Lib {
}
// Forward declaring namespace: Facebook::WitAi::Data
namespace Facebook::WitAi::Data {
  // Forward declaring type: AudioEncoding
  class AudioEncoding;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Facebook.WitAi.Lib
namespace Facebook::WitAi::Lib {
  // Forward declaring type: Mic
  class Mic;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Facebook::WitAi::Lib::Mic);
DEFINE_IL2CPP_ARG_TYPE(::Facebook::WitAi::Lib::Mic*, "Facebook.WitAi.Lib", "Mic");
// Type namespace: Facebook.WitAi.Lib
namespace Facebook::WitAi::Lib {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: Facebook.WitAi.Lib.Mic
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 6C7360
  class Mic : public ::UnityEngine::MonoBehaviour/*, public ::Facebook::WitAi::Interfaces::IAudioInputSource*/ {
    public:
    // Nested type: ::Facebook::WitAi::Lib::Mic::$ReadRawAudio$d__55
    class $ReadRawAudio$d__55;
    public:
    // private System.Boolean <IsRecording>k__BackingField
    // Size: 0x1
    // Offset: 0x18
    bool IsRecording;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsRecording and: AudioEncoding
    char __padding0[0x7] = {};
    // private readonly Facebook.WitAi.Data.AudioEncoding <AudioEncoding>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::Facebook::WitAi::Data::AudioEncoding* AudioEncoding;
    // Field size check
    static_assert(sizeof(::Facebook::WitAi::Data::AudioEncoding*) == 0x8);
    // private System.Single[] <Sample>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<float> Sample;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Int32 <SampleDurationMS>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    int SampleDurationMS;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: SampleDurationMS and: AudioClip
    char __padding3[0x4] = {};
    // private UnityEngine.AudioClip <AudioClip>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AudioClip* AudioClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Collections.Generic.List`1<System.String> devices
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::StringW>* devices;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Int32 <CurrentDeviceIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x48
    int CurrentDeviceIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_SampleCount
    // Size: 0x4
    // Offset: 0x4C
    int m_SampleCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Action OnStartRecording
    // Size: 0x8
    // Offset: 0x50
    ::System::Action* OnStartRecording;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action OnStartRecordingFailed
    // Size: 0x8
    // Offset: 0x58
    ::System::Action* OnStartRecordingFailed;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action`3<System.Int32,System.Single[],System.Single> OnSampleReady
    // Size: 0x8
    // Offset: 0x60
    ::System::Action_3<int, ::ArrayW<float>, float>* OnSampleReady;
    // Field size check
    static_assert(sizeof(::System::Action_3<int, ::ArrayW<float>, float>*) == 0x8);
    // private System.Action OnStopRecording
    // Size: 0x8
    // Offset: 0x68
    ::System::Action* OnStopRecording;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Facebook::WitAi::Interfaces::IAudioInputSource
    operator ::Facebook::WitAi::Interfaces::IAudioInputSource() noexcept {
      return *reinterpret_cast<::Facebook::WitAi::Interfaces::IAudioInputSource*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private Facebook.WitAi.Lib.Mic m_Instance
    static ::Facebook::WitAi::Lib::Mic* _get_m_Instance();
    // Set static field: static private Facebook.WitAi.Lib.Mic m_Instance
    static void _set_m_Instance(::Facebook::WitAi::Lib::Mic* value);
    // Get instance field reference: private System.Boolean <IsRecording>k__BackingField
    [[deprecated]] bool& dyn_$IsRecording$k__BackingField();
    // Get instance field reference: private readonly Facebook.WitAi.Data.AudioEncoding <AudioEncoding>k__BackingField
    [[deprecated]] ::Facebook::WitAi::Data::AudioEncoding*& dyn_$AudioEncoding$k__BackingField();
    // Get instance field reference: private System.Single[] <Sample>k__BackingField
    [[deprecated]] ::ArrayW<float>& dyn_$Sample$k__BackingField();
    // Get instance field reference: private System.Int32 <SampleDurationMS>k__BackingField
    [[deprecated]] int& dyn_$SampleDurationMS$k__BackingField();
    // Get instance field reference: private UnityEngine.AudioClip <AudioClip>k__BackingField
    [[deprecated]] ::UnityEngine::AudioClip*& dyn_$AudioClip$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> devices
    [[deprecated]] ::System::Collections::Generic::List_1<::StringW>*& dyn_devices();
    // Get instance field reference: private System.Int32 <CurrentDeviceIndex>k__BackingField
    [[deprecated]] int& dyn_$CurrentDeviceIndex$k__BackingField();
    // Get instance field reference: private System.Int32 m_SampleCount
    [[deprecated]] int& dyn_m_SampleCount();
    // Get instance field reference: private System.Action OnStartRecording
    [[deprecated]] ::System::Action*& dyn_OnStartRecording();
    // Get instance field reference: private System.Action OnStartRecordingFailed
    [[deprecated]] ::System::Action*& dyn_OnStartRecordingFailed();
    // Get instance field reference: private System.Action`3<System.Int32,System.Single[],System.Single> OnSampleReady
    [[deprecated]] ::System::Action_3<int, ::ArrayW<float>, float>*& dyn_OnSampleReady();
    // Get instance field reference: private System.Action OnStopRecording
    [[deprecated]] ::System::Action*& dyn_OnStopRecording();
    // public System.Boolean get_IsRecording()
    // Offset: 0x166ED10
    bool get_IsRecording();
    // private System.Void set_IsRecording(System.Boolean value)
    // Offset: 0x166ED18
    void set_IsRecording(bool value);
    // public Facebook.WitAi.Data.AudioEncoding get_AudioEncoding()
    // Offset: 0x166ED24
    ::Facebook::WitAi::Data::AudioEncoding* get_AudioEncoding();
    // public System.Single[] get_Sample()
    // Offset: 0x166ED2C
    ::ArrayW<float> get_Sample();
    // private System.Void set_Sample(System.Single[] value)
    // Offset: 0x166ED34
    void set_Sample(::ArrayW<float> value);
    // public System.Int32 get_SampleDurationMS()
    // Offset: 0x166ED3C
    int get_SampleDurationMS();
    // private System.Void set_SampleDurationMS(System.Int32 value)
    // Offset: 0x166ED44
    void set_SampleDurationMS(int value);
    // public System.Int32 get_SampleLength()
    // Offset: 0x166ED4C
    int get_SampleLength();
    // public UnityEngine.AudioClip get_AudioClip()
    // Offset: 0x166ED88
    ::UnityEngine::AudioClip* get_AudioClip();
    // private System.Void set_AudioClip(UnityEngine.AudioClip value)
    // Offset: 0x166ED90
    void set_AudioClip(::UnityEngine::AudioClip* value);
    // public System.Collections.Generic.List`1<System.String> get_Devices()
    // Offset: 0x166ED98
    ::System::Collections::Generic::List_1<::StringW>* get_Devices();
    // public System.Int32 get_CurrentDeviceIndex()
    // Offset: 0x166EE9C
    int get_CurrentDeviceIndex();
    // private System.Void set_CurrentDeviceIndex(System.Int32 value)
    // Offset: 0x166EEA4
    void set_CurrentDeviceIndex(int value);
    // public System.String get_CurrentDeviceName()
    // Offset: 0x166EEAC
    ::StringW get_CurrentDeviceName();
    // static public Facebook.WitAi.Lib.Mic get_Instance()
    // Offset: 0x166F470
    static ::Facebook::WitAi::Lib::Mic* get_Instance();
    // public System.Void add_OnStartRecording(System.Action value)
    // Offset: 0x166EF70
    void add_OnStartRecording(::System::Action* value);
    // public System.Void remove_OnStartRecording(System.Action value)
    // Offset: 0x166F010
    void remove_OnStartRecording(::System::Action* value);
    // public System.Void add_OnStartRecordingFailed(System.Action value)
    // Offset: 0x166F0B0
    void add_OnStartRecordingFailed(::System::Action* value);
    // public System.Void remove_OnStartRecordingFailed(System.Action value)
    // Offset: 0x166F150
    void remove_OnStartRecordingFailed(::System::Action* value);
    // public System.Void add_OnSampleReady(System.Action`3<System.Int32,System.Single[],System.Single> value)
    // Offset: 0x166F1F0
    void add_OnSampleReady(::System::Action_3<int, ::ArrayW<float>, float>* value);
    // public System.Void remove_OnSampleReady(System.Action`3<System.Int32,System.Single[],System.Single> value)
    // Offset: 0x166F290
    void remove_OnSampleReady(::System::Action_3<int, ::ArrayW<float>, float>* value);
    // public System.Void add_OnStopRecording(System.Action value)
    // Offset: 0x166F330
    void add_OnStopRecording(::System::Action* value);
    // public System.Void remove_OnStopRecording(System.Action value)
    // Offset: 0x166F3D0
    void remove_OnStopRecording(::System::Action* value);
    // static public Facebook.WitAi.Lib.Mic Instantiate()
    // Offset: 0x166F640
    static ::Facebook::WitAi::Lib::Mic* Instantiate();
    // private System.Void Awake()
    // Offset: 0x166F644
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x166F64C
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x166F71C
    void OnDisable();
    // public System.Void ChangeDevice(System.Int32 index)
    // Offset: 0x166F810
    void ChangeDevice(int index);
    // private System.Void StartMicrophone()
    // Offset: 0x166F650
    void StartMicrophone();
    // private System.Void StopMicrophone()
    // Offset: 0x166F720
    void StopMicrophone();
    // public System.Void StartRecording(System.Int32 sampleLen)
    // Offset: 0x166F83C
    void StartRecording(int sampleLen);
    // public System.Void StopRecording()
    // Offset: 0x166FA84
    void StopRecording();
    // private System.Collections.IEnumerator ReadRawAudio()
    // Offset: 0x166FB60
    ::System::Collections::IEnumerator* ReadRawAudio();
    // public System.Void .ctor()
    // Offset: 0x166FBF8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Mic* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Facebook::WitAi::Lib::Mic::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Mic*, creationType>()));
    }
  }; // Facebook.WitAi.Lib.Mic
  #pragma pack(pop)
  static check_size<sizeof(Mic), 104 + sizeof(::System::Action*)> __Facebook_WitAi_Lib_MicSizeCheck;
  static_assert(sizeof(Mic) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::get_IsRecording
// Il2CppName: get_IsRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Facebook::WitAi::Lib::Mic::*)()>(&Facebook::WitAi::Lib::Mic::get_IsRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "get_IsRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::set_IsRecording
// Il2CppName: set_IsRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)(bool)>(&Facebook::WitAi::Lib::Mic::set_IsRecording)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "set_IsRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::get_AudioEncoding
// Il2CppName: get_AudioEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Facebook::WitAi::Data::AudioEncoding* (Facebook::WitAi::Lib::Mic::*)()>(&Facebook::WitAi::Lib::Mic::get_AudioEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "get_AudioEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::get_Sample
// Il2CppName: get_Sample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (Facebook::WitAi::Lib::Mic::*)()>(&Facebook::WitAi::Lib::Mic::get_Sample)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "get_Sample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::set_Sample
// Il2CppName: set_Sample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)(::ArrayW<float>)>(&Facebook::WitAi::Lib::Mic::set_Sample)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "set_Sample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::get_SampleDurationMS
// Il2CppName: get_SampleDurationMS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Facebook::WitAi::Lib::Mic::*)()>(&Facebook::WitAi::Lib::Mic::get_SampleDurationMS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "get_SampleDurationMS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::set_SampleDurationMS
// Il2CppName: set_SampleDurationMS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)(int)>(&Facebook::WitAi::Lib::Mic::set_SampleDurationMS)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "set_SampleDurationMS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::get_SampleLength
// Il2CppName: get_SampleLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Facebook::WitAi::Lib::Mic::*)()>(&Facebook::WitAi::Lib::Mic::get_SampleLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "get_SampleLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::get_AudioClip
// Il2CppName: get_AudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (Facebook::WitAi::Lib::Mic::*)()>(&Facebook::WitAi::Lib::Mic::get_AudioClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "get_AudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::set_AudioClip
// Il2CppName: set_AudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)(::UnityEngine::AudioClip*)>(&Facebook::WitAi::Lib::Mic::set_AudioClip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "set_AudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::get_Devices
// Il2CppName: get_Devices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (Facebook::WitAi::Lib::Mic::*)()>(&Facebook::WitAi::Lib::Mic::get_Devices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "get_Devices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::get_CurrentDeviceIndex
// Il2CppName: get_CurrentDeviceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Facebook::WitAi::Lib::Mic::*)()>(&Facebook::WitAi::Lib::Mic::get_CurrentDeviceIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "get_CurrentDeviceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::set_CurrentDeviceIndex
// Il2CppName: set_CurrentDeviceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)(int)>(&Facebook::WitAi::Lib::Mic::set_CurrentDeviceIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "set_CurrentDeviceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::get_CurrentDeviceName
// Il2CppName: get_CurrentDeviceName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Facebook::WitAi::Lib::Mic::*)()>(&Facebook::WitAi::Lib::Mic::get_CurrentDeviceName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "get_CurrentDeviceName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Facebook::WitAi::Lib::Mic* (*)()>(&Facebook::WitAi::Lib::Mic::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::add_OnStartRecording
// Il2CppName: add_OnStartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)(::System::Action*)>(&Facebook::WitAi::Lib::Mic::add_OnStartRecording)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "add_OnStartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::remove_OnStartRecording
// Il2CppName: remove_OnStartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)(::System::Action*)>(&Facebook::WitAi::Lib::Mic::remove_OnStartRecording)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "remove_OnStartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::add_OnStartRecordingFailed
// Il2CppName: add_OnStartRecordingFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)(::System::Action*)>(&Facebook::WitAi::Lib::Mic::add_OnStartRecordingFailed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "add_OnStartRecordingFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::remove_OnStartRecordingFailed
// Il2CppName: remove_OnStartRecordingFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)(::System::Action*)>(&Facebook::WitAi::Lib::Mic::remove_OnStartRecordingFailed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "remove_OnStartRecordingFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::add_OnSampleReady
// Il2CppName: add_OnSampleReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)(::System::Action_3<int, ::ArrayW<float>, float>*)>(&Facebook::WitAi::Lib::Mic::add_OnSampleReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "add_OnSampleReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::remove_OnSampleReady
// Il2CppName: remove_OnSampleReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)(::System::Action_3<int, ::ArrayW<float>, float>*)>(&Facebook::WitAi::Lib::Mic::remove_OnSampleReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "remove_OnSampleReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::add_OnStopRecording
// Il2CppName: add_OnStopRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)(::System::Action*)>(&Facebook::WitAi::Lib::Mic::add_OnStopRecording)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "add_OnStopRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::remove_OnStopRecording
// Il2CppName: remove_OnStopRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)(::System::Action*)>(&Facebook::WitAi::Lib::Mic::remove_OnStopRecording)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "remove_OnStopRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Facebook::WitAi::Lib::Mic* (*)()>(&Facebook::WitAi::Lib::Mic::Instantiate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)()>(&Facebook::WitAi::Lib::Mic::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)()>(&Facebook::WitAi::Lib::Mic::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)()>(&Facebook::WitAi::Lib::Mic::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::ChangeDevice
// Il2CppName: ChangeDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)(int)>(&Facebook::WitAi::Lib::Mic::ChangeDevice)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "ChangeDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::StartMicrophone
// Il2CppName: StartMicrophone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)()>(&Facebook::WitAi::Lib::Mic::StartMicrophone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "StartMicrophone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::StopMicrophone
// Il2CppName: StopMicrophone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)()>(&Facebook::WitAi::Lib::Mic::StopMicrophone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "StopMicrophone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::StartRecording
// Il2CppName: StartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)(int)>(&Facebook::WitAi::Lib::Mic::StartRecording)> {
  static const MethodInfo* get() {
    static auto* sampleLen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "StartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sampleLen});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::StopRecording
// Il2CppName: StopRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facebook::WitAi::Lib::Mic::*)()>(&Facebook::WitAi::Lib::Mic::StopRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "StopRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::ReadRawAudio
// Il2CppName: ReadRawAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Facebook::WitAi::Lib::Mic::*)()>(&Facebook::WitAi::Lib::Mic::ReadRawAudio)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::Lib::Mic*), "ReadRawAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::Lib::Mic::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
