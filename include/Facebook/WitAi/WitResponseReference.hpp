// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Facebook::WitAi::Lib
namespace Facebook::WitAi::Lib {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Completed forward declares
// Type namespace: Facebook.WitAi
namespace Facebook::WitAi {
  // Forward declaring type: WitResponseReference
  class WitResponseReference;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Facebook::WitAi::WitResponseReference);
DEFINE_IL2CPP_ARG_TYPE(::Facebook::WitAi::WitResponseReference*, "Facebook.WitAi", "WitResponseReference");
// Type namespace: Facebook.WitAi
namespace Facebook::WitAi {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Facebook.WitAi.WitResponseReference
  // [TokenAttribute] Offset: FFFFFFFF
  class WitResponseReference : public ::Il2CppObject {
    public:
    public:
    // public Facebook.WitAi.WitResponseReference child
    // Size: 0x8
    // Offset: 0x10
    ::Facebook::WitAi::WitResponseReference* child;
    // Field size check
    static_assert(sizeof(::Facebook::WitAi::WitResponseReference*) == 0x8);
    // public System.String path
    // Size: 0x8
    // Offset: 0x18
    ::StringW path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public Facebook.WitAi.WitResponseReference child
    [[deprecated]] ::Facebook::WitAi::WitResponseReference*& dyn_child();
    // Get instance field reference: public System.String path
    [[deprecated]] ::StringW& dyn_path();
    // public System.String GetStringValue(Facebook.WitAi.Lib.WitResponseNode response)
    // Offset: 0x167CB90
    ::StringW GetStringValue(::Facebook::WitAi::Lib::WitResponseNode* response);
    // public System.Int32 GetIntValue(Facebook.WitAi.Lib.WitResponseNode response)
    // Offset: 0x167CBB0
    int GetIntValue(::Facebook::WitAi::Lib::WitResponseNode* response);
    // public System.Single GetFloatValue(Facebook.WitAi.Lib.WitResponseNode response)
    // Offset: 0x167CBD0
    float GetFloatValue(::Facebook::WitAi::Lib::WitResponseNode* response);
    // public System.Void .ctor()
    // Offset: 0x166E6F0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitResponseReference* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Facebook::WitAi::WitResponseReference::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitResponseReference*, creationType>()));
    }
  }; // Facebook.WitAi.WitResponseReference
  #pragma pack(pop)
  static check_size<sizeof(WitResponseReference), 24 + sizeof(::StringW)> __Facebook_WitAi_WitResponseReferenceSizeCheck;
  static_assert(sizeof(WitResponseReference) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Facebook::WitAi::WitResponseReference::GetStringValue
// Il2CppName: GetStringValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Facebook::WitAi::WitResponseReference::*)(::Facebook::WitAi::Lib::WitResponseNode*)>(&Facebook::WitAi::WitResponseReference::GetStringValue)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Facebook.WitAi.Lib", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::WitResponseReference*), "GetStringValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::WitResponseReference::GetIntValue
// Il2CppName: GetIntValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Facebook::WitAi::WitResponseReference::*)(::Facebook::WitAi::Lib::WitResponseNode*)>(&Facebook::WitAi::WitResponseReference::GetIntValue)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Facebook.WitAi.Lib", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::WitResponseReference*), "GetIntValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::WitResponseReference::GetFloatValue
// Il2CppName: GetFloatValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Facebook::WitAi::WitResponseReference::*)(::Facebook::WitAi::Lib::WitResponseNode*)>(&Facebook::WitAi::WitResponseReference::GetFloatValue)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Facebook.WitAi.Lib", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facebook::WitAi::WitResponseReference*), "GetFloatValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Facebook::WitAi::WitResponseReference::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
