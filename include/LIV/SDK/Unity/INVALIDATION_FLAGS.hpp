// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Forward declaring type: INVALIDATION_FLAGS
  struct INVALIDATION_FLAGS;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::LIV::SDK::Unity::INVALIDATION_FLAGS, "LIV.SDK.Unity", "INVALIDATION_FLAGS");
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: LIV.SDK.Unity.INVALIDATION_FLAGS
  // [TokenAttribute] Offset: FFFFFFFF
  // [FlagsAttribute] Offset: FFFFFFFF
  struct INVALIDATION_FLAGS/*, public ::System::Enum*/ {
    public:
    public:
    // public System.UInt32 value__
    // Size: 0x4
    // Offset: 0x0
    uint value;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: INVALIDATION_FLAGS
    constexpr INVALIDATION_FLAGS(uint value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator uint
    constexpr operator uint() const noexcept {
      return value;
    }
    // static field const value: static public LIV.SDK.Unity.INVALIDATION_FLAGS NONE
    static constexpr const uint NONE = 0u;
    // Get static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS NONE
    static ::LIV::SDK::Unity::INVALIDATION_FLAGS _get_NONE();
    // Set static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS NONE
    static void _set_NONE(::LIV::SDK::Unity::INVALIDATION_FLAGS value);
    // static field const value: static public LIV.SDK.Unity.INVALIDATION_FLAGS HMD_CAMERA
    static constexpr const uint HMD_CAMERA = 1u;
    // Get static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS HMD_CAMERA
    static ::LIV::SDK::Unity::INVALIDATION_FLAGS _get_HMD_CAMERA();
    // Set static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS HMD_CAMERA
    static void _set_HMD_CAMERA(::LIV::SDK::Unity::INVALIDATION_FLAGS value);
    // static field const value: static public LIV.SDK.Unity.INVALIDATION_FLAGS STAGE
    static constexpr const uint STAGE = 2u;
    // Get static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS STAGE
    static ::LIV::SDK::Unity::INVALIDATION_FLAGS _get_STAGE();
    // Set static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS STAGE
    static void _set_STAGE(::LIV::SDK::Unity::INVALIDATION_FLAGS value);
    // static field const value: static public LIV.SDK.Unity.INVALIDATION_FLAGS MR_CAMERA_PREFAB
    static constexpr const uint MR_CAMERA_PREFAB = 4u;
    // Get static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS MR_CAMERA_PREFAB
    static ::LIV::SDK::Unity::INVALIDATION_FLAGS _get_MR_CAMERA_PREFAB();
    // Set static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS MR_CAMERA_PREFAB
    static void _set_MR_CAMERA_PREFAB(::LIV::SDK::Unity::INVALIDATION_FLAGS value);
    // static field const value: static public LIV.SDK.Unity.INVALIDATION_FLAGS EXCLUDE_BEHAVIOURS
    static constexpr const uint EXCLUDE_BEHAVIOURS = 8u;
    // Get static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS EXCLUDE_BEHAVIOURS
    static ::LIV::SDK::Unity::INVALIDATION_FLAGS _get_EXCLUDE_BEHAVIOURS();
    // Set static field: static public LIV.SDK.Unity.INVALIDATION_FLAGS EXCLUDE_BEHAVIOURS
    static void _set_EXCLUDE_BEHAVIOURS(::LIV::SDK::Unity::INVALIDATION_FLAGS value);
    // Get instance field reference: public System.UInt32 value__
    uint& dyn_value__();
  }; // LIV.SDK.Unity.INVALIDATION_FLAGS
  #pragma pack(pop)
  static check_size<sizeof(INVALIDATION_FLAGS), 0 + sizeof(uint)> __LIV_SDK_Unity_INVALIDATION_FLAGSSizeCheck;
  static_assert(sizeof(INVALIDATION_FLAGS) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
