// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.PlayableBehaviour
#include "UnityEngine/Playables/PlayableBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: FrameData
  struct FrameData;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: DisableColldiersBehaviour
  class DisableColldiersBehaviour;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::DisableColldiersBehaviour);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::DisableColldiersBehaviour*, "VROSC", "DisableColldiersBehaviour");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.DisableColldiersBehaviour
  // [TokenAttribute] Offset: FFFFFFFF
  class DisableColldiersBehaviour : public ::UnityEngine::Playables::PlayableBehaviour {
    public:
    public:
    // public System.Boolean Disable
    // Size: 0x1
    // Offset: 0x10
    bool Disable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Disable and: root
    char __padding0[0x7] = {};
    // private UnityEngine.GameObject _root
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* root;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Collider[] _colliders
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Collider*> colliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private System.Boolean[] _activeAtStart
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<bool> activeAtStart;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    public:
    // Get instance field reference: public System.Boolean Disable
    [[deprecated("Use field access instead!")]] bool& dyn_Disable();
    // Get instance field reference: private UnityEngine.GameObject _root
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__root();
    // Get instance field reference: private UnityEngine.Collider[] _colliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn__colliders();
    // Get instance field reference: private System.Boolean[] _activeAtStart
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn__activeAtStart();
    // public System.Void .ctor()
    // Offset: 0x8E4C8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DisableColldiersBehaviour* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::DisableColldiersBehaviour::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DisableColldiersBehaviour*, creationType>()));
    }
    // public System.Void Setup(UnityEngine.GameObject root)
    // Offset: 0x8E4A0C
    void Setup(::UnityEngine::GameObject* root);
    // public override System.Void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    // Offset: 0x8E4B1C
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    void ProcessFrame(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info, ::Il2CppObject* playerData);
  }; // VROSC.DisableColldiersBehaviour
  #pragma pack(pop)
  static check_size<sizeof(DisableColldiersBehaviour), 40 + sizeof(::ArrayW<bool>)> __VROSC_DisableColldiersBehaviourSizeCheck;
  static_assert(sizeof(DisableColldiersBehaviour) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::DisableColldiersBehaviour::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::DisableColldiersBehaviour::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DisableColldiersBehaviour::*)(::UnityEngine::GameObject*)>(&VROSC::DisableColldiersBehaviour::Setup)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DisableColldiersBehaviour*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root});
  }
};
// Writing MetadataGetter for method: VROSC::DisableColldiersBehaviour::ProcessFrame
// Il2CppName: ProcessFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DisableColldiersBehaviour::*)(::UnityEngine::Playables::Playable, ::UnityEngine::Playables::FrameData, ::Il2CppObject*)>(&VROSC::DisableColldiersBehaviour::ProcessFrame)> {
  static const MethodInfo* get() {
    static auto* playable = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "Playable")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "FrameData")->byval_arg;
    static auto* playerData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DisableColldiersBehaviour*), "ProcessFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playable, info, playerData});
  }
};
