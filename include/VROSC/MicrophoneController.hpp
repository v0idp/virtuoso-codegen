// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.ToolController
#include "VROSC/ToolController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Microphone
  class Microphone;
  // Forward declaring type: UISlider
  class UISlider;
  // Forward declaring type: UISlideToggle
  class UISlideToggle;
  // Forward declaring type: ControlPanelUI
  class ControlPanelUI;
  // Forward declaring type: InfoPanel
  class InfoPanel;
  // Forward declaring type: UISpinner
  class UISpinner;
  // Forward declaring type: UIButton
  class UIButton;
  // Forward declaring type: MicrophoneDeviceManager
  class MicrophoneDeviceManager;
  // Forward declaring type: MicrophoneDataController
  class MicrophoneDataController;
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: UserDataControllers
  class UserDataControllers;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: NatSuite::Devices
namespace NatSuite::Devices {
  // Forward declaring type: AudioDevice
  class AudioDevice;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: MicrophoneController
  class MicrophoneController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::MicrophoneController);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::MicrophoneController*, "VROSC", "MicrophoneController");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xF9
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.MicrophoneController
  // [TokenAttribute] Offset: FFFFFFFF
  class MicrophoneController : public ::VROSC::ToolController {
    public:
    public:
    // private VROSC.Microphone _microphone
    // Size: 0x8
    // Offset: 0x70
    ::VROSC::Microphone* microphone;
    // Field size check
    static_assert(sizeof(::VROSC::Microphone*) == 0x8);
    // private VROSC.UISlider _volumeSlider
    // Size: 0x8
    // Offset: 0x78
    ::VROSC::UISlider* volumeSlider;
    // Field size check
    static_assert(sizeof(::VROSC::UISlider*) == 0x8);
    // private VROSC.UISlider _reverbSlider
    // Size: 0x8
    // Offset: 0x80
    ::VROSC::UISlider* reverbSlider;
    // Field size check
    static_assert(sizeof(::VROSC::UISlider*) == 0x8);
    // private VROSC.UISlideToggle _proximityToggle
    // Size: 0x8
    // Offset: 0x88
    ::VROSC::UISlideToggle* proximityToggle;
    // Field size check
    static_assert(sizeof(::VROSC::UISlideToggle*) == 0x8);
    // private VROSC.UISlider _inputVisualizer
    // Size: 0x8
    // Offset: 0x90
    ::VROSC::UISlider* inputVisualizer;
    // Field size check
    static_assert(sizeof(::VROSC::UISlider*) == 0x8);
    // private UnityEngine.GameObject _peakWarning
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::GameObject* peakWarning;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private VROSC.ControlPanelUI _controlPanel
    // Size: 0x8
    // Offset: 0xA0
    ::VROSC::ControlPanelUI* controlPanel;
    // Field size check
    static_assert(sizeof(::VROSC::ControlPanelUI*) == 0x8);
    // protected VROSC.InfoPanel _infoPanel
    // Size: 0x8
    // Offset: 0xA8
    ::VROSC::InfoPanel* infoPanel;
    // Field size check
    static_assert(sizeof(::VROSC::InfoPanel*) == 0x8);
    // protected UnityEngine.GameObject _failedToInitializeText
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::GameObject* failedToInitializeText;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _pcOnlyObjects
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::GameObject* pcOnlyObjects;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private VROSC.UISpinner _inputSpinner
    // Size: 0x8
    // Offset: 0xC0
    ::VROSC::UISpinner* inputSpinner;
    // Field size check
    static_assert(sizeof(::VROSC::UISpinner*) == 0x8);
    // private VROSC.UISlider _latencySlider
    // Size: 0x8
    // Offset: 0xC8
    ::VROSC::UISlider* latencySlider;
    // Field size check
    static_assert(sizeof(::VROSC::UISlider*) == 0x8);
    // private VROSC.UIButton _resetLatencyButton
    // Size: 0x8
    // Offset: 0xD0
    ::VROSC::UIButton* resetLatencyButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.UISlideToggle _grabToActivateToggle
    // Size: 0x8
    // Offset: 0xD8
    ::VROSC::UISlideToggle* grabToActivateToggle;
    // Field size check
    static_assert(sizeof(::VROSC::UISlideToggle*) == 0x8);
    // private VROSC.UISlideToggle _previewReverbToggle
    // Size: 0x8
    // Offset: 0xE0
    ::VROSC::UISlideToggle* previewReverbToggle;
    // Field size check
    static_assert(sizeof(::VROSC::UISlideToggle*) == 0x8);
    // private VROSC.MicrophoneDeviceManager _microphoneDeviceManager
    // Size: 0x8
    // Offset: 0xE8
    ::VROSC::MicrophoneDeviceManager* microphoneDeviceManager;
    // Field size check
    static_assert(sizeof(::VROSC::MicrophoneDeviceManager*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,NatSuite.Devices.AudioDevice> _inputDevices
    // Size: 0x8
    // Offset: 0xF0
    ::System::Collections::Generic::Dictionary_2<::StringW, ::NatSuite::Devices::AudioDevice*>* inputDevices;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::NatSuite::Devices::AudioDevice*>*) == 0x8);
    // private System.Boolean _microphoneGrabbed
    // Size: 0x1
    // Offset: 0xF8
    bool microphoneGrabbed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static public System.String SelectedMicrophonePrefsString
    static constexpr const char* SelectedMicrophonePrefsString = "SelectedMicrophone";
    // Get static field: static public System.String SelectedMicrophonePrefsString
    static ::StringW _get_SelectedMicrophonePrefsString();
    // Set static field: static public System.String SelectedMicrophonePrefsString
    static void _set_SelectedMicrophonePrefsString(::StringW value);
    // static field const value: static public System.String LatencyCompensationPrefsString
    static constexpr const char* LatencyCompensationPrefsString = "LatencyCompensation";
    // Get static field: static public System.String LatencyCompensationPrefsString
    static ::StringW _get_LatencyCompensationPrefsString();
    // Set static field: static public System.String LatencyCompensationPrefsString
    static void _set_LatencyCompensationPrefsString(::StringW value);
    // Get instance field reference: private VROSC.Microphone _microphone
    [[deprecated]] ::VROSC::Microphone*& dyn__microphone();
    // Get instance field reference: private VROSC.UISlider _volumeSlider
    [[deprecated]] ::VROSC::UISlider*& dyn__volumeSlider();
    // Get instance field reference: private VROSC.UISlider _reverbSlider
    [[deprecated]] ::VROSC::UISlider*& dyn__reverbSlider();
    // Get instance field reference: private VROSC.UISlideToggle _proximityToggle
    [[deprecated]] ::VROSC::UISlideToggle*& dyn__proximityToggle();
    // Get instance field reference: private VROSC.UISlider _inputVisualizer
    [[deprecated]] ::VROSC::UISlider*& dyn__inputVisualizer();
    // Get instance field reference: private UnityEngine.GameObject _peakWarning
    [[deprecated]] ::UnityEngine::GameObject*& dyn__peakWarning();
    // Get instance field reference: private VROSC.ControlPanelUI _controlPanel
    [[deprecated]] ::VROSC::ControlPanelUI*& dyn__controlPanel();
    // Get instance field reference: protected VROSC.InfoPanel _infoPanel
    [[deprecated]] ::VROSC::InfoPanel*& dyn__infoPanel();
    // Get instance field reference: protected UnityEngine.GameObject _failedToInitializeText
    [[deprecated]] ::UnityEngine::GameObject*& dyn__failedToInitializeText();
    // Get instance field reference: private UnityEngine.GameObject _pcOnlyObjects
    [[deprecated]] ::UnityEngine::GameObject*& dyn__pcOnlyObjects();
    // Get instance field reference: private VROSC.UISpinner _inputSpinner
    [[deprecated]] ::VROSC::UISpinner*& dyn__inputSpinner();
    // Get instance field reference: private VROSC.UISlider _latencySlider
    [[deprecated]] ::VROSC::UISlider*& dyn__latencySlider();
    // Get instance field reference: private VROSC.UIButton _resetLatencyButton
    [[deprecated]] ::VROSC::UIButton*& dyn__resetLatencyButton();
    // Get instance field reference: private VROSC.UISlideToggle _grabToActivateToggle
    [[deprecated]] ::VROSC::UISlideToggle*& dyn__grabToActivateToggle();
    // Get instance field reference: private VROSC.UISlideToggle _previewReverbToggle
    [[deprecated]] ::VROSC::UISlideToggle*& dyn__previewReverbToggle();
    // Get instance field reference: private VROSC.MicrophoneDeviceManager _microphoneDeviceManager
    [[deprecated]] ::VROSC::MicrophoneDeviceManager*& dyn__microphoneDeviceManager();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,NatSuite.Devices.AudioDevice> _inputDevices
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<::StringW, ::NatSuite::Devices::AudioDevice*>*& dyn__inputDevices();
    // Get instance field reference: private System.Boolean _microphoneGrabbed
    [[deprecated]] bool& dyn__microphoneGrabbed();
    // private VROSC.MicrophoneDataController get_MicrophoneDataController()
    // Offset: 0xAC3A1C
    ::VROSC::MicrophoneDataController* get_MicrophoneDataController();
    // private System.Void PopulateInputDeviceList()
    // Offset: 0xAC42B0
    void PopulateInputDeviceList();
    // private System.Void InputSelectionChanged(System.Int32 selection)
    // Offset: 0xAC4740
    void InputSelectionChanged(int selection);
    // private System.Void VolumeChanged(System.Single newValue)
    // Offset: 0xAC4EF0
    void VolumeChanged(float newValue);
    // private System.Void ReverbChanged(System.Single newValue)
    // Offset: 0xAC4FAC
    void ReverbChanged(float newValue);
    // private System.Void LatencyCompensationChanged(System.Single newValue)
    // Offset: 0xAC508C
    void LatencyCompensationChanged(float newValue);
    // private System.Void ResetLatency()
    // Offset: 0xAC51DC
    void ResetLatency();
    // private System.Void ProximityToggled(VROSC.InputDevice device, System.Boolean state)
    // Offset: 0xAC420C
    void ProximityToggled(::VROSC::InputDevice* device, bool state);
    // private System.Void GrabToActivateToggled(VROSC.InputDevice device, System.Boolean state)
    // Offset: 0xAC53F8
    void GrabToActivateToggled(::VROSC::InputDevice* device, bool state);
    // private System.Void PreviewReverbToggled(VROSC.InputDevice device, System.Boolean state)
    // Offset: 0xAC55DC
    void PreviewReverbToggled(::VROSC::InputDevice* device, bool state);
    // private System.Void SaveUserPreferences()
    // Offset: 0xAC549C
    void SaveUserPreferences();
    // public System.Void EnableMicrophone(System.Boolean enable)
    // Offset: 0xAC3210
    void EnableMicrophone(bool enable);
    // public System.Void MicrophoneGrabbed(System.Boolean grabbed)
    // Offset: 0xAC34F0
    void MicrophoneGrabbed(bool grabbed);
    // public System.Void MicrophoneProximityChanged(System.Single distance)
    // Offset: 0xAC35D4
    void MicrophoneProximityChanged(float distance);
    // private System.Void UpdateInputVisualizer(System.Single value)
    // Offset: 0xAC5E48
    void UpdateInputVisualizer(float value);
    // private System.Void ShowPeakWarning()
    // Offset: 0xAC5E74
    void ShowPeakWarning();
    // private System.Void HidePeakWarning()
    // Offset: 0xAC41EC
    void HidePeakWarning();
    // public System.Void .ctor()
    // Offset: 0xAC5E94
    // Implemented from: VROSC.ToolController
    // Base method: System.Void ToolController::.ctor()
    // Base method: System.Void WidgetController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MicrophoneController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MicrophoneController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MicrophoneController*, creationType>()));
    }
    // public override System.Void Setup()
    // Offset: 0xAC3A98
    // Implemented from: VROSC.ToolController
    // Base method: System.Void ToolController::Setup()
    void Setup();
    // public override System.Void Toggle()
    // Offset: 0xAC42A8
    // Implemented from: VROSC.ToolController
    // Base method: System.Void ToolController::Toggle()
    void Toggle();
    // protected System.Void OnDestroy()
    // Offset: 0xAC4924
    // Implemented from: VROSC.ToolController
    // Base method: System.Void ToolController::OnDestroy()
    // Base method: System.Void WidgetController::OnDestroy()
    void OnDestroy();
    // protected override System.Void UserDataLoaded(VROSC.UserDataControllers user)
    // Offset: 0xAC59A4
    // Implemented from: VROSC.ToolController
    // Base method: System.Void ToolController::UserDataLoaded(VROSC.UserDataControllers user)
    void UserDataLoaded(::VROSC::UserDataControllers* user);
    // protected override System.Void SynthesizerSourceChanged(System.Boolean useMidi)
    // Offset: 0xAC5E30
    // Implemented from: VROSC.ToolController
    // Base method: System.Void ToolController::SynthesizerSourceChanged(System.Boolean useMidi)
    void SynthesizerSourceChanged(bool useMidi);
  }; // VROSC.MicrophoneController
  #pragma pack(pop)
  static check_size<sizeof(MicrophoneController), 248 + sizeof(bool)> __VROSC_MicrophoneControllerSizeCheck;
  static_assert(sizeof(MicrophoneController) == 0xF9);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::MicrophoneController::get_MicrophoneDataController
// Il2CppName: get_MicrophoneDataController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::MicrophoneDataController* (VROSC::MicrophoneController::*)()>(&VROSC::MicrophoneController::get_MicrophoneDataController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "get_MicrophoneDataController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::PopulateInputDeviceList
// Il2CppName: PopulateInputDeviceList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)()>(&VROSC::MicrophoneController::PopulateInputDeviceList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "PopulateInputDeviceList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::InputSelectionChanged
// Il2CppName: InputSelectionChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)(int)>(&VROSC::MicrophoneController::InputSelectionChanged)> {
  static const MethodInfo* get() {
    static auto* selection = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "InputSelectionChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selection});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::VolumeChanged
// Il2CppName: VolumeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)(float)>(&VROSC::MicrophoneController::VolumeChanged)> {
  static const MethodInfo* get() {
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "VolumeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newValue});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::ReverbChanged
// Il2CppName: ReverbChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)(float)>(&VROSC::MicrophoneController::ReverbChanged)> {
  static const MethodInfo* get() {
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "ReverbChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newValue});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::LatencyCompensationChanged
// Il2CppName: LatencyCompensationChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)(float)>(&VROSC::MicrophoneController::LatencyCompensationChanged)> {
  static const MethodInfo* get() {
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "LatencyCompensationChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newValue});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::ResetLatency
// Il2CppName: ResetLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)()>(&VROSC::MicrophoneController::ResetLatency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "ResetLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::ProximityToggled
// Il2CppName: ProximityToggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)(::VROSC::InputDevice*, bool)>(&VROSC::MicrophoneController::ProximityToggled)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "ProximityToggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, state});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::GrabToActivateToggled
// Il2CppName: GrabToActivateToggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)(::VROSC::InputDevice*, bool)>(&VROSC::MicrophoneController::GrabToActivateToggled)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "GrabToActivateToggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, state});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::PreviewReverbToggled
// Il2CppName: PreviewReverbToggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)(::VROSC::InputDevice*, bool)>(&VROSC::MicrophoneController::PreviewReverbToggled)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "PreviewReverbToggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, state});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::SaveUserPreferences
// Il2CppName: SaveUserPreferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)()>(&VROSC::MicrophoneController::SaveUserPreferences)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "SaveUserPreferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::EnableMicrophone
// Il2CppName: EnableMicrophone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)(bool)>(&VROSC::MicrophoneController::EnableMicrophone)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "EnableMicrophone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::MicrophoneGrabbed
// Il2CppName: MicrophoneGrabbed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)(bool)>(&VROSC::MicrophoneController::MicrophoneGrabbed)> {
  static const MethodInfo* get() {
    static auto* grabbed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "MicrophoneGrabbed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabbed});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::MicrophoneProximityChanged
// Il2CppName: MicrophoneProximityChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)(float)>(&VROSC::MicrophoneController::MicrophoneProximityChanged)> {
  static const MethodInfo* get() {
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "MicrophoneProximityChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{distance});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::UpdateInputVisualizer
// Il2CppName: UpdateInputVisualizer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)(float)>(&VROSC::MicrophoneController::UpdateInputVisualizer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "UpdateInputVisualizer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::ShowPeakWarning
// Il2CppName: ShowPeakWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)()>(&VROSC::MicrophoneController::ShowPeakWarning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "ShowPeakWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::HidePeakWarning
// Il2CppName: HidePeakWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)()>(&VROSC::MicrophoneController::HidePeakWarning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "HidePeakWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::MicrophoneController::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)()>(&VROSC::MicrophoneController::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::Toggle
// Il2CppName: Toggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)()>(&VROSC::MicrophoneController::Toggle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "Toggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)()>(&VROSC::MicrophoneController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::UserDataLoaded
// Il2CppName: UserDataLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)(::VROSC::UserDataControllers*)>(&VROSC::MicrophoneController::UserDataLoaded)> {
  static const MethodInfo* get() {
    static auto* user = &::il2cpp_utils::GetClassFromName("VROSC", "UserDataControllers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "UserDataLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{user});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneController::SynthesizerSourceChanged
// Il2CppName: SynthesizerSourceChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneController::*)(bool)>(&VROSC::MicrophoneController::SynthesizerSourceChanged)> {
  static const MethodInfo* get() {
    static auto* useMidi = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneController*), "SynthesizerSourceChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useMidi});
  }
};
