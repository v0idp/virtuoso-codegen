// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: SpectatorCameraUI
  class SpectatorCameraUI;
  // Forward declaring type: UIHoldButton
  class UIHoldButton;
  // Forward declaring type: UISlider
  class UISlider;
  // Forward declaring type: UISlideToggle
  class UISlideToggle;
  // Forward declaring type: UIButton
  class UIButton;
  // Forward declaring type: PassthroughManager
  class PassthroughManager;
  // Forward declaring type: UserDataControllers
  class UserDataControllers;
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: ClickData
  class ClickData;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: PreferencesPanelUI
  class PreferencesPanelUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::PreferencesPanelUI);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::PreferencesPanelUI*, "VROSC", "PreferencesPanelUI");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.PreferencesPanelUI
  // [TokenAttribute] Offset: FFFFFFFF
  class PreferencesPanelUI : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.SpectatorCameraUI _spectatorCameraUI
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::SpectatorCameraUI* spectatorCameraUI;
    // Field size check
    static_assert(sizeof(::VROSC::SpectatorCameraUI*) == 0x8);
    // private VROSC.UIHoldButton _resetAllButton
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::UIHoldButton* resetAllButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIHoldButton*) == 0x8);
    // private VROSC.UISlider _volumeSlider
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::UISlider* volumeSlider;
    // Field size check
    static_assert(sizeof(::VROSC::UISlider*) == 0x8);
    // private VROSC.UISlideToggle _audioWhenUnfocusedButton
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::UISlideToggle* audioWhenUnfocusedButton;
    // Field size check
    static_assert(sizeof(::VROSC::UISlideToggle*) == 0x8);
    // private VROSC.UISlideToggle _useClassicControls
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::UISlideToggle* useClassicControls;
    // Field size check
    static_assert(sizeof(::VROSC::UISlideToggle*) == 0x8);
    // private VROSC.UIButton _resetMalletsButton
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::UIButton* resetMalletsButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.UISlideToggle _autoDimLasersToggle
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::UISlideToggle* autoDimLasersToggle;
    // Field size check
    static_assert(sizeof(::VROSC::UISlideToggle*) == 0x8);
    // private System.Boolean _spectatorCameraEnabled
    // Size: 0x1
    // Offset: 0x50
    bool spectatorCameraEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: spectatorCameraEnabled and: passthroughManager
    char __padding7[0x7] = {};
    // private VROSC.PassthroughManager _passthroughManager
    // Size: 0x8
    // Offset: 0x58
    ::VROSC::PassthroughManager* passthroughManager;
    // Field size check
    static_assert(sizeof(::VROSC::PassthroughManager*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.SpectatorCameraUI _spectatorCameraUI
    [[deprecated("Use field access instead!")]] ::VROSC::SpectatorCameraUI*& dyn__spectatorCameraUI();
    // Get instance field reference: private VROSC.UIHoldButton _resetAllButton
    [[deprecated("Use field access instead!")]] ::VROSC::UIHoldButton*& dyn__resetAllButton();
    // Get instance field reference: private VROSC.UISlider _volumeSlider
    [[deprecated("Use field access instead!")]] ::VROSC::UISlider*& dyn__volumeSlider();
    // Get instance field reference: private VROSC.UISlideToggle _audioWhenUnfocusedButton
    [[deprecated("Use field access instead!")]] ::VROSC::UISlideToggle*& dyn__audioWhenUnfocusedButton();
    // Get instance field reference: private VROSC.UISlideToggle _useClassicControls
    [[deprecated("Use field access instead!")]] ::VROSC::UISlideToggle*& dyn__useClassicControls();
    // Get instance field reference: private VROSC.UIButton _resetMalletsButton
    [[deprecated("Use field access instead!")]] ::VROSC::UIButton*& dyn__resetMalletsButton();
    // Get instance field reference: private VROSC.UISlideToggle _autoDimLasersToggle
    [[deprecated("Use field access instead!")]] ::VROSC::UISlideToggle*& dyn__autoDimLasersToggle();
    // Get instance field reference: private System.Boolean _spectatorCameraEnabled
    [[deprecated("Use field access instead!")]] bool& dyn__spectatorCameraEnabled();
    // Get instance field reference: private VROSC.PassthroughManager _passthroughManager
    [[deprecated("Use field access instead!")]] ::VROSC::PassthroughManager*& dyn__passthroughManager();
    // public System.Boolean get_IsOpen()
    // Offset: 0xAE4648
    bool get_IsOpen();
    // public System.Void .ctor()
    // Offset: 0xAE5404
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PreferencesPanelUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PreferencesPanelUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PreferencesPanelUI*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0xAE466C
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0xAE4B70
    void OnDestroy();
    // private System.Void OnEnable()
    // Offset: 0xAE4EE0
    void OnEnable();
    // private System.Void UserDataLoaded(VROSC.UserDataControllers user)
    // Offset: 0xAE4F34
    void UserDataLoaded(::VROSC::UserDataControllers* user);
    // private System.Void SetVolume(System.Single volume)
    // Offset: 0xAE50AC
    void SetVolume(float volume);
    // public System.Void Open()
    // Offset: 0xAE5158
    void Open();
    // public System.Void Close()
    // Offset: 0xAE5180
    void Close();
    // private System.Void ResetAllButtonPressed()
    // Offset: 0xAE51A8
    void ResetAllButtonPressed();
    // private System.Void AudioWhenUnfocusedToggled(VROSC.InputDevice inputDevice, System.Boolean state)
    // Offset: 0xAE51AC
    void AudioWhenUnfocusedToggled(::VROSC::InputDevice* inputDevice, bool state);
    // private System.Void UseClassicControlsToggled(VROSC.InputDevice inputDevice, System.Boolean state)
    // Offset: 0xAE5214
    void UseClassicControlsToggled(::VROSC::InputDevice* inputDevice, bool state);
    // private System.Void ResetMalletsToDefault(VROSC.ClickData obj)
    // Offset: 0xAE527C
    void ResetMalletsToDefault(::VROSC::ClickData* obj);
    // private System.Void AutoDimLaserToggled(VROSC.InputDevice device, System.Boolean active)
    // Offset: 0xAE52D4
    void AutoDimLaserToggled(::VROSC::InputDevice* device, bool active);
    // private System.Void TogglePassthrough(VROSC.InputDevice device, System.Boolean active)
    // Offset: 0xAE5334
    void TogglePassthrough(::VROSC::InputDevice* device, bool active);
  }; // VROSC.PreferencesPanelUI
  #pragma pack(pop)
  static check_size<sizeof(PreferencesPanelUI), 88 + sizeof(::VROSC::PassthroughManager*)> __VROSC_PreferencesPanelUISizeCheck;
  static_assert(sizeof(PreferencesPanelUI) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::PreferencesPanelUI::get_IsOpen
// Il2CppName: get_IsOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::PreferencesPanelUI::*)()>(&VROSC::PreferencesPanelUI::get_IsOpen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreferencesPanelUI*), "get_IsOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PreferencesPanelUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::PreferencesPanelUI::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreferencesPanelUI::*)()>(&VROSC::PreferencesPanelUI::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreferencesPanelUI*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PreferencesPanelUI::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreferencesPanelUI::*)()>(&VROSC::PreferencesPanelUI::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreferencesPanelUI*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PreferencesPanelUI::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreferencesPanelUI::*)()>(&VROSC::PreferencesPanelUI::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreferencesPanelUI*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PreferencesPanelUI::UserDataLoaded
// Il2CppName: UserDataLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreferencesPanelUI::*)(::VROSC::UserDataControllers*)>(&VROSC::PreferencesPanelUI::UserDataLoaded)> {
  static const MethodInfo* get() {
    static auto* user = &::il2cpp_utils::GetClassFromName("VROSC", "UserDataControllers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreferencesPanelUI*), "UserDataLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{user});
  }
};
// Writing MetadataGetter for method: VROSC::PreferencesPanelUI::SetVolume
// Il2CppName: SetVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreferencesPanelUI::*)(float)>(&VROSC::PreferencesPanelUI::SetVolume)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreferencesPanelUI*), "SetVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: VROSC::PreferencesPanelUI::Open
// Il2CppName: Open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreferencesPanelUI::*)()>(&VROSC::PreferencesPanelUI::Open)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreferencesPanelUI*), "Open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PreferencesPanelUI::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreferencesPanelUI::*)()>(&VROSC::PreferencesPanelUI::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreferencesPanelUI*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PreferencesPanelUI::ResetAllButtonPressed
// Il2CppName: ResetAllButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreferencesPanelUI::*)()>(&VROSC::PreferencesPanelUI::ResetAllButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreferencesPanelUI*), "ResetAllButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PreferencesPanelUI::AudioWhenUnfocusedToggled
// Il2CppName: AudioWhenUnfocusedToggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreferencesPanelUI::*)(::VROSC::InputDevice*, bool)>(&VROSC::PreferencesPanelUI::AudioWhenUnfocusedToggled)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreferencesPanelUI*), "AudioWhenUnfocusedToggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice, state});
  }
};
// Writing MetadataGetter for method: VROSC::PreferencesPanelUI::UseClassicControlsToggled
// Il2CppName: UseClassicControlsToggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreferencesPanelUI::*)(::VROSC::InputDevice*, bool)>(&VROSC::PreferencesPanelUI::UseClassicControlsToggled)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreferencesPanelUI*), "UseClassicControlsToggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice, state});
  }
};
// Writing MetadataGetter for method: VROSC::PreferencesPanelUI::ResetMalletsToDefault
// Il2CppName: ResetMalletsToDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreferencesPanelUI::*)(::VROSC::ClickData*)>(&VROSC::PreferencesPanelUI::ResetMalletsToDefault)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("VROSC", "ClickData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreferencesPanelUI*), "ResetMalletsToDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: VROSC::PreferencesPanelUI::AutoDimLaserToggled
// Il2CppName: AutoDimLaserToggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreferencesPanelUI::*)(::VROSC::InputDevice*, bool)>(&VROSC::PreferencesPanelUI::AutoDimLaserToggled)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreferencesPanelUI*), "AutoDimLaserToggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, active});
  }
};
// Writing MetadataGetter for method: VROSC::PreferencesPanelUI::TogglePassthrough
// Il2CppName: TogglePassthrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreferencesPanelUI::*)(::VROSC::InputDevice*, bool)>(&VROSC::PreferencesPanelUI::TogglePassthrough)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreferencesPanelUI*), "TogglePassthrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, active});
  }
};
