// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.HandType
#include "VROSC/HandType.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: InputVisualizer
  class InputVisualizer;
  // Forward declaring type: PredictiveHitter
  class PredictiveHitter;
  // Forward declaring type: KeyHitter
  class KeyHitter;
  // Forward declaring type: HighlightControllerComponents
  class HighlightControllerComponents;
  // Forward declaring type: TutorialInputDevice
  class TutorialInputDevice;
  // Forward declaring type: DashboardSpawnPoint
  class DashboardSpawnPoint;
  // Forward declaring type: ControllerRecordingUI
  class ControllerRecordingUI;
  // Forward declaring type: UIHelpers
  class UIHelpers;
  // Forward declaring type: InputSettings
  class InputSettings;
  // Forward declaring type: InputDeviceTransformData
  class InputDeviceTransformData;
  // Forward declaring type: VRPlayer
  class VRPlayer;
  // Forward declaring type: Mallet
  class Mallet;
}
// Forward declaring namespace: VROSC::UI
namespace VROSC::UI {
  // Forward declaring type: UIInputHand
  class UIInputHand;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: InputDevice
  class InputDevice;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::InputDevice);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::InputDevice*, "VROSC", "InputDevice");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xD8
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.InputDevice
  // [TokenAttribute] Offset: FFFFFFFF
  class InputDevice : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::InputDevice::HeldInputNode
    class HeldInputNode;
    // Nested type: ::VROSC::InputDevice::HoveredInputNode
    class HoveredInputNode;
    public:
    // private VROSC.UI.UIInputHand _uIInput
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::UI::UIInputHand* uIInput;
    // Field size check
    static_assert(sizeof(::VROSC::UI::UIInputHand*) == 0x8);
    // private VROSC.InputVisualizer _inputVisualizer
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::InputVisualizer* inputVisualizer;
    // Field size check
    static_assert(sizeof(::VROSC::InputVisualizer*) == 0x8);
    // private UnityEngine.Transform _centerPoint
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* centerPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private VROSC.PredictiveHitter _predictiveHitter
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::PredictiveHitter* predictiveHitter;
    // Field size check
    static_assert(sizeof(::VROSC::PredictiveHitter*) == 0x8);
    // private VROSC.KeyHitter _keyBoardHitter
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::KeyHitter* keyBoardHitter;
    // Field size check
    static_assert(sizeof(::VROSC::KeyHitter*) == 0x8);
    // private VROSC.HighlightControllerComponents _highLight
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::HighlightControllerComponents* highLight;
    // Field size check
    static_assert(sizeof(::VROSC::HighlightControllerComponents*) == 0x8);
    // private VROSC.TutorialInputDevice _tutorial
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::TutorialInputDevice* tutorial;
    // Field size check
    static_assert(sizeof(::VROSC::TutorialInputDevice*) == 0x8);
    // private VROSC.DashboardSpawnPoint _dashboardSpawnPoint
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::DashboardSpawnPoint* dashboardSpawnPoint;
    // Field size check
    static_assert(sizeof(::VROSC::DashboardSpawnPoint*) == 0x8);
    // private VROSC.ControllerRecordingUI _recordingUI
    // Size: 0x8
    // Offset: 0x58
    ::VROSC::ControllerRecordingUI* recordingUI;
    // Field size check
    static_assert(sizeof(::VROSC::ControllerRecordingUI*) == 0x8);
    // private VROSC.UIHelpers <UIHelpers>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    ::VROSC::UIHelpers* UIHelpers;
    // Field size check
    static_assert(sizeof(::VROSC::UIHelpers*) == 0x8);
    // private VROSC.InputSettings _inputSettings
    // Size: 0x8
    // Offset: 0x68
    ::VROSC::InputSettings* inputSettings;
    // Field size check
    static_assert(sizeof(::VROSC::InputSettings*) == 0x8);
    // private System.Int32 _overlapColliderAllocSize
    // Size: 0x4
    // Offset: 0x70
    int overlapColliderAllocSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _overlapSize
    // Size: 0x4
    // Offset: 0x74
    float overlapSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private VROSC.HandType <HandType>k__BackingField
    // Size: 0x4
    // Offset: 0x78
    ::VROSC::HandType HandType;
    // Field size check
    static_assert(sizeof(::VROSC::HandType) == 0x4);
    // Padding between fields: HandType and: TouchPointTransform
    char __padding13[0x4] = {};
    // private UnityEngine.Transform <TouchPointTransform>k__BackingField
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Transform* TouchPointTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform <InteractionPointTransform>k__BackingField
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Transform* InteractionPointTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Collider[] _hoveredColliders
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<::UnityEngine::Collider*> hoveredColliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.InputDevice/VROSC.HoveredInputNode> <HoveredInputNodes>k__BackingField
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::Generic::List_1<::VROSC::InputDevice::HoveredInputNode*>* HoveredInputNodes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::InputDevice::HoveredInputNode*>*) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.InputDevice/VROSC.HeldInputNode> <HeldInputNodes>k__BackingField
    // Size: 0x8
    // Offset: 0xA0
    ::System::Collections::Generic::List_1<::VROSC::InputDevice::HeldInputNode*>* HeldInputNodes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::InputDevice::HeldInputNode*>*) == 0x8);
    // private UnityEngine.Vector2 <StickPadValue>k__BackingField
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::Vector2 StickPadValue;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Single <IndexTriggerValue>k__BackingField
    // Size: 0x4
    // Offset: 0xB0
    float IndexTriggerValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <GripTriggerValue>k__BackingField
    // Size: 0x4
    // Offset: 0xB4
    float GripTriggerValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <IndexAsButtonPressed>k__BackingField
    // Size: 0x1
    // Offset: 0xB8
    bool IndexAsButtonPressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <LastIndexAsButtonPressed>k__BackingField
    // Size: 0x1
    // Offset: 0xB9
    bool LastIndexAsButtonPressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: LastIndexAsButtonPressed and: IndexAsButtonEdgeValue
    char __padding23[0x2] = {};
    // private System.Single <IndexAsButtonEdgeValue>k__BackingField
    // Size: 0x4
    // Offset: 0xBC
    float IndexAsButtonEdgeValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private VROSC.InputDevice <OtherController>k__BackingField
    // Size: 0x8
    // Offset: 0xC0
    ::VROSC::InputDevice* OtherController;
    // Field size check
    static_assert(sizeof(::VROSC::InputDevice*) == 0x8);
    // private System.Boolean <AnyButtonTriggering>k__BackingField
    // Size: 0x1
    // Offset: 0xC8
    bool AnyButtonTriggering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: AnyButtonTriggering and: Data
    char __padding26[0x7] = {};
    // private VROSC.InputDeviceTransformData <Data>k__BackingField
    // Size: 0x8
    // Offset: 0xD0
    ::VROSC::InputDeviceTransformData* Data;
    // Field size check
    static_assert(sizeof(::VROSC::InputDeviceTransformData*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single TriggerHairPinValue
    static constexpr const float TriggerHairPinValue = 0.01;
    // Get static field: static private System.Single TriggerHairPinValue
    static float _get_TriggerHairPinValue();
    // Set static field: static private System.Single TriggerHairPinValue
    static void _set_TriggerHairPinValue(float value);
    // static field const value: static private System.Single TriggerAlwaysPressedValue
    static constexpr const float TriggerAlwaysPressedValue = 0.5;
    // Get static field: static private System.Single TriggerAlwaysPressedValue
    static float _get_TriggerAlwaysPressedValue();
    // Set static field: static private System.Single TriggerAlwaysPressedValue
    static void _set_TriggerAlwaysPressedValue(float value);
    // Get static field: static private System.Boolean <GrabDisabled>k__BackingField
    static bool _get_$GrabDisabled$k__BackingField();
    // Set static field: static private System.Boolean <GrabDisabled>k__BackingField
    static void _set_$GrabDisabled$k__BackingField(bool value);
    // Get static field: static public System.Action`1<System.Boolean> GrabDisabledChanged
    static ::System::Action_1<bool>* _get_GrabDisabledChanged();
    // Set static field: static public System.Action`1<System.Boolean> GrabDisabledChanged
    static void _set_GrabDisabledChanged(::System::Action_1<bool>* value);
    // Get instance field reference: private VROSC.UI.UIInputHand _uIInput
    [[deprecated]] ::VROSC::UI::UIInputHand*& dyn__uIInput();
    // Get instance field reference: private VROSC.InputVisualizer _inputVisualizer
    [[deprecated]] ::VROSC::InputVisualizer*& dyn__inputVisualizer();
    // Get instance field reference: private UnityEngine.Transform _centerPoint
    [[deprecated]] ::UnityEngine::Transform*& dyn__centerPoint();
    // Get instance field reference: private VROSC.PredictiveHitter _predictiveHitter
    [[deprecated]] ::VROSC::PredictiveHitter*& dyn__predictiveHitter();
    // Get instance field reference: private VROSC.KeyHitter _keyBoardHitter
    [[deprecated]] ::VROSC::KeyHitter*& dyn__keyBoardHitter();
    // Get instance field reference: private VROSC.HighlightControllerComponents _highLight
    [[deprecated]] ::VROSC::HighlightControllerComponents*& dyn__highLight();
    // Get instance field reference: private VROSC.TutorialInputDevice _tutorial
    [[deprecated]] ::VROSC::TutorialInputDevice*& dyn__tutorial();
    // Get instance field reference: private VROSC.DashboardSpawnPoint _dashboardSpawnPoint
    [[deprecated]] ::VROSC::DashboardSpawnPoint*& dyn__dashboardSpawnPoint();
    // Get instance field reference: private VROSC.ControllerRecordingUI _recordingUI
    [[deprecated]] ::VROSC::ControllerRecordingUI*& dyn__recordingUI();
    // Get instance field reference: private VROSC.UIHelpers <UIHelpers>k__BackingField
    [[deprecated]] ::VROSC::UIHelpers*& dyn_$UIHelpers$k__BackingField();
    // Get instance field reference: private VROSC.InputSettings _inputSettings
    [[deprecated]] ::VROSC::InputSettings*& dyn__inputSettings();
    // Get instance field reference: private System.Int32 _overlapColliderAllocSize
    [[deprecated]] int& dyn__overlapColliderAllocSize();
    // Get instance field reference: private System.Single _overlapSize
    [[deprecated]] float& dyn__overlapSize();
    // Get instance field reference: private VROSC.HandType <HandType>k__BackingField
    [[deprecated]] ::VROSC::HandType& dyn_$HandType$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <TouchPointTransform>k__BackingField
    [[deprecated]] ::UnityEngine::Transform*& dyn_$TouchPointTransform$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <InteractionPointTransform>k__BackingField
    [[deprecated]] ::UnityEngine::Transform*& dyn_$InteractionPointTransform$k__BackingField();
    // Get instance field reference: private UnityEngine.Collider[] _hoveredColliders
    [[deprecated]] ::ArrayW<::UnityEngine::Collider*>& dyn__hoveredColliders();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.InputDevice/VROSC.HoveredInputNode> <HoveredInputNodes>k__BackingField
    [[deprecated]] ::System::Collections::Generic::List_1<::VROSC::InputDevice::HoveredInputNode*>*& dyn_$HoveredInputNodes$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.InputDevice/VROSC.HeldInputNode> <HeldInputNodes>k__BackingField
    [[deprecated]] ::System::Collections::Generic::List_1<::VROSC::InputDevice::HeldInputNode*>*& dyn_$HeldInputNodes$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector2 <StickPadValue>k__BackingField
    [[deprecated]] ::UnityEngine::Vector2& dyn_$StickPadValue$k__BackingField();
    // Get instance field reference: private System.Single <IndexTriggerValue>k__BackingField
    [[deprecated]] float& dyn_$IndexTriggerValue$k__BackingField();
    // Get instance field reference: private System.Single <GripTriggerValue>k__BackingField
    [[deprecated]] float& dyn_$GripTriggerValue$k__BackingField();
    // Get instance field reference: private System.Boolean <IndexAsButtonPressed>k__BackingField
    [[deprecated]] bool& dyn_$IndexAsButtonPressed$k__BackingField();
    // Get instance field reference: private System.Boolean <LastIndexAsButtonPressed>k__BackingField
    [[deprecated]] bool& dyn_$LastIndexAsButtonPressed$k__BackingField();
    // Get instance field reference: private System.Single <IndexAsButtonEdgeValue>k__BackingField
    [[deprecated]] float& dyn_$IndexAsButtonEdgeValue$k__BackingField();
    // Get instance field reference: private VROSC.InputDevice <OtherController>k__BackingField
    [[deprecated]] ::VROSC::InputDevice*& dyn_$OtherController$k__BackingField();
    // Get instance field reference: private System.Boolean <AnyButtonTriggering>k__BackingField
    [[deprecated]] bool& dyn_$AnyButtonTriggering$k__BackingField();
    // Get instance field reference: private VROSC.InputDeviceTransformData <Data>k__BackingField
    [[deprecated]] ::VROSC::InputDeviceTransformData*& dyn_$Data$k__BackingField();
    // public VROSC.UI.UIInputHand get_UIInputHand()
    // Offset: 0x1943A58
    ::VROSC::UI::UIInputHand* get_UIInputHand();
    // public VROSC.UIHelpers get_UIHelpers()
    // Offset: 0x1943A60
    ::VROSC::UIHelpers* get_UIHelpers();
    // private System.Void set_UIHelpers(VROSC.UIHelpers value)
    // Offset: 0x1943A68
    void set_UIHelpers(::VROSC::UIHelpers* value);
    // public VROSC.HighlightControllerComponents get_HighLighting()
    // Offset: 0x1943A70
    ::VROSC::HighlightControllerComponents* get_HighLighting();
    // public VROSC.TutorialInputDevice get_Tutorial()
    // Offset: 0x1943A78
    ::VROSC::TutorialInputDevice* get_Tutorial();
    // public VROSC.DashboardSpawnPoint get_DashboardSpawnPoint()
    // Offset: 0x1943A80
    ::VROSC::DashboardSpawnPoint* get_DashboardSpawnPoint();
    // public VROSC.ControllerRecordingUI get_RecordingUI()
    // Offset: 0x1943A88
    ::VROSC::ControllerRecordingUI* get_RecordingUI();
    // public UnityEngine.Transform get_InteractionPoint()
    // Offset: 0x1943A90
    ::UnityEngine::Transform* get_InteractionPoint();
    // public UnityEngine.Transform get_RayPoint()
    // Offset: 0x1943AAC
    ::UnityEngine::Transform* get_RayPoint();
    // static public System.Boolean get_GrabDisabled()
    // Offset: 0x1943AC8
    static bool get_GrabDisabled();
    // static private System.Void set_GrabDisabled(System.Boolean value)
    // Offset: 0x1943B14
    static void set_GrabDisabled(bool value);
    // public VROSC.HandType get_HandType()
    // Offset: 0x1943B70
    ::VROSC::HandType get_HandType();
    // private System.Void set_HandType(VROSC.HandType value)
    // Offset: 0x1943B68
    void set_HandType(::VROSC::HandType value);
    // public UnityEngine.Transform get_TouchPointTransform()
    // Offset: 0x1943B80
    ::UnityEngine::Transform* get_TouchPointTransform();
    // private System.Void set_TouchPointTransform(UnityEngine.Transform value)
    // Offset: 0x1943B78
    void set_TouchPointTransform(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_TrackedHandTransform()
    // Offset: 0x1943B88
    ::UnityEngine::Transform* get_TrackedHandTransform();
    // public UnityEngine.Transform get_InteractionPointTransform()
    // Offset: 0x1943B98
    ::UnityEngine::Transform* get_InteractionPointTransform();
    // private System.Void set_InteractionPointTransform(UnityEngine.Transform value)
    // Offset: 0x1943B90
    void set_InteractionPointTransform(::UnityEngine::Transform* value);
    // public System.Collections.Generic.List`1<VROSC.InputDevice/VROSC.HoveredInputNode> get_HoveredInputNodes()
    // Offset: 0x1943BA8
    ::System::Collections::Generic::List_1<::VROSC::InputDevice::HoveredInputNode*>* get_HoveredInputNodes();
    // private System.Void set_HoveredInputNodes(System.Collections.Generic.List`1<VROSC.InputDevice/VROSC.HoveredInputNode> value)
    // Offset: 0x1943BA0
    void set_HoveredInputNodes(::System::Collections::Generic::List_1<::VROSC::InputDevice::HoveredInputNode*>* value);
    // public System.Collections.Generic.List`1<VROSC.InputDevice/VROSC.HeldInputNode> get_HeldInputNodes()
    // Offset: 0x1943BB8
    ::System::Collections::Generic::List_1<::VROSC::InputDevice::HeldInputNode*>* get_HeldInputNodes();
    // private System.Void set_HeldInputNodes(System.Collections.Generic.List`1<VROSC.InputDevice/VROSC.HeldInputNode> value)
    // Offset: 0x1943BB0
    void set_HeldInputNodes(::System::Collections::Generic::List_1<::VROSC::InputDevice::HeldInputNode*>* value);
    // public UnityEngine.Vector2 get_StickPadValue()
    // Offset: 0x1943BC8
    ::UnityEngine::Vector2 get_StickPadValue();
    // private System.Void set_StickPadValue(UnityEngine.Vector2 value)
    // Offset: 0x1943BC0
    void set_StickPadValue(::UnityEngine::Vector2 value);
    // public System.Single get_IndexTriggerValue()
    // Offset: 0x1943BD8
    float get_IndexTriggerValue();
    // private System.Void set_IndexTriggerValue(System.Single value)
    // Offset: 0x1943BD0
    void set_IndexTriggerValue(float value);
    // public System.Single get_GripTriggerValue()
    // Offset: 0x1943BE8
    float get_GripTriggerValue();
    // private System.Void set_GripTriggerValue(System.Single value)
    // Offset: 0x1943BE0
    void set_GripTriggerValue(float value);
    // public System.Boolean get_IndexAsButtonPressed()
    // Offset: 0x1943BFC
    bool get_IndexAsButtonPressed();
    // private System.Void set_IndexAsButtonPressed(System.Boolean value)
    // Offset: 0x1943BF0
    void set_IndexAsButtonPressed(bool value);
    // public System.Boolean get_LastIndexAsButtonPressed()
    // Offset: 0x1943C10
    bool get_LastIndexAsButtonPressed();
    // private System.Void set_LastIndexAsButtonPressed(System.Boolean value)
    // Offset: 0x1943C04
    void set_LastIndexAsButtonPressed(bool value);
    // public System.Single get_IndexAsButtonEdgeValue()
    // Offset: 0x1943C20
    float get_IndexAsButtonEdgeValue();
    // private System.Void set_IndexAsButtonEdgeValue(System.Single value)
    // Offset: 0x1943C18
    void set_IndexAsButtonEdgeValue(float value);
    // public VROSC.InputDevice get_OtherController()
    // Offset: 0x1943C30
    ::VROSC::InputDevice* get_OtherController();
    // private System.Void set_OtherController(VROSC.InputDevice value)
    // Offset: 0x1943C28
    void set_OtherController(::VROSC::InputDevice* value);
    // public System.Boolean get_AnyButtonTriggering()
    // Offset: 0x1943C44
    bool get_AnyButtonTriggering();
    // public System.Void set_AnyButtonTriggering(System.Boolean value)
    // Offset: 0x1943C38
    void set_AnyButtonTriggering(bool value);
    // public VROSC.InputDeviceTransformData get_Data()
    // Offset: 0x1943C54
    ::VROSC::InputDeviceTransformData* get_Data();
    // private System.Void set_Data(VROSC.InputDeviceTransformData value)
    // Offset: 0x1943C4C
    void set_Data(::VROSC::InputDeviceTransformData* value);
    // public System.Void Setup(VROSC.VRPlayer player, VROSC.InputSettings inputSettings, VROSC.InputDevice other, VROSC.HandType handtype, VROSC.UIHelpers uiHelpers)
    // Offset: 0x1943C5C
    void Setup(::VROSC::VRPlayer* player, ::VROSC::InputSettings* inputSettings, ::VROSC::InputDevice* other, ::VROSC::HandType handtype, ::VROSC::UIHelpers* uiHelpers);
    // public System.Void UpdateDevice()
    // Offset: 0x1944038
    void UpdateDevice();
    // private System.Void UpdateButtonValues()
    // Offset: 0x1944078
    void UpdateButtonValues();
    // private System.Void UpdateInputNodes()
    // Offset: 0x19442A4
    void UpdateInputNodes();
    // private System.Boolean CheckForTouchedNodes()
    // Offset: 0x194445C
    bool CheckForTouchedNodes();
    // public System.Void SetMalletActive(System.Boolean enabled, VROSC.Mallet mallet, System.Boolean endOfAnimation)
    // Offset: 0x1945330
    void SetMalletActive(bool enabled, ::VROSC::Mallet* mallet, bool endOfAnimation);
    // System.Void SetKeyHittersActive(System.Boolean active)
    // Offset: 0x1943FF0
    void SetKeyHittersActive(bool active);
    // public System.Boolean ShouldHoveredNodesDisableGrab()
    // Offset: 0x1945374
    bool ShouldHoveredNodesDisableGrab();
    // static public System.Void DisableGrab(System.Boolean disable)
    // Offset: 0x19454BC
    static void DisableGrab(bool disable);
    // public System.Void .ctor()
    // Offset: 0x194559C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputDevice* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::InputDevice::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputDevice*, creationType>()));
    }
  }; // VROSC.InputDevice
  #pragma pack(pop)
  static check_size<sizeof(InputDevice), 208 + sizeof(::VROSC::InputDeviceTransformData*)> __VROSC_InputDeviceSizeCheck;
  static_assert(sizeof(InputDevice) == 0xD8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::InputDevice::get_UIInputHand
// Il2CppName: get_UIInputHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::UI::UIInputHand* (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_UIInputHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_UIInputHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_UIHelpers
// Il2CppName: get_UIHelpers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::UIHelpers* (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_UIHelpers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_UIHelpers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::set_UIHelpers
// Il2CppName: set_UIHelpers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)(::VROSC::UIHelpers*)>(&VROSC::InputDevice::set_UIHelpers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "UIHelpers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "set_UIHelpers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_HighLighting
// Il2CppName: get_HighLighting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::HighlightControllerComponents* (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_HighLighting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_HighLighting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_Tutorial
// Il2CppName: get_Tutorial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::TutorialInputDevice* (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_Tutorial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_Tutorial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_DashboardSpawnPoint
// Il2CppName: get_DashboardSpawnPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::DashboardSpawnPoint* (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_DashboardSpawnPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_DashboardSpawnPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_RecordingUI
// Il2CppName: get_RecordingUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::ControllerRecordingUI* (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_RecordingUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_RecordingUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_InteractionPoint
// Il2CppName: get_InteractionPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_InteractionPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_InteractionPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_RayPoint
// Il2CppName: get_RayPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_RayPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_RayPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_GrabDisabled
// Il2CppName: get_GrabDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&VROSC::InputDevice::get_GrabDisabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_GrabDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::set_GrabDisabled
// Il2CppName: set_GrabDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&VROSC::InputDevice::set_GrabDisabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "set_GrabDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_HandType
// Il2CppName: get_HandType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::HandType (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_HandType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_HandType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::set_HandType
// Il2CppName: set_HandType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)(::VROSC::HandType)>(&VROSC::InputDevice::set_HandType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "set_HandType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_TouchPointTransform
// Il2CppName: get_TouchPointTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_TouchPointTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_TouchPointTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::set_TouchPointTransform
// Il2CppName: set_TouchPointTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)(::UnityEngine::Transform*)>(&VROSC::InputDevice::set_TouchPointTransform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "set_TouchPointTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_TrackedHandTransform
// Il2CppName: get_TrackedHandTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_TrackedHandTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_TrackedHandTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_InteractionPointTransform
// Il2CppName: get_InteractionPointTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_InteractionPointTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_InteractionPointTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::set_InteractionPointTransform
// Il2CppName: set_InteractionPointTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)(::UnityEngine::Transform*)>(&VROSC::InputDevice::set_InteractionPointTransform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "set_InteractionPointTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_HoveredInputNodes
// Il2CppName: get_HoveredInputNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::VROSC::InputDevice::HoveredInputNode*>* (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_HoveredInputNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_HoveredInputNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::set_HoveredInputNodes
// Il2CppName: set_HoveredInputNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)(::System::Collections::Generic::List_1<::VROSC::InputDevice::HoveredInputNode*>*)>(&VROSC::InputDevice::set_HoveredInputNodes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "InputDevice/HoveredInputNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "set_HoveredInputNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_HeldInputNodes
// Il2CppName: get_HeldInputNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::VROSC::InputDevice::HeldInputNode*>* (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_HeldInputNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_HeldInputNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::set_HeldInputNodes
// Il2CppName: set_HeldInputNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)(::System::Collections::Generic::List_1<::VROSC::InputDevice::HeldInputNode*>*)>(&VROSC::InputDevice::set_HeldInputNodes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "InputDevice/HeldInputNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "set_HeldInputNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_StickPadValue
// Il2CppName: get_StickPadValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_StickPadValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_StickPadValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::set_StickPadValue
// Il2CppName: set_StickPadValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)(::UnityEngine::Vector2)>(&VROSC::InputDevice::set_StickPadValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "set_StickPadValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_IndexTriggerValue
// Il2CppName: get_IndexTriggerValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_IndexTriggerValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_IndexTriggerValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::set_IndexTriggerValue
// Il2CppName: set_IndexTriggerValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)(float)>(&VROSC::InputDevice::set_IndexTriggerValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "set_IndexTriggerValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_GripTriggerValue
// Il2CppName: get_GripTriggerValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_GripTriggerValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_GripTriggerValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::set_GripTriggerValue
// Il2CppName: set_GripTriggerValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)(float)>(&VROSC::InputDevice::set_GripTriggerValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "set_GripTriggerValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_IndexAsButtonPressed
// Il2CppName: get_IndexAsButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_IndexAsButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_IndexAsButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::set_IndexAsButtonPressed
// Il2CppName: set_IndexAsButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)(bool)>(&VROSC::InputDevice::set_IndexAsButtonPressed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "set_IndexAsButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_LastIndexAsButtonPressed
// Il2CppName: get_LastIndexAsButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_LastIndexAsButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_LastIndexAsButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::set_LastIndexAsButtonPressed
// Il2CppName: set_LastIndexAsButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)(bool)>(&VROSC::InputDevice::set_LastIndexAsButtonPressed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "set_LastIndexAsButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_IndexAsButtonEdgeValue
// Il2CppName: get_IndexAsButtonEdgeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_IndexAsButtonEdgeValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_IndexAsButtonEdgeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::set_IndexAsButtonEdgeValue
// Il2CppName: set_IndexAsButtonEdgeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)(float)>(&VROSC::InputDevice::set_IndexAsButtonEdgeValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "set_IndexAsButtonEdgeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_OtherController
// Il2CppName: get_OtherController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::InputDevice* (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_OtherController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_OtherController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::set_OtherController
// Il2CppName: set_OtherController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)(::VROSC::InputDevice*)>(&VROSC::InputDevice::set_OtherController)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "set_OtherController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_AnyButtonTriggering
// Il2CppName: get_AnyButtonTriggering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_AnyButtonTriggering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_AnyButtonTriggering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::set_AnyButtonTriggering
// Il2CppName: set_AnyButtonTriggering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)(bool)>(&VROSC::InputDevice::set_AnyButtonTriggering)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "set_AnyButtonTriggering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::get_Data
// Il2CppName: get_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::InputDeviceTransformData* (VROSC::InputDevice::*)()>(&VROSC::InputDevice::get_Data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "get_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::set_Data
// Il2CppName: set_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)(::VROSC::InputDeviceTransformData*)>(&VROSC::InputDevice::set_Data)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "InputDeviceTransformData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "set_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)(::VROSC::VRPlayer*, ::VROSC::InputSettings*, ::VROSC::InputDevice*, ::VROSC::HandType, ::VROSC::UIHelpers*)>(&VROSC::InputDevice::Setup)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("VROSC", "VRPlayer")->byval_arg;
    static auto* inputSettings = &::il2cpp_utils::GetClassFromName("VROSC", "InputSettings")->byval_arg;
    static auto* other = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* handtype = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    static auto* uiHelpers = &::il2cpp_utils::GetClassFromName("VROSC", "UIHelpers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, inputSettings, other, handtype, uiHelpers});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::UpdateDevice
// Il2CppName: UpdateDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)()>(&VROSC::InputDevice::UpdateDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "UpdateDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::UpdateButtonValues
// Il2CppName: UpdateButtonValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)()>(&VROSC::InputDevice::UpdateButtonValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "UpdateButtonValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::UpdateInputNodes
// Il2CppName: UpdateInputNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)()>(&VROSC::InputDevice::UpdateInputNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "UpdateInputNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::CheckForTouchedNodes
// Il2CppName: CheckForTouchedNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::InputDevice::*)()>(&VROSC::InputDevice::CheckForTouchedNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "CheckForTouchedNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::SetMalletActive
// Il2CppName: SetMalletActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)(bool, ::VROSC::Mallet*, bool)>(&VROSC::InputDevice::SetMalletActive)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* mallet = &::il2cpp_utils::GetClassFromName("VROSC", "Mallet")->byval_arg;
    static auto* endOfAnimation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "SetMalletActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled, mallet, endOfAnimation});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::SetKeyHittersActive
// Il2CppName: SetKeyHittersActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDevice::*)(bool)>(&VROSC::InputDevice::SetKeyHittersActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "SetKeyHittersActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::ShouldHoveredNodesDisableGrab
// Il2CppName: ShouldHoveredNodesDisableGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::InputDevice::*)()>(&VROSC::InputDevice::ShouldHoveredNodesDisableGrab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "ShouldHoveredNodesDisableGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::DisableGrab
// Il2CppName: DisableGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&VROSC::InputDevice::DisableGrab)> {
  static const MethodInfo* get() {
    static auto* disable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDevice*), "DisableGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disable});
  }
};
// Writing MetadataGetter for method: VROSC::InputDevice::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
