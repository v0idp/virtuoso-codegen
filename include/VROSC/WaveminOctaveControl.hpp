// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: IntNode
  class IntNode;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: WaveminOctaveControl
  class WaveminOctaveControl;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::WaveminOctaveControl);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::WaveminOctaveControl*, "VROSC", "WaveminOctaveControl");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.WaveminOctaveControl
  // [TokenAttribute] Offset: FFFFFFFF
  class WaveminOctaveControl : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.IntNode _octave
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::IntNode* octave;
    // Field size check
    static_assert(sizeof(::VROSC::IntNode*) == 0x8);
    // private VROSC.IntNode _note
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::IntNode* note;
    // Field size check
    static_assert(sizeof(::VROSC::IntNode*) == 0x8);
    // private System.Int32 _lastNoteValue
    // Size: 0x4
    // Offset: 0x28
    int lastNoteValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _lastOctaveValue
    // Size: 0x4
    // Offset: 0x2C
    int lastOctaveValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.IntNode _octave
    [[deprecated("Use field access instead!")]] ::VROSC::IntNode*& dyn__octave();
    // Get instance field reference: private VROSC.IntNode _note
    [[deprecated("Use field access instead!")]] ::VROSC::IntNode*& dyn__note();
    // Get instance field reference: private System.Int32 _lastNoteValue
    [[deprecated("Use field access instead!")]] int& dyn__lastNoteValue();
    // Get instance field reference: private System.Int32 _lastOctaveValue
    [[deprecated("Use field access instead!")]] int& dyn__lastOctaveValue();
    // public System.Void .ctor()
    // Offset: 0x950B28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaveminOctaveControl* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::WaveminOctaveControl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaveminOctaveControl*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x950850
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x9509A0
    void OnDestroy();
    // private System.Void OctaveChanged(System.Int32 octave)
    // Offset: 0x950AD8
    void OctaveChanged(int octave);
    // private System.Void NoteChanged(System.Int32 note)
    // Offset: 0x950B20
    void NoteChanged(int note);
  }; // VROSC.WaveminOctaveControl
  #pragma pack(pop)
  static check_size<sizeof(WaveminOctaveControl), 44 + sizeof(int)> __VROSC_WaveminOctaveControlSizeCheck;
  static_assert(sizeof(WaveminOctaveControl) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::WaveminOctaveControl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::WaveminOctaveControl::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::WaveminOctaveControl::*)()>(&VROSC::WaveminOctaveControl::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::WaveminOctaveControl*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::WaveminOctaveControl::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::WaveminOctaveControl::*)()>(&VROSC::WaveminOctaveControl::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::WaveminOctaveControl*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::WaveminOctaveControl::OctaveChanged
// Il2CppName: OctaveChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::WaveminOctaveControl::*)(int)>(&VROSC::WaveminOctaveControl::OctaveChanged)> {
  static const MethodInfo* get() {
    static auto* octave = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::WaveminOctaveControl*), "OctaveChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{octave});
  }
};
// Writing MetadataGetter for method: VROSC::WaveminOctaveControl::NoteChanged
// Il2CppName: NoteChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::WaveminOctaveControl::*)(int)>(&VROSC::WaveminOctaveControl::NoteChanged)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::WaveminOctaveControl*), "NoteChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note});
  }
};
