// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.WidgetController
#include "VROSC/WidgetController.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::WidgetController::WidgetPositionalData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::WidgetController::WidgetPositionalData*, "VROSC", "WidgetController/WidgetPositionalData");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.WidgetController/VROSC.WidgetPositionalData
  // [TokenAttribute] Offset: FFFFFFFF
  class WidgetController::WidgetPositionalData : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Vector3 Size
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 Size;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 Center
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 Center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 SpawnPoint
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 SpawnPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public UnityEngine.Vector3 Size
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Size();
    // Get instance field reference: public UnityEngine.Vector3 Center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Center();
    // Get instance field reference: public UnityEngine.Vector3 SpawnPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_SpawnPoint();
    // public System.Void .ctor()
    // Offset: 0xE8A424
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WidgetController::WidgetPositionalData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::WidgetController::WidgetPositionalData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WidgetController::WidgetPositionalData*, creationType>()));
    }
    // public System.Boolean IsPointInside(UnityEngine.Transform transform, UnityEngine.Vector3 worldPosition)
    // Offset: 0xE8A3AC
    bool IsPointInside(::UnityEngine::Transform* transform, ::UnityEngine::Vector3 worldPosition);
  }; // VROSC.WidgetController/VROSC.WidgetPositionalData
  #pragma pack(pop)
  static check_size<sizeof(WidgetController::WidgetPositionalData), 40 + sizeof(::UnityEngine::Vector3)> __VROSC_WidgetController_WidgetPositionalDataSizeCheck;
  static_assert(sizeof(WidgetController::WidgetPositionalData) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::WidgetController::WidgetPositionalData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::WidgetController::WidgetPositionalData::IsPointInside
// Il2CppName: IsPointInside
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::WidgetController::WidgetPositionalData::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&VROSC::WidgetController::WidgetPositionalData::IsPointInside)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* worldPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::WidgetController::WidgetPositionalData*), "IsPointInside", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, worldPosition});
  }
};
