// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: MinMaxVector3
  class MinMaxVector3;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::MinMaxVector3);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::MinMaxVector3*, "VROSC", "MinMaxVector3");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.MinMaxVector3
  // [TokenAttribute] Offset: FFFFFFFF
  class MinMaxVector3 : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.Vector3 _min
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 min;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _max
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 max;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: private UnityEngine.Vector3 _min
    [[deprecated]] ::UnityEngine::Vector3& dyn__min();
    // Get instance field reference: private UnityEngine.Vector3 _max
    [[deprecated]] ::UnityEngine::Vector3& dyn__max();
    // public UnityEngine.Vector3 get_Min()
    // Offset: 0xAC8D9C
    ::UnityEngine::Vector3 get_Min();
    // public UnityEngine.Vector3 get_Max()
    // Offset: 0xAC8DA8
    ::UnityEngine::Vector3 get_Max();
    // public System.Void .ctor(UnityEngine.Vector3 min, UnityEngine.Vector3 max)
    // Offset: 0xAC8DB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MinMaxVector3* New_ctor(::UnityEngine::Vector3 min, ::UnityEngine::Vector3 max) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector3::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MinMaxVector3*, creationType>(min, max)));
    }
    // public UnityEngine.Vector3 Random(System.Boolean uniform)
    // Offset: 0xAC8E14
    ::UnityEngine::Vector3 Random(bool uniform);
    // public UnityEngine.Vector3 Lerp(System.Single amount, System.Boolean clamp)
    // Offset: 0xAC8E98
    ::UnityEngine::Vector3 Lerp(float amount, bool clamp);
  }; // VROSC.MinMaxVector3
  #pragma pack(pop)
  static check_size<sizeof(MinMaxVector3), 28 + sizeof(::UnityEngine::Vector3)> __VROSC_MinMaxVector3SizeCheck;
  static_assert(sizeof(MinMaxVector3) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::MinMaxVector3::get_Min
// Il2CppName: get_Min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::MinMaxVector3::*)()>(&VROSC::MinMaxVector3::get_Min)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MinMaxVector3*), "get_Min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MinMaxVector3::get_Max
// Il2CppName: get_Max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::MinMaxVector3::*)()>(&VROSC::MinMaxVector3::get_Max)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MinMaxVector3*), "get_Max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MinMaxVector3::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::MinMaxVector3::Random
// Il2CppName: Random
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::MinMaxVector3::*)(bool)>(&VROSC::MinMaxVector3::Random)> {
  static const MethodInfo* get() {
    static auto* uniform = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MinMaxVector3*), "Random", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uniform});
  }
};
// Writing MetadataGetter for method: VROSC::MinMaxVector3::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::MinMaxVector3::*)(float, bool)>(&VROSC::MinMaxVector3::Lerp)> {
  static const MethodInfo* get() {
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* clamp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MinMaxVector3*), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{amount, clamp});
  }
};
