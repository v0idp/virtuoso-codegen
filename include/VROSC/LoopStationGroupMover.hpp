// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopStation
  class LoopStation;
  // Forward declaring type: LoopStationGroup
  class LoopStationGroup;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopStationGroupMover
  class LoopStationGroupMover;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::LoopStationGroupMover);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LoopStationGroupMover*, "VROSC", "LoopStationGroupMover");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.LoopStationGroupMover
  // [TokenAttribute] Offset: FFFFFFFF
  class LoopStationGroupMover : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::LoopStationGroupMover::$MoveGroupFlow$d__10
    class $MoveGroupFlow$d__10;
    public:
    // private System.Single _moveDuration
    // Size: 0x4
    // Offset: 0x18
    float moveDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: moveDuration and: moveCurve
    char __padding0[0x4] = {};
    // private UnityEngine.AnimationCurve _moveCurve
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AnimationCurve* moveCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single _shortMoveDistance
    // Size: 0x4
    // Offset: 0x28
    float shortMoveDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _shortMoveDuration
    // Size: 0x4
    // Offset: 0x2C
    float shortMoveDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _moveOutDistance
    // Size: 0x4
    // Offset: 0x30
    float moveOutDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: moveOutDistance and: zCurve
    char __padding4[0x4] = {};
    // private UnityEngine.AnimationCurve _zCurve
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AnimationCurve* zCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private VROSC.LoopStation _loopStation
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::LoopStation* loopStation;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStation*) == 0x8);
    // private VROSC.LoopStationGroup _group
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::LoopStationGroup* group;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationGroup*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single _moveDuration
    [[deprecated("Use field access instead!")]] float& dyn__moveDuration();
    // Get instance field reference: private UnityEngine.AnimationCurve _moveCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__moveCurve();
    // Get instance field reference: private System.Single _shortMoveDistance
    [[deprecated("Use field access instead!")]] float& dyn__shortMoveDistance();
    // Get instance field reference: private System.Single _shortMoveDuration
    [[deprecated("Use field access instead!")]] float& dyn__shortMoveDuration();
    // Get instance field reference: private System.Single _moveOutDistance
    [[deprecated("Use field access instead!")]] float& dyn__moveOutDistance();
    // Get instance field reference: private UnityEngine.AnimationCurve _zCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__zCurve();
    // Get instance field reference: private VROSC.LoopStation _loopStation
    [[deprecated("Use field access instead!")]] ::VROSC::LoopStation*& dyn__loopStation();
    // Get instance field reference: private VROSC.LoopStationGroup _group
    [[deprecated("Use field access instead!")]] ::VROSC::LoopStationGroup*& dyn__group();
    // public System.Void .ctor()
    // Offset: 0x1970454
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoopStationGroupMover* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::LoopStationGroupMover::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoopStationGroupMover*, creationType>()));
    }
    // public System.Void Setup(VROSC.LoopStationGroup group, VROSC.LoopStation loopStation)
    // Offset: 0x196E888
    void Setup(::VROSC::LoopStationGroup* group, ::VROSC::LoopStation* loopStation);
    // public System.Void MoveGroup(UnityEngine.Vector3 from, UnityEngine.Vector3 to, System.Single zmultiplier)
    // Offset: 0x1970234
    void MoveGroup(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to, float zmultiplier);
    // private System.Collections.IEnumerator MoveGroupFlow(UnityEngine.Vector3 from, UnityEngine.Vector3 to, System.Single zmultiplier)
    // Offset: 0x1970320
    ::System::Collections::IEnumerator* MoveGroupFlow(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to, float zmultiplier);
    // private System.Void MoveComplete(UnityEngine.Vector3 position)
    // Offset: 0x19703D8
    void MoveComplete(::UnityEngine::Vector3 position);
  }; // VROSC.LoopStationGroupMover
  #pragma pack(pop)
  static check_size<sizeof(LoopStationGroupMover), 72 + sizeof(::VROSC::LoopStationGroup*)> __VROSC_LoopStationGroupMoverSizeCheck;
  static_assert(sizeof(LoopStationGroupMover) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::LoopStationGroupMover::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::LoopStationGroupMover::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupMover::*)(::VROSC::LoopStationGroup*, ::VROSC::LoopStation*)>(&VROSC::LoopStationGroupMover::Setup)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStationGroup")->byval_arg;
    static auto* loopStation = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupMover*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group, loopStation});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupMover::MoveGroup
// Il2CppName: MoveGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupMover::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&VROSC::LoopStationGroupMover::MoveGroup)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* zmultiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupMover*), "MoveGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, zmultiplier});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupMover::MoveGroupFlow
// Il2CppName: MoveGroupFlow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (VROSC::LoopStationGroupMover::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&VROSC::LoopStationGroupMover::MoveGroupFlow)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* zmultiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupMover*), "MoveGroupFlow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, zmultiplier});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupMover::MoveComplete
// Il2CppName: MoveComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupMover::*)(::UnityEngine::Vector3)>(&VROSC::LoopStationGroupMover::MoveComplete)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupMover*), "MoveComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
