// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.Error
#include "VROSC/Error.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: FileWriter
  class FileWriter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::FileWriter);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::FileWriter*, "VROSC", "FileWriter");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.FileWriter
  // [TokenAttribute] Offset: FFFFFFFF
  class FileWriter : public ::Il2CppObject {
    public:
    // Nested type: ::VROSC::FileWriter::$GetTextFile$d__14
    struct $GetTextFile$d__14;
    // Nested type: ::VROSC::FileWriter::$SavePatchToFile$d__15
    struct $SavePatchToFile$d__15;
    // Nested type: ::VROSC::FileWriter::$LoadPatchFile$d__16
    struct $LoadPatchFile$d__16;
    // Nested type: ::VROSC::FileWriter::$$c__DisplayClass17_0
    class $$c__DisplayClass17_0;
    // Nested type: ::VROSC::FileWriter::$SaveSampleToFile$d__17
    struct $SaveSampleToFile$d__17;
    // Nested type: ::VROSC::FileWriter::$LoadSampleFile$d__18
    struct $LoadSampleFile$d__18;
    // Nested type: ::VROSC::FileWriter::$$c__DisplayClass19_0
    class $$c__DisplayClass19_0;
    // Nested type: ::VROSC::FileWriter::$ExportTapeRecording$d__19
    struct $ExportTapeRecording$d__19;
    // Nested type: ::VROSC::FileWriter::$$c__DisplayClass20_0
    class $$c__DisplayClass20_0;
    // Nested type: ::VROSC::FileWriter::$SaveAudioToFile$d__20
    struct $SaveAudioToFile$d__20;
    // Nested type: ::VROSC::FileWriter::$$c__DisplayClass21_0
    class $$c__DisplayClass21_0;
    // Nested type: ::VROSC::FileWriter::$LoadAudioFromFile$d__21
    struct $LoadAudioFromFile$d__21;
    // Nested type: ::VROSC::FileWriter::$$c__DisplayClass22_0
    class $$c__DisplayClass22_0;
    // Nested type: ::VROSC::FileWriter::$SavePreviewToFile$d__22
    struct $SavePreviewToFile$d__22;
    // Nested type: ::VROSC::FileWriter::$$c__DisplayClass23_0
    class $$c__DisplayClass23_0;
    // Nested type: ::VROSC::FileWriter::$LoadPreviewFromFile$d__23
    struct $LoadPreviewFromFile$d__23;
    // Nested type: ::VROSC::FileWriter::$GetAudioClip$d__29
    struct $GetAudioClip$d__29;
    // static field const value: static public System.String PreviewFilePrefix
    static constexpr const char* PreviewFilePrefix = "Preview_";
    // Get static field: static public System.String PreviewFilePrefix
    static ::StringW _get_PreviewFilePrefix();
    // Set static field: static public System.String PreviewFilePrefix
    static void _set_PreviewFilePrefix(::StringW value);
    // static field const value: static public System.String PreviewsFolderName
    static constexpr const char* PreviewsFolderName = "Previews";
    // Get static field: static public System.String PreviewsFolderName
    static ::StringW _get_PreviewsFolderName();
    // Set static field: static public System.String PreviewsFolderName
    static void _set_PreviewsFolderName(::StringW value);
    // static field const value: static public System.String PatchesFolderName
    static constexpr const char* PatchesFolderName = "Patches";
    // Get static field: static public System.String PatchesFolderName
    static ::StringW _get_PatchesFolderName();
    // Set static field: static public System.String PatchesFolderName
    static void _set_PatchesFolderName(::StringW value);
    // static field const value: static public System.String SamplesFolderName
    static constexpr const char* SamplesFolderName = "Samples";
    // Get static field: static public System.String SamplesFolderName
    static ::StringW _get_SamplesFolderName();
    // Set static field: static public System.String SamplesFolderName
    static void _set_SamplesFolderName(::StringW value);
    // static field const value: static public System.String TapeRecordingsFolderName
    static constexpr const char* TapeRecordingsFolderName = "TapeRecordings";
    // Get static field: static public System.String TapeRecordingsFolderName
    static ::StringW _get_TapeRecordingsFolderName();
    // Set static field: static public System.String TapeRecordingsFolderName
    static void _set_TapeRecordingsFolderName(::StringW value);
    // static field const value: static public System.String AudioDataFolderName
    static constexpr const char* AudioDataFolderName = "Clips";
    // Get static field: static public System.String AudioDataFolderName
    static ::StringW _get_AudioDataFolderName();
    // Set static field: static public System.String AudioDataFolderName
    static void _set_AudioDataFolderName(::StringW value);
    // static field const value: static public System.String PatchesFileExtension
    static constexpr const char* PatchesFileExtension = "helm";
    // Get static field: static public System.String PatchesFileExtension
    static ::StringW _get_PatchesFileExtension();
    // Set static field: static public System.String PatchesFileExtension
    static void _set_PatchesFileExtension(::StringW value);
    // static field const value: static public System.String AudioDataFileExtension
    static constexpr const char* AudioDataFileExtension = "wav";
    // Get static field: static public System.String AudioDataFileExtension
    static ::StringW _get_AudioDataFileExtension();
    // Set static field: static public System.String AudioDataFileExtension
    static void _set_AudioDataFileExtension(::StringW value);
    // static field const value: static public System.String SamplesFileExtension
    static constexpr const char* SamplesFileExtension = "wav";
    // Get static field: static public System.String SamplesFileExtension
    static ::StringW _get_SamplesFileExtension();
    // Set static field: static public System.String SamplesFileExtension
    static void _set_SamplesFileExtension(::StringW value);
    // static field const value: static public System.String SaveFileExtension
    static constexpr const char* SaveFileExtension = "zip";
    // Get static field: static public System.String SaveFileExtension
    static ::StringW _get_SaveFileExtension();
    // Set static field: static public System.String SaveFileExtension
    static void _set_SaveFileExtension(::StringW value);
    // static field const value: static public System.String BackupSuffix
    static constexpr const char* BackupSuffix = "_bak";
    // Get static field: static public System.String BackupSuffix
    static ::StringW _get_BackupSuffix();
    // Set static field: static public System.String BackupSuffix
    static void _set_BackupSuffix(::StringW value);
    // Get static field: static private UnityEngine.AudioClip _cachedClip
    static ::UnityEngine::AudioClip* _get__cachedClip();
    // Set static field: static private UnityEngine.AudioClip _cachedClip
    static void _set__cachedClip(::UnityEngine::AudioClip* value);
    // static public System.Void RemoveAllPatchesFiles(System.String folderName, System.Action onSuccess, System.Action`1<VROSC.Error> onFailure)
    // Offset: 0x8F20A4
    static void RemoveAllPatchesFiles(::StringW folderName, ::System::Action* onSuccess, ::System::Action_1<::VROSC::Error>* onFailure);
    // static public System.Void RemoveAllSamplesFiles(System.String folderName, System.Action onSuccess, System.Action`1<VROSC.Error> onFailure)
    // Offset: 0x8F229C
    static void RemoveAllSamplesFiles(::StringW folderName, ::System::Action* onSuccess, ::System::Action_1<::VROSC::Error>* onFailure);
    // static private System.Threading.Tasks.Task GetTextFile(System.String filePath, System.Action`1<System.String> onSuccess, System.Action`1<VROSC.Error> onFailure)
    // Offset: 0x8F2494
    static ::System::Threading::Tasks::Task* GetTextFile(::StringW filePath, ::System::Action_1<::StringW>* onSuccess, ::System::Action_1<::VROSC::Error>* onFailure);
    // static public System.Threading.Tasks.Task SavePatchToFile(System.String folderName, System.String fileName, System.String text, System.Action onSuccess, System.Action`1<VROSC.Error> onFailure)
    // Offset: 0x8F25B8
    static ::System::Threading::Tasks::Task* SavePatchToFile(::StringW folderName, ::StringW fileName, ::StringW text, ::System::Action* onSuccess, ::System::Action_1<::VROSC::Error>* onFailure);
    // static public System.Threading.Tasks.Task LoadPatchFile(System.String folderName, System.String fileName, System.Action`1<System.String> onSuccess, System.Action`1<VROSC.Error> onFailure)
    // Offset: 0x8F26F0
    static ::System::Threading::Tasks::Task* LoadPatchFile(::StringW folderName, ::StringW fileName, ::System::Action_1<::StringW>* onSuccess, ::System::Action_1<::VROSC::Error>* onFailure);
    // static public System.Threading.Tasks.Task SaveSampleToFile(System.String folderName, System.String fileName, UnityEngine.AudioClip audioClip, System.Action onSuccess, System.Action`1<VROSC.Error> onFailure)
    // Offset: 0x8F281C
    static ::System::Threading::Tasks::Task* SaveSampleToFile(::StringW folderName, ::StringW fileName, ::UnityEngine::AudioClip* audioClip, ::System::Action* onSuccess, ::System::Action_1<::VROSC::Error>* onFailure);
    // static public System.Threading.Tasks.Task LoadSampleFile(System.String folderName, System.String fileName, System.Action`1<UnityEngine.AudioClip> onSuccess, System.Action`1<VROSC.Error> onFailure)
    // Offset: 0x8F2954
    static ::System::Threading::Tasks::Task* LoadSampleFile(::StringW folderName, ::StringW fileName, ::System::Action_1<::UnityEngine::AudioClip*>* onSuccess, ::System::Action_1<::VROSC::Error>* onFailure);
    // static public System.Void ExportTapeRecording(System.String songName, System.Single[] samples, System.Int32 startIndex, System.Int32 endIndex, System.Int32 sampleRate, System.Int32 channels, System.Action onSuccess, System.Action`1<VROSC.Error> onFailure)
    // Offset: 0x8F2A80
    static void ExportTapeRecording(::StringW songName, ::ArrayW<float> samples, int startIndex, int endIndex, int sampleRate, int channels, ::System::Action* onSuccess, ::System::Action_1<::VROSC::Error>* onFailure);
    // static public System.Threading.Tasks.Task SaveAudioToFile(System.String folderName, System.String fileName, System.Single[] samples, System.Int32 sampleRate, System.Int32 channels, System.Single normalizeMultiplier, System.Int32 startIndex, System.Int32 endIndex, System.Action onSuccess, System.Action`1<VROSC.Error> onFailure)
    // Offset: 0x8F2B84
    static ::System::Threading::Tasks::Task* SaveAudioToFile(::StringW folderName, ::StringW fileName, ::ArrayW<float> samples, int sampleRate, int channels, float normalizeMultiplier, int startIndex, int endIndex, ::System::Action* onSuccess, ::System::Action_1<::VROSC::Error>* onFailure);
    // static public System.Threading.Tasks.Task LoadAudioFromFile(System.String folderName, System.String fileName, System.Action`2<System.Single[],System.Int32> onSuccess, System.Action`1<VROSC.Error> onFailure, System.Single[] loadIntoArray)
    // Offset: 0x8F2CF4
    static ::System::Threading::Tasks::Task* LoadAudioFromFile(::StringW folderName, ::StringW fileName, ::System::Action_2<::ArrayW<float>, int>* onSuccess, ::System::Action_1<::VROSC::Error>* onFailure, ::ArrayW<float> loadIntoArray);
    // static public System.Threading.Tasks.Task SavePreviewToFile(System.String fileName, System.Single[] samples, System.Int32 sampleRate, System.Int32 channels, System.Single normalizeMultiplier, System.Int32 startIndex, System.Int32 endIndex, System.Action onSuccess, System.Action`1<VROSC.Error> onFailure)
    // Offset: 0x8F2E2C
    static ::System::Threading::Tasks::Task* SavePreviewToFile(::StringW fileName, ::ArrayW<float> samples, int sampleRate, int channels, float normalizeMultiplier, int startIndex, int endIndex, ::System::Action* onSuccess, ::System::Action_1<::VROSC::Error>* onFailure);
    // static public System.Threading.Tasks.Task LoadPreviewFromFile(System.String fileName, System.Boolean isTemp, System.Boolean isOgg, System.Action`1<UnityEngine.AudioClip> onSuccess, System.Action`1<VROSC.Error> onFailure)
    // Offset: 0x8F2F94
    static ::System::Threading::Tasks::Task* LoadPreviewFromFile(::StringW fileName, bool isTemp, bool isOgg, ::System::Action_1<::UnityEngine::AudioClip*>* onSuccess, ::System::Action_1<::VROSC::Error>* onFailure);
    // static public System.Boolean DoesPreviewExist(System.String fileName, System.Boolean isTemp, System.Boolean isOgg)
    // Offset: 0x8F30DC
    static bool DoesPreviewExist(::StringW fileName, bool isTemp, bool isOgg);
    // static public System.Void DeleteSave(System.String filename, System.Action`1<System.String> onSuccess, System.Action`2<System.String,VROSC.Error> onFailure)
    // Offset: 0x8F31FC
    static void DeleteSave(::StringW filename, ::System::Action_1<::StringW>* onSuccess, ::System::Action_2<::StringW, ::VROSC::Error>* onFailure);
    // static public System.Void DeletePreview(System.String filename, System.Boolean isTemp, System.Action onSuccess, System.Action`1<VROSC.Error> onFailure)
    // Offset: 0x8F3434
    static void DeletePreview(::StringW filename, bool isTemp, ::System::Action* onSuccess, ::System::Action_1<::VROSC::Error>* onFailure);
    // static public System.Void MoveSessionToSavesFolder(System.String filename)
    // Offset: 0x8F35CC
    static void MoveSessionToSavesFolder(::StringW filename);
    // static public System.Void MovePreviewToSavesFolder(System.String filename)
    // Offset: 0x8F37EC
    static void MovePreviewToSavesFolder(::StringW filename);
    // static private System.Threading.Tasks.Task GetAudioClip(System.String filePath, System.Action`1<UnityEngine.AudioClip> onSuccess, System.Action`1<VROSC.Error> onFailure)
    // Offset: 0x8F397C
    static ::System::Threading::Tasks::Task* GetAudioClip(::StringW filePath, ::System::Action_1<::UnityEngine::AudioClip*>* onSuccess, ::System::Action_1<::VROSC::Error>* onFailure);
    // static private System.String GetSaveFilePath(System.String filename, System.Boolean isTemp)
    // Offset: 0x8F3368
    static ::StringW GetSaveFilePath(::StringW filename, bool isTemp);
    // static private System.String GetPreviewsFolderPath(System.Boolean isTemp)
    // Offset: 0x8F3AA0
    static ::StringW GetPreviewsFolderPath(bool isTemp);
    // static private System.String GetPreviewsFilePath(System.String filename, System.Boolean isTemp, System.Boolean useOgg)
    // Offset: 0x8F30FC
    static ::StringW GetPreviewsFilePath(::StringW filename, bool isTemp, bool useOgg);
    // static private System.String GetPatchesFolderPath(System.String folderName)
    // Offset: 0x8F220C
    static ::StringW GetPatchesFolderPath(::StringW folderName);
    // static private System.String GetPatchesFilePath(System.String folderName, System.String filename)
    // Offset: 0x8F3B34
    static ::StringW GetPatchesFilePath(::StringW folderName, ::StringW filename);
    // static private System.String GetSamplesFolderPath(System.String folderName)
    // Offset: 0x8F2404
    static ::StringW GetSamplesFolderPath(::StringW folderName);
    // static private System.String GetSamplesFilePath(System.String folderName, System.String filename)
    // Offset: 0x8F3BFC
    static ::StringW GetSamplesFilePath(::StringW folderName, ::StringW filename);
    // static private System.String GetAudioDataFolderPath(System.String folderName)
    // Offset: 0x8F3CC4
    static ::StringW GetAudioDataFolderPath(::StringW folderName);
    // static private System.String GetAudioDataFilePath(System.String folderName, System.String filename)
    // Offset: 0x8F3D54
    static ::StringW GetAudioDataFilePath(::StringW folderName, ::StringW filename);
    // public System.Void .ctor()
    // Offset: 0x8F3E1C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FileWriter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::FileWriter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FileWriter*, creationType>()));
    }
  }; // VROSC.FileWriter
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::FileWriter::RemoveAllPatchesFiles
// Il2CppName: RemoveAllPatchesFiles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::System::Action*, ::System::Action_1<::VROSC::Error>*)>(&VROSC::FileWriter::RemoveAllPatchesFiles)> {
  static const MethodInfo* get() {
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "RemoveAllPatchesFiles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{folderName, onSuccess, onFailure});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::RemoveAllSamplesFiles
// Il2CppName: RemoveAllSamplesFiles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::System::Action*, ::System::Action_1<::VROSC::Error>*)>(&VROSC::FileWriter::RemoveAllSamplesFiles)> {
  static const MethodInfo* get() {
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "RemoveAllSamplesFiles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{folderName, onSuccess, onFailure});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::GetTextFile
// Il2CppName: GetTextFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (*)(::StringW, ::System::Action_1<::StringW>*, ::System::Action_1<::VROSC::Error>*)>(&VROSC::FileWriter::GetTextFile)> {
  static const MethodInfo* get() {
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "GetTextFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filePath, onSuccess, onFailure});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::SavePatchToFile
// Il2CppName: SavePatchToFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (*)(::StringW, ::StringW, ::StringW, ::System::Action*, ::System::Action_1<::VROSC::Error>*)>(&VROSC::FileWriter::SavePatchToFile)> {
  static const MethodInfo* get() {
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "SavePatchToFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{folderName, fileName, text, onSuccess, onFailure});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::LoadPatchFile
// Il2CppName: LoadPatchFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (*)(::StringW, ::StringW, ::System::Action_1<::StringW>*, ::System::Action_1<::VROSC::Error>*)>(&VROSC::FileWriter::LoadPatchFile)> {
  static const MethodInfo* get() {
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "LoadPatchFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{folderName, fileName, onSuccess, onFailure});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::SaveSampleToFile
// Il2CppName: SaveSampleToFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (*)(::StringW, ::StringW, ::UnityEngine::AudioClip*, ::System::Action*, ::System::Action_1<::VROSC::Error>*)>(&VROSC::FileWriter::SaveSampleToFile)> {
  static const MethodInfo* get() {
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* audioClip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "SaveSampleToFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{folderName, fileName, audioClip, onSuccess, onFailure});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::LoadSampleFile
// Il2CppName: LoadSampleFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (*)(::StringW, ::StringW, ::System::Action_1<::UnityEngine::AudioClip*>*, ::System::Action_1<::VROSC::Error>*)>(&VROSC::FileWriter::LoadSampleFile)> {
  static const MethodInfo* get() {
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")})->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "LoadSampleFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{folderName, fileName, onSuccess, onFailure});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::ExportTapeRecording
// Il2CppName: ExportTapeRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::ArrayW<float>, int, int, int, int, ::System::Action*, ::System::Action_1<::VROSC::Error>*)>(&VROSC::FileWriter::ExportTapeRecording)> {
  static const MethodInfo* get() {
    static auto* songName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* samples = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sampleRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "ExportTapeRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{songName, samples, startIndex, endIndex, sampleRate, channels, onSuccess, onFailure});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::SaveAudioToFile
// Il2CppName: SaveAudioToFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (*)(::StringW, ::StringW, ::ArrayW<float>, int, int, float, int, int, ::System::Action*, ::System::Action_1<::VROSC::Error>*)>(&VROSC::FileWriter::SaveAudioToFile)> {
  static const MethodInfo* get() {
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* samples = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* sampleRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* normalizeMultiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "SaveAudioToFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{folderName, fileName, samples, sampleRate, channels, normalizeMultiplier, startIndex, endIndex, onSuccess, onFailure});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::LoadAudioFromFile
// Il2CppName: LoadAudioFromFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (*)(::StringW, ::StringW, ::System::Action_2<::ArrayW<float>, int>*, ::System::Action_1<::VROSC::Error>*, ::ArrayW<float>)>(&VROSC::FileWriter::LoadAudioFromFile)> {
  static const MethodInfo* get() {
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    static auto* loadIntoArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "LoadAudioFromFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{folderName, fileName, onSuccess, onFailure, loadIntoArray});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::SavePreviewToFile
// Il2CppName: SavePreviewToFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (*)(::StringW, ::ArrayW<float>, int, int, float, int, int, ::System::Action*, ::System::Action_1<::VROSC::Error>*)>(&VROSC::FileWriter::SavePreviewToFile)> {
  static const MethodInfo* get() {
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* samples = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* sampleRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* normalizeMultiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "SavePreviewToFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fileName, samples, sampleRate, channels, normalizeMultiplier, startIndex, endIndex, onSuccess, onFailure});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::LoadPreviewFromFile
// Il2CppName: LoadPreviewFromFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (*)(::StringW, bool, bool, ::System::Action_1<::UnityEngine::AudioClip*>*, ::System::Action_1<::VROSC::Error>*)>(&VROSC::FileWriter::LoadPreviewFromFile)> {
  static const MethodInfo* get() {
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isTemp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isOgg = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")})->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "LoadPreviewFromFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fileName, isTemp, isOgg, onSuccess, onFailure});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::DoesPreviewExist
// Il2CppName: DoesPreviewExist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, bool, bool)>(&VROSC::FileWriter::DoesPreviewExist)> {
  static const MethodInfo* get() {
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isTemp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isOgg = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "DoesPreviewExist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fileName, isTemp, isOgg});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::DeleteSave
// Il2CppName: DeleteSave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::System::Action_1<::StringW>*, ::System::Action_2<::StringW, ::VROSC::Error>*)>(&VROSC::FileWriter::DeleteSave)> {
  static const MethodInfo* get() {
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "DeleteSave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filename, onSuccess, onFailure});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::DeletePreview
// Il2CppName: DeletePreview
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, bool, ::System::Action*, ::System::Action_1<::VROSC::Error>*)>(&VROSC::FileWriter::DeletePreview)> {
  static const MethodInfo* get() {
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isTemp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "DeletePreview", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filename, isTemp, onSuccess, onFailure});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::MoveSessionToSavesFolder
// Il2CppName: MoveSessionToSavesFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&VROSC::FileWriter::MoveSessionToSavesFolder)> {
  static const MethodInfo* get() {
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "MoveSessionToSavesFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filename});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::MovePreviewToSavesFolder
// Il2CppName: MovePreviewToSavesFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&VROSC::FileWriter::MovePreviewToSavesFolder)> {
  static const MethodInfo* get() {
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "MovePreviewToSavesFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filename});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::GetAudioClip
// Il2CppName: GetAudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (*)(::StringW, ::System::Action_1<::UnityEngine::AudioClip*>*, ::System::Action_1<::VROSC::Error>*)>(&VROSC::FileWriter::GetAudioClip)> {
  static const MethodInfo* get() {
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")})->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "GetAudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filePath, onSuccess, onFailure});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::GetSaveFilePath
// Il2CppName: GetSaveFilePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, bool)>(&VROSC::FileWriter::GetSaveFilePath)> {
  static const MethodInfo* get() {
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isTemp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "GetSaveFilePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filename, isTemp});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::GetPreviewsFolderPath
// Il2CppName: GetPreviewsFolderPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(bool)>(&VROSC::FileWriter::GetPreviewsFolderPath)> {
  static const MethodInfo* get() {
    static auto* isTemp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "GetPreviewsFolderPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isTemp});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::GetPreviewsFilePath
// Il2CppName: GetPreviewsFilePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, bool, bool)>(&VROSC::FileWriter::GetPreviewsFilePath)> {
  static const MethodInfo* get() {
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isTemp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useOgg = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "GetPreviewsFilePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filename, isTemp, useOgg});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::GetPatchesFolderPath
// Il2CppName: GetPatchesFolderPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&VROSC::FileWriter::GetPatchesFolderPath)> {
  static const MethodInfo* get() {
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "GetPatchesFolderPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{folderName});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::GetPatchesFilePath
// Il2CppName: GetPatchesFilePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW)>(&VROSC::FileWriter::GetPatchesFilePath)> {
  static const MethodInfo* get() {
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "GetPatchesFilePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{folderName, filename});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::GetSamplesFolderPath
// Il2CppName: GetSamplesFolderPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&VROSC::FileWriter::GetSamplesFolderPath)> {
  static const MethodInfo* get() {
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "GetSamplesFolderPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{folderName});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::GetSamplesFilePath
// Il2CppName: GetSamplesFilePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW)>(&VROSC::FileWriter::GetSamplesFilePath)> {
  static const MethodInfo* get() {
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "GetSamplesFilePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{folderName, filename});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::GetAudioDataFolderPath
// Il2CppName: GetAudioDataFolderPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&VROSC::FileWriter::GetAudioDataFolderPath)> {
  static const MethodInfo* get() {
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "GetAudioDataFolderPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{folderName});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::GetAudioDataFilePath
// Il2CppName: GetAudioDataFilePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW)>(&VROSC::FileWriter::GetAudioDataFilePath)> {
  static const MethodInfo* get() {
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter*), "GetAudioDataFilePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{folderName, filename});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
