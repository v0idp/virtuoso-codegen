// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopPlayerRecordingState
  class LoopPlayerRecordingState;
  // Forward declaring type: Grabable
  class Grabable;
  // Forward declaring type: LoopPlaybackSettingsUI
  class LoopPlaybackSettingsUI;
  // Forward declaring type: LoopPlayButton
  class LoopPlayButton;
  // Forward declaring type: UIHoldButton
  class UIHoldButton;
  // Forward declaring type: LoopPlayerColorizer
  class LoopPlayerColorizer;
  // Forward declaring type: LoopVolumeController
  class LoopVolumeController;
  // Forward declaring type: UIButton
  class UIButton;
  // Forward declaring type: LoopStationLaunchpadHandler
  class LoopStationLaunchpadHandler;
  // Forward declaring type: LoopPlayer
  class LoopPlayer;
  // Forward declaring type: LoopStation
  class LoopStation;
  // Forward declaring type: LoopPlaybackConfig
  class LoopPlaybackConfig;
  // Forward declaring type: TransformDataController
  class TransformDataController;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopPlayerUI
  class LoopPlayerUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::LoopPlayerUI);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LoopPlayerUI*, "VROSC", "LoopPlayerUI");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.LoopPlayerUI
  // [TokenAttribute] Offset: FFFFFFFF
  class LoopPlayerUI : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::LoopPlayerUI::State
    struct State;
    public:
    // private TMPro.TextMeshPro _nameLabel
    // Size: 0x8
    // Offset: 0x18
    ::TMPro::TextMeshPro* nameLabel;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // [HeaderAttribute] Offset: 0x7846B4
    // private VROSC.LoopPlayerRecordingState _IsRecordingState
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::LoopPlayerRecordingState* IsRecordingState;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlayerRecordingState*) == 0x8);
    // private UnityEngine.GameObject _HasRecordingState
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* HasRecordingState;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private VROSC.Grabable _hoverCheck
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::Grabable* hoverCheck;
    // Field size check
    static_assert(sizeof(::VROSC::Grabable*) == 0x8);
    // private UnityEngine.GameObject _hoveringState
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* hoveringState;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private VROSC.LoopPlaybackSettingsUI _settingsMenu
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::LoopPlaybackSettingsUI* settingsMenu;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlaybackSettingsUI*) == 0x8);
    // [HeaderAttribute] Offset: 0x784740
    // private VROSC.LoopPlayButton _playButton
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::LoopPlayButton* playButton;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlayButton*) == 0x8);
    // private VROSC.UIHoldButton _deleteButton
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::UIHoldButton* deleteButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIHoldButton*) == 0x8);
    // private VROSC.LoopPlayerColorizer _playerColorizer
    // Size: 0x8
    // Offset: 0x58
    ::VROSC::LoopPlayerColorizer* playerColorizer;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlayerColorizer*) == 0x8);
    // private VROSC.LoopVolumeController _volumeController
    // Size: 0x8
    // Offset: 0x60
    ::VROSC::LoopVolumeController* volumeController;
    // Field size check
    static_assert(sizeof(::VROSC::LoopVolumeController*) == 0x8);
    // private VROSC.UIButton _renameButton
    // Size: 0x8
    // Offset: 0x68
    ::VROSC::UIButton* renameButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.LoopStationLaunchpadHandler _launchpadHandler
    // Size: 0x8
    // Offset: 0x70
    ::VROSC::LoopStationLaunchpadHandler* launchpadHandler;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationLaunchpadHandler*) == 0x8);
    // private System.String <DisplayName>k__BackingField
    // Size: 0x8
    // Offset: 0x78
    ::StringW DisplayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Action OnDeletePressed
    // Size: 0x8
    // Offset: 0x80
    ::System::Action* OnDeletePressed;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Action`1<System.String> OnRename
    // Size: 0x8
    // Offset: 0x88
    ::System::Action_1<::StringW>* OnRename;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // public System.Action`1<UnityEngine.Color> OnRecolor
    // Size: 0x8
    // Offset: 0x90
    ::System::Action_1<::UnityEngine::Color>* OnRecolor;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::Color>*) == 0x8);
    // private VROSC.LoopPlayer _loopPlayer
    // Size: 0x8
    // Offset: 0x98
    ::VROSC::LoopPlayer* loopPlayer;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlayer*) == 0x8);
    // private VROSC.LoopStation _loopStation
    // Size: 0x8
    // Offset: 0xA0
    ::VROSC::LoopStation* loopStation;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStation*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private TMPro.TextMeshPro _nameLabel
    [[deprecated]] ::TMPro::TextMeshPro*& dyn__nameLabel();
    // Get instance field reference: private VROSC.LoopPlayerRecordingState _IsRecordingState
    [[deprecated]] ::VROSC::LoopPlayerRecordingState*& dyn__IsRecordingState();
    // Get instance field reference: private UnityEngine.GameObject _HasRecordingState
    [[deprecated]] ::UnityEngine::GameObject*& dyn__HasRecordingState();
    // Get instance field reference: private VROSC.Grabable _hoverCheck
    [[deprecated]] ::VROSC::Grabable*& dyn__hoverCheck();
    // Get instance field reference: private UnityEngine.GameObject _hoveringState
    [[deprecated]] ::UnityEngine::GameObject*& dyn__hoveringState();
    // Get instance field reference: private VROSC.LoopPlaybackSettingsUI _settingsMenu
    [[deprecated]] ::VROSC::LoopPlaybackSettingsUI*& dyn__settingsMenu();
    // Get instance field reference: private VROSC.LoopPlayButton _playButton
    [[deprecated]] ::VROSC::LoopPlayButton*& dyn__playButton();
    // Get instance field reference: private VROSC.UIHoldButton _deleteButton
    [[deprecated]] ::VROSC::UIHoldButton*& dyn__deleteButton();
    // Get instance field reference: private VROSC.LoopPlayerColorizer _playerColorizer
    [[deprecated]] ::VROSC::LoopPlayerColorizer*& dyn__playerColorizer();
    // Get instance field reference: private VROSC.LoopVolumeController _volumeController
    [[deprecated]] ::VROSC::LoopVolumeController*& dyn__volumeController();
    // Get instance field reference: private VROSC.UIButton _renameButton
    [[deprecated]] ::VROSC::UIButton*& dyn__renameButton();
    // Get instance field reference: private VROSC.LoopStationLaunchpadHandler _launchpadHandler
    [[deprecated]] ::VROSC::LoopStationLaunchpadHandler*& dyn__launchpadHandler();
    // Get instance field reference: private System.String <DisplayName>k__BackingField
    [[deprecated]] ::StringW& dyn_$DisplayName$k__BackingField();
    // Get instance field reference: public System.Action OnDeletePressed
    [[deprecated]] ::System::Action*& dyn_OnDeletePressed();
    // Get instance field reference: public System.Action`1<System.String> OnRename
    [[deprecated]] ::System::Action_1<::StringW>*& dyn_OnRename();
    // Get instance field reference: public System.Action`1<UnityEngine.Color> OnRecolor
    [[deprecated]] ::System::Action_1<::UnityEngine::Color>*& dyn_OnRecolor();
    // Get instance field reference: private VROSC.LoopPlayer _loopPlayer
    [[deprecated]] ::VROSC::LoopPlayer*& dyn__loopPlayer();
    // Get instance field reference: private VROSC.LoopStation _loopStation
    [[deprecated]] ::VROSC::LoopStation*& dyn__loopStation();
    // public UnityEngine.Color get_MainColor()
    // Offset: 0x19BEA28
    ::UnityEngine::Color get_MainColor();
    // public System.String get_DisplayName()
    // Offset: 0x19BEA50
    ::StringW get_DisplayName();
    // private System.Void set_DisplayName(System.String value)
    // Offset: 0x19BEA48
    void set_DisplayName(::StringW value);
    // public VROSC.LoopVolumeController get_VolumeController()
    // Offset: 0x19BEA58
    ::VROSC::LoopVolumeController* get_VolumeController();
    // public VROSC.LoopPlayButton get_PlayButton()
    // Offset: 0x19BEA60
    ::VROSC::LoopPlayButton* get_PlayButton();
    // private System.Void Awake()
    // Offset: 0x19BEA68
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x19BEE70
    void OnDestroy();
    // private System.Void UpdateHovering(System.Boolean hovering)
    // Offset: 0x19BEDDC
    void UpdateHovering(bool hovering);
    // private System.Void SetState(VROSC.LoopPlayerUI/VROSC.State state)
    // Offset: 0x19BF1F0
    void SetState(::VROSC::LoopPlayerUI::State state);
    // public System.Void Setup(VROSC.LoopStation loopStation, VROSC.LoopPlayer loopPlayer, System.Boolean createdByRecorder, System.String displayName, VROSC.LoopPlaybackConfig config)
    // Offset: 0x19B9E58
    void Setup(::VROSC::LoopStation* loopStation, ::VROSC::LoopPlayer* loopPlayer, bool createdByRecorder, ::StringW displayName, ::VROSC::LoopPlaybackConfig* config);
    // public System.Void SetRecordingComplete(System.Boolean colorize)
    // Offset: 0x19BA294
    void SetRecordingComplete(bool colorize);
    // public System.Void SetRecordingText(System.String recordingtext)
    // Offset: 0x19BA488
    void SetRecordingText(::StringW recordingtext);
    // private System.Void DeleteFromButton()
    // Offset: 0x19BF23C
    void DeleteFromButton();
    // public System.Void ShowAsMuted(System.Boolean showAsMuted)
    // Offset: 0x19BC65C
    void ShowAsMuted(bool showAsMuted);
    // private System.Void RenameButtonPressed()
    // Offset: 0x19BF250
    void RenameButtonPressed();
    // private System.Void RanameComplete(System.String displayName)
    // Offset: 0x19BF424
    void RanameComplete(::StringW displayName);
    // public System.Void SetDisplayName(System.String displayName)
    // Offset: 0x19BAC5C
    void SetDisplayName(::StringW displayName);
    // public System.Void SetColor(UnityEngine.Color color)
    // Offset: 0x19BF4A0
    void SetColor(::UnityEngine::Color color);
    // private System.Void KeyboardClosed()
    // Offset: 0x19BF560
    void KeyboardClosed();
    // System.Void LoadLaunchPad(System.String padID, VROSC.TransformDataController transformData)
    // Offset: 0x19BF6E0
    void LoadLaunchPad(::StringW padID, ::VROSC::TransformDataController* transformData);
    // public System.Void .ctor()
    // Offset: 0x19BF6FC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoopPlayerUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::LoopPlayerUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoopPlayerUI*, creationType>()));
    }
  }; // VROSC.LoopPlayerUI
  #pragma pack(pop)
  static check_size<sizeof(LoopPlayerUI), 160 + sizeof(::VROSC::LoopStation*)> __VROSC_LoopPlayerUISizeCheck;
  static_assert(sizeof(LoopPlayerUI) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::get_MainColor
// Il2CppName: get_MainColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::LoopPlayerUI::*)()>(&VROSC::LoopPlayerUI::get_MainColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "get_MainColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::get_DisplayName
// Il2CppName: get_DisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::LoopPlayerUI::*)()>(&VROSC::LoopPlayerUI::get_DisplayName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "get_DisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::set_DisplayName
// Il2CppName: set_DisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerUI::*)(::StringW)>(&VROSC::LoopPlayerUI::set_DisplayName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "set_DisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::get_VolumeController
// Il2CppName: get_VolumeController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopVolumeController* (VROSC::LoopPlayerUI::*)()>(&VROSC::LoopPlayerUI::get_VolumeController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "get_VolumeController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::get_PlayButton
// Il2CppName: get_PlayButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlayButton* (VROSC::LoopPlayerUI::*)()>(&VROSC::LoopPlayerUI::get_PlayButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "get_PlayButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerUI::*)()>(&VROSC::LoopPlayerUI::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerUI::*)()>(&VROSC::LoopPlayerUI::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::UpdateHovering
// Il2CppName: UpdateHovering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerUI::*)(bool)>(&VROSC::LoopPlayerUI::UpdateHovering)> {
  static const MethodInfo* get() {
    static auto* hovering = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "UpdateHovering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hovering});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::SetState
// Il2CppName: SetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerUI::*)(::VROSC::LoopPlayerUI::State)>(&VROSC::LoopPlayerUI::SetState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayerUI/State")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "SetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerUI::*)(::VROSC::LoopStation*, ::VROSC::LoopPlayer*, bool, ::StringW, ::VROSC::LoopPlaybackConfig*)>(&VROSC::LoopPlayerUI::Setup)> {
  static const MethodInfo* get() {
    static auto* loopStation = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStation")->byval_arg;
    static auto* loopPlayer = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayer")->byval_arg;
    static auto* createdByRecorder = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* displayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* config = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlaybackConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopStation, loopPlayer, createdByRecorder, displayName, config});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::SetRecordingComplete
// Il2CppName: SetRecordingComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerUI::*)(bool)>(&VROSC::LoopPlayerUI::SetRecordingComplete)> {
  static const MethodInfo* get() {
    static auto* colorize = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "SetRecordingComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorize});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::SetRecordingText
// Il2CppName: SetRecordingText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerUI::*)(::StringW)>(&VROSC::LoopPlayerUI::SetRecordingText)> {
  static const MethodInfo* get() {
    static auto* recordingtext = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "SetRecordingText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recordingtext});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::DeleteFromButton
// Il2CppName: DeleteFromButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerUI::*)()>(&VROSC::LoopPlayerUI::DeleteFromButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "DeleteFromButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::ShowAsMuted
// Il2CppName: ShowAsMuted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerUI::*)(bool)>(&VROSC::LoopPlayerUI::ShowAsMuted)> {
  static const MethodInfo* get() {
    static auto* showAsMuted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "ShowAsMuted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{showAsMuted});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::RenameButtonPressed
// Il2CppName: RenameButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerUI::*)()>(&VROSC::LoopPlayerUI::RenameButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "RenameButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::RanameComplete
// Il2CppName: RanameComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerUI::*)(::StringW)>(&VROSC::LoopPlayerUI::RanameComplete)> {
  static const MethodInfo* get() {
    static auto* displayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "RanameComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayName});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::SetDisplayName
// Il2CppName: SetDisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerUI::*)(::StringW)>(&VROSC::LoopPlayerUI::SetDisplayName)> {
  static const MethodInfo* get() {
    static auto* displayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "SetDisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayName});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerUI::*)(::UnityEngine::Color)>(&VROSC::LoopPlayerUI::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::KeyboardClosed
// Il2CppName: KeyboardClosed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerUI::*)()>(&VROSC::LoopPlayerUI::KeyboardClosed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "KeyboardClosed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::LoadLaunchPad
// Il2CppName: LoadLaunchPad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerUI::*)(::StringW, ::VROSC::TransformDataController*)>(&VROSC::LoopPlayerUI::LoadLaunchPad)> {
  static const MethodInfo* get() {
    static auto* padID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* transformData = &::il2cpp_utils::GetClassFromName("VROSC", "TransformDataController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerUI*), "LoadLaunchPad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{padID, transformData});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
