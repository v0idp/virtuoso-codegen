// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: VROSC.Scale
#include "VROSC/Scale.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: NoteBoardNoteController
  class NoteBoardNoteController;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: NotefieldAnimationSettings
  class NotefieldAnimationSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::NotefieldAnimationSettings);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::NotefieldAnimationSettings*, "VROSC", "NotefieldAnimationSettings");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x6C
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.NotefieldAnimationSettings
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: 77FA04
  class NotefieldAnimationSettings : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::VROSC::NotefieldAnimationSettings::TimelineSettings
    class TimelineSettings;
    public:
    // [HeaderAttribute] Offset: 0x785F00
    // private UnityEngine.AnimationCurve _animationStartCurve
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AnimationCurve* animationStartCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve _animateionEndCurve
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AnimationCurve* animateionEndCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private VROSC.NotefieldAnimationSettings/VROSC.TimelineSettings _creation
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::NotefieldAnimationSettings::TimelineSettings* creation;
    // Field size check
    static_assert(sizeof(::VROSC::NotefieldAnimationSettings::TimelineSettings*) == 0x8);
    // private VROSC.NotefieldAnimationSettings/VROSC.TimelineSettings _destruction
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::NotefieldAnimationSettings::TimelineSettings* destruction;
    // Field size check
    static_assert(sizeof(::VROSC::NotefieldAnimationSettings::TimelineSettings*) == 0x8);
    // private UnityEngine.AnimationCurve _sizeCurve
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AnimationCurve* sizeCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve _positionDeviationCurve
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AnimationCurve* positionDeviationCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve _rotationDeviationCurve
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::AnimationCurve* rotationDeviationCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single _positionDeviationAmount
    // Size: 0x4
    // Offset: 0x50
    float positionDeviationAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rotationDeviationAmount
    // Size: 0x4
    // Offset: 0x54
    float rotationDeviationAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _useZDirection
    // Size: 0x1
    // Offset: 0x58
    bool useZDirection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useZDirection and: previewX
    char __padding9[0x3] = {};
    // [HeaderAttribute] Offset: 0x785FDC
    // private System.Int32 previewX
    // Size: 0x4
    // Offset: 0x5C
    int previewX;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 previewY
    // Size: 0x4
    // Offset: 0x60
    int previewY;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 previewZ
    // Size: 0x4
    // Offset: 0x64
    int previewZ;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [BitMaskAttribute] Offset: 0x786048
    // private VROSC.Scale previewScale
    // Size: 0x4
    // Offset: 0x68
    ::VROSC::Scale previewScale;
    // Field size check
    static_assert(sizeof(::VROSC::Scale) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.AnimationCurve _animationStartCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__animationStartCurve();
    // Get instance field reference: private UnityEngine.AnimationCurve _animateionEndCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__animateionEndCurve();
    // Get instance field reference: private VROSC.NotefieldAnimationSettings/VROSC.TimelineSettings _creation
    [[deprecated("Use field access instead!")]] ::VROSC::NotefieldAnimationSettings::TimelineSettings*& dyn__creation();
    // Get instance field reference: private VROSC.NotefieldAnimationSettings/VROSC.TimelineSettings _destruction
    [[deprecated("Use field access instead!")]] ::VROSC::NotefieldAnimationSettings::TimelineSettings*& dyn__destruction();
    // Get instance field reference: private UnityEngine.AnimationCurve _sizeCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__sizeCurve();
    // Get instance field reference: private UnityEngine.AnimationCurve _positionDeviationCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__positionDeviationCurve();
    // Get instance field reference: private UnityEngine.AnimationCurve _rotationDeviationCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__rotationDeviationCurve();
    // Get instance field reference: private System.Single _positionDeviationAmount
    [[deprecated("Use field access instead!")]] float& dyn__positionDeviationAmount();
    // Get instance field reference: private System.Single _rotationDeviationAmount
    [[deprecated("Use field access instead!")]] float& dyn__rotationDeviationAmount();
    // Get instance field reference: private System.Boolean _useZDirection
    [[deprecated("Use field access instead!")]] bool& dyn__useZDirection();
    // Get instance field reference: private System.Int32 previewX
    [[deprecated("Use field access instead!")]] int& dyn_previewX();
    // Get instance field reference: private System.Int32 previewY
    [[deprecated("Use field access instead!")]] int& dyn_previewY();
    // Get instance field reference: private System.Int32 previewZ
    [[deprecated("Use field access instead!")]] int& dyn_previewZ();
    // Get instance field reference: private VROSC.Scale previewScale
    [[deprecated("Use field access instead!")]] ::VROSC::Scale& dyn_previewScale();
    // public VROSC.NotefieldAnimationSettings/VROSC.TimelineSettings get_Creation()
    // Offset: 0xC5AFC4
    ::VROSC::NotefieldAnimationSettings::TimelineSettings* get_Creation();
    // public VROSC.NotefieldAnimationSettings/VROSC.TimelineSettings get_Destruction()
    // Offset: 0xC5AFCC
    ::VROSC::NotefieldAnimationSettings::TimelineSettings* get_Destruction();
    // public System.Boolean get_UseZDirection()
    // Offset: 0xC5AFD4
    bool get_UseZDirection();
    // public System.Void .ctor()
    // Offset: 0xC5B388
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NotefieldAnimationSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NotefieldAnimationSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NotefieldAnimationSettings*, creationType>()));
    }
    // public System.Single GetAnimationValue(System.Single note, System.Single time)
    // Offset: 0xC5AFDC
    float GetAnimationValue(float note, float time);
    // public System.Void CreatePreviewNoteboard(VROSC.NoteBoardNoteController noteboardController)
    // Offset: 0xC5B054
    void CreatePreviewNoteboard(::VROSC::NoteBoardNoteController* noteboardController);
  }; // VROSC.NotefieldAnimationSettings
  #pragma pack(pop)
  static check_size<sizeof(NotefieldAnimationSettings), 104 + sizeof(::VROSC::Scale)> __VROSC_NotefieldAnimationSettingsSizeCheck;
  static_assert(sizeof(NotefieldAnimationSettings) == 0x6C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::NotefieldAnimationSettings::get_Creation
// Il2CppName: get_Creation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::NotefieldAnimationSettings::TimelineSettings* (VROSC::NotefieldAnimationSettings::*)()>(&VROSC::NotefieldAnimationSettings::get_Creation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NotefieldAnimationSettings*), "get_Creation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NotefieldAnimationSettings::get_Destruction
// Il2CppName: get_Destruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::NotefieldAnimationSettings::TimelineSettings* (VROSC::NotefieldAnimationSettings::*)()>(&VROSC::NotefieldAnimationSettings::get_Destruction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NotefieldAnimationSettings*), "get_Destruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NotefieldAnimationSettings::get_UseZDirection
// Il2CppName: get_UseZDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::NotefieldAnimationSettings::*)()>(&VROSC::NotefieldAnimationSettings::get_UseZDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NotefieldAnimationSettings*), "get_UseZDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NotefieldAnimationSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::NotefieldAnimationSettings::GetAnimationValue
// Il2CppName: GetAnimationValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::NotefieldAnimationSettings::*)(float, float)>(&VROSC::NotefieldAnimationSettings::GetAnimationValue)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NotefieldAnimationSettings*), "GetAnimationValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, time});
  }
};
// Writing MetadataGetter for method: VROSC::NotefieldAnimationSettings::CreatePreviewNoteboard
// Il2CppName: CreatePreviewNoteboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NotefieldAnimationSettings::*)(::VROSC::NoteBoardNoteController*)>(&VROSC::NotefieldAnimationSettings::CreatePreviewNoteboard)> {
  static const MethodInfo* get() {
    static auto* noteboardController = &::il2cpp_utils::GetClassFromName("VROSC", "NoteBoardNoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NotefieldAnimationSettings*), "CreatePreviewNoteboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteboardController});
  }
};
