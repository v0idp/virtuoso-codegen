// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: MinMaxFloat
  class MinMaxFloat;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: MinMaxVector2
  class MinMaxVector2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::MinMaxVector2);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::MinMaxVector2*, "VROSC", "MinMaxVector2");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.MinMaxVector2
  // [TokenAttribute] Offset: FFFFFFFF
  class MinMaxVector2 : public ::Il2CppObject {
    public:
    public:
    // private VROSC.MinMaxFloat _x
    // Size: 0x8
    // Offset: 0x10
    ::VROSC::MinMaxFloat* x;
    // Field size check
    static_assert(sizeof(::VROSC::MinMaxFloat*) == 0x8);
    // private VROSC.MinMaxFloat _y
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::MinMaxFloat* y;
    // Field size check
    static_assert(sizeof(::VROSC::MinMaxFloat*) == 0x8);
    public:
    // Get instance field reference: private VROSC.MinMaxFloat _x
    [[deprecated("Use field access instead!")]] ::VROSC::MinMaxFloat*& dyn__x();
    // Get instance field reference: private VROSC.MinMaxFloat _y
    [[deprecated("Use field access instead!")]] ::VROSC::MinMaxFloat*& dyn__y();
    // public VROSC.MinMaxFloat get_X()
    // Offset: 0xAC8AC8
    ::VROSC::MinMaxFloat* get_X();
    // public VROSC.MinMaxFloat get_Y()
    // Offset: 0xAC8AD0
    ::VROSC::MinMaxFloat* get_Y();
    // public UnityEngine.Vector2 get_Min()
    // Offset: 0xAC8AD8
    ::UnityEngine::Vector2 get_Min();
    // public UnityEngine.Vector2 get_Max()
    // Offset: 0xAC8B04
    ::UnityEngine::Vector2 get_Max();
    // public System.Void .ctor(UnityEngine.Vector2 min, UnityEngine.Vector2 max)
    // Offset: 0xAC8B30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MinMaxVector2* New_ctor(::UnityEngine::Vector2 min, ::UnityEngine::Vector2 max) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxVector2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MinMaxVector2*, creationType>(min, max)));
    }
    // public UnityEngine.Vector2 Random()
    // Offset: 0xAC8BE0
    ::UnityEngine::Vector2 Random();
    // public UnityEngine.Vector2 Lerp(UnityEngine.Vector2 value, System.Boolean clamp)
    // Offset: 0xAC8C3C
    ::UnityEngine::Vector2 Lerp(::UnityEngine::Vector2 value, bool clamp);
    // public UnityEngine.Vector2 InverseLerp(UnityEngine.Vector2 value, System.Boolean clamp)
    // Offset: 0xAC8C9C
    ::UnityEngine::Vector2 InverseLerp(::UnityEngine::Vector2 value, bool clamp);
    // public UnityEngine.Vector2 Clamp(UnityEngine.Vector2 value)
    // Offset: 0xAC8CFC
    ::UnityEngine::Vector2 Clamp(::UnityEngine::Vector2 value);
    // public System.Void Invert()
    // Offset: 0xAC8D60
    void Invert();
  }; // VROSC.MinMaxVector2
  #pragma pack(pop)
  static check_size<sizeof(MinMaxVector2), 24 + sizeof(::VROSC::MinMaxFloat*)> __VROSC_MinMaxVector2SizeCheck;
  static_assert(sizeof(MinMaxVector2) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::MinMaxVector2::get_X
// Il2CppName: get_X
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::MinMaxFloat* (VROSC::MinMaxVector2::*)()>(&VROSC::MinMaxVector2::get_X)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MinMaxVector2*), "get_X", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MinMaxVector2::get_Y
// Il2CppName: get_Y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::MinMaxFloat* (VROSC::MinMaxVector2::*)()>(&VROSC::MinMaxVector2::get_Y)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MinMaxVector2*), "get_Y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MinMaxVector2::get_Min
// Il2CppName: get_Min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (VROSC::MinMaxVector2::*)()>(&VROSC::MinMaxVector2::get_Min)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MinMaxVector2*), "get_Min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MinMaxVector2::get_Max
// Il2CppName: get_Max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (VROSC::MinMaxVector2::*)()>(&VROSC::MinMaxVector2::get_Max)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MinMaxVector2*), "get_Max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MinMaxVector2::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::MinMaxVector2::Random
// Il2CppName: Random
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (VROSC::MinMaxVector2::*)()>(&VROSC::MinMaxVector2::Random)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MinMaxVector2*), "Random", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MinMaxVector2::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (VROSC::MinMaxVector2::*)(::UnityEngine::Vector2, bool)>(&VROSC::MinMaxVector2::Lerp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* clamp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MinMaxVector2*), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, clamp});
  }
};
// Writing MetadataGetter for method: VROSC::MinMaxVector2::InverseLerp
// Il2CppName: InverseLerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (VROSC::MinMaxVector2::*)(::UnityEngine::Vector2, bool)>(&VROSC::MinMaxVector2::InverseLerp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* clamp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MinMaxVector2*), "InverseLerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, clamp});
  }
};
// Writing MetadataGetter for method: VROSC::MinMaxVector2::Clamp
// Il2CppName: Clamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (VROSC::MinMaxVector2::*)(::UnityEngine::Vector2)>(&VROSC::MinMaxVector2::Clamp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MinMaxVector2*), "Clamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::MinMaxVector2::Invert
// Il2CppName: Invert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MinMaxVector2::*)()>(&VROSC::MinMaxVector2::Invert)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MinMaxVector2*), "Invert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
