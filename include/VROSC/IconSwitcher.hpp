// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: IconSwitcher
  class IconSwitcher;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::IconSwitcher);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::IconSwitcher*, "VROSC", "IconSwitcher");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.IconSwitcher
  // [TokenAttribute] Offset: FFFFFFFF
  class IconSwitcher : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Boolean _startsActive
    // Size: 0x1
    // Offset: 0x18
    bool startsActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: startsActive and: normalMesh
    char __padding0[0x7] = {};
    // [HeaderAttribute] Offset: 0x788884
    // private UnityEngine.GameObject _normalMesh
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* normalMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _activeMesh
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* activeMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean _isHovering
    // Size: 0x1
    // Offset: 0x30
    bool isHovering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Boolean _startsActive
    [[deprecated]] bool& dyn__startsActive();
    // Get instance field reference: private UnityEngine.GameObject _normalMesh
    [[deprecated]] ::UnityEngine::GameObject*& dyn__normalMesh();
    // Get instance field reference: private UnityEngine.GameObject _activeMesh
    [[deprecated]] ::UnityEngine::GameObject*& dyn__activeMesh();
    // Get instance field reference: private System.Boolean _isHovering
    [[deprecated]] bool& dyn__isHovering();
    // private System.Void Awake()
    // Offset: 0x1942CB8
    void Awake();
    // public System.Void SetActive(System.Boolean shouldBeActive)
    // Offset: 0x1942CC0
    void SetActive(bool shouldBeActive);
    // public System.Void .ctor()
    // Offset: 0x1942D24
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IconSwitcher* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::IconSwitcher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IconSwitcher*, creationType>()));
    }
  }; // VROSC.IconSwitcher
  #pragma pack(pop)
  static check_size<sizeof(IconSwitcher), 48 + sizeof(bool)> __VROSC_IconSwitcherSizeCheck;
  static_assert(sizeof(IconSwitcher) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::IconSwitcher::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::IconSwitcher::*)()>(&VROSC::IconSwitcher::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::IconSwitcher*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::IconSwitcher::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::IconSwitcher::*)(bool)>(&VROSC::IconSwitcher::SetActive)> {
  static const MethodInfo* get() {
    static auto* shouldBeActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::IconSwitcher*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shouldBeActive});
  }
};
// Writing MetadataGetter for method: VROSC::IconSwitcher::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
