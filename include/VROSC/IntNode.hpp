// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.Node
#include "VROSC/Node.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: IntNode
  class IntNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::IntNode);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::IntNode*, "VROSC", "IntNode");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.IntNode
  // [TokenAttribute] Offset: FFFFFFFF
  class IntNode : public ::VROSC::Node {
    public:
    // Nested type: ::VROSC::IntNode::OverflowBehaviour
    struct OverflowBehaviour;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: VROSC.IntNode/VROSC.OverflowBehaviour
    // [TokenAttribute] Offset: FFFFFFFF
    struct OverflowBehaviour/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: OverflowBehaviour
      constexpr OverflowBehaviour(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public VROSC.IntNode/VROSC.OverflowBehaviour Limit
      static constexpr const int Limit = 0;
      // Get static field: static public VROSC.IntNode/VROSC.OverflowBehaviour Limit
      static ::VROSC::IntNode::OverflowBehaviour _get_Limit();
      // Set static field: static public VROSC.IntNode/VROSC.OverflowBehaviour Limit
      static void _set_Limit(::VROSC::IntNode::OverflowBehaviour value);
      // static field const value: static public VROSC.IntNode/VROSC.OverflowBehaviour Wrap
      static constexpr const int Wrap = 1;
      // Get static field: static public VROSC.IntNode/VROSC.OverflowBehaviour Wrap
      static ::VROSC::IntNode::OverflowBehaviour _get_Wrap();
      // Set static field: static public VROSC.IntNode/VROSC.OverflowBehaviour Wrap
      static void _set_Wrap(::VROSC::IntNode::OverflowBehaviour value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // VROSC.IntNode/VROSC.OverflowBehaviour
    #pragma pack(pop)
    static check_size<sizeof(IntNode::OverflowBehaviour), 0 + sizeof(int)> __VROSC_IntNode_OverflowBehaviourSizeCheck;
    static_assert(sizeof(IntNode::OverflowBehaviour) == 0x4);
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // protected System.Int32 _minValue
    // Size: 0x4
    // Offset: 0x18
    int minValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 _maxValue
    // Size: 0x4
    // Offset: 0x1C
    int maxValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected VROSC.IntNode/VROSC.OverflowBehaviour _overflowBehaviour
    // Size: 0x4
    // Offset: 0x20
    ::VROSC::IntNode::OverflowBehaviour overflowBehaviour;
    // Field size check
    static_assert(sizeof(::VROSC::IntNode::OverflowBehaviour) == 0x4);
    // private System.Int32 _value
    // Size: 0x4
    // Offset: 0x24
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Action`1<System.Int32> OnValueChanged
    // Size: 0x8
    // Offset: 0x28
    ::System::Action_1<int>* OnValueChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<int>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: protected System.Int32 _minValue
    int& dyn__minValue();
    // Get instance field reference: protected System.Int32 _maxValue
    int& dyn__maxValue();
    // Get instance field reference: protected VROSC.IntNode/VROSC.OverflowBehaviour _overflowBehaviour
    ::VROSC::IntNode::OverflowBehaviour& dyn__overflowBehaviour();
    // Get instance field reference: private System.Int32 _value
    int& dyn__value();
    // Get instance field reference: public System.Action`1<System.Int32> OnValueChanged
    ::System::Action_1<int>*& dyn_OnValueChanged();
    // public System.Int32 get_MinValue()
    // Offset: 0x1385944
    int get_MinValue();
    // public System.Int32 get_MaxValue()
    // Offset: 0x138594C
    int get_MaxValue();
    // public System.Int32 get_Value()
    // Offset: 0x1385954
    int get_Value();
    // public System.Void set_Value(System.Int32 value)
    // Offset: 0x138595C
    void set_Value(int value);
    // protected System.Void OnValidate()
    // Offset: 0x1385968
    void OnValidate();
    // protected System.Int32 SetValueInRange(System.Int32 value)
    // Offset: 0x1385978
    int SetValueInRange(int value);
    // public System.Void .ctor()
    // Offset: 0x1385A70
    // Implemented from: VROSC.Node
    // Base method: System.Void Node::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IntNode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::IntNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IntNode*, creationType>()));
    }
  }; // VROSC.IntNode
  #pragma pack(pop)
  static check_size<sizeof(IntNode), 40 + sizeof(::System::Action_1<int>*)> __VROSC_IntNodeSizeCheck;
  static_assert(sizeof(IntNode) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::IntNode::OverflowBehaviour, "VROSC", "IntNode/OverflowBehaviour");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::IntNode::get_MinValue
// Il2CppName: get_MinValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::IntNode::*)()>(&VROSC::IntNode::get_MinValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::IntNode*), "get_MinValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::IntNode::get_MaxValue
// Il2CppName: get_MaxValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::IntNode::*)()>(&VROSC::IntNode::get_MaxValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::IntNode*), "get_MaxValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::IntNode::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::IntNode::*)()>(&VROSC::IntNode::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::IntNode*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::IntNode::set_Value
// Il2CppName: set_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::IntNode::*)(int)>(&VROSC::IntNode::set_Value)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::IntNode*), "set_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::IntNode::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::IntNode::*)()>(&VROSC::IntNode::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::IntNode*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::IntNode::SetValueInRange
// Il2CppName: SetValueInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::IntNode::*)(int)>(&VROSC::IntNode::SetValueInRange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::IntNode*), "SetValueInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::IntNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
