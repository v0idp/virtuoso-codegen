// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: UIToggle
  class UIToggle;
  // Forward declaring type: UISlider
  class UISlider;
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopVolumeController
  class LoopVolumeController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::LoopVolumeController);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LoopVolumeController*, "VROSC", "LoopVolumeController");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.LoopVolumeController
  // [TokenAttribute] Offset: FFFFFFFF
  class LoopVolumeController : public ::Il2CppObject {
    public:
    public:
    // private VROSC.UIToggle _muteButton
    // Size: 0x8
    // Offset: 0x10
    ::VROSC::UIToggle* muteButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIToggle*) == 0x8);
    // private VROSC.UIToggle _soloButton
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::UIToggle* soloButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIToggle*) == 0x8);
    // private VROSC.UISlider _volumeSlider
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::UISlider* volumeSlider;
    // Field size check
    static_assert(sizeof(::VROSC::UISlider*) == 0x8);
    // public System.Action`1<System.Single> OnVolumeChanged
    // Size: 0x8
    // Offset: 0x28
    ::System::Action_1<float>* OnVolumeChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<float>*) == 0x8);
    // public System.Action`1<System.Boolean> OnMuteChanged
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_1<bool>* OnMuteChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<bool>*) == 0x8);
    // public System.Action`1<System.Boolean> OnSoloChanged
    // Size: 0x8
    // Offset: 0x38
    ::System::Action_1<bool>* OnSoloChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<bool>*) == 0x8);
    public:
    // Get instance field reference: private VROSC.UIToggle _muteButton
    [[deprecated]] ::VROSC::UIToggle*& dyn__muteButton();
    // Get instance field reference: private VROSC.UIToggle _soloButton
    [[deprecated]] ::VROSC::UIToggle*& dyn__soloButton();
    // Get instance field reference: private VROSC.UISlider _volumeSlider
    [[deprecated]] ::VROSC::UISlider*& dyn__volumeSlider();
    // Get instance field reference: public System.Action`1<System.Single> OnVolumeChanged
    [[deprecated]] ::System::Action_1<float>*& dyn_OnVolumeChanged();
    // Get instance field reference: public System.Action`1<System.Boolean> OnMuteChanged
    [[deprecated]] ::System::Action_1<bool>*& dyn_OnMuteChanged();
    // Get instance field reference: public System.Action`1<System.Boolean> OnSoloChanged
    [[deprecated]] ::System::Action_1<bool>*& dyn_OnSoloChanged();
    // public System.Boolean get_IsSoloToggled()
    // Offset: 0x197A130
    bool get_IsSoloToggled();
    // public System.Boolean get_IsMuteToggled()
    // Offset: 0x1971208
    bool get_IsMuteToggled();
    // public System.Single get_Volume()
    // Offset: 0x19711EC
    float get_Volume();
    // public System.Void Setup(System.String sliderHeaderText)
    // Offset: 0x1971514
    void Setup(::StringW sliderHeaderText);
    // public System.Void Dispose()
    // Offset: 0x1971B50
    void Dispose();
    // public System.Void ToggleMute(VROSC.InputDevice device, System.Boolean mute)
    // Offset: 0x197A14C
    void ToggleMute(::VROSC::InputDevice* device, bool mute);
    // private System.Void ToggleSolo(VROSC.InputDevice arg1, System.Boolean arg2)
    // Offset: 0x197A1B8
    void ToggleSolo(::VROSC::InputDevice* arg1, bool arg2);
    // public System.Void SetVolume(System.Single volume)
    // Offset: 0x1972020
    void SetVolume(float volume);
    // private System.Void OnVolumeSliderChanged(System.Single volume)
    // Offset: 0x197A224
    void OnVolumeSliderChanged(float volume);
    // public System.Void SetIsMuted(System.Boolean isMuted)
    // Offset: 0x1971FB0
    void SetIsMuted(bool isMuted);
    // public System.Void SetIsSolo(System.Boolean isMuted)
    // Offset: 0x1971FD4
    void SetIsSolo(bool isMuted);
    // public System.Void .ctor()
    // Offset: 0x197A294
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoopVolumeController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::LoopVolumeController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoopVolumeController*, creationType>()));
    }
  }; // VROSC.LoopVolumeController
  #pragma pack(pop)
  static check_size<sizeof(LoopVolumeController), 56 + sizeof(::System::Action_1<bool>*)> __VROSC_LoopVolumeControllerSizeCheck;
  static_assert(sizeof(LoopVolumeController) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::LoopVolumeController::get_IsSoloToggled
// Il2CppName: get_IsSoloToggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopVolumeController::*)()>(&VROSC::LoopVolumeController::get_IsSoloToggled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopVolumeController*), "get_IsSoloToggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopVolumeController::get_IsMuteToggled
// Il2CppName: get_IsMuteToggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopVolumeController::*)()>(&VROSC::LoopVolumeController::get_IsMuteToggled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopVolumeController*), "get_IsMuteToggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopVolumeController::get_Volume
// Il2CppName: get_Volume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::LoopVolumeController::*)()>(&VROSC::LoopVolumeController::get_Volume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopVolumeController*), "get_Volume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopVolumeController::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopVolumeController::*)(::StringW)>(&VROSC::LoopVolumeController::Setup)> {
  static const MethodInfo* get() {
    static auto* sliderHeaderText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopVolumeController*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderHeaderText});
  }
};
// Writing MetadataGetter for method: VROSC::LoopVolumeController::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopVolumeController::*)()>(&VROSC::LoopVolumeController::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopVolumeController*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopVolumeController::ToggleMute
// Il2CppName: ToggleMute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopVolumeController::*)(::VROSC::InputDevice*, bool)>(&VROSC::LoopVolumeController::ToggleMute)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* mute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopVolumeController*), "ToggleMute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, mute});
  }
};
// Writing MetadataGetter for method: VROSC::LoopVolumeController::ToggleSolo
// Il2CppName: ToggleSolo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopVolumeController::*)(::VROSC::InputDevice*, bool)>(&VROSC::LoopVolumeController::ToggleSolo)> {
  static const MethodInfo* get() {
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* arg2 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopVolumeController*), "ToggleSolo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arg1, arg2});
  }
};
// Writing MetadataGetter for method: VROSC::LoopVolumeController::SetVolume
// Il2CppName: SetVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopVolumeController::*)(float)>(&VROSC::LoopVolumeController::SetVolume)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopVolumeController*), "SetVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: VROSC::LoopVolumeController::OnVolumeSliderChanged
// Il2CppName: OnVolumeSliderChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopVolumeController::*)(float)>(&VROSC::LoopVolumeController::OnVolumeSliderChanged)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopVolumeController*), "OnVolumeSliderChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: VROSC::LoopVolumeController::SetIsMuted
// Il2CppName: SetIsMuted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopVolumeController::*)(bool)>(&VROSC::LoopVolumeController::SetIsMuted)> {
  static const MethodInfo* get() {
    static auto* isMuted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopVolumeController*), "SetIsMuted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isMuted});
  }
};
// Writing MetadataGetter for method: VROSC::LoopVolumeController::SetIsSolo
// Il2CppName: SetIsSolo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopVolumeController::*)(bool)>(&VROSC::LoopVolumeController::SetIsSolo)> {
  static const MethodInfo* get() {
    static auto* isMuted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopVolumeController*), "SetIsSolo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isMuted});
  }
};
// Writing MetadataGetter for method: VROSC::LoopVolumeController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
