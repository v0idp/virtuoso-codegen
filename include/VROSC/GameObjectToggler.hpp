// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.SignalNode
#include "VROSC/SignalNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Signal
  class Signal;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: GameObjectToggler
  class GameObjectToggler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::GameObjectToggler);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::GameObjectToggler*, "VROSC", "GameObjectToggler");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x4D
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.GameObjectToggler
  // [TokenAttribute] Offset: FFFFFFFF
  class GameObjectToggler : public ::VROSC::SignalNode {
    public:
    public:
    // private UnityEngine.GameObject[] _targetGameObjects
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::GameObject*> targetGameObjects;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private System.Boolean _overrideStartState
    // Size: 0x1
    // Offset: 0x48
    bool overrideStartState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _startEnabled
    // Size: 0x1
    // Offset: 0x49
    bool startEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _onWithSignal
    // Size: 0x1
    // Offset: 0x4A
    bool onWithSignal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _setState
    // Size: 0x1
    // Offset: 0x4B
    bool setState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _setStateTo
    // Size: 0x1
    // Offset: 0x4C
    bool setStateTo;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.GameObject[] _targetGameObjects
    [[deprecated]] ::ArrayW<::UnityEngine::GameObject*>& dyn__targetGameObjects();
    // Get instance field reference: private System.Boolean _overrideStartState
    [[deprecated]] bool& dyn__overrideStartState();
    // Get instance field reference: private System.Boolean _startEnabled
    [[deprecated]] bool& dyn__startEnabled();
    // Get instance field reference: private System.Boolean _onWithSignal
    [[deprecated]] bool& dyn__onWithSignal();
    // Get instance field reference: private System.Boolean _setState
    [[deprecated]] bool& dyn__setState();
    // Get instance field reference: private System.Boolean _setStateTo
    [[deprecated]] bool& dyn__setStateTo();
    // protected System.Void Start()
    // Offset: 0x19A1B8C
    void Start();
    // public System.Void .ctor()
    // Offset: 0x19A1E0C
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameObjectToggler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GameObjectToggler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameObjectToggler*, creationType>()));
    }
    // protected override System.Void NodeBegin(VROSC.Signal signal)
    // Offset: 0x19A1C60
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeBegin(VROSC.Signal signal)
    void NodeBegin(::VROSC::Signal* signal);
    // protected override System.Void NodeEnd(VROSC.Signal signal)
    // Offset: 0x19A1D94
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeEnd(VROSC.Signal signal)
    void NodeEnd(::VROSC::Signal* signal);
  }; // VROSC.GameObjectToggler
  #pragma pack(pop)
  static check_size<sizeof(GameObjectToggler), 76 + sizeof(bool)> __VROSC_GameObjectTogglerSizeCheck;
  static_assert(sizeof(GameObjectToggler) == 0x4D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::GameObjectToggler::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::GameObjectToggler::*)()>(&VROSC::GameObjectToggler::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::GameObjectToggler*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::GameObjectToggler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::GameObjectToggler::NodeBegin
// Il2CppName: NodeBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::GameObjectToggler::*)(::VROSC::Signal*)>(&VROSC::GameObjectToggler::NodeBegin)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::GameObjectToggler*), "NodeBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::GameObjectToggler::NodeEnd
// Il2CppName: NodeEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::GameObjectToggler::*)(::VROSC::Signal*)>(&VROSC::GameObjectToggler::NodeEnd)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::GameObjectToggler*), "NodeEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
