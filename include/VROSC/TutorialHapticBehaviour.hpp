// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.PlayableBehaviour
#include "UnityEngine/Playables/PlayableBehaviour.hpp"
// Including type: VROSC.HandType
#include "VROSC/HandType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: FrameData
  struct FrameData;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TutorialHapticBehaviour
  class TutorialHapticBehaviour;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TutorialHapticBehaviour);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TutorialHapticBehaviour*, "VROSC", "TutorialHapticBehaviour");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TutorialHapticBehaviour
  // [TokenAttribute] Offset: FFFFFFFF
  class TutorialHapticBehaviour : public ::UnityEngine::Playables::PlayableBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Single _frequencyScale
    // Size: 0x4
    // Offset: 0x10
    float frequencyScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _amplitudeScale
    // Size: 0x4
    // Offset: 0x14
    float amplitudeScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private VROSC.HandType _hand
    // Size: 0x4
    // Offset: 0x18
    ::VROSC::HandType hand;
    // Field size check
    static_assert(sizeof(::VROSC::HandType) == 0x4);
    // private System.Single _frequency
    // Size: 0x4
    // Offset: 0x1C
    float frequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _amplitude
    // Size: 0x4
    // Offset: 0x20
    float amplitude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Single _frequencyScale
    float& dyn__frequencyScale();
    // Get instance field reference: private System.Single _amplitudeScale
    float& dyn__amplitudeScale();
    // Get instance field reference: private VROSC.HandType _hand
    ::VROSC::HandType& dyn__hand();
    // Get instance field reference: private System.Single _frequency
    float& dyn__frequency();
    // Get instance field reference: private System.Single _amplitude
    float& dyn__amplitude();
    // public System.Void Setup(VROSC.HandType hand, System.Single frequency, System.Single amplitude)
    // Offset: 0x14073CC
    void Setup(::VROSC::HandType hand, float frequency, float amplitude);
    // public System.Void .ctor()
    // Offset: 0x14074E4
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TutorialHapticBehaviour* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TutorialHapticBehaviour::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TutorialHapticBehaviour*, creationType>()));
    }
    // public override System.Void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    // Offset: 0x14073F0
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    void ProcessFrame(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info, ::Il2CppObject* playerData);
  }; // VROSC.TutorialHapticBehaviour
  #pragma pack(pop)
  static check_size<sizeof(TutorialHapticBehaviour), 32 + sizeof(float)> __VROSC_TutorialHapticBehaviourSizeCheck;
  static_assert(sizeof(TutorialHapticBehaviour) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TutorialHapticBehaviour::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialHapticBehaviour::*)(::VROSC::HandType, float, float)>(&VROSC::TutorialHapticBehaviour::Setup)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialHapticBehaviour*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, frequency, amplitude});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialHapticBehaviour::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::TutorialHapticBehaviour::ProcessFrame
// Il2CppName: ProcessFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialHapticBehaviour::*)(::UnityEngine::Playables::Playable, ::UnityEngine::Playables::FrameData, ::Il2CppObject*)>(&VROSC::TutorialHapticBehaviour::ProcessFrame)> {
  static const MethodInfo* get() {
    static auto* playable = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "Playable")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "FrameData")->byval_arg;
    static auto* playerData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialHapticBehaviour*), "ProcessFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playable, info, playerData});
  }
};
