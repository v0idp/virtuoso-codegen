// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: ProceduralAdjustableMesh
  class ProceduralAdjustableMesh;
  // Forward declaring type: UIColorPickerMiniBar
  class UIColorPickerMiniBar;
  // Forward declaring type: AdjustableMesh
  class AdjustableMesh;
  // Forward declaring type: UIHelperPositioning
  class UIHelperPositioning;
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: UIColorPicker
  class UIColorPicker;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: VROSC::UI::Meshes
namespace VROSC::UI::Meshes {
  // Forward declaring type: ColorPickerMesh
  class ColorPickerMesh;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: UIColorPickerHelper
  class UIColorPickerHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UIColorPickerHelper);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UIColorPickerHelper*, "VROSC", "UIColorPickerHelper");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UIColorPickerHelper
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class UIColorPickerHelper : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::UIColorPickerHelper::$GrabRemotely$d__22
    class $GrabRemotely$d__22;
    public:
    // [HeaderAttribute] Offset: 0x78A588
    // private TMPro.TextMeshPro _name
    // Size: 0x8
    // Offset: 0x18
    ::TMPro::TextMeshPro* name;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // [HeaderAttribute] Offset: 0x78A5D4
    // private VROSC.ProceduralAdjustableMesh _colorDisplay
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::ProceduralAdjustableMesh* colorDisplay;
    // Field size check
    static_assert(sizeof(::VROSC::ProceduralAdjustableMesh*) == 0x8);
    // private VROSC.UI.Meshes.ColorPickerMesh _hueDisplay
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::UI::Meshes::ColorPickerMesh* hueDisplay;
    // Field size check
    static_assert(sizeof(::VROSC::UI::Meshes::ColorPickerMesh*) == 0x8);
    // private VROSC.UI.Meshes.ColorPickerMesh _saturationDisplay
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::UI::Meshes::ColorPickerMesh* saturationDisplay;
    // Field size check
    static_assert(sizeof(::VROSC::UI::Meshes::ColorPickerMesh*) == 0x8);
    // private VROSC.UIColorPickerMiniBar _miniHue
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::UIColorPickerMiniBar* miniHue;
    // Field size check
    static_assert(sizeof(::VROSC::UIColorPickerMiniBar*) == 0x8);
    // private VROSC.UIColorPickerMiniBar _miniSaturation
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::UIColorPickerMiniBar* miniSaturation;
    // Field size check
    static_assert(sizeof(::VROSC::UIColorPickerMiniBar*) == 0x8);
    // private VROSC.UIColorPickerMiniBar _miniValue
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::UIColorPickerMiniBar* miniValue;
    // Field size check
    static_assert(sizeof(::VROSC::UIColorPickerMiniBar*) == 0x8);
    // private UnityEngine.Transform _saturationDot
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Transform* saturationDot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single _saturationHeight
    // Size: 0x4
    // Offset: 0x58
    float saturationHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: saturationHeight and: valueDot
    char __padding8[0x4] = {};
    // private UnityEngine.Transform _valueDot
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Transform* valueDot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single _valueHeight
    // Size: 0x4
    // Offset: 0x68
    float valueHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _hueRange
    // Size: 0x4
    // Offset: 0x6C
    float hueRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private VROSC.AdjustableMesh _valueSphere
    // Size: 0x8
    // Offset: 0x70
    ::VROSC::AdjustableMesh* valueSphere;
    // Field size check
    static_assert(sizeof(::VROSC::AdjustableMesh*) == 0x8);
    // private System.Single _valueSphereScaleAdjust
    // Size: 0x4
    // Offset: 0x78
    float valueSphereScaleAdjust;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0x78A6E0
    // private UnityEngine.Vector3 _inputSensitivity
    // Size: 0xC
    // Offset: 0x7C
    ::UnityEngine::Vector3 inputSensitivity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [HeaderAttribute] Offset: 0x78A72C
    // private UnityEngine.GameObject _visual
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::GameObject* visual;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private VROSC.UIHelperPositioning _positioning
    // Size: 0x8
    // Offset: 0x90
    ::VROSC::UIHelperPositioning* positioning;
    // Field size check
    static_assert(sizeof(::VROSC::UIHelperPositioning*) == 0x8);
    // [HeaderAttribute] Offset: 0x78A788
    // private UnityEngine.Color _testColor
    // Size: 0x10
    // Offset: 0x98
    ::UnityEngine::Color testColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private VROSC.InputDevice _grabbingDevice
    // Size: 0x8
    // Offset: 0xA8
    ::VROSC::InputDevice* grabbingDevice;
    // Field size check
    static_assert(sizeof(::VROSC::InputDevice*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private TMPro.TextMeshPro _name
    [[deprecated]] ::TMPro::TextMeshPro*& dyn__name();
    // Get instance field reference: private VROSC.ProceduralAdjustableMesh _colorDisplay
    [[deprecated]] ::VROSC::ProceduralAdjustableMesh*& dyn__colorDisplay();
    // Get instance field reference: private VROSC.UI.Meshes.ColorPickerMesh _hueDisplay
    [[deprecated]] ::VROSC::UI::Meshes::ColorPickerMesh*& dyn__hueDisplay();
    // Get instance field reference: private VROSC.UI.Meshes.ColorPickerMesh _saturationDisplay
    [[deprecated]] ::VROSC::UI::Meshes::ColorPickerMesh*& dyn__saturationDisplay();
    // Get instance field reference: private VROSC.UIColorPickerMiniBar _miniHue
    [[deprecated]] ::VROSC::UIColorPickerMiniBar*& dyn__miniHue();
    // Get instance field reference: private VROSC.UIColorPickerMiniBar _miniSaturation
    [[deprecated]] ::VROSC::UIColorPickerMiniBar*& dyn__miniSaturation();
    // Get instance field reference: private VROSC.UIColorPickerMiniBar _miniValue
    [[deprecated]] ::VROSC::UIColorPickerMiniBar*& dyn__miniValue();
    // Get instance field reference: private UnityEngine.Transform _saturationDot
    [[deprecated]] ::UnityEngine::Transform*& dyn__saturationDot();
    // Get instance field reference: private System.Single _saturationHeight
    [[deprecated]] float& dyn__saturationHeight();
    // Get instance field reference: private UnityEngine.Transform _valueDot
    [[deprecated]] ::UnityEngine::Transform*& dyn__valueDot();
    // Get instance field reference: private System.Single _valueHeight
    [[deprecated]] float& dyn__valueHeight();
    // Get instance field reference: private System.Single _hueRange
    [[deprecated]] float& dyn__hueRange();
    // Get instance field reference: private VROSC.AdjustableMesh _valueSphere
    [[deprecated]] ::VROSC::AdjustableMesh*& dyn__valueSphere();
    // Get instance field reference: private System.Single _valueSphereScaleAdjust
    [[deprecated]] float& dyn__valueSphereScaleAdjust();
    // Get instance field reference: private UnityEngine.Vector3 _inputSensitivity
    [[deprecated]] ::UnityEngine::Vector3& dyn__inputSensitivity();
    // Get instance field reference: private UnityEngine.GameObject _visual
    [[deprecated]] ::UnityEngine::GameObject*& dyn__visual();
    // Get instance field reference: private VROSC.UIHelperPositioning _positioning
    [[deprecated]] ::VROSC::UIHelperPositioning*& dyn__positioning();
    // Get instance field reference: private UnityEngine.Color _testColor
    [[deprecated]] ::UnityEngine::Color& dyn__testColor();
    // Get instance field reference: private VROSC.InputDevice _grabbingDevice
    [[deprecated]] ::VROSC::InputDevice*& dyn__grabbingDevice();
    // private System.Void Awake()
    // Offset: 0xA349E0
    void Awake();
    // public System.Void Grab(VROSC.UIColorPicker target, VROSC.InputDevice inputDevice)
    // Offset: 0xA34AE8
    void Grab(::VROSC::UIColorPicker* target, ::VROSC::InputDevice* inputDevice);
    // public System.Void StopGrab(VROSC.InputDevice device)
    // Offset: 0xA34920
    void StopGrab(::VROSC::InputDevice* device);
    // private System.Collections.IEnumerator GrabRemotely(VROSC.UIColorPicker target, VROSC.InputDevice device)
    // Offset: 0xA34B5C
    ::System::Collections::IEnumerator* GrabRemotely(::VROSC::UIColorPicker* target, ::VROSC::InputDevice* device);
    // private System.Void Verify(System.Boolean forceUpdate)
    // Offset: 0xA34A1C
    void Verify(bool forceUpdate);
    // private System.Void SetColor(System.Single hue, System.Single saturation, System.Single value, UnityEngine.Color color)
    // Offset: 0xA34C5C
    void SetColor(float hue, float saturation, float value, ::UnityEngine::Color color);
    // public System.Void .ctor()
    // Offset: 0xA34EE0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIColorPickerHelper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UIColorPickerHelper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIColorPickerHelper*, creationType>()));
    }
  }; // VROSC.UIColorPickerHelper
  #pragma pack(pop)
  static check_size<sizeof(UIColorPickerHelper), 168 + sizeof(::VROSC::InputDevice*)> __VROSC_UIColorPickerHelperSizeCheck;
  static_assert(sizeof(UIColorPickerHelper) == 0xB0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UIColorPickerHelper::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIColorPickerHelper::*)()>(&VROSC::UIColorPickerHelper::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIColorPickerHelper*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UIColorPickerHelper::Grab
// Il2CppName: Grab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIColorPickerHelper::*)(::VROSC::UIColorPicker*, ::VROSC::InputDevice*)>(&VROSC::UIColorPickerHelper::Grab)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("VROSC", "UIColorPicker")->byval_arg;
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIColorPickerHelper*), "Grab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, inputDevice});
  }
};
// Writing MetadataGetter for method: VROSC::UIColorPickerHelper::StopGrab
// Il2CppName: StopGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIColorPickerHelper::*)(::VROSC::InputDevice*)>(&VROSC::UIColorPickerHelper::StopGrab)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIColorPickerHelper*), "StopGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: VROSC::UIColorPickerHelper::GrabRemotely
// Il2CppName: GrabRemotely
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (VROSC::UIColorPickerHelper::*)(::VROSC::UIColorPicker*, ::VROSC::InputDevice*)>(&VROSC::UIColorPickerHelper::GrabRemotely)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("VROSC", "UIColorPicker")->byval_arg;
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIColorPickerHelper*), "GrabRemotely", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, device});
  }
};
// Writing MetadataGetter for method: VROSC::UIColorPickerHelper::Verify
// Il2CppName: Verify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIColorPickerHelper::*)(bool)>(&VROSC::UIColorPickerHelper::Verify)> {
  static const MethodInfo* get() {
    static auto* forceUpdate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIColorPickerHelper*), "Verify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forceUpdate});
  }
};
// Writing MetadataGetter for method: VROSC::UIColorPickerHelper::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIColorPickerHelper::*)(float, float, float, ::UnityEngine::Color)>(&VROSC::UIColorPickerHelper::SetColor)> {
  static const MethodInfo* get() {
    static auto* hue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* saturation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIColorPickerHelper*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hue, saturation, value, color});
  }
};
// Writing MetadataGetter for method: VROSC::UIColorPickerHelper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
