// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.IState
#include "VROSC/IState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: AuthenticationManager
  class AuthenticationManager;
  // Forward declaring type: Error
  struct Error;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoginWithEmailState
  class LoginWithEmailState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::LoginWithEmailState);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LoginWithEmailState*, "VROSC", "LoginWithEmailState");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x37
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.LoginWithEmailState
  // [TokenAttribute] Offset: FFFFFFFF
  class LoginWithEmailState : public ::Il2CppObject/*, public ::VROSC::IState*/ {
    public:
    // Nested type: ::VROSC::LoginWithEmailState::$$c__DisplayClass20_0
    class $$c__DisplayClass20_0;
    // Nested type: ::VROSC::LoginWithEmailState::$$c
    class $$c;
    public:
    // private VROSC.AuthenticationManager _authManager
    // Size: 0x8
    // Offset: 0x10
    ::VROSC::AuthenticationManager* authManager;
    // Field size check
    static_assert(sizeof(::VROSC::AuthenticationManager*) == 0x8);
    // private System.String _email
    // Size: 0x8
    // Offset: 0x18
    ::StringW email;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _password
    // Size: 0x8
    // Offset: 0x20
    ::StringW password;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _rememberMe
    // Size: 0x1
    // Offset: 0x28
    bool rememberMe;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isNewUser
    // Size: 0x1
    // Offset: 0x29
    bool isNewUser;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isNewUser and: lastAttemptTimer
    char __padding4[0x2] = {};
    // private System.Single _lastAttemptTimer
    // Size: 0x4
    // Offset: 0x2C
    float lastAttemptTimer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _attemptsCount
    // Size: 0x4
    // Offset: 0x30
    int attemptsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _waitingForResponse
    // Size: 0x1
    // Offset: 0x34
    bool waitingForResponse;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _hasSubmittedData
    // Size: 0x1
    // Offset: 0x35
    bool hasSubmittedData;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <HasLoggedIn>k__BackingField
    // Size: 0x1
    // Offset: 0x36
    bool HasLoggedIn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::VROSC::IState
    operator ::VROSC::IState() noexcept {
      return *reinterpret_cast<::VROSC::IState*>(this);
    }
    // Get instance field reference: private VROSC.AuthenticationManager _authManager
    [[deprecated("Use field access instead!")]] ::VROSC::AuthenticationManager*& dyn__authManager();
    // Get instance field reference: private System.String _email
    [[deprecated("Use field access instead!")]] ::StringW& dyn__email();
    // Get instance field reference: private System.String _password
    [[deprecated("Use field access instead!")]] ::StringW& dyn__password();
    // Get instance field reference: private System.Boolean _rememberMe
    [[deprecated("Use field access instead!")]] bool& dyn__rememberMe();
    // Get instance field reference: private System.Boolean _isNewUser
    [[deprecated("Use field access instead!")]] bool& dyn__isNewUser();
    // Get instance field reference: private System.Single _lastAttemptTimer
    [[deprecated("Use field access instead!")]] float& dyn__lastAttemptTimer();
    // Get instance field reference: private System.Int32 _attemptsCount
    [[deprecated("Use field access instead!")]] int& dyn__attemptsCount();
    // Get instance field reference: private System.Boolean _waitingForResponse
    [[deprecated("Use field access instead!")]] bool& dyn__waitingForResponse();
    // Get instance field reference: private System.Boolean _hasSubmittedData
    [[deprecated("Use field access instead!")]] bool& dyn__hasSubmittedData();
    // Get instance field reference: private System.Boolean <HasLoggedIn>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$HasLoggedIn$k__BackingField();
    // public System.Boolean get_HasLoggedIn()
    // Offset: 0x19B4150
    bool get_HasLoggedIn();
    // private System.Void set_HasLoggedIn(System.Boolean value)
    // Offset: 0x19B4158
    void set_HasLoggedIn(bool value);
    // public System.Void .ctor(VROSC.AuthenticationManager authManager)
    // Offset: 0x19B4164
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoginWithEmailState* New_ctor(::VROSC::AuthenticationManager* authManager) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::LoginWithEmailState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoginWithEmailState*, creationType>(authManager)));
    }
    // public System.Void OnEnter(params System.Object[] values)
    // Offset: 0x19B41D4
    void OnEnter(::ArrayW<::Il2CppObject*> values);
    // public System.Void OnExit()
    // Offset: 0x19B42C4
    void OnExit();
    // public System.Void Tick()
    // Offset: 0x19B431C
    void Tick();
    // public System.Void UpdateData(params System.Object[] values)
    // Offset: 0x19B4608
    void UpdateData(::ArrayW<::Il2CppObject*> values);
    // private System.Void LoginWithEmail(System.String email, System.String password)
    // Offset: 0x19B43B0
    void LoginWithEmail(::StringW email, ::StringW password);
    // private System.Void FirebaseCreateUserWithEmailSuccess(System.String userId)
    // Offset: 0x19B4744
    void FirebaseCreateUserWithEmailSuccess(::StringW userId);
    // private System.Void FirebaseLoginUserWithEmailSuccess(System.String userId, System.Boolean isEmailVerified)
    // Offset: 0x19B474C
    void FirebaseLoginUserWithEmailSuccess(::StringW userId, bool isEmailVerified);
    // private System.Void FirebaseLoginUserWithEmailFailure(VROSC.Error error)
    // Offset: 0x19B45AC
    void FirebaseLoginUserWithEmailFailure(::VROSC::Error error);
  }; // VROSC.LoginWithEmailState
  #pragma pack(pop)
  static check_size<sizeof(LoginWithEmailState), 54 + sizeof(bool)> __VROSC_LoginWithEmailStateSizeCheck;
  static_assert(sizeof(LoginWithEmailState) == 0x37);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::LoginWithEmailState::get_HasLoggedIn
// Il2CppName: get_HasLoggedIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoginWithEmailState::*)()>(&VROSC::LoginWithEmailState::get_HasLoggedIn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoginWithEmailState*), "get_HasLoggedIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoginWithEmailState::set_HasLoggedIn
// Il2CppName: set_HasLoggedIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoginWithEmailState::*)(bool)>(&VROSC::LoginWithEmailState::set_HasLoggedIn)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoginWithEmailState*), "set_HasLoggedIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoginWithEmailState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::LoginWithEmailState::OnEnter
// Il2CppName: OnEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoginWithEmailState::*)(::ArrayW<::Il2CppObject*>)>(&VROSC::LoginWithEmailState::OnEnter)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoginWithEmailState*), "OnEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values});
  }
};
// Writing MetadataGetter for method: VROSC::LoginWithEmailState::OnExit
// Il2CppName: OnExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoginWithEmailState::*)()>(&VROSC::LoginWithEmailState::OnExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoginWithEmailState*), "OnExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoginWithEmailState::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoginWithEmailState::*)()>(&VROSC::LoginWithEmailState::Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoginWithEmailState*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoginWithEmailState::UpdateData
// Il2CppName: UpdateData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoginWithEmailState::*)(::ArrayW<::Il2CppObject*>)>(&VROSC::LoginWithEmailState::UpdateData)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoginWithEmailState*), "UpdateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values});
  }
};
// Writing MetadataGetter for method: VROSC::LoginWithEmailState::LoginWithEmail
// Il2CppName: LoginWithEmail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoginWithEmailState::*)(::StringW, ::StringW)>(&VROSC::LoginWithEmailState::LoginWithEmail)> {
  static const MethodInfo* get() {
    static auto* email = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* password = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoginWithEmailState*), "LoginWithEmail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{email, password});
  }
};
// Writing MetadataGetter for method: VROSC::LoginWithEmailState::FirebaseCreateUserWithEmailSuccess
// Il2CppName: FirebaseCreateUserWithEmailSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoginWithEmailState::*)(::StringW)>(&VROSC::LoginWithEmailState::FirebaseCreateUserWithEmailSuccess)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoginWithEmailState*), "FirebaseCreateUserWithEmailSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId});
  }
};
// Writing MetadataGetter for method: VROSC::LoginWithEmailState::FirebaseLoginUserWithEmailSuccess
// Il2CppName: FirebaseLoginUserWithEmailSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoginWithEmailState::*)(::StringW, bool)>(&VROSC::LoginWithEmailState::FirebaseLoginUserWithEmailSuccess)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isEmailVerified = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoginWithEmailState*), "FirebaseLoginUserWithEmailSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, isEmailVerified});
  }
};
// Writing MetadataGetter for method: VROSC::LoginWithEmailState::FirebaseLoginUserWithEmailFailure
// Il2CppName: FirebaseLoginUserWithEmailFailure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoginWithEmailState::*)(::VROSC::Error)>(&VROSC::LoginWithEmailState::FirebaseLoginUserWithEmailFailure)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("VROSC", "Error")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoginWithEmailState*), "FirebaseLoginUserWithEmailFailure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
