// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: TransformDataModel
  class TransformDataModel;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: EmpadDataModel
  class EmpadDataModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::EmpadDataModel);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::EmpadDataModel*, "VROSC", "EmpadDataModel");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.EmpadDataModel
  // [TokenAttribute] Offset: FFFFFFFF
  class EmpadDataModel : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 Id
    // Size: 0x4
    // Offset: 0x10
    int Id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 GroupId
    // Size: 0x4
    // Offset: 0x14
    int GroupId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SampleId
    // Size: 0x4
    // Offset: 0x18
    int SampleId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SelectedIndex
    // Size: 0x4
    // Offset: 0x1C
    int SelectedIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MidiNote
    // Size: 0x4
    // Offset: 0x20
    int MidiNote;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean IsPressureSensitive
    // Size: 0x1
    // Offset: 0x24
    bool IsPressureSensitive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean IsSpawner
    // Size: 0x1
    // Offset: 0x25
    bool IsSpawner;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsSpawner and: Pitch
    char __padding6[0x2] = {};
    // public System.Int32 Pitch
    // Size: 0x4
    // Offset: 0x28
    int Pitch;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single Size
    // Size: 0x4
    // Offset: 0x2C
    float Size;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single[] Position
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<float> Position;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Single[] Rotation
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<float> Rotation;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public VROSC.TransformDataModel TransformData
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::TransformDataModel* TransformData;
    // Field size check
    static_assert(sizeof(::VROSC::TransformDataModel*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 Id
    [[deprecated]] int& dyn_Id();
    // Get instance field reference: public System.Int32 GroupId
    [[deprecated]] int& dyn_GroupId();
    // Get instance field reference: public System.Int32 SampleId
    [[deprecated]] int& dyn_SampleId();
    // Get instance field reference: public System.Int32 SelectedIndex
    [[deprecated]] int& dyn_SelectedIndex();
    // Get instance field reference: public System.Int32 MidiNote
    [[deprecated]] int& dyn_MidiNote();
    // Get instance field reference: public System.Boolean IsPressureSensitive
    [[deprecated]] bool& dyn_IsPressureSensitive();
    // Get instance field reference: public System.Boolean IsSpawner
    [[deprecated]] bool& dyn_IsSpawner();
    // Get instance field reference: public System.Int32 Pitch
    [[deprecated]] int& dyn_Pitch();
    // Get instance field reference: public System.Single Size
    [[deprecated]] float& dyn_Size();
    // Get instance field reference: public System.Single[] Position
    [[deprecated]] ::ArrayW<float>& dyn_Position();
    // Get instance field reference: public System.Single[] Rotation
    [[deprecated]] ::ArrayW<float>& dyn_Rotation();
    // Get instance field reference: public VROSC.TransformDataModel TransformData
    [[deprecated]] ::VROSC::TransformDataModel*& dyn_TransformData();
    // public System.Void Upgrade(System.Int32 savedVersion)
    // Offset: 0x8EB70C
    void Upgrade(int savedVersion);
    // public System.Void .ctor()
    // Offset: 0x8EB800
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EmpadDataModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::EmpadDataModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EmpadDataModel*, creationType>()));
    }
  }; // VROSC.EmpadDataModel
  #pragma pack(pop)
  static check_size<sizeof(EmpadDataModel), 64 + sizeof(::VROSC::TransformDataModel*)> __VROSC_EmpadDataModelSizeCheck;
  static_assert(sizeof(EmpadDataModel) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::EmpadDataModel::Upgrade
// Il2CppName: Upgrade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadDataModel::*)(int)>(&VROSC::EmpadDataModel::Upgrade)> {
  static const MethodInfo* get() {
    static auto* savedVersion = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadDataModel*), "Upgrade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{savedVersion});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadDataModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
