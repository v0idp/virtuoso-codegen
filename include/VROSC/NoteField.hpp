// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.Note
#include "VROSC/Note.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: NoteNode
  class NoteNode;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: NoteField
  class NoteField;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::NoteField);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::NoteField*, "VROSC", "NoteField");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.NoteField
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteField : public ::Il2CppObject {
    public:
    public:
    // protected VROSC.Note EnteredValue
    // Size: 0x4
    // Offset: 0x10
    ::VROSC::Note EnteredValue;
    // Field size check
    static_assert(sizeof(::VROSC::Note) == 0x4);
    // Padding between fields: EnteredValue and: ConnectedValue
    char __padding0[0x4] = {};
    // public VROSC.NoteNode ConnectedValue
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::NoteNode* ConnectedValue;
    // Field size check
    static_assert(sizeof(::VROSC::NoteNode*) == 0x8);
    public:
    // Get instance field reference: protected VROSC.Note EnteredValue
    [[deprecated("Use field access instead!")]] ::VROSC::Note& dyn_EnteredValue();
    // Get instance field reference: public VROSC.NoteNode ConnectedValue
    [[deprecated("Use field access instead!")]] ::VROSC::NoteNode*& dyn_ConnectedValue();
    // public System.Int32 get_Value()
    // Offset: 0xC58850
    int get_Value();
    // public System.Void .ctor()
    // Offset: 0xC588E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteField* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteField::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteField*, creationType>()));
    }
  }; // VROSC.NoteField
  #pragma pack(pop)
  static check_size<sizeof(NoteField), 24 + sizeof(::VROSC::NoteNode*)> __VROSC_NoteFieldSizeCheck;
  static_assert(sizeof(NoteField) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::NoteField::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::NoteField::*)()>(&VROSC::NoteField::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteField*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteField::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
