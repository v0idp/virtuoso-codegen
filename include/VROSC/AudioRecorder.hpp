// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: HelmRecorder
  class HelmRecorder;
  // Forward declaring type: MicrophoneRecorder
  class MicrophoneRecorder;
  // Forward declaring type: MixerGroupRecorder
  class MixerGroupRecorder;
  // Forward declaring type: MasterRecorder
  class MasterRecorder;
  // Forward declaring type: SoundSource
  struct SoundSource;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: AudioRecorder
  class AudioRecorder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AudioRecorder);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AudioRecorder*, "VROSC", "AudioRecorder");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AudioRecorder
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioRecorder : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.HelmRecorder _helmRecorder
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::HelmRecorder* helmRecorder;
    // Field size check
    static_assert(sizeof(::VROSC::HelmRecorder*) == 0x8);
    // private VROSC.MicrophoneRecorder _microphoneRecorder
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::MicrophoneRecorder* microphoneRecorder;
    // Field size check
    static_assert(sizeof(::VROSC::MicrophoneRecorder*) == 0x8);
    // private VROSC.MixerGroupRecorder _samplerRecorder
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::MixerGroupRecorder* samplerRecorder;
    // Field size check
    static_assert(sizeof(::VROSC::MixerGroupRecorder*) == 0x8);
    // private VROSC.MasterRecorder _masterRecorder
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::MasterRecorder* masterRecorder;
    // Field size check
    static_assert(sizeof(::VROSC::MasterRecorder*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public System.Int32 BufferSize
    static int _get_BufferSize();
    // Set static field: static public System.Int32 BufferSize
    static void _set_BufferSize(int value);
    // Get static field: static private System.Int32 <Channels>k__BackingField
    static int _get_$Channels$k__BackingField();
    // Set static field: static private System.Int32 <Channels>k__BackingField
    static void _set_$Channels$k__BackingField(int value);
    // Get static field: static public System.Int32 SampleRate
    static int _get_SampleRate();
    // Set static field: static public System.Int32 SampleRate
    static void _set_SampleRate(int value);
    // static field const value: static public System.Int32 MaxBufferSize
    static constexpr const int MaxBufferSize = 512;
    // Get static field: static public System.Int32 MaxBufferSize
    static int _get_MaxBufferSize();
    // Set static field: static public System.Int32 MaxBufferSize
    static void _set_MaxBufferSize(int value);
    // static field const value: static public System.Int32 MaxChannels
    static constexpr const int MaxChannels = 2;
    // Get static field: static public System.Int32 MaxChannels
    static int _get_MaxChannels();
    // Set static field: static public System.Int32 MaxChannels
    static void _set_MaxChannels(int value);
    // static field const value: static public System.Int32 DesiredSampleRate
    static constexpr const int DesiredSampleRate = 48000;
    // Get static field: static public System.Int32 DesiredSampleRate
    static int _get_DesiredSampleRate();
    // Set static field: static public System.Int32 DesiredSampleRate
    static void _set_DesiredSampleRate(int value);
    // static field const value: static public System.Single RecordingBufferLengthSeconds
    static constexpr const float RecordingBufferLengthSeconds = 1;
    // Get static field: static public System.Single RecordingBufferLengthSeconds
    static float _get_RecordingBufferLengthSeconds();
    // Set static field: static public System.Single RecordingBufferLengthSeconds
    static void _set_RecordingBufferLengthSeconds(float value);
    // static field const value: static public System.Single AudioLatency
    static constexpr const float AudioLatency = 0.06;
    // Get static field: static public System.Single AudioLatency
    static float _get_AudioLatency();
    // Set static field: static public System.Single AudioLatency
    static void _set_AudioLatency(float value);
    // Get instance field reference: private VROSC.HelmRecorder _helmRecorder
    [[deprecated]] ::VROSC::HelmRecorder*& dyn__helmRecorder();
    // Get instance field reference: private VROSC.MicrophoneRecorder _microphoneRecorder
    [[deprecated]] ::VROSC::MicrophoneRecorder*& dyn__microphoneRecorder();
    // Get instance field reference: private VROSC.MixerGroupRecorder _samplerRecorder
    [[deprecated]] ::VROSC::MixerGroupRecorder*& dyn__samplerRecorder();
    // Get instance field reference: private VROSC.MasterRecorder _masterRecorder
    [[deprecated]] ::VROSC::MasterRecorder*& dyn__masterRecorder();
    // static public System.Int32 get_Channels()
    // Offset: 0x971898
    static int get_Channels();
    // static private System.Void set_Channels(System.Int32 value)
    // Offset: 0x9718FC
    static void set_Channels(int value);
    // public System.Void Setup()
    // Offset: 0x96BA60
    void Setup();
    // private System.Void ResetAudioBufferSize()
    // Offset: 0x971964
    void ResetAudioBufferSize();
    // public System.Void StartRecording(VROSC.SoundSource soundSource, System.Action`1<System.Single[]> recordingFilledCallback, System.Int32 samples, System.Single[] fillArray, System.Boolean overdub, System.Int32 callbackAfterLength)
    // Offset: 0x971A24
    void StartRecording(::VROSC::SoundSource soundSource, ::System::Action_1<::ArrayW<float>>* recordingFilledCallback, int samples, ::ArrayW<float> fillArray, bool overdub, int callbackAfterLength);
    // public System.Single[] StealRecording(VROSC.SoundSource soundSource, System.Boolean clear, System.Boolean stealEvenIfNotRecording)
    // Offset: 0x971B4C
    ::ArrayW<float> StealRecording(::VROSC::SoundSource soundSource, bool clear, bool stealEvenIfNotRecording);
    // public System.Single[] GetRecordingSpan(VROSC.SoundSource soundSource, System.Int32 startIndex, System.Int32 endIndex, out System.Int32 currentIndex)
    // Offset: 0x971BC8
    ::ArrayW<float> GetRecordingSpan(::VROSC::SoundSource soundSource, int startIndex, int endIndex, ByRef<int> currentIndex);
    // public System.Single[] StopRecording(VROSC.SoundSource soundSource)
    // Offset: 0x971C4C
    ::ArrayW<float> StopRecording(::VROSC::SoundSource soundSource);
    // public System.Void SetMicrophoneSamples(System.Single[] buffer)
    // Offset: 0x971CB8
    void SetMicrophoneSamples(::ArrayW<float> buffer);
    // public System.Void ClearMicrophoneBuffer()
    // Offset: 0x971CD4
    void ClearMicrophoneBuffer();
    // public System.Single[] GetRawMicrophoneRecordingData()
    // Offset: 0x971CF0
    ::ArrayW<float> GetRawMicrophoneRecordingData();
    // public System.Boolean IsRecording(VROSC.SoundSource soundSource)
    // Offset: 0x971D0C
    bool IsRecording(::VROSC::SoundSource soundSource);
    // public System.Boolean IsRecording()
    // Offset: 0x971DF4
    bool IsRecording();
    // public System.Void .ctor()
    // Offset: 0x971E54
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioRecorder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AudioRecorder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioRecorder*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x971E5C
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // VROSC.AudioRecorder
  #pragma pack(pop)
  static check_size<sizeof(AudioRecorder), 48 + sizeof(::VROSC::MasterRecorder*)> __VROSC_AudioRecorderSizeCheck;
  static_assert(sizeof(AudioRecorder) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AudioRecorder::get_Channels
// Il2CppName: get_Channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&VROSC::AudioRecorder::get_Channels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioRecorder*), "get_Channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioRecorder::set_Channels
// Il2CppName: set_Channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&VROSC::AudioRecorder::set_Channels)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioRecorder*), "set_Channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::AudioRecorder::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioRecorder::*)()>(&VROSC::AudioRecorder::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioRecorder*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioRecorder::ResetAudioBufferSize
// Il2CppName: ResetAudioBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioRecorder::*)()>(&VROSC::AudioRecorder::ResetAudioBufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioRecorder*), "ResetAudioBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioRecorder::StartRecording
// Il2CppName: StartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioRecorder::*)(::VROSC::SoundSource, ::System::Action_1<::ArrayW<float>>*, int, ::ArrayW<float>, bool, int)>(&VROSC::AudioRecorder::StartRecording)> {
  static const MethodInfo* get() {
    static auto* soundSource = &::il2cpp_utils::GetClassFromName("VROSC", "SoundSource")->byval_arg;
    static auto* recordingFilledCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)})->byval_arg;
    static auto* samples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fillArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* overdub = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* callbackAfterLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioRecorder*), "StartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundSource, recordingFilledCallback, samples, fillArray, overdub, callbackAfterLength});
  }
};
// Writing MetadataGetter for method: VROSC::AudioRecorder::StealRecording
// Il2CppName: StealRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (VROSC::AudioRecorder::*)(::VROSC::SoundSource, bool, bool)>(&VROSC::AudioRecorder::StealRecording)> {
  static const MethodInfo* get() {
    static auto* soundSource = &::il2cpp_utils::GetClassFromName("VROSC", "SoundSource")->byval_arg;
    static auto* clear = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* stealEvenIfNotRecording = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioRecorder*), "StealRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundSource, clear, stealEvenIfNotRecording});
  }
};
// Writing MetadataGetter for method: VROSC::AudioRecorder::GetRecordingSpan
// Il2CppName: GetRecordingSpan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (VROSC::AudioRecorder::*)(::VROSC::SoundSource, int, int, ByRef<int>)>(&VROSC::AudioRecorder::GetRecordingSpan)> {
  static const MethodInfo* get() {
    static auto* soundSource = &::il2cpp_utils::GetClassFromName("VROSC", "SoundSource")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* currentIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioRecorder*), "GetRecordingSpan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundSource, startIndex, endIndex, currentIndex});
  }
};
// Writing MetadataGetter for method: VROSC::AudioRecorder::StopRecording
// Il2CppName: StopRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (VROSC::AudioRecorder::*)(::VROSC::SoundSource)>(&VROSC::AudioRecorder::StopRecording)> {
  static const MethodInfo* get() {
    static auto* soundSource = &::il2cpp_utils::GetClassFromName("VROSC", "SoundSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioRecorder*), "StopRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundSource});
  }
};
// Writing MetadataGetter for method: VROSC::AudioRecorder::SetMicrophoneSamples
// Il2CppName: SetMicrophoneSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioRecorder::*)(::ArrayW<float>)>(&VROSC::AudioRecorder::SetMicrophoneSamples)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioRecorder*), "SetMicrophoneSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: VROSC::AudioRecorder::ClearMicrophoneBuffer
// Il2CppName: ClearMicrophoneBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioRecorder::*)()>(&VROSC::AudioRecorder::ClearMicrophoneBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioRecorder*), "ClearMicrophoneBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioRecorder::GetRawMicrophoneRecordingData
// Il2CppName: GetRawMicrophoneRecordingData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (VROSC::AudioRecorder::*)()>(&VROSC::AudioRecorder::GetRawMicrophoneRecordingData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioRecorder*), "GetRawMicrophoneRecordingData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioRecorder::IsRecording
// Il2CppName: IsRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::AudioRecorder::*)(::VROSC::SoundSource)>(&VROSC::AudioRecorder::IsRecording)> {
  static const MethodInfo* get() {
    static auto* soundSource = &::il2cpp_utils::GetClassFromName("VROSC", "SoundSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioRecorder*), "IsRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundSource});
  }
};
// Writing MetadataGetter for method: VROSC::AudioRecorder::IsRecording
// Il2CppName: IsRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::AudioRecorder::*)()>(&VROSC::AudioRecorder::IsRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioRecorder*), "IsRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioRecorder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::AudioRecorder::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VROSC::AudioRecorder::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioRecorder*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
