// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: LineRenderer
  class LineRenderer;
  // Forward declaring type: Gradient
  class Gradient;
  // Forward declaring type: GradientAlphaKey
  struct GradientAlphaKey;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: SmoothMovement
  class SmoothMovement;
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: InputSettings
  class InputSettings;
  // Skipping declaration: DisablingReason because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: PointingLaser
  class PointingLaser;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::PointingLaser);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::PointingLaser*, "VROSC", "PointingLaser");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.PointingLaser
  // [TokenAttribute] Offset: FFFFFFFF
  class PointingLaser : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::PointingLaser::DisablingReason
    struct DisablingReason;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: VROSC.PointingLaser/VROSC.DisablingReason
    // [TokenAttribute] Offset: FFFFFFFF
    struct DisablingReason/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DisablingReason
      constexpr DisablingReason(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public VROSC.PointingLaser/VROSC.DisablingReason GrabbingObject
      static constexpr const int GrabbingObject = 0;
      // Get static field: static public VROSC.PointingLaser/VROSC.DisablingReason GrabbingObject
      static ::VROSC::PointingLaser::DisablingReason _get_GrabbingObject();
      // Set static field: static public VROSC.PointingLaser/VROSC.DisablingReason GrabbingObject
      static void _set_GrabbingObject(::VROSC::PointingLaser::DisablingReason value);
      // static field const value: static public VROSC.PointingLaser/VROSC.DisablingReason PressingObject
      static constexpr const int PressingObject = 1;
      // Get static field: static public VROSC.PointingLaser/VROSC.DisablingReason PressingObject
      static ::VROSC::PointingLaser::DisablingReason _get_PressingObject();
      // Set static field: static public VROSC.PointingLaser/VROSC.DisablingReason PressingObject
      static void _set_PressingObject(::VROSC::PointingLaser::DisablingReason value);
      // static field const value: static public VROSC.PointingLaser/VROSC.DisablingReason HoveringObject
      static constexpr const int HoveringObject = 2;
      // Get static field: static public VROSC.PointingLaser/VROSC.DisablingReason HoveringObject
      static ::VROSC::PointingLaser::DisablingReason _get_HoveringObject();
      // Set static field: static public VROSC.PointingLaser/VROSC.DisablingReason HoveringObject
      static void _set_HoveringObject(::VROSC::PointingLaser::DisablingReason value);
      // static field const value: static public VROSC.PointingLaser/VROSC.DisablingReason HoveringObjectDisablesPointing
      static constexpr const int HoveringObjectDisablesPointing = 3;
      // Get static field: static public VROSC.PointingLaser/VROSC.DisablingReason HoveringObjectDisablesPointing
      static ::VROSC::PointingLaser::DisablingReason _get_HoveringObjectDisablesPointing();
      // Set static field: static public VROSC.PointingLaser/VROSC.DisablingReason HoveringObjectDisablesPointing
      static void _set_HoveringObjectDisablesPointing(::VROSC::PointingLaser::DisablingReason value);
      // static field const value: static public VROSC.PointingLaser/VROSC.DisablingReason DashboardOpen
      static constexpr const int DashboardOpen = 4;
      // Get static field: static public VROSC.PointingLaser/VROSC.DisablingReason DashboardOpen
      static ::VROSC::PointingLaser::DisablingReason _get_DashboardOpen();
      // Set static field: static public VROSC.PointingLaser/VROSC.DisablingReason DashboardOpen
      static void _set_DashboardOpen(::VROSC::PointingLaser::DisablingReason value);
      // static field const value: static public VROSC.PointingLaser/VROSC.DisablingReason InsideInstrument
      static constexpr const int InsideInstrument = 5;
      // Get static field: static public VROSC.PointingLaser/VROSC.DisablingReason InsideInstrument
      static ::VROSC::PointingLaser::DisablingReason _get_InsideInstrument();
      // Set static field: static public VROSC.PointingLaser/VROSC.DisablingReason InsideInstrument
      static void _set_InsideInstrument(::VROSC::PointingLaser::DisablingReason value);
      // static field const value: static public VROSC.PointingLaser/VROSC.DisablingReason UsingUIHelper
      static constexpr const int UsingUIHelper = 6;
      // Get static field: static public VROSC.PointingLaser/VROSC.DisablingReason UsingUIHelper
      static ::VROSC::PointingLaser::DisablingReason _get_UsingUIHelper();
      // Set static field: static public VROSC.PointingLaser/VROSC.DisablingReason UsingUIHelper
      static void _set_UsingUIHelper(::VROSC::PointingLaser::DisablingReason value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated]] int& dyn_value__();
    }; // VROSC.PointingLaser/VROSC.DisablingReason
    #pragma pack(pop)
    static check_size<sizeof(PointingLaser::DisablingReason), 0 + sizeof(int)> __VROSC_PointingLaser_DisablingReasonSizeCheck;
    static_assert(sizeof(PointingLaser::DisablingReason) == 0x4);
    public:
    // private UnityEngine.GameObject _endDot
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* endDot;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.LineRenderer _laser
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::LineRenderer* laser;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    // private VROSC.SmoothMovement _smoothMovement
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::SmoothMovement* smoothMovement;
    // Field size check
    static_assert(sizeof(::VROSC::SmoothMovement*) == 0x8);
    // private VROSC.InputDevice _device
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::InputDevice* device;
    // Field size check
    static_assert(sizeof(::VROSC::InputDevice*) == 0x8);
    // private VROSC.InputSettings _settings
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::InputSettings* settings;
    // Field size check
    static_assert(sizeof(::VROSC::InputSettings*) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.PointingLaser/VROSC.DisablingReason> _disablingReasons
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::VROSC::PointingLaser::DisablingReason>* disablingReasons;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::PointingLaser::DisablingReason>*) == 0x8);
    // public System.Action`2<System.Boolean,VROSC.PointingLaser/VROSC.DisablingReason> OnPointingDisabledChanged
    // Size: 0x8
    // Offset: 0x48
    ::System::Action_2<bool, ::VROSC::PointingLaser::DisablingReason>* OnPointingDisabledChanged;
    // Field size check
    static_assert(sizeof(::System::Action_2<bool, ::VROSC::PointingLaser::DisablingReason>*) == 0x8);
    // private System.Boolean <PointingDisabled>k__BackingField
    // Size: 0x1
    // Offset: 0x50
    bool PointingDisabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <Dimmed>k__BackingField
    // Size: 0x1
    // Offset: 0x51
    bool Dimmed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Dimmed and: laserPositions
    char __padding8[0x6] = {};
    // private UnityEngine.Vector3[] _laserPositions
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::Vector3> laserPositions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Gradient _normalGradient
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Gradient* normalGradient;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // private UnityEngine.Gradient _dimGradient
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Gradient* dimGradient;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // private UnityEngine.Gradient _fadingGradient
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Gradient* fadingGradient;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // private System.Single _fadeTime
    // Size: 0x4
    // Offset: 0x78
    float fadeTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _fadingTimer
    // Size: 0x4
    // Offset: 0x7C
    float fadingTimer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.GameObject _endDot
    [[deprecated]] ::UnityEngine::GameObject*& dyn__endDot();
    // Get instance field reference: private UnityEngine.LineRenderer _laser
    [[deprecated]] ::UnityEngine::LineRenderer*& dyn__laser();
    // Get instance field reference: private VROSC.SmoothMovement _smoothMovement
    [[deprecated]] ::VROSC::SmoothMovement*& dyn__smoothMovement();
    // Get instance field reference: private VROSC.InputDevice _device
    [[deprecated]] ::VROSC::InputDevice*& dyn__device();
    // Get instance field reference: private VROSC.InputSettings _settings
    [[deprecated]] ::VROSC::InputSettings*& dyn__settings();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.PointingLaser/VROSC.DisablingReason> _disablingReasons
    [[deprecated]] ::System::Collections::Generic::List_1<::VROSC::PointingLaser::DisablingReason>*& dyn__disablingReasons();
    // Get instance field reference: public System.Action`2<System.Boolean,VROSC.PointingLaser/VROSC.DisablingReason> OnPointingDisabledChanged
    [[deprecated]] ::System::Action_2<bool, ::VROSC::PointingLaser::DisablingReason>*& dyn_OnPointingDisabledChanged();
    // Get instance field reference: private System.Boolean <PointingDisabled>k__BackingField
    [[deprecated]] bool& dyn_$PointingDisabled$k__BackingField();
    // Get instance field reference: private System.Boolean <Dimmed>k__BackingField
    [[deprecated]] bool& dyn_$Dimmed$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3[] _laserPositions
    [[deprecated]] ::ArrayW<::UnityEngine::Vector3>& dyn__laserPositions();
    // Get instance field reference: private UnityEngine.Gradient _normalGradient
    [[deprecated]] ::UnityEngine::Gradient*& dyn__normalGradient();
    // Get instance field reference: private UnityEngine.Gradient _dimGradient
    [[deprecated]] ::UnityEngine::Gradient*& dyn__dimGradient();
    // Get instance field reference: private UnityEngine.Gradient _fadingGradient
    [[deprecated]] ::UnityEngine::Gradient*& dyn__fadingGradient();
    // Get instance field reference: private System.Single _fadeTime
    [[deprecated]] float& dyn__fadeTime();
    // Get instance field reference: private System.Single _fadingTimer
    [[deprecated]] float& dyn__fadingTimer();
    // public System.Boolean get_PointingDisabled()
    // Offset: 0xAE2108
    bool get_PointingDisabled();
    // private System.Void set_PointingDisabled(System.Boolean value)
    // Offset: 0xAE2110
    void set_PointingDisabled(bool value);
    // public System.Boolean get_Dimmed()
    // Offset: 0xAE211C
    bool get_Dimmed();
    // private System.Void set_Dimmed(System.Boolean value)
    // Offset: 0xAE2124
    void set_Dimmed(bool value);
    // public System.Void SetPointingDisabled(System.Boolean disabled, VROSC.PointingLaser/VROSC.DisablingReason reason)
    // Offset: 0xAE2130
    void SetPointingDisabled(bool disabled, ::VROSC::PointingLaser::DisablingReason reason);
    // public System.Void Setup(VROSC.InputDevice controller, VROSC.InputSettings settings)
    // Offset: 0xAE233C
    void Setup(::VROSC::InputDevice* controller, ::VROSC::InputSettings* settings);
    // private System.Void UpdatePointingDisabled(System.Boolean disabled, VROSC.PointingLaser/VROSC.DisablingReason reason)
    // Offset: 0xAE2228
    void UpdatePointingDisabled(bool disabled, ::VROSC::PointingLaser::DisablingReason reason);
    // public System.Void SetDotPosition(UnityEngine.Vector3 position)
    // Offset: 0xAE2454
    void SetDotPosition(::UnityEngine::Vector3 position);
    // public System.Void SetDimmed(System.Boolean dimmed)
    // Offset: 0xAE2564
    void SetDimmed(bool dimmed);
    // private System.Void Update()
    // Offset: 0xAE25F4
    void Update();
    // private UnityEngine.GradientAlphaKey LerpAlphaKey(UnityEngine.Gradient a, UnityEngine.Gradient b, System.Int32 key, System.Single value)
    // Offset: 0xAE2738
    ::UnityEngine::GradientAlphaKey LerpAlphaKey(::UnityEngine::Gradient* a, ::UnityEngine::Gradient* b, int key, float value);
    // public System.Void .ctor()
    // Offset: 0xAE2864
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PointingLaser* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PointingLaser::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PointingLaser*, creationType>()));
    }
  }; // VROSC.PointingLaser
  #pragma pack(pop)
  static check_size<sizeof(PointingLaser), 124 + sizeof(float)> __VROSC_PointingLaserSizeCheck;
  static_assert(sizeof(PointingLaser) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::PointingLaser::DisablingReason, "VROSC", "PointingLaser/DisablingReason");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::PointingLaser::get_PointingDisabled
// Il2CppName: get_PointingDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::PointingLaser::*)()>(&VROSC::PointingLaser::get_PointingDisabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PointingLaser*), "get_PointingDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PointingLaser::set_PointingDisabled
// Il2CppName: set_PointingDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PointingLaser::*)(bool)>(&VROSC::PointingLaser::set_PointingDisabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PointingLaser*), "set_PointingDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::PointingLaser::get_Dimmed
// Il2CppName: get_Dimmed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::PointingLaser::*)()>(&VROSC::PointingLaser::get_Dimmed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PointingLaser*), "get_Dimmed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PointingLaser::set_Dimmed
// Il2CppName: set_Dimmed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PointingLaser::*)(bool)>(&VROSC::PointingLaser::set_Dimmed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PointingLaser*), "set_Dimmed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::PointingLaser::SetPointingDisabled
// Il2CppName: SetPointingDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PointingLaser::*)(bool, ::VROSC::PointingLaser::DisablingReason)>(&VROSC::PointingLaser::SetPointingDisabled)> {
  static const MethodInfo* get() {
    static auto* disabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("VROSC", "PointingLaser/DisablingReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PointingLaser*), "SetPointingDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disabled, reason});
  }
};
// Writing MetadataGetter for method: VROSC::PointingLaser::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PointingLaser::*)(::VROSC::InputDevice*, ::VROSC::InputSettings*)>(&VROSC::PointingLaser::Setup)> {
  static const MethodInfo* get() {
    static auto* controller = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("VROSC", "InputSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PointingLaser*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controller, settings});
  }
};
// Writing MetadataGetter for method: VROSC::PointingLaser::UpdatePointingDisabled
// Il2CppName: UpdatePointingDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PointingLaser::*)(bool, ::VROSC::PointingLaser::DisablingReason)>(&VROSC::PointingLaser::UpdatePointingDisabled)> {
  static const MethodInfo* get() {
    static auto* disabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("VROSC", "PointingLaser/DisablingReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PointingLaser*), "UpdatePointingDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disabled, reason});
  }
};
// Writing MetadataGetter for method: VROSC::PointingLaser::SetDotPosition
// Il2CppName: SetDotPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PointingLaser::*)(::UnityEngine::Vector3)>(&VROSC::PointingLaser::SetDotPosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PointingLaser*), "SetDotPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: VROSC::PointingLaser::SetDimmed
// Il2CppName: SetDimmed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PointingLaser::*)(bool)>(&VROSC::PointingLaser::SetDimmed)> {
  static const MethodInfo* get() {
    static auto* dimmed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PointingLaser*), "SetDimmed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dimmed});
  }
};
// Writing MetadataGetter for method: VROSC::PointingLaser::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PointingLaser::*)()>(&VROSC::PointingLaser::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PointingLaser*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PointingLaser::LerpAlphaKey
// Il2CppName: LerpAlphaKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GradientAlphaKey (VROSC::PointingLaser::*)(::UnityEngine::Gradient*, ::UnityEngine::Gradient*, int, float)>(&VROSC::PointingLaser::LerpAlphaKey)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Gradient")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Gradient")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PointingLaser*), "LerpAlphaKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, key, value});
  }
};
// Writing MetadataGetter for method: VROSC::PointingLaser::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
