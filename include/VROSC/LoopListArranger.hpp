// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopStation
  class LoopStation;
  // Forward declaring type: LoopStationGroup
  class LoopStationGroup;
  // Forward declaring type: LoopPlayer
  class LoopPlayer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopListArranger
  class LoopListArranger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::LoopListArranger);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LoopListArranger*, "VROSC", "LoopListArranger");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.LoopListArranger
  // [TokenAttribute] Offset: FFFFFFFF
  class LoopListArranger : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::LoopListArranger::$$c
    class $$c;
    public:
    // private System.Boolean _onlyAllowRearrangeOfLoops
    // Size: 0x1
    // Offset: 0x18
    bool onlyAllowRearrangeOfLoops;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: onlyAllowRearrangeOfLoops and: loopHeightOffset
    char __padding0[0x3] = {};
    // private System.Single _loopHeightOffset
    // Size: 0x4
    // Offset: 0x1C
    float loopHeightOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.RectTransform _dropPositionPreview
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::RectTransform* dropPositionPreview;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.Transform _loopsParent
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* loopsParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private VROSC.LoopStation _loopStation
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::LoopStation* loopStation;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStation*) == 0x8);
    // private VROSC.LoopStationGroup _owner
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::LoopStationGroup* owner;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationGroup*) == 0x8);
    // private VROSC.LoopPlayer _hoveringingPlayer
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::LoopPlayer* hoveringingPlayer;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlayer*) == 0x8);
    // private System.Boolean _sortNeeded
    // Size: 0x1
    // Offset: 0x48
    bool sortNeeded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _dataShouldUpdate
    // Size: 0x1
    // Offset: 0x49
    bool dataShouldUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: dataShouldUpdate and: OnSortComplete
    char __padding8[0x6] = {};
    // public System.Action OnSortComplete
    // Size: 0x8
    // Offset: 0x50
    ::System::Action* OnSortComplete;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Boolean _onlyAllowRearrangeOfLoops
    [[deprecated("Use field access instead!")]] bool& dyn__onlyAllowRearrangeOfLoops();
    // Get instance field reference: private System.Single _loopHeightOffset
    [[deprecated("Use field access instead!")]] float& dyn__loopHeightOffset();
    // Get instance field reference: private UnityEngine.RectTransform _dropPositionPreview
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__dropPositionPreview();
    // Get instance field reference: private UnityEngine.Transform _loopsParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__loopsParent();
    // Get instance field reference: private VROSC.LoopStation _loopStation
    [[deprecated("Use field access instead!")]] ::VROSC::LoopStation*& dyn__loopStation();
    // Get instance field reference: private VROSC.LoopStationGroup _owner
    [[deprecated("Use field access instead!")]] ::VROSC::LoopStationGroup*& dyn__owner();
    // Get instance field reference: private VROSC.LoopPlayer _hoveringingPlayer
    [[deprecated("Use field access instead!")]] ::VROSC::LoopPlayer*& dyn__hoveringingPlayer();
    // Get instance field reference: private System.Boolean _sortNeeded
    [[deprecated("Use field access instead!")]] bool& dyn__sortNeeded();
    // Get instance field reference: private System.Boolean _dataShouldUpdate
    [[deprecated("Use field access instead!")]] bool& dyn__dataShouldUpdate();
    // Get instance field reference: public System.Action OnSortComplete
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnSortComplete();
    // public System.Single get_ListHeight()
    // Offset: 0x19B4C88
    float get_ListHeight();
    // public System.Boolean get_OnlyAllowRearrangeOfLoops()
    // Offset: 0x19B4D84
    bool get_OnlyAllowRearrangeOfLoops();
    // public System.Void .ctor()
    // Offset: 0x19B550C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoopListArranger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::LoopListArranger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoopListArranger*, creationType>()));
    }
    // public System.Void Setup(VROSC.LoopStationGroup loopStationGroup, VROSC.LoopStation loopStation, UnityEngine.Transform loopsParent)
    // Offset: 0x19B4D8C
    void Setup(::VROSC::LoopStationGroup* loopStationGroup, ::VROSC::LoopStation* loopStation, ::UnityEngine::Transform* loopsParent);
    // private System.Void OnDestroy()
    // Offset: 0x19B4EEC
    void OnDestroy();
    // public System.Void SetHovering(VROSC.LoopPlayer hoveringPlayer)
    // Offset: 0x19B5018
    void SetHovering(::VROSC::LoopPlayer* hoveringPlayer);
    // private System.Void Update()
    // Offset: 0x19B503C
    void Update();
    // private System.Void LoopCountChanged(VROSC.LoopPlayer sender)
    // Offset: 0x19B53B4
    void LoopCountChanged(::VROSC::LoopPlayer* sender);
    // private System.Void Changed(System.Boolean alsoUpdateData)
    // Offset: 0x19B5028
    void Changed(bool alsoUpdateData);
    // private System.Void SortLoops()
    // Offset: 0x19B504C
    void SortLoops();
    // private System.Single GetListHeight()
    // Offset: 0x19B4C8C
    float GetListHeight();
    // public System.Int32 GetListIndexByPosition(VROSC.LoopPlayer loopPlayer)
    // Offset: 0x19B53C0
    int GetListIndexByPosition(::VROSC::LoopPlayer* loopPlayer);
    // public UnityEngine.Vector3 GetLooperPositionByOrderInList(System.Int32 order)
    // Offset: 0x19B5498
    ::UnityEngine::Vector3 GetLooperPositionByOrderInList(int order);
  }; // VROSC.LoopListArranger
  #pragma pack(pop)
  static check_size<sizeof(LoopListArranger), 80 + sizeof(::System::Action*)> __VROSC_LoopListArrangerSizeCheck;
  static_assert(sizeof(LoopListArranger) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::LoopListArranger::get_ListHeight
// Il2CppName: get_ListHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::LoopListArranger::*)()>(&VROSC::LoopListArranger::get_ListHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopListArranger*), "get_ListHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopListArranger::get_OnlyAllowRearrangeOfLoops
// Il2CppName: get_OnlyAllowRearrangeOfLoops
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopListArranger::*)()>(&VROSC::LoopListArranger::get_OnlyAllowRearrangeOfLoops)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopListArranger*), "get_OnlyAllowRearrangeOfLoops", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopListArranger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::LoopListArranger::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopListArranger::*)(::VROSC::LoopStationGroup*, ::VROSC::LoopStation*, ::UnityEngine::Transform*)>(&VROSC::LoopListArranger::Setup)> {
  static const MethodInfo* get() {
    static auto* loopStationGroup = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStationGroup")->byval_arg;
    static auto* loopStation = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStation")->byval_arg;
    static auto* loopsParent = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopListArranger*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopStationGroup, loopStation, loopsParent});
  }
};
// Writing MetadataGetter for method: VROSC::LoopListArranger::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopListArranger::*)()>(&VROSC::LoopListArranger::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopListArranger*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopListArranger::SetHovering
// Il2CppName: SetHovering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopListArranger::*)(::VROSC::LoopPlayer*)>(&VROSC::LoopListArranger::SetHovering)> {
  static const MethodInfo* get() {
    static auto* hoveringPlayer = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopListArranger*), "SetHovering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hoveringPlayer});
  }
};
// Writing MetadataGetter for method: VROSC::LoopListArranger::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopListArranger::*)()>(&VROSC::LoopListArranger::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopListArranger*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopListArranger::LoopCountChanged
// Il2CppName: LoopCountChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopListArranger::*)(::VROSC::LoopPlayer*)>(&VROSC::LoopListArranger::LoopCountChanged)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopListArranger*), "LoopCountChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender});
  }
};
// Writing MetadataGetter for method: VROSC::LoopListArranger::Changed
// Il2CppName: Changed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopListArranger::*)(bool)>(&VROSC::LoopListArranger::Changed)> {
  static const MethodInfo* get() {
    static auto* alsoUpdateData = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopListArranger*), "Changed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alsoUpdateData});
  }
};
// Writing MetadataGetter for method: VROSC::LoopListArranger::SortLoops
// Il2CppName: SortLoops
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopListArranger::*)()>(&VROSC::LoopListArranger::SortLoops)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopListArranger*), "SortLoops", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopListArranger::GetListHeight
// Il2CppName: GetListHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::LoopListArranger::*)()>(&VROSC::LoopListArranger::GetListHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopListArranger*), "GetListHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopListArranger::GetListIndexByPosition
// Il2CppName: GetListIndexByPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::LoopListArranger::*)(::VROSC::LoopPlayer*)>(&VROSC::LoopListArranger::GetListIndexByPosition)> {
  static const MethodInfo* get() {
    static auto* loopPlayer = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopListArranger*), "GetListIndexByPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopPlayer});
  }
};
// Writing MetadataGetter for method: VROSC::LoopListArranger::GetLooperPositionByOrderInList
// Il2CppName: GetLooperPositionByOrderInList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::LoopListArranger::*)(int)>(&VROSC::LoopListArranger::GetLooperPositionByOrderInList)> {
  static const MethodInfo* get() {
    static auto* order = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopListArranger*), "GetLooperPositionByOrderInList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{order});
  }
};
