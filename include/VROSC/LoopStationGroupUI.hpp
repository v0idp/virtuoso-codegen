// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.LoopStationGroup
#include "VROSC/LoopStationGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Color because it is already included!
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopVolumeController
  class LoopVolumeController;
  // Forward declaring type: UIButton
  class UIButton;
  // Forward declaring type: LoopStationGroupPlaybackUI
  class LoopStationGroupPlaybackUI;
  // Forward declaring type: LoopStationLaunchpadHandler
  class LoopStationLaunchpadHandler;
  // Forward declaring type: InteractionDisabler
  class InteractionDisabler;
  // Forward declaring type: UIColorPicker
  class UIColorPicker;
  // Forward declaring type: AdjustableMesh
  class AdjustableMesh;
  // Forward declaring type: TransformDataController
  class TransformDataController;
  // Forward declaring type: LoopStation
  class LoopStation;
  // Forward declaring type: LoopPlaybackConfigOverride
  class LoopPlaybackConfigOverride;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopStationGroupUI
  class LoopStationGroupUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::LoopStationGroupUI);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LoopStationGroupUI*, "VROSC", "LoopStationGroupUI");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.LoopStationGroupUI
  // [TokenAttribute] Offset: FFFFFFFF
  class LoopStationGroupUI : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.String <DisplayName>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW DisplayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private TMPro.TextMeshPro _groupName
    // Size: 0x8
    // Offset: 0x20
    ::TMPro::TextMeshPro* groupName;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private UnityEngine.GameObject _ifEmptyState
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* ifEmptyState;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private VROSC.LoopVolumeController _volumeController
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::LoopVolumeController* volumeController;
    // Field size check
    static_assert(sizeof(::VROSC::LoopVolumeController*) == 0x8);
    // private VROSC.UIButton _renameButton
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::UIButton* renameButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.LoopStationGroupPlaybackUI _playBackUI
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::LoopStationGroupPlaybackUI* playBackUI;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationGroupPlaybackUI*) == 0x8);
    // private VROSC.LoopStationLaunchpadHandler _launchpadHandler
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::LoopStationLaunchpadHandler* launchpadHandler;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationLaunchpadHandler*) == 0x8);
    // private VROSC.InteractionDisabler _disabler
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::InteractionDisabler* disabler;
    // Field size check
    static_assert(sizeof(::VROSC::InteractionDisabler*) == 0x8);
    // private VROSC.UIColorPicker _colorPicker
    // Size: 0x8
    // Offset: 0x58
    ::VROSC::UIColorPicker* colorPicker;
    // Field size check
    static_assert(sizeof(::VROSC::UIColorPicker*) == 0x8);
    // private VROSC.AdjustableMesh _background
    // Size: 0x8
    // Offset: 0x60
    ::VROSC::AdjustableMesh* background;
    // Field size check
    static_assert(sizeof(::VROSC::AdjustableMesh*) == 0x8);
    // private VROSC.LoopStationGroup _owner
    // Size: 0x8
    // Offset: 0x68
    ::VROSC::LoopStationGroup* owner;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationGroup*) == 0x8);
    // private VROSC.LoopStation _loopStation
    // Size: 0x8
    // Offset: 0x70
    ::VROSC::LoopStation* loopStation;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStation*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.String <DisplayName>k__BackingField
    [[deprecated]] ::StringW& dyn_$DisplayName$k__BackingField();
    // Get instance field reference: private TMPro.TextMeshPro _groupName
    [[deprecated]] ::TMPro::TextMeshPro*& dyn__groupName();
    // Get instance field reference: private UnityEngine.GameObject _ifEmptyState
    [[deprecated]] ::UnityEngine::GameObject*& dyn__ifEmptyState();
    // Get instance field reference: private VROSC.LoopVolumeController _volumeController
    [[deprecated]] ::VROSC::LoopVolumeController*& dyn__volumeController();
    // Get instance field reference: private VROSC.UIButton _renameButton
    [[deprecated]] ::VROSC::UIButton*& dyn__renameButton();
    // Get instance field reference: private VROSC.LoopStationGroupPlaybackUI _playBackUI
    [[deprecated]] ::VROSC::LoopStationGroupPlaybackUI*& dyn__playBackUI();
    // Get instance field reference: private VROSC.LoopStationLaunchpadHandler _launchpadHandler
    [[deprecated]] ::VROSC::LoopStationLaunchpadHandler*& dyn__launchpadHandler();
    // Get instance field reference: private VROSC.InteractionDisabler _disabler
    [[deprecated]] ::VROSC::InteractionDisabler*& dyn__disabler();
    // Get instance field reference: private VROSC.UIColorPicker _colorPicker
    [[deprecated]] ::VROSC::UIColorPicker*& dyn__colorPicker();
    // Get instance field reference: private VROSC.AdjustableMesh _background
    [[deprecated]] ::VROSC::AdjustableMesh*& dyn__background();
    // Get instance field reference: private VROSC.LoopStationGroup _owner
    [[deprecated]] ::VROSC::LoopStationGroup*& dyn__owner();
    // Get instance field reference: private VROSC.LoopStation _loopStation
    [[deprecated]] ::VROSC::LoopStation*& dyn__loopStation();
    // public System.Single get_Volume()
    // Offset: 0x196E5F4
    float get_Volume();
    // public System.Boolean get_IsMuted()
    // Offset: 0x196E634
    bool get_IsMuted();
    // public System.String get_DisplayName()
    // Offset: 0x197122C
    ::StringW get_DisplayName();
    // private System.Void set_DisplayName(System.String value)
    // Offset: 0x1971224
    void set_DisplayName(::StringW value);
    // public VROSC.LoopPlaybackConfigOverride get_PlaybackConfig()
    // Offset: 0x196E68C
    ::VROSC::LoopPlaybackConfigOverride* get_PlaybackConfig();
    // private System.Void Awake()
    // Offset: 0x1971234
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x19717A4
    void OnDestroy();
    // public System.Void Setup(VROSC.LoopStationGroup owner, VROSC.LoopStation loopStation, VROSC.LoopStationGroup/VROSC.SetupVariables vars)
    // Offset: 0x1971D14
    void Setup(::VROSC::LoopStationGroup* owner, ::VROSC::LoopStation* loopStation, ::VROSC::LoopStationGroup::SetupVariables vars);
    // public System.Void SetInteractable(System.Boolean interactable)
    // Offset: 0x1971FF8
    void SetInteractable(bool interactable);
    // public System.Void SetVolumeOfGroup(System.Single volume)
    // Offset: 0x196EC18
    void SetVolumeOfGroup(float volume);
    // private System.Void GroupVolumeChanged(System.Single volume)
    // Offset: 0x197204C
    void GroupVolumeChanged(float volume);
    // private System.Void MuteChanged(System.Boolean mute)
    // Offset: 0x19721A8
    void MuteChanged(bool mute);
    // private System.Void SoloChanged(System.Boolean soloOn)
    // Offset: 0x19721F4
    void SoloChanged(bool soloOn);
    // private System.Void GlobalVolumeChanged(System.Single volume)
    // Offset: 0x1972260
    void GlobalVolumeChanged(float volume);
    // private System.Void UpdateVolumeOfAllGroups()
    // Offset: 0x1972090
    void UpdateVolumeOfAllGroups();
    // public System.Void ShowAsEmpty(System.Boolean shouldLookEmpty)
    // Offset: 0x1972264
    void ShowAsEmpty(bool shouldLookEmpty);
    // private System.Void RenameButtonPressed()
    // Offset: 0x19722A0
    void RenameButtonPressed();
    // public System.Void SetText(System.String text)
    // Offset: 0x1972474
    void SetText(::StringW text);
    // private System.Void KeyboardClosed()
    // Offset: 0x1972508
    void KeyboardClosed();
    // System.Void LoadLaunchPad(System.String padID, VROSC.TransformDataController transformData)
    // Offset: 0x196F2AC
    void LoadLaunchPad(::StringW padID, ::VROSC::TransformDataController* transformData);
    // private System.Void SetColor(UnityEngine.Color color)
    // Offset: 0x1971EA0
    void SetColor(::UnityEngine::Color color);
    // private System.Void Update()
    // Offset: 0x1972758
    void Update();
    // public System.Void .ctor()
    // Offset: 0x197281C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoopStationGroupUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::LoopStationGroupUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoopStationGroupUI*, creationType>()));
    }
  }; // VROSC.LoopStationGroupUI
  #pragma pack(pop)
  static check_size<sizeof(LoopStationGroupUI), 112 + sizeof(::VROSC::LoopStation*)> __VROSC_LoopStationGroupUISizeCheck;
  static_assert(sizeof(LoopStationGroupUI) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::get_Volume
// Il2CppName: get_Volume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::LoopStationGroupUI::*)()>(&VROSC::LoopStationGroupUI::get_Volume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "get_Volume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::get_IsMuted
// Il2CppName: get_IsMuted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopStationGroupUI::*)()>(&VROSC::LoopStationGroupUI::get_IsMuted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "get_IsMuted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::get_DisplayName
// Il2CppName: get_DisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::LoopStationGroupUI::*)()>(&VROSC::LoopStationGroupUI::get_DisplayName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "get_DisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::set_DisplayName
// Il2CppName: set_DisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupUI::*)(::StringW)>(&VROSC::LoopStationGroupUI::set_DisplayName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "set_DisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::get_PlaybackConfig
// Il2CppName: get_PlaybackConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlaybackConfigOverride* (VROSC::LoopStationGroupUI::*)()>(&VROSC::LoopStationGroupUI::get_PlaybackConfig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "get_PlaybackConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupUI::*)()>(&VROSC::LoopStationGroupUI::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupUI::*)()>(&VROSC::LoopStationGroupUI::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupUI::*)(::VROSC::LoopStationGroup*, ::VROSC::LoopStation*, ::VROSC::LoopStationGroup::SetupVariables)>(&VROSC::LoopStationGroupUI::Setup)> {
  static const MethodInfo* get() {
    static auto* owner = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStationGroup")->byval_arg;
    static auto* loopStation = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStation")->byval_arg;
    static auto* vars = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStationGroup/SetupVariables")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{owner, loopStation, vars});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::SetInteractable
// Il2CppName: SetInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupUI::*)(bool)>(&VROSC::LoopStationGroupUI::SetInteractable)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "SetInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::SetVolumeOfGroup
// Il2CppName: SetVolumeOfGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupUI::*)(float)>(&VROSC::LoopStationGroupUI::SetVolumeOfGroup)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "SetVolumeOfGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::GroupVolumeChanged
// Il2CppName: GroupVolumeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupUI::*)(float)>(&VROSC::LoopStationGroupUI::GroupVolumeChanged)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "GroupVolumeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::MuteChanged
// Il2CppName: MuteChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupUI::*)(bool)>(&VROSC::LoopStationGroupUI::MuteChanged)> {
  static const MethodInfo* get() {
    static auto* mute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "MuteChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mute});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::SoloChanged
// Il2CppName: SoloChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupUI::*)(bool)>(&VROSC::LoopStationGroupUI::SoloChanged)> {
  static const MethodInfo* get() {
    static auto* soloOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "SoloChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soloOn});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::GlobalVolumeChanged
// Il2CppName: GlobalVolumeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupUI::*)(float)>(&VROSC::LoopStationGroupUI::GlobalVolumeChanged)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "GlobalVolumeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::UpdateVolumeOfAllGroups
// Il2CppName: UpdateVolumeOfAllGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupUI::*)()>(&VROSC::LoopStationGroupUI::UpdateVolumeOfAllGroups)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "UpdateVolumeOfAllGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::ShowAsEmpty
// Il2CppName: ShowAsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupUI::*)(bool)>(&VROSC::LoopStationGroupUI::ShowAsEmpty)> {
  static const MethodInfo* get() {
    static auto* shouldLookEmpty = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "ShowAsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shouldLookEmpty});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::RenameButtonPressed
// Il2CppName: RenameButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupUI::*)()>(&VROSC::LoopStationGroupUI::RenameButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "RenameButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupUI::*)(::StringW)>(&VROSC::LoopStationGroupUI::SetText)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::KeyboardClosed
// Il2CppName: KeyboardClosed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupUI::*)()>(&VROSC::LoopStationGroupUI::KeyboardClosed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "KeyboardClosed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::LoadLaunchPad
// Il2CppName: LoadLaunchPad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupUI::*)(::StringW, ::VROSC::TransformDataController*)>(&VROSC::LoopStationGroupUI::LoadLaunchPad)> {
  static const MethodInfo* get() {
    static auto* padID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* transformData = &::il2cpp_utils::GetClassFromName("VROSC", "TransformDataController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "LoadLaunchPad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{padID, transformData});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupUI::*)(::UnityEngine::Color)>(&VROSC::LoopStationGroupUI::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroupUI::*)()>(&VROSC::LoopStationGroupUI::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroupUI*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroupUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
