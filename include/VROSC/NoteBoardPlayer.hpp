// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.NotePlayer
#include "VROSC/NotePlayer.hpp"
// Including type: VROSC.NoteBoard/VROSC.PlayAxis
#include "VROSC/NoteBoard_PlayAxis.hpp"
// Including type: VROSC.NoteBoardNote/VROSC.Coloring
#include "VROSC/NoteBoardNote_Coloring.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Skipping declaration: NoteBoard because it is already included!
  // Forward declaring type: IntField
  class IntField;
  // Forward declaring type: PlayBehaviourField
  class PlayBehaviourField;
  // Forward declaring type: NoteFieldNoteData
  class NoteFieldNoteData;
  // Forward declaring type: InstrumentController
  class InstrumentController;
  // Forward declaring type: HandType
  struct HandType;
  // Forward declaring type: Signal
  class Signal;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: NoteBoardPlayer
  class NoteBoardPlayer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::NoteBoardPlayer);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::NoteBoardPlayer*, "VROSC", "NoteBoardPlayer");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xC8
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.NoteBoardPlayer
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteBoardPlayer : public ::VROSC::NotePlayer {
    public:
    // Writing base type padding for base size: 0x84 to desired offset: 0x88
    char ___base_padding[0x4] = {};
    // Nested type: ::VROSC::NoteBoardPlayer::PlayBehaviour
    struct PlayBehaviour;
    // Nested type: ::VROSC::NoteBoardPlayer::$Stop$d__20
    struct $Stop$d__20;
    public:
    // private VROSC.NoteBoard _noteBoard
    // Size: 0x8
    // Offset: 0x88
    ::VROSC::NoteBoard* noteBoard;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoard*) == 0x8);
    // private VROSC.NoteBoard/VROSC.PlayAxis _playAxis
    // Size: 0x4
    // Offset: 0x90
    ::VROSC::NoteBoard::PlayAxis playAxis;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoard::PlayAxis) == 0x4);
    // private VROSC.NoteBoardNote/VROSC.Coloring _coloring
    // Size: 0x4
    // Offset: 0x94
    ::VROSC::NoteBoardNote::Coloring coloring;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoardNote::Coloring) == 0x4);
    // private VROSC.IntField _octave
    // Size: 0x8
    // Offset: 0x98
    ::VROSC::IntField* octave;
    // Field size check
    static_assert(sizeof(::VROSC::IntField*) == 0x8);
    // private VROSC.PlayBehaviourField _playBehaviour
    // Size: 0x8
    // Offset: 0xA0
    ::VROSC::PlayBehaviourField* playBehaviour;
    // Field size check
    static_assert(sizeof(::VROSC::PlayBehaviourField*) == 0x8);
    // private VROSC.IntField _scaleOffset
    // Size: 0x8
    // Offset: 0xA8
    ::VROSC::IntField* scaleOffset;
    // Field size check
    static_assert(sizeof(::VROSC::IntField*) == 0x8);
    // private System.Boolean _avoidTritone
    // Size: 0x1
    // Offset: 0xB0
    bool avoidTritone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [HeaderAttribute] Offset: 0x786EC4
    // private System.Boolean _isMultiNote
    // Size: 0x1
    // Offset: 0xB1
    bool isMultiNote;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isMultiNote and: multiNote
    char __padding7[0x2] = {};
    // private System.Int32 _multiNote
    // Size: 0x4
    // Offset: 0xB4
    int multiNote;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _multiNoteValue
    // Size: 0x4
    // Offset: 0xB8
    float multiNoteValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: multiNoteValue and: currentPlayingNoteField
    char __padding9[0x4] = {};
    // private VROSC.NoteFieldNoteData _currentPlayingNoteField
    // Size: 0x8
    // Offset: 0xC0
    ::VROSC::NoteFieldNoteData* currentPlayingNoteField;
    // Field size check
    static_assert(sizeof(::VROSC::NoteFieldNoteData*) == 0x8);
    public:
    // Get instance field reference: private VROSC.NoteBoard _noteBoard
    [[deprecated("Use field access instead!")]] ::VROSC::NoteBoard*& dyn__noteBoard();
    // Get instance field reference: private VROSC.NoteBoard/VROSC.PlayAxis _playAxis
    [[deprecated("Use field access instead!")]] ::VROSC::NoteBoard::PlayAxis& dyn__playAxis();
    // Get instance field reference: private VROSC.NoteBoardNote/VROSC.Coloring _coloring
    [[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNote::Coloring& dyn__coloring();
    // Get instance field reference: private VROSC.IntField _octave
    [[deprecated("Use field access instead!")]] ::VROSC::IntField*& dyn__octave();
    // Get instance field reference: private VROSC.PlayBehaviourField _playBehaviour
    [[deprecated("Use field access instead!")]] ::VROSC::PlayBehaviourField*& dyn__playBehaviour();
    // Get instance field reference: private VROSC.IntField _scaleOffset
    [[deprecated("Use field access instead!")]] ::VROSC::IntField*& dyn__scaleOffset();
    // Get instance field reference: private System.Boolean _avoidTritone
    [[deprecated("Use field access instead!")]] bool& dyn__avoidTritone();
    // Get instance field reference: private System.Boolean _isMultiNote
    [[deprecated("Use field access instead!")]] bool& dyn__isMultiNote();
    // Get instance field reference: private System.Int32 _multiNote
    [[deprecated("Use field access instead!")]] int& dyn__multiNote();
    // Get instance field reference: private System.Single _multiNoteValue
    [[deprecated("Use field access instead!")]] float& dyn__multiNoteValue();
    // Get instance field reference: private VROSC.NoteFieldNoteData _currentPlayingNoteField
    [[deprecated("Use field access instead!")]] ::VROSC::NoteFieldNoteData*& dyn__currentPlayingNoteField();
    // public VROSC.InstrumentController get_Instrument()
    // Offset: 0xC57470
    ::VROSC::InstrumentController* get_Instrument();
    // private System.Threading.Tasks.Task <>n__0(System.Boolean immediate, VROSC.HandType handType, System.Boolean linkHands)
    // Offset: 0xC58064
    ::System::Threading::Tasks::Task* $$n__0(bool immediate, ::VROSC::HandType handType, bool linkHands);
    // protected override System.Boolean get_RequireOrigin()
    // Offset: 0xC57468
    // Implemented from: VROSC.SignalNode
    // Base method: System.Boolean SignalNode::get_RequireOrigin()
    bool get_RequireOrigin();
    // public System.Void .ctor()
    // Offset: 0xC57FC8
    // Implemented from: VROSC.NotePlayer
    // Base method: System.Void NotePlayer::.ctor()
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteBoardPlayer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteBoardPlayer*, creationType>()));
    }
    // protected override System.Void Update()
    // Offset: 0xC57478
    // Implemented from: VROSC.NotePlayer
    // Base method: System.Void NotePlayer::Update()
    void Update();
    // protected override System.Void NodeStay(VROSC.Signal signal)
    // Offset: 0xC5765C
    // Implemented from: VROSC.NotePlayer
    // Base method: System.Void NotePlayer::NodeStay(VROSC.Signal signal)
    void NodeStay(::VROSC::Signal* signal);
    // protected override System.Void Play(VROSC.Signal signal, System.Boolean linkHands)
    // Offset: 0xC576B8
    // Implemented from: VROSC.NotePlayer
    // Base method: System.Void NotePlayer::Play(VROSC.Signal signal, System.Boolean linkHands)
    void Play(::VROSC::Signal* signal, bool linkHands);
    // public override System.Int32 GetNote(UnityEngine.Vector3 position)
    // Offset: 0xC57BAC
    // Implemented from: VROSC.NotePlayer
    // Base method: System.Int32 NotePlayer::GetNote(UnityEngine.Vector3 position)
    int GetNote(::UnityEngine::Vector3 position);
    // protected override System.Threading.Tasks.Task Stop(System.Boolean immediate, VROSC.HandType handType, System.Boolean linkHands)
    // Offset: 0xC57E84
    // Implemented from: VROSC.NotePlayer
    // Base method: System.Threading.Tasks.Task NotePlayer::Stop(System.Boolean immediate, VROSC.HandType handType, System.Boolean linkHands)
    ::System::Threading::Tasks::Task* Stop(bool immediate, ::VROSC::HandType handType, bool linkHands);
  }; // VROSC.NoteBoardPlayer
  #pragma pack(pop)
  static check_size<sizeof(NoteBoardPlayer), 192 + sizeof(::VROSC::NoteFieldNoteData*)> __VROSC_NoteBoardPlayerSizeCheck;
  static_assert(sizeof(NoteBoardPlayer) == 0xC8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::NoteBoardPlayer::get_Instrument
// Il2CppName: get_Instrument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::InstrumentController* (VROSC::NoteBoardPlayer::*)()>(&VROSC::NoteBoardPlayer::get_Instrument)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteBoardPlayer*), "get_Instrument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteBoardPlayer::$$n__0
// Il2CppName: <>n__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (VROSC::NoteBoardPlayer::*)(bool, ::VROSC::HandType, bool)>(&VROSC::NoteBoardPlayer::$$n__0)> {
  static const MethodInfo* get() {
    static auto* immediate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* handType = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    static auto* linkHands = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteBoardPlayer*), "<>n__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{immediate, handType, linkHands});
  }
};
// Writing MetadataGetter for method: VROSC::NoteBoardPlayer::get_RequireOrigin
// Il2CppName: get_RequireOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::NoteBoardPlayer::*)()>(&VROSC::NoteBoardPlayer::get_RequireOrigin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteBoardPlayer*), "get_RequireOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteBoardPlayer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::NoteBoardPlayer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteBoardPlayer::*)()>(&VROSC::NoteBoardPlayer::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteBoardPlayer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteBoardPlayer::NodeStay
// Il2CppName: NodeStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteBoardPlayer::*)(::VROSC::Signal*)>(&VROSC::NoteBoardPlayer::NodeStay)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteBoardPlayer*), "NodeStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::NoteBoardPlayer::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteBoardPlayer::*)(::VROSC::Signal*, bool)>(&VROSC::NoteBoardPlayer::Play)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    static auto* linkHands = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteBoardPlayer*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal, linkHands});
  }
};
// Writing MetadataGetter for method: VROSC::NoteBoardPlayer::GetNote
// Il2CppName: GetNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::NoteBoardPlayer::*)(::UnityEngine::Vector3)>(&VROSC::NoteBoardPlayer::GetNote)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteBoardPlayer*), "GetNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: VROSC::NoteBoardPlayer::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (VROSC::NoteBoardPlayer::*)(bool, ::VROSC::HandType, bool)>(&VROSC::NoteBoardPlayer::Stop)> {
  static const MethodInfo* get() {
    static auto* immediate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* handType = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    static auto* linkHands = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteBoardPlayer*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{immediate, handType, linkHands});
  }
};
