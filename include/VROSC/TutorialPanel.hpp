// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: UIButton
  class UIButton;
  // Forward declaring type: TutorialBlinkingUIElement
  class TutorialBlinkingUIElement;
  // Forward declaring type: Grabable
  class Grabable;
  // Forward declaring type: TutorialCondition
  class TutorialCondition;
  // Forward declaring type: TutorialStep
  class TutorialStep;
  // Forward declaring type: TutorialEvent
  struct TutorialEvent;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TutorialPanel
  class TutorialPanel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TutorialPanel);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TutorialPanel*, "VROSC", "TutorialPanel");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TutorialPanel
  // [TokenAttribute] Offset: FFFFFFFF
  class TutorialPanel : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.UIButton _closeButton
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::UIButton* closeButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.UIButton _closeOKButton
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::UIButton* closeOKButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.UIButton _closeCancelButton
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::UIButton* closeCancelButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private UnityEngine.GameObject _closeWarningPanel
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* closeWarningPanel;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private VROSC.UIButton _replayButton
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::UIButton* replayButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.UIButton _continueButton
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::UIButton* continueButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private TMPro.TextMeshPro _tipText
    // Size: 0x8
    // Offset: 0x48
    ::TMPro::TextMeshPro* tipText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private VROSC.TutorialBlinkingUIElement _blinkContinue
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::TutorialBlinkingUIElement* blinkContinue;
    // Field size check
    static_assert(sizeof(::VROSC::TutorialBlinkingUIElement*) == 0x8);
    // private VROSC.Grabable[] _panelGrabables
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::VROSC::Grabable*> panelGrabables;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::Grabable*>) == 0x8);
    // private VROSC.TutorialBlinkingUIElement[] _panelBlinkers
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::VROSC::TutorialBlinkingUIElement*> panelBlinkers;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::TutorialBlinkingUIElement*>) == 0x8);
    // private VROSC.TutorialCondition _conditionPrefab
    // Size: 0x8
    // Offset: 0x68
    ::VROSC::TutorialCondition* conditionPrefab;
    // Field size check
    static_assert(sizeof(::VROSC::TutorialCondition*) == 0x8);
    // private UnityEngine.Transform _conditionsParent
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* conditionsParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.RectTransform _mainTransform
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::RectTransform* mainTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private System.Single _conditionsStartY
    // Size: 0x4
    // Offset: 0x80
    float conditionsStartY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _conditionsSizeY
    // Size: 0x4
    // Offset: 0x84
    float conditionsSizeY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private VROSC.TutorialStep _currentTutorialStep
    // Size: 0x8
    // Offset: 0x88
    ::VROSC::TutorialStep* currentTutorialStep;
    // Field size check
    static_assert(sizeof(::VROSC::TutorialStep*) == 0x8);
    // private VROSC.TutorialCondition[] _tutorialConditions
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<::VROSC::TutorialCondition*> tutorialConditions;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::TutorialCondition*>) == 0x8);
    // private UnityEngine.Vector2 _mainSize
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Vector2 mainSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.UIButton _closeButton
    [[deprecated("Use field access instead!")]] ::VROSC::UIButton*& dyn__closeButton();
    // Get instance field reference: private VROSC.UIButton _closeOKButton
    [[deprecated("Use field access instead!")]] ::VROSC::UIButton*& dyn__closeOKButton();
    // Get instance field reference: private VROSC.UIButton _closeCancelButton
    [[deprecated("Use field access instead!")]] ::VROSC::UIButton*& dyn__closeCancelButton();
    // Get instance field reference: private UnityEngine.GameObject _closeWarningPanel
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__closeWarningPanel();
    // Get instance field reference: private VROSC.UIButton _replayButton
    [[deprecated("Use field access instead!")]] ::VROSC::UIButton*& dyn__replayButton();
    // Get instance field reference: private VROSC.UIButton _continueButton
    [[deprecated("Use field access instead!")]] ::VROSC::UIButton*& dyn__continueButton();
    // Get instance field reference: private TMPro.TextMeshPro _tipText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& dyn__tipText();
    // Get instance field reference: private VROSC.TutorialBlinkingUIElement _blinkContinue
    [[deprecated("Use field access instead!")]] ::VROSC::TutorialBlinkingUIElement*& dyn__blinkContinue();
    // Get instance field reference: private VROSC.Grabable[] _panelGrabables
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::Grabable*>& dyn__panelGrabables();
    // Get instance field reference: private VROSC.TutorialBlinkingUIElement[] _panelBlinkers
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::TutorialBlinkingUIElement*>& dyn__panelBlinkers();
    // Get instance field reference: private VROSC.TutorialCondition _conditionPrefab
    [[deprecated("Use field access instead!")]] ::VROSC::TutorialCondition*& dyn__conditionPrefab();
    // Get instance field reference: private UnityEngine.Transform _conditionsParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__conditionsParent();
    // Get instance field reference: private UnityEngine.RectTransform _mainTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__mainTransform();
    // Get instance field reference: private System.Single _conditionsStartY
    [[deprecated("Use field access instead!")]] float& dyn__conditionsStartY();
    // Get instance field reference: private System.Single _conditionsSizeY
    [[deprecated("Use field access instead!")]] float& dyn__conditionsSizeY();
    // Get instance field reference: private VROSC.TutorialStep _currentTutorialStep
    [[deprecated("Use field access instead!")]] ::VROSC::TutorialStep*& dyn__currentTutorialStep();
    // Get instance field reference: private VROSC.TutorialCondition[] _tutorialConditions
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::TutorialCondition*>& dyn__tutorialConditions();
    // Get instance field reference: private UnityEngine.Vector2 _mainSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn__mainSize();
    // public System.Void .ctor()
    // Offset: 0xA31F54
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TutorialPanel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TutorialPanel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TutorialPanel*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0xA315C0
    void Awake();
    // public System.Void StartTutorial()
    // Offset: 0xA305B8
    void StartTutorial();
    // public System.Void TutorialStopped()
    // Offset: 0xA30A30
    void TutorialStopped();
    // private System.Void CloseButtonPressed()
    // Offset: 0xA31628
    void CloseButtonPressed();
    // private System.Void CloseOKButtonPressed()
    // Offset: 0xA31648
    void CloseOKButtonPressed();
    // private System.Void CloseCancelButtonPressed()
    // Offset: 0xA316A0
    void CloseCancelButtonPressed();
    // private System.Void ReplayButtonPressed()
    // Offset: 0xA316C0
    void ReplayButtonPressed();
    // private System.Void ContinueButtonPressed()
    // Offset: 0xA316E0
    void ContinueButtonPressed();
    // public System.Void ActivateTutorialStep(VROSC.TutorialStep tutorialStep)
    // Offset: 0xA30F10
    void ActivateTutorialStep(::VROSC::TutorialStep* tutorialStep);
    // private System.Void TimelineReachedEnd()
    // Offset: 0xA31738
    void TimelineReachedEnd();
    // private System.Void TutorialEventTriggered(VROSC.TutorialEvent tutorialEvent)
    // Offset: 0xA31810
    void TutorialEventTriggered(::VROSC::TutorialEvent tutorialEvent);
    // private System.Void TutorialPanelGrabbed(System.Boolean grabbed)
    // Offset: 0xA31B14
    void TutorialPanelGrabbed(bool grabbed);
    // private System.Void RevealInstruction()
    // Offset: 0xA31A34
    void RevealInstruction();
    // private System.Void TutorialConditionsCompleted()
    // Offset: 0xA31DF8
    void TutorialConditionsCompleted();
    // private System.Void DisplayTipText()
    // Offset: 0xA31D04
    void DisplayTipText();
  }; // VROSC.TutorialPanel
  #pragma pack(pop)
  static check_size<sizeof(TutorialPanel), 152 + sizeof(::UnityEngine::Vector2)> __VROSC_TutorialPanelSizeCheck;
  static_assert(sizeof(TutorialPanel) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TutorialPanel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::TutorialPanel::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialPanel::*)()>(&VROSC::TutorialPanel::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialPanel*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialPanel::StartTutorial
// Il2CppName: StartTutorial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialPanel::*)()>(&VROSC::TutorialPanel::StartTutorial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialPanel*), "StartTutorial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialPanel::TutorialStopped
// Il2CppName: TutorialStopped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialPanel::*)()>(&VROSC::TutorialPanel::TutorialStopped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialPanel*), "TutorialStopped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialPanel::CloseButtonPressed
// Il2CppName: CloseButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialPanel::*)()>(&VROSC::TutorialPanel::CloseButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialPanel*), "CloseButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialPanel::CloseOKButtonPressed
// Il2CppName: CloseOKButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialPanel::*)()>(&VROSC::TutorialPanel::CloseOKButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialPanel*), "CloseOKButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialPanel::CloseCancelButtonPressed
// Il2CppName: CloseCancelButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialPanel::*)()>(&VROSC::TutorialPanel::CloseCancelButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialPanel*), "CloseCancelButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialPanel::ReplayButtonPressed
// Il2CppName: ReplayButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialPanel::*)()>(&VROSC::TutorialPanel::ReplayButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialPanel*), "ReplayButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialPanel::ContinueButtonPressed
// Il2CppName: ContinueButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialPanel::*)()>(&VROSC::TutorialPanel::ContinueButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialPanel*), "ContinueButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialPanel::ActivateTutorialStep
// Il2CppName: ActivateTutorialStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialPanel::*)(::VROSC::TutorialStep*)>(&VROSC::TutorialPanel::ActivateTutorialStep)> {
  static const MethodInfo* get() {
    static auto* tutorialStep = &::il2cpp_utils::GetClassFromName("VROSC", "TutorialStep")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialPanel*), "ActivateTutorialStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tutorialStep});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialPanel::TimelineReachedEnd
// Il2CppName: TimelineReachedEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialPanel::*)()>(&VROSC::TutorialPanel::TimelineReachedEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialPanel*), "TimelineReachedEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialPanel::TutorialEventTriggered
// Il2CppName: TutorialEventTriggered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialPanel::*)(::VROSC::TutorialEvent)>(&VROSC::TutorialPanel::TutorialEventTriggered)> {
  static const MethodInfo* get() {
    static auto* tutorialEvent = &::il2cpp_utils::GetClassFromName("VROSC", "TutorialEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialPanel*), "TutorialEventTriggered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tutorialEvent});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialPanel::TutorialPanelGrabbed
// Il2CppName: TutorialPanelGrabbed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialPanel::*)(bool)>(&VROSC::TutorialPanel::TutorialPanelGrabbed)> {
  static const MethodInfo* get() {
    static auto* grabbed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialPanel*), "TutorialPanelGrabbed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabbed});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialPanel::RevealInstruction
// Il2CppName: RevealInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialPanel::*)()>(&VROSC::TutorialPanel::RevealInstruction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialPanel*), "RevealInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialPanel::TutorialConditionsCompleted
// Il2CppName: TutorialConditionsCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialPanel::*)()>(&VROSC::TutorialPanel::TutorialConditionsCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialPanel*), "TutorialConditionsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialPanel::DisplayTipText
// Il2CppName: DisplayTipText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialPanel::*)()>(&VROSC::TutorialPanel::DisplayTipText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialPanel*), "DisplayTipText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
