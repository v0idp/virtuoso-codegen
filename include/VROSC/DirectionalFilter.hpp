// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.SignalFilter
#include "VROSC/SignalFilter.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Signal
  class Signal;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: DirectionalFilter
  class DirectionalFilter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::DirectionalFilter);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::DirectionalFilter*, "VROSC", "DirectionalFilter");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x56
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.DirectionalFilter
  // [TokenAttribute] Offset: FFFFFFFF
  class DirectionalFilter : public ::VROSC::SignalFilter {
    public:
    // Nested type: ::VROSC::DirectionalFilter::Space
    struct Space;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: VROSC.DirectionalFilter/VROSC.Space
    // [TokenAttribute] Offset: FFFFFFFF
    struct Space/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Space
      constexpr Space(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public VROSC.DirectionalFilter/VROSC.Space InputNode
      static constexpr const int InputNode = 0;
      // Get static field: static public VROSC.DirectionalFilter/VROSC.Space InputNode
      static ::VROSC::DirectionalFilter::Space _get_InputNode();
      // Set static field: static public VROSC.DirectionalFilter/VROSC.Space InputNode
      static void _set_InputNode(::VROSC::DirectionalFilter::Space value);
      // static field const value: static public VROSC.DirectionalFilter/VROSC.Space ThisFilter
      static constexpr const int ThisFilter = 1;
      // Get static field: static public VROSC.DirectionalFilter/VROSC.Space ThisFilter
      static ::VROSC::DirectionalFilter::Space _get_ThisFilter();
      // Set static field: static public VROSC.DirectionalFilter/VROSC.Space ThisFilter
      static void _set_ThisFilter(::VROSC::DirectionalFilter::Space value);
      // static field const value: static public VROSC.DirectionalFilter/VROSC.Space World
      static constexpr const int World = 2;
      // Get static field: static public VROSC.DirectionalFilter/VROSC.Space World
      static ::VROSC::DirectionalFilter::Space _get_World();
      // Set static field: static public VROSC.DirectionalFilter/VROSC.Space World
      static void _set_World(::VROSC::DirectionalFilter::Space value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // VROSC.DirectionalFilter/VROSC.Space
    #pragma pack(pop)
    static check_size<sizeof(DirectionalFilter::Space), 0 + sizeof(int)> __VROSC_DirectionalFilter_SpaceSizeCheck;
    static_assert(sizeof(DirectionalFilter::Space) == 0x4);
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private UnityEngine.Vector3 _filterDirection
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 filterDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private VROSC.DirectionalFilter/VROSC.Space _relativeTo
    // Size: 0x4
    // Offset: 0x4C
    ::VROSC::DirectionalFilter::Space relativeTo;
    // Field size check
    static_assert(sizeof(::VROSC::DirectionalFilter::Space) == 0x4);
    // private System.Single _filterAngle
    // Size: 0x4
    // Offset: 0x50
    float filterAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _checkFirstFrameOnly
    // Size: 0x1
    // Offset: 0x54
    bool checkFirstFrameOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _firstFramePassed
    // Size: 0x1
    // Offset: 0x55
    bool firstFramePassed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Vector3 _filterDirection
    ::UnityEngine::Vector3& dyn__filterDirection();
    // Get instance field reference: private VROSC.DirectionalFilter/VROSC.Space _relativeTo
    ::VROSC::DirectionalFilter::Space& dyn__relativeTo();
    // Get instance field reference: private System.Single _filterAngle
    float& dyn__filterAngle();
    // Get instance field reference: private System.Boolean _checkFirstFrameOnly
    bool& dyn__checkFirstFrameOnly();
    // Get instance field reference: private System.Boolean _firstFramePassed
    bool& dyn__firstFramePassed();
    // public System.Void .ctor()
    // Offset: 0x130B720
    // Implemented from: VROSC.SignalFilter
    // Base method: System.Void SignalFilter::.ctor()
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DirectionalFilter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::DirectionalFilter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DirectionalFilter*, creationType>()));
    }
    // protected override System.Void NodeEnd(VROSC.Signal signal)
    // Offset: 0x130B5A0
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeEnd(VROSC.Signal signal)
    void NodeEnd(::VROSC::Signal* signal);
    // protected override System.Void FilterSignal(VROSC.Signal signal)
    // Offset: 0x130B5AC
    // Implemented from: VROSC.SignalFilter
    // Base method: System.Void SignalFilter::FilterSignal(VROSC.Signal signal)
    void FilterSignal(::VROSC::Signal* signal);
  }; // VROSC.DirectionalFilter
  #pragma pack(pop)
  static check_size<sizeof(DirectionalFilter), 85 + sizeof(bool)> __VROSC_DirectionalFilterSizeCheck;
  static_assert(sizeof(DirectionalFilter) == 0x56);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::DirectionalFilter::Space, "VROSC", "DirectionalFilter/Space");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::DirectionalFilter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::DirectionalFilter::NodeEnd
// Il2CppName: NodeEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DirectionalFilter::*)(::VROSC::Signal*)>(&VROSC::DirectionalFilter::NodeEnd)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DirectionalFilter*), "NodeEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::DirectionalFilter::FilterSignal
// Il2CppName: FilterSignal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DirectionalFilter::*)(::VROSC::Signal*)>(&VROSC::DirectionalFilter::FilterSignal)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DirectionalFilter*), "FilterSignal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
