// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: VROSC.Scale
#include "VROSC/Scale.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Note
  struct Note;
  // Forward declaring type: ScalePreset
  class ScalePreset;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Random
  class Random;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ObjectExtensions
  class ObjectExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ObjectExtensions);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ObjectExtensions*, "VROSC", "ObjectExtensions");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ObjectExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class ObjectExtensions : public ::Il2CppObject {
    public:
    // Nested type: ::VROSC::ObjectExtensions::$$c
    class $$c;
    // static field const value: static private System.Int32 _seedPrimeNumber
    static constexpr const int _seedPrimeNumber = 691;
    // Get static field: static private System.Int32 _seedPrimeNumber
    static int _get__seedPrimeNumber();
    // Set static field: static private System.Int32 _seedPrimeNumber
    static void _set__seedPrimeNumber(int value);
    // static field const value: static private System.Int32 _fieldPrimeNumber
    static constexpr const int _fieldPrimeNumber = 397;
    // Get static field: static private System.Int32 _fieldPrimeNumber
    static int _get__fieldPrimeNumber();
    // Set static field: static private System.Int32 _fieldPrimeNumber
    static void _set__fieldPrimeNumber(int value);
    // Get static field: static private System.Random rng
    static ::System::Random* _get_rng();
    // Set static field: static private System.Random rng
    static void _set_rng(::System::Random* value);
    // static private System.Void .cctor()
    // Offset: 0xC65D7C
    static void _cctor();
    // static public System.Int32 GetHashCodeFromFields(System.Object obj, params System.Object[] fields)
    // Offset: 0xC63A8C
    static int GetHashCodeFromFields(::Il2CppObject* obj, ::ArrayW<::Il2CppObject*> fields);
    // static public System.Void Shuffle(System.Collections.Generic.IList`1<T> list)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Shuffle(::System::Collections::Generic::IList_1<T>* list) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ObjectExtensions::Shuffle");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VROSC", "ObjectExtensions", "Shuffle", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, list);
    }
    // static public UnityEngine.Vector3 Multiply(UnityEngine.Vector3 vector, UnityEngine.Vector3 factor)
    // Offset: 0xC5B510
    static ::UnityEngine::Vector3 Multiply(::UnityEngine::Vector3 vector, ::UnityEngine::Vector3 factor);
    // static public UnityEngine.Vector3 Max(UnityEngine.Vector3 v1, UnityEngine.Vector3 v2)
    // Offset: 0xC63B20
    static ::UnityEngine::Vector3 Max(::UnityEngine::Vector3 v1, ::UnityEngine::Vector3 v2);
    // static public System.Void Reset(UnityEngine.Transform transform)
    // Offset: 0xC63B98
    static void Reset(::UnityEngine::Transform* transform);
    // static public System.Boolean IsPointInside(UnityEngine.Transform transform, UnityEngine.Vector3 worldPosition, UnityEngine.Vector3 size)
    // Offset: 0xC63BF4
    static bool IsPointInside(::UnityEngine::Transform* transform, ::UnityEngine::Vector3 worldPosition, ::UnityEngine::Vector3 size);
    // static public VROSC.Scale TransposeScale(VROSC.Scale scale, System.Int32 steps)
    // Offset: 0xC63C6C
    static ::VROSC::Scale TransposeScale(::VROSC::Scale scale, int steps);
    // static public VROSC.Scale GetStrippedScale(VROSC.Scale scale, VROSC.Note baseNote, System.Int32 numberOfNotesToDrop, System.Boolean keepBase)
    // Offset: 0xC63D74
    static ::VROSC::Scale GetStrippedScale(::VROSC::Scale scale, ::VROSC::Note baseNote, int numberOfNotesToDrop, bool keepBase);
    // static public VROSC.Scale ConstructStrippedScale(VROSC.ScalePreset scalePreset, System.Int32 noteCount, VROSC.Note key)
    // Offset: 0xC64100
    static ::VROSC::Scale ConstructStrippedScale(::VROSC::ScalePreset* scalePreset, int noteCount, ::VROSC::Note key);
    // static public VROSC.Scale FitNotesToScale(VROSC.Scale notes, VROSC.Scale oldScale, VROSC.Note oldKey, VROSC.Scale newScale, VROSC.Note newKey)
    // Offset: 0xC645C0
    static ::VROSC::Scale FitNotesToScale(::VROSC::Scale notes, ::VROSC::Scale oldScale, ::VROSC::Note oldKey, ::VROSC::Scale newScale, ::VROSC::Note newKey);
    // static public System.Int32 NoteCount(VROSC.Scale scale)
    // Offset: 0xC64E9C
    static int NoteCount(::VROSC::Scale scale);
    // static public VROSC.Note GetRandomNote(VROSC.Scale scale)
    // Offset: 0xC64F54
    static ::VROSC::Note GetRandomNote(::VROSC::Scale scale);
    // static public System.Boolean ContainsNote(VROSC.Scale scale, VROSC.Note note)
    // Offset: 0xC64080
    static bool ContainsNote(::VROSC::Scale scale, ::VROSC::Note note);
    // static public System.Int32 GetOffsetNote(System.Int32 note, VROSC.Scale scale, System.Int32 offsetSteps, System.Boolean avoidTritone)
    // Offset: 0xC57CCC
    static int GetOffsetNote(int note, ::VROSC::Scale scale, int offsetSteps, bool avoidTritone);
    // static public System.Boolean GetNearestNote(VROSC.Note note, System.Collections.Generic.List`1<VROSC.Scale> insideScales, System.Collections.Generic.List`1<VROSC.Scale> outsideScales, out VROSC.Note nearestNote)
    // Offset: 0xC64A5C
    static bool GetNearestNote(::VROSC::Note note, ::System::Collections::Generic::List_1<::VROSC::Scale>* insideScales, ::System::Collections::Generic::List_1<::VROSC::Scale>* outsideScales, ByRef<::VROSC::Note> nearestNote);
    // static public VROSC.Note GetRandomNote()
    // Offset: 0xC65208
    static ::VROSC::Note GetRandomNote();
    // static public VROSC.Note GetNote(System.Int32 noteNumber)
    // Offset: 0xC65174
    static ::VROSC::Note GetNote(int noteNumber);
    // static public System.String GetNoteAndOctave(System.Int32 noteNumber)
    // Offset: 0xC572E8
    static ::StringW GetNoteAndOctave(int noteNumber);
    // static public System.Int32 ToBitMask(VROSC.Note note)
    // Offset: 0xC640CC
    static int ToBitMask(::VROSC::Note note);
    // static public VROSC.Note Transpose(VROSC.Note note, VROSC.Note fromKey, VROSC.Note toKey)
    // Offset: 0xC6454C
    static ::VROSC::Note Transpose(::VROSC::Note note, ::VROSC::Note fromKey, ::VROSC::Note toKey);
    // static public System.String ConvertToSentence(System.String text, System.Boolean preserveAcronyms)
    // Offset: 0xC65218
    static ::StringW ConvertToSentence(::StringW text, bool preserveAcronyms);
    // static public System.Void DrawGizmoWireBox(UnityEngine.Transform transform, UnityEngine.Vector3 size)
    // Offset: 0xC654AC
    static void DrawGizmoWireBox(::UnityEngine::Transform* transform, ::UnityEngine::Vector3 size);
    // static public T DeepClone(T original)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T DeepClone(T original) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ObjectExtensions::DeepClone");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VROSC", "ObjectExtensions", "DeepClone", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, original);
    }
    // static public System.Int32 Modulo(System.Int32 value, System.Int32 mod)
    // Offset: 0xC63D50
    static int Modulo(int value, int mod);
    // static public System.Single Modulo(System.Single value, System.Single mod)
    // Offset: 0xC657F8
    static float Modulo(float value, float mod);
    // static public System.Single LinearToDb(System.Single linearVolume, System.Single minDb)
    // Offset: 0xC65820
    static float LinearToDb(float linearVolume, float minDb);
    // static public System.Single GetNormalizeMultiplier(System.Single[] audioData, System.Int32 startIndex, System.Int32 endIndex)
    // Offset: 0xC65850
    static float GetNormalizeMultiplier(::ArrayW<float> audioData, int startIndex, int endIndex);
    // static public System.Void DenormalizeSamples(System.Single[] audioData, System.Single normalizeMultiplier, System.Int32 startIndex, System.Int32 endIndex)
    // Offset: 0xC658CC
    static void DenormalizeSamples(::ArrayW<float> audioData, float normalizeMultiplier, int startIndex, int endIndex);
    // static public System.Void GetTrimSilenceValues(System.Single[] audioData, out System.Int32 startValue, out System.Int32 endValue, System.Int32 lastSample)
    // Offset: 0xC65944
    static void GetTrimSilenceValues(::ArrayW<float> audioData, ByRef<int> startValue, ByRef<int> endValue, int lastSample);
    // static public System.Single[] TrimSilence(System.Single[] audioData, System.Single gateValue)
    // Offset: 0xC65A24
    static ::ArrayW<float> TrimSilence(::ArrayW<float> audioData, float gateValue);
    // static public System.String FormatTimeFraction(System.Single elapsedTime, System.Single totalTime)
    // Offset: 0xC65B10
    static ::StringW FormatTimeFraction(float elapsedTime, float totalTime);
    // static public System.Void LeftShiftArray(T[] arr, System.Int32 shift)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void LeftShiftArray(::ArrayW<T> arr, int shift) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ObjectExtensions::LeftShiftArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VROSC", "ObjectExtensions", "LeftShiftArray", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arr), ::il2cpp_utils::ExtractType(shift)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, arr, shift);
    }
    // static public System.Single SemitoneShiftToPitchFraction(System.Int32 semitone)
    // Offset: 0xC65D6C
    static float SemitoneShiftToPitchFraction(int semitone);
  }; // VROSC.ObjectExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ObjectExtensions::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VROSC::ObjectExtensions::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::GetHashCodeFromFields
// Il2CppName: GetHashCodeFromFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppObject*, ::ArrayW<::Il2CppObject*>)>(&VROSC::ObjectExtensions::GetHashCodeFromFields)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* fields = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "GetHashCodeFromFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, fields});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::Shuffle
// Il2CppName: Shuffle
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VROSC::ObjectExtensions::Multiply
// Il2CppName: Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&VROSC::ObjectExtensions::Multiply)> {
  static const MethodInfo* get() {
    static auto* vector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* factor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vector, factor});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::Max
// Il2CppName: Max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&VROSC::ObjectExtensions::Max)> {
  static const MethodInfo* get() {
    static auto* v1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* v2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "Max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v1, v2});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*)>(&VROSC::ObjectExtensions::Reset)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::IsPointInside
// Il2CppName: IsPointInside
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Transform*, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&VROSC::ObjectExtensions::IsPointInside)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* worldPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "IsPointInside", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, worldPosition, size});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::TransposeScale
// Il2CppName: TransposeScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Scale (*)(::VROSC::Scale, int)>(&VROSC::ObjectExtensions::TransposeScale)> {
  static const MethodInfo* get() {
    static auto* scale = &::il2cpp_utils::GetClassFromName("VROSC", "Scale")->byval_arg;
    static auto* steps = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "TransposeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scale, steps});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::GetStrippedScale
// Il2CppName: GetStrippedScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Scale (*)(::VROSC::Scale, ::VROSC::Note, int, bool)>(&VROSC::ObjectExtensions::GetStrippedScale)> {
  static const MethodInfo* get() {
    static auto* scale = &::il2cpp_utils::GetClassFromName("VROSC", "Scale")->byval_arg;
    static auto* baseNote = &::il2cpp_utils::GetClassFromName("VROSC", "Note")->byval_arg;
    static auto* numberOfNotesToDrop = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* keepBase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "GetStrippedScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scale, baseNote, numberOfNotesToDrop, keepBase});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::ConstructStrippedScale
// Il2CppName: ConstructStrippedScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Scale (*)(::VROSC::ScalePreset*, int, ::VROSC::Note)>(&VROSC::ObjectExtensions::ConstructStrippedScale)> {
  static const MethodInfo* get() {
    static auto* scalePreset = &::il2cpp_utils::GetClassFromName("VROSC", "ScalePreset")->byval_arg;
    static auto* noteCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("VROSC", "Note")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "ConstructStrippedScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scalePreset, noteCount, key});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::FitNotesToScale
// Il2CppName: FitNotesToScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Scale (*)(::VROSC::Scale, ::VROSC::Scale, ::VROSC::Note, ::VROSC::Scale, ::VROSC::Note)>(&VROSC::ObjectExtensions::FitNotesToScale)> {
  static const MethodInfo* get() {
    static auto* notes = &::il2cpp_utils::GetClassFromName("VROSC", "Scale")->byval_arg;
    static auto* oldScale = &::il2cpp_utils::GetClassFromName("VROSC", "Scale")->byval_arg;
    static auto* oldKey = &::il2cpp_utils::GetClassFromName("VROSC", "Note")->byval_arg;
    static auto* newScale = &::il2cpp_utils::GetClassFromName("VROSC", "Scale")->byval_arg;
    static auto* newKey = &::il2cpp_utils::GetClassFromName("VROSC", "Note")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "FitNotesToScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{notes, oldScale, oldKey, newScale, newKey});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::NoteCount
// Il2CppName: NoteCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::VROSC::Scale)>(&VROSC::ObjectExtensions::NoteCount)> {
  static const MethodInfo* get() {
    static auto* scale = &::il2cpp_utils::GetClassFromName("VROSC", "Scale")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "NoteCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scale});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::GetRandomNote
// Il2CppName: GetRandomNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Note (*)(::VROSC::Scale)>(&VROSC::ObjectExtensions::GetRandomNote)> {
  static const MethodInfo* get() {
    static auto* scale = &::il2cpp_utils::GetClassFromName("VROSC", "Scale")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "GetRandomNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scale});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::ContainsNote
// Il2CppName: ContainsNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::VROSC::Scale, ::VROSC::Note)>(&VROSC::ObjectExtensions::ContainsNote)> {
  static const MethodInfo* get() {
    static auto* scale = &::il2cpp_utils::GetClassFromName("VROSC", "Scale")->byval_arg;
    static auto* note = &::il2cpp_utils::GetClassFromName("VROSC", "Note")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "ContainsNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scale, note});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::GetOffsetNote
// Il2CppName: GetOffsetNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ::VROSC::Scale, int, bool)>(&VROSC::ObjectExtensions::GetOffsetNote)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("VROSC", "Scale")->byval_arg;
    static auto* offsetSteps = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* avoidTritone = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "GetOffsetNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, scale, offsetSteps, avoidTritone});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::GetNearestNote
// Il2CppName: GetNearestNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::VROSC::Note, ::System::Collections::Generic::List_1<::VROSC::Scale>*, ::System::Collections::Generic::List_1<::VROSC::Scale>*, ByRef<::VROSC::Note>)>(&VROSC::ObjectExtensions::GetNearestNote)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("VROSC", "Note")->byval_arg;
    static auto* insideScales = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Scale")})->byval_arg;
    static auto* outsideScales = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Scale")})->byval_arg;
    static auto* nearestNote = &::il2cpp_utils::GetClassFromName("VROSC", "Note")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "GetNearestNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, insideScales, outsideScales, nearestNote});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::GetRandomNote
// Il2CppName: GetRandomNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Note (*)()>(&VROSC::ObjectExtensions::GetRandomNote)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "GetRandomNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::GetNote
// Il2CppName: GetNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Note (*)(int)>(&VROSC::ObjectExtensions::GetNote)> {
  static const MethodInfo* get() {
    static auto* noteNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "GetNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteNumber});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::GetNoteAndOctave
// Il2CppName: GetNoteAndOctave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int)>(&VROSC::ObjectExtensions::GetNoteAndOctave)> {
  static const MethodInfo* get() {
    static auto* noteNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "GetNoteAndOctave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteNumber});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::ToBitMask
// Il2CppName: ToBitMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::VROSC::Note)>(&VROSC::ObjectExtensions::ToBitMask)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("VROSC", "Note")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "ToBitMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::Transpose
// Il2CppName: Transpose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Note (*)(::VROSC::Note, ::VROSC::Note, ::VROSC::Note)>(&VROSC::ObjectExtensions::Transpose)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("VROSC", "Note")->byval_arg;
    static auto* fromKey = &::il2cpp_utils::GetClassFromName("VROSC", "Note")->byval_arg;
    static auto* toKey = &::il2cpp_utils::GetClassFromName("VROSC", "Note")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "Transpose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, fromKey, toKey});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::ConvertToSentence
// Il2CppName: ConvertToSentence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, bool)>(&VROSC::ObjectExtensions::ConvertToSentence)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* preserveAcronyms = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "ConvertToSentence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, preserveAcronyms});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::DrawGizmoWireBox
// Il2CppName: DrawGizmoWireBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&VROSC::ObjectExtensions::DrawGizmoWireBox)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "DrawGizmoWireBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, size});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::DeepClone
// Il2CppName: DeepClone
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VROSC::ObjectExtensions::Modulo
// Il2CppName: Modulo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&VROSC::ObjectExtensions::Modulo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mod = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "Modulo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, mod});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::Modulo
// Il2CppName: Modulo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&VROSC::ObjectExtensions::Modulo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mod = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "Modulo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, mod});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::LinearToDb
// Il2CppName: LinearToDb
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&VROSC::ObjectExtensions::LinearToDb)> {
  static const MethodInfo* get() {
    static auto* linearVolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* minDb = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "LinearToDb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{linearVolume, minDb});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::GetNormalizeMultiplier
// Il2CppName: GetNormalizeMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::ArrayW<float>, int, int)>(&VROSC::ObjectExtensions::GetNormalizeMultiplier)> {
  static const MethodInfo* get() {
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "GetNormalizeMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioData, startIndex, endIndex});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::DenormalizeSamples
// Il2CppName: DenormalizeSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<float>, float, int, int)>(&VROSC::ObjectExtensions::DenormalizeSamples)> {
  static const MethodInfo* get() {
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* normalizeMultiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "DenormalizeSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioData, normalizeMultiplier, startIndex, endIndex});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::GetTrimSilenceValues
// Il2CppName: GetTrimSilenceValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<float>, ByRef<int>, ByRef<int>, int)>(&VROSC::ObjectExtensions::GetTrimSilenceValues)> {
  static const MethodInfo* get() {
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* startValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* endValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* lastSample = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "GetTrimSilenceValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioData, startValue, endValue, lastSample});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::TrimSilence
// Il2CppName: TrimSilence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (*)(::ArrayW<float>, float)>(&VROSC::ObjectExtensions::TrimSilence)> {
  static const MethodInfo* get() {
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* gateValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "TrimSilence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioData, gateValue});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::FormatTimeFraction
// Il2CppName: FormatTimeFraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(float, float)>(&VROSC::ObjectExtensions::FormatTimeFraction)> {
  static const MethodInfo* get() {
    static auto* elapsedTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* totalTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "FormatTimeFraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elapsedTime, totalTime});
  }
};
// Writing MetadataGetter for method: VROSC::ObjectExtensions::LeftShiftArray
// Il2CppName: LeftShiftArray
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VROSC::ObjectExtensions::SemitoneShiftToPitchFraction
// Il2CppName: SemitoneShiftToPitchFraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(int)>(&VROSC::ObjectExtensions::SemitoneShiftToPitchFraction)> {
  static const MethodInfo* get() {
    static auto* semitone = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ObjectExtensions*), "SemitoneShiftToPitchFraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{semitone});
  }
};
