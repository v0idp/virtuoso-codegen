// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.PlayData
#include "VROSC/PlayData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: NoteFieldNoteData
  class NoteFieldNoteData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::NoteFieldNoteData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::NoteFieldNoteData*, "VROSC", "NoteFieldNoteData");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.NoteFieldNoteData
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteFieldNoteData : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 <NoteNumberX>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int NoteNumberX;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <NoteNumberY>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int NoteNumberY;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <NoteNumberZ>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int NoteNumberZ;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <NoteNumber3D>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    int NoteNumber3D;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <IsOdd>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool IsOdd;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IsOctave>k__BackingField
    // Size: 0x1
    // Offset: 0x21
    bool IsOctave;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IsPlaying>k__BackingField
    // Size: 0x1
    // Offset: 0x22
    bool IsPlaying;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IsHovering>k__BackingField
    // Size: 0x1
    // Offset: 0x23
    bool IsHovering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsHovering and: OnPlay
    char __padding7[0x4] = {};
    // public System.Action`2<System.Boolean,VROSC.PlayData> OnPlay
    // Size: 0x8
    // Offset: 0x28
    ::System::Action_2<bool, ::VROSC::PlayData>* OnPlay;
    // Field size check
    static_assert(sizeof(::System::Action_2<bool, ::VROSC::PlayData>*) == 0x8);
    // public System.Action`2<System.Boolean,System.Boolean> OnHovering
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_2<bool, bool>* OnHovering;
    // Field size check
    static_assert(sizeof(::System::Action_2<bool, bool>*) == 0x8);
    // private System.Single[] <MultiNote>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<float> MultiNote;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Get instance field reference: private System.Int32 <NoteNumberX>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$NoteNumberX$k__BackingField();
    // Get instance field reference: private System.Int32 <NoteNumberY>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$NoteNumberY$k__BackingField();
    // Get instance field reference: private System.Int32 <NoteNumberZ>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$NoteNumberZ$k__BackingField();
    // Get instance field reference: private System.Int32 <NoteNumber3D>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$NoteNumber3D$k__BackingField();
    // Get instance field reference: private System.Boolean <IsOdd>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsOdd$k__BackingField();
    // Get instance field reference: private System.Boolean <IsOctave>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsOctave$k__BackingField();
    // Get instance field reference: private System.Boolean <IsPlaying>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsPlaying$k__BackingField();
    // Get instance field reference: private System.Boolean <IsHovering>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsHovering$k__BackingField();
    // Get instance field reference: public System.Action`2<System.Boolean,VROSC.PlayData> OnPlay
    [[deprecated("Use field access instead!")]] ::System::Action_2<bool, ::VROSC::PlayData>*& dyn_OnPlay();
    // Get instance field reference: public System.Action`2<System.Boolean,System.Boolean> OnHovering
    [[deprecated("Use field access instead!")]] ::System::Action_2<bool, bool>*& dyn_OnHovering();
    // Get instance field reference: private System.Single[] <MultiNote>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_$MultiNote$k__BackingField();
    // public System.Int32 get_NoteNumberX()
    // Offset: 0xC59B9C
    int get_NoteNumberX();
    // private System.Void set_NoteNumberX(System.Int32 value)
    // Offset: 0xC59BA4
    void set_NoteNumberX(int value);
    // public System.Int32 get_NoteNumberY()
    // Offset: 0xC59BAC
    int get_NoteNumberY();
    // private System.Void set_NoteNumberY(System.Int32 value)
    // Offset: 0xC59BB4
    void set_NoteNumberY(int value);
    // public System.Int32 get_NoteNumberZ()
    // Offset: 0xC59BBC
    int get_NoteNumberZ();
    // private System.Void set_NoteNumberZ(System.Int32 value)
    // Offset: 0xC59BC4
    void set_NoteNumberZ(int value);
    // public System.Int32 get_NoteNumber3D()
    // Offset: 0xC59BCC
    int get_NoteNumber3D();
    // private System.Void set_NoteNumber3D(System.Int32 value)
    // Offset: 0xC59BD4
    void set_NoteNumber3D(int value);
    // public System.Boolean get_IsOdd()
    // Offset: 0xC59BDC
    bool get_IsOdd();
    // private System.Void set_IsOdd(System.Boolean value)
    // Offset: 0xC59BE4
    void set_IsOdd(bool value);
    // public System.Boolean get_IsOctave()
    // Offset: 0xC59BF0
    bool get_IsOctave();
    // private System.Void set_IsOctave(System.Boolean value)
    // Offset: 0xC59BF8
    void set_IsOctave(bool value);
    // public System.Boolean get_IsPlaying()
    // Offset: 0xC59C04
    bool get_IsPlaying();
    // private System.Void set_IsPlaying(System.Boolean value)
    // Offset: 0xC59C0C
    void set_IsPlaying(bool value);
    // public System.Boolean get_IsHovering()
    // Offset: 0xC59C18
    bool get_IsHovering();
    // private System.Void set_IsHovering(System.Boolean value)
    // Offset: 0xC59C20
    void set_IsHovering(bool value);
    // public System.Single[] get_MultiNote()
    // Offset: 0xC59C2C
    ::ArrayW<float> get_MultiNote();
    // private System.Void set_MultiNote(System.Single[] value)
    // Offset: 0xC59C34
    void set_MultiNote(::ArrayW<float> value);
    // public System.Void .ctor(System.Int32 x, System.Int32 y, System.Int32 z, System.Int32 noteNumber3D, System.Boolean isOdd, System.Boolean isOctave)
    // Offset: 0xC58F50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteFieldNoteData* New_ctor(int x, int y, int z, int noteNumber3D, bool isOdd, bool isOctave) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldNoteData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteFieldNoteData*, creationType>(x, y, z, noteNumber3D, isOdd, isOctave)));
    }
    // public System.Void SetHovering(System.Boolean isHovering)
    // Offset: 0xC59C3C
    void SetHovering(bool isHovering);
    // public System.Void SetPlaying(System.Boolean isPlaying, VROSC.PlayData playData)
    // Offset: 0xC57508
    void SetPlaying(bool isPlaying, ::VROSC::PlayData playData);
    // public System.Void SetMultiNote(System.Int32 index, System.Single amount)
    // Offset: 0xC575B4
    void SetMultiNote(int index, float amount);
  }; // VROSC.NoteFieldNoteData
  #pragma pack(pop)
  static check_size<sizeof(NoteFieldNoteData), 56 + sizeof(::ArrayW<float>)> __VROSC_NoteFieldNoteDataSizeCheck;
  static_assert(sizeof(NoteFieldNoteData) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::get_NoteNumberX
// Il2CppName: get_NoteNumberX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::NoteFieldNoteData::*)()>(&VROSC::NoteFieldNoteData::get_NoteNumberX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "get_NoteNumberX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::set_NoteNumberX
// Il2CppName: set_NoteNumberX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldNoteData::*)(int)>(&VROSC::NoteFieldNoteData::set_NoteNumberX)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "set_NoteNumberX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::get_NoteNumberY
// Il2CppName: get_NoteNumberY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::NoteFieldNoteData::*)()>(&VROSC::NoteFieldNoteData::get_NoteNumberY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "get_NoteNumberY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::set_NoteNumberY
// Il2CppName: set_NoteNumberY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldNoteData::*)(int)>(&VROSC::NoteFieldNoteData::set_NoteNumberY)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "set_NoteNumberY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::get_NoteNumberZ
// Il2CppName: get_NoteNumberZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::NoteFieldNoteData::*)()>(&VROSC::NoteFieldNoteData::get_NoteNumberZ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "get_NoteNumberZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::set_NoteNumberZ
// Il2CppName: set_NoteNumberZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldNoteData::*)(int)>(&VROSC::NoteFieldNoteData::set_NoteNumberZ)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "set_NoteNumberZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::get_NoteNumber3D
// Il2CppName: get_NoteNumber3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::NoteFieldNoteData::*)()>(&VROSC::NoteFieldNoteData::get_NoteNumber3D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "get_NoteNumber3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::set_NoteNumber3D
// Il2CppName: set_NoteNumber3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldNoteData::*)(int)>(&VROSC::NoteFieldNoteData::set_NoteNumber3D)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "set_NoteNumber3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::get_IsOdd
// Il2CppName: get_IsOdd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::NoteFieldNoteData::*)()>(&VROSC::NoteFieldNoteData::get_IsOdd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "get_IsOdd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::set_IsOdd
// Il2CppName: set_IsOdd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldNoteData::*)(bool)>(&VROSC::NoteFieldNoteData::set_IsOdd)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "set_IsOdd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::get_IsOctave
// Il2CppName: get_IsOctave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::NoteFieldNoteData::*)()>(&VROSC::NoteFieldNoteData::get_IsOctave)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "get_IsOctave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::set_IsOctave
// Il2CppName: set_IsOctave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldNoteData::*)(bool)>(&VROSC::NoteFieldNoteData::set_IsOctave)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "set_IsOctave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::get_IsPlaying
// Il2CppName: get_IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::NoteFieldNoteData::*)()>(&VROSC::NoteFieldNoteData::get_IsPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "get_IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::set_IsPlaying
// Il2CppName: set_IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldNoteData::*)(bool)>(&VROSC::NoteFieldNoteData::set_IsPlaying)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "set_IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::get_IsHovering
// Il2CppName: get_IsHovering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::NoteFieldNoteData::*)()>(&VROSC::NoteFieldNoteData::get_IsHovering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "get_IsHovering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::set_IsHovering
// Il2CppName: set_IsHovering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldNoteData::*)(bool)>(&VROSC::NoteFieldNoteData::set_IsHovering)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "set_IsHovering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::get_MultiNote
// Il2CppName: get_MultiNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (VROSC::NoteFieldNoteData::*)()>(&VROSC::NoteFieldNoteData::get_MultiNote)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "get_MultiNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::set_MultiNote
// Il2CppName: set_MultiNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldNoteData::*)(::ArrayW<float>)>(&VROSC::NoteFieldNoteData::set_MultiNote)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "set_MultiNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::SetHovering
// Il2CppName: SetHovering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldNoteData::*)(bool)>(&VROSC::NoteFieldNoteData::SetHovering)> {
  static const MethodInfo* get() {
    static auto* isHovering = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "SetHovering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isHovering});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::SetPlaying
// Il2CppName: SetPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldNoteData::*)(bool, ::VROSC::PlayData)>(&VROSC::NoteFieldNoteData::SetPlaying)> {
  static const MethodInfo* get() {
    static auto* isPlaying = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* playData = &::il2cpp_utils::GetClassFromName("VROSC", "PlayData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "SetPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isPlaying, playData});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldNoteData::SetMultiNote
// Il2CppName: SetMultiNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldNoteData::*)(int, float)>(&VROSC::NoteFieldNoteData::SetMultiNote)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldNoteData*), "SetMultiNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, amount});
  }
};
