// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: AnimatedAppear
  class AnimatedAppear;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: AnimatedPanel
  class AnimatedPanel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AnimatedPanel);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AnimatedPanel*, "VROSC", "AnimatedPanel");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AnimatedPanel
  // [TokenAttribute] Offset: FFFFFFFF
  class AnimatedPanel : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.AnimatedAppear _animation
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::AnimatedAppear* animation;
    // Field size check
    static_assert(sizeof(::VROSC::AnimatedAppear*) == 0x8);
    // private System.Boolean _isClosing
    // Size: 0x1
    // Offset: 0x20
    bool isClosing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.AnimatedAppear _animation
    [[deprecated("Use field access instead!")]] ::VROSC::AnimatedAppear*& dyn__animation();
    // Get instance field reference: private System.Boolean _isClosing
    [[deprecated("Use field access instead!")]] bool& dyn__isClosing();
    // public System.Boolean get_IsAnimating()
    // Offset: 0x96AB10
    bool get_IsAnimating();
    // public System.Void .ctor()
    // Offset: 0x96AC60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AnimatedPanel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedPanel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AnimatedPanel*, creationType>()));
    }
    // public System.Void SetActive(System.Boolean shouldBeOpen)
    // Offset: 0x96AB28
    void SetActive(bool shouldBeOpen);
    // private System.Void Update()
    // Offset: 0x96AC00
    void Update();
    // private System.Void FinishClosing()
    // Offset: 0x96ABB8
    void FinishClosing();
    // private System.Void OnDisable()
    // Offset: 0x96AC50
    void OnDisable();
  }; // VROSC.AnimatedPanel
  #pragma pack(pop)
  static check_size<sizeof(AnimatedPanel), 32 + sizeof(bool)> __VROSC_AnimatedPanelSizeCheck;
  static_assert(sizeof(AnimatedPanel) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AnimatedPanel::get_IsAnimating
// Il2CppName: get_IsAnimating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::AnimatedPanel::*)()>(&VROSC::AnimatedPanel::get_IsAnimating)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedPanel*), "get_IsAnimating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedPanel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::AnimatedPanel::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedPanel::*)(bool)>(&VROSC::AnimatedPanel::SetActive)> {
  static const MethodInfo* get() {
    static auto* shouldBeOpen = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedPanel*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shouldBeOpen});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedPanel::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedPanel::*)()>(&VROSC::AnimatedPanel::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedPanel*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedPanel::FinishClosing
// Il2CppName: FinishClosing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedPanel::*)()>(&VROSC::AnimatedPanel::FinishClosing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedPanel*), "FinishClosing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedPanel::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedPanel::*)()>(&VROSC::AnimatedPanel::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedPanel*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
