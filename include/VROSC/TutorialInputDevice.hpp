// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: HighlightControllerComponents
  class HighlightControllerComponents;
  // Forward declaring type: TriggerButton
  struct TriggerButton;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TutorialInputDevice
  class TutorialInputDevice;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TutorialInputDevice);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TutorialInputDevice*, "VROSC", "TutorialInputDevice");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TutorialInputDevice
  // [TokenAttribute] Offset: FFFFFFFF
  class TutorialInputDevice : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::TutorialInputDevice::BlinkingButton
    class BlinkingButton;
    public:
    // private VROSC.HighlightControllerComponents _controllerComponents
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::HighlightControllerComponents* controllerComponents;
    // Field size check
    static_assert(sizeof(::VROSC::HighlightControllerComponents*) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.TutorialInputDevice/VROSC.BlinkingButton> _blinkingButtons
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::VROSC::TutorialInputDevice::BlinkingButton*>* blinkingButtons;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::TutorialInputDevice::BlinkingButton*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.HighlightControllerComponents _controllerComponents
    [[deprecated]] ::VROSC::HighlightControllerComponents*& dyn__controllerComponents();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.TutorialInputDevice/VROSC.BlinkingButton> _blinkingButtons
    [[deprecated]] ::System::Collections::Generic::List_1<::VROSC::TutorialInputDevice::BlinkingButton*>*& dyn__blinkingButtons();
    // private System.Void Start()
    // Offset: 0xA2F5D0
    void Start();
    // private System.Void OnEnable()
    // Offset: 0xA2F6CC
    void OnEnable();
    // private System.Void LateUpdate()
    // Offset: 0xA2F7F4
    void LateUpdate();
    // public System.Void StopAllBlinking(System.Single fadeTime)
    // Offset: 0xA2F930
    void StopAllBlinking(float fadeTime);
    // public System.Void StartButtonBlinking(VROSC.TriggerButton trigger, UnityEngine.Color color)
    // Offset: 0xA2FA64
    void StartButtonBlinking(::VROSC::TriggerButton trigger, ::UnityEngine::Color color);
    // public System.Void StopButtonBlinking(VROSC.TriggerButton trigger, System.Single fadeTime)
    // Offset: 0xA2FC28
    void StopButtonBlinking(::VROSC::TriggerButton trigger, float fadeTime);
    // private VROSC.TutorialInputDevice/VROSC.BlinkingButton GetBlinkingButtonByTrigger(VROSC.TriggerButton trigger)
    // Offset: 0xA2FAD0
    ::VROSC::TutorialInputDevice::BlinkingButton* GetBlinkingButtonByTrigger(::VROSC::TriggerButton trigger);
    // public System.Void .ctor()
    // Offset: 0xA2FC68
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TutorialInputDevice* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TutorialInputDevice::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TutorialInputDevice*, creationType>()));
    }
  }; // VROSC.TutorialInputDevice
  #pragma pack(pop)
  static check_size<sizeof(TutorialInputDevice), 32 + sizeof(::System::Collections::Generic::List_1<::VROSC::TutorialInputDevice::BlinkingButton*>*)> __VROSC_TutorialInputDeviceSizeCheck;
  static_assert(sizeof(TutorialInputDevice) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TutorialInputDevice::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialInputDevice::*)()>(&VROSC::TutorialInputDevice::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialInputDevice*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialInputDevice::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialInputDevice::*)()>(&VROSC::TutorialInputDevice::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialInputDevice*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialInputDevice::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialInputDevice::*)()>(&VROSC::TutorialInputDevice::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialInputDevice*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialInputDevice::StopAllBlinking
// Il2CppName: StopAllBlinking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialInputDevice::*)(float)>(&VROSC::TutorialInputDevice::StopAllBlinking)> {
  static const MethodInfo* get() {
    static auto* fadeTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialInputDevice*), "StopAllBlinking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fadeTime});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialInputDevice::StartButtonBlinking
// Il2CppName: StartButtonBlinking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialInputDevice::*)(::VROSC::TriggerButton, ::UnityEngine::Color)>(&VROSC::TutorialInputDevice::StartButtonBlinking)> {
  static const MethodInfo* get() {
    static auto* trigger = &::il2cpp_utils::GetClassFromName("VROSC", "TriggerButton")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialInputDevice*), "StartButtonBlinking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trigger, color});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialInputDevice::StopButtonBlinking
// Il2CppName: StopButtonBlinking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialInputDevice::*)(::VROSC::TriggerButton, float)>(&VROSC::TutorialInputDevice::StopButtonBlinking)> {
  static const MethodInfo* get() {
    static auto* trigger = &::il2cpp_utils::GetClassFromName("VROSC", "TriggerButton")->byval_arg;
    static auto* fadeTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialInputDevice*), "StopButtonBlinking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trigger, fadeTime});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialInputDevice::GetBlinkingButtonByTrigger
// Il2CppName: GetBlinkingButtonByTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::TutorialInputDevice::BlinkingButton* (VROSC::TutorialInputDevice::*)(::VROSC::TriggerButton)>(&VROSC::TutorialInputDevice::GetBlinkingButtonByTrigger)> {
  static const MethodInfo* get() {
    static auto* trigger = &::il2cpp_utils::GetClassFromName("VROSC", "TriggerButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialInputDevice*), "GetBlinkingButtonByTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trigger});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialInputDevice::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
