// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.PlayableBehaviour
#include "UnityEngine/Playables/PlayableBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: FrameData
  struct FrameData;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TMPTextAppearBehaviour
  class TMPTextAppearBehaviour;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TMPTextAppearBehaviour);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TMPTextAppearBehaviour*, "VROSC", "TMPTextAppearBehaviour");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TMPTextAppearBehaviour
  // [TokenAttribute] Offset: FFFFFFFF
  class TMPTextAppearBehaviour : public ::UnityEngine::Playables::PlayableBehaviour {
    public:
    public:
    // private TMPro.TextMeshPro _target
    // Size: 0x8
    // Offset: 0x10
    ::TMPro::TextMeshPro* target;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private UnityEngine.Color _visibleColor
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Color visibleColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [RangeAttribute] Offset: 0x789EE4
    // public System.Single Appear
    // Size: 0x4
    // Offset: 0x28
    float Appear;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private TMPro.TextMeshPro _target
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& dyn__target();
    // Get instance field reference: private UnityEngine.Color _visibleColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__visibleColor();
    // Get instance field reference: public System.Single Appear
    [[deprecated("Use field access instead!")]] float& dyn_Appear();
    // public System.Void .ctor()
    // Offset: 0x193A334
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TMPTextAppearBehaviour* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TMPTextAppearBehaviour::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TMPTextAppearBehaviour*, creationType>()));
    }
    // public System.Void Setup(TMPro.TextMeshPro target)
    // Offset: 0x193A268
    void Setup(::TMPro::TextMeshPro* target);
    // public override System.Void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    // Offset: 0x193A270
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    void ProcessFrame(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info, ::Il2CppObject* playerData);
  }; // VROSC.TMPTextAppearBehaviour
  #pragma pack(pop)
  static check_size<sizeof(TMPTextAppearBehaviour), 40 + sizeof(float)> __VROSC_TMPTextAppearBehaviourSizeCheck;
  static_assert(sizeof(TMPTextAppearBehaviour) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TMPTextAppearBehaviour::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::TMPTextAppearBehaviour::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TMPTextAppearBehaviour::*)(::TMPro::TextMeshPro*)>(&VROSC::TMPTextAppearBehaviour::Setup)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("TMPro", "TextMeshPro")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TMPTextAppearBehaviour*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: VROSC::TMPTextAppearBehaviour::ProcessFrame
// Il2CppName: ProcessFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TMPTextAppearBehaviour::*)(::UnityEngine::Playables::Playable, ::UnityEngine::Playables::FrameData, ::Il2CppObject*)>(&VROSC::TMPTextAppearBehaviour::ProcessFrame)> {
  static const MethodInfo* get() {
    static auto* playable = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "Playable")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "FrameData")->byval_arg;
    static auto* playerData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TMPTextAppearBehaviour*), "ProcessFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playable, info, playerData});
  }
};
