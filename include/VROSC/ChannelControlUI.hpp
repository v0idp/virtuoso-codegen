// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: UISpinner
  class UISpinner;
  // Forward declaring type: SynthController
  class SynthController;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ChannelControlUI
  class ChannelControlUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ChannelControlUI);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ChannelControlUI*, "VROSC", "ChannelControlUI");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ChannelControlUI
  // [TokenAttribute] Offset: FFFFFFFF
  class ChannelControlUI : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private TMPro.TextMeshPro _label
    // Size: 0x8
    // Offset: 0x18
    ::TMPro::TextMeshPro* label;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private VROSC.UISpinner _uISpinner
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::UISpinner* uISpinner;
    // Field size check
    static_assert(sizeof(::VROSC::UISpinner*) == 0x8);
    // private VROSC.SynthController _instrument
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::SynthController* instrument;
    // Field size check
    static_assert(sizeof(::VROSC::SynthController*) == 0x8);
    // private System.Boolean _usingMidi
    // Size: 0x1
    // Offset: 0x30
    bool usingMidi;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private TMPro.TextMeshPro _label
    [[deprecated]] ::TMPro::TextMeshPro*& dyn__label();
    // Get instance field reference: private VROSC.UISpinner _uISpinner
    [[deprecated]] ::VROSC::UISpinner*& dyn__uISpinner();
    // Get instance field reference: private VROSC.SynthController _instrument
    [[deprecated]] ::VROSC::SynthController*& dyn__instrument();
    // Get instance field reference: private System.Boolean _usingMidi
    [[deprecated]] bool& dyn__usingMidi();
    // private System.Void Start()
    // Offset: 0x9450A0
    void Start();
    // public System.Void Setup(VROSC.SynthController instrument)
    // Offset: 0x945174
    void Setup(::VROSC::SynthController* instrument);
    // private System.Void UseMidiChanged(System.Boolean usingMidi)
    // Offset: 0x9452B0
    void UseMidiChanged(bool usingMidi);
    // private System.Void Toggled(System.Boolean isActive)
    // Offset: 0x9456CC
    void Toggled(bool isActive);
    // private System.Void SetData(System.Boolean usingMidi)
    // Offset: 0x945348
    void SetData(bool usingMidi);
    // private System.Void UpdateSelection(System.Int32 selectedIndex)
    // Offset: 0x94575C
    void UpdateSelection(int selectedIndex);
    // public System.Void .ctor()
    // Offset: 0x9457B8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChannelControlUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ChannelControlUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChannelControlUI*, creationType>()));
    }
  }; // VROSC.ChannelControlUI
  #pragma pack(pop)
  static check_size<sizeof(ChannelControlUI), 48 + sizeof(bool)> __VROSC_ChannelControlUISizeCheck;
  static_assert(sizeof(ChannelControlUI) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ChannelControlUI::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ChannelControlUI::*)()>(&VROSC::ChannelControlUI::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ChannelControlUI*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ChannelControlUI::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ChannelControlUI::*)(::VROSC::SynthController*)>(&VROSC::ChannelControlUI::Setup)> {
  static const MethodInfo* get() {
    static auto* instrument = &::il2cpp_utils::GetClassFromName("VROSC", "SynthController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ChannelControlUI*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instrument});
  }
};
// Writing MetadataGetter for method: VROSC::ChannelControlUI::UseMidiChanged
// Il2CppName: UseMidiChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ChannelControlUI::*)(bool)>(&VROSC::ChannelControlUI::UseMidiChanged)> {
  static const MethodInfo* get() {
    static auto* usingMidi = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ChannelControlUI*), "UseMidiChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{usingMidi});
  }
};
// Writing MetadataGetter for method: VROSC::ChannelControlUI::Toggled
// Il2CppName: Toggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ChannelControlUI::*)(bool)>(&VROSC::ChannelControlUI::Toggled)> {
  static const MethodInfo* get() {
    static auto* isActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ChannelControlUI*), "Toggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isActive});
  }
};
// Writing MetadataGetter for method: VROSC::ChannelControlUI::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ChannelControlUI::*)(bool)>(&VROSC::ChannelControlUI::SetData)> {
  static const MethodInfo* get() {
    static auto* usingMidi = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ChannelControlUI*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{usingMidi});
  }
};
// Writing MetadataGetter for method: VROSC::ChannelControlUI::UpdateSelection
// Il2CppName: UpdateSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ChannelControlUI::*)(int)>(&VROSC::ChannelControlUI::UpdateSelection)> {
  static const MethodInfo* get() {
    static auto* selectedIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ChannelControlUI*), "UpdateSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selectedIndex});
  }
};
// Writing MetadataGetter for method: VROSC::ChannelControlUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
