// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Grabable
  class Grabable;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: HighlightSpawnable
  class HighlightSpawnable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::HighlightSpawnable);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::HighlightSpawnable*, "VROSC", "HighlightSpawnable");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x59
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.HighlightSpawnable
  // [TokenAttribute] Offset: FFFFFFFF
  class HighlightSpawnable : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::HighlightSpawnable::$CoHighlight$d__14
    class $CoHighlight$d__14;
    public:
    // private VROSC.Grabable _grabable
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::Grabable* grabable;
    // Field size check
    static_assert(sizeof(::VROSC::Grabable*) == 0x8);
    // private UnityEngine.AnimationCurve _highlightAnimationCurve
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AnimationCurve* highlightAnimationCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single _highlightAnimationDuration
    // Size: 0x4
    // Offset: 0x28
    float highlightAnimationDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _hoverLengthToAnimate
    // Size: 0x4
    // Offset: 0x2C
    float hoverLengthToAnimate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _hoverScale
    // Size: 0x4
    // Offset: 0x30
    float hoverScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: hoverScale and: hint
    char __padding4[0x4] = {};
    // private UnityEngine.GameObject _hint
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* hint;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Vector3 _startScale
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 startScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single _hoveringTimer
    // Size: 0x4
    // Offset: 0x4C
    float hoveringTimer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Coroutine _highlightRoutine
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Coroutine* highlightRoutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private System.Boolean _isHighlighted
    // Size: 0x1
    // Offset: 0x58
    bool isHighlighted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.Grabable _grabable
    [[deprecated]] ::VROSC::Grabable*& dyn__grabable();
    // Get instance field reference: private UnityEngine.AnimationCurve _highlightAnimationCurve
    [[deprecated]] ::UnityEngine::AnimationCurve*& dyn__highlightAnimationCurve();
    // Get instance field reference: private System.Single _highlightAnimationDuration
    [[deprecated]] float& dyn__highlightAnimationDuration();
    // Get instance field reference: private System.Single _hoverLengthToAnimate
    [[deprecated]] float& dyn__hoverLengthToAnimate();
    // Get instance field reference: private System.Single _hoverScale
    [[deprecated]] float& dyn__hoverScale();
    // Get instance field reference: private UnityEngine.GameObject _hint
    [[deprecated]] ::UnityEngine::GameObject*& dyn__hint();
    // Get instance field reference: private UnityEngine.Vector3 _startScale
    [[deprecated]] ::UnityEngine::Vector3& dyn__startScale();
    // Get instance field reference: private System.Single _hoveringTimer
    [[deprecated]] float& dyn__hoveringTimer();
    // Get instance field reference: private UnityEngine.Coroutine _highlightRoutine
    [[deprecated]] ::UnityEngine::Coroutine*& dyn__highlightRoutine();
    // Get instance field reference: private System.Boolean _isHighlighted
    [[deprecated]] bool& dyn__isHighlighted();
    // private System.Void Awake()
    // Offset: 0x1941A00
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x1941A3C
    void OnEnable();
    // private System.Void Update()
    // Offset: 0x1941B20
    void Update();
    // private System.Void Highlight(System.Boolean highlight)
    // Offset: 0x1941BA8
    void Highlight(bool highlight);
    // private System.Collections.IEnumerator CoHighlight(System.Boolean highlight)
    // Offset: 0x1941C18
    ::System::Collections::IEnumerator* CoHighlight(bool highlight);
    // private System.Void ShowHint(System.Boolean show)
    // Offset: 0x1941A80
    void ShowHint(bool show);
    // public System.Void .ctor()
    // Offset: 0x1941C98
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HighlightSpawnable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HighlightSpawnable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HighlightSpawnable*, creationType>()));
    }
  }; // VROSC.HighlightSpawnable
  #pragma pack(pop)
  static check_size<sizeof(HighlightSpawnable), 88 + sizeof(bool)> __VROSC_HighlightSpawnableSizeCheck;
  static_assert(sizeof(HighlightSpawnable) == 0x59);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::HighlightSpawnable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HighlightSpawnable::*)()>(&VROSC::HighlightSpawnable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::HighlightSpawnable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::HighlightSpawnable::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HighlightSpawnable::*)()>(&VROSC::HighlightSpawnable::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::HighlightSpawnable*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::HighlightSpawnable::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HighlightSpawnable::*)()>(&VROSC::HighlightSpawnable::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::HighlightSpawnable*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::HighlightSpawnable::Highlight
// Il2CppName: Highlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HighlightSpawnable::*)(bool)>(&VROSC::HighlightSpawnable::Highlight)> {
  static const MethodInfo* get() {
    static auto* highlight = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HighlightSpawnable*), "Highlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{highlight});
  }
};
// Writing MetadataGetter for method: VROSC::HighlightSpawnable::CoHighlight
// Il2CppName: CoHighlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (VROSC::HighlightSpawnable::*)(bool)>(&VROSC::HighlightSpawnable::CoHighlight)> {
  static const MethodInfo* get() {
    static auto* highlight = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HighlightSpawnable*), "CoHighlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{highlight});
  }
};
// Writing MetadataGetter for method: VROSC::HighlightSpawnable::ShowHint
// Il2CppName: ShowHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HighlightSpawnable::*)(bool)>(&VROSC::HighlightSpawnable::ShowHint)> {
  static const MethodInfo* get() {
    static auto* show = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HighlightSpawnable*), "ShowHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{show});
  }
};
// Writing MetadataGetter for method: VROSC::HighlightSpawnable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
