// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableAsset
  class PlayableAsset;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TimelinePlaybackHelper
  class TimelinePlaybackHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TimelinePlaybackHelper);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TimelinePlaybackHelper*, "VROSC", "TimelinePlaybackHelper");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TimelinePlaybackHelper
  // [TokenAttribute] Offset: FFFFFFFF
  class TimelinePlaybackHelper : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean <IsPlaying>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool IsPlaying;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsPlaying and: endTime
    char __padding0[0x7] = {};
    // private System.Double _endTime
    // Size: 0x8
    // Offset: 0x18
    double endTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double _startTime
    // Size: 0x8
    // Offset: 0x20
    double startTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Action OnEnd
    // Size: 0x8
    // Offset: 0x28
    ::System::Action* OnEnd;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Get instance field reference: private System.Boolean <IsPlaying>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsPlaying$k__BackingField();
    // Get instance field reference: private System.Double _endTime
    [[deprecated("Use field access instead!")]] double& dyn__endTime();
    // Get instance field reference: private System.Double _startTime
    [[deprecated("Use field access instead!")]] double& dyn__startTime();
    // Get instance field reference: public System.Action OnEnd
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnEnd();
    // public System.Boolean get_IsPlaying()
    // Offset: 0xA275E4
    bool get_IsPlaying();
    // private System.Void set_IsPlaying(System.Boolean value)
    // Offset: 0xA275D8
    void set_IsPlaying(bool value);
    // public System.Void .ctor()
    // Offset: 0xA276EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimelinePlaybackHelper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TimelinePlaybackHelper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimelinePlaybackHelper*, creationType>()));
    }
    // public System.Void Update()
    // Offset: 0xA275EC
    void Update();
    // public System.Void Start(UnityEngine.Playables.PlayableAsset playable)
    // Offset: 0xA2767C
    void Start(::UnityEngine::Playables::PlayableAsset* playable);
    // public System.Void Stop()
    // Offset: 0xA27644
    void Stop();
  }; // VROSC.TimelinePlaybackHelper
  #pragma pack(pop)
  static check_size<sizeof(TimelinePlaybackHelper), 40 + sizeof(::System::Action*)> __VROSC_TimelinePlaybackHelperSizeCheck;
  static_assert(sizeof(TimelinePlaybackHelper) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TimelinePlaybackHelper::get_IsPlaying
// Il2CppName: get_IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::TimelinePlaybackHelper::*)()>(&VROSC::TimelinePlaybackHelper::get_IsPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimelinePlaybackHelper*), "get_IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TimelinePlaybackHelper::set_IsPlaying
// Il2CppName: set_IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimelinePlaybackHelper::*)(bool)>(&VROSC::TimelinePlaybackHelper::set_IsPlaying)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimelinePlaybackHelper*), "set_IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::TimelinePlaybackHelper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::TimelinePlaybackHelper::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimelinePlaybackHelper::*)()>(&VROSC::TimelinePlaybackHelper::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimelinePlaybackHelper*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TimelinePlaybackHelper::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimelinePlaybackHelper::*)(::UnityEngine::Playables::PlayableAsset*)>(&VROSC::TimelinePlaybackHelper::Start)> {
  static const MethodInfo* get() {
    static auto* playable = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimelinePlaybackHelper*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playable});
  }
};
// Writing MetadataGetter for method: VROSC::TimelinePlaybackHelper::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimelinePlaybackHelper::*)()>(&VROSC::TimelinePlaybackHelper::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimelinePlaybackHelper*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
