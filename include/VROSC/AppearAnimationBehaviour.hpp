// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.PlayableBehaviour
#include "UnityEngine/Playables/PlayableBehaviour.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: FrameData
  struct FrameData;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: AppearAnimationBehaviour
  class AppearAnimationBehaviour;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AppearAnimationBehaviour);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AppearAnimationBehaviour*, "VROSC", "AppearAnimationBehaviour");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AppearAnimationBehaviour
  // [TokenAttribute] Offset: FFFFFFFF
  class AppearAnimationBehaviour : public ::UnityEngine::Playables::PlayableBehaviour {
    public:
    public:
    // private UnityEngine.AnimationCurve _positionCurve
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::AnimationCurve* positionCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve _rotationCurve
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AnimationCurve* rotationCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve _scaleCurve
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AnimationCurve* scaleCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.Transform _target
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _start
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* start;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _end
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* end;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Quaternion _randomStartRotation
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Quaternion randomStartRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public System.Single animation
    // Size: 0x4
    // Offset: 0x50
    float animation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.AnimationCurve _positionCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__positionCurve();
    // Get instance field reference: private UnityEngine.AnimationCurve _rotationCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__rotationCurve();
    // Get instance field reference: private UnityEngine.AnimationCurve _scaleCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__scaleCurve();
    // Get instance field reference: private UnityEngine.Transform _target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__target();
    // Get instance field reference: private UnityEngine.Transform _start
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__start();
    // Get instance field reference: private UnityEngine.Transform _end
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__end();
    // Get instance field reference: private UnityEngine.Quaternion _randomStartRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__randomStartRotation();
    // Get instance field reference: public System.Single animation
    [[deprecated("Use field access instead!")]] float& dyn_animation();
    // public System.Void .ctor()
    // Offset: 0x96CB0C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AppearAnimationBehaviour* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AppearAnimationBehaviour::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AppearAnimationBehaviour*, creationType>()));
    }
    // public System.Void Setup(UnityEngine.Transform target, UnityEngine.Transform start, UnityEngine.Transform end, UnityEngine.AnimationCurve positionCurve, UnityEngine.AnimationCurve rotationCurve, UnityEngine.AnimationCurve scaleCurve, System.Single randomMidPoint)
    // Offset: 0x96C804
    void Setup(::UnityEngine::Transform* target, ::UnityEngine::Transform* start, ::UnityEngine::Transform* end, ::UnityEngine::AnimationCurve* positionCurve, ::UnityEngine::AnimationCurve* rotationCurve, ::UnityEngine::AnimationCurve* scaleCurve, float randomMidPoint);
    // public override System.Void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    // Offset: 0x96C8C4
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    void ProcessFrame(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info, ::Il2CppObject* playerData);
  }; // VROSC.AppearAnimationBehaviour
  #pragma pack(pop)
  static check_size<sizeof(AppearAnimationBehaviour), 80 + sizeof(float)> __VROSC_AppearAnimationBehaviourSizeCheck;
  static_assert(sizeof(AppearAnimationBehaviour) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AppearAnimationBehaviour::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::AppearAnimationBehaviour::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AppearAnimationBehaviour::*)(::UnityEngine::Transform*, ::UnityEngine::Transform*, ::UnityEngine::Transform*, ::UnityEngine::AnimationCurve*, ::UnityEngine::AnimationCurve*, ::UnityEngine::AnimationCurve*, float)>(&VROSC::AppearAnimationBehaviour::Setup)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* positionCurve = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    static auto* rotationCurve = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    static auto* scaleCurve = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    static auto* randomMidPoint = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AppearAnimationBehaviour*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, start, end, positionCurve, rotationCurve, scaleCurve, randomMidPoint});
  }
};
// Writing MetadataGetter for method: VROSC::AppearAnimationBehaviour::ProcessFrame
// Il2CppName: ProcessFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AppearAnimationBehaviour::*)(::UnityEngine::Playables::Playable, ::UnityEngine::Playables::FrameData, ::Il2CppObject*)>(&VROSC::AppearAnimationBehaviour::ProcessFrame)> {
  static const MethodInfo* get() {
    static auto* playable = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "Playable")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "FrameData")->byval_arg;
    static auto* playerData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AppearAnimationBehaviour*), "ProcessFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playable, info, playerData});
  }
};
