// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.SignalNode
#include "VROSC/SignalNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: InstrumentController
  class InstrumentController;
  // Forward declaring type: IntField
  class IntField;
  // Forward declaring type: Signal
  class Signal;
  // Forward declaring type: HandType
  struct HandType;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: NotePlayer
  class NotePlayer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::NotePlayer);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::NotePlayer*, "VROSC", "NotePlayer");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x84
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.NotePlayer
  // [TokenAttribute] Offset: FFFFFFFF
  class NotePlayer : public ::VROSC::SignalNode {
    public:
    // Nested type: ::VROSC::NotePlayer::$$c__DisplayClass18_0
    class $$c__DisplayClass18_0;
    // Nested type: ::VROSC::NotePlayer::$PlayNoteQuantized$d__20
    struct $PlayNoteQuantized$d__20;
    // Nested type: ::VROSC::NotePlayer::$Stop$d__21
    struct $Stop$d__21;
    public:
    // protected VROSC.InstrumentController _instrument
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::InstrumentController* instrument;
    // Field size check
    static_assert(sizeof(::VROSC::InstrumentController*) == 0x8);
    // private VROSC.IntField _note
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::IntField* note;
    // Field size check
    static_assert(sizeof(::VROSC::IntField*) == 0x8);
    // private VROSC.IntField _noteOffset
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::IntField* noteOffset;
    // Field size check
    static_assert(sizeof(::VROSC::IntField*) == 0x8);
    // private System.Single _pitch
    // Size: 0x4
    // Offset: 0x58
    float pitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Int32 _currentPlayingNote
    // Size: 0x4
    // Offset: 0x5C
    int currentPlayingNote;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 _scheduledNote
    // Size: 0x4
    // Offset: 0x60
    int scheduledNote;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 _heldNote
    // Size: 0x4
    // Offset: 0x64
    int heldNote;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Single _scheduledNoteHoldTime
    // Size: 0x4
    // Offset: 0x68
    float scheduledNoteHoldTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single _heldNoteHoldTime
    // Size: 0x4
    // Offset: 0x6C
    float heldNoteHoldTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Boolean _stopScheduled
    // Size: 0x1
    // Offset: 0x70
    bool stopScheduled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: stopScheduled and: scheduledQuantizeSteps
    char __padding9[0x7] = {};
    // private System.Collections.Generic.List`1<System.Double> _scheduledQuantizeSteps
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<double>* scheduledQuantizeSteps;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<double>*) == 0x8);
    // protected System.Single _currentVelocity
    // Size: 0x4
    // Offset: 0x80
    float currentVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: protected VROSC.InstrumentController _instrument
    [[deprecated("Use field access instead!")]] ::VROSC::InstrumentController*& dyn__instrument();
    // Get instance field reference: private VROSC.IntField _note
    [[deprecated("Use field access instead!")]] ::VROSC::IntField*& dyn__note();
    // Get instance field reference: private VROSC.IntField _noteOffset
    [[deprecated("Use field access instead!")]] ::VROSC::IntField*& dyn__noteOffset();
    // Get instance field reference: private System.Single _pitch
    [[deprecated("Use field access instead!")]] float& dyn__pitch();
    // Get instance field reference: protected System.Int32 _currentPlayingNote
    [[deprecated("Use field access instead!")]] int& dyn__currentPlayingNote();
    // Get instance field reference: protected System.Int32 _scheduledNote
    [[deprecated("Use field access instead!")]] int& dyn__scheduledNote();
    // Get instance field reference: protected System.Int32 _heldNote
    [[deprecated("Use field access instead!")]] int& dyn__heldNote();
    // Get instance field reference: protected System.Single _scheduledNoteHoldTime
    [[deprecated("Use field access instead!")]] float& dyn__scheduledNoteHoldTime();
    // Get instance field reference: protected System.Single _heldNoteHoldTime
    [[deprecated("Use field access instead!")]] float& dyn__heldNoteHoldTime();
    // Get instance field reference: protected System.Boolean _stopScheduled
    [[deprecated("Use field access instead!")]] bool& dyn__stopScheduled();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Double> _scheduledQuantizeSteps
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<double>*& dyn__scheduledQuantizeSteps();
    // Get instance field reference: protected System.Single _currentVelocity
    [[deprecated("Use field access instead!")]] float& dyn__currentVelocity();
    // public System.Int32 get_CurrentlyPlayingNote()
    // Offset: 0xC5A88C
    int get_CurrentlyPlayingNote();
    // protected System.Void Update()
    // Offset: 0xC575F8
    void Update();
    // protected System.Void Play(VROSC.Signal signal, System.Boolean linkHands)
    // Offset: 0xC577E8
    void Play(::VROSC::Signal* signal, bool linkHands);
    // public System.Int32 GetNote(UnityEngine.Vector3 position)
    // Offset: 0xC5AA80
    int GetNote(::UnityEngine::Vector3 position);
    // protected System.Void PlayNoteQuantized(System.Int32 note, System.Single velocity, System.Double predictedDspTime, VROSC.HandType handType)
    // Offset: 0xC5A990
    void PlayNoteQuantized(int note, float velocity, double predictedDspTime, ::VROSC::HandType handType);
    // protected System.Threading.Tasks.Task Stop(System.Boolean immediate, VROSC.HandType handType, System.Boolean linkHands)
    // Offset: 0xC58070
    ::System::Threading::Tasks::Task* Stop(bool immediate, ::VROSC::HandType handType, bool linkHands);
    // public System.Void SetInstrument(VROSC.InstrumentController instrument)
    // Offset: 0xC5AACC
    void SetInstrument(::VROSC::InstrumentController* instrument);
    // public System.Void SetPitch(System.Single pitch)
    // Offset: 0xC5AAD4
    void SetPitch(float pitch);
    // public System.Void .ctor()
    // Offset: 0xC57FD4
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NotePlayer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NotePlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NotePlayer*, creationType>()));
    }
    // protected override System.Void NodeBegin(VROSC.Signal signal)
    // Offset: 0xC5A894
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeBegin(VROSC.Signal signal)
    void NodeBegin(::VROSC::Signal* signal);
    // protected override System.Void NodeStay(VROSC.Signal signal)
    // Offset: 0xC5A8A8
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeStay(VROSC.Signal signal)
    void NodeStay(::VROSC::Signal* signal);
    // protected override System.Void NodeEnd(VROSC.Signal signal)
    // Offset: 0xC5A8BC
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeEnd(VROSC.Signal signal)
    void NodeEnd(::VROSC::Signal* signal);
  }; // VROSC.NotePlayer
  #pragma pack(pop)
  static check_size<sizeof(NotePlayer), 128 + sizeof(float)> __VROSC_NotePlayerSizeCheck;
  static_assert(sizeof(NotePlayer) == 0x84);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::NotePlayer::get_CurrentlyPlayingNote
// Il2CppName: get_CurrentlyPlayingNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::NotePlayer::*)()>(&VROSC::NotePlayer::get_CurrentlyPlayingNote)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NotePlayer*), "get_CurrentlyPlayingNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NotePlayer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NotePlayer::*)()>(&VROSC::NotePlayer::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NotePlayer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NotePlayer::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NotePlayer::*)(::VROSC::Signal*, bool)>(&VROSC::NotePlayer::Play)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    static auto* linkHands = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NotePlayer*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal, linkHands});
  }
};
// Writing MetadataGetter for method: VROSC::NotePlayer::GetNote
// Il2CppName: GetNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::NotePlayer::*)(::UnityEngine::Vector3)>(&VROSC::NotePlayer::GetNote)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NotePlayer*), "GetNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: VROSC::NotePlayer::PlayNoteQuantized
// Il2CppName: PlayNoteQuantized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NotePlayer::*)(int, float, double, ::VROSC::HandType)>(&VROSC::NotePlayer::PlayNoteQuantized)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* predictedDspTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* handType = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NotePlayer*), "PlayNoteQuantized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, velocity, predictedDspTime, handType});
  }
};
// Writing MetadataGetter for method: VROSC::NotePlayer::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (VROSC::NotePlayer::*)(bool, ::VROSC::HandType, bool)>(&VROSC::NotePlayer::Stop)> {
  static const MethodInfo* get() {
    static auto* immediate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* handType = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    static auto* linkHands = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NotePlayer*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{immediate, handType, linkHands});
  }
};
// Writing MetadataGetter for method: VROSC::NotePlayer::SetInstrument
// Il2CppName: SetInstrument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NotePlayer::*)(::VROSC::InstrumentController*)>(&VROSC::NotePlayer::SetInstrument)> {
  static const MethodInfo* get() {
    static auto* instrument = &::il2cpp_utils::GetClassFromName("VROSC", "InstrumentController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NotePlayer*), "SetInstrument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instrument});
  }
};
// Writing MetadataGetter for method: VROSC::NotePlayer::SetPitch
// Il2CppName: SetPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NotePlayer::*)(float)>(&VROSC::NotePlayer::SetPitch)> {
  static const MethodInfo* get() {
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NotePlayer*), "SetPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pitch});
  }
};
// Writing MetadataGetter for method: VROSC::NotePlayer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::NotePlayer::NodeBegin
// Il2CppName: NodeBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NotePlayer::*)(::VROSC::Signal*)>(&VROSC::NotePlayer::NodeBegin)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NotePlayer*), "NodeBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::NotePlayer::NodeStay
// Il2CppName: NodeStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NotePlayer::*)(::VROSC::Signal*)>(&VROSC::NotePlayer::NodeStay)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NotePlayer*), "NodeStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::NotePlayer::NodeEnd
// Il2CppName: NodeEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NotePlayer::*)(::VROSC::Signal*)>(&VROSC::NotePlayer::NodeEnd)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NotePlayer*), "NodeEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
