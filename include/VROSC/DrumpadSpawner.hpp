// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.Grabable
#include "VROSC/Grabable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: DrumpadPlayer
  class DrumpadPlayer;
  // Forward declaring type: Drumpad
  class Drumpad;
  // Forward declaring type: DrumPadEffectOnSignal
  class DrumPadEffectOnSignal;
  // Forward declaring type: TransformMoverRelay
  class TransformMoverRelay;
  // Forward declaring type: ModularDrumsController
  class ModularDrumsController;
  // Forward declaring type: GrabData
  class GrabData;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: VROSC::UI
namespace VROSC::UI {
  // Forward declaring type: DrumSampleSwitcherUI
  class DrumSampleSwitcherUI;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: Coroutine
  class Coroutine;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: DrumpadSpawner
  class DrumpadSpawner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::DrumpadSpawner);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::DrumpadSpawner*, "VROSC", "DrumpadSpawner");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x108
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.DrumpadSpawner
  // [TokenAttribute] Offset: FFFFFFFF
  class DrumpadSpawner : public ::VROSC::Grabable {
    public:
    // Writing base type padding for base size: 0x69 to desired offset: 0x70
    char ___base_padding[0x7] = {};
    // Nested type: ::VROSC::DrumpadSpawner::$CoHighlight$d__30
    class $CoHighlight$d__30;
    public:
    // private VROSC.DrumpadPlayer _player
    // Size: 0x8
    // Offset: 0x70
    ::VROSC::DrumpadPlayer* player;
    // Field size check
    static_assert(sizeof(::VROSC::DrumpadPlayer*) == 0x8);
    // private TMPro.TextMeshPro _headerText
    // Size: 0x8
    // Offset: 0x78
    ::TMPro::TextMeshPro* headerText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private VROSC.UI.DrumSampleSwitcherUI _switcher
    // Size: 0x8
    // Offset: 0x80
    ::VROSC::UI::DrumSampleSwitcherUI* switcher;
    // Field size check
    static_assert(sizeof(::VROSC::UI::DrumSampleSwitcherUI*) == 0x8);
    // private VROSC.Drumpad _prefab
    // Size: 0x8
    // Offset: 0x88
    ::VROSC::Drumpad* prefab;
    // Field size check
    static_assert(sizeof(::VROSC::Drumpad*) == 0x8);
    // private VROSC.DrumPadEffectOnSignal _preview
    // Size: 0x8
    // Offset: 0x90
    ::VROSC::DrumPadEffectOnSignal* preview;
    // Field size check
    static_assert(sizeof(::VROSC::DrumPadEffectOnSignal*) == 0x8);
    // private UnityEngine.Transform _parent
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Transform* parent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private VROSC.TransformMoverRelay _moveRelay
    // Size: 0x8
    // Offset: 0xA0
    ::VROSC::TransformMoverRelay* moveRelay;
    // Field size check
    static_assert(sizeof(::VROSC::TransformMoverRelay*) == 0x8);
    // private System.Single _spawnScaleMultiplier
    // Size: 0x4
    // Offset: 0xA8
    float spawnScaleMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _hoverLengthToGrab
    // Size: 0x4
    // Offset: 0xAC
    float hoverLengthToGrab;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.AnimationCurve _highlightAnimationCurve
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::AnimationCurve* highlightAnimationCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single _highlightAnimationDuration
    // Size: 0x4
    // Offset: 0xB8
    float highlightAnimationDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: highlightAnimationDuration and: hintText
    char __padding10[0x4] = {};
    // private UnityEngine.GameObject _hintText
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::GameObject* hintText;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.MaterialPropertyBlock _materialBlock
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::MaterialPropertyBlock* materialBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    // private VROSC.ModularDrumsController _instrumentController
    // Size: 0x8
    // Offset: 0xD0
    ::VROSC::ModularDrumsController* instrumentController;
    // Field size check
    static_assert(sizeof(::VROSC::ModularDrumsController*) == 0x8);
    // private System.Int32 _empadId
    // Size: 0x4
    // Offset: 0xD8
    int empadId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: empadId and: drumpads
    char __padding14[0x4] = {};
    // private System.Collections.Generic.List`1<VROSC.Drumpad> _drumpads
    // Size: 0x8
    // Offset: 0xE0
    ::System::Collections::Generic::List_1<::VROSC::Drumpad*>* drumpads;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::Drumpad*>*) == 0x8);
    // private System.Single _hoveringTimer
    // Size: 0x4
    // Offset: 0xE8
    float hoveringTimer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: hoveringTimer and: highlightRoutine
    char __padding16[0x4] = {};
    // private UnityEngine.Coroutine _highlightRoutine
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::Coroutine* highlightRoutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private System.Boolean _isHighlighted
    // Size: 0x1
    // Offset: 0xF8
    bool isHighlighted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _forceHighlight
    // Size: 0x1
    // Offset: 0xF9
    bool forceHighlight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: forceHighlight and: lastSpawnedDrumpad
    char __padding19[0x6] = {};
    // private VROSC.Drumpad lastSpawnedDrumpad
    // Size: 0x8
    // Offset: 0x100
    ::VROSC::Drumpad* lastSpawnedDrumpad;
    // Field size check
    static_assert(sizeof(::VROSC::Drumpad*) == 0x8);
    public:
    // Get instance field reference: private VROSC.DrumpadPlayer _player
    [[deprecated]] ::VROSC::DrumpadPlayer*& dyn__player();
    // Get instance field reference: private TMPro.TextMeshPro _headerText
    [[deprecated]] ::TMPro::TextMeshPro*& dyn__headerText();
    // Get instance field reference: private VROSC.UI.DrumSampleSwitcherUI _switcher
    [[deprecated]] ::VROSC::UI::DrumSampleSwitcherUI*& dyn__switcher();
    // Get instance field reference: private VROSC.Drumpad _prefab
    [[deprecated]] ::VROSC::Drumpad*& dyn__prefab();
    // Get instance field reference: private VROSC.DrumPadEffectOnSignal _preview
    [[deprecated]] ::VROSC::DrumPadEffectOnSignal*& dyn__preview();
    // Get instance field reference: private UnityEngine.Transform _parent
    [[deprecated]] ::UnityEngine::Transform*& dyn__parent();
    // Get instance field reference: private VROSC.TransformMoverRelay _moveRelay
    [[deprecated]] ::VROSC::TransformMoverRelay*& dyn__moveRelay();
    // Get instance field reference: private System.Single _spawnScaleMultiplier
    [[deprecated]] float& dyn__spawnScaleMultiplier();
    // Get instance field reference: private System.Single _hoverLengthToGrab
    [[deprecated]] float& dyn__hoverLengthToGrab();
    // Get instance field reference: private UnityEngine.AnimationCurve _highlightAnimationCurve
    [[deprecated]] ::UnityEngine::AnimationCurve*& dyn__highlightAnimationCurve();
    // Get instance field reference: private System.Single _highlightAnimationDuration
    [[deprecated]] float& dyn__highlightAnimationDuration();
    // Get instance field reference: private UnityEngine.GameObject _hintText
    [[deprecated]] ::UnityEngine::GameObject*& dyn__hintText();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock _materialBlock
    [[deprecated]] ::UnityEngine::MaterialPropertyBlock*& dyn__materialBlock();
    // Get instance field reference: private VROSC.ModularDrumsController _instrumentController
    [[deprecated]] ::VROSC::ModularDrumsController*& dyn__instrumentController();
    // Get instance field reference: private System.Int32 _empadId
    [[deprecated]] int& dyn__empadId();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.Drumpad> _drumpads
    [[deprecated]] ::System::Collections::Generic::List_1<::VROSC::Drumpad*>*& dyn__drumpads();
    // Get instance field reference: private System.Single _hoveringTimer
    [[deprecated]] float& dyn__hoveringTimer();
    // Get instance field reference: private UnityEngine.Coroutine _highlightRoutine
    [[deprecated]] ::UnityEngine::Coroutine*& dyn__highlightRoutine();
    // Get instance field reference: private System.Boolean _isHighlighted
    [[deprecated]] bool& dyn__isHighlighted();
    // Get instance field reference: private System.Boolean _forceHighlight
    [[deprecated]] bool& dyn__forceHighlight();
    // Get instance field reference: private VROSC.Drumpad lastSpawnedDrumpad
    [[deprecated]] ::VROSC::Drumpad*& dyn_lastSpawnedDrumpad();
    // public System.Int32 get_DrumpadsCount()
    // Offset: 0x8E8BE4
    int get_DrumpadsCount();
    // private System.Void Start()
    // Offset: 0x8E8C30
    void Start();
    // public System.Void Setup(System.Int32 groupId, VROSC.ModularDrumsController instrumentController)
    // Offset: 0x8E8D04
    void Setup(int groupId, ::VROSC::ModularDrumsController* instrumentController);
    // System.Void SetActive(System.Boolean isActive)
    // Offset: 0x8E9380
    void SetActive(bool isActive);
    // public System.Void Refresh(System.Int32 groupId, System.Int32 fixedEmpadId)
    // Offset: 0x8E8F04
    void Refresh(int groupId, int fixedEmpadId);
    // private System.Void OnDestroy()
    // Offset: 0x8E95F4
    void OnDestroy();
    // private System.Void Update()
    // Offset: 0x8E96C8
    void Update();
    // public System.Void ForceHighlight(System.Boolean forceHighlight)
    // Offset: 0x8E97CC
    void ForceHighlight(bool forceHighlight);
    // private System.Void Highlight(System.Boolean highlight)
    // Offset: 0x8E975C
    void Highlight(bool highlight);
    // private System.Collections.IEnumerator CoHighlight(System.Boolean highlight)
    // Offset: 0x8E97D8
    ::System::Collections::IEnumerator* CoHighlight(bool highlight);
    // private System.Void SetDrumSampleOrNoteNumber(System.Int32 sampleIdOrNoteNumber, System.Boolean preview)
    // Offset: 0x8E9858
    void SetDrumSampleOrNoteNumber(int sampleIdOrNoteNumber, bool preview);
    // private VROSC.Drumpad SpawnDrumpad(System.Int32 empadId, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Single scale)
    // Offset: 0x8E9AC4
    ::VROSC::Drumpad* SpawnDrumpad(int empadId, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, float scale);
    // private VROSC.Drumpad LoadDrumpad(System.Int32 empadId)
    // Offset: 0x8E94C4
    ::VROSC::Drumpad* LoadDrumpad(int empadId);
    // public System.Void DeleteAll()
    // Offset: 0x8E9CF8
    void DeleteAll();
    // private System.Void Colorize(UnityEngine.Color color)
    // Offset: 0x8E94A8
    void Colorize(::UnityEngine::Color color);
    // private System.Void RemovedDrumpad(VROSC.Drumpad drumpad)
    // Offset: 0x8E9D70
    void RemovedDrumpad(::VROSC::Drumpad* drumpad);
    // public System.Void .ctor()
    // Offset: 0x8E9E68
    // Implemented from: VROSC.Grabable
    // Base method: System.Void Grabable::.ctor()
    // Base method: System.Void Interactable::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DrumpadSpawner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::DrumpadSpawner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DrumpadSpawner*, creationType>()));
    }
    // public override System.Void Grab(VROSC.GrabData grabData, System.Boolean grabbing)
    // Offset: 0x8E9874
    // Implemented from: VROSC.Grabable
    // Base method: System.Void Grabable::Grab(VROSC.GrabData grabData, System.Boolean grabbing)
    void Grab(::VROSC::GrabData* grabData, bool grabbing);
  }; // VROSC.DrumpadSpawner
  #pragma pack(pop)
  static check_size<sizeof(DrumpadSpawner), 256 + sizeof(::VROSC::Drumpad*)> __VROSC_DrumpadSpawnerSizeCheck;
  static_assert(sizeof(DrumpadSpawner) == 0x108);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::DrumpadSpawner::get_DrumpadsCount
// Il2CppName: get_DrumpadsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::DrumpadSpawner::*)()>(&VROSC::DrumpadSpawner::get_DrumpadsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadSpawner*), "get_DrumpadsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadSpawner::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadSpawner::*)()>(&VROSC::DrumpadSpawner::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadSpawner*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadSpawner::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadSpawner::*)(int, ::VROSC::ModularDrumsController*)>(&VROSC::DrumpadSpawner::Setup)> {
  static const MethodInfo* get() {
    static auto* groupId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* instrumentController = &::il2cpp_utils::GetClassFromName("VROSC", "ModularDrumsController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadSpawner*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupId, instrumentController});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadSpawner::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadSpawner::*)(bool)>(&VROSC::DrumpadSpawner::SetActive)> {
  static const MethodInfo* get() {
    static auto* isActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadSpawner*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isActive});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadSpawner::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadSpawner::*)(int, int)>(&VROSC::DrumpadSpawner::Refresh)> {
  static const MethodInfo* get() {
    static auto* groupId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fixedEmpadId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadSpawner*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupId, fixedEmpadId});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadSpawner::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadSpawner::*)()>(&VROSC::DrumpadSpawner::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadSpawner*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadSpawner::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadSpawner::*)()>(&VROSC::DrumpadSpawner::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadSpawner*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadSpawner::ForceHighlight
// Il2CppName: ForceHighlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadSpawner::*)(bool)>(&VROSC::DrumpadSpawner::ForceHighlight)> {
  static const MethodInfo* get() {
    static auto* forceHighlight = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadSpawner*), "ForceHighlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forceHighlight});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadSpawner::Highlight
// Il2CppName: Highlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadSpawner::*)(bool)>(&VROSC::DrumpadSpawner::Highlight)> {
  static const MethodInfo* get() {
    static auto* highlight = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadSpawner*), "Highlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{highlight});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadSpawner::CoHighlight
// Il2CppName: CoHighlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (VROSC::DrumpadSpawner::*)(bool)>(&VROSC::DrumpadSpawner::CoHighlight)> {
  static const MethodInfo* get() {
    static auto* highlight = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadSpawner*), "CoHighlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{highlight});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadSpawner::SetDrumSampleOrNoteNumber
// Il2CppName: SetDrumSampleOrNoteNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadSpawner::*)(int, bool)>(&VROSC::DrumpadSpawner::SetDrumSampleOrNoteNumber)> {
  static const MethodInfo* get() {
    static auto* sampleIdOrNoteNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* preview = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadSpawner*), "SetDrumSampleOrNoteNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sampleIdOrNoteNumber, preview});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadSpawner::SpawnDrumpad
// Il2CppName: SpawnDrumpad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Drumpad* (VROSC::DrumpadSpawner::*)(int, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, float)>(&VROSC::DrumpadSpawner::SpawnDrumpad)> {
  static const MethodInfo* get() {
    static auto* empadId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadSpawner*), "SpawnDrumpad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{empadId, position, rotation, scale});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadSpawner::LoadDrumpad
// Il2CppName: LoadDrumpad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Drumpad* (VROSC::DrumpadSpawner::*)(int)>(&VROSC::DrumpadSpawner::LoadDrumpad)> {
  static const MethodInfo* get() {
    static auto* empadId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadSpawner*), "LoadDrumpad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{empadId});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadSpawner::DeleteAll
// Il2CppName: DeleteAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadSpawner::*)()>(&VROSC::DrumpadSpawner::DeleteAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadSpawner*), "DeleteAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadSpawner::Colorize
// Il2CppName: Colorize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadSpawner::*)(::UnityEngine::Color)>(&VROSC::DrumpadSpawner::Colorize)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadSpawner*), "Colorize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadSpawner::RemovedDrumpad
// Il2CppName: RemovedDrumpad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadSpawner::*)(::VROSC::Drumpad*)>(&VROSC::DrumpadSpawner::RemovedDrumpad)> {
  static const MethodInfo* get() {
    static auto* drumpad = &::il2cpp_utils::GetClassFromName("VROSC", "Drumpad")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadSpawner*), "RemovedDrumpad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{drumpad});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadSpawner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::DrumpadSpawner::Grab
// Il2CppName: Grab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadSpawner::*)(::VROSC::GrabData*, bool)>(&VROSC::DrumpadSpawner::Grab)> {
  static const MethodInfo* get() {
    static auto* grabData = &::il2cpp_utils::GetClassFromName("VROSC", "GrabData")->byval_arg;
    static auto* grabbing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadSpawner*), "Grab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabData, grabbing});
  }
};
