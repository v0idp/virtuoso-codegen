// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.InstrumentController
#include "VROSC/InstrumentController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: ModularDrumpads
  class ModularDrumpads;
  // Forward declaring type: DrumEffectsUI
  class DrumEffectsUI;
  // Forward declaring type: PatchSettings
  class PatchSettings;
  // Forward declaring type: ModularDrumsDataController
  class ModularDrumsDataController;
  // Forward declaring type: DrumsControlPanelUI
  class DrumsControlPanelUI;
  // Forward declaring type: UserDataControllers
  class UserDataControllers;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ModularDrumsController
  class ModularDrumsController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ModularDrumsController);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ModularDrumsController*, "VROSC", "ModularDrumsController");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ModularDrumsController
  // [TokenAttribute] Offset: FFFFFFFF
  class ModularDrumsController : public ::VROSC::InstrumentController {
    public:
    public:
    // private VROSC.ModularDrumpads _modularDrumpads
    // Size: 0x8
    // Offset: 0xB8
    ::VROSC::ModularDrumpads* modularDrumpads;
    // Field size check
    static_assert(sizeof(::VROSC::ModularDrumpads*) == 0x8);
    // private VROSC.DrumEffectsUI _effectsUI
    // Size: 0x8
    // Offset: 0xC0
    ::VROSC::DrumEffectsUI* effectsUI;
    // Field size check
    static_assert(sizeof(::VROSC::DrumEffectsUI*) == 0x8);
    // private VROSC.PatchSettings _patchSettings
    // Size: 0x8
    // Offset: 0xC8
    ::VROSC::PatchSettings* patchSettings;
    // Field size check
    static_assert(sizeof(::VROSC::PatchSettings*) == 0x8);
    public:
    // Get instance field reference: private VROSC.ModularDrumpads _modularDrumpads
    [[deprecated("Use field access instead!")]] ::VROSC::ModularDrumpads*& dyn__modularDrumpads();
    // Get instance field reference: private VROSC.DrumEffectsUI _effectsUI
    [[deprecated("Use field access instead!")]] ::VROSC::DrumEffectsUI*& dyn__effectsUI();
    // Get instance field reference: private VROSC.PatchSettings _patchSettings
    [[deprecated("Use field access instead!")]] ::VROSC::PatchSettings*& dyn__patchSettings();
    // public VROSC.ModularDrumsDataController get_DataController()
    // Offset: 0xACA430
    ::VROSC::ModularDrumsDataController* get_DataController();
    // private VROSC.DrumsControlPanelUI get__drumsControlPanelUI()
    // Offset: 0xACA818
    ::VROSC::DrumsControlPanelUI* get__drumsControlPanelUI();
    // private System.Void DeleteAllPressed()
    // Offset: 0xACABCC
    void DeleteAllPressed();
    // public override VROSC.PatchSettings get_CurrentPatchSettings()
    // Offset: 0xACA78C
    // Implemented from: VROSC.InstrumentController
    // Base method: VROSC.PatchSettings InstrumentController::get_CurrentPatchSettings()
    ::VROSC::PatchSettings* get_CurrentPatchSettings();
    // public override System.Int32 get_CurrentMidiChannel()
    // Offset: 0xACA794
    // Implemented from: VROSC.InstrumentController
    // Base method: System.Int32 InstrumentController::get_CurrentMidiChannel()
    int get_CurrentMidiChannel();
    // public System.Void .ctor()
    // Offset: 0xACAC60
    // Implemented from: VROSC.InstrumentController
    // Base method: System.Void InstrumentController::.ctor()
    // Base method: System.Void WidgetController::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ModularDrumsController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ModularDrumsController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ModularDrumsController*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0xACA894
    // Implemented from: VROSC.WidgetController
    // Base method: System.Void WidgetController::Awake()
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0xACA968
    // Implemented from: VROSC.InstrumentController
    // Base method: System.Void InstrumentController::OnDestroy()
    // Base method: System.Void WidgetController::OnDestroy()
    void OnDestroy();
    // public override System.Void Setup()
    // Offset: 0xACAA3C
    // Implemented from: VROSC.InstrumentController
    // Base method: System.Void InstrumentController::Setup()
    void Setup();
    // protected override System.Void UserDataLoaded(VROSC.UserDataControllers user)
    // Offset: 0xACAAAC
    // Implemented from: VROSC.InstrumentController
    // Base method: System.Void InstrumentController::UserDataLoaded(VROSC.UserDataControllers user)
    void UserDataLoaded(::VROSC::UserDataControllers* user);
    // protected override System.Void UpdateOutput()
    // Offset: 0xACAB6C
    // Implemented from: VROSC.InstrumentController
    // Base method: System.Void InstrumentController::UpdateOutput()
    void UpdateOutput();
    // public override System.Void Toggle()
    // Offset: 0xACABE4
    // Implemented from: VROSC.InstrumentController
    // Base method: System.Void InstrumentController::Toggle()
    void Toggle();
  }; // VROSC.ModularDrumsController
  #pragma pack(pop)
  static check_size<sizeof(ModularDrumsController), 200 + sizeof(::VROSC::PatchSettings*)> __VROSC_ModularDrumsControllerSizeCheck;
  static_assert(sizeof(ModularDrumsController) == 0xD0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ModularDrumsController::get_DataController
// Il2CppName: get_DataController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::ModularDrumsDataController* (VROSC::ModularDrumsController::*)()>(&VROSC::ModularDrumsController::get_DataController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsController*), "get_DataController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsController::get__drumsControlPanelUI
// Il2CppName: get__drumsControlPanelUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::DrumsControlPanelUI* (VROSC::ModularDrumsController::*)()>(&VROSC::ModularDrumsController::get__drumsControlPanelUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsController*), "get__drumsControlPanelUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsController::DeleteAllPressed
// Il2CppName: DeleteAllPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsController::*)()>(&VROSC::ModularDrumsController::DeleteAllPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsController*), "DeleteAllPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsController::get_CurrentPatchSettings
// Il2CppName: get_CurrentPatchSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::PatchSettings* (VROSC::ModularDrumsController::*)()>(&VROSC::ModularDrumsController::get_CurrentPatchSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsController*), "get_CurrentPatchSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsController::get_CurrentMidiChannel
// Il2CppName: get_CurrentMidiChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::ModularDrumsController::*)()>(&VROSC::ModularDrumsController::get_CurrentMidiChannel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsController*), "get_CurrentMidiChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::ModularDrumsController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsController::*)()>(&VROSC::ModularDrumsController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsController::*)()>(&VROSC::ModularDrumsController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsController::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsController::*)()>(&VROSC::ModularDrumsController::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsController*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsController::UserDataLoaded
// Il2CppName: UserDataLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsController::*)(::VROSC::UserDataControllers*)>(&VROSC::ModularDrumsController::UserDataLoaded)> {
  static const MethodInfo* get() {
    static auto* user = &::il2cpp_utils::GetClassFromName("VROSC", "UserDataControllers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsController*), "UserDataLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{user});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsController::UpdateOutput
// Il2CppName: UpdateOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsController::*)()>(&VROSC::ModularDrumsController::UpdateOutput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsController*), "UpdateOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsController::Toggle
// Il2CppName: Toggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsController::*)()>(&VROSC::ModularDrumsController::Toggle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsController*), "Toggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
