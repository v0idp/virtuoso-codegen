// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: SimpleHaptic
  class SimpleHaptic;
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Rigidbody
  class Rigidbody;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Key
  class Key;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: KeyHitter
  class KeyHitter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::KeyHitter);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::KeyHitter*, "VROSC", "KeyHitter");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.KeyHitter
  // [TokenAttribute] Offset: FFFFFFFF
  class KeyHitter : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.SimpleHaptic _haptic
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::SimpleHaptic* haptic;
    // Field size check
    static_assert(sizeof(::VROSC::SimpleHaptic*) == 0x8);
    // private System.Single _speed
    // Size: 0x4
    // Offset: 0x20
    float speed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: speed and: device
    char __padding1[0x4] = {};
    // private VROSC.InputDevice _device
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::InputDevice* device;
    // Field size check
    static_assert(sizeof(::VROSC::InputDevice*) == 0x8);
    // private UnityEngine.Transform _followTransform
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* followTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Rigidbody _rigidbody
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Rigidbody* rigidbody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.SimpleHaptic _haptic
    [[deprecated]] ::VROSC::SimpleHaptic*& dyn__haptic();
    // Get instance field reference: private System.Single _speed
    [[deprecated]] float& dyn__speed();
    // Get instance field reference: private VROSC.InputDevice _device
    [[deprecated]] ::VROSC::InputDevice*& dyn__device();
    // Get instance field reference: private UnityEngine.Transform _followTransform
    [[deprecated]] ::UnityEngine::Transform*& dyn__followTransform();
    // Get instance field reference: private UnityEngine.Rigidbody _rigidbody
    [[deprecated]] ::UnityEngine::Rigidbody*& dyn__rigidbody();
    // private System.Void Awake()
    // Offset: 0x194C01C
    void Awake();
    // public System.Void Setup(VROSC.InputDevice device, UnityEngine.Transform followTransform)
    // Offset: 0x1943FA8
    void Setup(::VROSC::InputDevice* device, ::UnityEngine::Transform* followTransform);
    // public System.Void FollowObject(UnityEngine.Transform followTransform)
    // Offset: 0x194C070
    void FollowObject(::UnityEngine::Transform* followTransform);
    // private System.Void OnEnable()
    // Offset: 0x194C0BC
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x194C1C0
    void OnDisable();
    // private System.Void Update()
    // Offset: 0x194C2C4
    void Update();
    // private System.Void KeyPressedHapticFeedback(Key key)
    // Offset: 0x194C410
    void KeyPressedHapticFeedback(::GlobalNamespace::Key* key);
    // public System.Void .ctor()
    // Offset: 0x194C444
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static KeyHitter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::KeyHitter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<KeyHitter*, creationType>()));
    }
  }; // VROSC.KeyHitter
  #pragma pack(pop)
  static check_size<sizeof(KeyHitter), 56 + sizeof(::UnityEngine::Rigidbody*)> __VROSC_KeyHitterSizeCheck;
  static_assert(sizeof(KeyHitter) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::KeyHitter::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::KeyHitter::*)()>(&VROSC::KeyHitter::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::KeyHitter*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::KeyHitter::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::KeyHitter::*)(::VROSC::InputDevice*, ::UnityEngine::Transform*)>(&VROSC::KeyHitter::Setup)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* followTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::KeyHitter*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, followTransform});
  }
};
// Writing MetadataGetter for method: VROSC::KeyHitter::FollowObject
// Il2CppName: FollowObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::KeyHitter::*)(::UnityEngine::Transform*)>(&VROSC::KeyHitter::FollowObject)> {
  static const MethodInfo* get() {
    static auto* followTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::KeyHitter*), "FollowObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{followTransform});
  }
};
// Writing MetadataGetter for method: VROSC::KeyHitter::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::KeyHitter::*)()>(&VROSC::KeyHitter::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::KeyHitter*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::KeyHitter::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::KeyHitter::*)()>(&VROSC::KeyHitter::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::KeyHitter*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::KeyHitter::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::KeyHitter::*)()>(&VROSC::KeyHitter::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::KeyHitter*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::KeyHitter::KeyPressedHapticFeedback
// Il2CppName: KeyPressedHapticFeedback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::KeyHitter::*)(::GlobalNamespace::Key*)>(&VROSC::KeyHitter::KeyPressedHapticFeedback)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("", "Key")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::KeyHitter*), "KeyPressedHapticFeedback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: VROSC::KeyHitter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
