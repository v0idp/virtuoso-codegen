// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.UIInteractable
#include "VROSC/UIInteractable.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: AdjustableMesh
  class AdjustableMesh;
  // Forward declaring type: SimpleHaptic
  class SimpleHaptic;
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: ClickData
  class ClickData;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: UIHoldButton
  class UIHoldButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UIHoldButton);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UIHoldButton*, "VROSC", "UIHoldButton");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xE0
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UIHoldButton
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class UIHoldButton : public ::VROSC::UIInteractable {
    public:
    // Nested type: ::VROSC::UIHoldButton::$Pressing$d__20
    class $Pressing$d__20;
    public:
    // private TMPro.TextMeshPro _inProgressText
    // Size: 0x8
    // Offset: 0x88
    ::TMPro::TextMeshPro* inProgressText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private System.Single _pressTime
    // Size: 0x4
    // Offset: 0x90
    float pressTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: pressTime and: adjustableMesh
    char __padding1[0x4] = {};
    // private VROSC.AdjustableMesh _adjustableMesh
    // Size: 0x8
    // Offset: 0x98
    ::VROSC::AdjustableMesh* adjustableMesh;
    // Field size check
    static_assert(sizeof(::VROSC::AdjustableMesh*) == 0x8);
    // [ColorUsageAttribute] Offset: 0x78A0BC
    // private UnityEngine.Color _color
    // Size: 0x10
    // Offset: 0xA0
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [RangeAttribute] Offset: 0x78A0FC
    // [HeaderAttribute] Offset: 0x78A0FC
    // private System.Single _previewValue
    // Size: 0x4
    // Offset: 0xB0
    float previewValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: previewValue and: hapticFeedBack
    char __padding4[0x4] = {};
    // [HeaderAttribute] Offset: 0x78A160
    // private VROSC.SimpleHaptic _hapticFeedBack
    // Size: 0x8
    // Offset: 0xB8
    ::VROSC::SimpleHaptic* hapticFeedBack;
    // Field size check
    static_assert(sizeof(::VROSC::SimpleHaptic*) == 0x8);
    // private System.Single _pressedFor
    // Size: 0x4
    // Offset: 0xC0
    float pressedFor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _pressing
    // Size: 0x1
    // Offset: 0xC4
    bool pressing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _pressCompleteToken
    // Size: 0x1
    // Offset: 0xC5
    bool pressCompleteToken;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: pressCompleteToken and: heldBy
    char __padding8[0x2] = {};
    // private VROSC.InputDevice _heldBy
    // Size: 0x8
    // Offset: 0xC8
    ::VROSC::InputDevice* heldBy;
    // Field size check
    static_assert(sizeof(::VROSC::InputDevice*) == 0x8);
    // private VROSC.TriggerButton _heldByButton
    // Size: 0x4
    // Offset: 0xD0
    ::VROSC::TriggerButton heldByButton;
    // Field size check
    static_assert(sizeof(::VROSC::TriggerButton) == 0x4);
    // Padding between fields: heldByButton and: OnPressCompleted
    char __padding10[0x4] = {};
    // public System.Action OnPressCompleted
    // Size: 0x8
    // Offset: 0xD8
    ::System::Action* OnPressCompleted;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Get instance field reference: private TMPro.TextMeshPro _inProgressText
    [[deprecated]] ::TMPro::TextMeshPro*& dyn__inProgressText();
    // Get instance field reference: private System.Single _pressTime
    [[deprecated]] float& dyn__pressTime();
    // Get instance field reference: private VROSC.AdjustableMesh _adjustableMesh
    [[deprecated]] ::VROSC::AdjustableMesh*& dyn__adjustableMesh();
    // Get instance field reference: private UnityEngine.Color _color
    [[deprecated]] ::UnityEngine::Color& dyn__color();
    // Get instance field reference: private System.Single _previewValue
    [[deprecated]] float& dyn__previewValue();
    // Get instance field reference: private VROSC.SimpleHaptic _hapticFeedBack
    [[deprecated]] ::VROSC::SimpleHaptic*& dyn__hapticFeedBack();
    // Get instance field reference: private System.Single _pressedFor
    [[deprecated]] float& dyn__pressedFor();
    // Get instance field reference: private System.Boolean _pressing
    [[deprecated]] bool& dyn__pressing();
    // Get instance field reference: private System.Boolean _pressCompleteToken
    [[deprecated]] bool& dyn__pressCompleteToken();
    // Get instance field reference: private VROSC.InputDevice _heldBy
    [[deprecated]] ::VROSC::InputDevice*& dyn__heldBy();
    // Get instance field reference: private VROSC.TriggerButton _heldByButton
    [[deprecated]] ::VROSC::TriggerButton& dyn__heldByButton();
    // Get instance field reference: public System.Action OnPressCompleted
    [[deprecated]] ::System::Action*& dyn_OnPressCompleted();
    // private System.Void OnEnable()
    // Offset: 0x190FBBC
    void OnEnable();
    // private System.Void Update()
    // Offset: 0x190FD1C
    void Update();
    // private System.Void Start()
    // Offset: 0x190FD54
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x190FEC4
    void OnDestroy();
    // private System.Void OnAnyPressEnd(VROSC.InputDevice device, VROSC.TriggerButton button)
    // Offset: 0x1910034
    void OnAnyPressEnd(::VROSC::InputDevice* device, ::VROSC::TriggerButton button);
    // private System.Void ButtonWasPressed(VROSC.ClickData clickData, System.Boolean pressed)
    // Offset: 0x19100D0
    void ButtonWasPressed(::VROSC::ClickData* clickData, bool pressed);
    // private System.Collections.IEnumerator Pressing(VROSC.ClickData clickData)
    // Offset: 0x1910160
    ::System::Collections::IEnumerator* Pressing(::VROSC::ClickData* clickData);
    // private System.Void SetValue(System.Single value)
    // Offset: 0x190FC3C
    void SetValue(float value);
    // public override System.Boolean get_InteractionStopsLaser()
    // Offset: 0x190FBB4
    // Implemented from: VROSC.UIInteractable
    // Base method: System.Boolean UIInteractable::get_InteractionStopsLaser()
    bool get_InteractionStopsLaser();
    // public System.Void .ctor()
    // Offset: 0x19101D8
    // Implemented from: VROSC.UIInteractable
    // Base method: System.Void UIInteractable::.ctor()
    // Base method: System.Void Clickable::.ctor()
    // Base method: System.Void Interactable::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIHoldButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UIHoldButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIHoldButton*, creationType>()));
    }
  }; // VROSC.UIHoldButton
  #pragma pack(pop)
  static check_size<sizeof(UIHoldButton), 216 + sizeof(::System::Action*)> __VROSC_UIHoldButtonSizeCheck;
  static_assert(sizeof(UIHoldButton) == 0xE0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UIHoldButton::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIHoldButton::*)()>(&VROSC::UIHoldButton::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIHoldButton*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UIHoldButton::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIHoldButton::*)()>(&VROSC::UIHoldButton::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIHoldButton*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UIHoldButton::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIHoldButton::*)()>(&VROSC::UIHoldButton::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIHoldButton*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UIHoldButton::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIHoldButton::*)()>(&VROSC::UIHoldButton::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIHoldButton*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UIHoldButton::OnAnyPressEnd
// Il2CppName: OnAnyPressEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIHoldButton::*)(::VROSC::InputDevice*, ::VROSC::TriggerButton)>(&VROSC::UIHoldButton::OnAnyPressEnd)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* button = &::il2cpp_utils::GetClassFromName("VROSC", "TriggerButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIHoldButton*), "OnAnyPressEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, button});
  }
};
// Writing MetadataGetter for method: VROSC::UIHoldButton::ButtonWasPressed
// Il2CppName: ButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIHoldButton::*)(::VROSC::ClickData*, bool)>(&VROSC::UIHoldButton::ButtonWasPressed)> {
  static const MethodInfo* get() {
    static auto* clickData = &::il2cpp_utils::GetClassFromName("VROSC", "ClickData")->byval_arg;
    static auto* pressed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIHoldButton*), "ButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clickData, pressed});
  }
};
// Writing MetadataGetter for method: VROSC::UIHoldButton::Pressing
// Il2CppName: Pressing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (VROSC::UIHoldButton::*)(::VROSC::ClickData*)>(&VROSC::UIHoldButton::Pressing)> {
  static const MethodInfo* get() {
    static auto* clickData = &::il2cpp_utils::GetClassFromName("VROSC", "ClickData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIHoldButton*), "Pressing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clickData});
  }
};
// Writing MetadataGetter for method: VROSC::UIHoldButton::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIHoldButton::*)(float)>(&VROSC::UIHoldButton::SetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIHoldButton*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::UIHoldButton::get_InteractionStopsLaser
// Il2CppName: get_InteractionStopsLaser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::UIHoldButton::*)()>(&VROSC::UIHoldButton::get_InteractionStopsLaser)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIHoldButton*), "get_InteractionStopsLaser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UIHoldButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
