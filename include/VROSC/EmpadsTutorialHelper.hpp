// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.WidgetSettings
#include "VROSC/WidgetSettings.hpp"
// Including type: VROSC.LoopStationRecorder
#include "VROSC/LoopStationRecorder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: TutorialBlinkingUIElement
  class TutorialBlinkingUIElement;
  // Forward declaring type: DrumPadEffectOnSignal
  class DrumPadEffectOnSignal;
  // Forward declaring type: Interactable
  class Interactable;
  // Forward declaring type: ModularDrumsController
  class ModularDrumsController;
  // Forward declaring type: ModularDrumpads
  class ModularDrumpads;
  // Forward declaring type: TutorialEvent
  struct TutorialEvent;
  // Forward declaring type: PatchSettings
  class PatchSettings;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: EmpadsTutorialHelper
  class EmpadsTutorialHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::EmpadsTutorialHelper);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::EmpadsTutorialHelper*, "VROSC", "EmpadsTutorialHelper");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x72
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.EmpadsTutorialHelper
  // [TokenAttribute] Offset: FFFFFFFF
  class EmpadsTutorialHelper : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.GameObject _interactablesParent
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* interactablesParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private VROSC.TutorialBlinkingUIElement[] _tempoSyncButtonBlinkers
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::VROSC::TutorialBlinkingUIElement*> tempoSyncButtonBlinkers;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::TutorialBlinkingUIElement*>) == 0x8);
    // private VROSC.DrumPadEffectOnSignal[] _drumpadEffects
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::VROSC::DrumPadEffectOnSignal*> drumpadEffects;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::DrumPadEffectOnSignal*>) == 0x8);
    // private VROSC.Interactable[] _drumpadSpawners
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::VROSC::Interactable*> drumpadSpawners;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::Interactable*>) == 0x8);
    // private VROSC.Interactable[] _tempoSyncButtonInteractables
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::VROSC::Interactable*> tempoSyncButtonInteractables;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::Interactable*>) == 0x8);
    // private VROSC.Interactable _closeButtonInteractable
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::Interactable* closeButtonInteractable;
    // Field size check
    static_assert(sizeof(::VROSC::Interactable*) == 0x8);
    // private VROSC.ModularDrumsController _empadsController
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::ModularDrumsController* empadsController;
    // Field size check
    static_assert(sizeof(::VROSC::ModularDrumsController*) == 0x8);
    // private VROSC.ModularDrumpads _empads
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::ModularDrumpads* empads;
    // Field size check
    static_assert(sizeof(::VROSC::ModularDrumpads*) == 0x8);
    // private UnityEngine.AudioClip _cowbellClip
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AudioClip* cowbellClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.Interactable> _disabledInteractables
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::VROSC::Interactable*>* disabledInteractables;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::Interactable*>*) == 0x8);
    // private System.Boolean _countSpawnedPads
    // Size: 0x1
    // Offset: 0x68
    bool countSpawnedPads;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: countSpawnedPads and: waitingForSyncDivider
    char __padding10[0x3] = {};
    // private System.Int32 _waitingForSyncDivider
    // Size: 0x4
    // Offset: 0x6C
    int waitingForSyncDivider;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _padsHighlighted
    // Size: 0x1
    // Offset: 0x70
    bool padsHighlighted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _recordingFirstRecording
    // Size: 0x1
    // Offset: 0x71
    bool recordingFirstRecording;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.GameObject _interactablesParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__interactablesParent();
    // Get instance field reference: private VROSC.TutorialBlinkingUIElement[] _tempoSyncButtonBlinkers
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::TutorialBlinkingUIElement*>& dyn__tempoSyncButtonBlinkers();
    // Get instance field reference: private VROSC.DrumPadEffectOnSignal[] _drumpadEffects
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::DrumPadEffectOnSignal*>& dyn__drumpadEffects();
    // Get instance field reference: private VROSC.Interactable[] _drumpadSpawners
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::Interactable*>& dyn__drumpadSpawners();
    // Get instance field reference: private VROSC.Interactable[] _tempoSyncButtonInteractables
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::Interactable*>& dyn__tempoSyncButtonInteractables();
    // Get instance field reference: private VROSC.Interactable _closeButtonInteractable
    [[deprecated("Use field access instead!")]] ::VROSC::Interactable*& dyn__closeButtonInteractable();
    // Get instance field reference: private VROSC.ModularDrumsController _empadsController
    [[deprecated("Use field access instead!")]] ::VROSC::ModularDrumsController*& dyn__empadsController();
    // Get instance field reference: private VROSC.ModularDrumpads _empads
    [[deprecated("Use field access instead!")]] ::VROSC::ModularDrumpads*& dyn__empads();
    // Get instance field reference: private UnityEngine.AudioClip _cowbellClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn__cowbellClip();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.Interactable> _disabledInteractables
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VROSC::Interactable*>*& dyn__disabledInteractables();
    // Get instance field reference: private System.Boolean _countSpawnedPads
    [[deprecated("Use field access instead!")]] bool& dyn__countSpawnedPads();
    // Get instance field reference: private System.Int32 _waitingForSyncDivider
    [[deprecated("Use field access instead!")]] int& dyn__waitingForSyncDivider();
    // Get instance field reference: private System.Boolean _padsHighlighted
    [[deprecated("Use field access instead!")]] bool& dyn__padsHighlighted();
    // Get instance field reference: private System.Boolean _recordingFirstRecording
    [[deprecated("Use field access instead!")]] bool& dyn__recordingFirstRecording();
    // public System.Void .ctor()
    // Offset: 0x8ECEF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EmpadsTutorialHelper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::EmpadsTutorialHelper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EmpadsTutorialHelper*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x8EB8B0
    void Start();
    // protected System.Void Update()
    // Offset: 0x8EBA48
    void Update();
    // private System.Void TutorialEventTriggered(VROSC.TutorialEvent tutorialEvent)
    // Offset: 0x8EBC1C
    void TutorialEventTriggered(::VROSC::TutorialEvent tutorialEvent);
    // private System.Void StartHighlightPads()
    // Offset: 0x8EC140
    void StartHighlightPads();
    // private System.Void StartHighlightPadsWithText()
    // Offset: 0x8EC1CC
    void StartHighlightPadsWithText();
    // private System.Void StopHighlightPads(VROSC.WidgetSettings/VROSC.Identifier id, VROSC.PatchSettings settings)
    // Offset: 0x8EC980
    void StopHighlightPads(::VROSC::WidgetSettings::Identifier id, ::VROSC::PatchSettings* settings);
    // private System.Void StopHighlightPads()
    // Offset: 0x8ECA70
    void StopHighlightPads();
    // private System.Void StopHighlightPadsWithText()
    // Offset: 0x8EBB14
    void StopHighlightPadsWithText();
    // private System.Void EnableEmpadExtraction()
    // Offset: 0x8EC2F8
    void EnableEmpadExtraction();
    // private System.Void EnableTempoSync()
    // Offset: 0x8EC3C4
    void EnableTempoSync();
    // private System.Void WaitForQuarterSync()
    // Offset: 0x8EC568
    void WaitForQuarterSync();
    // private System.Void WaitForSixteenthSync()
    // Offset: 0x8EC694
    void WaitForSixteenthSync();
    // private System.Void DisableTempoSync()
    // Offset: 0x8ECAD4
    void DisableTempoSync();
    // private System.Void StartTempoSyncBlinking()
    // Offset: 0x8EC490
    void StartTempoSyncBlinking();
    // private System.Void StopTempoSyncBlinking()
    // Offset: 0x8ECBA0
    void StopTempoSyncBlinking();
    // private System.Void TempoSyncButtonsUsed(System.Boolean used)
    // Offset: 0x8ECC28
    void TempoSyncButtonsUsed(bool used);
    // private System.Void DisableAllInteractables()
    // Offset: 0x8EBF80
    void DisableAllInteractables();
    // private System.Void ResetAll()
    // Offset: 0x8EC7C0
    void ResetAll();
    // private System.Void LoopStationRecorderStateChanged(VROSC.LoopStationRecorder/VROSC.RecordingState state)
    // Offset: 0x8ECE0C
    void LoopStationRecorderStateChanged(::VROSC::LoopStationRecorder::RecordingState state);
    // private System.Void DrumSamplePlayed(UnityEngine.AudioClip audioClip)
    // Offset: 0x8ECE30
    void DrumSamplePlayed(::UnityEngine::AudioClip* audioClip);
  }; // VROSC.EmpadsTutorialHelper
  #pragma pack(pop)
  static check_size<sizeof(EmpadsTutorialHelper), 113 + sizeof(bool)> __VROSC_EmpadsTutorialHelperSizeCheck;
  static_assert(sizeof(EmpadsTutorialHelper) == 0x72);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)()>(&VROSC::EmpadsTutorialHelper::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)()>(&VROSC::EmpadsTutorialHelper::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::TutorialEventTriggered
// Il2CppName: TutorialEventTriggered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)(::VROSC::TutorialEvent)>(&VROSC::EmpadsTutorialHelper::TutorialEventTriggered)> {
  static const MethodInfo* get() {
    static auto* tutorialEvent = &::il2cpp_utils::GetClassFromName("VROSC", "TutorialEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "TutorialEventTriggered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tutorialEvent});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::StartHighlightPads
// Il2CppName: StartHighlightPads
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)()>(&VROSC::EmpadsTutorialHelper::StartHighlightPads)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "StartHighlightPads", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::StartHighlightPadsWithText
// Il2CppName: StartHighlightPadsWithText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)()>(&VROSC::EmpadsTutorialHelper::StartHighlightPadsWithText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "StartHighlightPadsWithText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::StopHighlightPads
// Il2CppName: StopHighlightPads
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)(::VROSC::WidgetSettings::Identifier, ::VROSC::PatchSettings*)>(&VROSC::EmpadsTutorialHelper::StopHighlightPads)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings/Identifier")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("VROSC", "PatchSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "StopHighlightPads", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, settings});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::StopHighlightPads
// Il2CppName: StopHighlightPads
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)()>(&VROSC::EmpadsTutorialHelper::StopHighlightPads)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "StopHighlightPads", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::StopHighlightPadsWithText
// Il2CppName: StopHighlightPadsWithText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)()>(&VROSC::EmpadsTutorialHelper::StopHighlightPadsWithText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "StopHighlightPadsWithText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::EnableEmpadExtraction
// Il2CppName: EnableEmpadExtraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)()>(&VROSC::EmpadsTutorialHelper::EnableEmpadExtraction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "EnableEmpadExtraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::EnableTempoSync
// Il2CppName: EnableTempoSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)()>(&VROSC::EmpadsTutorialHelper::EnableTempoSync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "EnableTempoSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::WaitForQuarterSync
// Il2CppName: WaitForQuarterSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)()>(&VROSC::EmpadsTutorialHelper::WaitForQuarterSync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "WaitForQuarterSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::WaitForSixteenthSync
// Il2CppName: WaitForSixteenthSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)()>(&VROSC::EmpadsTutorialHelper::WaitForSixteenthSync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "WaitForSixteenthSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::DisableTempoSync
// Il2CppName: DisableTempoSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)()>(&VROSC::EmpadsTutorialHelper::DisableTempoSync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "DisableTempoSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::StartTempoSyncBlinking
// Il2CppName: StartTempoSyncBlinking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)()>(&VROSC::EmpadsTutorialHelper::StartTempoSyncBlinking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "StartTempoSyncBlinking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::StopTempoSyncBlinking
// Il2CppName: StopTempoSyncBlinking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)()>(&VROSC::EmpadsTutorialHelper::StopTempoSyncBlinking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "StopTempoSyncBlinking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::TempoSyncButtonsUsed
// Il2CppName: TempoSyncButtonsUsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)(bool)>(&VROSC::EmpadsTutorialHelper::TempoSyncButtonsUsed)> {
  static const MethodInfo* get() {
    static auto* used = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "TempoSyncButtonsUsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{used});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::DisableAllInteractables
// Il2CppName: DisableAllInteractables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)()>(&VROSC::EmpadsTutorialHelper::DisableAllInteractables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "DisableAllInteractables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::ResetAll
// Il2CppName: ResetAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)()>(&VROSC::EmpadsTutorialHelper::ResetAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "ResetAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::LoopStationRecorderStateChanged
// Il2CppName: LoopStationRecorderStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)(::VROSC::LoopStationRecorder::RecordingState)>(&VROSC::EmpadsTutorialHelper::LoopStationRecorderStateChanged)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStationRecorder/RecordingState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "LoopStationRecorderStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: VROSC::EmpadsTutorialHelper::DrumSamplePlayed
// Il2CppName: DrumSamplePlayed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::EmpadsTutorialHelper::*)(::UnityEngine::AudioClip*)>(&VROSC::EmpadsTutorialHelper::DrumSamplePlayed)> {
  static const MethodInfo* get() {
    static auto* audioClip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::EmpadsTutorialHelper*), "DrumSamplePlayed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioClip});
  }
};
