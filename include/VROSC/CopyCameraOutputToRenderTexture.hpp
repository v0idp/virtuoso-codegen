// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: VRPlayer
  class VRPlayer;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: CopyCameraOutputToRenderTexture
  class CopyCameraOutputToRenderTexture;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::CopyCameraOutputToRenderTexture);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::CopyCameraOutputToRenderTexture*, "VROSC", "CopyCameraOutputToRenderTexture");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.CopyCameraOutputToRenderTexture
  // [TokenAttribute] Offset: FFFFFFFF
  class CopyCameraOutputToRenderTexture : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Material _material
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.RenderTexture _output
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::RenderTexture* output;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.Material _instancedMaterial
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* instancedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Boolean _active
    // Size: 0x1
    // Offset: 0x30
    bool active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _disabled
    // Size: 0x1
    // Offset: 0x31
    bool disabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _fading
    // Size: 0x1
    // Offset: 0x32
    bool fading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fading and: activationSources
    char __padding5[0x5] = {};
    // private System.Collections.Generic.List`1<System.Object> _activationSources
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::Il2CppObject*>* activationSources;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Il2CppObject*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Material _material
    [[deprecated]] ::UnityEngine::Material*& dyn__material();
    // Get instance field reference: private UnityEngine.RenderTexture _output
    [[deprecated]] ::UnityEngine::RenderTexture*& dyn__output();
    // Get instance field reference: private UnityEngine.Material _instancedMaterial
    [[deprecated]] ::UnityEngine::Material*& dyn__instancedMaterial();
    // Get instance field reference: private System.Boolean _active
    [[deprecated]] bool& dyn__active();
    // Get instance field reference: private System.Boolean _disabled
    [[deprecated]] bool& dyn__disabled();
    // Get instance field reference: private System.Boolean _fading
    [[deprecated]] bool& dyn__fading();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Object> _activationSources
    [[deprecated]] ::System::Collections::Generic::List_1<::Il2CppObject*>*& dyn__activationSources();
    // private System.Void Awake()
    // Offset: 0x8DE46C
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x8DE688
    void OnDestroy();
    // private System.Void PlayerInitiated(VROSC.VRPlayer player)
    // Offset: 0x8DE7B0
    void PlayerInitiated(::VROSC::VRPlayer* player);
    // private System.Void IsFading(System.Boolean fading, UnityEngine.Color color)
    // Offset: 0x8DE918
    void IsFading(bool fading, ::UnityEngine::Color color);
    // public System.Void SetDisabled(System.Boolean disabled)
    // Offset: 0x8DE9F4
    void SetDisabled(bool disabled);
    // public System.Void SetActive(System.Boolean active, System.Object source)
    // Offset: 0x8DEA5C
    void SetActive(bool active, ::Il2CppObject* source);
    // private System.Void Evaluate()
    // Offset: 0x8DE604
    void Evaluate();
    // private System.Void SetColor(UnityEngine.Color color)
    // Offset: 0x8DE96C
    void SetColor(::UnityEngine::Color color);
    // private System.Void Clear()
    // Offset: 0x8DE630
    void Clear();
    // private System.Void OnRenderImage(UnityEngine.RenderTexture src, UnityEngine.RenderTexture dest)
    // Offset: 0x8DEB9C
    void OnRenderImage(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dest);
    // public System.Void .ctor()
    // Offset: 0x8DEC8C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CopyCameraOutputToRenderTexture* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::CopyCameraOutputToRenderTexture::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CopyCameraOutputToRenderTexture*, creationType>()));
    }
  }; // VROSC.CopyCameraOutputToRenderTexture
  #pragma pack(pop)
  static check_size<sizeof(CopyCameraOutputToRenderTexture), 56 + sizeof(::System::Collections::Generic::List_1<::Il2CppObject*>*)> __VROSC_CopyCameraOutputToRenderTextureSizeCheck;
  static_assert(sizeof(CopyCameraOutputToRenderTexture) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::CopyCameraOutputToRenderTexture::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::CopyCameraOutputToRenderTexture::*)()>(&VROSC::CopyCameraOutputToRenderTexture::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::CopyCameraOutputToRenderTexture*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::CopyCameraOutputToRenderTexture::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::CopyCameraOutputToRenderTexture::*)()>(&VROSC::CopyCameraOutputToRenderTexture::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::CopyCameraOutputToRenderTexture*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::CopyCameraOutputToRenderTexture::PlayerInitiated
// Il2CppName: PlayerInitiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::CopyCameraOutputToRenderTexture::*)(::VROSC::VRPlayer*)>(&VROSC::CopyCameraOutputToRenderTexture::PlayerInitiated)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("VROSC", "VRPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::CopyCameraOutputToRenderTexture*), "PlayerInitiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: VROSC::CopyCameraOutputToRenderTexture::IsFading
// Il2CppName: IsFading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::CopyCameraOutputToRenderTexture::*)(bool, ::UnityEngine::Color)>(&VROSC::CopyCameraOutputToRenderTexture::IsFading)> {
  static const MethodInfo* get() {
    static auto* fading = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::CopyCameraOutputToRenderTexture*), "IsFading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fading, color});
  }
};
// Writing MetadataGetter for method: VROSC::CopyCameraOutputToRenderTexture::SetDisabled
// Il2CppName: SetDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::CopyCameraOutputToRenderTexture::*)(bool)>(&VROSC::CopyCameraOutputToRenderTexture::SetDisabled)> {
  static const MethodInfo* get() {
    static auto* disabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::CopyCameraOutputToRenderTexture*), "SetDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disabled});
  }
};
// Writing MetadataGetter for method: VROSC::CopyCameraOutputToRenderTexture::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::CopyCameraOutputToRenderTexture::*)(bool, ::Il2CppObject*)>(&VROSC::CopyCameraOutputToRenderTexture::SetActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::CopyCameraOutputToRenderTexture*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active, source});
  }
};
// Writing MetadataGetter for method: VROSC::CopyCameraOutputToRenderTexture::Evaluate
// Il2CppName: Evaluate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::CopyCameraOutputToRenderTexture::*)()>(&VROSC::CopyCameraOutputToRenderTexture::Evaluate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::CopyCameraOutputToRenderTexture*), "Evaluate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::CopyCameraOutputToRenderTexture::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::CopyCameraOutputToRenderTexture::*)(::UnityEngine::Color)>(&VROSC::CopyCameraOutputToRenderTexture::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::CopyCameraOutputToRenderTexture*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::CopyCameraOutputToRenderTexture::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::CopyCameraOutputToRenderTexture::*)()>(&VROSC::CopyCameraOutputToRenderTexture::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::CopyCameraOutputToRenderTexture*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::CopyCameraOutputToRenderTexture::OnRenderImage
// Il2CppName: OnRenderImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::CopyCameraOutputToRenderTexture::*)(::UnityEngine::RenderTexture*, ::UnityEngine::RenderTexture*)>(&VROSC::CopyCameraOutputToRenderTexture::OnRenderImage)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::CopyCameraOutputToRenderTexture*), "OnRenderImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, dest});
  }
};
// Writing MetadataGetter for method: VROSC::CopyCameraOutputToRenderTexture::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
