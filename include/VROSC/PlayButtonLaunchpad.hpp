// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.Launchpad
#include "VROSC/Launchpad.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopPlayButton
  class LoopPlayButton;
  // Forward declaring type: OverridePlaybackSettingsUI
  class OverridePlaybackSettingsUI;
  // Forward declaring type: LoopPlaybackSettingsUI
  class LoopPlaybackSettingsUI;
  // Forward declaring type: LoopPlaybackSettingsToggle
  class LoopPlaybackSettingsToggle;
  // Forward declaring type: LoopPlaybackConfig
  class LoopPlaybackConfig;
  // Forward declaring type: LaunchpadSpawner
  class LaunchpadSpawner;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: PlayButtonLaunchpad
  class PlayButtonLaunchpad;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::PlayButtonLaunchpad);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::PlayButtonLaunchpad*, "VROSC", "PlayButtonLaunchpad");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xC8
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.PlayButtonLaunchpad
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayButtonLaunchpad : public ::VROSC::Launchpad {
    public:
    // Writing base type padding for base size: 0x84 to desired offset: 0x88
    char ___base_padding[0x4] = {};
    public:
    // private VROSC.LoopPlayButton _loopPlayButton
    // Size: 0x8
    // Offset: 0x88
    ::VROSC::LoopPlayButton* loopPlayButton;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlayButton*) == 0x8);
    // private UnityEngine.Renderer _updaterMesh
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Renderer* updaterMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.Renderer _timingMesh
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Renderer* timingMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.GameObject _startIcon
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::GameObject* startIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _stopIcon
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::GameObject* stopIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private VROSC.OverridePlaybackSettingsUI _overridePlaybackSettingsUI
    // Size: 0x8
    // Offset: 0xB0
    ::VROSC::OverridePlaybackSettingsUI* overridePlaybackSettingsUI;
    // Field size check
    static_assert(sizeof(::VROSC::OverridePlaybackSettingsUI*) == 0x8);
    // private VROSC.LoopPlaybackSettingsUI _loopPlaybackSettingsUI
    // Size: 0x8
    // Offset: 0xB8
    ::VROSC::LoopPlaybackSettingsUI* loopPlaybackSettingsUI;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlaybackSettingsUI*) == 0x8);
    // private VROSC.LoopPlaybackSettingsToggle _toggleButton
    // Size: 0x8
    // Offset: 0xC0
    ::VROSC::LoopPlaybackSettingsToggle* toggleButton;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlaybackSettingsToggle*) == 0x8);
    public:
    // Get instance field reference: private VROSC.LoopPlayButton _loopPlayButton
    [[deprecated("Use field access instead!")]] ::VROSC::LoopPlayButton*& dyn__loopPlayButton();
    // Get instance field reference: private UnityEngine.Renderer _updaterMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__updaterMesh();
    // Get instance field reference: private UnityEngine.Renderer _timingMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__timingMesh();
    // Get instance field reference: private UnityEngine.GameObject _startIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__startIcon();
    // Get instance field reference: private UnityEngine.GameObject _stopIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__stopIcon();
    // Get instance field reference: private VROSC.OverridePlaybackSettingsUI _overridePlaybackSettingsUI
    [[deprecated("Use field access instead!")]] ::VROSC::OverridePlaybackSettingsUI*& dyn__overridePlaybackSettingsUI();
    // Get instance field reference: private VROSC.LoopPlaybackSettingsUI _loopPlaybackSettingsUI
    [[deprecated("Use field access instead!")]] ::VROSC::LoopPlaybackSettingsUI*& dyn__loopPlaybackSettingsUI();
    // Get instance field reference: private VROSC.LoopPlaybackSettingsToggle _toggleButton
    [[deprecated("Use field access instead!")]] ::VROSC::LoopPlaybackSettingsToggle*& dyn__toggleButton();
    // public System.Void AssignConfig(VROSC.LoopPlaybackConfig config)
    // Offset: 0xAE0118
    void AssignConfig(::VROSC::LoopPlaybackConfig* config);
    // public System.Void Unassign()
    // Offset: 0xAE0264
    void Unassign();
    // public System.Void AssignButton(VROSC.LoopPlayButton loopPlayButton)
    // Offset: 0xAE0420
    void AssignButton(::VROSC::LoopPlayButton* loopPlayButton);
    // private System.Void UpdateLoopPlayer()
    // Offset: 0xAE057C
    void UpdateLoopPlayer();
    // private System.Void Update()
    // Offset: 0xAE06C4
    void Update();
    // private System.Void LoopIsPlaying(System.Boolean isPlaying)
    // Offset: 0xAE08BC
    void LoopIsPlaying(bool isPlaying);
    // public System.Void .ctor()
    // Offset: 0xAE0910
    // Implemented from: VROSC.Launchpad
    // Base method: System.Void Launchpad::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayButtonLaunchpad* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PlayButtonLaunchpad::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayButtonLaunchpad*, creationType>()));
    }
    // public override System.Void Setup(VROSC.LaunchpadSpawner launchpadSpawner, System.String id, System.String targetID, System.String displayName, UnityEngine.Color color)
    // Offset: 0xADFF34
    // Implemented from: VROSC.Launchpad
    // Base method: System.Void Launchpad::Setup(VROSC.LaunchpadSpawner launchpadSpawner, System.String id, System.String targetID, System.String displayName, UnityEngine.Color color)
    void Setup(::VROSC::LaunchpadSpawner* launchpadSpawner, ::StringW id, ::StringW targetID, ::StringW displayName, ::UnityEngine::Color color);
    // protected override System.Void OnDestroy()
    // Offset: 0xADFF80
    // Implemented from: VROSC.Launchpad
    // Base method: System.Void Launchpad::OnDestroy()
    void OnDestroy();
  }; // VROSC.PlayButtonLaunchpad
  #pragma pack(pop)
  static check_size<sizeof(PlayButtonLaunchpad), 192 + sizeof(::VROSC::LoopPlaybackSettingsToggle*)> __VROSC_PlayButtonLaunchpadSizeCheck;
  static_assert(sizeof(PlayButtonLaunchpad) == 0xC8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::PlayButtonLaunchpad::AssignConfig
// Il2CppName: AssignConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PlayButtonLaunchpad::*)(::VROSC::LoopPlaybackConfig*)>(&VROSC::PlayButtonLaunchpad::AssignConfig)> {
  static const MethodInfo* get() {
    static auto* config = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlaybackConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PlayButtonLaunchpad*), "AssignConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{config});
  }
};
// Writing MetadataGetter for method: VROSC::PlayButtonLaunchpad::Unassign
// Il2CppName: Unassign
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PlayButtonLaunchpad::*)()>(&VROSC::PlayButtonLaunchpad::Unassign)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PlayButtonLaunchpad*), "Unassign", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PlayButtonLaunchpad::AssignButton
// Il2CppName: AssignButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PlayButtonLaunchpad::*)(::VROSC::LoopPlayButton*)>(&VROSC::PlayButtonLaunchpad::AssignButton)> {
  static const MethodInfo* get() {
    static auto* loopPlayButton = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PlayButtonLaunchpad*), "AssignButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopPlayButton});
  }
};
// Writing MetadataGetter for method: VROSC::PlayButtonLaunchpad::UpdateLoopPlayer
// Il2CppName: UpdateLoopPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PlayButtonLaunchpad::*)()>(&VROSC::PlayButtonLaunchpad::UpdateLoopPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PlayButtonLaunchpad*), "UpdateLoopPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PlayButtonLaunchpad::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PlayButtonLaunchpad::*)()>(&VROSC::PlayButtonLaunchpad::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PlayButtonLaunchpad*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PlayButtonLaunchpad::LoopIsPlaying
// Il2CppName: LoopIsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PlayButtonLaunchpad::*)(bool)>(&VROSC::PlayButtonLaunchpad::LoopIsPlaying)> {
  static const MethodInfo* get() {
    static auto* isPlaying = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PlayButtonLaunchpad*), "LoopIsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isPlaying});
  }
};
// Writing MetadataGetter for method: VROSC::PlayButtonLaunchpad::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::PlayButtonLaunchpad::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PlayButtonLaunchpad::*)(::VROSC::LaunchpadSpawner*, ::StringW, ::StringW, ::StringW, ::UnityEngine::Color)>(&VROSC::PlayButtonLaunchpad::Setup)> {
  static const MethodInfo* get() {
    static auto* launchpadSpawner = &::il2cpp_utils::GetClassFromName("VROSC", "LaunchpadSpawner")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* targetID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* displayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PlayButtonLaunchpad*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{launchpadSpawner, id, targetID, displayName, color});
  }
};
// Writing MetadataGetter for method: VROSC::PlayButtonLaunchpad::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PlayButtonLaunchpad::*)()>(&VROSC::PlayButtonLaunchpad::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PlayButtonLaunchpad*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
