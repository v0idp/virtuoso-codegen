// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.FileWriter
#include "VROSC/FileWriter.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Runtime.CompilerServices.IAsyncStateMachine
#include "System/Runtime/CompilerServices/IAsyncStateMachine.hpp"
// Including type: System.Runtime.CompilerServices.AsyncVoidMethodBuilder
#include "System/Runtime/CompilerServices/AsyncVoidMethodBuilder.hpp"
// Including type: VROSC.Error
#include "VROSC/Error.hpp"
// Including type: System.Runtime.CompilerServices.TaskAwaiter
#include "System/Runtime/CompilerServices/TaskAwaiter.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AndroidJavaClass
  class AndroidJavaClass;
  // Forward declaring type: AndroidJavaObject
  class AndroidJavaObject;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::FileWriter::$ExportTapeRecording$d__19, "VROSC", "FileWriter/<ExportTapeRecording>d__19");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.FileWriter/VROSC.<ExportTapeRecording>d__19
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  struct FileWriter::$ExportTapeRecording$d__19/*, public ::System::ValueType, public ::System::Runtime::CompilerServices::IAsyncStateMachine*/ {
    public:
    public:
    // public System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x0
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $$1__state and: $$t__builder
    char __padding0[0x4] = {};
    // public System.Runtime.CompilerServices.AsyncVoidMethodBuilder <>t__builder
    // Size: 0x20
    // Offset: 0x8
    ::System::Runtime::CompilerServices::AsyncVoidMethodBuilder $$t__builder;
    // Field size check
    static_assert(sizeof(::System::Runtime::CompilerServices::AsyncVoidMethodBuilder) == 0x20);
    // public System.Single[] samples
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<float> samples;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Int32 sampleRate
    // Size: 0x4
    // Offset: 0x30
    int sampleRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 channels
    // Size: 0x4
    // Offset: 0x34
    int channels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 startIndex
    // Size: 0x4
    // Offset: 0x38
    int startIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 endIndex
    // Size: 0x4
    // Offset: 0x3C
    int endIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.String songName
    // Size: 0x8
    // Offset: 0x40
    ::StringW songName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Action`1<VROSC.Error> onFailure
    // Size: 0x8
    // Offset: 0x48
    ::System::Action_1<::VROSC::Error>* onFailure;
    // Field size check
    static_assert(sizeof(::System::Action_1<::VROSC::Error>*) == 0x8);
    // private VROSC.FileWriter/VROSC.<>c__DisplayClass19_0 <>8__1
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::FileWriter::$$c__DisplayClass19_0* $$8__1;
    // Field size check
    static_assert(sizeof(::VROSC::FileWriter::$$c__DisplayClass19_0*) == 0x8);
    // public System.Action onSuccess
    // Size: 0x8
    // Offset: 0x58
    ::System::Action* onSuccess;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private UnityEngine.AndroidJavaClass <unityPlayer>5__2
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::AndroidJavaClass* $unityPlayer$5__2;
    // Field size check
    static_assert(sizeof(::UnityEngine::AndroidJavaClass*) == 0x8);
    // private UnityEngine.AndroidJavaObject <context>5__3
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::AndroidJavaObject* $context$5__3;
    // Field size check
    static_assert(sizeof(::UnityEngine::AndroidJavaObject*) == 0x8);
    // private UnityEngine.AndroidJavaClass <environment>5__4
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::AndroidJavaClass* $environment$5__4;
    // Field size check
    static_assert(sizeof(::UnityEngine::AndroidJavaClass*) == 0x8);
    // private System.Runtime.CompilerServices.TaskAwaiter <>u__1
    // Size: 0x8
    // Offset: 0x78
    ::System::Runtime::CompilerServices::TaskAwaiter $$u__1;
    // Field size check
    static_assert(sizeof(::System::Runtime::CompilerServices::TaskAwaiter) == 0x8);
    public:
    // Creating value type constructor for type: $ExportTapeRecording$d__19
    constexpr $ExportTapeRecording$d__19(int $$1__state_ = {}, ::System::Runtime::CompilerServices::AsyncVoidMethodBuilder $$t__builder_ = {}, ::ArrayW<float> samples_ = ::ArrayW<float>(static_cast<void*>(nullptr)), int sampleRate_ = {}, int channels_ = {}, int startIndex_ = {}, int endIndex_ = {}, ::StringW songName_ = {}, ::System::Action_1<::VROSC::Error>* onFailure_ = {}, ::VROSC::FileWriter::$$c__DisplayClass19_0* $$8__1_ = {}, ::System::Action* onSuccess_ = {}, ::UnityEngine::AndroidJavaClass* $unityPlayer$5__2_ = {}, ::UnityEngine::AndroidJavaObject* $context$5__3_ = {}, ::UnityEngine::AndroidJavaClass* $environment$5__4_ = {}, ::System::Runtime::CompilerServices::TaskAwaiter $$u__1_ = {}) noexcept : $$1__state{$$1__state_}, $$t__builder{$$t__builder_}, samples{samples_}, sampleRate{sampleRate_}, channels{channels_}, startIndex{startIndex_}, endIndex{endIndex_}, songName{songName_}, onFailure{onFailure_}, $$8__1{$$8__1_}, onSuccess{onSuccess_}, $unityPlayer$5__2{$unityPlayer$5__2_}, $context$5__3{$context$5__3_}, $environment$5__4{$environment$5__4_}, $$u__1{$$u__1_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::CompilerServices::IAsyncStateMachine
    operator ::System::Runtime::CompilerServices::IAsyncStateMachine() noexcept {
      return *reinterpret_cast<::System::Runtime::CompilerServices::IAsyncStateMachine*>(this);
    }
    // Get instance field reference: public System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state();
    // Get instance field reference: public System.Runtime.CompilerServices.AsyncVoidMethodBuilder <>t__builder
    [[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncVoidMethodBuilder& dyn_$$t__builder();
    // Get instance field reference: public System.Single[] samples
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_samples();
    // Get instance field reference: public System.Int32 sampleRate
    [[deprecated("Use field access instead!")]] int& dyn_sampleRate();
    // Get instance field reference: public System.Int32 channels
    [[deprecated("Use field access instead!")]] int& dyn_channels();
    // Get instance field reference: public System.Int32 startIndex
    [[deprecated("Use field access instead!")]] int& dyn_startIndex();
    // Get instance field reference: public System.Int32 endIndex
    [[deprecated("Use field access instead!")]] int& dyn_endIndex();
    // Get instance field reference: public System.String songName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_songName();
    // Get instance field reference: public System.Action`1<VROSC.Error> onFailure
    [[deprecated("Use field access instead!")]] ::System::Action_1<::VROSC::Error>*& dyn_onFailure();
    // Get instance field reference: private VROSC.FileWriter/VROSC.<>c__DisplayClass19_0 <>8__1
    [[deprecated("Use field access instead!")]] ::VROSC::FileWriter::$$c__DisplayClass19_0*& dyn_$$8__1();
    // Get instance field reference: public System.Action onSuccess
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_onSuccess();
    // Get instance field reference: private UnityEngine.AndroidJavaClass <unityPlayer>5__2
    [[deprecated("Use field access instead!")]] ::UnityEngine::AndroidJavaClass*& dyn_$unityPlayer$5__2();
    // Get instance field reference: private UnityEngine.AndroidJavaObject <context>5__3
    [[deprecated("Use field access instead!")]] ::UnityEngine::AndroidJavaObject*& dyn_$context$5__3();
    // Get instance field reference: private UnityEngine.AndroidJavaClass <environment>5__4
    [[deprecated("Use field access instead!")]] ::UnityEngine::AndroidJavaClass*& dyn_$environment$5__4();
    // Get instance field reference: private System.Runtime.CompilerServices.TaskAwaiter <>u__1
    [[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter& dyn_$$u__1();
    // private System.Void MoveNext()
    // Offset: 0x95FE58
    void MoveNext();
    // private System.Void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)
    // Offset: 0x96149C
    void SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine);
  }; // VROSC.FileWriter/VROSC.<ExportTapeRecording>d__19
  #pragma pack(pop)
  static check_size<sizeof(FileWriter::$ExportTapeRecording$d__19), 120 + sizeof(::System::Runtime::CompilerServices::TaskAwaiter)> __VROSC_FileWriter_$ExportTapeRecording$d__19SizeCheck;
  static_assert(sizeof(FileWriter::$ExportTapeRecording$d__19) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::FileWriter::$ExportTapeRecording$d__19::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::FileWriter::$ExportTapeRecording$d__19::*)()>(&VROSC::FileWriter::$ExportTapeRecording$d__19::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter::$ExportTapeRecording$d__19), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::FileWriter::$ExportTapeRecording$d__19::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::FileWriter::$ExportTapeRecording$d__19::*)(::System::Runtime::CompilerServices::IAsyncStateMachine*)>(&VROSC::FileWriter::$ExportTapeRecording$d__19::SetStateMachine)> {
  static const MethodInfo* get() {
    static auto* stateMachine = &::il2cpp_utils::GetClassFromName("System.Runtime.CompilerServices", "IAsyncStateMachine")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FileWriter::$ExportTapeRecording$d__19), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stateMachine});
  }
};
