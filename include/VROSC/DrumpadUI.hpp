// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.PadUI
#include "VROSC/PadUI.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: GrabMalletButton
  class GrabMalletButton;
  // Forward declaring type: UISlideToggle
  class UISlideToggle;
  // Forward declaring type: IntNode
  class IntNode;
  // Forward declaring type: ModularDrumsDataController
  class ModularDrumsDataController;
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Forward declaring namespace: VROSC::UI
namespace VROSC::UI {
  // Forward declaring type: DrumSampleSwitcherUI
  class DrumSampleSwitcherUI;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: DrumpadUI
  class DrumpadUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::DrumpadUI);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::DrumpadUI*, "VROSC", "DrumpadUI");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.DrumpadUI
  // [TokenAttribute] Offset: FFFFFFFF
  class DrumpadUI : public ::VROSC::PadUI {
    public:
    // Nested type: ::VROSC::DrumpadUI::$SpinnerActive$d__10
    struct $SpinnerActive$d__10;
    public:
    // private VROSC.GrabMalletButton _grabSticksButton
    // Size: 0x8
    // Offset: 0x58
    ::VROSC::GrabMalletButton* grabSticksButton;
    // Field size check
    static_assert(sizeof(::VROSC::GrabMalletButton*) == 0x8);
    // private VROSC.UI.DrumSampleSwitcherUI _switcher
    // Size: 0x8
    // Offset: 0x60
    ::VROSC::UI::DrumSampleSwitcherUI* switcher;
    // Field size check
    static_assert(sizeof(::VROSC::UI::DrumSampleSwitcherUI*) == 0x8);
    // private VROSC.UISlideToggle _useVelocity
    // Size: 0x8
    // Offset: 0x68
    ::VROSC::UISlideToggle* useVelocity;
    // Field size check
    static_assert(sizeof(::VROSC::UISlideToggle*) == 0x8);
    // private VROSC.IntNode _pitch
    // Size: 0x8
    // Offset: 0x70
    ::VROSC::IntNode* pitch;
    // Field size check
    static_assert(sizeof(::VROSC::IntNode*) == 0x8);
    // private System.Boolean _spinnerPressed
    // Size: 0x1
    // Offset: 0x78
    bool spinnerPressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: spinnerPressed and: OnUseVelocityChanged
    char __padding4[0x7] = {};
    // public System.Action`1<System.Boolean> OnUseVelocityChanged
    // Size: 0x8
    // Offset: 0x80
    ::System::Action_1<bool>* OnUseVelocityChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<bool>*) == 0x8);
    // public System.Action`1<System.Int32> OnPitchChanged
    // Size: 0x8
    // Offset: 0x88
    ::System::Action_1<int>* OnPitchChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<int>*) == 0x8);
    // public System.Action`2<System.Int32,System.Boolean> OnSwitcherChanged
    // Size: 0x8
    // Offset: 0x90
    ::System::Action_2<int, bool>* OnSwitcherChanged;
    // Field size check
    static_assert(sizeof(::System::Action_2<int, bool>*) == 0x8);
    public:
    // Get instance field reference: private VROSC.GrabMalletButton _grabSticksButton
    [[deprecated]] ::VROSC::GrabMalletButton*& dyn__grabSticksButton();
    // Get instance field reference: private VROSC.UI.DrumSampleSwitcherUI _switcher
    [[deprecated]] ::VROSC::UI::DrumSampleSwitcherUI*& dyn__switcher();
    // Get instance field reference: private VROSC.UISlideToggle _useVelocity
    [[deprecated]] ::VROSC::UISlideToggle*& dyn__useVelocity();
    // Get instance field reference: private VROSC.IntNode _pitch
    [[deprecated]] ::VROSC::IntNode*& dyn__pitch();
    // Get instance field reference: private System.Boolean _spinnerPressed
    [[deprecated]] bool& dyn__spinnerPressed();
    // Get instance field reference: public System.Action`1<System.Boolean> OnUseVelocityChanged
    [[deprecated]] ::System::Action_1<bool>*& dyn_OnUseVelocityChanged();
    // Get instance field reference: public System.Action`1<System.Int32> OnPitchChanged
    [[deprecated]] ::System::Action_1<int>*& dyn_OnPitchChanged();
    // Get instance field reference: public System.Action`2<System.Int32,System.Boolean> OnSwitcherChanged
    [[deprecated]] ::System::Action_2<int, bool>*& dyn_OnSwitcherChanged();
    // public System.Void Setup(UnityEngine.Transform parent, System.Int32 empadId, System.Int32 groupId, VROSC.ModularDrumsDataController controller, System.Boolean useVelocity, System.Int32 pitch)
    // Offset: 0x8E7B28
    void Setup(::UnityEngine::Transform* parent, int empadId, int groupId, ::VROSC::ModularDrumsDataController* controller, bool useVelocity, int pitch);
    // private System.Void SpinnerActive(System.Boolean active)
    // Offset: 0x8EA184
    void SpinnerActive(bool active);
    // public System.Void SetSwitcherActiveSample(System.Boolean select, System.Boolean preview)
    // Offset: 0x8E839C
    void SetSwitcherActiveSample(bool select, bool preview);
    // private System.Void SetDrumUseVelocityChanged(VROSC.InputDevice device, System.Boolean toggled)
    // Offset: 0x8EA288
    void SetDrumUseVelocityChanged(::VROSC::InputDevice* device, bool toggled);
    // private System.Void SetPitchChanged(System.Int32 pitch)
    // Offset: 0x8EA2F8
    void SetPitchChanged(int pitch);
    // private System.Void SwitcherChanged(System.Int32 sampleIdOrNoteNumber, System.Boolean preview)
    // Offset: 0x8EA368
    void SwitcherChanged(int sampleIdOrNoteNumber, bool preview);
    // public System.Void .ctor()
    // Offset: 0x8EA3E0
    // Implemented from: VROSC.PadUI
    // Base method: System.Void PadUI::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DrumpadUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::DrumpadUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DrumpadUI*, creationType>()));
    }
    // protected override System.Void OnDestroy()
    // Offset: 0x8E9EF8
    // Implemented from: VROSC.PadUI
    // Base method: System.Void PadUI::OnDestroy()
    void OnDestroy();
    // protected override System.Void UpdateHover()
    // Offset: 0x8EA254
    // Implemented from: VROSC.PadUI
    // Base method: System.Void PadUI::UpdateHover()
    void UpdateHover();
  }; // VROSC.DrumpadUI
  #pragma pack(pop)
  static check_size<sizeof(DrumpadUI), 144 + sizeof(::System::Action_2<int, bool>*)> __VROSC_DrumpadUISizeCheck;
  static_assert(sizeof(DrumpadUI) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::DrumpadUI::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadUI::*)(::UnityEngine::Transform*, int, int, ::VROSC::ModularDrumsDataController*, bool, int)>(&VROSC::DrumpadUI::Setup)> {
  static const MethodInfo* get() {
    static auto* parent = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* empadId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* groupId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* controller = &::il2cpp_utils::GetClassFromName("VROSC", "ModularDrumsDataController")->byval_arg;
    static auto* useVelocity = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadUI*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parent, empadId, groupId, controller, useVelocity, pitch});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadUI::SpinnerActive
// Il2CppName: SpinnerActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadUI::*)(bool)>(&VROSC::DrumpadUI::SpinnerActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadUI*), "SpinnerActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadUI::SetSwitcherActiveSample
// Il2CppName: SetSwitcherActiveSample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadUI::*)(bool, bool)>(&VROSC::DrumpadUI::SetSwitcherActiveSample)> {
  static const MethodInfo* get() {
    static auto* select = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* preview = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadUI*), "SetSwitcherActiveSample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{select, preview});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadUI::SetDrumUseVelocityChanged
// Il2CppName: SetDrumUseVelocityChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadUI::*)(::VROSC::InputDevice*, bool)>(&VROSC::DrumpadUI::SetDrumUseVelocityChanged)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* toggled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadUI*), "SetDrumUseVelocityChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, toggled});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadUI::SetPitchChanged
// Il2CppName: SetPitchChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadUI::*)(int)>(&VROSC::DrumpadUI::SetPitchChanged)> {
  static const MethodInfo* get() {
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadUI*), "SetPitchChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pitch});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadUI::SwitcherChanged
// Il2CppName: SwitcherChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadUI::*)(int, bool)>(&VROSC::DrumpadUI::SwitcherChanged)> {
  static const MethodInfo* get() {
    static auto* sampleIdOrNoteNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* preview = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadUI*), "SwitcherChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sampleIdOrNoteNumber, preview});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::DrumpadUI::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadUI::*)()>(&VROSC::DrumpadUI::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadUI*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadUI::UpdateHover
// Il2CppName: UpdateHover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadUI::*)()>(&VROSC::DrumpadUI::UpdateHover)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadUI*), "UpdateHover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
