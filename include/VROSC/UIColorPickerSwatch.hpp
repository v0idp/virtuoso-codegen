// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: ProceduralAdjustableMesh
  class ProceduralAdjustableMesh;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: UIColorPickerSwatch
  class UIColorPickerSwatch;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UIColorPickerSwatch);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UIColorPickerSwatch*, "VROSC", "UIColorPickerSwatch");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UIColorPickerSwatch
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class UIColorPickerSwatch : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Color <Color>k__BackingField
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Color Color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private VROSC.ProceduralAdjustableMesh _colorDisplay
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::ProceduralAdjustableMesh* colorDisplay;
    // Field size check
    static_assert(sizeof(::VROSC::ProceduralAdjustableMesh*) == 0x8);
    // private UnityEngine.GameObject _selected
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* selected;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Color <Color>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_$Color$k__BackingField();
    // Get instance field reference: private VROSC.ProceduralAdjustableMesh _colorDisplay
    [[deprecated("Use field access instead!")]] ::VROSC::ProceduralAdjustableMesh*& dyn__colorDisplay();
    // Get instance field reference: private UnityEngine.GameObject _selected
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__selected();
    // public UnityEngine.Color get_Color()
    // Offset: 0xA34F50
    ::UnityEngine::Color get_Color();
    // private System.Void set_Color(UnityEngine.Color value)
    // Offset: 0xA34F44
    void set_Color(::UnityEngine::Color value);
    // public System.Void .ctor()
    // Offset: 0xA35020
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIColorPickerSwatch* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UIColorPickerSwatch::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIColorPickerSwatch*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0xA34F5C
    void Awake();
    // public System.Void SetColor(UnityEngine.Color color)
    // Offset: 0xA34F9C
    void SetColor(::UnityEngine::Color color);
    // public System.Void SetHovering(System.Boolean hovering)
    // Offset: 0xA34F7C
    void SetHovering(bool hovering);
  }; // VROSC.UIColorPickerSwatch
  #pragma pack(pop)
  static check_size<sizeof(UIColorPickerSwatch), 48 + sizeof(::UnityEngine::GameObject*)> __VROSC_UIColorPickerSwatchSizeCheck;
  static_assert(sizeof(UIColorPickerSwatch) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UIColorPickerSwatch::get_Color
// Il2CppName: get_Color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::UIColorPickerSwatch::*)()>(&VROSC::UIColorPickerSwatch::get_Color)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIColorPickerSwatch*), "get_Color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UIColorPickerSwatch::set_Color
// Il2CppName: set_Color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIColorPickerSwatch::*)(::UnityEngine::Color)>(&VROSC::UIColorPickerSwatch::set_Color)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIColorPickerSwatch*), "set_Color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::UIColorPickerSwatch::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::UIColorPickerSwatch::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIColorPickerSwatch::*)()>(&VROSC::UIColorPickerSwatch::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIColorPickerSwatch*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UIColorPickerSwatch::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIColorPickerSwatch::*)(::UnityEngine::Color)>(&VROSC::UIColorPickerSwatch::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIColorPickerSwatch*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::UIColorPickerSwatch::SetHovering
// Il2CppName: SetHovering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIColorPickerSwatch::*)(bool)>(&VROSC::UIColorPickerSwatch::SetHovering)> {
  static const MethodInfo* get() {
    static auto* hovering = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIColorPickerSwatch*), "SetHovering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hovering});
  }
};
