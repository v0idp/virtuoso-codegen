// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.TriggerButton
#include "VROSC/TriggerButton.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: InputSettings
  class InputSettings;
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: TriggerFrame
  struct TriggerFrame;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: HandMover
  class HandMover;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: InputManager
  class InputManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::InputManager);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::InputManager*, "VROSC", "InputManager");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.InputManager
  // [TokenAttribute] Offset: FFFFFFFF
  class InputManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.TriggerButton[] _allTriggerButtons
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::VROSC::TriggerButton> allTriggerButtons;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::TriggerButton>) == 0x8);
    // private VROSC.InputSettings _inputSettings
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::InputSettings* inputSettings;
    // Field size check
    static_assert(sizeof(::VROSC::InputSettings*) == 0x8);
    // private System.Boolean _setupComplete
    // Size: 0x1
    // Offset: 0x28
    bool setupComplete;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: setupComplete and: debugHandMover
    char __padding2[0x7] = {};
    // private HandMover _debugHandMover
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::HandMover* debugHandMover;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HandMover*) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.TriggerButton> triggerButtonsBeginning
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::VROSC::TriggerButton>* triggerButtonsBeginning;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::TriggerButton>*) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.TriggerButton> triggerButtonsStaying
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::VROSC::TriggerButton>* triggerButtonsStaying;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::TriggerButton>*) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.TriggerButton> triggerButtonsEnding
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::VROSC::TriggerButton>* triggerButtonsEnding;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::TriggerButton>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public System.Action`2<VROSC.InputDevice,VROSC.TriggerButton> OnButtonBegin
    static ::System::Action_2<::VROSC::InputDevice*, ::VROSC::TriggerButton>* _get_OnButtonBegin();
    // Set static field: static public System.Action`2<VROSC.InputDevice,VROSC.TriggerButton> OnButtonBegin
    static void _set_OnButtonBegin(::System::Action_2<::VROSC::InputDevice*, ::VROSC::TriggerButton>* value);
    // Get static field: static public System.Action`2<VROSC.InputDevice,VROSC.TriggerButton> OnButtonStay
    static ::System::Action_2<::VROSC::InputDevice*, ::VROSC::TriggerButton>* _get_OnButtonStay();
    // Set static field: static public System.Action`2<VROSC.InputDevice,VROSC.TriggerButton> OnButtonStay
    static void _set_OnButtonStay(::System::Action_2<::VROSC::InputDevice*, ::VROSC::TriggerButton>* value);
    // Get static field: static public System.Action`2<VROSC.InputDevice,VROSC.TriggerButton> OnButtonEnd
    static ::System::Action_2<::VROSC::InputDevice*, ::VROSC::TriggerButton>* _get_OnButtonEnd();
    // Set static field: static public System.Action`2<VROSC.InputDevice,VROSC.TriggerButton> OnButtonEnd
    static void _set_OnButtonEnd(::System::Action_2<::VROSC::InputDevice*, ::VROSC::TriggerButton>* value);
    // Get static field: static public System.Action`2<VROSC.InputDevice,UnityEngine.Vector2> OnThumbStickDirection
    static ::System::Action_2<::VROSC::InputDevice*, ::UnityEngine::Vector2>* _get_OnThumbStickDirection();
    // Set static field: static public System.Action`2<VROSC.InputDevice,UnityEngine.Vector2> OnThumbStickDirection
    static void _set_OnThumbStickDirection(::System::Action_2<::VROSC::InputDevice*, ::UnityEngine::Vector2>* value);
    // Get instance field reference: private VROSC.TriggerButton[] _allTriggerButtons
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::TriggerButton>& dyn__allTriggerButtons();
    // Get instance field reference: private VROSC.InputSettings _inputSettings
    [[deprecated("Use field access instead!")]] ::VROSC::InputSettings*& dyn__inputSettings();
    // Get instance field reference: private System.Boolean _setupComplete
    [[deprecated("Use field access instead!")]] bool& dyn__setupComplete();
    // Get instance field reference: private HandMover _debugHandMover
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HandMover*& dyn__debugHandMover();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.TriggerButton> triggerButtonsBeginning
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VROSC::TriggerButton>*& dyn_triggerButtonsBeginning();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.TriggerButton> triggerButtonsStaying
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VROSC::TriggerButton>*& dyn_triggerButtonsStaying();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.TriggerButton> triggerButtonsEnding
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VROSC::TriggerButton>*& dyn_triggerButtonsEnding();
    // public VROSC.InputSettings get_InputSettings()
    // Offset: 0x19455FC
    ::VROSC::InputSettings* get_InputSettings();
    // public System.Void .ctor()
    // Offset: 0x1945C68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::InputManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputManager*, creationType>()));
    }
    // protected System.Void Update()
    // Offset: 0x1945604
    void Update();
    // public System.Void Setup()
    // Offset: 0x1945688
    void Setup();
    // public System.Void CheckForButtonInteractions(VROSC.InputDevice inputDevice)
    // Offset: 0x1944AB4
    void CheckForButtonInteractions(::VROSC::InputDevice* inputDevice);
    // private System.Boolean ButtonIsTriggering(VROSC.InputDevice inputDevice, VROSC.TriggerButton triggerButton, VROSC.TriggerFrame triggerFrame)
    // Offset: 0x19456C8
    bool ButtonIsTriggering(::VROSC::InputDevice* inputDevice, ::VROSC::TriggerButton triggerButton, ::VROSC::TriggerFrame triggerFrame);
    // private System.Void ThumbStickInput(VROSC.InputDevice inputDevice)
    // Offset: 0x1945A8C
    void ThumbStickInput(::VROSC::InputDevice* inputDevice);
    // public System.Boolean IsPlayerLookingDown(System.Single angleThreshhold)
    // Offset: 0x1945B64
    bool IsPlayerLookingDown(float angleThreshhold);
  }; // VROSC.InputManager
  #pragma pack(pop)
  static check_size<sizeof(InputManager), 72 + sizeof(::System::Collections::Generic::List_1<::VROSC::TriggerButton>*)> __VROSC_InputManagerSizeCheck;
  static_assert(sizeof(InputManager) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::InputManager::get_InputSettings
// Il2CppName: get_InputSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::InputSettings* (VROSC::InputManager::*)()>(&VROSC::InputManager::get_InputSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputManager*), "get_InputSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::InputManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputManager::*)()>(&VROSC::InputManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputManager::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputManager::*)()>(&VROSC::InputManager::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputManager*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputManager::CheckForButtonInteractions
// Il2CppName: CheckForButtonInteractions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputManager::*)(::VROSC::InputDevice*)>(&VROSC::InputManager::CheckForButtonInteractions)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputManager*), "CheckForButtonInteractions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice});
  }
};
// Writing MetadataGetter for method: VROSC::InputManager::ButtonIsTriggering
// Il2CppName: ButtonIsTriggering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::InputManager::*)(::VROSC::InputDevice*, ::VROSC::TriggerButton, ::VROSC::TriggerFrame)>(&VROSC::InputManager::ButtonIsTriggering)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* triggerButton = &::il2cpp_utils::GetClassFromName("VROSC", "TriggerButton")->byval_arg;
    static auto* triggerFrame = &::il2cpp_utils::GetClassFromName("VROSC", "TriggerFrame")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputManager*), "ButtonIsTriggering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice, triggerButton, triggerFrame});
  }
};
// Writing MetadataGetter for method: VROSC::InputManager::ThumbStickInput
// Il2CppName: ThumbStickInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputManager::*)(::VROSC::InputDevice*)>(&VROSC::InputManager::ThumbStickInput)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputManager*), "ThumbStickInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice});
  }
};
// Writing MetadataGetter for method: VROSC::InputManager::IsPlayerLookingDown
// Il2CppName: IsPlayerLookingDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::InputManager::*)(float)>(&VROSC::InputManager::IsPlayerLookingDown)> {
  static const MethodInfo* get() {
    static auto* angleThreshhold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputManager*), "IsPlayerLookingDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angleThreshhold});
  }
};
