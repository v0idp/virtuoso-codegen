// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: IconMesh
  class IconMesh;
  // Forward declaring type: TooltipData
  class TooltipData;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ControllerHintUI
  class ControllerHintUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ControllerHintUI);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ControllerHintUI*, "VROSC", "ControllerHintUI");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ControllerHintUI
  // [TokenAttribute] Offset: FFFFFFFF
  class ControllerHintUI : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private TMPro.TextMeshPro _hintLabelText
    // Size: 0x8
    // Offset: 0x18
    ::TMPro::TextMeshPro* hintLabelText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private UnityEngine.RectTransform _hintBackground
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::RectTransform* hintBackground;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private TMPro.TextMeshPro _hintLabelIfIcon
    // Size: 0x8
    // Offset: 0x28
    ::TMPro::TextMeshPro* hintLabelIfIcon;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private VROSC.IconMesh _iconMesh
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::IconMesh* iconMesh;
    // Field size check
    static_assert(sizeof(::VROSC::IconMesh*) == 0x8);
    // private UnityEngine.RectTransform _iconHolder
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::RectTransform* iconHolder;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private System.Single _textpaddingX
    // Size: 0x4
    // Offset: 0x40
    float textpaddingX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _textpaddingY
    // Size: 0x4
    // Offset: 0x44
    float textpaddingY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private VROSC.TooltipData _currentTooltip
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::TooltipData* currentTooltip;
    // Field size check
    static_assert(sizeof(::VROSC::TooltipData*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private TMPro.TextMeshPro _hintLabelText
    [[deprecated]] ::TMPro::TextMeshPro*& dyn__hintLabelText();
    // Get instance field reference: private UnityEngine.RectTransform _hintBackground
    [[deprecated]] ::UnityEngine::RectTransform*& dyn__hintBackground();
    // Get instance field reference: private TMPro.TextMeshPro _hintLabelIfIcon
    [[deprecated]] ::TMPro::TextMeshPro*& dyn__hintLabelIfIcon();
    // Get instance field reference: private VROSC.IconMesh _iconMesh
    [[deprecated]] ::VROSC::IconMesh*& dyn__iconMesh();
    // Get instance field reference: private UnityEngine.RectTransform _iconHolder
    [[deprecated]] ::UnityEngine::RectTransform*& dyn__iconHolder();
    // Get instance field reference: private System.Single _textpaddingX
    [[deprecated]] float& dyn__textpaddingX();
    // Get instance field reference: private System.Single _textpaddingY
    [[deprecated]] float& dyn__textpaddingY();
    // Get instance field reference: private VROSC.TooltipData _currentTooltip
    [[deprecated]] ::VROSC::TooltipData*& dyn__currentTooltip();
    // public System.Void SetTooltipActive(System.Boolean active, VROSC.TooltipData tooltip)
    // Offset: 0x94DEF4
    void SetTooltipActive(bool active, ::VROSC::TooltipData* tooltip);
    // private System.Boolean SetIcon(VROSC.TooltipData tooltip)
    // Offset: 0x94E3BC
    bool SetIcon(::VROSC::TooltipData* tooltip);
    // public System.Void .ctor()
    // Offset: 0x94E4E4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ControllerHintUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ControllerHintUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ControllerHintUI*, creationType>()));
    }
  }; // VROSC.ControllerHintUI
  #pragma pack(pop)
  static check_size<sizeof(ControllerHintUI), 72 + sizeof(::VROSC::TooltipData*)> __VROSC_ControllerHintUISizeCheck;
  static_assert(sizeof(ControllerHintUI) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ControllerHintUI::SetTooltipActive
// Il2CppName: SetTooltipActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ControllerHintUI::*)(bool, ::VROSC::TooltipData*)>(&VROSC::ControllerHintUI::SetTooltipActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tooltip = &::il2cpp_utils::GetClassFromName("VROSC", "TooltipData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ControllerHintUI*), "SetTooltipActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active, tooltip});
  }
};
// Writing MetadataGetter for method: VROSC::ControllerHintUI::SetIcon
// Il2CppName: SetIcon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::ControllerHintUI::*)(::VROSC::TooltipData*)>(&VROSC::ControllerHintUI::SetIcon)> {
  static const MethodInfo* get() {
    static auto* tooltip = &::il2cpp_utils::GetClassFromName("VROSC", "TooltipData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ControllerHintUI*), "SetIcon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tooltip});
  }
};
// Writing MetadataGetter for method: VROSC::ControllerHintUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
