// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.ScaleRandomizer
#include "VROSC/ScaleRandomizer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: ScaleNode
  class ScaleNode;
  // Forward declaring type: NoteNode
  class NoteNode;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ScaleRandomizer::RandomTarget);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ScaleRandomizer::RandomTarget*, "VROSC", "ScaleRandomizer/RandomTarget");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ScaleRandomizer/VROSC.RandomTarget
  // [TokenAttribute] Offset: FFFFFFFF
  class ScaleRandomizer::RandomTarget : public ::Il2CppObject {
    public:
    public:
    // public VROSC.ScaleNode Scale
    // Size: 0x8
    // Offset: 0x10
    ::VROSC::ScaleNode* Scale;
    // Field size check
    static_assert(sizeof(::VROSC::ScaleNode*) == 0x8);
    // public VROSC.NoteNode Base
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::NoteNode* Base;
    // Field size check
    static_assert(sizeof(::VROSC::NoteNode*) == 0x8);
    // public System.Single ChanceToKeepBase
    // Size: 0x4
    // Offset: 0x20
    float ChanceToKeepBase;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 MinDropNotes
    // Size: 0x4
    // Offset: 0x24
    int MinDropNotes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MaxDropNotes
    // Size: 0x4
    // Offset: 0x28
    int MaxDropNotes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public VROSC.ScaleNode Scale
    [[deprecated("Use field access instead!")]] ::VROSC::ScaleNode*& dyn_Scale();
    // Get instance field reference: public VROSC.NoteNode Base
    [[deprecated("Use field access instead!")]] ::VROSC::NoteNode*& dyn_Base();
    // Get instance field reference: public System.Single ChanceToKeepBase
    [[deprecated("Use field access instead!")]] float& dyn_ChanceToKeepBase();
    // Get instance field reference: public System.Int32 MinDropNotes
    [[deprecated("Use field access instead!")]] int& dyn_MinDropNotes();
    // Get instance field reference: public System.Int32 MaxDropNotes
    [[deprecated("Use field access instead!")]] int& dyn_MaxDropNotes();
    // public System.Void .ctor()
    // Offset: 0x8D4414
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScaleRandomizer::RandomTarget* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScaleRandomizer::RandomTarget::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScaleRandomizer::RandomTarget*, creationType>()));
    }
  }; // VROSC.ScaleRandomizer/VROSC.RandomTarget
  #pragma pack(pop)
  static check_size<sizeof(ScaleRandomizer::RandomTarget), 40 + sizeof(int)> __VROSC_ScaleRandomizer_RandomTargetSizeCheck;
  static_assert(sizeof(ScaleRandomizer::RandomTarget) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ScaleRandomizer::RandomTarget::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
