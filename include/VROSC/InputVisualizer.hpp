// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Renderer
  class Renderer;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: InputVisualizer
  class InputVisualizer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::InputVisualizer);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::InputVisualizer*, "VROSC", "InputVisualizer");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.InputVisualizer
  // [TokenAttribute] Offset: FFFFFFFF
  class InputVisualizer : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Material _restingMaterial
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Material* restingMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _activeMaterial
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* activeMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private VROSC.InputDevice _device
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::InputDevice* device;
    // Field size check
    static_assert(sizeof(::VROSC::InputDevice*) == 0x8);
    // private UnityEngine.Renderer _renderer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Renderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Material _restingMaterial
    [[deprecated]] ::UnityEngine::Material*& dyn__restingMaterial();
    // Get instance field reference: private UnityEngine.Material _activeMaterial
    [[deprecated]] ::UnityEngine::Material*& dyn__activeMaterial();
    // Get instance field reference: private VROSC.InputDevice _device
    [[deprecated]] ::VROSC::InputDevice*& dyn__device();
    // Get instance field reference: private UnityEngine.Renderer _renderer
    [[deprecated]] ::UnityEngine::Renderer*& dyn__renderer();
    // public System.Void Update()
    // Offset: 0x1945E14
    void Update();
    // public System.Void Setup(VROSC.InputDevice device)
    // Offset: 0x1943E84
    void Setup(::VROSC::InputDevice* device);
    // public System.Void .ctor()
    // Offset: 0x1945EF8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputVisualizer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::InputVisualizer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputVisualizer*, creationType>()));
    }
  }; // VROSC.InputVisualizer
  #pragma pack(pop)
  static check_size<sizeof(InputVisualizer), 48 + sizeof(::UnityEngine::Renderer*)> __VROSC_InputVisualizerSizeCheck;
  static_assert(sizeof(InputVisualizer) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::InputVisualizer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputVisualizer::*)()>(&VROSC::InputVisualizer::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputVisualizer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputVisualizer::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputVisualizer::*)(::VROSC::InputDevice*)>(&VROSC::InputVisualizer::Setup)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputVisualizer*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: VROSC::InputVisualizer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
