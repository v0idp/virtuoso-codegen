// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.SoundSource
#include "VROSC/SoundSource.hpp"
// Including type: VROSC.WidgetSettings/VROSC.Identifier
#include "VROSC/WidgetSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: VirtuosoSampler
  class VirtuosoSampler;
  // Forward declaring type: HelmWrapper
  class HelmWrapper;
  // Forward declaring type: PatchSettings
  class PatchSettings;
  // Forward declaring type: HandType
  struct HandType;
  // Forward declaring type: AudioHelmInstrumentWrapper
  class AudioHelmInstrumentWrapper;
}
// Forward declaring namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: AudioHelmClock
  class AudioHelmClock;
  // Forward declaring type: Param
  struct Param;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: InternalSynthesizer
  class InternalSynthesizer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::InternalSynthesizer);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::InternalSynthesizer*, "VROSC", "InternalSynthesizer");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.InternalSynthesizer
  // [TokenAttribute] Offset: FFFFFFFF
  class InternalSynthesizer : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::InternalSynthesizer::$Setup$d__9
    struct $Setup$d__9;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private AudioHelm.AudioHelmClock _audioHelmClock
    // Size: 0x8
    // Offset: 0x18
    ::AudioHelm::AudioHelmClock* audioHelmClock;
    // Field size check
    static_assert(sizeof(::AudioHelm::AudioHelmClock*) == 0x8);
    // private VROSC.VirtuosoSampler _sampler
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::VirtuosoSampler* sampler;
    // Field size check
    static_assert(sizeof(::VROSC::VirtuosoSampler*) == 0x8);
    // private VROSC.HelmWrapper _leftHelm
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::HelmWrapper* leftHelm;
    // Field size check
    static_assert(sizeof(::VROSC::HelmWrapper*) == 0x8);
    // private VROSC.HelmWrapper _rightHelm
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::HelmWrapper* rightHelm;
    // Field size check
    static_assert(sizeof(::VROSC::HelmWrapper*) == 0x8);
    // private VROSC.HelmWrapper _activeHelm
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::HelmWrapper* activeHelm;
    // Field size check
    static_assert(sizeof(::VROSC::HelmWrapper*) == 0x8);
    // private VROSC.SoundSource _currentSoundSource
    // Size: 0x4
    // Offset: 0x40
    ::VROSC::SoundSource currentSoundSource;
    // Field size check
    static_assert(sizeof(::VROSC::SoundSource) == 0x4);
    // private VROSC.WidgetSettings/VROSC.Identifier _currentInstrumentId
    // Size: 0x4
    // Offset: 0x44
    ::VROSC::WidgetSettings::Identifier currentInstrumentId;
    // Field size check
    static_assert(sizeof(::VROSC::WidgetSettings::Identifier) == 0x4);
    // private System.Boolean _patchSet
    // Size: 0x1
    // Offset: 0x48
    bool patchSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public System.Action OnActivePatchChanged
    static ::System::Action* _get_OnActivePatchChanged();
    // Set static field: static public System.Action OnActivePatchChanged
    static void _set_OnActivePatchChanged(::System::Action* value);
    // Get instance field reference: private AudioHelm.AudioHelmClock _audioHelmClock
    ::AudioHelm::AudioHelmClock*& dyn__audioHelmClock();
    // Get instance field reference: private VROSC.VirtuosoSampler _sampler
    ::VROSC::VirtuosoSampler*& dyn__sampler();
    // Get instance field reference: private VROSC.HelmWrapper _leftHelm
    ::VROSC::HelmWrapper*& dyn__leftHelm();
    // Get instance field reference: private VROSC.HelmWrapper _rightHelm
    ::VROSC::HelmWrapper*& dyn__rightHelm();
    // Get instance field reference: private VROSC.HelmWrapper _activeHelm
    ::VROSC::HelmWrapper*& dyn__activeHelm();
    // Get instance field reference: private VROSC.SoundSource _currentSoundSource
    ::VROSC::SoundSource& dyn__currentSoundSource();
    // Get instance field reference: private VROSC.WidgetSettings/VROSC.Identifier _currentInstrumentId
    ::VROSC::WidgetSettings::Identifier& dyn__currentInstrumentId();
    // Get instance field reference: private System.Boolean _patchSet
    bool& dyn__patchSet();
    // public System.Threading.Tasks.Task Setup()
    // Offset: 0x13869AC
    ::System::Threading::Tasks::Task* Setup();
    // public System.Void PlayNote(VROSC.WidgetSettings/VROSC.Identifier instrumentId, System.Int32 note, System.Single velocity, VROSC.PatchSettings patchSettings, System.Double predictedDspTime, VROSC.HandType handType, System.Single pitch)
    // Offset: 0x1386AB0
    void PlayNote(::VROSC::WidgetSettings::Identifier instrumentId, int note, float velocity, ::VROSC::PatchSettings* patchSettings, double predictedDspTime, ::VROSC::HandType handType, float pitch);
    // public System.Void StopNote(System.Int32 note, VROSC.PatchSettings patchSettings, VROSC.HandType handType)
    // Offset: 0x1386C14
    void StopNote(int note, ::VROSC::PatchSettings* patchSettings, ::VROSC::HandType handType);
    // public System.Void SetMidiCC(System.Single midiCCValue, System.Int32 midiCC, VROSC.PatchSettings patchSettings, VROSC.HandType handType, System.Boolean saveToPatch)
    // Offset: 0x1386C58
    void SetMidiCC(float midiCCValue, int midiCC, ::VROSC::PatchSettings* patchSettings, ::VROSC::HandType handType, bool saveToPatch);
    // public System.Void SetPitchBend(System.Single pitchBendValue, VROSC.PatchSettings patchSettings, VROSC.HandType handType)
    // Offset: 0x1387058
    void SetPitchBend(float pitchBendValue, ::VROSC::PatchSettings* patchSettings, ::VROSC::HandType handType);
    // public System.Void SetHelmParameterValue(VROSC.PatchSettings patchSettings, AudioHelm.Param parameter, System.Single newValue, VROSC.HandType handType, System.Boolean saveToPatch)
    // Offset: 0x1386E98
    void SetHelmParameterValue(::VROSC::PatchSettings* patchSettings, ::AudioHelm::Param parameter, float newValue, ::VROSC::HandType handType, bool saveToPatch);
    // public System.Void SetHelmParameterPercent(VROSC.PatchSettings patchSettings, AudioHelm.Param parameter, System.Single newValue, VROSC.HandType handType, System.Boolean saveToPatch)
    // Offset: 0x1386F78
    void SetHelmParameterPercent(::VROSC::PatchSettings* patchSettings, ::AudioHelm::Param parameter, float newValue, ::VROSC::HandType handType, bool saveToPatch);
    // public System.Void SetPatchToModularDrums()
    // Offset: 0x1387118
    void SetPatchToModularDrums();
    // public System.Void SetPatch(VROSC.HelmWrapper helmWrapper, VROSC.PatchSettings patchSettings)
    // Offset: 0x1387190
    void SetPatch(::VROSC::HelmWrapper* helmWrapper, ::VROSC::PatchSettings* patchSettings);
    // public System.Void AllNotesOff()
    // Offset: 0x13873C0
    void AllNotesOff();
    // public System.Void AllNotesOff(System.Object patch)
    // Offset: 0x1387418
    void AllNotesOff(::Il2CppObject* patch);
    // public System.Void SetPatchToMicrophone()
    // Offset: 0x1387554
    void SetPatchToMicrophone();
    // public System.Void SetBPM(System.Single bpm, System.Boolean reset)
    // Offset: 0x13875D0
    void SetBPM(float bpm, bool reset);
    // private VROSC.AudioHelmInstrumentWrapper GetHelmOrSamplerWrapper(VROSC.PatchSettings patchSettings, VROSC.HandType handType)
    // Offset: 0x1386B28
    ::VROSC::AudioHelmInstrumentWrapper* GetHelmOrSamplerWrapper(::VROSC::PatchSettings* patchSettings, ::VROSC::HandType handType);
    // public System.String GetCurrentInstrumentName()
    // Offset: 0x1387620
    ::StringW GetCurrentInstrumentName();
    // public System.String GetCurrentPatchName()
    // Offset: 0x138767C
    ::StringW GetCurrentPatchName();
    // public VROSC.SoundSource GetCurrentSoundSource()
    // Offset: 0x1387734
    ::VROSC::SoundSource GetCurrentSoundSource();
    // public System.Void .ctor()
    // Offset: 0x138773C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InternalSynthesizer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::InternalSynthesizer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InternalSynthesizer*, creationType>()));
    }
  }; // VROSC.InternalSynthesizer
  #pragma pack(pop)
  static check_size<sizeof(InternalSynthesizer), 72 + sizeof(bool)> __VROSC_InternalSynthesizerSizeCheck;
  static_assert(sizeof(InternalSynthesizer) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::InternalSynthesizer::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (VROSC::InternalSynthesizer::*)()>(&VROSC::InternalSynthesizer::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InternalSynthesizer*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InternalSynthesizer::PlayNote
// Il2CppName: PlayNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InternalSynthesizer::*)(::VROSC::WidgetSettings::Identifier, int, float, ::VROSC::PatchSettings*, double, ::VROSC::HandType, float)>(&VROSC::InternalSynthesizer::PlayNote)> {
  static const MethodInfo* get() {
    static auto* instrumentId = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings/Identifier")->byval_arg;
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* patchSettings = &::il2cpp_utils::GetClassFromName("VROSC", "PatchSettings")->byval_arg;
    static auto* predictedDspTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* handType = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InternalSynthesizer*), "PlayNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instrumentId, note, velocity, patchSettings, predictedDspTime, handType, pitch});
  }
};
// Writing MetadataGetter for method: VROSC::InternalSynthesizer::StopNote
// Il2CppName: StopNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InternalSynthesizer::*)(int, ::VROSC::PatchSettings*, ::VROSC::HandType)>(&VROSC::InternalSynthesizer::StopNote)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* patchSettings = &::il2cpp_utils::GetClassFromName("VROSC", "PatchSettings")->byval_arg;
    static auto* handType = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InternalSynthesizer*), "StopNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, patchSettings, handType});
  }
};
// Writing MetadataGetter for method: VROSC::InternalSynthesizer::SetMidiCC
// Il2CppName: SetMidiCC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InternalSynthesizer::*)(float, int, ::VROSC::PatchSettings*, ::VROSC::HandType, bool)>(&VROSC::InternalSynthesizer::SetMidiCC)> {
  static const MethodInfo* get() {
    static auto* midiCCValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* midiCC = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* patchSettings = &::il2cpp_utils::GetClassFromName("VROSC", "PatchSettings")->byval_arg;
    static auto* handType = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    static auto* saveToPatch = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InternalSynthesizer*), "SetMidiCC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{midiCCValue, midiCC, patchSettings, handType, saveToPatch});
  }
};
// Writing MetadataGetter for method: VROSC::InternalSynthesizer::SetPitchBend
// Il2CppName: SetPitchBend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InternalSynthesizer::*)(float, ::VROSC::PatchSettings*, ::VROSC::HandType)>(&VROSC::InternalSynthesizer::SetPitchBend)> {
  static const MethodInfo* get() {
    static auto* pitchBendValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* patchSettings = &::il2cpp_utils::GetClassFromName("VROSC", "PatchSettings")->byval_arg;
    static auto* handType = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InternalSynthesizer*), "SetPitchBend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pitchBendValue, patchSettings, handType});
  }
};
// Writing MetadataGetter for method: VROSC::InternalSynthesizer::SetHelmParameterValue
// Il2CppName: SetHelmParameterValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InternalSynthesizer::*)(::VROSC::PatchSettings*, ::AudioHelm::Param, float, ::VROSC::HandType, bool)>(&VROSC::InternalSynthesizer::SetHelmParameterValue)> {
  static const MethodInfo* get() {
    static auto* patchSettings = &::il2cpp_utils::GetClassFromName("VROSC", "PatchSettings")->byval_arg;
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "Param")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* handType = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    static auto* saveToPatch = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InternalSynthesizer*), "SetHelmParameterValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{patchSettings, parameter, newValue, handType, saveToPatch});
  }
};
// Writing MetadataGetter for method: VROSC::InternalSynthesizer::SetHelmParameterPercent
// Il2CppName: SetHelmParameterPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InternalSynthesizer::*)(::VROSC::PatchSettings*, ::AudioHelm::Param, float, ::VROSC::HandType, bool)>(&VROSC::InternalSynthesizer::SetHelmParameterPercent)> {
  static const MethodInfo* get() {
    static auto* patchSettings = &::il2cpp_utils::GetClassFromName("VROSC", "PatchSettings")->byval_arg;
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "Param")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* handType = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    static auto* saveToPatch = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InternalSynthesizer*), "SetHelmParameterPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{patchSettings, parameter, newValue, handType, saveToPatch});
  }
};
// Writing MetadataGetter for method: VROSC::InternalSynthesizer::SetPatchToModularDrums
// Il2CppName: SetPatchToModularDrums
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InternalSynthesizer::*)()>(&VROSC::InternalSynthesizer::SetPatchToModularDrums)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InternalSynthesizer*), "SetPatchToModularDrums", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InternalSynthesizer::SetPatch
// Il2CppName: SetPatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InternalSynthesizer::*)(::VROSC::HelmWrapper*, ::VROSC::PatchSettings*)>(&VROSC::InternalSynthesizer::SetPatch)> {
  static const MethodInfo* get() {
    static auto* helmWrapper = &::il2cpp_utils::GetClassFromName("VROSC", "HelmWrapper")->byval_arg;
    static auto* patchSettings = &::il2cpp_utils::GetClassFromName("VROSC", "PatchSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InternalSynthesizer*), "SetPatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{helmWrapper, patchSettings});
  }
};
// Writing MetadataGetter for method: VROSC::InternalSynthesizer::AllNotesOff
// Il2CppName: AllNotesOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InternalSynthesizer::*)()>(&VROSC::InternalSynthesizer::AllNotesOff)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InternalSynthesizer*), "AllNotesOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InternalSynthesizer::AllNotesOff
// Il2CppName: AllNotesOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InternalSynthesizer::*)(::Il2CppObject*)>(&VROSC::InternalSynthesizer::AllNotesOff)> {
  static const MethodInfo* get() {
    static auto* patch = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InternalSynthesizer*), "AllNotesOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{patch});
  }
};
// Writing MetadataGetter for method: VROSC::InternalSynthesizer::SetPatchToMicrophone
// Il2CppName: SetPatchToMicrophone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InternalSynthesizer::*)()>(&VROSC::InternalSynthesizer::SetPatchToMicrophone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InternalSynthesizer*), "SetPatchToMicrophone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InternalSynthesizer::SetBPM
// Il2CppName: SetBPM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InternalSynthesizer::*)(float, bool)>(&VROSC::InternalSynthesizer::SetBPM)> {
  static const MethodInfo* get() {
    static auto* bpm = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* reset = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InternalSynthesizer*), "SetBPM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bpm, reset});
  }
};
// Writing MetadataGetter for method: VROSC::InternalSynthesizer::GetHelmOrSamplerWrapper
// Il2CppName: GetHelmOrSamplerWrapper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::AudioHelmInstrumentWrapper* (VROSC::InternalSynthesizer::*)(::VROSC::PatchSettings*, ::VROSC::HandType)>(&VROSC::InternalSynthesizer::GetHelmOrSamplerWrapper)> {
  static const MethodInfo* get() {
    static auto* patchSettings = &::il2cpp_utils::GetClassFromName("VROSC", "PatchSettings")->byval_arg;
    static auto* handType = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InternalSynthesizer*), "GetHelmOrSamplerWrapper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{patchSettings, handType});
  }
};
// Writing MetadataGetter for method: VROSC::InternalSynthesizer::GetCurrentInstrumentName
// Il2CppName: GetCurrentInstrumentName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::InternalSynthesizer::*)()>(&VROSC::InternalSynthesizer::GetCurrentInstrumentName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InternalSynthesizer*), "GetCurrentInstrumentName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InternalSynthesizer::GetCurrentPatchName
// Il2CppName: GetCurrentPatchName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::InternalSynthesizer::*)()>(&VROSC::InternalSynthesizer::GetCurrentPatchName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InternalSynthesizer*), "GetCurrentPatchName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InternalSynthesizer::GetCurrentSoundSource
// Il2CppName: GetCurrentSoundSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::SoundSource (VROSC::InternalSynthesizer::*)()>(&VROSC::InternalSynthesizer::GetCurrentSoundSource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InternalSynthesizer*), "GetCurrentSoundSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InternalSynthesizer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
