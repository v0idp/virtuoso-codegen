// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.LoopStationRecorder
#include "VROSC/LoopStationRecorder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: MicrophoneEffectsManager
  class MicrophoneEffectsManager;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Forward declaring namespace: NatSuite::Devices
namespace NatSuite::Devices {
  // Forward declaring type: AudioDevice
  class AudioDevice;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: MicrophoneDeviceManager
  class MicrophoneDeviceManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::MicrophoneDeviceManager);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::MicrophoneDeviceManager*, "VROSC", "MicrophoneDeviceManager");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x74
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.MicrophoneDeviceManager
  // [TokenAttribute] Offset: FFFFFFFF
  class MicrophoneDeviceManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::MicrophoneDeviceManager::$Setup$d__41
    struct $Setup$d__41;
    // Nested type: ::VROSC::MicrophoneDeviceManager::$InitializeNativeMicrophone$d__42
    struct $InitializeNativeMicrophone$d__42;
    // Nested type: ::VROSC::MicrophoneDeviceManager::$InitiateInputAfterBufferReceived$d__51
    struct $InitiateInputAfterBufferReceived$d__51;
    public:
    // private UnityEngine.AudioSource _audioSource
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private VROSC.MicrophoneEffectsManager _microphoneEffectsManager
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::MicrophoneEffectsManager* microphoneEffectsManager;
    // Field size check
    static_assert(sizeof(::VROSC::MicrophoneEffectsManager*) == 0x8);
    // private System.Int32 _nativeMicrophoneBufferSize
    // Size: 0x4
    // Offset: 0x28
    int nativeMicrophoneBufferSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: nativeMicrophoneBufferSize and: microphoneDevice
    char __padding2[0x4] = {};
    // private NatSuite.Devices.AudioDevice _microphoneDevice
    // Size: 0x8
    // Offset: 0x30
    ::NatSuite::Devices::AudioDevice* microphoneDevice;
    // Field size check
    static_assert(sizeof(::NatSuite::Devices::AudioDevice*) == 0x8);
    // private System.Single[] _ringBuffer
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<float> ringBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Int32 _ringBufferWriteIndex
    // Size: 0x4
    // Offset: 0x40
    int ringBufferWriteIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _ringBufferReadIndex
    // Size: 0x4
    // Offset: 0x44
    int ringBufferReadIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _takingInput
    // Size: 0x1
    // Offset: 0x48
    bool takingInput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _microphoneEnabled
    // Size: 0x1
    // Offset: 0x49
    bool microphoneEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _microphoneTakingInput
    // Size: 0x1
    // Offset: 0x4A
    bool microphoneTakingInput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _useProximity
    // Size: 0x1
    // Offset: 0x4B
    bool useProximity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single _microphoneProximity
    // Size: 0x4
    // Offset: 0x4C
    float microphoneProximity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <StopFadeTime>k__BackingField
    // Size: 0x4
    // Offset: 0x50
    float StopFadeTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <IsInitialized>k__BackingField
    // Size: 0x1
    // Offset: 0x54
    bool IsInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsInitialized and: preampVolume
    char __padding13[0x3] = {};
    // private System.Single _preampVolume
    // Size: 0x4
    // Offset: 0x58
    float preampVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _peakDisplayDuration
    // Size: 0x4
    // Offset: 0x5C
    float peakDisplayDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _peakValue
    // Size: 0x4
    // Offset: 0x60
    float peakValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _peakTimer
    // Size: 0x4
    // Offset: 0x64
    float peakTimer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _isInPeak
    // Size: 0x1
    // Offset: 0x68
    bool isInPeak;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isInPeak and: writeAheadBuffers
    char __padding18[0x3] = {};
    // private System.Int32 _writeAheadBuffers
    // Size: 0x4
    // Offset: 0x6C
    int writeAheadBuffers;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _receivedBuffers
    // Size: 0x4
    // Offset: 0x70
    int receivedBuffers;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private System.Double <Latency>k__BackingField
    static double _get_$Latency$k__BackingField();
    // Set static field: static private System.Double <Latency>k__BackingField
    static void _set_$Latency$k__BackingField(double value);
    // Get static field: static private System.Boolean <HasWorkingMicrophone>k__BackingField
    static bool _get_$HasWorkingMicrophone$k__BackingField();
    // Set static field: static private System.Boolean <HasWorkingMicrophone>k__BackingField
    static void _set_$HasWorkingMicrophone$k__BackingField(bool value);
    // Get static field: static public System.Action OnPeakReach
    static ::System::Action* _get_OnPeakReach();
    // Set static field: static public System.Action OnPeakReach
    static void _set_OnPeakReach(::System::Action* value);
    // Get static field: static public System.Action OnPeakLeft
    static ::System::Action* _get_OnPeakLeft();
    // Set static field: static public System.Action OnPeakLeft
    static void _set_OnPeakLeft(::System::Action* value);
    // Get static field: static public System.Action`1<System.Single> OnInputMeasurementChanged
    static ::System::Action_1<float>* _get_OnInputMeasurementChanged();
    // Set static field: static public System.Action`1<System.Single> OnInputMeasurementChanged
    static void _set_OnInputMeasurementChanged(::System::Action_1<float>* value);
    // Get static field: static public System.Action OnSignal
    static ::System::Action* _get_OnSignal();
    // Set static field: static public System.Action OnSignal
    static void _set_OnSignal(::System::Action* value);
    // Get instance field reference: private UnityEngine.AudioSource _audioSource
    [[deprecated]] ::UnityEngine::AudioSource*& dyn__audioSource();
    // Get instance field reference: private VROSC.MicrophoneEffectsManager _microphoneEffectsManager
    [[deprecated]] ::VROSC::MicrophoneEffectsManager*& dyn__microphoneEffectsManager();
    // Get instance field reference: private System.Int32 _nativeMicrophoneBufferSize
    [[deprecated]] int& dyn__nativeMicrophoneBufferSize();
    // Get instance field reference: private NatSuite.Devices.AudioDevice _microphoneDevice
    [[deprecated]] ::NatSuite::Devices::AudioDevice*& dyn__microphoneDevice();
    // Get instance field reference: private System.Single[] _ringBuffer
    [[deprecated]] ::ArrayW<float>& dyn__ringBuffer();
    // Get instance field reference: private System.Int32 _ringBufferWriteIndex
    [[deprecated]] int& dyn__ringBufferWriteIndex();
    // Get instance field reference: private System.Int32 _ringBufferReadIndex
    [[deprecated]] int& dyn__ringBufferReadIndex();
    // Get instance field reference: private System.Boolean _takingInput
    [[deprecated]] bool& dyn__takingInput();
    // Get instance field reference: private System.Boolean _microphoneEnabled
    [[deprecated]] bool& dyn__microphoneEnabled();
    // Get instance field reference: private System.Boolean _microphoneTakingInput
    [[deprecated]] bool& dyn__microphoneTakingInput();
    // Get instance field reference: private System.Boolean _useProximity
    [[deprecated]] bool& dyn__useProximity();
    // Get instance field reference: private System.Single _microphoneProximity
    [[deprecated]] float& dyn__microphoneProximity();
    // Get instance field reference: private System.Single <StopFadeTime>k__BackingField
    [[deprecated]] float& dyn_$StopFadeTime$k__BackingField();
    // Get instance field reference: private System.Boolean <IsInitialized>k__BackingField
    [[deprecated]] bool& dyn_$IsInitialized$k__BackingField();
    // Get instance field reference: private System.Single _preampVolume
    [[deprecated]] float& dyn__preampVolume();
    // Get instance field reference: private System.Single _peakDisplayDuration
    [[deprecated]] float& dyn__peakDisplayDuration();
    // Get instance field reference: private System.Single _peakValue
    [[deprecated]] float& dyn__peakValue();
    // Get instance field reference: private System.Single _peakTimer
    [[deprecated]] float& dyn__peakTimer();
    // Get instance field reference: private System.Boolean _isInPeak
    [[deprecated]] bool& dyn__isInPeak();
    // Get instance field reference: private System.Int32 _writeAheadBuffers
    [[deprecated]] int& dyn__writeAheadBuffers();
    // Get instance field reference: private System.Int32 _receivedBuffers
    [[deprecated]] int& dyn__receivedBuffers();
    // public NatSuite.Devices.AudioDevice get_MicrophoneDevice()
    // Offset: 0xAC63C8
    ::NatSuite::Devices::AudioDevice* get_MicrophoneDevice();
    // static public System.Double get_Latency()
    // Offset: 0xAC63D0
    static double get_Latency();
    // static private System.Void set_Latency(System.Double value)
    // Offset: 0xAC6434
    static void set_Latency(double value);
    // public System.Single get_StopFadeTime()
    // Offset: 0xAC64A4
    float get_StopFadeTime();
    // private System.Void set_StopFadeTime(System.Single value)
    // Offset: 0xAC64AC
    void set_StopFadeTime(float value);
    // public System.Boolean get_IsInitialized()
    // Offset: 0xAC64B4
    bool get_IsInitialized();
    // private System.Void set_IsInitialized(System.Boolean value)
    // Offset: 0xAC64BC
    void set_IsInitialized(bool value);
    // static public System.Boolean get_HasWorkingMicrophone()
    // Offset: 0xAC64C8
    static bool get_HasWorkingMicrophone();
    // static private System.Void set_HasWorkingMicrophone(System.Boolean value)
    // Offset: 0xAC652C
    static void set_HasWorkingMicrophone(bool value);
    // public System.Void Setup()
    // Offset: 0xAC6598
    void Setup();
    // protected System.Threading.Tasks.Task InitializeNativeMicrophone()
    // Offset: 0xAC665C
    ::System::Threading::Tasks::Task* InitializeNativeMicrophone();
    // public System.Void SetMicrophoneDevice(NatSuite.Devices.AudioDevice device)
    // Offset: 0xAC485C
    void SetMicrophoneDevice(::NatSuite::Devices::AudioDevice* device);
    // protected System.Void Update()
    // Offset: 0xAC6760
    void Update();
    // public System.Void SetUseProximity(System.Boolean state)
    // Offset: 0xAC53D4
    void SetUseProximity(bool state);
    // public System.Void SetMicrophoneProximity(System.Single proximity)
    // Offset: 0xAC5984
    void SetMicrophoneProximity(float proximity);
    // public System.Void SetLatencyCompensation(System.Single latency)
    // Offset: 0xAC5130
    void SetLatencyCompensation(float latency);
    // public System.Void ResetLatency()
    // Offset: 0xAC52D8
    void ResetLatency();
    // public System.Void MicrophoneEnabled(System.Boolean enabled)
    // Offset: 0xAC5688
    void MicrophoneEnabled(bool enabled);
    // private System.Void LoopStationStateChanged(VROSC.LoopStationRecorder/VROSC.RecordingState state)
    // Offset: 0xAC6B38
    void LoopStationStateChanged(::VROSC::LoopStationRecorder::RecordingState state);
    // private System.Void InitiateInputAfterBufferReceived()
    // Offset: 0xAC6A74
    void InitiateInputAfterBufferReceived();
    // private System.Void InitiateInput()
    // Offset: 0xAC6BF0
    void InitiateInput();
    // public System.Void MicrophoneTakingInput(System.Boolean takingInput)
    // Offset: 0xAC5534
    void MicrophoneTakingInput(bool takingInput);
    // public System.Void ReceiveMicrophoneSamples(System.Single[] sampleBuffer, System.Int64 timestamp)
    // Offset: 0xAC6E70
    void ReceiveMicrophoneSamples(::ArrayW<float> sampleBuffer, int64_t timestamp);
    // private System.Void ResetReadIndex()
    // Offset: 0xAC6D24
    void ResetReadIndex();
    // public System.Void SetPreampVolume(System.Single volume)
    // Offset: 0xAC6FFC
    void SetPreampVolume(float volume);
    // public System.Void SetPreampReverb(System.Single reverb)
    // Offset: 0xAC5030
    void SetPreampReverb(float reverb);
    // public System.Void SetPreviewReverb(System.Boolean state)
    // Offset: 0xAC566C
    void SetPreviewReverb(bool state);
    // protected System.Void OnAudioFilterRead(System.Single[] data, System.Int32 channels)
    // Offset: 0xAC70DC
    void OnAudioFilterRead(::ArrayW<float> data, int channels);
    // public System.Void .ctor()
    // Offset: 0xAC7378
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MicrophoneDeviceManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MicrophoneDeviceManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MicrophoneDeviceManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xAC73EC
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // VROSC.MicrophoneDeviceManager
  #pragma pack(pop)
  static check_size<sizeof(MicrophoneDeviceManager), 112 + sizeof(int)> __VROSC_MicrophoneDeviceManagerSizeCheck;
  static_assert(sizeof(MicrophoneDeviceManager) == 0x74);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::get_MicrophoneDevice
// Il2CppName: get_MicrophoneDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::NatSuite::Devices::AudioDevice* (VROSC::MicrophoneDeviceManager::*)()>(&VROSC::MicrophoneDeviceManager::get_MicrophoneDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "get_MicrophoneDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::get_Latency
// Il2CppName: get_Latency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)()>(&VROSC::MicrophoneDeviceManager::get_Latency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "get_Latency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::set_Latency
// Il2CppName: set_Latency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(double)>(&VROSC::MicrophoneDeviceManager::set_Latency)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "set_Latency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::get_StopFadeTime
// Il2CppName: get_StopFadeTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::MicrophoneDeviceManager::*)()>(&VROSC::MicrophoneDeviceManager::get_StopFadeTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "get_StopFadeTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::set_StopFadeTime
// Il2CppName: set_StopFadeTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)(float)>(&VROSC::MicrophoneDeviceManager::set_StopFadeTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "set_StopFadeTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::get_IsInitialized
// Il2CppName: get_IsInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::MicrophoneDeviceManager::*)()>(&VROSC::MicrophoneDeviceManager::get_IsInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "get_IsInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::set_IsInitialized
// Il2CppName: set_IsInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)(bool)>(&VROSC::MicrophoneDeviceManager::set_IsInitialized)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "set_IsInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::get_HasWorkingMicrophone
// Il2CppName: get_HasWorkingMicrophone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&VROSC::MicrophoneDeviceManager::get_HasWorkingMicrophone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "get_HasWorkingMicrophone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::set_HasWorkingMicrophone
// Il2CppName: set_HasWorkingMicrophone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&VROSC::MicrophoneDeviceManager::set_HasWorkingMicrophone)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "set_HasWorkingMicrophone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)()>(&VROSC::MicrophoneDeviceManager::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::InitializeNativeMicrophone
// Il2CppName: InitializeNativeMicrophone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (VROSC::MicrophoneDeviceManager::*)()>(&VROSC::MicrophoneDeviceManager::InitializeNativeMicrophone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "InitializeNativeMicrophone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::SetMicrophoneDevice
// Il2CppName: SetMicrophoneDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)(::NatSuite::Devices::AudioDevice*)>(&VROSC::MicrophoneDeviceManager::SetMicrophoneDevice)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("NatSuite.Devices", "AudioDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "SetMicrophoneDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)()>(&VROSC::MicrophoneDeviceManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::SetUseProximity
// Il2CppName: SetUseProximity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)(bool)>(&VROSC::MicrophoneDeviceManager::SetUseProximity)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "SetUseProximity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::SetMicrophoneProximity
// Il2CppName: SetMicrophoneProximity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)(float)>(&VROSC::MicrophoneDeviceManager::SetMicrophoneProximity)> {
  static const MethodInfo* get() {
    static auto* proximity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "SetMicrophoneProximity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{proximity});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::SetLatencyCompensation
// Il2CppName: SetLatencyCompensation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)(float)>(&VROSC::MicrophoneDeviceManager::SetLatencyCompensation)> {
  static const MethodInfo* get() {
    static auto* latency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "SetLatencyCompensation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{latency});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::ResetLatency
// Il2CppName: ResetLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)()>(&VROSC::MicrophoneDeviceManager::ResetLatency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "ResetLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::MicrophoneEnabled
// Il2CppName: MicrophoneEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)(bool)>(&VROSC::MicrophoneDeviceManager::MicrophoneEnabled)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "MicrophoneEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::LoopStationStateChanged
// Il2CppName: LoopStationStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)(::VROSC::LoopStationRecorder::RecordingState)>(&VROSC::MicrophoneDeviceManager::LoopStationStateChanged)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStationRecorder/RecordingState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "LoopStationStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::InitiateInputAfterBufferReceived
// Il2CppName: InitiateInputAfterBufferReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)()>(&VROSC::MicrophoneDeviceManager::InitiateInputAfterBufferReceived)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "InitiateInputAfterBufferReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::InitiateInput
// Il2CppName: InitiateInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)()>(&VROSC::MicrophoneDeviceManager::InitiateInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "InitiateInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::MicrophoneTakingInput
// Il2CppName: MicrophoneTakingInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)(bool)>(&VROSC::MicrophoneDeviceManager::MicrophoneTakingInput)> {
  static const MethodInfo* get() {
    static auto* takingInput = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "MicrophoneTakingInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{takingInput});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::ReceiveMicrophoneSamples
// Il2CppName: ReceiveMicrophoneSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)(::ArrayW<float>, int64_t)>(&VROSC::MicrophoneDeviceManager::ReceiveMicrophoneSamples)> {
  static const MethodInfo* get() {
    static auto* sampleBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* timestamp = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "ReceiveMicrophoneSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sampleBuffer, timestamp});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::ResetReadIndex
// Il2CppName: ResetReadIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)()>(&VROSC::MicrophoneDeviceManager::ResetReadIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "ResetReadIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::SetPreampVolume
// Il2CppName: SetPreampVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)(float)>(&VROSC::MicrophoneDeviceManager::SetPreampVolume)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "SetPreampVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::SetPreampReverb
// Il2CppName: SetPreampReverb
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)(float)>(&VROSC::MicrophoneDeviceManager::SetPreampReverb)> {
  static const MethodInfo* get() {
    static auto* reverb = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "SetPreampReverb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reverb});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::SetPreviewReverb
// Il2CppName: SetPreviewReverb
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)(bool)>(&VROSC::MicrophoneDeviceManager::SetPreviewReverb)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "SetPreviewReverb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::OnAudioFilterRead
// Il2CppName: OnAudioFilterRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneDeviceManager::*)(::ArrayW<float>, int)>(&VROSC::MicrophoneDeviceManager::OnAudioFilterRead)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), "OnAudioFilterRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, channels});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::MicrophoneDeviceManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VROSC::MicrophoneDeviceManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneDeviceManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
