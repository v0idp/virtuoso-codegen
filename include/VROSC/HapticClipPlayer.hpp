// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.SignalNode
#include "VROSC/SignalNode.hpp"
// Including type: VROSC.HandType
#include "VROSC/HandType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: SignalControllerInfo
  class SignalControllerInfo;
  // Forward declaring type: Signal
  class Signal;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: HapticClipPlayer
  class HapticClipPlayer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::HapticClipPlayer);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::HapticClipPlayer*, "VROSC", "HapticClipPlayer");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.HapticClipPlayer
  // [TokenAttribute] Offset: FFFFFFFF
  class HapticClipPlayer : public ::VROSC::SignalNode {
    public:
    // Nested type: ::VROSC::HapticClipPlayer::HapticHand
    struct HapticHand;
    // Nested type: ::VROSC::HapticClipPlayer::$StartHaptics$d__11
    struct $StartHaptics$d__11;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: VROSC.HapticClipPlayer/VROSC.HapticHand
    // [TokenAttribute] Offset: FFFFFFFF
    struct HapticHand/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: HapticHand
      constexpr HapticHand(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public VROSC.HapticClipPlayer/VROSC.HapticHand SignalOrigin
      static constexpr const int SignalOrigin = 0;
      // Get static field: static public VROSC.HapticClipPlayer/VROSC.HapticHand SignalOrigin
      static ::VROSC::HapticClipPlayer::HapticHand _get_SignalOrigin();
      // Set static field: static public VROSC.HapticClipPlayer/VROSC.HapticHand SignalOrigin
      static void _set_SignalOrigin(::VROSC::HapticClipPlayer::HapticHand value);
      // static field const value: static public VROSC.HapticClipPlayer/VROSC.HapticHand Left
      static constexpr const int Left = 1;
      // Get static field: static public VROSC.HapticClipPlayer/VROSC.HapticHand Left
      static ::VROSC::HapticClipPlayer::HapticHand _get_Left();
      // Set static field: static public VROSC.HapticClipPlayer/VROSC.HapticHand Left
      static void _set_Left(::VROSC::HapticClipPlayer::HapticHand value);
      // static field const value: static public VROSC.HapticClipPlayer/VROSC.HapticHand Right
      static constexpr const int Right = 2;
      // Get static field: static public VROSC.HapticClipPlayer/VROSC.HapticHand Right
      static ::VROSC::HapticClipPlayer::HapticHand _get_Right();
      // Set static field: static public VROSC.HapticClipPlayer/VROSC.HapticHand Right
      static void _set_Right(::VROSC::HapticClipPlayer::HapticHand value);
      // static field const value: static public VROSC.HapticClipPlayer/VROSC.HapticHand Both
      static constexpr const int Both = 3;
      // Get static field: static public VROSC.HapticClipPlayer/VROSC.HapticHand Both
      static ::VROSC::HapticClipPlayer::HapticHand _get_Both();
      // Set static field: static public VROSC.HapticClipPlayer/VROSC.HapticHand Both
      static void _set_Both(::VROSC::HapticClipPlayer::HapticHand value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated]] int& dyn_value__();
    }; // VROSC.HapticClipPlayer/VROSC.HapticHand
    #pragma pack(pop)
    static check_size<sizeof(HapticClipPlayer::HapticHand), 0 + sizeof(int)> __VROSC_HapticClipPlayer_HapticHandSizeCheck;
    static_assert(sizeof(HapticClipPlayer::HapticHand) == 0x4);
    public:
    // [RangeAttribute] Offset: 0x786D94
    // private System.Single _amplitude
    // Size: 0x4
    // Offset: 0x40
    float amplitude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x786DD4
    // private System.Single _frequency
    // Size: 0x4
    // Offset: 0x44
    float frequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _decayTime
    // Size: 0x4
    // Offset: 0x48
    float decayTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: decayTime and: decayCurve
    char __padding2[0x4] = {};
    // private UnityEngine.AnimationCurve _decayCurve
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AnimationCurve* decayCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private VROSC.HapticClipPlayer/VROSC.HapticHand _playOnHand
    // Size: 0x4
    // Offset: 0x58
    ::VROSC::HapticClipPlayer::HapticHand playOnHand;
    // Field size check
    static_assert(sizeof(::VROSC::HapticClipPlayer::HapticHand) == 0x4);
    // private System.Single _decayCounter
    // Size: 0x4
    // Offset: 0x5C
    float decayCounter;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _lastSignalAmplitude
    // Size: 0x4
    // Offset: 0x60
    float lastSignalAmplitude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private VROSC.HandType _lastHand
    // Size: 0x4
    // Offset: 0x64
    ::VROSC::HandType lastHand;
    // Field size check
    static_assert(sizeof(::VROSC::HandType) == 0x4);
    public:
    // Get instance field reference: private System.Single _amplitude
    [[deprecated]] float& dyn__amplitude();
    // Get instance field reference: private System.Single _frequency
    [[deprecated]] float& dyn__frequency();
    // Get instance field reference: private System.Single _decayTime
    [[deprecated]] float& dyn__decayTime();
    // Get instance field reference: private UnityEngine.AnimationCurve _decayCurve
    [[deprecated]] ::UnityEngine::AnimationCurve*& dyn__decayCurve();
    // Get instance field reference: private VROSC.HapticClipPlayer/VROSC.HapticHand _playOnHand
    [[deprecated]] ::VROSC::HapticClipPlayer::HapticHand& dyn__playOnHand();
    // Get instance field reference: private System.Single _decayCounter
    [[deprecated]] float& dyn__decayCounter();
    // Get instance field reference: private System.Single _lastSignalAmplitude
    [[deprecated]] float& dyn__lastSignalAmplitude();
    // Get instance field reference: private VROSC.HandType _lastHand
    [[deprecated]] ::VROSC::HandType& dyn__lastHand();
    // private System.Void StartHaptics(System.Single signalAmplitude, VROSC.SignalControllerInfo signalControllerInfo, System.Double dspTime)
    // Offset: 0x19ABA08
    void StartHaptics(float signalAmplitude, ::VROSC::SignalControllerInfo* signalControllerInfo, double dspTime);
    // private System.Void GenerateHaptics(System.Single amplitude, System.Single frequency, VROSC.HandType hand)
    // Offset: 0x19ABB10
    void GenerateHaptics(float amplitude, float frequency, ::VROSC::HandType hand);
    // protected System.Void Update()
    // Offset: 0x19ABC00
    void Update();
    // public System.Void .ctor()
    // Offset: 0x19ABC80
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HapticClipPlayer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HapticClipPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HapticClipPlayer*, creationType>()));
    }
    // protected override System.Void NodeBegin(VROSC.Signal signal)
    // Offset: 0x19AB9E4
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeBegin(VROSC.Signal signal)
    void NodeBegin(::VROSC::Signal* signal);
    // protected override System.Void NodeStay(VROSC.Signal signal)
    // Offset: 0x19ABAEC
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeStay(VROSC.Signal signal)
    void NodeStay(::VROSC::Signal* signal);
  }; // VROSC.HapticClipPlayer
  #pragma pack(pop)
  static check_size<sizeof(HapticClipPlayer), 100 + sizeof(::VROSC::HandType)> __VROSC_HapticClipPlayerSizeCheck;
  static_assert(sizeof(HapticClipPlayer) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::HapticClipPlayer::HapticHand, "VROSC", "HapticClipPlayer/HapticHand");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::HapticClipPlayer::StartHaptics
// Il2CppName: StartHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HapticClipPlayer::*)(float, ::VROSC::SignalControllerInfo*, double)>(&VROSC::HapticClipPlayer::StartHaptics)> {
  static const MethodInfo* get() {
    static auto* signalAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* signalControllerInfo = &::il2cpp_utils::GetClassFromName("VROSC", "SignalControllerInfo")->byval_arg;
    static auto* dspTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HapticClipPlayer*), "StartHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signalAmplitude, signalControllerInfo, dspTime});
  }
};
// Writing MetadataGetter for method: VROSC::HapticClipPlayer::GenerateHaptics
// Il2CppName: GenerateHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HapticClipPlayer::*)(float, float, ::VROSC::HandType)>(&VROSC::HapticClipPlayer::GenerateHaptics)> {
  static const MethodInfo* get() {
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* hand = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HapticClipPlayer*), "GenerateHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{amplitude, frequency, hand});
  }
};
// Writing MetadataGetter for method: VROSC::HapticClipPlayer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HapticClipPlayer::*)()>(&VROSC::HapticClipPlayer::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::HapticClipPlayer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::HapticClipPlayer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::HapticClipPlayer::NodeBegin
// Il2CppName: NodeBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HapticClipPlayer::*)(::VROSC::Signal*)>(&VROSC::HapticClipPlayer::NodeBegin)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HapticClipPlayer*), "NodeBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::HapticClipPlayer::NodeStay
// Il2CppName: NodeStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HapticClipPlayer::*)(::VROSC::Signal*)>(&VROSC::HapticClipPlayer::NodeStay)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HapticClipPlayer*), "NodeStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
