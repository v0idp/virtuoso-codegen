// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: UIButton
  class UIButton;
  // Forward declaring type: TutorialBlinkingUIElement
  class TutorialBlinkingUIElement;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: StartMenu
  class StartMenu;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::StartMenu);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::StartMenu*, "VROSC", "StartMenu");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x81
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.StartMenu
  // [TokenAttribute] Offset: FFFFFFFF
  class StartMenu : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::StartMenu::$Recenter$d__18
    class $Recenter$d__18;
    public:
    // private UnityEngine.AnimationCurve _recenterCurve
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AnimationCurve* recenterCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.Transform _vrCameraTransform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* vrCameraTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single _recenterTime
    // Size: 0x4
    // Offset: 0x28
    float recenterTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _distanceTolerance
    // Size: 0x4
    // Offset: 0x2C
    float distanceTolerance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _angleTolereance
    // Size: 0x4
    // Offset: 0x30
    float angleTolereance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _targetPosition
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 targetPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _targetRotation
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Quaternion targetRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Coroutine _recenterCoroutine
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Coroutine* recenterCoroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private VROSC.UIButton _startTutorialButton
    // Size: 0x8
    // Offset: 0x58
    ::VROSC::UIButton* startTutorialButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.UIButton _startCreatingButton
    // Size: 0x8
    // Offset: 0x60
    ::VROSC::UIButton* startCreatingButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private UnityEngine.Transform _menuTransform
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* menuTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private VROSC.TutorialBlinkingUIElement _tutorialBlink
    // Size: 0x8
    // Offset: 0x70
    ::VROSC::TutorialBlinkingUIElement* tutorialBlink;
    // Field size check
    static_assert(sizeof(::VROSC::TutorialBlinkingUIElement*) == 0x8);
    // private VROSC.TutorialBlinkingUIElement _creatingBlink
    // Size: 0x8
    // Offset: 0x78
    ::VROSC::TutorialBlinkingUIElement* creatingBlink;
    // Field size check
    static_assert(sizeof(::VROSC::TutorialBlinkingUIElement*) == 0x8);
    // private System.Boolean _alwaysUpright
    // Size: 0x1
    // Offset: 0x80
    bool alwaysUpright;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public System.Action OnStartMenuClosed
    static ::System::Action* _get_OnStartMenuClosed();
    // Set static field: static public System.Action OnStartMenuClosed
    static void _set_OnStartMenuClosed(::System::Action* value);
    // Get instance field reference: private UnityEngine.AnimationCurve _recenterCurve
    [[deprecated]] ::UnityEngine::AnimationCurve*& dyn__recenterCurve();
    // Get instance field reference: private UnityEngine.Transform _vrCameraTransform
    [[deprecated]] ::UnityEngine::Transform*& dyn__vrCameraTransform();
    // Get instance field reference: private System.Single _recenterTime
    [[deprecated]] float& dyn__recenterTime();
    // Get instance field reference: private System.Single _distanceTolerance
    [[deprecated]] float& dyn__distanceTolerance();
    // Get instance field reference: private System.Single _angleTolereance
    [[deprecated]] float& dyn__angleTolereance();
    // Get instance field reference: private UnityEngine.Vector3 _targetPosition
    [[deprecated]] ::UnityEngine::Vector3& dyn__targetPosition();
    // Get instance field reference: private UnityEngine.Quaternion _targetRotation
    [[deprecated]] ::UnityEngine::Quaternion& dyn__targetRotation();
    // Get instance field reference: private UnityEngine.Coroutine _recenterCoroutine
    [[deprecated]] ::UnityEngine::Coroutine*& dyn__recenterCoroutine();
    // Get instance field reference: private VROSC.UIButton _startTutorialButton
    [[deprecated]] ::VROSC::UIButton*& dyn__startTutorialButton();
    // Get instance field reference: private VROSC.UIButton _startCreatingButton
    [[deprecated]] ::VROSC::UIButton*& dyn__startCreatingButton();
    // Get instance field reference: private UnityEngine.Transform _menuTransform
    [[deprecated]] ::UnityEngine::Transform*& dyn__menuTransform();
    // Get instance field reference: private VROSC.TutorialBlinkingUIElement _tutorialBlink
    [[deprecated]] ::VROSC::TutorialBlinkingUIElement*& dyn__tutorialBlink();
    // Get instance field reference: private VROSC.TutorialBlinkingUIElement _creatingBlink
    [[deprecated]] ::VROSC::TutorialBlinkingUIElement*& dyn__creatingBlink();
    // Get instance field reference: private System.Boolean _alwaysUpright
    [[deprecated]] bool& dyn__alwaysUpright();
    // public System.Void Setup()
    // Offset: 0x192F804
    void Setup();
    // private System.Void OnDestroy()
    // Offset: 0x192FAD8
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0x192FBFC
    void Update();
    // private System.Collections.IEnumerator Recenter()
    // Offset: 0x192FD24
    ::System::Collections::IEnumerator* Recenter();
    // private UnityEngine.Quaternion GetRotationWithoutZ(UnityEngine.Quaternion rotation)
    // Offset: 0x192FA6C
    ::UnityEngine::Quaternion GetRotationWithoutZ(::UnityEngine::Quaternion rotation);
    // private System.Void StartTutorialPressed()
    // Offset: 0x192FD90
    void StartTutorialPressed();
    // private System.Void StartCreatingPressed()
    // Offset: 0x192FEB4
    void StartCreatingPressed();
    // public System.Void .ctor()
    // Offset: 0x1930008
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StartMenu* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::StartMenu::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StartMenu*, creationType>()));
    }
  }; // VROSC.StartMenu
  #pragma pack(pop)
  static check_size<sizeof(StartMenu), 128 + sizeof(bool)> __VROSC_StartMenuSizeCheck;
  static_assert(sizeof(StartMenu) == 0x81);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::StartMenu::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::StartMenu::*)()>(&VROSC::StartMenu::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::StartMenu*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::StartMenu::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::StartMenu::*)()>(&VROSC::StartMenu::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::StartMenu*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::StartMenu::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::StartMenu::*)()>(&VROSC::StartMenu::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::StartMenu*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::StartMenu::Recenter
// Il2CppName: Recenter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (VROSC::StartMenu::*)()>(&VROSC::StartMenu::Recenter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::StartMenu*), "Recenter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::StartMenu::GetRotationWithoutZ
// Il2CppName: GetRotationWithoutZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (VROSC::StartMenu::*)(::UnityEngine::Quaternion)>(&VROSC::StartMenu::GetRotationWithoutZ)> {
  static const MethodInfo* get() {
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::StartMenu*), "GetRotationWithoutZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rotation});
  }
};
// Writing MetadataGetter for method: VROSC::StartMenu::StartTutorialPressed
// Il2CppName: StartTutorialPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::StartMenu::*)()>(&VROSC::StartMenu::StartTutorialPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::StartMenu*), "StartTutorialPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::StartMenu::StartCreatingPressed
// Il2CppName: StartCreatingPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::StartMenu::*)()>(&VROSC::StartMenu::StartCreatingPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::StartMenu*), "StartCreatingPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::StartMenu::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
