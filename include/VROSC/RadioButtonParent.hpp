// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.Node
#include "VROSC/Node.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: RadioButton
  class RadioButton;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: RadioButtonParent
  class RadioButtonParent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::RadioButtonParent);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::RadioButtonParent*, "VROSC", "RadioButtonParent");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.RadioButtonParent
  // [TokenAttribute] Offset: FFFFFFFF
  class RadioButtonParent : public ::VROSC::Node {
    public:
    public:
    // private System.Collections.Generic.List`1<VROSC.RadioButton> _radioButtons
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::VROSC::RadioButton*>* radioButtons;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::RadioButton*>*) == 0x8);
    // private System.Boolean _changedThisFrame
    // Size: 0x1
    // Offset: 0x20
    bool changedThisFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.RadioButton> _radioButtons
    [[deprecated]] ::System::Collections::Generic::List_1<::VROSC::RadioButton*>*& dyn__radioButtons();
    // Get instance field reference: private System.Boolean _changedThisFrame
    [[deprecated]] bool& dyn__changedThisFrame();
    // protected System.Void LateUpdate()
    // Offset: 0xB2DAEC
    void LateUpdate();
    // public System.Void RegisterButton(VROSC.RadioButton radioButton)
    // Offset: 0xB2D7F0
    void RegisterButton(::VROSC::RadioButton* radioButton);
    // public System.Void Trigger(VROSC.RadioButton radioButton)
    // Offset: 0xB2D8A0
    void Trigger(::VROSC::RadioButton* radioButton);
    // public System.Void .ctor()
    // Offset: 0xB2DAF4
    // Implemented from: VROSC.Node
    // Base method: System.Void Node::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RadioButtonParent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::RadioButtonParent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RadioButtonParent*, creationType>()));
    }
  }; // VROSC.RadioButtonParent
  #pragma pack(pop)
  static check_size<sizeof(RadioButtonParent), 32 + sizeof(bool)> __VROSC_RadioButtonParentSizeCheck;
  static_assert(sizeof(RadioButtonParent) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::RadioButtonParent::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::RadioButtonParent::*)()>(&VROSC::RadioButtonParent::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::RadioButtonParent*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::RadioButtonParent::RegisterButton
// Il2CppName: RegisterButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::RadioButtonParent::*)(::VROSC::RadioButton*)>(&VROSC::RadioButtonParent::RegisterButton)> {
  static const MethodInfo* get() {
    static auto* radioButton = &::il2cpp_utils::GetClassFromName("VROSC", "RadioButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::RadioButtonParent*), "RegisterButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{radioButton});
  }
};
// Writing MetadataGetter for method: VROSC::RadioButtonParent::Trigger
// Il2CppName: Trigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::RadioButtonParent::*)(::VROSC::RadioButton*)>(&VROSC::RadioButtonParent::Trigger)> {
  static const MethodInfo* get() {
    static auto* radioButton = &::il2cpp_utils::GetClassFromName("VROSC", "RadioButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::RadioButtonParent*), "Trigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{radioButton});
  }
};
// Writing MetadataGetter for method: VROSC::RadioButtonParent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
