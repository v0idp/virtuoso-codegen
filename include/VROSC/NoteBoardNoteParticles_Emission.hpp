// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.NoteBoardNoteParticles
#include "VROSC/NoteBoardNoteParticles.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::NoteBoardNoteParticles::Emission);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::NoteBoardNoteParticles::Emission*, "VROSC", "NoteBoardNoteParticles/Emission");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.NoteBoardNoteParticles/VROSC.Emission
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteBoardNoteParticles::Emission : public ::Il2CppObject {
    public:
    public:
    // private System.Single _rate
    // Size: 0x4
    // Offset: 0x10
    float rate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _size
    // Size: 0x4
    // Offset: 0x14
    float size;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _coolDown
    // Size: 0x4
    // Offset: 0x18
    float coolDown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: coolDown and: particleSystem
    char __padding2[0x4] = {};
    // private UnityEngine.ParticleSystem _particleSystem
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::ParticleSystem* particleSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.Transform _emitter
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* emitter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Get instance field reference: private System.Single _rate
    [[deprecated("Use field access instead!")]] float& dyn__rate();
    // Get instance field reference: private System.Single _size
    [[deprecated("Use field access instead!")]] float& dyn__size();
    // Get instance field reference: private System.Single _coolDown
    [[deprecated("Use field access instead!")]] float& dyn__coolDown();
    // Get instance field reference: private UnityEngine.ParticleSystem _particleSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn__particleSystem();
    // Get instance field reference: private UnityEngine.Transform _emitter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__emitter();
    // public System.Void .ctor(UnityEngine.ParticleSystem particleSystem, System.Single rate, System.Single size, UnityEngine.Transform emitter)
    // Offset: 0x19662D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteBoardNoteParticles::Emission* New_ctor(::UnityEngine::ParticleSystem* particleSystem, float rate, float size, ::UnityEngine::Transform* emitter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteParticles::Emission::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteBoardNoteParticles::Emission*, creationType>(particleSystem, rate, size, emitter)));
    }
    // public System.Void Update(System.Int32 multiplier, UnityEngine.Color color)
    // Offset: 0x1966320
    void Update(int multiplier, ::UnityEngine::Color color);
  }; // VROSC.NoteBoardNoteParticles/VROSC.Emission
  #pragma pack(pop)
  static check_size<sizeof(NoteBoardNoteParticles::Emission), 40 + sizeof(::UnityEngine::Transform*)> __VROSC_NoteBoardNoteParticles_EmissionSizeCheck;
  static_assert(sizeof(NoteBoardNoteParticles::Emission) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::NoteBoardNoteParticles::Emission::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::NoteBoardNoteParticles::Emission::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteBoardNoteParticles::Emission::*)(int, ::UnityEngine::Color)>(&VROSC::NoteBoardNoteParticles::Emission::Update)> {
  static const MethodInfo* get() {
    static auto* multiplier = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteBoardNoteParticles::Emission*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{multiplier, color});
  }
};
