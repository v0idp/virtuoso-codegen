// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ToneGenerator
  class ToneGenerator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ToneGenerator);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ToneGenerator*, "VROSC", "ToneGenerator");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ToneGenerator
  // [TokenAttribute] Offset: FFFFFFFF
  class ToneGenerator : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::ToneGenerator::GeneratedTone
    class GeneratedTone;
    public:
    // private System.Double _gain
    // Size: 0x8
    // Offset: 0x18
    double gain;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Int32 _sampleRate
    // Size: 0x4
    // Offset: 0x20
    int sampleRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: sampleRate and: tones
    char __padding1[0x4] = {};
    // private System.Collections.Generic.Dictionary`2<System.Int32,VROSC.ToneGenerator/VROSC.GeneratedTone> _tones
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<int, ::VROSC::ToneGenerator::GeneratedTone*>* tones;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::VROSC::ToneGenerator::GeneratedTone*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Double _gain
    [[deprecated]] double& dyn__gain();
    // Get instance field reference: private System.Int32 _sampleRate
    [[deprecated]] int& dyn__sampleRate();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,VROSC.ToneGenerator/VROSC.GeneratedTone> _tones
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<int, ::VROSC::ToneGenerator::GeneratedTone*>*& dyn__tones();
    // protected System.Void Update()
    // Offset: 0xA28208
    void Update();
    // protected System.Void OnAudioFilterRead(System.Single[] data, System.Int32 channels)
    // Offset: 0xA28230
    void OnAudioFilterRead(::ArrayW<float> data, int channels);
    // public System.Void PlayNote(System.Int32 midiNoteNumber)
    // Offset: 0xA28598
    void PlayNote(int midiNoteNumber);
    // public System.Void StopNote(System.Int32 midiNoteNumber)
    // Offset: 0xA2866C
    void StopNote(int midiNoteNumber);
    // static public System.Double GetFrequencyFromMidiNumber(System.Int32 midiNoteNumber)
    // Offset: 0xA2870C
    static double GetFrequencyFromMidiNumber(int midiNoteNumber);
    // public System.Void .ctor()
    // Offset: 0xA28748
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ToneGenerator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ToneGenerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ToneGenerator*, creationType>()));
    }
  }; // VROSC.ToneGenerator
  #pragma pack(pop)
  static check_size<sizeof(ToneGenerator), 40 + sizeof(::System::Collections::Generic::Dictionary_2<int, ::VROSC::ToneGenerator::GeneratedTone*>*)> __VROSC_ToneGeneratorSizeCheck;
  static_assert(sizeof(ToneGenerator) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ToneGenerator::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ToneGenerator::*)()>(&VROSC::ToneGenerator::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ToneGenerator*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ToneGenerator::OnAudioFilterRead
// Il2CppName: OnAudioFilterRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ToneGenerator::*)(::ArrayW<float>, int)>(&VROSC::ToneGenerator::OnAudioFilterRead)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ToneGenerator*), "OnAudioFilterRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, channels});
  }
};
// Writing MetadataGetter for method: VROSC::ToneGenerator::PlayNote
// Il2CppName: PlayNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ToneGenerator::*)(int)>(&VROSC::ToneGenerator::PlayNote)> {
  static const MethodInfo* get() {
    static auto* midiNoteNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ToneGenerator*), "PlayNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{midiNoteNumber});
  }
};
// Writing MetadataGetter for method: VROSC::ToneGenerator::StopNote
// Il2CppName: StopNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ToneGenerator::*)(int)>(&VROSC::ToneGenerator::StopNote)> {
  static const MethodInfo* get() {
    static auto* midiNoteNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ToneGenerator*), "StopNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{midiNoteNumber});
  }
};
// Writing MetadataGetter for method: VROSC::ToneGenerator::GetFrequencyFromMidiNumber
// Il2CppName: GetFrequencyFromMidiNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(int)>(&VROSC::ToneGenerator::GetFrequencyFromMidiNumber)> {
  static const MethodInfo* get() {
    static auto* midiNoteNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ToneGenerator*), "GetFrequencyFromMidiNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{midiNoteNumber});
  }
};
// Writing MetadataGetter for method: VROSC::ToneGenerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
