// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: ModularDrumsController
  class ModularDrumsController;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ModularDrumpads
  class ModularDrumpads;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ModularDrumpads);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ModularDrumpads*, "VROSC", "ModularDrumpads");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ModularDrumpads
  // [TokenAttribute] Offset: FFFFFFFF
  class ModularDrumpads : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::ModularDrumpads::SpawnerSample
    class SpawnerSample;
    public:
    // private VROSC.ModularDrumpads/VROSC.SpawnerSample[] _spawnersSamples
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::VROSC::ModularDrumpads::SpawnerSample*> spawnersSamples;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::ModularDrumpads::SpawnerSample*>) == 0x8);
    // private System.Boolean <IsSetup>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool IsSetup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.ModularDrumpads/VROSC.SpawnerSample[] _spawnersSamples
    [[deprecated]] ::ArrayW<::VROSC::ModularDrumpads::SpawnerSample*>& dyn__spawnersSamples();
    // Get instance field reference: private System.Boolean <IsSetup>k__BackingField
    [[deprecated]] bool& dyn_$IsSetup$k__BackingField();
    // public System.Int32 get_SpawnedPadsCount()
    // Offset: 0xACA230
    int get_SpawnedPadsCount();
    // public System.Boolean get_IsSetup()
    // Offset: 0xACA2C0
    bool get_IsSetup();
    // private System.Void set_IsSetup(System.Boolean value)
    // Offset: 0xACA2C8
    void set_IsSetup(bool value);
    // public System.Void Setup(VROSC.ModularDrumsController instrumentController)
    // Offset: 0xACA2D4
    void Setup(::VROSC::ModularDrumsController* instrumentController);
    // public System.Void RefreshSpawners(VROSC.ModularDrumsController instrumentController)
    // Offset: 0xACA370
    void RefreshSpawners(::VROSC::ModularDrumsController* instrumentController);
    // public System.Void DeleteAll()
    // Offset: 0xACA68C
    void DeleteAll();
    // System.Void SetActive(System.Boolean isActive)
    // Offset: 0xACA700
    void SetActive(bool isActive);
    // public System.Void .ctor()
    // Offset: 0xACA784
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ModularDrumpads* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ModularDrumpads::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ModularDrumpads*, creationType>()));
    }
  }; // VROSC.ModularDrumpads
  #pragma pack(pop)
  static check_size<sizeof(ModularDrumpads), 32 + sizeof(bool)> __VROSC_ModularDrumpadsSizeCheck;
  static_assert(sizeof(ModularDrumpads) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ModularDrumpads::get_SpawnedPadsCount
// Il2CppName: get_SpawnedPadsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::ModularDrumpads::*)()>(&VROSC::ModularDrumpads::get_SpawnedPadsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumpads*), "get_SpawnedPadsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumpads::get_IsSetup
// Il2CppName: get_IsSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::ModularDrumpads::*)()>(&VROSC::ModularDrumpads::get_IsSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumpads*), "get_IsSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumpads::set_IsSetup
// Il2CppName: set_IsSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumpads::*)(bool)>(&VROSC::ModularDrumpads::set_IsSetup)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumpads*), "set_IsSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumpads::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumpads::*)(::VROSC::ModularDrumsController*)>(&VROSC::ModularDrumpads::Setup)> {
  static const MethodInfo* get() {
    static auto* instrumentController = &::il2cpp_utils::GetClassFromName("VROSC", "ModularDrumsController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumpads*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instrumentController});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumpads::RefreshSpawners
// Il2CppName: RefreshSpawners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumpads::*)(::VROSC::ModularDrumsController*)>(&VROSC::ModularDrumpads::RefreshSpawners)> {
  static const MethodInfo* get() {
    static auto* instrumentController = &::il2cpp_utils::GetClassFromName("VROSC", "ModularDrumsController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumpads*), "RefreshSpawners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instrumentController});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumpads::DeleteAll
// Il2CppName: DeleteAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumpads::*)()>(&VROSC::ModularDrumpads::DeleteAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumpads*), "DeleteAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumpads::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumpads::*)(bool)>(&VROSC::ModularDrumpads::SetActive)> {
  static const MethodInfo* get() {
    static auto* isActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumpads*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isActive});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumpads::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
