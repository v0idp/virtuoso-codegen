// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.Node
#include "VROSC/Node.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: FloatNode
  class FloatNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::FloatNode);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::FloatNode*, "VROSC", "FloatNode");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.FloatNode
  // [TokenAttribute] Offset: FFFFFFFF
  class FloatNode : public ::VROSC::Node {
    public:
    public:
    // protected System.Single _minValue
    // Size: 0x4
    // Offset: 0x18
    float minValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single _maxValue
    // Size: 0x4
    // Offset: 0x1C
    float maxValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _value
    // Size: 0x4
    // Offset: 0x20
    float value;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: value and: OnValueChanged
    char __padding2[0x4] = {};
    // public System.Action`1<System.Single> OnValueChanged
    // Size: 0x8
    // Offset: 0x28
    ::System::Action_1<float>* OnValueChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<float>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: protected System.Single _minValue
    [[deprecated]] float& dyn__minValue();
    // Get instance field reference: protected System.Single _maxValue
    [[deprecated]] float& dyn__maxValue();
    // Get instance field reference: private System.Single _value
    [[deprecated]] float& dyn__value();
    // Get instance field reference: public System.Action`1<System.Single> OnValueChanged
    [[deprecated]] ::System::Action_1<float>*& dyn_OnValueChanged();
    // public System.Single get_MinValue()
    // Offset: 0x199F8E8
    float get_MinValue();
    // public System.Single get_MaxValue()
    // Offset: 0x199F8F0
    float get_MaxValue();
    // public System.Single get_Value()
    // Offset: 0x199F8F8
    float get_Value();
    // public System.Void set_Value(System.Single value)
    // Offset: 0x199F900
    void set_Value(float value);
    // protected System.Single SetValueInRange(System.Single value)
    // Offset: 0x199F90C
    float SetValueInRange(float value);
    // public System.Void .ctor()
    // Offset: 0x199F9A4
    // Implemented from: VROSC.Node
    // Base method: System.Void Node::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FloatNode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::FloatNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FloatNode*, creationType>()));
    }
  }; // VROSC.FloatNode
  #pragma pack(pop)
  static check_size<sizeof(FloatNode), 40 + sizeof(::System::Action_1<float>*)> __VROSC_FloatNodeSizeCheck;
  static_assert(sizeof(FloatNode) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::FloatNode::get_MinValue
// Il2CppName: get_MinValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::FloatNode::*)()>(&VROSC::FloatNode::get_MinValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::FloatNode*), "get_MinValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::FloatNode::get_MaxValue
// Il2CppName: get_MaxValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::FloatNode::*)()>(&VROSC::FloatNode::get_MaxValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::FloatNode*), "get_MaxValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::FloatNode::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::FloatNode::*)()>(&VROSC::FloatNode::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::FloatNode*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::FloatNode::set_Value
// Il2CppName: set_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::FloatNode::*)(float)>(&VROSC::FloatNode::set_Value)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FloatNode*), "set_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::FloatNode::SetValueInRange
// Il2CppName: SetValueInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::FloatNode::*)(float)>(&VROSC::FloatNode::SetValueInRange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::FloatNode*), "SetValueInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::FloatNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
