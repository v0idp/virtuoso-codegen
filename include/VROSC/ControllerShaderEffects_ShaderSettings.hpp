// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.ControllerShaderEffects
#include "VROSC/ControllerShaderEffects.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ControllerShaderEffects::ShaderSettings, "VROSC", "ControllerShaderEffects/ShaderSettings");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x70
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: VROSC.ControllerShaderEffects/VROSC.ShaderSettings
  // [TokenAttribute] Offset: FFFFFFFF
  struct ControllerShaderEffects::ShaderSettings/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly UnityEngine.Color <Trigger>k__BackingField
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::Color Trigger;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private readonly UnityEngine.Color <Grip>k__BackingField
    // Size: 0x10
    // Offset: 0x10
    ::UnityEngine::Color Grip;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private readonly UnityEngine.Color <Top>k__BackingField
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Color Top;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private readonly UnityEngine.Color <Bottom>k__BackingField
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color Bottom;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private readonly UnityEngine.Color <Menu>k__BackingField
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color Menu;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private readonly UnityEngine.Color <Stick>k__BackingField
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Color Stick;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private readonly UnityEngine.Color <Special>k__BackingField
    // Size: 0x10
    // Offset: 0x60
    ::UnityEngine::Color Special;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Creating value type constructor for type: ShaderSettings
    constexpr ShaderSettings(::UnityEngine::Color Trigger_ = {}, ::UnityEngine::Color Grip_ = {}, ::UnityEngine::Color Top_ = {}, ::UnityEngine::Color Bottom_ = {}, ::UnityEngine::Color Menu_ = {}, ::UnityEngine::Color Stick_ = {}, ::UnityEngine::Color Special_ = {}) noexcept : Trigger{Trigger_}, Grip{Grip_}, Top{Top_}, Bottom{Bottom_}, Menu{Menu_}, Stick{Stick_}, Special{Special_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly UnityEngine.Color <Trigger>k__BackingField
    [[deprecated]] ::UnityEngine::Color& dyn_$Trigger$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.Color <Grip>k__BackingField
    [[deprecated]] ::UnityEngine::Color& dyn_$Grip$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.Color <Top>k__BackingField
    [[deprecated]] ::UnityEngine::Color& dyn_$Top$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.Color <Bottom>k__BackingField
    [[deprecated]] ::UnityEngine::Color& dyn_$Bottom$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.Color <Menu>k__BackingField
    [[deprecated]] ::UnityEngine::Color& dyn_$Menu$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.Color <Stick>k__BackingField
    [[deprecated]] ::UnityEngine::Color& dyn_$Stick$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.Color <Special>k__BackingField
    [[deprecated]] ::UnityEngine::Color& dyn_$Special$k__BackingField();
    // public UnityEngine.Color get_Trigger()
    // Offset: 0x95DC38
    ::UnityEngine::Color get_Trigger();
    // public UnityEngine.Color get_Grip()
    // Offset: 0x95DC44
    ::UnityEngine::Color get_Grip();
    // public UnityEngine.Color get_Top()
    // Offset: 0x95DC50
    ::UnityEngine::Color get_Top();
    // public UnityEngine.Color get_Bottom()
    // Offset: 0x95DC5C
    ::UnityEngine::Color get_Bottom();
    // public UnityEngine.Color get_Menu()
    // Offset: 0x95DC68
    ::UnityEngine::Color get_Menu();
    // public UnityEngine.Color get_Stick()
    // Offset: 0x95DC74
    ::UnityEngine::Color get_Stick();
    // public UnityEngine.Color get_Special()
    // Offset: 0x95DC80
    ::UnityEngine::Color get_Special();
    // public System.Void .ctor(UnityEngine.Color trigger, UnityEngine.Color grip, UnityEngine.Color top, UnityEngine.Color bottom, UnityEngine.Color menu, UnityEngine.Color stick, UnityEngine.Color special)
    // Offset: 0x95DC8C
    // ABORTED: conflicts with another method.  ShaderSettings(::UnityEngine::Color trigger, ::UnityEngine::Color grip, ::UnityEngine::Color top, ::UnityEngine::Color bottom, ::UnityEngine::Color menu, ::UnityEngine::Color stick, ::UnityEngine::Color special);
  }; // VROSC.ControllerShaderEffects/VROSC.ShaderSettings
  #pragma pack(pop)
  static check_size<sizeof(ControllerShaderEffects::ShaderSettings), 96 + sizeof(::UnityEngine::Color)> __VROSC_ControllerShaderEffects_ShaderSettingsSizeCheck;
  static_assert(sizeof(ControllerShaderEffects::ShaderSettings) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ControllerShaderEffects::ShaderSettings::get_Trigger
// Il2CppName: get_Trigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::ControllerShaderEffects::ShaderSettings::*)()>(&VROSC::ControllerShaderEffects::ShaderSettings::get_Trigger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ControllerShaderEffects::ShaderSettings), "get_Trigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ControllerShaderEffects::ShaderSettings::get_Grip
// Il2CppName: get_Grip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::ControllerShaderEffects::ShaderSettings::*)()>(&VROSC::ControllerShaderEffects::ShaderSettings::get_Grip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ControllerShaderEffects::ShaderSettings), "get_Grip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ControllerShaderEffects::ShaderSettings::get_Top
// Il2CppName: get_Top
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::ControllerShaderEffects::ShaderSettings::*)()>(&VROSC::ControllerShaderEffects::ShaderSettings::get_Top)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ControllerShaderEffects::ShaderSettings), "get_Top", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ControllerShaderEffects::ShaderSettings::get_Bottom
// Il2CppName: get_Bottom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::ControllerShaderEffects::ShaderSettings::*)()>(&VROSC::ControllerShaderEffects::ShaderSettings::get_Bottom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ControllerShaderEffects::ShaderSettings), "get_Bottom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ControllerShaderEffects::ShaderSettings::get_Menu
// Il2CppName: get_Menu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::ControllerShaderEffects::ShaderSettings::*)()>(&VROSC::ControllerShaderEffects::ShaderSettings::get_Menu)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ControllerShaderEffects::ShaderSettings), "get_Menu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ControllerShaderEffects::ShaderSettings::get_Stick
// Il2CppName: get_Stick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::ControllerShaderEffects::ShaderSettings::*)()>(&VROSC::ControllerShaderEffects::ShaderSettings::get_Stick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ControllerShaderEffects::ShaderSettings), "get_Stick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ControllerShaderEffects::ShaderSettings::get_Special
// Il2CppName: get_Special
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::ControllerShaderEffects::ShaderSettings::*)()>(&VROSC::ControllerShaderEffects::ShaderSettings::get_Special)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ControllerShaderEffects::ShaderSettings), "get_Special", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ControllerShaderEffects::ShaderSettings::ShaderSettings
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
