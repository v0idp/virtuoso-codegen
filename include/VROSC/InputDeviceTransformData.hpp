// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: InputSettings
  class InputSettings;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: InputDeviceTransformData
  class InputDeviceTransformData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::InputDeviceTransformData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::InputDeviceTransformData*, "VROSC", "InputDeviceTransformData");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.InputDeviceTransformData
  // [TokenAttribute] Offset: FFFFFFFF
  class InputDeviceTransformData : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.Vector3 <LastPosition>k__BackingField
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 LastPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <Velocity>k__BackingField
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 Velocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <SmoothPosition>k__BackingField
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 SmoothPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _smoothingVelocity
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 smoothingVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private VROSC.InputDevice _inputDevice
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::InputDevice* inputDevice;
    // Field size check
    static_assert(sizeof(::VROSC::InputDevice*) == 0x8);
    // private VROSC.InputSettings _inputSettings
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::InputSettings* inputSettings;
    // Field size check
    static_assert(sizeof(::VROSC::InputSettings*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Vector3 <LastPosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$LastPosition$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <Velocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$Velocity$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <SmoothPosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$SmoothPosition$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 _smoothingVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__smoothingVelocity();
    // Get instance field reference: private VROSC.InputDevice _inputDevice
    [[deprecated("Use field access instead!")]] ::VROSC::InputDevice*& dyn__inputDevice();
    // Get instance field reference: private VROSC.InputSettings _inputSettings
    [[deprecated("Use field access instead!")]] ::VROSC::InputSettings*& dyn__inputSettings();
    // public UnityEngine.Vector3 get_LastPosition()
    // Offset: 0x19455C0
    ::UnityEngine::Vector3 get_LastPosition();
    // private System.Void set_LastPosition(UnityEngine.Vector3 value)
    // Offset: 0x19455B4
    void set_LastPosition(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_Velocity()
    // Offset: 0x19455D8
    ::UnityEngine::Vector3 get_Velocity();
    // private System.Void set_Velocity(UnityEngine.Vector3 value)
    // Offset: 0x19455CC
    void set_Velocity(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_SmoothPosition()
    // Offset: 0x19455F0
    ::UnityEngine::Vector3 get_SmoothPosition();
    // private System.Void set_SmoothPosition(UnityEngine.Vector3 value)
    // Offset: 0x19455E4
    void set_SmoothPosition(::UnityEngine::Vector3 value);
    // public System.Void .ctor(VROSC.InputDevice inputDevice, VROSC.InputSettings inputSettings)
    // Offset: 0x1943E2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputDeviceTransformData* New_ctor(::VROSC::InputDevice* inputDevice, ::VROSC::InputSettings* inputSettings) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::InputDeviceTransformData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputDeviceTransformData*, creationType>(inputDevice, inputSettings)));
    }
    // public System.Void UpdatePosition()
    // Offset: 0x19443E8
    void UpdatePosition();
    // public System.Void UpdateVelocity()
    // Offset: 0x1944234
    void UpdateVelocity();
  }; // VROSC.InputDeviceTransformData
  #pragma pack(pop)
  static check_size<sizeof(InputDeviceTransformData), 72 + sizeof(::VROSC::InputSettings*)> __VROSC_InputDeviceTransformDataSizeCheck;
  static_assert(sizeof(InputDeviceTransformData) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::InputDeviceTransformData::get_LastPosition
// Il2CppName: get_LastPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::InputDeviceTransformData::*)()>(&VROSC::InputDeviceTransformData::get_LastPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDeviceTransformData*), "get_LastPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDeviceTransformData::set_LastPosition
// Il2CppName: set_LastPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDeviceTransformData::*)(::UnityEngine::Vector3)>(&VROSC::InputDeviceTransformData::set_LastPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDeviceTransformData*), "set_LastPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDeviceTransformData::get_Velocity
// Il2CppName: get_Velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::InputDeviceTransformData::*)()>(&VROSC::InputDeviceTransformData::get_Velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDeviceTransformData*), "get_Velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDeviceTransformData::set_Velocity
// Il2CppName: set_Velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDeviceTransformData::*)(::UnityEngine::Vector3)>(&VROSC::InputDeviceTransformData::set_Velocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDeviceTransformData*), "set_Velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDeviceTransformData::get_SmoothPosition
// Il2CppName: get_SmoothPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::InputDeviceTransformData::*)()>(&VROSC::InputDeviceTransformData::get_SmoothPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDeviceTransformData*), "get_SmoothPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDeviceTransformData::set_SmoothPosition
// Il2CppName: set_SmoothPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDeviceTransformData::*)(::UnityEngine::Vector3)>(&VROSC::InputDeviceTransformData::set_SmoothPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDeviceTransformData*), "set_SmoothPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::InputDeviceTransformData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::InputDeviceTransformData::UpdatePosition
// Il2CppName: UpdatePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDeviceTransformData::*)()>(&VROSC::InputDeviceTransformData::UpdatePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDeviceTransformData*), "UpdatePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputDeviceTransformData::UpdateVelocity
// Il2CppName: UpdateVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InputDeviceTransformData::*)()>(&VROSC::InputDeviceTransformData::UpdateVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputDeviceTransformData*), "UpdateVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
