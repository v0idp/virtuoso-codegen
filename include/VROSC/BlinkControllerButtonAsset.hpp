// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.PlayableAsset
#include "UnityEngine/Playables/PlayableAsset.hpp"
// Including type: VROSC.HandType
#include "VROSC/HandType.hpp"
// Including type: VROSC.TriggerButton
#include "VROSC/TriggerButton.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: VROSC.BlinkControllerButtonBehaviour/VROSC.EventAction
#include "VROSC/BlinkControllerButtonBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Skipping declaration: BlinkControllerButtonBehaviour because it is already included!
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: PlayableGraph
  struct PlayableGraph;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: BlinkControllerButtonAsset
  class BlinkControllerButtonAsset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::BlinkControllerButtonAsset);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::BlinkControllerButtonAsset*, "VROSC", "BlinkControllerButtonAsset");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.BlinkControllerButtonAsset
  // [TokenAttribute] Offset: FFFFFFFF
  class BlinkControllerButtonAsset : public ::UnityEngine::Playables::PlayableAsset {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public VROSC.BlinkControllerButtonBehaviour settings
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::BlinkControllerButtonBehaviour* settings;
    // Field size check
    static_assert(sizeof(::VROSC::BlinkControllerButtonBehaviour*) == 0x8);
    // private VROSC.HandType _hand
    // Size: 0x4
    // Offset: 0x20
    ::VROSC::HandType hand;
    // Field size check
    static_assert(sizeof(::VROSC::HandType) == 0x4);
    // private VROSC.TriggerButton _button
    // Size: 0x4
    // Offset: 0x24
    ::VROSC::TriggerButton button;
    // Field size check
    static_assert(sizeof(::VROSC::TriggerButton) == 0x4);
    // private UnityEngine.Color _color
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single _fadeTime
    // Size: 0x4
    // Offset: 0x38
    float fadeTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private VROSC.BlinkControllerButtonBehaviour/VROSC.EventAction _onAssetStartAction
    // Size: 0x4
    // Offset: 0x3C
    ::VROSC::BlinkControllerButtonBehaviour::EventAction onAssetStartAction;
    // Field size check
    static_assert(sizeof(::VROSC::BlinkControllerButtonBehaviour::EventAction) == 0x4);
    // private VROSC.BlinkControllerButtonBehaviour/VROSC.EventAction _onAssetStopAction
    // Size: 0x4
    // Offset: 0x40
    ::VROSC::BlinkControllerButtonBehaviour::EventAction onAssetStopAction;
    // Field size check
    static_assert(sizeof(::VROSC::BlinkControllerButtonBehaviour::EventAction) == 0x4);
    // private VROSC.BlinkControllerButtonBehaviour/VROSC.EventAction _onTimelineStartAction
    // Size: 0x4
    // Offset: 0x44
    ::VROSC::BlinkControllerButtonBehaviour::EventAction onTimelineStartAction;
    // Field size check
    static_assert(sizeof(::VROSC::BlinkControllerButtonBehaviour::EventAction) == 0x4);
    // private VROSC.BlinkControllerButtonBehaviour/VROSC.EventAction _onTimelineStopAction
    // Size: 0x4
    // Offset: 0x48
    ::VROSC::BlinkControllerButtonBehaviour::EventAction onTimelineStopAction;
    // Field size check
    static_assert(sizeof(::VROSC::BlinkControllerButtonBehaviour::EventAction) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public VROSC.BlinkControllerButtonBehaviour settings
    ::VROSC::BlinkControllerButtonBehaviour*& dyn_settings();
    // Get instance field reference: private VROSC.HandType _hand
    ::VROSC::HandType& dyn__hand();
    // Get instance field reference: private VROSC.TriggerButton _button
    ::VROSC::TriggerButton& dyn__button();
    // Get instance field reference: private UnityEngine.Color _color
    ::UnityEngine::Color& dyn__color();
    // Get instance field reference: private System.Single _fadeTime
    float& dyn__fadeTime();
    // Get instance field reference: private VROSC.BlinkControllerButtonBehaviour/VROSC.EventAction _onAssetStartAction
    ::VROSC::BlinkControllerButtonBehaviour::EventAction& dyn__onAssetStartAction();
    // Get instance field reference: private VROSC.BlinkControllerButtonBehaviour/VROSC.EventAction _onAssetStopAction
    ::VROSC::BlinkControllerButtonBehaviour::EventAction& dyn__onAssetStopAction();
    // Get instance field reference: private VROSC.BlinkControllerButtonBehaviour/VROSC.EventAction _onTimelineStartAction
    ::VROSC::BlinkControllerButtonBehaviour::EventAction& dyn__onTimelineStartAction();
    // Get instance field reference: private VROSC.BlinkControllerButtonBehaviour/VROSC.EventAction _onTimelineStopAction
    ::VROSC::BlinkControllerButtonBehaviour::EventAction& dyn__onTimelineStopAction();
    // public System.Void .ctor()
    // Offset: 0x1323CB0
    // Implemented from: UnityEngine.Playables.PlayableAsset
    // Base method: System.Void PlayableAsset::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BlinkControllerButtonAsset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BlinkControllerButtonAsset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BlinkControllerButtonAsset*, creationType>()));
    }
    // public override UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject owner)
    // Offset: 0x1323B84
    // Implemented from: UnityEngine.Playables.PlayableAsset
    // Base method: UnityEngine.Playables.Playable PlayableAsset::CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject owner)
    ::UnityEngine::Playables::Playable CreatePlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* owner);
  }; // VROSC.BlinkControllerButtonAsset
  #pragma pack(pop)
  static check_size<sizeof(BlinkControllerButtonAsset), 72 + sizeof(::VROSC::BlinkControllerButtonBehaviour::EventAction)> __VROSC_BlinkControllerButtonAssetSizeCheck;
  static_assert(sizeof(BlinkControllerButtonAsset) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::BlinkControllerButtonAsset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::BlinkControllerButtonAsset::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Playables::Playable (VROSC::BlinkControllerButtonAsset::*)(::UnityEngine::Playables::PlayableGraph, ::UnityEngine::GameObject*)>(&VROSC::BlinkControllerButtonAsset::CreatePlayable)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->byval_arg;
    static auto* owner = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BlinkControllerButtonAsset*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, owner});
  }
};
