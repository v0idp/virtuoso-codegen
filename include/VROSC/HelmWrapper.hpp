// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.AudioHelmInstrumentWrapper
#include "VROSC/AudioHelmInstrumentWrapper.hpp"
// Including type: VROSC.HandType
#include "VROSC/HandType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: HelmController
  class HelmController;
  // Forward declaring type: HelmPatch
  class HelmPatch;
  // Forward declaring type: HelmPatchFormat
  class HelmPatchFormat;
  // Forward declaring type: Param
  struct Param;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: PatchSettings
  class PatchSettings;
  // Forward declaring type: InternalSynthesizer
  class InternalSynthesizer;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: HelmWrapper
  class HelmWrapper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::HelmWrapper);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::HelmWrapper*, "VROSC", "HelmWrapper");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.HelmWrapper
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 77E704
  // [RequireComponent] Offset: 77E704
  class HelmWrapper : public ::VROSC::AudioHelmInstrumentWrapper {
    public:
    public:
    // private AudioHelm.HelmController _helmController
    // Size: 0x8
    // Offset: 0x18
    ::AudioHelm::HelmController* helmController;
    // Field size check
    static_assert(sizeof(::AudioHelm::HelmController*) == 0x8);
    // private AudioHelm.HelmPatch _helmPatch
    // Size: 0x8
    // Offset: 0x20
    ::AudioHelm::HelmPatch* helmPatch;
    // Field size check
    static_assert(sizeof(::AudioHelm::HelmPatch*) == 0x8);
    // private VROSC.PatchSettings _patchSettings
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::PatchSettings* patchSettings;
    // Field size check
    static_assert(sizeof(::VROSC::PatchSettings*) == 0x8);
    // private VROSC.HandType <AssignedHand>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    ::VROSC::HandType AssignedHand;
    // Field size check
    static_assert(sizeof(::VROSC::HandType) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private AudioHelm.HelmController _helmController
    [[deprecated("Use field access instead!")]] ::AudioHelm::HelmController*& dyn__helmController();
    // Get instance field reference: private AudioHelm.HelmPatch _helmPatch
    [[deprecated("Use field access instead!")]] ::AudioHelm::HelmPatch*& dyn__helmPatch();
    // Get instance field reference: private VROSC.PatchSettings _patchSettings
    [[deprecated("Use field access instead!")]] ::VROSC::PatchSettings*& dyn__patchSettings();
    // Get instance field reference: private VROSC.HandType <AssignedHand>k__BackingField
    [[deprecated("Use field access instead!")]] ::VROSC::HandType& dyn_$AssignedHand$k__BackingField();
    // public AudioHelm.HelmPatchFormat get_CurrentPatch()
    // Offset: 0x19407E8
    ::AudioHelm::HelmPatchFormat* get_CurrentPatch();
    // public VROSC.HandType get_AssignedHand()
    // Offset: 0x1940804
    ::VROSC::HandType get_AssignedHand();
    // public System.Void set_AssignedHand(VROSC.HandType value)
    // Offset: 0x194080C
    void set_AssignedHand(::VROSC::HandType value);
    // public System.Void LoadPatch(VROSC.PatchSettings patchSettings)
    // Offset: 0x194088C
    void LoadPatch(::VROSC::PatchSettings* patchSettings);
    // private System.Void ApplyGlobalOverloadSettings()
    // Offset: 0x19408EC
    void ApplyGlobalOverloadSettings();
    // public System.Void SetParameterValue(AudioHelm.Param parameter, System.Single newValue)
    // Offset: 0x194095C
    void SetParameterValue(::AudioHelm::Param parameter, float newValue);
    // public System.Void SetParameterPercent(AudioHelm.Param parameter, System.Single newValue)
    // Offset: 0x194097C
    void SetParameterPercent(::AudioHelm::Param parameter, float newValue);
    // public System.Boolean IsPlaying()
    // Offset: 0x1940A34
    bool IsPlaying();
    // public System.Boolean UsesPatch(VROSC.PatchSettings patchSettings)
    // Offset: 0x1940A9C
    bool UsesPatch(::VROSC::PatchSettings* patchSettings);
    // public System.Void .ctor()
    // Offset: 0x1940AB8
    // Implemented from: VROSC.AudioHelmInstrumentWrapper
    // Base method: System.Void AudioHelmInstrumentWrapper::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HelmWrapper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HelmWrapper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HelmWrapper*, creationType>()));
    }
    // public override System.Void Setup(VROSC.InternalSynthesizer internalSynthesizer)
    // Offset: 0x1940814
    // Implemented from: VROSC.AudioHelmInstrumentWrapper
    // Base method: System.Void AudioHelmInstrumentWrapper::Setup(VROSC.InternalSynthesizer internalSynthesizer)
    void Setup(::VROSC::InternalSynthesizer* internalSynthesizer);
    // public override System.Void AllNotesOff()
    // Offset: 0x19409BC
    // Implemented from: VROSC.AudioHelmInstrumentWrapper
    // Base method: System.Void AudioHelmInstrumentWrapper::AllNotesOff()
    void AllNotesOff();
    // public override System.Void NoteOff(System.Int32 note)
    // Offset: 0x19409D4
    // Implemented from: VROSC.AudioHelmInstrumentWrapper
    // Base method: System.Void AudioHelmInstrumentWrapper::NoteOff(System.Int32 note)
    void NoteOff(int note);
    // public override System.Void NoteOn(System.Int32 note, System.Single velocity, System.Double predictedDspTime, System.Single pitch)
    // Offset: 0x19409EC
    // Implemented from: VROSC.AudioHelmInstrumentWrapper
    // Base method: System.Void AudioHelmInstrumentWrapper::NoteOn(System.Int32 note, System.Single velocity, System.Double predictedDspTime, System.Single pitch)
    void NoteOn(int note, float velocity, double predictedDspTime, float pitch);
    // public override System.Void SetMidiCC(System.Single midiCCValue, System.Int32 midiCC)
    // Offset: 0x1940A04
    // Implemented from: VROSC.AudioHelmInstrumentWrapper
    // Base method: System.Void AudioHelmInstrumentWrapper::SetMidiCC(System.Single midiCCValue, System.Int32 midiCC)
    void SetMidiCC(float midiCCValue, int midiCC);
    // public override System.Void SetPitchBend(System.Single pitchBendValue)
    // Offset: 0x1940A08
    // Implemented from: VROSC.AudioHelmInstrumentWrapper
    // Base method: System.Void AudioHelmInstrumentWrapper::SetPitchBend(System.Single pitchBendValue)
    void SetPitchBend(float pitchBendValue);
  }; // VROSC.HelmWrapper
  #pragma pack(pop)
  static check_size<sizeof(HelmWrapper), 48 + sizeof(::VROSC::HandType)> __VROSC_HelmWrapperSizeCheck;
  static_assert(sizeof(HelmWrapper) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::HelmWrapper::get_CurrentPatch
// Il2CppName: get_CurrentPatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AudioHelm::HelmPatchFormat* (VROSC::HelmWrapper::*)()>(&VROSC::HelmWrapper::get_CurrentPatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::HelmWrapper*), "get_CurrentPatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::HelmWrapper::get_AssignedHand
// Il2CppName: get_AssignedHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::HandType (VROSC::HelmWrapper::*)()>(&VROSC::HelmWrapper::get_AssignedHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::HelmWrapper*), "get_AssignedHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::HelmWrapper::set_AssignedHand
// Il2CppName: set_AssignedHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HelmWrapper::*)(::VROSC::HandType)>(&VROSC::HelmWrapper::set_AssignedHand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HelmWrapper*), "set_AssignedHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::HelmWrapper::LoadPatch
// Il2CppName: LoadPatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HelmWrapper::*)(::VROSC::PatchSettings*)>(&VROSC::HelmWrapper::LoadPatch)> {
  static const MethodInfo* get() {
    static auto* patchSettings = &::il2cpp_utils::GetClassFromName("VROSC", "PatchSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HelmWrapper*), "LoadPatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{patchSettings});
  }
};
// Writing MetadataGetter for method: VROSC::HelmWrapper::ApplyGlobalOverloadSettings
// Il2CppName: ApplyGlobalOverloadSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HelmWrapper::*)()>(&VROSC::HelmWrapper::ApplyGlobalOverloadSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::HelmWrapper*), "ApplyGlobalOverloadSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::HelmWrapper::SetParameterValue
// Il2CppName: SetParameterValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HelmWrapper::*)(::AudioHelm::Param, float)>(&VROSC::HelmWrapper::SetParameterValue)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "Param")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HelmWrapper*), "SetParameterValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter, newValue});
  }
};
// Writing MetadataGetter for method: VROSC::HelmWrapper::SetParameterPercent
// Il2CppName: SetParameterPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HelmWrapper::*)(::AudioHelm::Param, float)>(&VROSC::HelmWrapper::SetParameterPercent)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "Param")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HelmWrapper*), "SetParameterPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter, newValue});
  }
};
// Writing MetadataGetter for method: VROSC::HelmWrapper::IsPlaying
// Il2CppName: IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::HelmWrapper::*)()>(&VROSC::HelmWrapper::IsPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::HelmWrapper*), "IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::HelmWrapper::UsesPatch
// Il2CppName: UsesPatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::HelmWrapper::*)(::VROSC::PatchSettings*)>(&VROSC::HelmWrapper::UsesPatch)> {
  static const MethodInfo* get() {
    static auto* patchSettings = &::il2cpp_utils::GetClassFromName("VROSC", "PatchSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HelmWrapper*), "UsesPatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{patchSettings});
  }
};
// Writing MetadataGetter for method: VROSC::HelmWrapper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::HelmWrapper::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HelmWrapper::*)(::VROSC::InternalSynthesizer*)>(&VROSC::HelmWrapper::Setup)> {
  static const MethodInfo* get() {
    static auto* internalSynthesizer = &::il2cpp_utils::GetClassFromName("VROSC", "InternalSynthesizer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HelmWrapper*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{internalSynthesizer});
  }
};
// Writing MetadataGetter for method: VROSC::HelmWrapper::AllNotesOff
// Il2CppName: AllNotesOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HelmWrapper::*)()>(&VROSC::HelmWrapper::AllNotesOff)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::HelmWrapper*), "AllNotesOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::HelmWrapper::NoteOff
// Il2CppName: NoteOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HelmWrapper::*)(int)>(&VROSC::HelmWrapper::NoteOff)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HelmWrapper*), "NoteOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note});
  }
};
// Writing MetadataGetter for method: VROSC::HelmWrapper::NoteOn
// Il2CppName: NoteOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HelmWrapper::*)(int, float, double, float)>(&VROSC::HelmWrapper::NoteOn)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* predictedDspTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HelmWrapper*), "NoteOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, velocity, predictedDspTime, pitch});
  }
};
// Writing MetadataGetter for method: VROSC::HelmWrapper::SetMidiCC
// Il2CppName: SetMidiCC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HelmWrapper::*)(float, int)>(&VROSC::HelmWrapper::SetMidiCC)> {
  static const MethodInfo* get() {
    static auto* midiCCValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* midiCC = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HelmWrapper*), "SetMidiCC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{midiCCValue, midiCC});
  }
};
// Writing MetadataGetter for method: VROSC::HelmWrapper::SetPitchBend
// Il2CppName: SetPitchBend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HelmWrapper::*)(float)>(&VROSC::HelmWrapper::SetPitchBend)> {
  static const MethodInfo* get() {
    static auto* pitchBendValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HelmWrapper*), "SetPitchBend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pitchBendValue});
  }
};
