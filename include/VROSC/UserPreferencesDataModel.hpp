// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.BaseDataModel
#include "VROSC/BaseDataModel.hpp"
// Including type: VROSC.Metronome/VROSC.Mode
#include "VROSC/Metronome.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: UserPreferencesDataModel
  class UserPreferencesDataModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UserPreferencesDataModel);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UserPreferencesDataModel*, "VROSC", "UserPreferencesDataModel");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UserPreferencesDataModel
  // [TokenAttribute] Offset: FFFFFFFF
  class UserPreferencesDataModel : public ::VROSC::BaseDataModel {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public System.Single GlobalVolume
    // Size: 0x4
    // Offset: 0x18
    float GlobalVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean PlayAudioWhenUnfocused
    // Size: 0x1
    // Offset: 0x1C
    bool PlayAudioWhenUnfocused;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: PlayAudioWhenUnfocused and: VideoPlayerVolume
    char __padding1[0x3] = {};
    // public System.Single VideoPlayerVolume
    // Size: 0x4
    // Offset: 0x20
    float VideoPlayerVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean UseClassicControls
    // Size: 0x1
    // Offset: 0x24
    bool UseClassicControls;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean AutoPlayPreviews
    // Size: 0x1
    // Offset: 0x25
    bool AutoPlayPreviews;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: AutoPlayPreviews and: PreviewsVolume
    char __padding4[0x2] = {};
    // public System.Single PreviewsVolume
    // Size: 0x4
    // Offset: 0x28
    float PreviewsVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean PreviewDrums
    // Size: 0x1
    // Offset: 0x2C
    bool PreviewDrums;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: PreviewDrums and: PreviewDrumsVolume
    char __padding6[0x3] = {};
    // public System.Single PreviewDrumsVolume
    // Size: 0x4
    // Offset: 0x30
    float PreviewDrumsVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single MalletAngle
    // Size: 0x4
    // Offset: 0x34
    float MalletAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single MalletLength
    // Size: 0x4
    // Offset: 0x38
    float MalletLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean LaserAutoDimWhenHoldingMallets
    // Size: 0x1
    // Offset: 0x3C
    bool LaserAutoDimWhenHoldingMallets;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: LaserAutoDimWhenHoldingMallets and: SelectedSpectatorCamera
    char __padding10[0x3] = {};
    // public System.Int32 SelectedSpectatorCamera
    // Size: 0x4
    // Offset: 0x40
    int SelectedSpectatorCamera;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean SpectatorHideBackground
    // Size: 0x1
    // Offset: 0x44
    bool SpectatorHideBackground;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean AllowExternalKeyboard
    // Size: 0x1
    // Offset: 0x45
    bool AllowExternalKeyboard;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean UseTouchForKeyboard
    // Size: 0x1
    // Offset: 0x46
    bool UseTouchForKeyboard;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean UsePointAndClickForKeyboard
    // Size: 0x1
    // Offset: 0x47
    bool UsePointAndClickForKeyboard;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean KeyboardPlaysClickSound
    // Size: 0x1
    // Offset: 0x48
    bool KeyboardPlaysClickSound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean Overdub
    // Size: 0x1
    // Offset: 0x49
    bool Overdub;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean SetRecordingLengthToFirstLoopLength
    // Size: 0x1
    // Offset: 0x4A
    bool SetRecordingLengthToFirstLoopLength;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: SetRecordingLengthToFirstLoopLength and: MetronomeMode
    char __padding18[0x1] = {};
    // public VROSC.Metronome/VROSC.Mode MetronomeMode
    // Size: 0x4
    // Offset: 0x4C
    ::VROSC::Metronome::Mode MetronomeMode;
    // Field size check
    static_assert(sizeof(::VROSC::Metronome::Mode) == 0x4);
    // public System.String SelectedEnvironment
    // Size: 0x8
    // Offset: 0x50
    ::StringW SelectedEnvironment;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single EnvironmentEffectsAmount
    // Size: 0x4
    // Offset: 0x58
    float EnvironmentEffectsAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single GlobalVolume
    float& dyn_GlobalVolume();
    // Get instance field reference: public System.Boolean PlayAudioWhenUnfocused
    bool& dyn_PlayAudioWhenUnfocused();
    // Get instance field reference: public System.Single VideoPlayerVolume
    float& dyn_VideoPlayerVolume();
    // Get instance field reference: public System.Boolean UseClassicControls
    bool& dyn_UseClassicControls();
    // Get instance field reference: public System.Boolean AutoPlayPreviews
    bool& dyn_AutoPlayPreviews();
    // Get instance field reference: public System.Single PreviewsVolume
    float& dyn_PreviewsVolume();
    // Get instance field reference: public System.Boolean PreviewDrums
    bool& dyn_PreviewDrums();
    // Get instance field reference: public System.Single PreviewDrumsVolume
    float& dyn_PreviewDrumsVolume();
    // Get instance field reference: public System.Single MalletAngle
    float& dyn_MalletAngle();
    // Get instance field reference: public System.Single MalletLength
    float& dyn_MalletLength();
    // Get instance field reference: public System.Boolean LaserAutoDimWhenHoldingMallets
    bool& dyn_LaserAutoDimWhenHoldingMallets();
    // Get instance field reference: public System.Int32 SelectedSpectatorCamera
    int& dyn_SelectedSpectatorCamera();
    // Get instance field reference: public System.Boolean SpectatorHideBackground
    bool& dyn_SpectatorHideBackground();
    // Get instance field reference: public System.Boolean AllowExternalKeyboard
    bool& dyn_AllowExternalKeyboard();
    // Get instance field reference: public System.Boolean UseTouchForKeyboard
    bool& dyn_UseTouchForKeyboard();
    // Get instance field reference: public System.Boolean UsePointAndClickForKeyboard
    bool& dyn_UsePointAndClickForKeyboard();
    // Get instance field reference: public System.Boolean KeyboardPlaysClickSound
    bool& dyn_KeyboardPlaysClickSound();
    // Get instance field reference: public System.Boolean Overdub
    bool& dyn_Overdub();
    // Get instance field reference: public System.Boolean SetRecordingLengthToFirstLoopLength
    bool& dyn_SetRecordingLengthToFirstLoopLength();
    // Get instance field reference: public VROSC.Metronome/VROSC.Mode MetronomeMode
    ::VROSC::Metronome::Mode& dyn_MetronomeMode();
    // Get instance field reference: public System.String SelectedEnvironment
    ::StringW& dyn_SelectedEnvironment();
    // Get instance field reference: public System.Single EnvironmentEffectsAmount
    float& dyn_EnvironmentEffectsAmount();
    // public override System.String get_Key()
    // Offset: 0x13AB21C
    // Implemented from: VROSC.BaseDataModel
    // Base method: System.String BaseDataModel::get_Key()
    ::StringW get_Key();
    // public override System.Int32 get_Version()
    // Offset: 0x13AB260
    // Implemented from: VROSC.BaseDataModel
    // Base method: System.Int32 BaseDataModel::get_Version()
    int get_Version();
    // public System.Void .ctor()
    // Offset: 0x13A98F4
    // Implemented from: VROSC.BaseDataModel
    // Base method: System.Void BaseDataModel::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UserPreferencesDataModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UserPreferencesDataModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UserPreferencesDataModel*, creationType>()));
    }
  }; // VROSC.UserPreferencesDataModel
  #pragma pack(pop)
  static check_size<sizeof(UserPreferencesDataModel), 88 + sizeof(float)> __VROSC_UserPreferencesDataModelSizeCheck;
  static_assert(sizeof(UserPreferencesDataModel) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UserPreferencesDataModel::get_Key
// Il2CppName: get_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::UserPreferencesDataModel::*)()>(&VROSC::UserPreferencesDataModel::get_Key)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UserPreferencesDataModel*), "get_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UserPreferencesDataModel::get_Version
// Il2CppName: get_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::UserPreferencesDataModel::*)()>(&VROSC::UserPreferencesDataModel::get_Version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UserPreferencesDataModel*), "get_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UserPreferencesDataModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
