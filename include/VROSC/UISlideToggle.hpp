// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.UIInteractable
#include "VROSC/UIInteractable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: AdjustableMesh
  class AdjustableMesh;
  // Forward declaring type: SimpleHaptic
  class SimpleHaptic;
  // Forward declaring type: ClickData
  class ClickData;
}
// Forward declaring namespace: VROSC::UI
namespace VROSC::UI {
  // Forward declaring type: UIColorGetter
  class UIColorGetter;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: UISlideToggle
  class UISlideToggle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UISlideToggle);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UISlideToggle*, "VROSC", "UISlideToggle");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xD1
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UISlideToggle
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class UISlideToggle : public ::VROSC::UIInteractable {
    public:
    public:
    // private System.Boolean <IsOn>k__BackingField
    // Size: 0x1
    // Offset: 0x88
    bool IsOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsOn and: OnToggle
    char __padding0[0x7] = {};
    // public System.Action`2<VROSC.InputDevice,System.Boolean> OnToggle
    // Size: 0x8
    // Offset: 0x90
    ::System::Action_2<::VROSC::InputDevice*, bool>* OnToggle;
    // Field size check
    static_assert(sizeof(::System::Action_2<::VROSC::InputDevice*, bool>*) == 0x8);
    // private System.Boolean _startInOnState
    // Size: 0x1
    // Offset: 0x98
    bool startInOnState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: startInOnState and: _base
    char __padding2[0x7] = {};
    // private VROSC.AdjustableMesh _base
    // Size: 0x8
    // Offset: 0xA0
    ::VROSC::AdjustableMesh* _base;
    // Field size check
    static_assert(sizeof(::VROSC::AdjustableMesh*) == 0x8);
    // protected VROSC.UI.UIColorGetter _baseColorOn
    // Size: 0x8
    // Offset: 0xA8
    ::VROSC::UI::UIColorGetter* baseColorOn;
    // Field size check
    static_assert(sizeof(::VROSC::UI::UIColorGetter*) == 0x8);
    // protected VROSC.UI.UIColorGetter _baseColorOff
    // Size: 0x8
    // Offset: 0xB0
    ::VROSC::UI::UIColorGetter* baseColorOff;
    // Field size check
    static_assert(sizeof(::VROSC::UI::UIColorGetter*) == 0x8);
    // protected VROSC.UI.UIColorGetter _knobColor
    // Size: 0x8
    // Offset: 0xB8
    ::VROSC::UI::UIColorGetter* knobColor;
    // Field size check
    static_assert(sizeof(::VROSC::UI::UIColorGetter*) == 0x8);
    // private VROSC.AdjustableMesh _knob
    // Size: 0x8
    // Offset: 0xC0
    ::VROSC::AdjustableMesh* knob;
    // Field size check
    static_assert(sizeof(::VROSC::AdjustableMesh*) == 0x8);
    // private VROSC.SimpleHaptic _hapticFeedBack
    // Size: 0x8
    // Offset: 0xC8
    ::VROSC::SimpleHaptic* hapticFeedBack;
    // Field size check
    static_assert(sizeof(::VROSC::SimpleHaptic*) == 0x8);
    // private System.Boolean _isSet
    // Size: 0x1
    // Offset: 0xD0
    bool isSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Boolean <IsOn>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsOn$k__BackingField();
    // Get instance field reference: public System.Action`2<VROSC.InputDevice,System.Boolean> OnToggle
    [[deprecated("Use field access instead!")]] ::System::Action_2<::VROSC::InputDevice*, bool>*& dyn_OnToggle();
    // Get instance field reference: private System.Boolean _startInOnState
    [[deprecated("Use field access instead!")]] bool& dyn__startInOnState();
    // Get instance field reference: private VROSC.AdjustableMesh _base
    [[deprecated("Use field access instead!")]] ::VROSC::AdjustableMesh*& dyn__base();
    // Get instance field reference: protected VROSC.UI.UIColorGetter _baseColorOn
    [[deprecated("Use field access instead!")]] ::VROSC::UI::UIColorGetter*& dyn__baseColorOn();
    // Get instance field reference: protected VROSC.UI.UIColorGetter _baseColorOff
    [[deprecated("Use field access instead!")]] ::VROSC::UI::UIColorGetter*& dyn__baseColorOff();
    // Get instance field reference: protected VROSC.UI.UIColorGetter _knobColor
    [[deprecated("Use field access instead!")]] ::VROSC::UI::UIColorGetter*& dyn__knobColor();
    // Get instance field reference: private VROSC.AdjustableMesh _knob
    [[deprecated("Use field access instead!")]] ::VROSC::AdjustableMesh*& dyn__knob();
    // Get instance field reference: private VROSC.SimpleHaptic _hapticFeedBack
    [[deprecated("Use field access instead!")]] ::VROSC::SimpleHaptic*& dyn__hapticFeedBack();
    // Get instance field reference: private System.Boolean _isSet
    [[deprecated("Use field access instead!")]] bool& dyn__isSet();
    // public System.Boolean get_IsOn()
    // Offset: 0x19155A8
    bool get_IsOn();
    // private System.Void set_IsOn(System.Boolean value)
    // Offset: 0x191559C
    void set_IsOn(bool value);
    // private System.Void OnEnable()
    // Offset: 0x19155B0
    void OnEnable();
    // private System.Void Awake()
    // Offset: 0x191587C
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x1915C0C
    void OnDestroy();
    // private System.Void ButtonWasPressed(VROSC.ClickData clickData)
    // Offset: 0x1915CCC
    void ButtonWasPressed(::VROSC::ClickData* clickData);
    // public System.Void SetToggled(System.Boolean shouldBeActive, System.Boolean alsoInvoke)
    // Offset: 0x1915A98
    void SetToggled(bool shouldBeActive, bool alsoInvoke);
    // private System.Void SetColor()
    // Offset: 0x1915D7C
    void SetColor();
    // private System.Void <Awake>b__17_0(System.Boolean disabled)
    // Offset: 0x1915F34
    void $Awake$b__17_0(bool disabled);
    // private System.Void <Awake>b__17_1(System.Boolean hovering)
    // Offset: 0x1915F38
    void $Awake$b__17_1(bool hovering);
    // private System.Void <Awake>b__17_2(System.Boolean interacting)
    // Offset: 0x1915F3C
    void $Awake$b__17_2(bool interacting);
    // public override System.Boolean get_InteractionStopsLaser()
    // Offset: 0x1915594
    // Implemented from: VROSC.UIInteractable
    // Base method: System.Boolean UIInteractable::get_InteractionStopsLaser()
    bool get_InteractionStopsLaser();
    // public System.Void .ctor()
    // Offset: 0x1915F2C
    // Implemented from: VROSC.UIInteractable
    // Base method: System.Void UIInteractable::.ctor()
    // Base method: System.Void Clickable::.ctor()
    // Base method: System.Void Interactable::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UISlideToggle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UISlideToggle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UISlideToggle*, creationType>()));
    }
    // protected override System.Void OnDisable()
    // Offset: 0x1915710
    // Implemented from: VROSC.Interactable
    // Base method: System.Void Interactable::OnDisable()
    void OnDisable();
  }; // VROSC.UISlideToggle
  #pragma pack(pop)
  static check_size<sizeof(UISlideToggle), 208 + sizeof(bool)> __VROSC_UISlideToggleSizeCheck;
  static_assert(sizeof(UISlideToggle) == 0xD1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UISlideToggle::get_IsOn
// Il2CppName: get_IsOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::UISlideToggle::*)()>(&VROSC::UISlideToggle::get_IsOn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISlideToggle*), "get_IsOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UISlideToggle::set_IsOn
// Il2CppName: set_IsOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UISlideToggle::*)(bool)>(&VROSC::UISlideToggle::set_IsOn)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISlideToggle*), "set_IsOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::UISlideToggle::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UISlideToggle::*)()>(&VROSC::UISlideToggle::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISlideToggle*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UISlideToggle::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UISlideToggle::*)()>(&VROSC::UISlideToggle::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISlideToggle*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UISlideToggle::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UISlideToggle::*)()>(&VROSC::UISlideToggle::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISlideToggle*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UISlideToggle::ButtonWasPressed
// Il2CppName: ButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UISlideToggle::*)(::VROSC::ClickData*)>(&VROSC::UISlideToggle::ButtonWasPressed)> {
  static const MethodInfo* get() {
    static auto* clickData = &::il2cpp_utils::GetClassFromName("VROSC", "ClickData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISlideToggle*), "ButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clickData});
  }
};
// Writing MetadataGetter for method: VROSC::UISlideToggle::SetToggled
// Il2CppName: SetToggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UISlideToggle::*)(bool, bool)>(&VROSC::UISlideToggle::SetToggled)> {
  static const MethodInfo* get() {
    static auto* shouldBeActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* alsoInvoke = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISlideToggle*), "SetToggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shouldBeActive, alsoInvoke});
  }
};
// Writing MetadataGetter for method: VROSC::UISlideToggle::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UISlideToggle::*)()>(&VROSC::UISlideToggle::SetColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISlideToggle*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UISlideToggle::$Awake$b__17_0
// Il2CppName: <Awake>b__17_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UISlideToggle::*)(bool)>(&VROSC::UISlideToggle::$Awake$b__17_0)> {
  static const MethodInfo* get() {
    static auto* disabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISlideToggle*), "<Awake>b__17_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disabled});
  }
};
// Writing MetadataGetter for method: VROSC::UISlideToggle::$Awake$b__17_1
// Il2CppName: <Awake>b__17_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UISlideToggle::*)(bool)>(&VROSC::UISlideToggle::$Awake$b__17_1)> {
  static const MethodInfo* get() {
    static auto* hovering = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISlideToggle*), "<Awake>b__17_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hovering});
  }
};
// Writing MetadataGetter for method: VROSC::UISlideToggle::$Awake$b__17_2
// Il2CppName: <Awake>b__17_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UISlideToggle::*)(bool)>(&VROSC::UISlideToggle::$Awake$b__17_2)> {
  static const MethodInfo* get() {
    static auto* interacting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISlideToggle*), "<Awake>b__17_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interacting});
  }
};
// Writing MetadataGetter for method: VROSC::UISlideToggle::get_InteractionStopsLaser
// Il2CppName: get_InteractionStopsLaser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::UISlideToggle::*)()>(&VROSC::UISlideToggle::get_InteractionStopsLaser)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISlideToggle*), "get_InteractionStopsLaser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UISlideToggle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::UISlideToggle::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UISlideToggle::*)()>(&VROSC::UISlideToggle::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISlideToggle*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
