// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.ControllerComponent
#include "VROSC/ControllerComponent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ControllerButton
  class ControllerButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ControllerButton);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ControllerButton*, "VROSC", "ControllerButton");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ControllerButton
  // [TokenAttribute] Offset: FFFFFFFF
  class ControllerButton : public ::VROSC::ControllerComponent {
    public:
    public:
    // private UnityEngine.Vector3 _pressedPostionOffset
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 pressedPostionOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _pressedRotaionOffset
    // Size: 0xC
    // Offset: 0x54
    ::UnityEngine::Vector3 pressedRotaionOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private VROSC.InputDevice _inputDevice
    // Size: 0x8
    // Offset: 0x60
    ::VROSC::InputDevice* inputDevice;
    // Field size check
    static_assert(sizeof(::VROSC::InputDevice*) == 0x8);
    // private System.Boolean _trigger
    // Size: 0x1
    // Offset: 0x68
    bool trigger;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _grip
    // Size: 0x1
    // Offset: 0x69
    bool grip;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: grip and: startPosition
    char __padding4[0x2] = {};
    // private UnityEngine.Vector3 _startPosition
    // Size: 0xC
    // Offset: 0x6C
    ::UnityEngine::Vector3 startPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _startRotation
    // Size: 0x10
    // Offset: 0x78
    ::UnityEngine::Quaternion startRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Get instance field reference: private UnityEngine.Vector3 _pressedPostionOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__pressedPostionOffset();
    // Get instance field reference: private UnityEngine.Vector3 _pressedRotaionOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__pressedRotaionOffset();
    // Get instance field reference: private VROSC.InputDevice _inputDevice
    [[deprecated("Use field access instead!")]] ::VROSC::InputDevice*& dyn__inputDevice();
    // Get instance field reference: private System.Boolean _trigger
    [[deprecated("Use field access instead!")]] bool& dyn__trigger();
    // Get instance field reference: private System.Boolean _grip
    [[deprecated("Use field access instead!")]] bool& dyn__grip();
    // Get instance field reference: private UnityEngine.Vector3 _startPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__startPosition();
    // Get instance field reference: private UnityEngine.Quaternion _startRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__startRotation();
    // private System.Void Awake()
    // Offset: 0x94D808
    void Awake();
    // private System.Void LateUpdate()
    // Offset: 0x94D864
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x94DA1C
    // Implemented from: VROSC.ControllerComponent
    // Base method: System.Void ControllerComponent::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ControllerButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ControllerButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ControllerButton*, creationType>()));
    }
  }; // VROSC.ControllerButton
  #pragma pack(pop)
  static check_size<sizeof(ControllerButton), 120 + sizeof(::UnityEngine::Quaternion)> __VROSC_ControllerButtonSizeCheck;
  static_assert(sizeof(ControllerButton) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ControllerButton::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ControllerButton::*)()>(&VROSC::ControllerButton::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ControllerButton*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ControllerButton::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ControllerButton::*)()>(&VROSC::ControllerButton::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ControllerButton*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ControllerButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
