// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.AdjustableMeshEffect
#include "VROSC/AdjustableMeshEffect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: AdjustableMeshVertexEffect
  class AdjustableMeshVertexEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AdjustableMeshVertexEffect);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AdjustableMeshVertexEffect*, "VROSC", "AdjustableMeshVertexEffect");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AdjustableMeshVertexEffect
  // [TokenAttribute] Offset: FFFFFFFF
  class AdjustableMeshVertexEffect : public ::VROSC::AdjustableMeshEffect {
    public:
    public:
    // private UnityEngine.Vector3 _scale
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 scale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: scale and: originalPositions
    char __padding0[0x4] = {};
    // private UnityEngine.Vector3[] _originalPositions
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Vector3> originalPositions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Vector3 _scale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__scale();
    // Get instance field reference: private UnityEngine.Vector3[] _originalPositions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn__originalPositions();
    // public System.Void SetScale(UnityEngine.Vector3 scale)
    // Offset: 0x968D98
    void SetScale(::UnityEngine::Vector3 scale);
    // public System.Void .ctor()
    // Offset: 0x968DA4
    // Implemented from: VROSC.AdjustableMeshEffect
    // Base method: System.Void AdjustableMeshEffect::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdjustableMeshVertexEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshVertexEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdjustableMeshVertexEffect*, creationType>()));
    }
  }; // VROSC.AdjustableMeshVertexEffect
  #pragma pack(pop)
  static check_size<sizeof(AdjustableMeshVertexEffect), 48 + sizeof(::ArrayW<::UnityEngine::Vector3>)> __VROSC_AdjustableMeshVertexEffectSizeCheck;
  static_assert(sizeof(AdjustableMeshVertexEffect) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AdjustableMeshVertexEffect::SetScale
// Il2CppName: SetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AdjustableMeshVertexEffect::*)(::UnityEngine::Vector3)>(&VROSC::AdjustableMeshVertexEffect::SetScale)> {
  static const MethodInfo* get() {
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AdjustableMeshVertexEffect*), "SetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scale});
  }
};
// Writing MetadataGetter for method: VROSC::AdjustableMeshVertexEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
