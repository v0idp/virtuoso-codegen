// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.Axis
#include "VROSC/Axis.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: NoteBoardNoteController
  class NoteBoardNoteController;
  // Forward declaring type: SynthController
  class SynthController;
  // Forward declaring type: OrganPipe
  class OrganPipe;
  // Forward declaring type: NoteFieldMonitor
  class NoteFieldMonitor;
  // Forward declaring type: MinMaxFloat
  class MinMaxFloat;
  // Forward declaring type: NoteFieldData
  class NoteFieldData;
  // Forward declaring type: NoteFieldParameters
  class NoteFieldParameters;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: OrganPipeRow
  class OrganPipeRow;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::OrganPipeRow);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::OrganPipeRow*, "VROSC", "OrganPipeRow");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.OrganPipeRow
  // [TokenAttribute] Offset: FFFFFFFF
  class OrganPipeRow : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::OrganPipeRow::Alignment
    struct Alignment;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: VROSC.OrganPipeRow/VROSC.Alignment
    // [TokenAttribute] Offset: FFFFFFFF
    struct Alignment/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Alignment
      constexpr Alignment(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public VROSC.OrganPipeRow/VROSC.Alignment Center
      static constexpr const int Center = 0;
      // Get static field: static public VROSC.OrganPipeRow/VROSC.Alignment Center
      static ::VROSC::OrganPipeRow::Alignment _get_Center();
      // Set static field: static public VROSC.OrganPipeRow/VROSC.Alignment Center
      static void _set_Center(::VROSC::OrganPipeRow::Alignment value);
      // static field const value: static public VROSC.OrganPipeRow/VROSC.Alignment Left
      static constexpr const int Left = 1;
      // Get static field: static public VROSC.OrganPipeRow/VROSC.Alignment Left
      static ::VROSC::OrganPipeRow::Alignment _get_Left();
      // Set static field: static public VROSC.OrganPipeRow/VROSC.Alignment Left
      static void _set_Left(::VROSC::OrganPipeRow::Alignment value);
      // static field const value: static public VROSC.OrganPipeRow/VROSC.Alignment Right
      static constexpr const int Right = 2;
      // Get static field: static public VROSC.OrganPipeRow/VROSC.Alignment Right
      static ::VROSC::OrganPipeRow::Alignment _get_Right();
      // Set static field: static public VROSC.OrganPipeRow/VROSC.Alignment Right
      static void _set_Right(::VROSC::OrganPipeRow::Alignment value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated]] int& dyn_value__();
    }; // VROSC.OrganPipeRow/VROSC.Alignment
    #pragma pack(pop)
    static check_size<sizeof(OrganPipeRow::Alignment), 0 + sizeof(int)> __VROSC_OrganPipeRow_AlignmentSizeCheck;
    static_assert(sizeof(OrganPipeRow::Alignment) == 0x4);
    public:
    // private VROSC.NoteBoardNoteController _controller
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::NoteBoardNoteController* controller;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoardNoteController*) == 0x8);
    // private VROSC.SynthController _instrument
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::SynthController* instrument;
    // Field size check
    static_assert(sizeof(::VROSC::SynthController*) == 0x8);
    // private VROSC.OrganPipe _pipePrefab
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::OrganPipe* pipePrefab;
    // Field size check
    static_assert(sizeof(::VROSC::OrganPipe*) == 0x8);
    // private VROSC.NoteFieldMonitor _monitor
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::NoteFieldMonitor* monitor;
    // Field size check
    static_assert(sizeof(::VROSC::NoteFieldMonitor*) == 0x8);
    // private System.Int32 _monitorIndex
    // Size: 0x4
    // Offset: 0x38
    int monitorIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: monitorIndex and: height
    char __padding4[0x4] = {};
    // private VROSC.MinMaxFloat _height
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::MinMaxFloat* height;
    // Field size check
    static_assert(sizeof(::VROSC::MinMaxFloat*) == 0x8);
    // private VROSC.MinMaxFloat _base
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::MinMaxFloat* _base;
    // Field size check
    static_assert(sizeof(::VROSC::MinMaxFloat*) == 0x8);
    // private UnityEngine.AnimationCurve _heightCurve
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AnimationCurve* heightCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve _baseCurve
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AnimationCurve* baseCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // [RangeAttribute] Offset: 0x78BE68
    // private System.Single _diameter
    // Size: 0x4
    // Offset: 0x60
    float diameter;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _step
    // Size: 0x4
    // Offset: 0x64
    float step;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private VROSC.OrganPipeRow/VROSC.Alignment _alignment
    // Size: 0x4
    // Offset: 0x68
    ::VROSC::OrganPipeRow::Alignment alignment;
    // Field size check
    static_assert(sizeof(::VROSC::OrganPipeRow::Alignment) == 0x4);
    // private VROSC.Axis _axis
    // Size: 0x4
    // Offset: 0x6C
    ::VROSC::Axis axis;
    // Field size check
    static_assert(sizeof(::VROSC::Axis) == 0x4);
    // private UnityEngine.Color _offColor
    // Size: 0x10
    // Offset: 0x70
    ::UnityEngine::Color offColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _PlayingColor
    // Size: 0x10
    // Offset: 0x80
    ::UnityEngine::Color PlayingColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Int32 _preview
    // Size: 0x4
    // Offset: 0x90
    int preview;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _octaveAtSetup
    // Size: 0x4
    // Offset: 0x94
    int octaveAtSetup;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _setupDone
    // Size: 0x1
    // Offset: 0x98
    bool setupDone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: setupDone and: Pipes
    char __padding17[0x7] = {};
    // private System.Collections.Generic.List`1<VROSC.OrganPipe> <Pipes>k__BackingField
    // Size: 0x8
    // Offset: 0xA0
    ::System::Collections::Generic::List_1<::VROSC::OrganPipe*>* Pipes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::OrganPipe*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.NoteBoardNoteController _controller
    [[deprecated]] ::VROSC::NoteBoardNoteController*& dyn__controller();
    // Get instance field reference: private VROSC.SynthController _instrument
    [[deprecated]] ::VROSC::SynthController*& dyn__instrument();
    // Get instance field reference: private VROSC.OrganPipe _pipePrefab
    [[deprecated]] ::VROSC::OrganPipe*& dyn__pipePrefab();
    // Get instance field reference: private VROSC.NoteFieldMonitor _monitor
    [[deprecated]] ::VROSC::NoteFieldMonitor*& dyn__monitor();
    // Get instance field reference: private System.Int32 _monitorIndex
    [[deprecated]] int& dyn__monitorIndex();
    // Get instance field reference: private VROSC.MinMaxFloat _height
    [[deprecated]] ::VROSC::MinMaxFloat*& dyn__height();
    // Get instance field reference: private VROSC.MinMaxFloat _base
    [[deprecated]] ::VROSC::MinMaxFloat*& dyn__base();
    // Get instance field reference: private UnityEngine.AnimationCurve _heightCurve
    [[deprecated]] ::UnityEngine::AnimationCurve*& dyn__heightCurve();
    // Get instance field reference: private UnityEngine.AnimationCurve _baseCurve
    [[deprecated]] ::UnityEngine::AnimationCurve*& dyn__baseCurve();
    // Get instance field reference: private System.Single _diameter
    [[deprecated]] float& dyn__diameter();
    // Get instance field reference: private System.Single _step
    [[deprecated]] float& dyn__step();
    // Get instance field reference: private VROSC.OrganPipeRow/VROSC.Alignment _alignment
    [[deprecated]] ::VROSC::OrganPipeRow::Alignment& dyn__alignment();
    // Get instance field reference: private VROSC.Axis _axis
    [[deprecated]] ::VROSC::Axis& dyn__axis();
    // Get instance field reference: private UnityEngine.Color _offColor
    [[deprecated]] ::UnityEngine::Color& dyn__offColor();
    // Get instance field reference: private UnityEngine.Color _PlayingColor
    [[deprecated]] ::UnityEngine::Color& dyn__PlayingColor();
    // Get instance field reference: private System.Int32 _preview
    [[deprecated]] int& dyn__preview();
    // Get instance field reference: private System.Int32 _octaveAtSetup
    [[deprecated]] int& dyn__octaveAtSetup();
    // Get instance field reference: private System.Boolean _setupDone
    [[deprecated]] bool& dyn__setupDone();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.OrganPipe> <Pipes>k__BackingField
    [[deprecated]] ::System::Collections::Generic::List_1<::VROSC::OrganPipe*>*& dyn_$Pipes$k__BackingField();
    // public System.Int32 get_PreviewPipes()
    // Offset: 0xF7EA14
    int get_PreviewPipes();
    // public System.Collections.Generic.List`1<VROSC.OrganPipe> get_Pipes()
    // Offset: 0xF7EA24
    ::System::Collections::Generic::List_1<::VROSC::OrganPipe*>* get_Pipes();
    // private System.Void set_Pipes(System.Collections.Generic.List`1<VROSC.OrganPipe> value)
    // Offset: 0xF7EA1C
    void set_Pipes(::System::Collections::Generic::List_1<::VROSC::OrganPipe*>* value);
    // private System.Void Awake()
    // Offset: 0xF7EA2C
    void Awake();
    // public System.Void Setup()
    // Offset: 0xF7EA30
    void Setup();
    // private System.Void Update()
    // Offset: 0xF7EB54
    void Update();
    // private System.Boolean IsPlayingPipe(VROSC.OrganPipe pipe, System.Int32 leftNote, System.Int32 rightNote)
    // Offset: 0xF7ED74
    bool IsPlayingPipe(::VROSC::OrganPipe* pipe, int leftNote, int rightNote);
    // public System.Void CreatePipes(System.Int32 pipeCount)
    // Offset: 0xF7EDF4
    void CreatePipes(int pipeCount);
    // private System.Void UpdatePipes(VROSC.NoteFieldData data, VROSC.NoteFieldParameters parameters)
    // Offset: 0xF7F24C
    void UpdatePipes(::VROSC::NoteFieldData* data, ::VROSC::NoteFieldParameters* parameters);
    // private UnityEngine.Vector3 GetPosByAlignment(System.Int32 index, System.Int32 count)
    // Offset: 0xF7F164
    ::UnityEngine::Vector3 GetPosByAlignment(int index, int count);
    // private System.Int32 GetNoteDataByAxis(VROSC.NoteFieldData data, System.Int32 index)
    // Offset: 0xF7F3B4
    int GetNoteDataByAxis(::VROSC::NoteFieldData* data, int index);
    // private System.Int32 GetAxisCount(VROSC.NoteFieldParameters parameters)
    // Offset: 0xF7F350
    int GetAxisCount(::VROSC::NoteFieldParameters* parameters);
    // private System.Void OnDrawGizmos()
    // Offset: 0xF7F468
    void OnDrawGizmos();
    // private System.Void SetFullyDone()
    // Offset: 0xF7F7F4
    void SetFullyDone();
    // System.Void Clear()
    // Offset: 0xF7F91C
    void Clear();
    // public System.Void .ctor()
    // Offset: 0xF7FA9C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OrganPipeRow* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OrganPipeRow*, creationType>()));
    }
  }; // VROSC.OrganPipeRow
  #pragma pack(pop)
  static check_size<sizeof(OrganPipeRow), 160 + sizeof(::System::Collections::Generic::List_1<::VROSC::OrganPipe*>*)> __VROSC_OrganPipeRowSizeCheck;
  static_assert(sizeof(OrganPipeRow) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::OrganPipeRow::Alignment, "VROSC", "OrganPipeRow/Alignment");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::OrganPipeRow::get_PreviewPipes
// Il2CppName: get_PreviewPipes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::OrganPipeRow::*)()>(&VROSC::OrganPipeRow::get_PreviewPipes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "get_PreviewPipes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::get_Pipes
// Il2CppName: get_Pipes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::VROSC::OrganPipe*>* (VROSC::OrganPipeRow::*)()>(&VROSC::OrganPipeRow::get_Pipes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "get_Pipes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::set_Pipes
// Il2CppName: set_Pipes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipeRow::*)(::System::Collections::Generic::List_1<::VROSC::OrganPipe*>*)>(&VROSC::OrganPipeRow::set_Pipes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "OrganPipe")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "set_Pipes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipeRow::*)()>(&VROSC::OrganPipeRow::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipeRow::*)()>(&VROSC::OrganPipeRow::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipeRow::*)()>(&VROSC::OrganPipeRow::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::IsPlayingPipe
// Il2CppName: IsPlayingPipe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::OrganPipeRow::*)(::VROSC::OrganPipe*, int, int)>(&VROSC::OrganPipeRow::IsPlayingPipe)> {
  static const MethodInfo* get() {
    static auto* pipe = &::il2cpp_utils::GetClassFromName("VROSC", "OrganPipe")->byval_arg;
    static auto* leftNote = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rightNote = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "IsPlayingPipe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pipe, leftNote, rightNote});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::CreatePipes
// Il2CppName: CreatePipes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipeRow::*)(int)>(&VROSC::OrganPipeRow::CreatePipes)> {
  static const MethodInfo* get() {
    static auto* pipeCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "CreatePipes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pipeCount});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::UpdatePipes
// Il2CppName: UpdatePipes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipeRow::*)(::VROSC::NoteFieldData*, ::VROSC::NoteFieldParameters*)>(&VROSC::OrganPipeRow::UpdatePipes)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("VROSC", "NoteFieldData")->byval_arg;
    static auto* parameters = &::il2cpp_utils::GetClassFromName("VROSC", "NoteFieldParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "UpdatePipes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, parameters});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::GetPosByAlignment
// Il2CppName: GetPosByAlignment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::OrganPipeRow::*)(int, int)>(&VROSC::OrganPipeRow::GetPosByAlignment)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "GetPosByAlignment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, count});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::GetNoteDataByAxis
// Il2CppName: GetNoteDataByAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::OrganPipeRow::*)(::VROSC::NoteFieldData*, int)>(&VROSC::OrganPipeRow::GetNoteDataByAxis)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("VROSC", "NoteFieldData")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "GetNoteDataByAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, index});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::GetAxisCount
// Il2CppName: GetAxisCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::OrganPipeRow::*)(::VROSC::NoteFieldParameters*)>(&VROSC::OrganPipeRow::GetAxisCount)> {
  static const MethodInfo* get() {
    static auto* parameters = &::il2cpp_utils::GetClassFromName("VROSC", "NoteFieldParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "GetAxisCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameters});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipeRow::*)()>(&VROSC::OrganPipeRow::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::SetFullyDone
// Il2CppName: SetFullyDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipeRow::*)()>(&VROSC::OrganPipeRow::SetFullyDone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "SetFullyDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipeRow::*)()>(&VROSC::OrganPipeRow::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
