// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.Axis
#include "VROSC/Axis.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: NoteBoardNoteController
  class NoteBoardNoteController;
  // Forward declaring type: OrganPipe
  class OrganPipe;
  // Forward declaring type: NoteFieldData
  class NoteFieldData;
  // Forward declaring type: NoteFieldParameters
  class NoteFieldParameters;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: OrganPipeRow
  class OrganPipeRow;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::OrganPipeRow);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::OrganPipeRow*, "VROSC", "OrganPipeRow");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.OrganPipeRow
  // [TokenAttribute] Offset: FFFFFFFF
  class OrganPipeRow : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private VROSC.NoteBoardNoteController _controller
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::NoteBoardNoteController* controller;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoardNoteController*) == 0x8);
    // private VROSC.OrganPipe _pipePrefab
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::OrganPipe* pipePrefab;
    // Field size check
    static_assert(sizeof(::VROSC::OrganPipe*) == 0x8);
    // private UnityEngine.Vector3 _size
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 size;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [RangeAttribute] Offset: 0x675914
    // private System.Single _lowestHeight
    // Size: 0x4
    // Offset: 0x34
    float lowestHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.AnimationCurve _diameter
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AnimationCurve* diameter;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve _mouthHeight
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AnimationCurve* mouthHeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private VROSC.Axis _axis
    // Size: 0x4
    // Offset: 0x48
    ::VROSC::Axis axis;
    // Field size check
    static_assert(sizeof(::VROSC::Axis) == 0x4);
    // private UnityEngine.Color _xColor
    // Size: 0x10
    // Offset: 0x4C
    ::UnityEngine::Color xColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _yColor
    // Size: 0x10
    // Offset: 0x5C
    ::UnityEngine::Color yColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _zColor
    // Size: 0x10
    // Offset: 0x6C
    ::UnityEngine::Color zColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Boolean _setupDone
    // Size: 0x1
    // Offset: 0x7C
    bool setupDone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: setupDone and: Pipes
    char __padding10[0x3] = {};
    // private System.Collections.Generic.List`1<VROSC.OrganPipe> <Pipes>k__BackingField
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::List_1<::VROSC::OrganPipe*>* Pipes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::OrganPipe*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.NoteBoardNoteController _controller
    ::VROSC::NoteBoardNoteController*& dyn__controller();
    // Get instance field reference: private VROSC.OrganPipe _pipePrefab
    ::VROSC::OrganPipe*& dyn__pipePrefab();
    // Get instance field reference: private UnityEngine.Vector3 _size
    ::UnityEngine::Vector3& dyn__size();
    // Get instance field reference: private System.Single _lowestHeight
    float& dyn__lowestHeight();
    // Get instance field reference: private UnityEngine.AnimationCurve _diameter
    ::UnityEngine::AnimationCurve*& dyn__diameter();
    // Get instance field reference: private UnityEngine.AnimationCurve _mouthHeight
    ::UnityEngine::AnimationCurve*& dyn__mouthHeight();
    // Get instance field reference: private VROSC.Axis _axis
    ::VROSC::Axis& dyn__axis();
    // Get instance field reference: private UnityEngine.Color _xColor
    ::UnityEngine::Color& dyn__xColor();
    // Get instance field reference: private UnityEngine.Color _yColor
    ::UnityEngine::Color& dyn__yColor();
    // Get instance field reference: private UnityEngine.Color _zColor
    ::UnityEngine::Color& dyn__zColor();
    // Get instance field reference: private System.Boolean _setupDone
    bool& dyn__setupDone();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.OrganPipe> <Pipes>k__BackingField
    ::System::Collections::Generic::List_1<::VROSC::OrganPipe*>*& dyn_$Pipes$k__BackingField();
    // public System.Collections.Generic.List`1<VROSC.OrganPipe> get_Pipes()
    // Offset: 0x91EC04
    ::System::Collections::Generic::List_1<::VROSC::OrganPipe*>* get_Pipes();
    // private System.Void set_Pipes(System.Collections.Generic.List`1<VROSC.OrganPipe> value)
    // Offset: 0x91EBFC
    void set_Pipes(::System::Collections::Generic::List_1<::VROSC::OrganPipe*>* value);
    // public System.Void Setup()
    // Offset: 0x91E6F4
    void Setup();
    // private System.Void UpdatePipes(VROSC.NoteFieldData data, VROSC.NoteFieldParameters parameters)
    // Offset: 0x91EC0C
    void UpdatePipes(::VROSC::NoteFieldData* data, ::VROSC::NoteFieldParameters* parameters);
    // private System.Int32 GetAxisCount(VROSC.NoteFieldParameters parameters)
    // Offset: 0x91EFE8
    int GetAxisCount(::VROSC::NoteFieldParameters* parameters);
    // private UnityEngine.Color GetAxisColor(VROSC.NoteFieldParameters parameters)
    // Offset: 0x91F04C
    ::UnityEngine::Color GetAxisColor(::VROSC::NoteFieldParameters* parameters);
    // private System.Void OnDrawGizmos()
    // Offset: 0x91F0A0
    void OnDrawGizmos();
    // private System.Void SetFullyDone()
    // Offset: 0x91F134
    void SetFullyDone();
    // System.Void Clear()
    // Offset: 0x91EA74
    void Clear();
    // public System.Void .ctor()
    // Offset: 0x91F26C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OrganPipeRow* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeRow::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OrganPipeRow*, creationType>()));
    }
  }; // VROSC.OrganPipeRow
  #pragma pack(pop)
  static check_size<sizeof(OrganPipeRow), 128 + sizeof(::System::Collections::Generic::List_1<::VROSC::OrganPipe*>*)> __VROSC_OrganPipeRowSizeCheck;
  static_assert(sizeof(OrganPipeRow) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::OrganPipeRow::get_Pipes
// Il2CppName: get_Pipes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::VROSC::OrganPipe*>* (VROSC::OrganPipeRow::*)()>(&VROSC::OrganPipeRow::get_Pipes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "get_Pipes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::set_Pipes
// Il2CppName: set_Pipes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipeRow::*)(::System::Collections::Generic::List_1<::VROSC::OrganPipe*>*)>(&VROSC::OrganPipeRow::set_Pipes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "OrganPipe")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "set_Pipes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipeRow::*)()>(&VROSC::OrganPipeRow::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::UpdatePipes
// Il2CppName: UpdatePipes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipeRow::*)(::VROSC::NoteFieldData*, ::VROSC::NoteFieldParameters*)>(&VROSC::OrganPipeRow::UpdatePipes)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("VROSC", "NoteFieldData")->byval_arg;
    static auto* parameters = &::il2cpp_utils::GetClassFromName("VROSC", "NoteFieldParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "UpdatePipes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, parameters});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::GetAxisCount
// Il2CppName: GetAxisCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::OrganPipeRow::*)(::VROSC::NoteFieldParameters*)>(&VROSC::OrganPipeRow::GetAxisCount)> {
  static const MethodInfo* get() {
    static auto* parameters = &::il2cpp_utils::GetClassFromName("VROSC", "NoteFieldParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "GetAxisCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameters});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::GetAxisColor
// Il2CppName: GetAxisColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::OrganPipeRow::*)(::VROSC::NoteFieldParameters*)>(&VROSC::OrganPipeRow::GetAxisColor)> {
  static const MethodInfo* get() {
    static auto* parameters = &::il2cpp_utils::GetClassFromName("VROSC", "NoteFieldParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "GetAxisColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameters});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipeRow::*)()>(&VROSC::OrganPipeRow::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::SetFullyDone
// Il2CppName: SetFullyDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipeRow::*)()>(&VROSC::OrganPipeRow::SetFullyDone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "SetFullyDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipeRow::*)()>(&VROSC::OrganPipeRow::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeRow*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeRow::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
