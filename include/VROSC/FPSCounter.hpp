// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TextMesh
  class TextMesh;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: FPSCounter
  class FPSCounter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::FPSCounter);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::FPSCounter*, "VROSC", "FPSCounter");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.FPSCounter
  // [TokenAttribute] Offset: FFFFFFFF
  class FPSCounter : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.TextMesh _textMesh
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::TextMesh* textMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextMesh*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.TextMesh _textMesh
    [[deprecated]] ::UnityEngine::TextMesh*& dyn__textMesh();
    // private System.Void Start()
    // Offset: 0x8F12D4
    void Start();
    // private System.Void Update()
    // Offset: 0x8F13BC
    void Update();
    // public System.Void .ctor()
    // Offset: 0x8F1448
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FPSCounter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::FPSCounter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FPSCounter*, creationType>()));
    }
  }; // VROSC.FPSCounter
  #pragma pack(pop)
  static check_size<sizeof(FPSCounter), 24 + sizeof(::UnityEngine::TextMesh*)> __VROSC_FPSCounterSizeCheck;
  static_assert(sizeof(FPSCounter) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::FPSCounter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::FPSCounter::*)()>(&VROSC::FPSCounter::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::FPSCounter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::FPSCounter::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::FPSCounter::*)()>(&VROSC::FPSCounter::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::FPSCounter*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::FPSCounter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
