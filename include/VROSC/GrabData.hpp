// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: GrabData
  class GrabData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::GrabData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::GrabData*, "VROSC", "GrabData");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x2D
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.GrabData
  // [TokenAttribute] Offset: FFFFFFFF
  class GrabData : public ::Il2CppObject {
    public:
    public:
    // private readonly VROSC.InputDevice <Device>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::VROSC::InputDevice* Device;
    // Field size check
    static_assert(sizeof(::VROSC::InputDevice*) == 0x8);
    // private readonly UnityEngine.Collider <GrabbedCollider>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Collider* GrabbedCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // private readonly UnityEngine.Vector3 <Position>k__BackingField
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 Position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private readonly System.Boolean <PointedAt>k__BackingField
    // Size: 0x1
    // Offset: 0x2C
    bool PointedAt;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private readonly VROSC.InputDevice <Device>k__BackingField
    [[deprecated("Use field access instead!")]] ::VROSC::InputDevice*& dyn_$Device$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.Collider <GrabbedCollider>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_$GrabbedCollider$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.Vector3 <Position>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$Position$k__BackingField();
    // Get instance field reference: private readonly System.Boolean <PointedAt>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$PointedAt$k__BackingField();
    // public VROSC.InputDevice get_Device()
    // Offset: 0x19A57D8
    ::VROSC::InputDevice* get_Device();
    // public UnityEngine.Collider get_GrabbedCollider()
    // Offset: 0x19A57E0
    ::UnityEngine::Collider* get_GrabbedCollider();
    // public UnityEngine.Vector3 get_Position()
    // Offset: 0x19A57E8
    ::UnityEngine::Vector3 get_Position();
    // public System.Boolean get_PointedAt()
    // Offset: 0x19A57F4
    bool get_PointedAt();
    // public System.Void .ctor(VROSC.InputDevice device, UnityEngine.Vector3 position, UnityEngine.Collider grabbedColider, System.Boolean pointedAt)
    // Offset: 0x19A57FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GrabData* New_ctor(::VROSC::InputDevice* device, ::UnityEngine::Vector3 position, ::UnityEngine::Collider* grabbedColider, bool pointedAt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GrabData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GrabData*, creationType>(device, position, grabbedColider, pointedAt)));
    }
  }; // VROSC.GrabData
  #pragma pack(pop)
  static check_size<sizeof(GrabData), 44 + sizeof(bool)> __VROSC_GrabDataSizeCheck;
  static_assert(sizeof(GrabData) == 0x2D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::GrabData::get_Device
// Il2CppName: get_Device
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::InputDevice* (VROSC::GrabData::*)()>(&VROSC::GrabData::get_Device)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::GrabData*), "get_Device", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::GrabData::get_GrabbedCollider
// Il2CppName: get_GrabbedCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider* (VROSC::GrabData::*)()>(&VROSC::GrabData::get_GrabbedCollider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::GrabData*), "get_GrabbedCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::GrabData::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::GrabData::*)()>(&VROSC::GrabData::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::GrabData*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::GrabData::get_PointedAt
// Il2CppName: get_PointedAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::GrabData::*)()>(&VROSC::GrabData::get_PointedAt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::GrabData*), "get_PointedAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::GrabData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
