// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.NotePlayer
#include "VROSC/NotePlayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::NotePlayer::$$c__DisplayClass18_0);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::NotePlayer::$$c__DisplayClass18_0*, "VROSC", "NotePlayer/<>c__DisplayClass18_0");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.NotePlayer/VROSC.<>c__DisplayClass18_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class NotePlayer::$$c__DisplayClass18_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Double nextQuantizeDspTime
    // Size: 0x8
    // Offset: 0x10
    double nextQuantizeDspTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Single quantizeLength
    // Size: 0x4
    // Offset: 0x18
    float quantizeLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Double nextQuantizeDspTime
    [[deprecated("Use field access instead!")]] double& dyn_nextQuantizeDspTime();
    // Get instance field reference: public System.Single quantizeLength
    [[deprecated("Use field access instead!")]] float& dyn_quantizeLength();
    // public System.Void .ctor()
    // Offset: 0x8CA298
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NotePlayer::$$c__DisplayClass18_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NotePlayer::$$c__DisplayClass18_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NotePlayer::$$c__DisplayClass18_0*, creationType>()));
    }
    // System.Boolean <Play>b__0(System.Double x)
    // Offset: 0x8CA2A0
    bool $Play$b__0(double x);
  }; // VROSC.NotePlayer/VROSC.<>c__DisplayClass18_0
  #pragma pack(pop)
  static check_size<sizeof(NotePlayer::$$c__DisplayClass18_0), 24 + sizeof(float)> __VROSC_NotePlayer_$$c__DisplayClass18_0SizeCheck;
  static_assert(sizeof(NotePlayer::$$c__DisplayClass18_0) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::NotePlayer::$$c__DisplayClass18_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::NotePlayer::$$c__DisplayClass18_0::$Play$b__0
// Il2CppName: <Play>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::NotePlayer::$$c__DisplayClass18_0::*)(double)>(&VROSC::NotePlayer::$$c__DisplayClass18_0::$Play$b__0)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NotePlayer::$$c__DisplayClass18_0*), "<Play>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
