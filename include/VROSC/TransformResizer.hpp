// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.SignalNode
#include "VROSC/SignalNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Signal
  class Signal;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TransformResizer
  class TransformResizer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TransformResizer);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TransformResizer*, "VROSC", "TransformResizer");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TransformResizer
  // [TokenAttribute] Offset: FFFFFFFF
  class TransformResizer : public ::VROSC::SignalNode {
    public:
    public:
    // private UnityEngine.Transform _resizeTransform
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* resizeTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 _startPosition
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 startPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _startScale
    // Size: 0xC
    // Offset: 0x54
    ::UnityEngine::Vector3 startScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean _invertX
    // Size: 0x1
    // Offset: 0x60
    bool invertX;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _invertY
    // Size: 0x1
    // Offset: 0x61
    bool invertY;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _invertZ
    // Size: 0x1
    // Offset: 0x62
    bool invertZ;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: invertZ and: minSize
    char __padding5[0x1] = {};
    // private System.Single _minSize
    // Size: 0x4
    // Offset: 0x64
    float minSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.Transform _resizeTransform
    [[deprecated]] ::UnityEngine::Transform*& dyn__resizeTransform();
    // Get instance field reference: private UnityEngine.Vector3 _startPosition
    [[deprecated]] ::UnityEngine::Vector3& dyn__startPosition();
    // Get instance field reference: private UnityEngine.Vector3 _startScale
    [[deprecated]] ::UnityEngine::Vector3& dyn__startScale();
    // Get instance field reference: private System.Boolean _invertX
    [[deprecated]] bool& dyn__invertX();
    // Get instance field reference: private System.Boolean _invertY
    [[deprecated]] bool& dyn__invertY();
    // Get instance field reference: private System.Boolean _invertZ
    [[deprecated]] bool& dyn__invertZ();
    // Get instance field reference: private System.Single _minSize
    [[deprecated]] float& dyn__minSize();
    // protected override System.Boolean get_RequireOrigin()
    // Offset: 0xA2C9D8
    // Implemented from: VROSC.SignalNode
    // Base method: System.Boolean SignalNode::get_RequireOrigin()
    bool get_RequireOrigin();
    // public System.Void .ctor()
    // Offset: 0xA2CBE4
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransformResizer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransformResizer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransformResizer*, creationType>()));
    }
    // protected override System.Void NodeBegin(VROSC.Signal signal)
    // Offset: 0xA2C9E0
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeBegin(VROSC.Signal signal)
    void NodeBegin(::VROSC::Signal* signal);
    // protected override System.Void NodeStay(VROSC.Signal signal)
    // Offset: 0xA2CA50
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeStay(VROSC.Signal signal)
    void NodeStay(::VROSC::Signal* signal);
    // protected override System.Void NodeEnd(VROSC.Signal signal)
    // Offset: 0xA2CBDC
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeEnd(VROSC.Signal signal)
    void NodeEnd(::VROSC::Signal* signal);
  }; // VROSC.TransformResizer
  #pragma pack(pop)
  static check_size<sizeof(TransformResizer), 100 + sizeof(float)> __VROSC_TransformResizerSizeCheck;
  static_assert(sizeof(TransformResizer) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TransformResizer::get_RequireOrigin
// Il2CppName: get_RequireOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::TransformResizer::*)()>(&VROSC::TransformResizer::get_RequireOrigin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformResizer*), "get_RequireOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformResizer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::TransformResizer::NodeBegin
// Il2CppName: NodeBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformResizer::*)(::VROSC::Signal*)>(&VROSC::TransformResizer::NodeBegin)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformResizer*), "NodeBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::TransformResizer::NodeStay
// Il2CppName: NodeStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformResizer::*)(::VROSC::Signal*)>(&VROSC::TransformResizer::NodeStay)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformResizer*), "NodeStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::TransformResizer::NodeEnd
// Il2CppName: NodeEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformResizer::*)(::VROSC::Signal*)>(&VROSC::TransformResizer::NodeEnd)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformResizer*), "NodeEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
