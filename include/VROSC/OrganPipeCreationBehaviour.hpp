// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.PlayableBehaviour
#include "UnityEngine/Playables/PlayableBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: OrganPipeRow
  class OrganPipeRow;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: FrameData
  struct FrameData;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: OrganPipeCreationBehaviour
  class OrganPipeCreationBehaviour;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::OrganPipeCreationBehaviour);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::OrganPipeCreationBehaviour*, "VROSC", "OrganPipeCreationBehaviour");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.OrganPipeCreationBehaviour
  // [TokenAttribute] Offset: FFFFFFFF
  class OrganPipeCreationBehaviour : public ::UnityEngine::Playables::PlayableBehaviour {
    public:
    public:
    // private VROSC.OrganPipeRow _row
    // Size: 0x8
    // Offset: 0x10
    ::VROSC::OrganPipeRow* row;
    // Field size check
    static_assert(sizeof(::VROSC::OrganPipeRow*) == 0x8);
    // public System.Single Appear
    // Size: 0x4
    // Offset: 0x18
    float Appear;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: Appear and: animationStartCurve
    char __padding1[0x4] = {};
    // private UnityEngine.AnimationCurve _animationStartCurve
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AnimationCurve* animationStartCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve _animateionEndCurve
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AnimationCurve* animateionEndCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    public:
    // Get instance field reference: private VROSC.OrganPipeRow _row
    [[deprecated("Use field access instead!")]] ::VROSC::OrganPipeRow*& dyn__row();
    // Get instance field reference: public System.Single Appear
    [[deprecated("Use field access instead!")]] float& dyn_Appear();
    // Get instance field reference: private UnityEngine.AnimationCurve _animationStartCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__animationStartCurve();
    // Get instance field reference: private UnityEngine.AnimationCurve _animateionEndCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__animateionEndCurve();
    // public System.Void .ctor()
    // Offset: 0xC68F60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OrganPipeCreationBehaviour* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipeCreationBehaviour::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OrganPipeCreationBehaviour*, creationType>()));
    }
    // public System.Void Setup(VROSC.OrganPipeRow row, UnityEngine.AnimationCurve animationStartCurve, UnityEngine.AnimationCurve animateionEndCurve)
    // Offset: 0xC68C10
    void Setup(::VROSC::OrganPipeRow* row, ::UnityEngine::AnimationCurve* animationStartCurve, ::UnityEngine::AnimationCurve* animateionEndCurve);
    // private System.Single GetAnimationValue(System.Single note, System.Single time)
    // Offset: 0xC68E44
    float GetAnimationValue(float note, float time);
    // private System.Void OnPlayableDestroy()
    // Offset: 0xC68EBC
    void OnPlayableDestroy();
    // public override System.Void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    // Offset: 0xC68CE8
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    void ProcessFrame(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info, ::Il2CppObject* playerData);
  }; // VROSC.OrganPipeCreationBehaviour
  #pragma pack(pop)
  static check_size<sizeof(OrganPipeCreationBehaviour), 40 + sizeof(::UnityEngine::AnimationCurve*)> __VROSC_OrganPipeCreationBehaviourSizeCheck;
  static_assert(sizeof(OrganPipeCreationBehaviour) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::OrganPipeCreationBehaviour::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::OrganPipeCreationBehaviour::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipeCreationBehaviour::*)(::VROSC::OrganPipeRow*, ::UnityEngine::AnimationCurve*, ::UnityEngine::AnimationCurve*)>(&VROSC::OrganPipeCreationBehaviour::Setup)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("VROSC", "OrganPipeRow")->byval_arg;
    static auto* animationStartCurve = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    static auto* animateionEndCurve = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeCreationBehaviour*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, animationStartCurve, animateionEndCurve});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeCreationBehaviour::GetAnimationValue
// Il2CppName: GetAnimationValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::OrganPipeCreationBehaviour::*)(float, float)>(&VROSC::OrganPipeCreationBehaviour::GetAnimationValue)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeCreationBehaviour*), "GetAnimationValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, time});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeCreationBehaviour::OnPlayableDestroy
// Il2CppName: OnPlayableDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipeCreationBehaviour::*)()>(&VROSC::OrganPipeCreationBehaviour::OnPlayableDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeCreationBehaviour*), "OnPlayableDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipeCreationBehaviour::ProcessFrame
// Il2CppName: ProcessFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipeCreationBehaviour::*)(::UnityEngine::Playables::Playable, ::UnityEngine::Playables::FrameData, ::Il2CppObject*)>(&VROSC::OrganPipeCreationBehaviour::ProcessFrame)> {
  static const MethodInfo* get() {
    static auto* playable = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "Playable")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "FrameData")->byval_arg;
    static auto* playerData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipeCreationBehaviour*), "ProcessFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playable, info, playerData});
  }
};
