// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.InstrumentDataController
#include "VROSC/InstrumentDataController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: TransformDataController
  class TransformDataController;
  // Forward declaring type: ModularDrumsDataModel
  class ModularDrumsDataModel;
  // Forward declaring type: EmpadDataModel
  class EmpadDataModel;
  // Forward declaring type: WidgetSettings
  class WidgetSettings;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ModularDrumsDataController
  class ModularDrumsDataController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ModularDrumsDataController);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ModularDrumsDataController*, "VROSC", "ModularDrumsDataController");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ModularDrumsDataController
  // [TokenAttribute] Offset: FFFFFFFF
  class ModularDrumsDataController : public ::VROSC::InstrumentDataController {
    public:
    // Nested type: ::VROSC::ModularDrumsDataController::$$c__DisplayClass33_0
    class $$c__DisplayClass33_0;
    public:
    // private VROSC.TransformDataController _transformData
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::TransformDataController* transformData;
    // Field size check
    static_assert(sizeof(::VROSC::TransformDataController*) == 0x8);
    // private System.Int32 _nextInstanceId
    // Size: 0x4
    // Offset: 0x30
    int nextInstanceId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static public System.Action`1<VROSC.ModularDrumsDataController> OnDataLoaded
    static ::System::Action_1<::VROSC::ModularDrumsDataController*>* _get_OnDataLoaded();
    // Set static field: static public System.Action`1<VROSC.ModularDrumsDataController> OnDataLoaded
    static void _set_OnDataLoaded(::System::Action_1<::VROSC::ModularDrumsDataController*>* value);
    // Get instance field reference: private VROSC.TransformDataController _transformData
    [[deprecated("Use field access instead!")]] ::VROSC::TransformDataController*& dyn__transformData();
    // Get instance field reference: private System.Int32 _nextInstanceId
    [[deprecated("Use field access instead!")]] int& dyn__nextInstanceId();
    // private VROSC.ModularDrumsDataModel get_DataModel()
    // Offset: 0xACAC68
    ::VROSC::ModularDrumsDataModel* get_DataModel();
    // public System.Single get_ReverbAmount()
    // Offset: 0xACAF70
    float get_ReverbAmount();
    // public System.Void set_ReverbAmount(System.Single value)
    // Offset: 0xACAF90
    void set_ReverbAmount(float value);
    // public System.Single get_ReverbLength()
    // Offset: 0xACAFD0
    float get_ReverbLength();
    // public System.Void set_ReverbLength(System.Single value)
    // Offset: 0xACAFF0
    void set_ReverbLength(float value);
    // public System.Single get_DryVolume()
    // Offset: 0xACB030
    float get_DryVolume();
    // public System.Void set_DryVolume(System.Single value)
    // Offset: 0xACB050
    void set_DryVolume(float value);
    // public System.Single get_Compression()
    // Offset: 0xACB090
    float get_Compression();
    // public System.Void set_Compression(System.Single value)
    // Offset: 0xACB0B0
    void set_Compression(float value);
    // public System.Void UpgradeSaveVersion(System.Int32 savedVersion)
    // Offset: 0xACB408
    void UpgradeSaveVersion(int savedVersion);
    // public VROSC.EmpadDataModel GetEmpadData(System.Int32 instanceId)
    // Offset: 0xACB53C
    ::VROSC::EmpadDataModel* GetEmpadData(int instanceId);
    // private VROSC.EmpadDataModel GetEmpadData(System.Int32 instanceId, System.String functionName)
    // Offset: 0xACB598
    ::VROSC::EmpadDataModel* GetEmpadData(int instanceId, ::StringW functionName);
    // public System.Int32 CreateEmpad(System.Int32 groupId)
    // Offset: 0xACB778
    int CreateEmpad(int groupId);
    // public System.Int32 CreateEmpad(VROSC.EmpadDataModel otherEmpad)
    // Offset: 0xACB8D0
    int CreateEmpad(::VROSC::EmpadDataModel* otherEmpad);
    // public System.Void RemoveEmpad(System.Int32 empadId)
    // Offset: 0xACB9B4
    void RemoveEmpad(int empadId);
    // public System.Collections.Generic.List`1<System.Int32> GetGroupEmpads(System.Int32 groupId)
    // Offset: 0xACBAC0
    ::System::Collections::Generic::List_1<int>* GetGroupEmpads(int groupId);
    // public System.Int32 GetFixedEmpadId(System.Int32 groupId)
    // Offset: 0xACA4AC
    int GetFixedEmpadId(int groupId);
    // public System.Int32 GetEmpadGroupId(System.Int32 instanceId)
    // Offset: 0xACBC6C
    int GetEmpadGroupId(int instanceId);
    // public System.Int32 GetEmpadSampleId(System.Int32 instanceId)
    // Offset: 0xACBCD4
    int GetEmpadSampleId(int instanceId);
    // public System.Int32 GetEmpadSelectedSampleIndex(System.Int32 instanceId)
    // Offset: 0xACBD3C
    int GetEmpadSelectedSampleIndex(int instanceId);
    // public System.Void SetEmpadSample(System.Int32 instanceId, System.Int32 sampleIndex)
    // Offset: 0xACBF74
    void SetEmpadSample(int instanceId, int sampleIndex);
    // public System.Void SetEmpadMidiNote(System.Int32 instanceId, System.Int32 midiNote)
    // Offset: 0xACC1DC
    void SetEmpadMidiNote(int instanceId, int midiNote);
    // public System.String GetEmpadDisplayName(System.Int32 instanceId)
    // Offset: 0xACC260
    ::StringW GetEmpadDisplayName(int instanceId);
    // public System.Int32 GetEmpadMidiNote(System.Int32 instanceId)
    // Offset: 0xACC538
    int GetEmpadMidiNote(int instanceId);
    // public System.Boolean IsEmpadPressureSensitive(System.Int32 instanceId)
    // Offset: 0xACC5A0
    bool IsEmpadPressureSensitive(int instanceId);
    // public System.Int32 GetEmpadPitch(System.Int32 instanceId)
    // Offset: 0xACC610
    int GetEmpadPitch(int instanceId);
    // public System.Single GetEmpadSize(System.Int32 instanceId)
    // Offset: 0xACC678
    float GetEmpadSize(int instanceId);
    // public UnityEngine.Vector3 GetEmpadPosition(System.Int32 instanceId)
    // Offset: 0xACC6F8
    ::UnityEngine::Vector3 GetEmpadPosition(int instanceId);
    // public UnityEngine.Quaternion GetEmpadRotation(System.Int32 instanceId)
    // Offset: 0xACC77C
    ::UnityEngine::Quaternion GetEmpadRotation(int instanceId);
    // public System.Boolean GetEmpadPinned(System.Int32 instanceId)
    // Offset: 0xACC800
    bool GetEmpadPinned(int instanceId);
    // public System.Void SetIsPressureSensitive(System.Int32 instanceId, System.Boolean isPressureSensitive)
    // Offset: 0xACC87C
    void SetIsPressureSensitive(int instanceId, bool isPressureSensitive);
    // public System.Void SetPitch(System.Int32 instanceId, System.Int32 pitch)
    // Offset: 0xACC904
    void SetPitch(int instanceId, int pitch);
    // public System.Void SetEmpadSize(System.Int32 instanceId, System.Single size)
    // Offset: 0xACC988
    void SetEmpadSize(int instanceId, float size);
    // public System.Void SetEmpadPosition(System.Int32 instanceId, UnityEngine.Vector3 position)
    // Offset: 0xACCA34
    void SetEmpadPosition(int instanceId, ::UnityEngine::Vector3 position);
    // public System.Void SetEmpadRotation(System.Int32 instanceId, UnityEngine.Quaternion rotation)
    // Offset: 0xACCAF4
    void SetEmpadRotation(int instanceId, ::UnityEngine::Quaternion rotation);
    // public System.Void SetEmpadPinned(System.Int32 instanceId, System.Boolean pinned)
    // Offset: 0xACCBBC
    void SetEmpadPinned(int instanceId, bool pinned);
    // public override VROSC.TransformDataController get_TransformData()
    // Offset: 0xACACE4
    // Implemented from: VROSC.InstrumentDataController
    // Base method: VROSC.TransformDataController InstrumentDataController::get_TransformData()
    ::VROSC::TransformDataController* get_TransformData();
    // public override System.Boolean get_Quantize()
    // Offset: 0xACAE5C
    // Implemented from: VROSC.InstrumentDataController
    // Base method: System.Boolean InstrumentDataController::get_Quantize()
    bool get_Quantize();
    // public override System.Void set_Quantize(System.Boolean value)
    // Offset: 0xACAE7C
    // Implemented from: VROSC.InstrumentDataController
    // Base method: System.Void InstrumentDataController::set_Quantize(System.Boolean value)
    void set_Quantize(bool value);
    // public override System.Single get_QuantizeTolerance()
    // Offset: 0xACAEB8
    // Implemented from: VROSC.InstrumentDataController
    // Base method: System.Single InstrumentDataController::get_QuantizeTolerance()
    float get_QuantizeTolerance();
    // public override System.Void set_QuantizeTolerance(System.Single value)
    // Offset: 0xACAED8
    // Implemented from: VROSC.InstrumentDataController
    // Base method: System.Void InstrumentDataController::set_QuantizeTolerance(System.Single value)
    void set_QuantizeTolerance(float value);
    // public override System.Int32 get_QuantizeBeatDivision()
    // Offset: 0xACAF18
    // Implemented from: VROSC.InstrumentDataController
    // Base method: System.Int32 InstrumentDataController::get_QuantizeBeatDivision()
    int get_QuantizeBeatDivision();
    // public override System.Void set_QuantizeBeatDivision(System.Int32 value)
    // Offset: 0xACAF38
    // Implemented from: VROSC.InstrumentDataController
    // Base method: System.Void InstrumentDataController::set_QuantizeBeatDivision(System.Int32 value)
    void set_QuantizeBeatDivision(int value);
    // public override System.Boolean get_HasBeenOpened()
    // Offset: 0xACB0F0
    // Implemented from: VROSC.InstrumentDataController
    // Base method: System.Boolean InstrumentDataController::get_HasBeenOpened()
    bool get_HasBeenOpened();
    // public override System.Void set_HasBeenOpened(System.Boolean value)
    // Offset: 0xACB110
    // Implemented from: VROSC.InstrumentDataController
    // Base method: System.Void InstrumentDataController::set_HasBeenOpened(System.Boolean value)
    void set_HasBeenOpened(bool value);
    // public override System.Boolean get_FrameIsActive()
    // Offset: 0xACCC50
    // Implemented from: VROSC.InstrumentDataController
    // Base method: System.Boolean InstrumentDataController::get_FrameIsActive()
    bool get_FrameIsActive();
    // public override System.Void set_FrameIsActive(System.Boolean value)
    // Offset: 0xACCC58
    // Implemented from: VROSC.InstrumentDataController
    // Base method: System.Void InstrumentDataController::set_FrameIsActive(System.Boolean value)
    void set_FrameIsActive(bool value);
    // public System.Void .ctor()
    // Offset: 0xACACEC
    // Implemented from: VROSC.InstrumentDataController
    // Base method: System.Void InstrumentDataController::.ctor()
    // Base method: System.Void BaseDataController::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ModularDrumsDataController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ModularDrumsDataController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ModularDrumsDataController*, creationType>()));
    }
    // public override System.Void ApplyDefaults(VROSC.WidgetSettings widgetDefaultSettings)
    // Offset: 0xACB14C
    // Implemented from: VROSC.InstrumentDataController
    // Base method: System.Void InstrumentDataController::ApplyDefaults(VROSC.WidgetSettings widgetDefaultSettings)
    void ApplyDefaults(::VROSC::WidgetSettings* widgetDefaultSettings);
    // public override System.Void LoadData(System.String sessionId, System.Action onSuccess, System.Action`1<VROSC.Error> onFailure)
    // Offset: 0xACB2D4
    // Implemented from: VROSC.BaseDataController
    // Base method: System.Void BaseDataController::LoadData(System.String sessionId, System.Action onSuccess, System.Action`1<VROSC.Error> onFailure)
    void LoadData(::StringW sessionId, ::System::Action* onSuccess, ::System::Action_1<::VROSC::Error>* onFailure);
  }; // VROSC.ModularDrumsDataController
  #pragma pack(pop)
  static check_size<sizeof(ModularDrumsDataController), 48 + sizeof(int)> __VROSC_ModularDrumsDataControllerSizeCheck;
  static_assert(sizeof(ModularDrumsDataController) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::get_DataModel
// Il2CppName: get_DataModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::ModularDrumsDataModel* (VROSC::ModularDrumsDataController::*)()>(&VROSC::ModularDrumsDataController::get_DataModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "get_DataModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::get_ReverbAmount
// Il2CppName: get_ReverbAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::ModularDrumsDataController::*)()>(&VROSC::ModularDrumsDataController::get_ReverbAmount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "get_ReverbAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::set_ReverbAmount
// Il2CppName: set_ReverbAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(float)>(&VROSC::ModularDrumsDataController::set_ReverbAmount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "set_ReverbAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::get_ReverbLength
// Il2CppName: get_ReverbLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::ModularDrumsDataController::*)()>(&VROSC::ModularDrumsDataController::get_ReverbLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "get_ReverbLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::set_ReverbLength
// Il2CppName: set_ReverbLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(float)>(&VROSC::ModularDrumsDataController::set_ReverbLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "set_ReverbLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::get_DryVolume
// Il2CppName: get_DryVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::ModularDrumsDataController::*)()>(&VROSC::ModularDrumsDataController::get_DryVolume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "get_DryVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::set_DryVolume
// Il2CppName: set_DryVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(float)>(&VROSC::ModularDrumsDataController::set_DryVolume)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "set_DryVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::get_Compression
// Il2CppName: get_Compression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::ModularDrumsDataController::*)()>(&VROSC::ModularDrumsDataController::get_Compression)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "get_Compression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::set_Compression
// Il2CppName: set_Compression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(float)>(&VROSC::ModularDrumsDataController::set_Compression)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "set_Compression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::UpgradeSaveVersion
// Il2CppName: UpgradeSaveVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(int)>(&VROSC::ModularDrumsDataController::UpgradeSaveVersion)> {
  static const MethodInfo* get() {
    static auto* savedVersion = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "UpgradeSaveVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{savedVersion});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::GetEmpadData
// Il2CppName: GetEmpadData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::EmpadDataModel* (VROSC::ModularDrumsDataController::*)(int)>(&VROSC::ModularDrumsDataController::GetEmpadData)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "GetEmpadData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::GetEmpadData
// Il2CppName: GetEmpadData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::EmpadDataModel* (VROSC::ModularDrumsDataController::*)(int, ::StringW)>(&VROSC::ModularDrumsDataController::GetEmpadData)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* functionName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "GetEmpadData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId, functionName});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::CreateEmpad
// Il2CppName: CreateEmpad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::ModularDrumsDataController::*)(int)>(&VROSC::ModularDrumsDataController::CreateEmpad)> {
  static const MethodInfo* get() {
    static auto* groupId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "CreateEmpad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupId});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::CreateEmpad
// Il2CppName: CreateEmpad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::ModularDrumsDataController::*)(::VROSC::EmpadDataModel*)>(&VROSC::ModularDrumsDataController::CreateEmpad)> {
  static const MethodInfo* get() {
    static auto* otherEmpad = &::il2cpp_utils::GetClassFromName("VROSC", "EmpadDataModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "CreateEmpad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherEmpad});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::RemoveEmpad
// Il2CppName: RemoveEmpad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(int)>(&VROSC::ModularDrumsDataController::RemoveEmpad)> {
  static const MethodInfo* get() {
    static auto* empadId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "RemoveEmpad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{empadId});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::GetGroupEmpads
// Il2CppName: GetGroupEmpads
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<int>* (VROSC::ModularDrumsDataController::*)(int)>(&VROSC::ModularDrumsDataController::GetGroupEmpads)> {
  static const MethodInfo* get() {
    static auto* groupId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "GetGroupEmpads", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupId});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::GetFixedEmpadId
// Il2CppName: GetFixedEmpadId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::ModularDrumsDataController::*)(int)>(&VROSC::ModularDrumsDataController::GetFixedEmpadId)> {
  static const MethodInfo* get() {
    static auto* groupId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "GetFixedEmpadId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupId});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::GetEmpadGroupId
// Il2CppName: GetEmpadGroupId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::ModularDrumsDataController::*)(int)>(&VROSC::ModularDrumsDataController::GetEmpadGroupId)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "GetEmpadGroupId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::GetEmpadSampleId
// Il2CppName: GetEmpadSampleId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::ModularDrumsDataController::*)(int)>(&VROSC::ModularDrumsDataController::GetEmpadSampleId)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "GetEmpadSampleId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::GetEmpadSelectedSampleIndex
// Il2CppName: GetEmpadSelectedSampleIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::ModularDrumsDataController::*)(int)>(&VROSC::ModularDrumsDataController::GetEmpadSelectedSampleIndex)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "GetEmpadSelectedSampleIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::SetEmpadSample
// Il2CppName: SetEmpadSample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(int, int)>(&VROSC::ModularDrumsDataController::SetEmpadSample)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sampleIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "SetEmpadSample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId, sampleIndex});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::SetEmpadMidiNote
// Il2CppName: SetEmpadMidiNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(int, int)>(&VROSC::ModularDrumsDataController::SetEmpadMidiNote)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* midiNote = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "SetEmpadMidiNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId, midiNote});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::GetEmpadDisplayName
// Il2CppName: GetEmpadDisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::ModularDrumsDataController::*)(int)>(&VROSC::ModularDrumsDataController::GetEmpadDisplayName)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "GetEmpadDisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::GetEmpadMidiNote
// Il2CppName: GetEmpadMidiNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::ModularDrumsDataController::*)(int)>(&VROSC::ModularDrumsDataController::GetEmpadMidiNote)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "GetEmpadMidiNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::IsEmpadPressureSensitive
// Il2CppName: IsEmpadPressureSensitive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::ModularDrumsDataController::*)(int)>(&VROSC::ModularDrumsDataController::IsEmpadPressureSensitive)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "IsEmpadPressureSensitive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::GetEmpadPitch
// Il2CppName: GetEmpadPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::ModularDrumsDataController::*)(int)>(&VROSC::ModularDrumsDataController::GetEmpadPitch)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "GetEmpadPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::GetEmpadSize
// Il2CppName: GetEmpadSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::ModularDrumsDataController::*)(int)>(&VROSC::ModularDrumsDataController::GetEmpadSize)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "GetEmpadSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::GetEmpadPosition
// Il2CppName: GetEmpadPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::ModularDrumsDataController::*)(int)>(&VROSC::ModularDrumsDataController::GetEmpadPosition)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "GetEmpadPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::GetEmpadRotation
// Il2CppName: GetEmpadRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (VROSC::ModularDrumsDataController::*)(int)>(&VROSC::ModularDrumsDataController::GetEmpadRotation)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "GetEmpadRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::GetEmpadPinned
// Il2CppName: GetEmpadPinned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::ModularDrumsDataController::*)(int)>(&VROSC::ModularDrumsDataController::GetEmpadPinned)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "GetEmpadPinned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::SetIsPressureSensitive
// Il2CppName: SetIsPressureSensitive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(int, bool)>(&VROSC::ModularDrumsDataController::SetIsPressureSensitive)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isPressureSensitive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "SetIsPressureSensitive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId, isPressureSensitive});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::SetPitch
// Il2CppName: SetPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(int, int)>(&VROSC::ModularDrumsDataController::SetPitch)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "SetPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId, pitch});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::SetEmpadSize
// Il2CppName: SetEmpadSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(int, float)>(&VROSC::ModularDrumsDataController::SetEmpadSize)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "SetEmpadSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId, size});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::SetEmpadPosition
// Il2CppName: SetEmpadPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(int, ::UnityEngine::Vector3)>(&VROSC::ModularDrumsDataController::SetEmpadPosition)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "SetEmpadPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId, position});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::SetEmpadRotation
// Il2CppName: SetEmpadRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(int, ::UnityEngine::Quaternion)>(&VROSC::ModularDrumsDataController::SetEmpadRotation)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "SetEmpadRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId, rotation});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::SetEmpadPinned
// Il2CppName: SetEmpadPinned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(int, bool)>(&VROSC::ModularDrumsDataController::SetEmpadPinned)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pinned = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "SetEmpadPinned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId, pinned});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::get_TransformData
// Il2CppName: get_TransformData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::TransformDataController* (VROSC::ModularDrumsDataController::*)()>(&VROSC::ModularDrumsDataController::get_TransformData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "get_TransformData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::get_Quantize
// Il2CppName: get_Quantize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::ModularDrumsDataController::*)()>(&VROSC::ModularDrumsDataController::get_Quantize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "get_Quantize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::set_Quantize
// Il2CppName: set_Quantize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(bool)>(&VROSC::ModularDrumsDataController::set_Quantize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "set_Quantize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::get_QuantizeTolerance
// Il2CppName: get_QuantizeTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::ModularDrumsDataController::*)()>(&VROSC::ModularDrumsDataController::get_QuantizeTolerance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "get_QuantizeTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::set_QuantizeTolerance
// Il2CppName: set_QuantizeTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(float)>(&VROSC::ModularDrumsDataController::set_QuantizeTolerance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "set_QuantizeTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::get_QuantizeBeatDivision
// Il2CppName: get_QuantizeBeatDivision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::ModularDrumsDataController::*)()>(&VROSC::ModularDrumsDataController::get_QuantizeBeatDivision)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "get_QuantizeBeatDivision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::set_QuantizeBeatDivision
// Il2CppName: set_QuantizeBeatDivision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(int)>(&VROSC::ModularDrumsDataController::set_QuantizeBeatDivision)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "set_QuantizeBeatDivision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::get_HasBeenOpened
// Il2CppName: get_HasBeenOpened
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::ModularDrumsDataController::*)()>(&VROSC::ModularDrumsDataController::get_HasBeenOpened)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "get_HasBeenOpened", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::set_HasBeenOpened
// Il2CppName: set_HasBeenOpened
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(bool)>(&VROSC::ModularDrumsDataController::set_HasBeenOpened)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "set_HasBeenOpened", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::get_FrameIsActive
// Il2CppName: get_FrameIsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::ModularDrumsDataController::*)()>(&VROSC::ModularDrumsDataController::get_FrameIsActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "get_FrameIsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::set_FrameIsActive
// Il2CppName: set_FrameIsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(bool)>(&VROSC::ModularDrumsDataController::set_FrameIsActive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "set_FrameIsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::ApplyDefaults
// Il2CppName: ApplyDefaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(::VROSC::WidgetSettings*)>(&VROSC::ModularDrumsDataController::ApplyDefaults)> {
  static const MethodInfo* get() {
    static auto* widgetDefaultSettings = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "ApplyDefaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{widgetDefaultSettings});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataController::LoadData
// Il2CppName: LoadData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ModularDrumsDataController::*)(::StringW, ::System::Action*, ::System::Action_1<::VROSC::Error>*)>(&VROSC::ModularDrumsDataController::LoadData)> {
  static const MethodInfo* get() {
    static auto* sessionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataController*), "LoadData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionId, onSuccess, onFailure});
  }
};
