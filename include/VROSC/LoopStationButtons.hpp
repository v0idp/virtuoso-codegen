// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: UIButton
  class UIButton;
  // Forward declaring type: UISlider
  class UISlider;
  // Forward declaring type: UIHoldButton
  class UIHoldButton;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopStationButtons
  class LoopStationButtons;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::LoopStationButtons);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LoopStationButtons*, "VROSC", "LoopStationButtons");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.LoopStationButtons
  // [TokenAttribute] Offset: FFFFFFFF
  class LoopStationButtons : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.UIButton _stopAllButton
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::UIButton* stopAllButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.UIButton _playAllButton
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::UIButton* playAllButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.UISlider _volumeSlider
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::UISlider* volumeSlider;
    // Field size check
    static_assert(sizeof(::VROSC::UISlider*) == 0x8);
    // private VROSC.UIHoldButton _deleteAllButton
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::UIHoldButton* deleteAllButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIHoldButton*) == 0x8);
    // public System.Action OnPlayAllPressed
    // Size: 0x8
    // Offset: 0x38
    ::System::Action* OnPlayAllPressed;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Action OnStopAllPressed
    // Size: 0x8
    // Offset: 0x40
    ::System::Action* OnStopAllPressed;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Action OnDeleteAllPressed
    // Size: 0x8
    // Offset: 0x48
    ::System::Action* OnDeleteAllPressed;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Action`1<System.Single> OnGlobalVolumeChanged
    // Size: 0x8
    // Offset: 0x50
    ::System::Action_1<float>* OnGlobalVolumeChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<float>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.UIButton _stopAllButton
    [[deprecated("Use field access instead!")]] ::VROSC::UIButton*& dyn__stopAllButton();
    // Get instance field reference: private VROSC.UIButton _playAllButton
    [[deprecated("Use field access instead!")]] ::VROSC::UIButton*& dyn__playAllButton();
    // Get instance field reference: private VROSC.UISlider _volumeSlider
    [[deprecated("Use field access instead!")]] ::VROSC::UISlider*& dyn__volumeSlider();
    // Get instance field reference: private VROSC.UIHoldButton _deleteAllButton
    [[deprecated("Use field access instead!")]] ::VROSC::UIHoldButton*& dyn__deleteAllButton();
    // Get instance field reference: public System.Action OnPlayAllPressed
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnPlayAllPressed();
    // Get instance field reference: public System.Action OnStopAllPressed
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnStopAllPressed();
    // Get instance field reference: public System.Action OnDeleteAllPressed
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnDeleteAllPressed();
    // Get instance field reference: public System.Action`1<System.Single> OnGlobalVolumeChanged
    [[deprecated("Use field access instead!")]] ::System::Action_1<float>*& dyn_OnGlobalVolumeChanged();
    // public System.Void .ctor()
    // Offset: 0x1969EFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoopStationButtons* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::LoopStationButtons::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoopStationButtons*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x196985C
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x1969C10
    void OnDestroy();
    // public System.Void SetVolume(System.Single volume)
    // Offset: 0x1969E24
    void SetVolume(float volume);
    // public System.Void PlayAllPressed()
    // Offset: 0x1969E50
    void PlayAllPressed();
    // public System.Void StopAllPressed()
    // Offset: 0x1969E64
    void StopAllPressed();
    // private System.Void DeleteAll()
    // Offset: 0x1969E78
    void DeleteAll();
    // private System.Void VolumeChanged(System.Single volume)
    // Offset: 0x1969E8C
    void VolumeChanged(float volume);
  }; // VROSC.LoopStationButtons
  #pragma pack(pop)
  static check_size<sizeof(LoopStationButtons), 80 + sizeof(::System::Action_1<float>*)> __VROSC_LoopStationButtonsSizeCheck;
  static_assert(sizeof(LoopStationButtons) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::LoopStationButtons::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::LoopStationButtons::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationButtons::*)()>(&VROSC::LoopStationButtons::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationButtons*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationButtons::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationButtons::*)()>(&VROSC::LoopStationButtons::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationButtons*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationButtons::SetVolume
// Il2CppName: SetVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationButtons::*)(float)>(&VROSC::LoopStationButtons::SetVolume)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationButtons*), "SetVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationButtons::PlayAllPressed
// Il2CppName: PlayAllPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationButtons::*)()>(&VROSC::LoopStationButtons::PlayAllPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationButtons*), "PlayAllPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationButtons::StopAllPressed
// Il2CppName: StopAllPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationButtons::*)()>(&VROSC::LoopStationButtons::StopAllPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationButtons*), "StopAllPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationButtons::DeleteAll
// Il2CppName: DeleteAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationButtons::*)()>(&VROSC::LoopStationButtons::DeleteAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationButtons*), "DeleteAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationButtons::VolumeChanged
// Il2CppName: VolumeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationButtons::*)(float)>(&VROSC::LoopStationButtons::VolumeChanged)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationButtons*), "VolumeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
