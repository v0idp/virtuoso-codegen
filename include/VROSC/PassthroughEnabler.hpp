// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Environment
  class Environment;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: PassthroughEnabler
  class PassthroughEnabler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::PassthroughEnabler);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::PassthroughEnabler*, "VROSC", "PassthroughEnabler");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.PassthroughEnabler
  // [TokenAttribute] Offset: FFFFFFFF
  class PassthroughEnabler : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.Environment _environment
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::Environment* environment;
    // Field size check
    static_assert(sizeof(::VROSC::Environment*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.Environment _environment
    [[deprecated]] ::VROSC::Environment*& dyn__environment();
    // protected System.Void Awake()
    // Offset: 0xADCEC0
    void Awake();
    // private System.Void NewEnvironmentSelected(VROSC.Environment environment)
    // Offset: 0xADCFD0
    void NewEnvironmentSelected(::VROSC::Environment* environment);
    // public System.Void .ctor()
    // Offset: 0xADD214
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PassthroughEnabler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PassthroughEnabler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PassthroughEnabler*, creationType>()));
    }
  }; // VROSC.PassthroughEnabler
  #pragma pack(pop)
  static check_size<sizeof(PassthroughEnabler), 24 + sizeof(::VROSC::Environment*)> __VROSC_PassthroughEnablerSizeCheck;
  static_assert(sizeof(PassthroughEnabler) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::PassthroughEnabler::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PassthroughEnabler::*)()>(&VROSC::PassthroughEnabler::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PassthroughEnabler*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PassthroughEnabler::NewEnvironmentSelected
// Il2CppName: NewEnvironmentSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PassthroughEnabler::*)(::VROSC::Environment*)>(&VROSC::PassthroughEnabler::NewEnvironmentSelected)> {
  static const MethodInfo* get() {
    static auto* environment = &::il2cpp_utils::GetClassFromName("VROSC", "Environment")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PassthroughEnabler*), "NewEnvironmentSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{environment});
  }
};
// Writing MetadataGetter for method: VROSC::PassthroughEnabler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
