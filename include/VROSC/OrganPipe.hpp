// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: OrganPipe
  class OrganPipe;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::OrganPipe);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::OrganPipe*, "VROSC", "OrganPipe");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.OrganPipe
  // [TokenAttribute] Offset: FFFFFFFF
  class OrganPipe : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Int32 <Note>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int Note;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _height
    // Size: 0x4
    // Offset: 0x1C
    float height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _diameter
    // Size: 0x4
    // Offset: 0x20
    float diameter;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _appear
    // Size: 0x4
    // Offset: 0x24
    float appear;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Renderer _renderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Renderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private System.Single _fallSpeed
    // Size: 0x4
    // Offset: 0x30
    float fallSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _playAmount
    // Size: 0x4
    // Offset: 0x34
    float playAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color _offColor
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Color offColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Vector4 _playingColor
    // Size: 0x10
    // Offset: 0x48
    ::UnityEngine::Vector4 playingColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private UnityEngine.MaterialPropertyBlock _propBlock
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::MaterialPropertyBlock* propBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Int32 <Note>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Note$k__BackingField();
    // Get instance field reference: private System.Single _height
    [[deprecated("Use field access instead!")]] float& dyn__height();
    // Get instance field reference: private System.Single _diameter
    [[deprecated("Use field access instead!")]] float& dyn__diameter();
    // Get instance field reference: private System.Single _appear
    [[deprecated("Use field access instead!")]] float& dyn__appear();
    // Get instance field reference: private UnityEngine.Renderer _renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__renderer();
    // Get instance field reference: private System.Single _fallSpeed
    [[deprecated("Use field access instead!")]] float& dyn__fallSpeed();
    // Get instance field reference: private System.Single _playAmount
    [[deprecated("Use field access instead!")]] float& dyn__playAmount();
    // Get instance field reference: private UnityEngine.Color _offColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__offColor();
    // Get instance field reference: private UnityEngine.Vector4 _playingColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn__playingColor();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock _propBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn__propBlock();
    // public System.Int32 get_Note()
    // Offset: 0xC68750
    int get_Note();
    // private System.Void set_Note(System.Int32 value)
    // Offset: 0xC68748
    void set_Note(int value);
    // public System.Void .ctor()
    // Offset: 0xC68AC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OrganPipe* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OrganPipe*, creationType>()));
    }
    // public System.Void SetColor(UnityEngine.Color offColor, UnityEngine.Color playingColor)
    // Offset: 0xC68758
    void SetColor(::UnityEngine::Color offColor, ::UnityEngine::Color playingColor);
    // public System.Void UpdateSize(System.Single diameter, System.Single height)
    // Offset: 0xC688EC
    void UpdateSize(float diameter, float height);
    // public System.Void Animate(System.Single appear)
    // Offset: 0xC68930
    void Animate(float appear);
    // private System.Void CreateBlock()
    // Offset: 0xC68974
    void CreateBlock();
    // public System.Void SetPlaying(System.Boolean playing)
    // Offset: 0xC687F0
    void SetPlaying(bool playing);
    // private System.Void LateUpdate()
    // Offset: 0xC689D8
    void LateUpdate();
    // private System.Void UpdateShader()
    // Offset: 0xC68804
    void UpdateShader();
    // private System.Void OnDrawGizmos()
    // Offset: 0xC68A3C
    void OnDrawGizmos();
    // public System.Void SetNote(System.Int32 note)
    // Offset: 0xC68ABC
    void SetNote(int note);
  }; // VROSC.OrganPipe
  #pragma pack(pop)
  static check_size<sizeof(OrganPipe), 88 + sizeof(::UnityEngine::MaterialPropertyBlock*)> __VROSC_OrganPipeSizeCheck;
  static_assert(sizeof(OrganPipe) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::OrganPipe::get_Note
// Il2CppName: get_Note
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::OrganPipe::*)()>(&VROSC::OrganPipe::get_Note)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipe*), "get_Note", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipe::set_Note
// Il2CppName: set_Note
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipe::*)(int)>(&VROSC::OrganPipe::set_Note)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipe*), "set_Note", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipe::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::OrganPipe::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipe::*)(::UnityEngine::Color, ::UnityEngine::Color)>(&VROSC::OrganPipe::SetColor)> {
  static const MethodInfo* get() {
    static auto* offColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* playingColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipe*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offColor, playingColor});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipe::UpdateSize
// Il2CppName: UpdateSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipe::*)(float, float)>(&VROSC::OrganPipe::UpdateSize)> {
  static const MethodInfo* get() {
    static auto* diameter = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipe*), "UpdateSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{diameter, height});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipe::Animate
// Il2CppName: Animate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipe::*)(float)>(&VROSC::OrganPipe::Animate)> {
  static const MethodInfo* get() {
    static auto* appear = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipe*), "Animate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{appear});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipe::CreateBlock
// Il2CppName: CreateBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipe::*)()>(&VROSC::OrganPipe::CreateBlock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipe*), "CreateBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipe::SetPlaying
// Il2CppName: SetPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipe::*)(bool)>(&VROSC::OrganPipe::SetPlaying)> {
  static const MethodInfo* get() {
    static auto* playing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipe*), "SetPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playing});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipe::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipe::*)()>(&VROSC::OrganPipe::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipe*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipe::UpdateShader
// Il2CppName: UpdateShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipe::*)()>(&VROSC::OrganPipe::UpdateShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipe*), "UpdateShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipe::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipe::*)()>(&VROSC::OrganPipe::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipe*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipe::SetNote
// Il2CppName: SetNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipe::*)(int)>(&VROSC::OrganPipe::SetNote)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipe*), "SetNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note});
  }
};
