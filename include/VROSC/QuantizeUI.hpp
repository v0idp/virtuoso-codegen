// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: UISpinner
  class UISpinner;
  // Forward declaring type: UISlideToggle
  class UISlideToggle;
  // Forward declaring type: TempoSyncDisplay
  class TempoSyncDisplay;
  // Forward declaring type: InstrumentController
  class InstrumentController;
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: QuantizeUI
  class QuantizeUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::QuantizeUI);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::QuantizeUI*, "VROSC", "QuantizeUI");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.QuantizeUI
  // [TokenAttribute] Offset: FFFFFFFF
  class QuantizeUI : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.UISpinner _quantize
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::UISpinner* quantize;
    // Field size check
    static_assert(sizeof(::VROSC::UISpinner*) == 0x8);
    // private VROSC.UISlideToggle _quantizeLateHits
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::UISlideToggle* quantizeLateHits;
    // Field size check
    static_assert(sizeof(::VROSC::UISlideToggle*) == 0x8);
    // private VROSC.TempoSyncDisplay _tempoSyncDisplay
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::TempoSyncDisplay* tempoSyncDisplay;
    // Field size check
    static_assert(sizeof(::VROSC::TempoSyncDisplay*) == 0x8);
    // private VROSC.InstrumentController _instrument
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::InstrumentController* instrument;
    // Field size check
    static_assert(sizeof(::VROSC::InstrumentController*) == 0x8);
    // private System.Int32 _setQuantization
    // Size: 0x4
    // Offset: 0x38
    int setQuantization;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _setupDone
    // Size: 0x1
    // Offset: 0x3C
    bool setupDone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: setupDone and: quantizeSelectionValues
    char __padding5[0x3] = {};
    // private System.Collections.Generic.List`1<System.String> _quantizeSelectionValues
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::StringW>* quantizeSelectionValues;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Int32[] _quantizeMap
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<int> quantizeMap;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Boolean _hasStartedBeatCounter
    // Size: 0x1
    // Offset: 0x50
    bool hasStartedBeatCounter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.UISpinner _quantize
    [[deprecated("Use field access instead!")]] ::VROSC::UISpinner*& dyn__quantize();
    // Get instance field reference: private VROSC.UISlideToggle _quantizeLateHits
    [[deprecated("Use field access instead!")]] ::VROSC::UISlideToggle*& dyn__quantizeLateHits();
    // Get instance field reference: private VROSC.TempoSyncDisplay _tempoSyncDisplay
    [[deprecated("Use field access instead!")]] ::VROSC::TempoSyncDisplay*& dyn__tempoSyncDisplay();
    // Get instance field reference: private VROSC.InstrumentController _instrument
    [[deprecated("Use field access instead!")]] ::VROSC::InstrumentController*& dyn__instrument();
    // Get instance field reference: private System.Int32 _setQuantization
    [[deprecated("Use field access instead!")]] int& dyn__setQuantization();
    // Get instance field reference: private System.Boolean _setupDone
    [[deprecated("Use field access instead!")]] bool& dyn__setupDone();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> _quantizeSelectionValues
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn__quantizeSelectionValues();
    // Get instance field reference: private System.Int32[] _quantizeMap
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__quantizeMap();
    // Get instance field reference: private System.Boolean _hasStartedBeatCounter
    [[deprecated("Use field access instead!")]] bool& dyn__hasStartedBeatCounter();
    // public System.Void .ctor()
    // Offset: 0xB2D4B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static QuantizeUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::QuantizeUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<QuantizeUI*, creationType>()));
    }
    // public System.Void Setup(VROSC.InstrumentController instrument)
    // Offset: 0xB2CC28
    void Setup(::VROSC::InstrumentController* instrument);
    // private System.Void OnEnable()
    // Offset: 0xB2CFB8
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0xB2D0AC
    void OnDisable();
    // private System.Void CheckIfQuantizationCanBeSet(System.Single BPM)
    // Offset: 0xB2D198
    void CheckIfQuantizationCanBeSet(float BPM);
    // protected System.Void ApplyInstrumentQuantizeValues()
    // Offset: 0xB2CEC4
    void ApplyInstrumentQuantizeValues();
    // private System.Void ChangeQuantizeLateHits(VROSC.InputDevice inputDevice, System.Boolean quantizeLateHits)
    // Offset: 0xB2D2B4
    void ChangeQuantizeLateHits(::VROSC::InputDevice* inputDevice, bool quantizeLateHits);
    // private System.Void QuantizeSelectionChanged(System.Int32 selection)
    // Offset: 0xB2D2E0
    void QuantizeSelectionChanged(int selection);
    // private System.Boolean ShouldDisableBeatCounter()
    // Offset: 0xB2D404
    bool ShouldDisableBeatCounter();
    // private System.Void SetQuantize(System.Int32 quantize)
    // Offset: 0xB2D1B8
    void SetQuantize(int quantize);
  }; // VROSC.QuantizeUI
  #pragma pack(pop)
  static check_size<sizeof(QuantizeUI), 80 + sizeof(bool)> __VROSC_QuantizeUISizeCheck;
  static_assert(sizeof(QuantizeUI) == 0x51);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::QuantizeUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::QuantizeUI::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::QuantizeUI::*)(::VROSC::InstrumentController*)>(&VROSC::QuantizeUI::Setup)> {
  static const MethodInfo* get() {
    static auto* instrument = &::il2cpp_utils::GetClassFromName("VROSC", "InstrumentController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::QuantizeUI*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instrument});
  }
};
// Writing MetadataGetter for method: VROSC::QuantizeUI::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::QuantizeUI::*)()>(&VROSC::QuantizeUI::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::QuantizeUI*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::QuantizeUI::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::QuantizeUI::*)()>(&VROSC::QuantizeUI::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::QuantizeUI*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::QuantizeUI::CheckIfQuantizationCanBeSet
// Il2CppName: CheckIfQuantizationCanBeSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::QuantizeUI::*)(float)>(&VROSC::QuantizeUI::CheckIfQuantizationCanBeSet)> {
  static const MethodInfo* get() {
    static auto* BPM = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::QuantizeUI*), "CheckIfQuantizationCanBeSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BPM});
  }
};
// Writing MetadataGetter for method: VROSC::QuantizeUI::ApplyInstrumentQuantizeValues
// Il2CppName: ApplyInstrumentQuantizeValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::QuantizeUI::*)()>(&VROSC::QuantizeUI::ApplyInstrumentQuantizeValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::QuantizeUI*), "ApplyInstrumentQuantizeValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::QuantizeUI::ChangeQuantizeLateHits
// Il2CppName: ChangeQuantizeLateHits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::QuantizeUI::*)(::VROSC::InputDevice*, bool)>(&VROSC::QuantizeUI::ChangeQuantizeLateHits)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* quantizeLateHits = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::QuantizeUI*), "ChangeQuantizeLateHits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice, quantizeLateHits});
  }
};
// Writing MetadataGetter for method: VROSC::QuantizeUI::QuantizeSelectionChanged
// Il2CppName: QuantizeSelectionChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::QuantizeUI::*)(int)>(&VROSC::QuantizeUI::QuantizeSelectionChanged)> {
  static const MethodInfo* get() {
    static auto* selection = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::QuantizeUI*), "QuantizeSelectionChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selection});
  }
};
// Writing MetadataGetter for method: VROSC::QuantizeUI::ShouldDisableBeatCounter
// Il2CppName: ShouldDisableBeatCounter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::QuantizeUI::*)()>(&VROSC::QuantizeUI::ShouldDisableBeatCounter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::QuantizeUI*), "ShouldDisableBeatCounter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::QuantizeUI::SetQuantize
// Il2CppName: SetQuantize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::QuantizeUI::*)(int)>(&VROSC::QuantizeUI::SetQuantize)> {
  static const MethodInfo* get() {
    static auto* quantize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::QuantizeUI*), "SetQuantize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{quantize});
  }
};
