// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.IState
#include "VROSC/IState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableDirector
  class PlayableDirector;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TutorialStep
  class TutorialStep;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TutorialStep);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TutorialStep*, "VROSC", "TutorialStep");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TutorialStep
  // [TokenAttribute] Offset: FFFFFFFF
  class TutorialStep : public ::UnityEngine::MonoBehaviour/*, public ::VROSC::IState*/ {
    public:
    // Nested type: ::VROSC::TutorialStep::Condition
    class Condition;
    // Nested type: ::VROSC::TutorialStep::$$c
    class $$c;
    public:
    // protected UnityEngine.Playables.PlayableDirector _playableDirector
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Playables::PlayableDirector* playableDirector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Playables::PlayableDirector*) == 0x8);
    // protected System.String _tipText
    // Size: 0x8
    // Offset: 0x20
    ::StringW tipText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _autoContinue
    // Size: 0x1
    // Offset: 0x28
    bool autoContinue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: autoContinue and: conditions
    char __padding2[0x7] = {};
    // private VROSC.TutorialStep/VROSC.Condition[] _conditions
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::VROSC::TutorialStep::Condition*> conditions;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::TutorialStep::Condition*>) == 0x8);
    // protected System.Boolean _isFinished
    // Size: 0x1
    // Offset: 0x38
    bool isFinished;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isFinished and: OnConditionsCompleted
    char __padding4[0x7] = {};
    // public System.Action OnConditionsCompleted
    // Size: 0x8
    // Offset: 0x40
    ::System::Action* OnConditionsCompleted;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Boolean <IsCompleted>k__BackingField
    // Size: 0x1
    // Offset: 0x48
    bool IsCompleted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _timelineReachedEnd
    // Size: 0x1
    // Offset: 0x49
    bool timelineReachedEnd;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isReplayingAudio
    // Size: 0x1
    // Offset: 0x4A
    bool isReplayingAudio;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isReplayingAudio and: OnTimelineReachedEnd
    char __padding8[0x5] = {};
    // public System.Action OnTimelineReachedEnd
    // Size: 0x8
    // Offset: 0x50
    ::System::Action* OnTimelineReachedEnd;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::VROSC::IState
    operator ::VROSC::IState() noexcept {
      return *reinterpret_cast<::VROSC::IState*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: protected UnityEngine.Playables.PlayableDirector _playableDirector
    [[deprecated]] ::UnityEngine::Playables::PlayableDirector*& dyn__playableDirector();
    // Get instance field reference: protected System.String _tipText
    [[deprecated]] ::StringW& dyn__tipText();
    // Get instance field reference: private System.Boolean _autoContinue
    [[deprecated]] bool& dyn__autoContinue();
    // Get instance field reference: private VROSC.TutorialStep/VROSC.Condition[] _conditions
    [[deprecated]] ::ArrayW<::VROSC::TutorialStep::Condition*>& dyn__conditions();
    // Get instance field reference: protected System.Boolean _isFinished
    [[deprecated]] bool& dyn__isFinished();
    // Get instance field reference: public System.Action OnConditionsCompleted
    [[deprecated]] ::System::Action*& dyn_OnConditionsCompleted();
    // Get instance field reference: private System.Boolean <IsCompleted>k__BackingField
    [[deprecated]] bool& dyn_$IsCompleted$k__BackingField();
    // Get instance field reference: private System.Boolean _timelineReachedEnd
    [[deprecated]] bool& dyn__timelineReachedEnd();
    // Get instance field reference: private System.Boolean _isReplayingAudio
    [[deprecated]] bool& dyn__isReplayingAudio();
    // Get instance field reference: public System.Action OnTimelineReachedEnd
    [[deprecated]] ::System::Action*& dyn_OnTimelineReachedEnd();
    // public VROSC.TutorialStep/VROSC.Condition[] get_Conditions()
    // Offset: 0xA320A4
    ::ArrayW<::VROSC::TutorialStep::Condition*> get_Conditions();
    // public System.String get_TipText()
    // Offset: 0xA320AC
    ::StringW get_TipText();
    // public System.Boolean get_AutoContinue()
    // Offset: 0xA320B4
    bool get_AutoContinue();
    // public System.Boolean get_IsCompleted()
    // Offset: 0xA320BC
    bool get_IsCompleted();
    // private System.Void set_IsCompleted(System.Boolean value)
    // Offset: 0xA320C4
    void set_IsCompleted(bool value);
    // public System.Func`1<System.Boolean> IsFinished()
    // Offset: 0xA3052C
    ::System::Func_1<bool>* IsFinished();
    // public System.Void OnEnter(params System.Object[] values)
    // Offset: 0xA320D0
    void OnEnter(::ArrayW<::Il2CppObject*> values);
    // private System.Void ConditionsCompleted()
    // Offset: 0xA3235C
    void ConditionsCompleted();
    // private System.Void TimelineEnded(UnityEngine.Playables.PlayableDirector director)
    // Offset: 0xA32410
    void TimelineEnded(::UnityEngine::Playables::PlayableDirector* director);
    // public System.Void OnExit()
    // Offset: 0xA324CC
    void OnExit();
    // public System.Void Tick()
    // Offset: 0xA326FC
    void Tick();
    // public System.Void UpdateData(params System.Object[] values)
    // Offset: 0xA327B8
    void UpdateData(::ArrayW<::Il2CppObject*> values);
    // public System.Void Replay()
    // Offset: 0xA327BC
    void Replay();
    // public System.Void TimelineReachedEnd()
    // Offset: 0xA32A68
    void TimelineReachedEnd();
    // public System.Void FinishStep()
    // Offset: 0xA3172C
    void FinishStep();
    // public System.Void Stop()
    // Offset: 0xA3160C
    void Stop();
    // private System.Void OnAppPaused(System.Boolean paused)
    // Offset: 0xA32B14
    void OnAppPaused(bool paused);
    // private System.Boolean <IsFinished>b__11_0()
    // Offset: 0xA32B44
    bool $IsFinished$b__11_0();
    // public System.Void .ctor()
    // Offset: 0xA32B3C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TutorialStep* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TutorialStep::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TutorialStep*, creationType>()));
    }
  }; // VROSC.TutorialStep
  #pragma pack(pop)
  static check_size<sizeof(TutorialStep), 80 + sizeof(::System::Action*)> __VROSC_TutorialStepSizeCheck;
  static_assert(sizeof(TutorialStep) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TutorialStep::get_Conditions
// Il2CppName: get_Conditions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::VROSC::TutorialStep::Condition*> (VROSC::TutorialStep::*)()>(&VROSC::TutorialStep::get_Conditions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialStep*), "get_Conditions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialStep::get_TipText
// Il2CppName: get_TipText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::TutorialStep::*)()>(&VROSC::TutorialStep::get_TipText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialStep*), "get_TipText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialStep::get_AutoContinue
// Il2CppName: get_AutoContinue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::TutorialStep::*)()>(&VROSC::TutorialStep::get_AutoContinue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialStep*), "get_AutoContinue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialStep::get_IsCompleted
// Il2CppName: get_IsCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::TutorialStep::*)()>(&VROSC::TutorialStep::get_IsCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialStep*), "get_IsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialStep::set_IsCompleted
// Il2CppName: set_IsCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialStep::*)(bool)>(&VROSC::TutorialStep::set_IsCompleted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialStep*), "set_IsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialStep::IsFinished
// Il2CppName: IsFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Func_1<bool>* (VROSC::TutorialStep::*)()>(&VROSC::TutorialStep::IsFinished)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialStep*), "IsFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialStep::OnEnter
// Il2CppName: OnEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialStep::*)(::ArrayW<::Il2CppObject*>)>(&VROSC::TutorialStep::OnEnter)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialStep*), "OnEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialStep::ConditionsCompleted
// Il2CppName: ConditionsCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialStep::*)()>(&VROSC::TutorialStep::ConditionsCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialStep*), "ConditionsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialStep::TimelineEnded
// Il2CppName: TimelineEnded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialStep::*)(::UnityEngine::Playables::PlayableDirector*)>(&VROSC::TutorialStep::TimelineEnded)> {
  static const MethodInfo* get() {
    static auto* director = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableDirector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialStep*), "TimelineEnded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{director});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialStep::OnExit
// Il2CppName: OnExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialStep::*)()>(&VROSC::TutorialStep::OnExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialStep*), "OnExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialStep::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialStep::*)()>(&VROSC::TutorialStep::Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialStep*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialStep::UpdateData
// Il2CppName: UpdateData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialStep::*)(::ArrayW<::Il2CppObject*>)>(&VROSC::TutorialStep::UpdateData)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialStep*), "UpdateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialStep::Replay
// Il2CppName: Replay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialStep::*)()>(&VROSC::TutorialStep::Replay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialStep*), "Replay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialStep::TimelineReachedEnd
// Il2CppName: TimelineReachedEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialStep::*)()>(&VROSC::TutorialStep::TimelineReachedEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialStep*), "TimelineReachedEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialStep::FinishStep
// Il2CppName: FinishStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialStep::*)()>(&VROSC::TutorialStep::FinishStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialStep*), "FinishStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialStep::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialStep::*)()>(&VROSC::TutorialStep::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialStep*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialStep::OnAppPaused
// Il2CppName: OnAppPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialStep::*)(bool)>(&VROSC::TutorialStep::OnAppPaused)> {
  static const MethodInfo* get() {
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialStep*), "OnAppPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paused});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialStep::$IsFinished$b__11_0
// Il2CppName: <IsFinished>b__11_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::TutorialStep::*)()>(&VROSC::TutorialStep::$IsFinished$b__11_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialStep*), "<IsFinished>b__11_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialStep::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
