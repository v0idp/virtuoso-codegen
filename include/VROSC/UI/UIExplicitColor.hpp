// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: VROSC.UI
namespace VROSC::UI {
  // Forward declaring type: UIExplicitColor
  class UIExplicitColor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UI::UIExplicitColor);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UI::UIExplicitColor*, "VROSC.UI", "UIExplicitColor");
// Type namespace: VROSC.UI
namespace VROSC::UI {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UI.UIExplicitColor
  // [TokenAttribute] Offset: FFFFFFFF
  class UIExplicitColor : public ::Il2CppObject {
    public:
    public:
    // protected UnityEngine.Color _baseColor
    // Size: 0x10
    // Offset: 0x10
    ::UnityEngine::Color baseColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // protected UnityEngine.Color _hoverColor
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Color hoverColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // protected UnityEngine.Color _disabledColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color disabledColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Get instance field reference: protected UnityEngine.Color _baseColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__baseColor();
    // Get instance field reference: protected UnityEngine.Color _hoverColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__hoverColor();
    // Get instance field reference: protected UnityEngine.Color _disabledColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__disabledColor();
    // public UnityEngine.Color get_BaseColor()
    // Offset: 0x190F340
    ::UnityEngine::Color get_BaseColor();
    // public UnityEngine.Color get_HoverColor()
    // Offset: 0x190F34C
    ::UnityEngine::Color get_HoverColor();
    // public UnityEngine.Color get_DisabledColor()
    // Offset: 0x190F358
    ::UnityEngine::Color get_DisabledColor();
    // public System.Void .ctor(UnityEngine.Color baseColor, UnityEngine.Color hoverColor, UnityEngine.Color disabledColor)
    // Offset: 0x190F280
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIExplicitColor* New_ctor(::UnityEngine::Color baseColor, ::UnityEngine::Color hoverColor, ::UnityEngine::Color disabledColor) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UI::UIExplicitColor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIExplicitColor*, creationType>(baseColor, hoverColor, disabledColor)));
    }
    // System.Void SetColor(VROSC.UI.UIExplicitColor other)
    // Offset: 0x190F364
    void SetColor(::VROSC::UI::UIExplicitColor* other);
  }; // VROSC.UI.UIExplicitColor
  #pragma pack(pop)
  static check_size<sizeof(UIExplicitColor), 48 + sizeof(::UnityEngine::Color)> __VROSC_UI_UIExplicitColorSizeCheck;
  static_assert(sizeof(UIExplicitColor) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UI::UIExplicitColor::get_BaseColor
// Il2CppName: get_BaseColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::UI::UIExplicitColor::*)()>(&VROSC::UI::UIExplicitColor::get_BaseColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIExplicitColor*), "get_BaseColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIExplicitColor::get_HoverColor
// Il2CppName: get_HoverColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::UI::UIExplicitColor::*)()>(&VROSC::UI::UIExplicitColor::get_HoverColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIExplicitColor*), "get_HoverColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIExplicitColor::get_DisabledColor
// Il2CppName: get_DisabledColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::UI::UIExplicitColor::*)()>(&VROSC::UI::UIExplicitColor::get_DisabledColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIExplicitColor*), "get_DisabledColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIExplicitColor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::UI::UIExplicitColor::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::UIExplicitColor::*)(::VROSC::UI::UIExplicitColor*)>(&VROSC::UI::UIExplicitColor::SetColor)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("VROSC.UI", "UIExplicitColor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIExplicitColor*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
