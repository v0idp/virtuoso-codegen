// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Interactable
  class Interactable;
}
// Forward declaring namespace: VROSC::UI
namespace VROSC::UI {
  // Forward declaring type: UIColorGetter
  class UIColorGetter;
}
// Completed forward declares
// Type namespace: VROSC.UI
namespace VROSC::UI {
  // Forward declaring type: UIInteractableColoring
  class UIInteractableColoring;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UI::UIInteractableColoring);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UI::UIInteractableColoring*, "VROSC.UI", "UIInteractableColoring");
// Type namespace: VROSC.UI
namespace VROSC::UI {
  // WARNING Size may be invalid!
  // Autogenerated type: VROSC.UI.UIInteractableColoring
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class UIInteractableColoring : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [FormerlySerializedAsAttribute] Offset: 0x78D9DC
    // protected VROSC.Interactable _interactable
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::Interactable* interactable;
    // Field size check
    static_assert(sizeof(::VROSC::Interactable*) == 0x8);
    // protected System.Boolean _reactToHovering
    // Size: 0x1
    // Offset: 0x20
    bool reactToHovering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected VROSC.UI.UIColorGetter _colorGetter
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::UI::UIColorGetter* colorGetter;
    // Field size check
    static_assert(sizeof(::VROSC::UI::UIColorGetter*) == 0x8);
    // private UnityEngine.Color <CurrentColor>k__BackingField
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color CurrentColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Nullable`1<System.Boolean> _overrideHovering
    // Size: 0xFFFFFFFF
    // Offset: 0x40
    ::System::Nullable_1<bool> overrideHovering;
    // private System.Nullable`1<System.Boolean> _overrideDisabled
    // Size: 0xFFFFFFFF
    // Offset: 0x42
    ::System::Nullable_1<bool> overrideDisabled;
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: protected VROSC.Interactable _interactable
    [[deprecated]] ::VROSC::Interactable*& dyn__interactable();
    // Get instance field reference: protected System.Boolean _reactToHovering
    [[deprecated]] bool& dyn__reactToHovering();
    // Get instance field reference: protected VROSC.UI.UIColorGetter _colorGetter
    [[deprecated]] ::VROSC::UI::UIColorGetter*& dyn__colorGetter();
    // Get instance field reference: private UnityEngine.Color <CurrentColor>k__BackingField
    [[deprecated]] ::UnityEngine::Color& dyn_$CurrentColor$k__BackingField();
    // Get instance field reference: private System.Nullable`1<System.Boolean> _overrideHovering
    [[deprecated]] ::System::Nullable_1<bool>& dyn__overrideHovering();
    // Get instance field reference: private System.Nullable`1<System.Boolean> _overrideDisabled
    [[deprecated]] ::System::Nullable_1<bool>& dyn__overrideDisabled();
    // public UnityEngine.Color get_CurrentColor()
    // Offset: 0x1912640
    ::UnityEngine::Color get_CurrentColor();
    // private System.Void set_CurrentColor(UnityEngine.Color value)
    // Offset: 0x1912634
    void set_CurrentColor(::UnityEngine::Color value);
    // private System.Void OnEnable()
    // Offset: 0x191264C
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x19127C8
    void OnDisable();
    // protected System.Void Start()
    // Offset: 0x19128B8
    void Start();
    // public UnityEngine.Color GetColor()
    // Offset: 0x1912AA0
    ::UnityEngine::Color GetColor();
    // public System.Void SetOvrerride(System.Nullable`1<System.Boolean> overrideHovering, System.Nullable`1<System.Boolean> overrideDisabled)
    // Offset: 0x1912C24
    void SetOvrerride(::System::Nullable_1<bool> overrideHovering, ::System::Nullable_1<bool> overrideDisabled);
    // public System.Void UpdateColor()
    // Offset: 0x1912C38
    void UpdateColor();
    // public System.Void ApplyColor(UnityEngine.Color color)
    // Offset: 0x1912C3C
    void ApplyColor(::UnityEngine::Color color);
    // private System.Void <Start>b__11_0(System.Boolean disabled)
    // Offset: 0x1912C58
    void $Start$b__11_0(bool disabled);
    // private System.Void <Start>b__11_1(System.Boolean hovering)
    // Offset: 0x1912C64
    void $Start$b__11_1(bool hovering);
    // private System.Void <Start>b__11_2(System.Boolean interacting)
    // Offset: 0x1912C70
    void $Start$b__11_2(bool interacting);
    // public System.Void .ctor()
    // Offset: 0x1912C48
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIInteractableColoring* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UI::UIInteractableColoring::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIInteractableColoring*, creationType>()));
    }
  }; // VROSC.UI.UIInteractableColoring
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UI::UIInteractableColoring::get_CurrentColor
// Il2CppName: get_CurrentColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::UI::UIInteractableColoring::*)()>(&VROSC::UI::UIInteractableColoring::get_CurrentColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIInteractableColoring*), "get_CurrentColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIInteractableColoring::set_CurrentColor
// Il2CppName: set_CurrentColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::UIInteractableColoring::*)(::UnityEngine::Color)>(&VROSC::UI::UIInteractableColoring::set_CurrentColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIInteractableColoring*), "set_CurrentColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIInteractableColoring::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::UIInteractableColoring::*)()>(&VROSC::UI::UIInteractableColoring::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIInteractableColoring*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIInteractableColoring::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::UIInteractableColoring::*)()>(&VROSC::UI::UIInteractableColoring::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIInteractableColoring*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIInteractableColoring::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::UIInteractableColoring::*)()>(&VROSC::UI::UIInteractableColoring::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIInteractableColoring*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIInteractableColoring::GetColor
// Il2CppName: GetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::UI::UIInteractableColoring::*)()>(&VROSC::UI::UIInteractableColoring::GetColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIInteractableColoring*), "GetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIInteractableColoring::SetOvrerride
// Il2CppName: SetOvrerride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::UIInteractableColoring::*)(::System::Nullable_1<bool>, ::System::Nullable_1<bool>)>(&VROSC::UI::UIInteractableColoring::SetOvrerride)> {
  static const MethodInfo* get() {
    static auto* overrideHovering = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    static auto* overrideDisabled = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIInteractableColoring*), "SetOvrerride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{overrideHovering, overrideDisabled});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIInteractableColoring::UpdateColor
// Il2CppName: UpdateColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::UIInteractableColoring::*)()>(&VROSC::UI::UIInteractableColoring::UpdateColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIInteractableColoring*), "UpdateColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIInteractableColoring::ApplyColor
// Il2CppName: ApplyColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::UIInteractableColoring::*)(::UnityEngine::Color)>(&VROSC::UI::UIInteractableColoring::ApplyColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIInteractableColoring*), "ApplyColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIInteractableColoring::$Start$b__11_0
// Il2CppName: <Start>b__11_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::UIInteractableColoring::*)(bool)>(&VROSC::UI::UIInteractableColoring::$Start$b__11_0)> {
  static const MethodInfo* get() {
    static auto* disabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIInteractableColoring*), "<Start>b__11_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disabled});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIInteractableColoring::$Start$b__11_1
// Il2CppName: <Start>b__11_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::UIInteractableColoring::*)(bool)>(&VROSC::UI::UIInteractableColoring::$Start$b__11_1)> {
  static const MethodInfo* get() {
    static auto* hovering = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIInteractableColoring*), "<Start>b__11_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hovering});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIInteractableColoring::$Start$b__11_2
// Il2CppName: <Start>b__11_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::UIInteractableColoring::*)(bool)>(&VROSC::UI::UIInteractableColoring::$Start$b__11_2)> {
  static const MethodInfo* get() {
    static auto* interacting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIInteractableColoring*), "<Start>b__11_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interacting});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIInteractableColoring::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
