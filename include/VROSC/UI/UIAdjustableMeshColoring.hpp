// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.UI.UIInteractableColoring
#include "VROSC/UI/UIInteractableColoring.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: AdjustableMesh
  class AdjustableMesh;
}
// Forward declaring namespace: VROSC::UI
namespace VROSC::UI {
  // Forward declaring type: UIMaterialSettings
  class UIMaterialSettings;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Color because it is already included!
}
// Completed forward declares
// Type namespace: VROSC.UI
namespace VROSC::UI {
  // Forward declaring type: UIAdjustableMeshColoring
  class UIAdjustableMeshColoring;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UI::UIAdjustableMeshColoring);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UI::UIAdjustableMeshColoring*, "VROSC.UI", "UIAdjustableMeshColoring");
// Type namespace: VROSC.UI
namespace VROSC::UI {
  // WARNING Size may be invalid!
  // Autogenerated type: VROSC.UI.UIAdjustableMeshColoring
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  class UIAdjustableMeshColoring : public ::VROSC::UI::UIInteractableColoring {
    public:
    public:
    // private VROSC.AdjustableMesh _adjustableMesh
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::AdjustableMesh* adjustableMesh;
    // Field size check
    static_assert(sizeof(::VROSC::AdjustableMesh*) == 0x8);
    // private VROSC.UI.UIMaterialSettings _transparencySwitch
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::UI::UIMaterialSettings* transparencySwitch;
    // Field size check
    static_assert(sizeof(::VROSC::UI::UIMaterialSettings*) == 0x8);
    // protected System.Boolean _hideWhenNotHovering
    // Size: 0x1
    // Offset: 0x58
    bool hideWhenNotHovering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private VROSC.AdjustableMesh _adjustableMesh
    [[deprecated]] ::VROSC::AdjustableMesh*& dyn__adjustableMesh();
    // Get instance field reference: private VROSC.UI.UIMaterialSettings _transparencySwitch
    [[deprecated]] ::VROSC::UI::UIMaterialSettings*& dyn__transparencySwitch();
    // Get instance field reference: protected System.Boolean _hideWhenNotHovering
    [[deprecated]] bool& dyn__hideWhenNotHovering();
    // private System.Void Awake()
    // Offset: 0xA33058
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0xA33148
    void OnDestroy();
    // public System.Void GetValues()
    // Offset: 0xA3349C
    void GetValues();
    // private System.Void Set()
    // Offset: 0xA33598
    void Set();
    // public System.Void .ctor()
    // Offset: 0xA33654
    // Implemented from: VROSC.UI.UIInteractableColoring
    // Base method: System.Void UIInteractableColoring::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIAdjustableMeshColoring* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UI::UIAdjustableMeshColoring::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIAdjustableMeshColoring*, creationType>()));
    }
    // public override System.Void UpdateColor()
    // Offset: 0xA33238
    // Implemented from: VROSC.UI.UIInteractableColoring
    // Base method: System.Void UIInteractableColoring::UpdateColor()
    void UpdateColor();
    // public override System.Void ApplyColor(UnityEngine.Color color)
    // Offset: 0xA3335C
    // Implemented from: VROSC.UI.UIInteractableColoring
    // Base method: System.Void UIInteractableColoring::ApplyColor(UnityEngine.Color color)
    void ApplyColor(::UnityEngine::Color color);
  }; // VROSC.UI.UIAdjustableMeshColoring
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UI::UIAdjustableMeshColoring::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::UIAdjustableMeshColoring::*)()>(&VROSC::UI::UIAdjustableMeshColoring::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIAdjustableMeshColoring*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIAdjustableMeshColoring::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::UIAdjustableMeshColoring::*)()>(&VROSC::UI::UIAdjustableMeshColoring::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIAdjustableMeshColoring*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIAdjustableMeshColoring::GetValues
// Il2CppName: GetValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::UIAdjustableMeshColoring::*)()>(&VROSC::UI::UIAdjustableMeshColoring::GetValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIAdjustableMeshColoring*), "GetValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIAdjustableMeshColoring::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::UIAdjustableMeshColoring::*)()>(&VROSC::UI::UIAdjustableMeshColoring::Set)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIAdjustableMeshColoring*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIAdjustableMeshColoring::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::UI::UIAdjustableMeshColoring::UpdateColor
// Il2CppName: UpdateColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::UIAdjustableMeshColoring::*)()>(&VROSC::UI::UIAdjustableMeshColoring::UpdateColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIAdjustableMeshColoring*), "UpdateColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIAdjustableMeshColoring::ApplyColor
// Il2CppName: ApplyColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::UIAdjustableMeshColoring::*)(::UnityEngine::Color)>(&VROSC::UI::UIAdjustableMeshColoring::ApplyColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIAdjustableMeshColoring*), "ApplyColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
