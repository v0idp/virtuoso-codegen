// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC::UI
namespace VROSC::UI {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: VROSC.UI
namespace VROSC::UI {
  // Forward declaring type: ControlPanel
  class ControlPanel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UI::ControlPanel);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UI::ControlPanel*, "VROSC.UI", "ControlPanel");
// Type namespace: VROSC.UI
namespace VROSC::UI {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UI.ControlPanel
  // [TokenAttribute] Offset: FFFFFFFF
  class ControlPanel : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::UI::ControlPanel::$ModifyPosition$d__9
    class $ModifyPosition$d__9;
    public:
    // private System.Single _heightPercentage
    // Size: 0x4
    // Offset: 0x18
    float heightPercentage;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _distanceTolerance
    // Size: 0x4
    // Offset: 0x1C
    float distanceTolerance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _moveSpeed
    // Size: 0x4
    // Offset: 0x20
    float moveSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: moveSpeed and: moveCurve
    char __padding2[0x4] = {};
    // private UnityEngine.AnimationCurve _moveCurve
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AnimationCurve* moveCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.Camera _mainCamera
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Camera* mainCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private UnityEngine.Vector3 _currentPosition
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 currentPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _targetPosition
    // Size: 0xC
    // Offset: 0x44
    ::UnityEngine::Vector3 targetPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single _heightPercentage
    [[deprecated]] float& dyn__heightPercentage();
    // Get instance field reference: private System.Single _distanceTolerance
    [[deprecated]] float& dyn__distanceTolerance();
    // Get instance field reference: private System.Single _moveSpeed
    [[deprecated]] float& dyn__moveSpeed();
    // Get instance field reference: private UnityEngine.AnimationCurve _moveCurve
    [[deprecated]] ::UnityEngine::AnimationCurve*& dyn__moveCurve();
    // Get instance field reference: private UnityEngine.Camera _mainCamera
    [[deprecated]] ::UnityEngine::Camera*& dyn__mainCamera();
    // Get instance field reference: private UnityEngine.Vector3 _currentPosition
    [[deprecated]] ::UnityEngine::Vector3& dyn__currentPosition();
    // Get instance field reference: private UnityEngine.Vector3 _targetPosition
    [[deprecated]] ::UnityEngine::Vector3& dyn__targetPosition();
    // private UnityEngine.Vector3 GetCorrectPosition()
    // Offset: 0x94CED8
    ::UnityEngine::Vector3 GetCorrectPosition();
    // private System.Void Update()
    // Offset: 0x94CFCC
    void Update();
    // private System.Collections.IEnumerator ModifyPosition(UnityEngine.Vector3 correctPosition)
    // Offset: 0x94D064
    ::System::Collections::IEnumerator* ModifyPosition(::UnityEngine::Vector3 correctPosition);
    // public System.Void .ctor()
    // Offset: 0x94D0F4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ControlPanel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UI::ControlPanel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ControlPanel*, creationType>()));
    }
  }; // VROSC.UI.ControlPanel
  #pragma pack(pop)
  static check_size<sizeof(ControlPanel), 68 + sizeof(::UnityEngine::Vector3)> __VROSC_UI_ControlPanelSizeCheck;
  static_assert(sizeof(ControlPanel) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UI::ControlPanel::GetCorrectPosition
// Il2CppName: GetCorrectPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::UI::ControlPanel::*)()>(&VROSC::UI::ControlPanel::GetCorrectPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::ControlPanel*), "GetCorrectPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::ControlPanel::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::ControlPanel::*)()>(&VROSC::UI::ControlPanel::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::ControlPanel*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::ControlPanel::ModifyPosition
// Il2CppName: ModifyPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (VROSC::UI::ControlPanel::*)(::UnityEngine::Vector3)>(&VROSC::UI::ControlPanel::ModifyPosition)> {
  static const MethodInfo* get() {
    static auto* correctPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::ControlPanel*), "ModifyPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{correctPosition});
  }
};
// Writing MetadataGetter for method: VROSC::UI::ControlPanel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
