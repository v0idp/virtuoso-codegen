// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.UI.Meshes.AdjustableMeshData
#include "VROSC/UI/Meshes/AdjustableMeshData.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UI::Meshes::AdjustableMeshData::VertexData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UI::Meshes::AdjustableMeshData::VertexData*, "VROSC.UI.Meshes", "AdjustableMeshData/VertexData");
// Type namespace: VROSC.UI.Meshes
namespace VROSC::UI::Meshes {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UI.Meshes.AdjustableMeshData/VROSC.UI.Meshes.VertexData
  // [TokenAttribute] Offset: FFFFFFFF
  class AdjustableMeshData::VertexData : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.Vector3 _originalPosition
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 originalPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector2 _scaling
    // Size: 0x8
    // Offset: 0x1C
    ::UnityEngine::Vector2 scaling;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Vector3 _originalPosition
    [[deprecated]] ::UnityEngine::Vector3& dyn__originalPosition();
    // Get instance field reference: private UnityEngine.Vector2 _scaling
    [[deprecated]] ::UnityEngine::Vector2& dyn__scaling();
    // public UnityEngine.Vector3 get_OriginalPosition()
    // Offset: 0x956318
    ::UnityEngine::Vector3 get_OriginalPosition();
    // public UnityEngine.Vector2 get_Scaling()
    // Offset: 0x956324
    ::UnityEngine::Vector2 get_Scaling();
    // public System.Void .ctor(UnityEngine.Vector3 position, UnityEngine.Vector2 scaling)
    // Offset: 0x95632C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdjustableMeshData::VertexData* New_ctor(::UnityEngine::Vector3 position, ::UnityEngine::Vector2 scaling) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UI::Meshes::AdjustableMeshData::VertexData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdjustableMeshData::VertexData*, creationType>(position, scaling)));
    }
  }; // VROSC.UI.Meshes.AdjustableMeshData/VROSC.UI.Meshes.VertexData
  #pragma pack(pop)
  static check_size<sizeof(AdjustableMeshData::VertexData), 28 + sizeof(::UnityEngine::Vector2)> __VROSC_UI_Meshes_AdjustableMeshData_VertexDataSizeCheck;
  static_assert(sizeof(AdjustableMeshData::VertexData) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UI::Meshes::AdjustableMeshData::VertexData::get_OriginalPosition
// Il2CppName: get_OriginalPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::UI::Meshes::AdjustableMeshData::VertexData::*)()>(&VROSC::UI::Meshes::AdjustableMeshData::VertexData::get_OriginalPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::AdjustableMeshData::VertexData*), "get_OriginalPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::AdjustableMeshData::VertexData::get_Scaling
// Il2CppName: get_Scaling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (VROSC::UI::Meshes::AdjustableMeshData::VertexData::*)()>(&VROSC::UI::Meshes::AdjustableMeshData::VertexData::get_Scaling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::AdjustableMeshData::VertexData*), "get_Scaling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::AdjustableMeshData::VertexData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
