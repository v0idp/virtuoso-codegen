// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.UI.Meshes.ProceduralMeshData
#include "VROSC/UI/Meshes/ProceduralMeshData.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector2 because it is already included!
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Rect
  struct Rect;
}
// Completed forward declares
// Type namespace: VROSC.UI.Meshes
namespace VROSC::UI::Meshes {
  // Forward declaring type: ProceduralChamferBox
  class ProceduralChamferBox;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UI::Meshes::ProceduralChamferBox);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UI::Meshes::ProceduralChamferBox*, "VROSC.UI.Meshes", "ProceduralChamferBox");
// Type namespace: VROSC.UI.Meshes
namespace VROSC::UI::Meshes {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UI.Meshes.ProceduralChamferBox
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: 66B354
  class ProceduralChamferBox : public ::VROSC::UI::Meshes::ProceduralMeshData {
    public:
    // Nested type: ::VROSC::UI::Meshes::ProceduralChamferBox::Type
    struct Type;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: VROSC.UI.Meshes.ProceduralChamferBox/VROSC.UI.Meshes.Type
    // [TokenAttribute] Offset: FFFFFFFF
    struct Type/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Type
      constexpr Type(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public VROSC.UI.Meshes.ProceduralChamferBox/VROSC.UI.Meshes.Type Full
      static constexpr const int Full = 0;
      // Get static field: static public VROSC.UI.Meshes.ProceduralChamferBox/VROSC.UI.Meshes.Type Full
      static ::VROSC::UI::Meshes::ProceduralChamferBox::Type _get_Full();
      // Set static field: static public VROSC.UI.Meshes.ProceduralChamferBox/VROSC.UI.Meshes.Type Full
      static void _set_Full(::VROSC::UI::Meshes::ProceduralChamferBox::Type value);
      // static field const value: static public VROSC.UI.Meshes.ProceduralChamferBox/VROSC.UI.Meshes.Type TopOnly
      static constexpr const int TopOnly = 1;
      // Get static field: static public VROSC.UI.Meshes.ProceduralChamferBox/VROSC.UI.Meshes.Type TopOnly
      static ::VROSC::UI::Meshes::ProceduralChamferBox::Type _get_TopOnly();
      // Set static field: static public VROSC.UI.Meshes.ProceduralChamferBox/VROSC.UI.Meshes.Type TopOnly
      static void _set_TopOnly(::VROSC::UI::Meshes::ProceduralChamferBox::Type value);
      // static field const value: static public VROSC.UI.Meshes.ProceduralChamferBox/VROSC.UI.Meshes.Type BottomOnly
      static constexpr const int BottomOnly = 2;
      // Get static field: static public VROSC.UI.Meshes.ProceduralChamferBox/VROSC.UI.Meshes.Type BottomOnly
      static ::VROSC::UI::Meshes::ProceduralChamferBox::Type _get_BottomOnly();
      // Set static field: static public VROSC.UI.Meshes.ProceduralChamferBox/VROSC.UI.Meshes.Type BottomOnly
      static void _set_BottomOnly(::VROSC::UI::Meshes::ProceduralChamferBox::Type value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // VROSC.UI.Meshes.ProceduralChamferBox/VROSC.UI.Meshes.Type
    #pragma pack(pop)
    static check_size<sizeof(ProceduralChamferBox::Type), 0 + sizeof(int)> __VROSC_UI_Meshes_ProceduralChamferBox_TypeSizeCheck;
    static_assert(sizeof(ProceduralChamferBox::Type) == 0x4);
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Int32 _chamferEdges
    // Size: 0x4
    // Offset: 0x40
    int chamferEdges;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private VROSC.UI.Meshes.ProceduralChamferBox/VROSC.UI.Meshes.Type _type
    // Size: 0x4
    // Offset: 0x44
    ::VROSC::UI::Meshes::ProceduralChamferBox::Type type;
    // Field size check
    static_assert(sizeof(::VROSC::UI::Meshes::ProceduralChamferBox::Type) == 0x4);
    // private System.Boolean _fillcenter
    // Size: 0x1
    // Offset: 0x48
    bool fillcenter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Int32 _chamferEdges
    int& dyn__chamferEdges();
    // Get instance field reference: private VROSC.UI.Meshes.ProceduralChamferBox/VROSC.UI.Meshes.Type _type
    ::VROSC::UI::Meshes::ProceduralChamferBox::Type& dyn__type();
    // Get instance field reference: private System.Boolean _fillcenter
    bool& dyn__fillcenter();
    // private System.Int32 GetVertCount()
    // Offset: 0x989E78
    int GetVertCount();
    // private System.Void OnValidate()
    // Offset: 0x989E98
    void OnValidate();
    // private System.Void AddCornerVerts(System.Collections.Generic.List`1<System.Int32> triangleList, System.Int32[,] corners, System.Int32 vertStart)
    // Offset: 0x98A2DC
    void AddCornerVerts(::System::Collections::Generic::List_1<int>* triangleList, ::ArrayW<int> corners, int vertStart);
    // private UnityEngine.Vector2 GetChamferPos(System.Single count, System.Single corner, System.Single radius)
    // Offset: 0x98AB60
    ::UnityEngine::Vector2 GetChamferPos(float count, float corner, float radius);
    // protected override System.Int32 get_VertCount()
    // Offset: 0x989E58
    // Implemented from: VROSC.UI.Meshes.ProceduralMeshData
    // Base method: System.Int32 ProceduralMeshData::get_VertCount()
    int get_VertCount();
    // public System.Void .ctor()
    // Offset: 0x98ABDC
    // Implemented from: VROSC.UI.Meshes.ProceduralMeshData
    // Base method: System.Void ProceduralMeshData::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProceduralChamferBox* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UI::Meshes::ProceduralChamferBox::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProceduralChamferBox*, creationType>()));
    }
    // protected override System.Void GetSharedMeshData(UnityEngine.Mesh mesh)
    // Offset: 0x989EB4
    // Implemented from: VROSC.UI.Meshes.ProceduralMeshData
    // Base method: System.Void ProceduralMeshData::GetSharedMeshData(UnityEngine.Mesh mesh)
    void GetSharedMeshData(::UnityEngine::Mesh* mesh);
    // public override System.Void SetMeshSize(UnityEngine.Mesh mesh, UnityEngine.Rect rect, System.Single depth, System.Single border, System.Single appear, VROSC.AnimatedAppear/VROSC.Mode mode)
    // Offset: 0x98A4B4
    // Implemented from: VROSC.UI.Meshes.ProceduralMeshData
    // Base method: System.Void ProceduralMeshData::SetMeshSize(UnityEngine.Mesh mesh, UnityEngine.Rect rect, System.Single depth, System.Single border, System.Single appear, VROSC.AnimatedAppear/VROSC.Mode mode)
    void SetMeshSize(::UnityEngine::Mesh* mesh, ::UnityEngine::Rect rect, float depth, float border, float appear, ::VROSC::AnimatedAppear::Mode mode);
  }; // VROSC.UI.Meshes.ProceduralChamferBox
  #pragma pack(pop)
  static check_size<sizeof(ProceduralChamferBox), 72 + sizeof(bool)> __VROSC_UI_Meshes_ProceduralChamferBoxSizeCheck;
  static_assert(sizeof(ProceduralChamferBox) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UI::Meshes::ProceduralChamferBox::Type, "VROSC.UI.Meshes", "ProceduralChamferBox/Type");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralChamferBox::GetVertCount
// Il2CppName: GetVertCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::UI::Meshes::ProceduralChamferBox::*)()>(&VROSC::UI::Meshes::ProceduralChamferBox::GetVertCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralChamferBox*), "GetVertCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralChamferBox::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ProceduralChamferBox::*)()>(&VROSC::UI::Meshes::ProceduralChamferBox::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralChamferBox*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralChamferBox::AddCornerVerts
// Il2CppName: AddCornerVerts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ProceduralChamferBox::*)(::System::Collections::Generic::List_1<int>*, ::ArrayW<int>, int)>(&VROSC::UI::Meshes::ProceduralChamferBox::AddCornerVerts)> {
  static const MethodInfo* get() {
    static auto* triangleList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* corners = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* vertStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralChamferBox*), "AddCornerVerts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangleList, corners, vertStart});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralChamferBox::GetChamferPos
// Il2CppName: GetChamferPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (VROSC::UI::Meshes::ProceduralChamferBox::*)(float, float, float)>(&VROSC::UI::Meshes::ProceduralChamferBox::GetChamferPos)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* corner = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralChamferBox*), "GetChamferPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count, corner, radius});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralChamferBox::get_VertCount
// Il2CppName: get_VertCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::UI::Meshes::ProceduralChamferBox::*)()>(&VROSC::UI::Meshes::ProceduralChamferBox::get_VertCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralChamferBox*), "get_VertCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralChamferBox::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralChamferBox::GetSharedMeshData
// Il2CppName: GetSharedMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ProceduralChamferBox::*)(::UnityEngine::Mesh*)>(&VROSC::UI::Meshes::ProceduralChamferBox::GetSharedMeshData)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralChamferBox*), "GetSharedMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralChamferBox::SetMeshSize
// Il2CppName: SetMeshSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ProceduralChamferBox::*)(::UnityEngine::Mesh*, ::UnityEngine::Rect, float, float, float, ::VROSC::AnimatedAppear::Mode)>(&VROSC::UI::Meshes::ProceduralChamferBox::SetMeshSize)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* border = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* appear = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("VROSC", "AnimatedAppear/Mode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralChamferBox*), "SetMeshSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, rect, depth, border, appear, mode});
  }
};
