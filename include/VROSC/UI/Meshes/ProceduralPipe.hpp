// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.UI.Meshes.ProceduralMeshData
#include "VROSC/UI/Meshes/ProceduralMeshData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector2 because it is already included!
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Rect
  struct Rect;
}
// Completed forward declares
// Type namespace: VROSC.UI.Meshes
namespace VROSC::UI::Meshes {
  // Forward declaring type: ProceduralPipe
  class ProceduralPipe;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UI::Meshes::ProceduralPipe);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UI::Meshes::ProceduralPipe*, "VROSC.UI.Meshes", "ProceduralPipe");
// Type namespace: VROSC.UI.Meshes
namespace VROSC::UI::Meshes {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UI.Meshes.ProceduralPipe
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: 7814C4
  class ProceduralPipe : public ::VROSC::UI::Meshes::ProceduralMeshData {
    public:
    public:
    // private System.Int32 _edges
    // Size: 0x4
    // Offset: 0x40
    int edges;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [RangeAttribute] Offset: 0x78E1C4
    // private System.Single _bottomRadius
    // Size: 0x4
    // Offset: 0x44
    float bottomRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x78E204
    // private System.Single _mouthWidth
    // Size: 0x4
    // Offset: 0x48
    float mouthWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x78E244
    // private System.Single _mouthHeight
    // Size: 0x4
    // Offset: 0x4C
    float mouthHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _mouthOpening
    // Size: 0x4
    // Offset: 0x50
    float mouthOpening;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x78E294
    // private System.Single _mouthFlat
    // Size: 0x4
    // Offset: 0x54
    float mouthFlat;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _mouthStart
    // Size: 0x4
    // Offset: 0x58
    int mouthStart;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _mouthEnd
    // Size: 0x4
    // Offset: 0x5C
    int mouthEnd;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _mouthVertCount
    // Size: 0x4
    // Offset: 0x60
    int mouthVertCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Int32 _edges
    [[deprecated("Use field access instead!")]] int& dyn__edges();
    // Get instance field reference: private System.Single _bottomRadius
    [[deprecated("Use field access instead!")]] float& dyn__bottomRadius();
    // Get instance field reference: private System.Single _mouthWidth
    [[deprecated("Use field access instead!")]] float& dyn__mouthWidth();
    // Get instance field reference: private System.Single _mouthHeight
    [[deprecated("Use field access instead!")]] float& dyn__mouthHeight();
    // Get instance field reference: private System.Single _mouthOpening
    [[deprecated("Use field access instead!")]] float& dyn__mouthOpening();
    // Get instance field reference: private System.Single _mouthFlat
    [[deprecated("Use field access instead!")]] float& dyn__mouthFlat();
    // Get instance field reference: private System.Int32 _mouthStart
    [[deprecated("Use field access instead!")]] int& dyn__mouthStart();
    // Get instance field reference: private System.Int32 _mouthEnd
    [[deprecated("Use field access instead!")]] int& dyn__mouthEnd();
    // Get instance field reference: private System.Int32 _mouthVertCount
    [[deprecated("Use field access instead!")]] int& dyn__mouthVertCount();
    // private System.Void OnValidate()
    // Offset: 0xB249DC
    void OnValidate();
    // private System.Int32 GetVertCount()
    // Offset: 0xB24948
    int GetVertCount();
    // private System.Single VertMultiplier(System.Int32 index)
    // Offset: 0xB249F4
    float VertMultiplier(int index);
    // private System.Void AddQuad(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32[] vx)
    // Offset: 0xB254A8
    void AddQuad(::System::Collections::Generic::List_1<int>* triangles, ::ArrayW<int> vx);
    // private UnityEngine.Vector2 GetCirclePosition(System.Single count)
    // Offset: 0xB25A34
    ::UnityEngine::Vector2 GetCirclePosition(float count);
    // protected override System.Int32 get_VertCount()
    // Offset: 0xB24944
    // Implemented from: VROSC.UI.Meshes.ProceduralMeshData
    // Base method: System.Int32 ProceduralMeshData::get_VertCount()
    int get_VertCount();
    // public System.Void .ctor()
    // Offset: 0xB25A8C
    // Implemented from: VROSC.UI.Meshes.ProceduralMeshData
    // Base method: System.Void ProceduralMeshData::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProceduralPipe* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UI::Meshes::ProceduralPipe::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProceduralPipe*, creationType>()));
    }
    // protected override System.Void GetSharedMeshData(UnityEngine.Mesh mesh)
    // Offset: 0xB24A60
    // Implemented from: VROSC.UI.Meshes.ProceduralMeshData
    // Base method: System.Void ProceduralMeshData::GetSharedMeshData(UnityEngine.Mesh mesh)
    void GetSharedMeshData(::UnityEngine::Mesh* mesh);
    // public override System.Void SetMeshSize(UnityEngine.Mesh mesh, UnityEngine.Rect rect, System.Single depth, System.Single border, System.Single appear, VROSC.AnimatedAppear/VROSC.Mode mode)
    // Offset: 0xB255E0
    // Implemented from: VROSC.UI.Meshes.ProceduralMeshData
    // Base method: System.Void ProceduralMeshData::SetMeshSize(UnityEngine.Mesh mesh, UnityEngine.Rect rect, System.Single depth, System.Single border, System.Single appear, VROSC.AnimatedAppear/VROSC.Mode mode)
    void SetMeshSize(::UnityEngine::Mesh* mesh, ::UnityEngine::Rect rect, float depth, float border, float appear, ::VROSC::AnimatedAppear::Mode mode);
  }; // VROSC.UI.Meshes.ProceduralPipe
  #pragma pack(pop)
  static check_size<sizeof(ProceduralPipe), 96 + sizeof(int)> __VROSC_UI_Meshes_ProceduralPipeSizeCheck;
  static_assert(sizeof(ProceduralPipe) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralPipe::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ProceduralPipe::*)()>(&VROSC::UI::Meshes::ProceduralPipe::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralPipe*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralPipe::GetVertCount
// Il2CppName: GetVertCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::UI::Meshes::ProceduralPipe::*)()>(&VROSC::UI::Meshes::ProceduralPipe::GetVertCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralPipe*), "GetVertCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralPipe::VertMultiplier
// Il2CppName: VertMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::UI::Meshes::ProceduralPipe::*)(int)>(&VROSC::UI::Meshes::ProceduralPipe::VertMultiplier)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralPipe*), "VertMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralPipe::AddQuad
// Il2CppName: AddQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ProceduralPipe::*)(::System::Collections::Generic::List_1<int>*, ::ArrayW<int>)>(&VROSC::UI::Meshes::ProceduralPipe::AddQuad)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* vx = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralPipe*), "AddQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, vx});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralPipe::GetCirclePosition
// Il2CppName: GetCirclePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (VROSC::UI::Meshes::ProceduralPipe::*)(float)>(&VROSC::UI::Meshes::ProceduralPipe::GetCirclePosition)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralPipe*), "GetCirclePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralPipe::get_VertCount
// Il2CppName: get_VertCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::UI::Meshes::ProceduralPipe::*)()>(&VROSC::UI::Meshes::ProceduralPipe::get_VertCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralPipe*), "get_VertCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralPipe::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralPipe::GetSharedMeshData
// Il2CppName: GetSharedMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ProceduralPipe::*)(::UnityEngine::Mesh*)>(&VROSC::UI::Meshes::ProceduralPipe::GetSharedMeshData)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralPipe*), "GetSharedMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralPipe::SetMeshSize
// Il2CppName: SetMeshSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ProceduralPipe::*)(::UnityEngine::Mesh*, ::UnityEngine::Rect, float, float, float, ::VROSC::AnimatedAppear::Mode)>(&VROSC::UI::Meshes::ProceduralPipe::SetMeshSize)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* border = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* appear = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("VROSC", "AnimatedAppear/Mode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralPipe*), "SetMeshSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, rect, depth, border, appear, mode});
  }
};
