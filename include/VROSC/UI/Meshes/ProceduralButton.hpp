// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.UI.Meshes.ProceduralMeshData
#include "VROSC/UI/Meshes/ProceduralMeshData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC::UI
namespace VROSC::UI {
  // Forward declaring type: UITwoToneColor
  class UITwoToneColor;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector2 because it is already included!
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Rect
  struct Rect;
}
// Completed forward declares
// Type namespace: VROSC.UI.Meshes
namespace VROSC::UI::Meshes {
  // Forward declaring type: ProceduralButton
  class ProceduralButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UI::Meshes::ProceduralButton);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UI::Meshes::ProceduralButton*, "VROSC.UI.Meshes", "ProceduralButton");
// Type namespace: VROSC.UI.Meshes
namespace VROSC::UI::Meshes {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UI.Meshes.ProceduralButton
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: 7812CC
  class ProceduralButton : public ::VROSC::UI::Meshes::ProceduralMeshData {
    public:
    public:
    // private System.Int32 _edges
    // Size: 0x4
    // Offset: 0x40
    int edges;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _cap
    // Size: 0x1
    // Offset: 0x44
    bool cap;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _edge
    // Size: 0x1
    // Offset: 0x45
    bool edge;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _separateCap
    // Size: 0x1
    // Offset: 0x46
    bool separateCap;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: separateCap and: sideColors
    char __padding3[0x1] = {};
    // private VROSC.UI.UITwoToneColor _sideColors
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::UI::UITwoToneColor* sideColors;
    // Field size check
    static_assert(sizeof(::VROSC::UI::UITwoToneColor*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 _edges
    [[deprecated("Use field access instead!")]] int& dyn__edges();
    // Get instance field reference: private System.Boolean _cap
    [[deprecated("Use field access instead!")]] bool& dyn__cap();
    // Get instance field reference: private System.Boolean _edge
    [[deprecated("Use field access instead!")]] bool& dyn__edge();
    // Get instance field reference: private System.Boolean _separateCap
    [[deprecated("Use field access instead!")]] bool& dyn__separateCap();
    // Get instance field reference: private VROSC.UI.UITwoToneColor _sideColors
    [[deprecated("Use field access instead!")]] ::VROSC::UI::UITwoToneColor*& dyn__sideColors();
    // private System.Int32 get_edgeVertexPairs()
    // Offset: 0xAE7A44
    int get_edgeVertexPairs();
    // private System.Int32 GetVertexCount()
    // Offset: 0xAE7A08
    int GetVertexCount();
    // private System.Void OnValidate()
    // Offset: 0xAE7A50
    void OnValidate();
    // private UnityEngine.Vector2 GetCirclePosition(System.Single count)
    // Offset: 0xAE8364
    ::UnityEngine::Vector2 GetCirclePosition(float count);
    // protected override System.Int32 get_VertCount()
    // Offset: 0xAE79CC
    // Implemented from: VROSC.UI.Meshes.ProceduralMeshData
    // Base method: System.Int32 ProceduralMeshData::get_VertCount()
    int get_VertCount();
    // public System.Void .ctor()
    // Offset: 0xAE83BC
    // Implemented from: VROSC.UI.Meshes.ProceduralMeshData
    // Base method: System.Void ProceduralMeshData::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProceduralButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UI::Meshes::ProceduralButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProceduralButton*, creationType>()));
    }
    // protected override System.Void GetSharedMeshData(UnityEngine.Mesh mesh)
    // Offset: 0xAE7A68
    // Implemented from: VROSC.UI.Meshes.ProceduralMeshData
    // Base method: System.Void ProceduralMeshData::GetSharedMeshData(UnityEngine.Mesh mesh)
    void GetSharedMeshData(::UnityEngine::Mesh* mesh);
    // public override System.Void SetMeshSize(UnityEngine.Mesh mesh, UnityEngine.Rect rect, System.Single depth, System.Single border, System.Single appear, VROSC.AnimatedAppear/VROSC.Mode mode)
    // Offset: 0xAE8008
    // Implemented from: VROSC.UI.Meshes.ProceduralMeshData
    // Base method: System.Void ProceduralMeshData::SetMeshSize(UnityEngine.Mesh mesh, UnityEngine.Rect rect, System.Single depth, System.Single border, System.Single appear, VROSC.AnimatedAppear/VROSC.Mode mode)
    void SetMeshSize(::UnityEngine::Mesh* mesh, ::UnityEngine::Rect rect, float depth, float border, float appear, ::VROSC::AnimatedAppear::Mode mode);
  }; // VROSC.UI.Meshes.ProceduralButton
  #pragma pack(pop)
  static check_size<sizeof(ProceduralButton), 72 + sizeof(::VROSC::UI::UITwoToneColor*)> __VROSC_UI_Meshes_ProceduralButtonSizeCheck;
  static_assert(sizeof(ProceduralButton) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralButton::get_edgeVertexPairs
// Il2CppName: get_edgeVertexPairs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::UI::Meshes::ProceduralButton::*)()>(&VROSC::UI::Meshes::ProceduralButton::get_edgeVertexPairs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralButton*), "get_edgeVertexPairs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralButton::GetVertexCount
// Il2CppName: GetVertexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::UI::Meshes::ProceduralButton::*)()>(&VROSC::UI::Meshes::ProceduralButton::GetVertexCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralButton*), "GetVertexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralButton::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ProceduralButton::*)()>(&VROSC::UI::Meshes::ProceduralButton::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralButton*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralButton::GetCirclePosition
// Il2CppName: GetCirclePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (VROSC::UI::Meshes::ProceduralButton::*)(float)>(&VROSC::UI::Meshes::ProceduralButton::GetCirclePosition)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralButton*), "GetCirclePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralButton::get_VertCount
// Il2CppName: get_VertCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::UI::Meshes::ProceduralButton::*)()>(&VROSC::UI::Meshes::ProceduralButton::get_VertCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralButton*), "get_VertCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralButton::GetSharedMeshData
// Il2CppName: GetSharedMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ProceduralButton::*)(::UnityEngine::Mesh*)>(&VROSC::UI::Meshes::ProceduralButton::GetSharedMeshData)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralButton*), "GetSharedMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ProceduralButton::SetMeshSize
// Il2CppName: SetMeshSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ProceduralButton::*)(::UnityEngine::Mesh*, ::UnityEngine::Rect, float, float, float, ::VROSC::AnimatedAppear::Mode)>(&VROSC::UI::Meshes::ProceduralButton::SetMeshSize)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* border = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* appear = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("VROSC", "AnimatedAppear/Mode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ProceduralButton*), "SetMeshSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, rect, depth, border, appear, mode});
  }
};
