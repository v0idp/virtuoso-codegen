// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Rect
  struct Rect;
}
// Completed forward declares
// Type namespace: VROSC.UI.Meshes
namespace VROSC::UI::Meshes {
  // Forward declaring type: ColorPickerMesh
  class ColorPickerMesh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UI::Meshes::ColorPickerMesh);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UI::Meshes::ColorPickerMesh*, "VROSC.UI.Meshes", "ColorPickerMesh");
// Type namespace: VROSC.UI.Meshes
namespace VROSC::UI::Meshes {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UI.Meshes.ColorPickerMesh
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 781184
  // [RequireComponent] Offset: 781184
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class ColorPickerMesh : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.RectTransform _rectTransform
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::RectTransform* rectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.MeshFilter _meshFilter
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::MeshFilter* meshFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // private UnityEngine.Vector3[] _vertices
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Vector3> vertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector3[] _normals
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Vector3> normals;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Color[] _colors
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Color> colors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // private System.Int32[] _tris
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<int> tris;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private UnityEngine.Mesh _mesh
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Mesh* mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.RectTransform _rectTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__rectTransform();
    // Get instance field reference: private UnityEngine.MeshFilter _meshFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn__meshFilter();
    // Get instance field reference: private UnityEngine.Vector3[] _vertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn__vertices();
    // Get instance field reference: private UnityEngine.Vector3[] _normals
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn__normals();
    // Get instance field reference: private UnityEngine.Color[] _colors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn__colors();
    // Get instance field reference: private System.Int32[] _tris
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__tris();
    // Get instance field reference: private UnityEngine.Mesh _mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn__mesh();
    // public System.Void .ctor()
    // Offset: 0x9491C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColorPickerMesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UI::Meshes::ColorPickerMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColorPickerMesh*, creationType>()));
    }
    // private System.Void GetRequiredCompontents()
    // Offset: 0x948614
    void GetRequiredCompontents();
    // public System.Void Create(System.Boolean forceGeneration)
    // Offset: 0x948718
    void Create(bool forceGeneration);
    // private System.Void Generate()
    // Offset: 0x948850
    void Generate();
    // private System.Void SetMeshSize(UnityEngine.Mesh mesh, UnityEngine.Rect rect)
    // Offset: 0x948A04
    void SetMeshSize(::UnityEngine::Mesh* mesh, ::UnityEngine::Rect rect);
    // public System.Void SetAsHueIntensity()
    // Offset: 0x948B54
    void SetAsHueIntensity();
    // public System.Void SetAsHueSaturation()
    // Offset: 0x948C98
    void SetAsHueSaturation();
    // public System.Void SetAsMiniHue()
    // Offset: 0x948DDC
    void SetAsMiniHue();
    // public System.Void SetAsMiniSaturation(System.Single hue, System.Single value)
    // Offset: 0x948F20
    void SetAsMiniSaturation(float hue, float value);
    // public System.Void SetAsMiniValue(System.Single hue, System.Single saturation)
    // Offset: 0x949074
    void SetAsMiniValue(float hue, float saturation);
  }; // VROSC.UI.Meshes.ColorPickerMesh
  #pragma pack(pop)
  static check_size<sizeof(ColorPickerMesh), 72 + sizeof(::UnityEngine::Mesh*)> __VROSC_UI_Meshes_ColorPickerMeshSizeCheck;
  static_assert(sizeof(ColorPickerMesh) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UI::Meshes::ColorPickerMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::UI::Meshes::ColorPickerMesh::GetRequiredCompontents
// Il2CppName: GetRequiredCompontents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ColorPickerMesh::*)()>(&VROSC::UI::Meshes::ColorPickerMesh::GetRequiredCompontents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ColorPickerMesh*), "GetRequiredCompontents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ColorPickerMesh::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ColorPickerMesh::*)(bool)>(&VROSC::UI::Meshes::ColorPickerMesh::Create)> {
  static const MethodInfo* get() {
    static auto* forceGeneration = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ColorPickerMesh*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forceGeneration});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ColorPickerMesh::Generate
// Il2CppName: Generate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ColorPickerMesh::*)()>(&VROSC::UI::Meshes::ColorPickerMesh::Generate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ColorPickerMesh*), "Generate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ColorPickerMesh::SetMeshSize
// Il2CppName: SetMeshSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ColorPickerMesh::*)(::UnityEngine::Mesh*, ::UnityEngine::Rect)>(&VROSC::UI::Meshes::ColorPickerMesh::SetMeshSize)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ColorPickerMesh*), "SetMeshSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, rect});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ColorPickerMesh::SetAsHueIntensity
// Il2CppName: SetAsHueIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ColorPickerMesh::*)()>(&VROSC::UI::Meshes::ColorPickerMesh::SetAsHueIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ColorPickerMesh*), "SetAsHueIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ColorPickerMesh::SetAsHueSaturation
// Il2CppName: SetAsHueSaturation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ColorPickerMesh::*)()>(&VROSC::UI::Meshes::ColorPickerMesh::SetAsHueSaturation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ColorPickerMesh*), "SetAsHueSaturation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ColorPickerMesh::SetAsMiniHue
// Il2CppName: SetAsMiniHue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ColorPickerMesh::*)()>(&VROSC::UI::Meshes::ColorPickerMesh::SetAsMiniHue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ColorPickerMesh*), "SetAsMiniHue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ColorPickerMesh::SetAsMiniSaturation
// Il2CppName: SetAsMiniSaturation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ColorPickerMesh::*)(float, float)>(&VROSC::UI::Meshes::ColorPickerMesh::SetAsMiniSaturation)> {
  static const MethodInfo* get() {
    static auto* hue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ColorPickerMesh*), "SetAsMiniSaturation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hue, value});
  }
};
// Writing MetadataGetter for method: VROSC::UI::Meshes::ColorPickerMesh::SetAsMiniValue
// Il2CppName: SetAsMiniValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::Meshes::ColorPickerMesh::*)(float, float)>(&VROSC::UI::Meshes::ColorPickerMesh::SetAsMiniValue)> {
  static const MethodInfo* get() {
    static auto* hue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* saturation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::Meshes::ColorPickerMesh*), "SetAsMiniValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hue, saturation});
  }
};
