// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC::UI
namespace VROSC::UI {
  // Forward declaring type: UIExplicitColor
  class UIExplicitColor;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Interactable
  class Interactable;
}
// Completed forward declares
// Type namespace: VROSC.UI
namespace VROSC::UI {
  // Forward declaring type: UIColorGetter
  class UIColorGetter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UI::UIColorGetter);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UI::UIColorGetter*, "VROSC.UI", "UIColorGetter");
// Type namespace: VROSC.UI
namespace VROSC::UI {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UI.UIColorGetter
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: 780F5C
  class UIColorGetter : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // protected VROSC.UI.UIExplicitColor _color
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::UI::UIExplicitColor* color;
    // Field size check
    static_assert(sizeof(::VROSC::UI::UIExplicitColor*) == 0x8);
    // public System.Action OnColorChange
    // Size: 0x8
    // Offset: 0x20
    ::System::Action* OnColorChange;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: protected VROSC.UI.UIExplicitColor _color
    [[deprecated]] ::VROSC::UI::UIExplicitColor*& dyn__color();
    // Get instance field reference: public System.Action OnColorChange
    [[deprecated]] ::System::Action*& dyn_OnColorChange();
    // public UnityEngine.Color GetDefaultColor(System.Boolean isDisabled)
    // Offset: 0xA33E74
    ::UnityEngine::Color GetDefaultColor(bool isDisabled);
    // public UnityEngine.Color GetColor(VROSC.Interactable interactable)
    // Offset: 0xA33EC4
    ::UnityEngine::Color GetColor(::VROSC::Interactable* interactable);
    // public UnityEngine.Color GetColor(System.Boolean disabled, System.Boolean hovering)
    // Offset: 0xA33F78
    ::UnityEngine::Color GetColor(bool disabled, bool hovering);
    // public System.Void SetColor(VROSC.UI.UIExplicitColor color)
    // Offset: 0xA33FE8
    void SetColor(::VROSC::UI::UIExplicitColor* color);
    // public System.Void .ctor()
    // Offset: 0xA34030
    // Implemented from: UnityEngine.ScriptableObject
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIColorGetter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UI::UIColorGetter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIColorGetter*, creationType>()));
    }
  }; // VROSC.UI.UIColorGetter
  #pragma pack(pop)
  static check_size<sizeof(UIColorGetter), 32 + sizeof(::System::Action*)> __VROSC_UI_UIColorGetterSizeCheck;
  static_assert(sizeof(UIColorGetter) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UI::UIColorGetter::GetDefaultColor
// Il2CppName: GetDefaultColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::UI::UIColorGetter::*)(bool)>(&VROSC::UI::UIColorGetter::GetDefaultColor)> {
  static const MethodInfo* get() {
    static auto* isDisabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIColorGetter*), "GetDefaultColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isDisabled});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIColorGetter::GetColor
// Il2CppName: GetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::UI::UIColorGetter::*)(::VROSC::Interactable*)>(&VROSC::UI::UIColorGetter::GetColor)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("VROSC", "Interactable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIColorGetter*), "GetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIColorGetter::GetColor
// Il2CppName: GetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::UI::UIColorGetter::*)(bool, bool)>(&VROSC::UI::UIColorGetter::GetColor)> {
  static const MethodInfo* get() {
    static auto* disabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hovering = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIColorGetter*), "GetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disabled, hovering});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIColorGetter::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::UIColorGetter::*)(::VROSC::UI::UIExplicitColor*)>(&VROSC::UI::UIColorGetter::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("VROSC.UI", "UIExplicitColor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::UIColorGetter*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::UI::UIColorGetter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
