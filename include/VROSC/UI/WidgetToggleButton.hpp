// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.WidgetSettings/VROSC.Identifier
#include "VROSC/WidgetSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: UIToggle
  class UIToggle;
  // Forward declaring type: WidgetController
  class WidgetController;
  // Forward declaring type: TooltipData
  class TooltipData;
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: VROSC::UI
namespace VROSC::UI {
  // Forward declaring type: WidgetToggleMoverRelay
  class WidgetToggleMoverRelay;
  // Forward declaring type: UIInteractableColoring
  class UIInteractableColoring;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: VROSC.UI
namespace VROSC::UI {
  // Forward declaring type: WidgetToggleButton
  class WidgetToggleButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UI::WidgetToggleButton);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UI::WidgetToggleButton*, "VROSC.UI", "WidgetToggleButton");
// Type namespace: VROSC.UI
namespace VROSC::UI {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UI.WidgetToggleButton
  // [TokenAttribute] Offset: FFFFFFFF
  class WidgetToggleButton : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.UIToggle _toggle
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::UIToggle* toggle;
    // Field size check
    static_assert(sizeof(::VROSC::UIToggle*) == 0x8);
    // private TMPro.TextMeshPro _name
    // Size: 0x8
    // Offset: 0x20
    ::TMPro::TextMeshPro* name;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private VROSC.WidgetSettings/VROSC.Identifier _id
    // Size: 0x4
    // Offset: 0x28
    ::VROSC::WidgetSettings::Identifier id;
    // Field size check
    static_assert(sizeof(::VROSC::WidgetSettings::Identifier) == 0x4);
    // Padding between fields: id and: isOnObject
    char __padding2[0x4] = {};
    // private UnityEngine.GameObject _isOnObject
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* isOnObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private VROSC.UI.WidgetToggleMoverRelay _mover
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::UI::WidgetToggleMoverRelay* mover;
    // Field size check
    static_assert(sizeof(::VROSC::UI::WidgetToggleMoverRelay*) == 0x8);
    // private VROSC.UI.UIInteractableColoring[] _icons
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::VROSC::UI::UIInteractableColoring*> icons;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::UI::UIInteractableColoring*>) == 0x8);
    // private System.Boolean _isActive
    // Size: 0x1
    // Offset: 0x48
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isActive and: widgetController
    char __padding6[0x7] = {};
    // private VROSC.WidgetController _widgetController
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::WidgetController* widgetController;
    // Field size check
    static_assert(sizeof(::VROSC::WidgetController*) == 0x8);
    // private UnityEngine.Transform _parentPanel
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Transform* parentPanel;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private VROSC.TooltipData _triggerTooltipData
    // Size: 0x8
    // Offset: 0x60
    ::VROSC::TooltipData* triggerTooltipData;
    // Field size check
    static_assert(sizeof(::VROSC::TooltipData*) == 0x8);
    // private VROSC.TooltipData _gripTooltipData
    // Size: 0x8
    // Offset: 0x68
    ::VROSC::TooltipData* gripTooltipData;
    // Field size check
    static_assert(sizeof(::VROSC::TooltipData*) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.TooltipData> _tooltipDatas
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::VROSC::TooltipData*>* tooltipDatas;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::TooltipData*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.UIToggle _toggle
    [[deprecated("Use field access instead!")]] ::VROSC::UIToggle*& dyn__toggle();
    // Get instance field reference: private TMPro.TextMeshPro _name
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& dyn__name();
    // Get instance field reference: private VROSC.WidgetSettings/VROSC.Identifier _id
    [[deprecated("Use field access instead!")]] ::VROSC::WidgetSettings::Identifier& dyn__id();
    // Get instance field reference: private UnityEngine.GameObject _isOnObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__isOnObject();
    // Get instance field reference: private VROSC.UI.WidgetToggleMoverRelay _mover
    [[deprecated("Use field access instead!")]] ::VROSC::UI::WidgetToggleMoverRelay*& dyn__mover();
    // Get instance field reference: private VROSC.UI.UIInteractableColoring[] _icons
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::UI::UIInteractableColoring*>& dyn__icons();
    // Get instance field reference: private System.Boolean _isActive
    [[deprecated("Use field access instead!")]] bool& dyn__isActive();
    // Get instance field reference: private VROSC.WidgetController _widgetController
    [[deprecated("Use field access instead!")]] ::VROSC::WidgetController*& dyn__widgetController();
    // Get instance field reference: private UnityEngine.Transform _parentPanel
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__parentPanel();
    // Get instance field reference: private VROSC.TooltipData _triggerTooltipData
    [[deprecated("Use field access instead!")]] ::VROSC::TooltipData*& dyn__triggerTooltipData();
    // Get instance field reference: private VROSC.TooltipData _gripTooltipData
    [[deprecated("Use field access instead!")]] ::VROSC::TooltipData*& dyn__gripTooltipData();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.TooltipData> _tooltipDatas
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VROSC::TooltipData*>*& dyn__tooltipDatas();
    // public System.Void .ctor()
    // Offset: 0x9533EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WidgetToggleButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UI::WidgetToggleButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WidgetToggleButton*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x952A70
    void Awake();
    // private System.Void Start()
    // Offset: 0x952B5C
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x953074
    void OnDestroy();
    // private System.Void Toggled(VROSC.InputDevice device, System.Boolean active)
    // Offset: 0x953208
    void Toggled(::VROSC::InputDevice* device, bool active);
    // private System.Void UpdateIsActive(System.Boolean isActive)
    // Offset: 0x953298
    void UpdateIsActive(bool isActive);
    // private System.Void CheckIfActive()
    // Offset: 0x952F74
    void CheckIfActive();
    // private System.Void SynthesizerChanged(System.Boolean isExternalSynth)
    // Offset: 0x9532C0
    void SynthesizerChanged(bool isExternalSynth);
    // private System.Void UpdateTooltips(System.Boolean unused)
    // Offset: 0x952FDC
    void UpdateTooltips(bool unused);
  }; // VROSC.UI.WidgetToggleButton
  #pragma pack(pop)
  static check_size<sizeof(WidgetToggleButton), 112 + sizeof(::System::Collections::Generic::List_1<::VROSC::TooltipData*>*)> __VROSC_UI_WidgetToggleButtonSizeCheck;
  static_assert(sizeof(WidgetToggleButton) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UI::WidgetToggleButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::UI::WidgetToggleButton::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::WidgetToggleButton::*)()>(&VROSC::UI::WidgetToggleButton::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::WidgetToggleButton*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::WidgetToggleButton::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::WidgetToggleButton::*)()>(&VROSC::UI::WidgetToggleButton::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::WidgetToggleButton*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::WidgetToggleButton::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::WidgetToggleButton::*)()>(&VROSC::UI::WidgetToggleButton::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::WidgetToggleButton*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::WidgetToggleButton::Toggled
// Il2CppName: Toggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::WidgetToggleButton::*)(::VROSC::InputDevice*, bool)>(&VROSC::UI::WidgetToggleButton::Toggled)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::WidgetToggleButton*), "Toggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, active});
  }
};
// Writing MetadataGetter for method: VROSC::UI::WidgetToggleButton::UpdateIsActive
// Il2CppName: UpdateIsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::WidgetToggleButton::*)(bool)>(&VROSC::UI::WidgetToggleButton::UpdateIsActive)> {
  static const MethodInfo* get() {
    static auto* isActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::WidgetToggleButton*), "UpdateIsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isActive});
  }
};
// Writing MetadataGetter for method: VROSC::UI::WidgetToggleButton::CheckIfActive
// Il2CppName: CheckIfActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::WidgetToggleButton::*)()>(&VROSC::UI::WidgetToggleButton::CheckIfActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::WidgetToggleButton*), "CheckIfActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UI::WidgetToggleButton::SynthesizerChanged
// Il2CppName: SynthesizerChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::WidgetToggleButton::*)(bool)>(&VROSC::UI::WidgetToggleButton::SynthesizerChanged)> {
  static const MethodInfo* get() {
    static auto* isExternalSynth = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::WidgetToggleButton*), "SynthesizerChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isExternalSynth});
  }
};
// Writing MetadataGetter for method: VROSC::UI::WidgetToggleButton::UpdateTooltips
// Il2CppName: UpdateTooltips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UI::WidgetToggleButton::*)(bool)>(&VROSC::UI::WidgetToggleButton::UpdateTooltips)> {
  static const MethodInfo* get() {
    static auto* unused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UI::WidgetToggleButton*), "UpdateTooltips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unused});
  }
};
