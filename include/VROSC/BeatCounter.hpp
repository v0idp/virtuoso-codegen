// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Metronome
  class Metronome;
  // Forward declaring type: BeatCounterUI
  class BeatCounterUI;
  // Skipping declaration: SyncSource because it is already included!
  // Forward declaring type: UserDataControllers
  class UserDataControllers;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: BeatCounter
  class BeatCounter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::BeatCounter);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::BeatCounter*, "VROSC", "BeatCounter");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x66
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.BeatCounter
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatCounter : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::BeatCounter::SyncSource
    struct SyncSource;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: VROSC.BeatCounter/VROSC.SyncSource
    // [TokenAttribute] Offset: FFFFFFFF
    struct SyncSource/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SyncSource
      constexpr SyncSource(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public VROSC.BeatCounter/VROSC.SyncSource Looper
      static constexpr const int Looper = 0;
      // Get static field: static public VROSC.BeatCounter/VROSC.SyncSource Looper
      static ::VROSC::BeatCounter::SyncSource _get_Looper();
      // Set static field: static public VROSC.BeatCounter/VROSC.SyncSource Looper
      static void _set_Looper(::VROSC::BeatCounter::SyncSource value);
      // static field const value: static public VROSC.BeatCounter/VROSC.SyncSource BeatCounter
      static constexpr const int BeatCounter = 1;
      // Get static field: static public VROSC.BeatCounter/VROSC.SyncSource BeatCounter
      static ::VROSC::BeatCounter::SyncSource _get_BeatCounter();
      // Set static field: static public VROSC.BeatCounter/VROSC.SyncSource BeatCounter
      static void _set_BeatCounter(::VROSC::BeatCounter::SyncSource value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // VROSC.BeatCounter/VROSC.SyncSource
    #pragma pack(pop)
    static check_size<sizeof(BeatCounter::SyncSource), 0 + sizeof(int)> __VROSC_BeatCounter_SyncSourceSizeCheck;
    static_assert(sizeof(BeatCounter::SyncSource) == 0x4);
    public:
    // private VROSC.Metronome _metronome
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::Metronome* metronome;
    // Field size check
    static_assert(sizeof(::VROSC::Metronome*) == 0x8);
    // private VROSC.BeatCounterUI _beatCounterUI
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::BeatCounterUI* beatCounterUI;
    // Field size check
    static_assert(sizeof(::VROSC::BeatCounterUI*) == 0x8);
    // private UnityEngine.AudioSource _beatCounterAudioSource
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AudioSource* beatCounterAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Single _lastFrameVisualBarProgress
    // Size: 0x4
    // Offset: 0x30
    float lastFrameVisualBarProgress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <BPM>k__BackingField
    // Size: 0x4
    // Offset: 0x34
    float BPM;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 <BeatsPerBar>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    int BeatsPerBar;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <BeatLengthInSamples>k__BackingField
    // Size: 0x4
    // Offset: 0x3C
    int BeatLengthInSamples;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private VROSC.BeatCounter/VROSC.SyncSource <CurrentSyncSource>k__BackingField
    // Size: 0x4
    // Offset: 0x40
    ::VROSC::BeatCounter::SyncSource CurrentSyncSource;
    // Field size check
    static_assert(sizeof(::VROSC::BeatCounter::SyncSource) == 0x4);
    // private System.Int32 <CurrentSyncSample>k__BackingField
    // Size: 0x4
    // Offset: 0x44
    int CurrentSyncSample;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single <AudioBarProgress>k__BackingField
    // Size: 0x4
    // Offset: 0x48
    float AudioBarProgress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 <AudioBarNumber>k__BackingField
    // Size: 0x4
    // Offset: 0x4C
    int AudioBarNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single <VisualBarProgress>k__BackingField
    // Size: 0x4
    // Offset: 0x50
    float VisualBarProgress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 <VisualBarNumber>k__BackingField
    // Size: 0x4
    // Offset: 0x54
    int VisualBarNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <IsVisualBeatFrame>k__BackingField
    // Size: 0x1
    // Offset: 0x58
    bool IsVisualBeatFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsVisualBeatFrame and: VisualCurrentBeat
    char __padding13[0x3] = {};
    // private System.Int32 <VisualCurrentBeat>k__BackingField
    // Size: 0x4
    // Offset: 0x5C
    int VisualCurrentBeat;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single <LooperMaxBPM>k__BackingField
    // Size: 0x4
    // Offset: 0x60
    float LooperMaxBPM;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <IsSetup>k__BackingField
    // Size: 0x1
    // Offset: 0x64
    bool IsSetup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IsPlaying>k__BackingField
    // Size: 0x1
    // Offset: 0x65
    bool IsPlaying;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.Single LooperMinBPM
    static constexpr const float LooperMinBPM = 75;
    // Get static field: static public System.Single LooperMinBPM
    static float _get_LooperMinBPM();
    // Set static field: static public System.Single LooperMinBPM
    static void _set_LooperMinBPM(float value);
    // static field const value: static public System.Single ManualMinBPM
    static constexpr const float ManualMinBPM = 60;
    // Get static field: static public System.Single ManualMinBPM
    static float _get_ManualMinBPM();
    // Set static field: static public System.Single ManualMinBPM
    static void _set_ManualMinBPM(float value);
    // static field const value: static public System.Single ManualMaxBPM
    static constexpr const float ManualMaxBPM = 180;
    // Get static field: static public System.Single ManualMaxBPM
    static float _get_ManualMaxBPM();
    // Set static field: static public System.Single ManualMaxBPM
    static void _set_ManualMaxBPM(float value);
    // static field const value: static public System.Single DefaultBPM
    static constexpr const float DefaultBPM = 120;
    // Get static field: static public System.Single DefaultBPM
    static float _get_DefaultBPM();
    // Set static field: static public System.Single DefaultBPM
    static void _set_DefaultBPM(float value);
    // Get static field: static public System.Action`1<VROSC.BeatCounter/VROSC.SyncSource> OnSyncSourceChanged
    static ::System::Action_1<::VROSC::BeatCounter::SyncSource>* _get_OnSyncSourceChanged();
    // Set static field: static public System.Action`1<VROSC.BeatCounter/VROSC.SyncSource> OnSyncSourceChanged
    static void _set_OnSyncSourceChanged(::System::Action_1<::VROSC::BeatCounter::SyncSource>* value);
    // Get static field: static public System.Action`1<System.Int32> OnBeatsPerBarChanged
    static ::System::Action_1<int>* _get_OnBeatsPerBarChanged();
    // Set static field: static public System.Action`1<System.Int32> OnBeatsPerBarChanged
    static void _set_OnBeatsPerBarChanged(::System::Action_1<int>* value);
    // Get static field: static public System.Action`1<System.Single> OnBPMChanged
    static ::System::Action_1<float>* _get_OnBPMChanged();
    // Set static field: static public System.Action`1<System.Single> OnBPMChanged
    static void _set_OnBPMChanged(::System::Action_1<float>* value);
    // Get static field: static public System.Action`1<System.Int32> OnVisualBeat
    static ::System::Action_1<int>* _get_OnVisualBeat();
    // Set static field: static public System.Action`1<System.Int32> OnVisualBeat
    static void _set_OnVisualBeat(::System::Action_1<int>* value);
    // Get instance field reference: private VROSC.Metronome _metronome
    [[deprecated("Use field access instead!")]] ::VROSC::Metronome*& dyn__metronome();
    // Get instance field reference: private VROSC.BeatCounterUI _beatCounterUI
    [[deprecated("Use field access instead!")]] ::VROSC::BeatCounterUI*& dyn__beatCounterUI();
    // Get instance field reference: private UnityEngine.AudioSource _beatCounterAudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn__beatCounterAudioSource();
    // Get instance field reference: private System.Single _lastFrameVisualBarProgress
    [[deprecated("Use field access instead!")]] float& dyn__lastFrameVisualBarProgress();
    // Get instance field reference: private System.Single <BPM>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$BPM$k__BackingField();
    // Get instance field reference: private System.Int32 <BeatsPerBar>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$BeatsPerBar$k__BackingField();
    // Get instance field reference: private System.Int32 <BeatLengthInSamples>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$BeatLengthInSamples$k__BackingField();
    // Get instance field reference: private VROSC.BeatCounter/VROSC.SyncSource <CurrentSyncSource>k__BackingField
    [[deprecated("Use field access instead!")]] ::VROSC::BeatCounter::SyncSource& dyn_$CurrentSyncSource$k__BackingField();
    // Get instance field reference: private System.Int32 <CurrentSyncSample>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$CurrentSyncSample$k__BackingField();
    // Get instance field reference: private System.Single <AudioBarProgress>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$AudioBarProgress$k__BackingField();
    // Get instance field reference: private System.Int32 <AudioBarNumber>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$AudioBarNumber$k__BackingField();
    // Get instance field reference: private System.Single <VisualBarProgress>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$VisualBarProgress$k__BackingField();
    // Get instance field reference: private System.Int32 <VisualBarNumber>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$VisualBarNumber$k__BackingField();
    // Get instance field reference: private System.Boolean <IsVisualBeatFrame>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsVisualBeatFrame$k__BackingField();
    // Get instance field reference: private System.Int32 <VisualCurrentBeat>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$VisualCurrentBeat$k__BackingField();
    // Get instance field reference: private System.Single <LooperMaxBPM>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$LooperMaxBPM$k__BackingField();
    // Get instance field reference: private System.Boolean <IsSetup>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsSetup$k__BackingField();
    // Get instance field reference: private System.Boolean <IsPlaying>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsPlaying$k__BackingField();
    // public VROSC.Metronome get_Metronome()
    // Offset: 0x974888
    ::VROSC::Metronome* get_Metronome();
    // public System.Single get_BPM()
    // Offset: 0x974890
    float get_BPM();
    // private System.Void set_BPM(System.Single value)
    // Offset: 0x974898
    void set_BPM(float value);
    // public System.Int32 get_BeatsPerBar()
    // Offset: 0x9748A0
    int get_BeatsPerBar();
    // private System.Void set_BeatsPerBar(System.Int32 value)
    // Offset: 0x9748A8
    void set_BeatsPerBar(int value);
    // public System.Int32 get_BeatLengthInSamples()
    // Offset: 0x9748B0
    int get_BeatLengthInSamples();
    // private System.Void set_BeatLengthInSamples(System.Int32 value)
    // Offset: 0x9748B8
    void set_BeatLengthInSamples(int value);
    // public System.Int32 get_BarLengthInSamples()
    // Offset: 0x9748C0
    int get_BarLengthInSamples();
    // public VROSC.BeatCounter/VROSC.SyncSource get_CurrentSyncSource()
    // Offset: 0x9748CC
    ::VROSC::BeatCounter::SyncSource get_CurrentSyncSource();
    // private System.Void set_CurrentSyncSource(VROSC.BeatCounter/VROSC.SyncSource value)
    // Offset: 0x9748D4
    void set_CurrentSyncSource(::VROSC::BeatCounter::SyncSource value);
    // public System.Int32 get_CurrentSyncSample()
    // Offset: 0x9748DC
    int get_CurrentSyncSample();
    // private System.Void set_CurrentSyncSample(System.Int32 value)
    // Offset: 0x9748E4
    void set_CurrentSyncSample(int value);
    // public System.Single get_AudioBarProgress()
    // Offset: 0x9748EC
    float get_AudioBarProgress();
    // private System.Void set_AudioBarProgress(System.Single value)
    // Offset: 0x9748F4
    void set_AudioBarProgress(float value);
    // public System.Int32 get_AudioBarNumber()
    // Offset: 0x9748FC
    int get_AudioBarNumber();
    // private System.Void set_AudioBarNumber(System.Int32 value)
    // Offset: 0x974904
    void set_AudioBarNumber(int value);
    // public System.Single get_VisualBarProgress()
    // Offset: 0x97490C
    float get_VisualBarProgress();
    // private System.Void set_VisualBarProgress(System.Single value)
    // Offset: 0x974914
    void set_VisualBarProgress(float value);
    // public System.Int32 get_VisualBarNumber()
    // Offset: 0x97491C
    int get_VisualBarNumber();
    // private System.Void set_VisualBarNumber(System.Int32 value)
    // Offset: 0x974924
    void set_VisualBarNumber(int value);
    // public System.Boolean get_IsVisualBeatFrame()
    // Offset: 0x97492C
    bool get_IsVisualBeatFrame();
    // private System.Void set_IsVisualBeatFrame(System.Boolean value)
    // Offset: 0x974934
    void set_IsVisualBeatFrame(bool value);
    // public System.Int32 get_VisualCurrentBeat()
    // Offset: 0x974940
    int get_VisualCurrentBeat();
    // private System.Void set_VisualCurrentBeat(System.Int32 value)
    // Offset: 0x974948
    void set_VisualCurrentBeat(int value);
    // public System.Single get_LooperMaxBPM()
    // Offset: 0x974950
    float get_LooperMaxBPM();
    // private System.Void set_LooperMaxBPM(System.Single value)
    // Offset: 0x974958
    void set_LooperMaxBPM(float value);
    // public System.Boolean get_IsSetup()
    // Offset: 0x974960
    bool get_IsSetup();
    // private System.Void set_IsSetup(System.Boolean value)
    // Offset: 0x974968
    void set_IsSetup(bool value);
    // public System.Boolean get_IsPlaying()
    // Offset: 0x974974
    bool get_IsPlaying();
    // private System.Void set_IsPlaying(System.Boolean value)
    // Offset: 0x97497C
    void set_IsPlaying(bool value);
    // public System.Void .ctor()
    // Offset: 0x9759B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatCounter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BeatCounter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatCounter*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x974988
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x974A74
    void OnDestroy();
    // public System.Void Setup(VROSC.BeatCounterUI beatCounterUI)
    // Offset: 0x974B60
    void Setup(::VROSC::BeatCounterUI* beatCounterUI);
    // protected System.Void Update()
    // Offset: 0x974EEC
    void Update();
    // private System.Void UpdateBarProgress()
    // Offset: 0x974FFC
    void UpdateBarProgress();
    // private System.Void SetSyncSampleFromBarProgress()
    // Offset: 0x9751A4
    void SetSyncSampleFromBarProgress();
    // private System.Void VisualBeat(System.Int32 beatNumber)
    // Offset: 0x97510C
    void VisualBeat(int beatNumber);
    // public System.Double GetNextQuantizeDspTime(System.Int32 beatDivision, System.Double predictedDspTime)
    // Offset: 0x975204
    double GetNextQuantizeDspTime(int beatDivision, double predictedDspTime);
    // public System.Single GetQuantizeLength(System.Int32 beatDivision)
    // Offset: 0x97539C
    float GetQuantizeLength(int beatDivision);
    // private System.Single GetBarLength()
    // Offset: 0x975380
    float GetBarLength();
    // public System.Void SetBPM(System.Single bpm, VROSC.BeatCounter/VROSC.SyncSource syncSource, System.Boolean restartBar)
    // Offset: 0x9753E0
    void SetBPM(float bpm, ::VROSC::BeatCounter::SyncSource syncSource, bool restartBar);
    // public System.Void SetBeatLength(System.Int32 beatLengthInSamples, VROSC.BeatCounter/VROSC.SyncSource syncSource, System.Boolean restartBar)
    // Offset: 0x9754BC
    void SetBeatLength(int beatLengthInSamples, ::VROSC::BeatCounter::SyncSource syncSource, bool restartBar);
    // public System.Void SetBeatsPerBar(System.Int32 beatsPerBar)
    // Offset: 0x9756D4
    void SetBeatsPerBar(int beatsPerBar);
    // public System.Int32 GetCurrentVisualSubdivision(System.Int32 subdivision)
    // Offset: 0x975764
    int GetCurrentVisualSubdivision(int subdivision);
    // protected System.Void OnAudioFilterRead(System.Single[] data, System.Int32 channels)
    // Offset: 0x97579C
    void OnAudioFilterRead(::ArrayW<float> data, int channels);
    // public System.Void FastForward(System.Int32 samples)
    // Offset: 0x9757CC
    void FastForward(int samples);
    // private System.Void UserDataLoaded(VROSC.UserDataControllers user)
    // Offset: 0x9757DC
    void UserDataLoaded(::VROSC::UserDataControllers* user);
    // public System.Int32 GetNextQuantizePointAfterSample(System.Int32 sample, System.Int32 barDivision)
    // Offset: 0x975928
    int GetNextQuantizePointAfterSample(int sample, int barDivision);
  }; // VROSC.BeatCounter
  #pragma pack(pop)
  static check_size<sizeof(BeatCounter), 101 + sizeof(bool)> __VROSC_BeatCounterSizeCheck;
  static_assert(sizeof(BeatCounter) == 0x66);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::BeatCounter::SyncSource, "VROSC", "BeatCounter/SyncSource");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::BeatCounter::get_Metronome
// Il2CppName: get_Metronome
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Metronome* (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::get_Metronome)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "get_Metronome", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::get_BPM
// Il2CppName: get_BPM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::get_BPM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "get_BPM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::set_BPM
// Il2CppName: set_BPM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(float)>(&VROSC::BeatCounter::set_BPM)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "set_BPM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::get_BeatsPerBar
// Il2CppName: get_BeatsPerBar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::get_BeatsPerBar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "get_BeatsPerBar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::set_BeatsPerBar
// Il2CppName: set_BeatsPerBar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(int)>(&VROSC::BeatCounter::set_BeatsPerBar)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "set_BeatsPerBar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::get_BeatLengthInSamples
// Il2CppName: get_BeatLengthInSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::get_BeatLengthInSamples)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "get_BeatLengthInSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::set_BeatLengthInSamples
// Il2CppName: set_BeatLengthInSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(int)>(&VROSC::BeatCounter::set_BeatLengthInSamples)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "set_BeatLengthInSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::get_BarLengthInSamples
// Il2CppName: get_BarLengthInSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::get_BarLengthInSamples)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "get_BarLengthInSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::get_CurrentSyncSource
// Il2CppName: get_CurrentSyncSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::BeatCounter::SyncSource (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::get_CurrentSyncSource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "get_CurrentSyncSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::set_CurrentSyncSource
// Il2CppName: set_CurrentSyncSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(::VROSC::BeatCounter::SyncSource)>(&VROSC::BeatCounter::set_CurrentSyncSource)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "BeatCounter/SyncSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "set_CurrentSyncSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::get_CurrentSyncSample
// Il2CppName: get_CurrentSyncSample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::get_CurrentSyncSample)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "get_CurrentSyncSample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::set_CurrentSyncSample
// Il2CppName: set_CurrentSyncSample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(int)>(&VROSC::BeatCounter::set_CurrentSyncSample)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "set_CurrentSyncSample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::get_AudioBarProgress
// Il2CppName: get_AudioBarProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::get_AudioBarProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "get_AudioBarProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::set_AudioBarProgress
// Il2CppName: set_AudioBarProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(float)>(&VROSC::BeatCounter::set_AudioBarProgress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "set_AudioBarProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::get_AudioBarNumber
// Il2CppName: get_AudioBarNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::get_AudioBarNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "get_AudioBarNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::set_AudioBarNumber
// Il2CppName: set_AudioBarNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(int)>(&VROSC::BeatCounter::set_AudioBarNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "set_AudioBarNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::get_VisualBarProgress
// Il2CppName: get_VisualBarProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::get_VisualBarProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "get_VisualBarProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::set_VisualBarProgress
// Il2CppName: set_VisualBarProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(float)>(&VROSC::BeatCounter::set_VisualBarProgress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "set_VisualBarProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::get_VisualBarNumber
// Il2CppName: get_VisualBarNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::get_VisualBarNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "get_VisualBarNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::set_VisualBarNumber
// Il2CppName: set_VisualBarNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(int)>(&VROSC::BeatCounter::set_VisualBarNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "set_VisualBarNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::get_IsVisualBeatFrame
// Il2CppName: get_IsVisualBeatFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::get_IsVisualBeatFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "get_IsVisualBeatFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::set_IsVisualBeatFrame
// Il2CppName: set_IsVisualBeatFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(bool)>(&VROSC::BeatCounter::set_IsVisualBeatFrame)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "set_IsVisualBeatFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::get_VisualCurrentBeat
// Il2CppName: get_VisualCurrentBeat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::get_VisualCurrentBeat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "get_VisualCurrentBeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::set_VisualCurrentBeat
// Il2CppName: set_VisualCurrentBeat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(int)>(&VROSC::BeatCounter::set_VisualCurrentBeat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "set_VisualCurrentBeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::get_LooperMaxBPM
// Il2CppName: get_LooperMaxBPM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::get_LooperMaxBPM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "get_LooperMaxBPM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::set_LooperMaxBPM
// Il2CppName: set_LooperMaxBPM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(float)>(&VROSC::BeatCounter::set_LooperMaxBPM)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "set_LooperMaxBPM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::get_IsSetup
// Il2CppName: get_IsSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::get_IsSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "get_IsSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::set_IsSetup
// Il2CppName: set_IsSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(bool)>(&VROSC::BeatCounter::set_IsSetup)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "set_IsSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::get_IsPlaying
// Il2CppName: get_IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::get_IsPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "get_IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::set_IsPlaying
// Il2CppName: set_IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(bool)>(&VROSC::BeatCounter::set_IsPlaying)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "set_IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::BeatCounter::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(::VROSC::BeatCounterUI*)>(&VROSC::BeatCounter::Setup)> {
  static const MethodInfo* get() {
    static auto* beatCounterUI = &::il2cpp_utils::GetClassFromName("VROSC", "BeatCounterUI")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatCounterUI});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::UpdateBarProgress
// Il2CppName: UpdateBarProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::UpdateBarProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "UpdateBarProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::SetSyncSampleFromBarProgress
// Il2CppName: SetSyncSampleFromBarProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::SetSyncSampleFromBarProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "SetSyncSampleFromBarProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::VisualBeat
// Il2CppName: VisualBeat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(int)>(&VROSC::BeatCounter::VisualBeat)> {
  static const MethodInfo* get() {
    static auto* beatNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "VisualBeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatNumber});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::GetNextQuantizeDspTime
// Il2CppName: GetNextQuantizeDspTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (VROSC::BeatCounter::*)(int, double)>(&VROSC::BeatCounter::GetNextQuantizeDspTime)> {
  static const MethodInfo* get() {
    static auto* beatDivision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* predictedDspTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "GetNextQuantizeDspTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatDivision, predictedDspTime});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::GetQuantizeLength
// Il2CppName: GetQuantizeLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::BeatCounter::*)(int)>(&VROSC::BeatCounter::GetQuantizeLength)> {
  static const MethodInfo* get() {
    static auto* beatDivision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "GetQuantizeLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatDivision});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::GetBarLength
// Il2CppName: GetBarLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::BeatCounter::*)()>(&VROSC::BeatCounter::GetBarLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "GetBarLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::SetBPM
// Il2CppName: SetBPM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(float, ::VROSC::BeatCounter::SyncSource, bool)>(&VROSC::BeatCounter::SetBPM)> {
  static const MethodInfo* get() {
    static auto* bpm = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* syncSource = &::il2cpp_utils::GetClassFromName("VROSC", "BeatCounter/SyncSource")->byval_arg;
    static auto* restartBar = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "SetBPM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bpm, syncSource, restartBar});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::SetBeatLength
// Il2CppName: SetBeatLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(int, ::VROSC::BeatCounter::SyncSource, bool)>(&VROSC::BeatCounter::SetBeatLength)> {
  static const MethodInfo* get() {
    static auto* beatLengthInSamples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* syncSource = &::il2cpp_utils::GetClassFromName("VROSC", "BeatCounter/SyncSource")->byval_arg;
    static auto* restartBar = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "SetBeatLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatLengthInSamples, syncSource, restartBar});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::SetBeatsPerBar
// Il2CppName: SetBeatsPerBar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(int)>(&VROSC::BeatCounter::SetBeatsPerBar)> {
  static const MethodInfo* get() {
    static auto* beatsPerBar = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "SetBeatsPerBar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatsPerBar});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::GetCurrentVisualSubdivision
// Il2CppName: GetCurrentVisualSubdivision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::BeatCounter::*)(int)>(&VROSC::BeatCounter::GetCurrentVisualSubdivision)> {
  static const MethodInfo* get() {
    static auto* subdivision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "GetCurrentVisualSubdivision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{subdivision});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::OnAudioFilterRead
// Il2CppName: OnAudioFilterRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(::ArrayW<float>, int)>(&VROSC::BeatCounter::OnAudioFilterRead)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "OnAudioFilterRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, channels});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::FastForward
// Il2CppName: FastForward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(int)>(&VROSC::BeatCounter::FastForward)> {
  static const MethodInfo* get() {
    static auto* samples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "FastForward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{samples});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::UserDataLoaded
// Il2CppName: UserDataLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BeatCounter::*)(::VROSC::UserDataControllers*)>(&VROSC::BeatCounter::UserDataLoaded)> {
  static const MethodInfo* get() {
    static auto* user = &::il2cpp_utils::GetClassFromName("VROSC", "UserDataControllers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "UserDataLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{user});
  }
};
// Writing MetadataGetter for method: VROSC::BeatCounter::GetNextQuantizePointAfterSample
// Il2CppName: GetNextQuantizePointAfterSample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::BeatCounter::*)(int, int)>(&VROSC::BeatCounter::GetNextQuantizePointAfterSample)> {
  static const MethodInfo* get() {
    static auto* sample = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* barDivision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BeatCounter*), "GetNextQuantizePointAfterSample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sample, barDivision});
  }
};
