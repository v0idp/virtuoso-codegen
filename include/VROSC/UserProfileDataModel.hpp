// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.BaseDataModel
#include "VROSC/BaseDataModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: UserProfileDataModel
  class UserProfileDataModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UserProfileDataModel);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UserProfileDataModel*, "VROSC", "UserProfileDataModel");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UserProfileDataModel
  // [TokenAttribute] Offset: FFFFFFFF
  class UserProfileDataModel : public ::VROSC::BaseDataModel {
    public:
    public:
    // public System.String Username
    // Size: 0x8
    // Offset: 0x18
    ::StringW Username;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Email
    // Size: 0x8
    // Offset: 0x20
    ::StringW Email;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String OculusId
    // Size: 0x8
    // Offset: 0x28
    ::StringW OculusId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String OculusUsername
    // Size: 0x8
    // Offset: 0x30
    ::StringW OculusUsername;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String SteamId
    // Size: 0x8
    // Offset: 0x38
    ::StringW SteamId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String SteamUsername
    // Size: 0x8
    // Offset: 0x40
    ::StringW SteamUsername;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String LastLogin
    // Size: 0x8
    // Offset: 0x48
    ::StringW LastLogin;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String CreationDate
    // Size: 0x8
    // Offset: 0x50
    ::StringW CreationDate;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String AcceptedEULAVersion
    // Size: 0x8
    // Offset: 0x58
    ::StringW AcceptedEULAVersion;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.String Username
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Username();
    // Get instance field reference: public System.String Email
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Email();
    // Get instance field reference: public System.String OculusId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OculusId();
    // Get instance field reference: public System.String OculusUsername
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OculusUsername();
    // Get instance field reference: public System.String SteamId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_SteamId();
    // Get instance field reference: public System.String SteamUsername
    [[deprecated("Use field access instead!")]] ::StringW& dyn_SteamUsername();
    // Get instance field reference: public System.String LastLogin
    [[deprecated("Use field access instead!")]] ::StringW& dyn_LastLogin();
    // Get instance field reference: public System.String CreationDate
    [[deprecated("Use field access instead!")]] ::StringW& dyn_CreationDate();
    // Get instance field reference: public System.String AcceptedEULAVersion
    [[deprecated("Use field access instead!")]] ::StringW& dyn_AcceptedEULAVersion();
    // public override System.String get_Key()
    // Offset: 0x191FAA4
    // Implemented from: VROSC.BaseDataModel
    // Base method: System.String BaseDataModel::get_Key()
    ::StringW get_Key();
    // public override System.Int32 get_Version()
    // Offset: 0x191FAE8
    // Implemented from: VROSC.BaseDataModel
    // Base method: System.Int32 BaseDataModel::get_Version()
    int get_Version();
    // public System.Void .ctor()
    // Offset: 0x191F258
    // Implemented from: VROSC.BaseDataModel
    // Base method: System.Void BaseDataModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UserProfileDataModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UserProfileDataModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UserProfileDataModel*, creationType>()));
    }
  }; // VROSC.UserProfileDataModel
  #pragma pack(pop)
  static check_size<sizeof(UserProfileDataModel), 88 + sizeof(::StringW)> __VROSC_UserProfileDataModelSizeCheck;
  static_assert(sizeof(UserProfileDataModel) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UserProfileDataModel::get_Key
// Il2CppName: get_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::UserProfileDataModel::*)()>(&VROSC::UserProfileDataModel::get_Key)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UserProfileDataModel*), "get_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UserProfileDataModel::get_Version
// Il2CppName: get_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::UserProfileDataModel::*)()>(&VROSC::UserProfileDataModel::get_Version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UserProfileDataModel*), "get_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UserProfileDataModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
