// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: UIButton
  class UIButton;
  // Forward declaring type: UISlider
  class UISlider;
  // Forward declaring type: TimeSlider
  class TimeSlider;
  // Forward declaring type: UserDataControllers
  class UserDataControllers;
}
// Forward declaring namespace: UnityEngine::Video
namespace UnityEngine::Video {
  // Forward declaring type: VideoPlayer
  class VideoPlayer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: VideoUI
  class VideoUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::VideoUI);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::VideoUI*, "VROSC", "VideoUI");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x81
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.VideoUI
  // [TokenAttribute] Offset: FFFFFFFF
  class VideoUI : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::VideoUI::$Play$d__19
    struct $Play$d__19;
    public:
    // private UnityEngine.Video.VideoPlayer _videoPlayer
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Video::VideoPlayer* videoPlayer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Video::VideoPlayer*) == 0x8);
    // private VROSC.UIButton _closeButton
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::UIButton* closeButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.UIButton _playPauseButton
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::UIButton* playPauseButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.UIButton _videoAreaButton
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::UIButton* videoAreaButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private UnityEngine.GameObject _playIcon
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* playIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _pauseIcon
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* pauseIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _loadingIcon
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* loadingIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _videoSurface
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* videoSurface;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private TMPro.TextMeshPro _header
    // Size: 0x8
    // Offset: 0x58
    ::TMPro::TextMeshPro* header;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private TMPro.TextMeshPro _timeText
    // Size: 0x8
    // Offset: 0x60
    ::TMPro::TextMeshPro* timeText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private UnityEngine.AudioSource _audioSource
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private VROSC.UISlider _volumeSlider
    // Size: 0x8
    // Offset: 0x70
    ::VROSC::UISlider* volumeSlider;
    // Field size check
    static_assert(sizeof(::VROSC::UISlider*) == 0x8);
    // private VROSC.TimeSlider _timeSlider
    // Size: 0x8
    // Offset: 0x78
    ::VROSC::TimeSlider* timeSlider;
    // Field size check
    static_assert(sizeof(::VROSC::TimeSlider*) == 0x8);
    // private System.Boolean _shouldPlay
    // Size: 0x1
    // Offset: 0x80
    bool shouldPlay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public System.Action OnClose
    static ::System::Action* _get_OnClose();
    // Set static field: static public System.Action OnClose
    static void _set_OnClose(::System::Action* value);
    // Get instance field reference: private UnityEngine.Video.VideoPlayer _videoPlayer
    [[deprecated]] ::UnityEngine::Video::VideoPlayer*& dyn__videoPlayer();
    // Get instance field reference: private VROSC.UIButton _closeButton
    [[deprecated]] ::VROSC::UIButton*& dyn__closeButton();
    // Get instance field reference: private VROSC.UIButton _playPauseButton
    [[deprecated]] ::VROSC::UIButton*& dyn__playPauseButton();
    // Get instance field reference: private VROSC.UIButton _videoAreaButton
    [[deprecated]] ::VROSC::UIButton*& dyn__videoAreaButton();
    // Get instance field reference: private UnityEngine.GameObject _playIcon
    [[deprecated]] ::UnityEngine::GameObject*& dyn__playIcon();
    // Get instance field reference: private UnityEngine.GameObject _pauseIcon
    [[deprecated]] ::UnityEngine::GameObject*& dyn__pauseIcon();
    // Get instance field reference: private UnityEngine.GameObject _loadingIcon
    [[deprecated]] ::UnityEngine::GameObject*& dyn__loadingIcon();
    // Get instance field reference: private UnityEngine.GameObject _videoSurface
    [[deprecated]] ::UnityEngine::GameObject*& dyn__videoSurface();
    // Get instance field reference: private TMPro.TextMeshPro _header
    [[deprecated]] ::TMPro::TextMeshPro*& dyn__header();
    // Get instance field reference: private TMPro.TextMeshPro _timeText
    [[deprecated]] ::TMPro::TextMeshPro*& dyn__timeText();
    // Get instance field reference: private UnityEngine.AudioSource _audioSource
    [[deprecated]] ::UnityEngine::AudioSource*& dyn__audioSource();
    // Get instance field reference: private VROSC.UISlider _volumeSlider
    [[deprecated]] ::VROSC::UISlider*& dyn__volumeSlider();
    // Get instance field reference: private VROSC.TimeSlider _timeSlider
    [[deprecated]] ::VROSC::TimeSlider*& dyn__timeSlider();
    // Get instance field reference: private System.Boolean _shouldPlay
    [[deprecated]] bool& dyn__shouldPlay();
    // protected System.Void Awake()
    // Offset: 0x1922CE0
    void Awake();
    // public System.Void Setup()
    // Offset: 0x1922668
    void Setup();
    // private System.Void UserDataLoaded(VROSC.UserDataControllers user)
    // Offset: 0x1922DCC
    void UserDataLoaded(::VROSC::UserDataControllers* user);
    // private System.Void TogglePlay()
    // Offset: 0x1922E44
    void TogglePlay();
    // private System.Void Play()
    // Offset: 0x1922E54
    void Play();
    // private System.Void Pause()
    // Offset: 0x1922F18
    void Pause();
    // private System.Void Stop()
    // Offset: 0x1922F84
    void Stop();
    // public System.Void Open(System.String videoPath, System.String title)
    // Offset: 0x1922A2C
    void Open(::StringW videoPath, ::StringW title);
    // public System.Void Close()
    // Offset: 0x1922C4C
    void Close();
    // private System.Void VolumeChanged(System.Single newVolume)
    // Offset: 0x1923018
    void VolumeChanged(float newVolume);
    // private System.Void EndReached(UnityEngine.Video.VideoPlayer videoPlayer)
    // Offset: 0x192309C
    void EndReached(::UnityEngine::Video::VideoPlayer* videoPlayer);
    // public System.Void .ctor()
    // Offset: 0x19230A0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VideoUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::VideoUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VideoUI*, creationType>()));
    }
  }; // VROSC.VideoUI
  #pragma pack(pop)
  static check_size<sizeof(VideoUI), 128 + sizeof(bool)> __VROSC_VideoUISizeCheck;
  static_assert(sizeof(VideoUI) == 0x81);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::VideoUI::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoUI::*)()>(&VROSC::VideoUI::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoUI*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::VideoUI::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoUI::*)()>(&VROSC::VideoUI::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoUI*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::VideoUI::UserDataLoaded
// Il2CppName: UserDataLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoUI::*)(::VROSC::UserDataControllers*)>(&VROSC::VideoUI::UserDataLoaded)> {
  static const MethodInfo* get() {
    static auto* user = &::il2cpp_utils::GetClassFromName("VROSC", "UserDataControllers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoUI*), "UserDataLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{user});
  }
};
// Writing MetadataGetter for method: VROSC::VideoUI::TogglePlay
// Il2CppName: TogglePlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoUI::*)()>(&VROSC::VideoUI::TogglePlay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoUI*), "TogglePlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::VideoUI::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoUI::*)()>(&VROSC::VideoUI::Play)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoUI*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::VideoUI::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoUI::*)()>(&VROSC::VideoUI::Pause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoUI*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::VideoUI::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoUI::*)()>(&VROSC::VideoUI::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoUI*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::VideoUI::Open
// Il2CppName: Open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoUI::*)(::StringW, ::StringW)>(&VROSC::VideoUI::Open)> {
  static const MethodInfo* get() {
    static auto* videoPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* title = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoUI*), "Open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{videoPath, title});
  }
};
// Writing MetadataGetter for method: VROSC::VideoUI::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoUI::*)()>(&VROSC::VideoUI::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoUI*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::VideoUI::VolumeChanged
// Il2CppName: VolumeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoUI::*)(float)>(&VROSC::VideoUI::VolumeChanged)> {
  static const MethodInfo* get() {
    static auto* newVolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoUI*), "VolumeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newVolume});
  }
};
// Writing MetadataGetter for method: VROSC::VideoUI::EndReached
// Il2CppName: EndReached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoUI::*)(::UnityEngine::Video::VideoPlayer*)>(&VROSC::VideoUI::EndReached)> {
  static const MethodInfo* get() {
    static auto* videoPlayer = &::il2cpp_utils::GetClassFromName("UnityEngine.Video", "VideoPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoUI*), "EndReached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{videoPlayer});
  }
};
// Writing MetadataGetter for method: VROSC::VideoUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
