// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: SignalNode
  class SignalNode;
  // Forward declaring type: Signal
  class Signal;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: PredictiveHittable
  class PredictiveHittable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::PredictiveHittable);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::PredictiveHittable*, "VROSC", "PredictiveHittable");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x3B
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.PredictiveHittable
  // [TokenAttribute] Offset: FFFFFFFF
  class PredictiveHittable : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Color <Color>k__BackingField
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Color Color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Boolean <HasColor>k__BackingField
    // Size: 0x1
    // Offset: 0x28
    bool HasColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: HasColor and: outputNodes
    char __padding1[0x7] = {};
    // private VROSC.SignalNode[] _outputNodes
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::VROSC::SignalNode*> outputNodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::SignalNode*>) == 0x8);
    // private System.Boolean _cullWeakHits
    // Size: 0x1
    // Offset: 0x38
    bool cullWeakHits;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _preferMallet
    // Size: 0x1
    // Offset: 0x39
    bool preferMallet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _hitDimsLaser
    // Size: 0x1
    // Offset: 0x3A
    bool hitDimsLaser;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Color <Color>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_$Color$k__BackingField();
    // Get instance field reference: private System.Boolean <HasColor>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$HasColor$k__BackingField();
    // Get instance field reference: private VROSC.SignalNode[] _outputNodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::SignalNode*>& dyn__outputNodes();
    // Get instance field reference: private System.Boolean _cullWeakHits
    [[deprecated("Use field access instead!")]] bool& dyn__cullWeakHits();
    // Get instance field reference: private System.Boolean _preferMallet
    [[deprecated("Use field access instead!")]] bool& dyn__preferMallet();
    // Get instance field reference: private System.Boolean _hitDimsLaser
    [[deprecated("Use field access instead!")]] bool& dyn__hitDimsLaser();
    // public UnityEngine.Color get_Color()
    // Offset: 0xAE2D18
    ::UnityEngine::Color get_Color();
    // private System.Void set_Color(UnityEngine.Color value)
    // Offset: 0xAE2D0C
    void set_Color(::UnityEngine::Color value);
    // public System.Boolean get_HasColor()
    // Offset: 0xAE2D30
    bool get_HasColor();
    // private System.Void set_HasColor(System.Boolean value)
    // Offset: 0xAE2D24
    void set_HasColor(bool value);
    // public System.Boolean get_CullWeakHits()
    // Offset: 0xAE2D38
    bool get_CullWeakHits();
    // public System.Boolean get_PreferMallet()
    // Offset: 0xAE2D40
    bool get_PreferMallet();
    // public System.Boolean get_HitDimsLaser()
    // Offset: 0xAE2D48
    bool get_HitDimsLaser();
    // public System.Void .ctor()
    // Offset: 0xAE2E80
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PredictiveHittable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PredictiveHittable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PredictiveHittable*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0xAE2D50
    void Start();
    // public System.Void SendScheduledHit(VROSC.Signal signal)
    // Offset: 0xAE2D78
    void SendScheduledHit(::VROSC::Signal* signal);
    // public System.Void SetColor(UnityEngine.Color color)
    // Offset: 0xAE2E6C
    void SetColor(::UnityEngine::Color color);
  }; // VROSC.PredictiveHittable
  #pragma pack(pop)
  static check_size<sizeof(PredictiveHittable), 58 + sizeof(bool)> __VROSC_PredictiveHittableSizeCheck;
  static_assert(sizeof(PredictiveHittable) == 0x3B);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::PredictiveHittable::get_Color
// Il2CppName: get_Color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::PredictiveHittable::*)()>(&VROSC::PredictiveHittable::get_Color)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PredictiveHittable*), "get_Color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PredictiveHittable::set_Color
// Il2CppName: set_Color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PredictiveHittable::*)(::UnityEngine::Color)>(&VROSC::PredictiveHittable::set_Color)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PredictiveHittable*), "set_Color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::PredictiveHittable::get_HasColor
// Il2CppName: get_HasColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::PredictiveHittable::*)()>(&VROSC::PredictiveHittable::get_HasColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PredictiveHittable*), "get_HasColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PredictiveHittable::set_HasColor
// Il2CppName: set_HasColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PredictiveHittable::*)(bool)>(&VROSC::PredictiveHittable::set_HasColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PredictiveHittable*), "set_HasColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::PredictiveHittable::get_CullWeakHits
// Il2CppName: get_CullWeakHits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::PredictiveHittable::*)()>(&VROSC::PredictiveHittable::get_CullWeakHits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PredictiveHittable*), "get_CullWeakHits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PredictiveHittable::get_PreferMallet
// Il2CppName: get_PreferMallet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::PredictiveHittable::*)()>(&VROSC::PredictiveHittable::get_PreferMallet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PredictiveHittable*), "get_PreferMallet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PredictiveHittable::get_HitDimsLaser
// Il2CppName: get_HitDimsLaser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::PredictiveHittable::*)()>(&VROSC::PredictiveHittable::get_HitDimsLaser)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PredictiveHittable*), "get_HitDimsLaser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PredictiveHittable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::PredictiveHittable::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PredictiveHittable::*)()>(&VROSC::PredictiveHittable::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PredictiveHittable*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PredictiveHittable::SendScheduledHit
// Il2CppName: SendScheduledHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PredictiveHittable::*)(::VROSC::Signal*)>(&VROSC::PredictiveHittable::SendScheduledHit)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PredictiveHittable*), "SendScheduledHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::PredictiveHittable::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PredictiveHittable::*)(::UnityEngine::Color)>(&VROSC::PredictiveHittable::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PredictiveHittable*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
