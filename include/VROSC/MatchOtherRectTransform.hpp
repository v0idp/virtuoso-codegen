// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: MatchOtherRectTransform
  class MatchOtherRectTransform;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::MatchOtherRectTransform);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::MatchOtherRectTransform*, "VROSC", "MatchOtherRectTransform");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.MatchOtherRectTransform
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 780848
  // [ExecuteAlways] Offset: FFFFFFFF
  class MatchOtherRectTransform : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.RectTransform _other
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::RectTransform* other;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _rectTransform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::RectTransform* rectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private System.Boolean _valid
    // Size: 0x1
    // Offset: 0x28
    bool valid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: valid and: lastHeight
    char __padding2[0x3] = {};
    // private System.Single _lastHeight
    // Size: 0x4
    // Offset: 0x2C
    float lastHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _lastWidth
    // Size: 0x4
    // Offset: 0x30
    float lastWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.RectTransform _other
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__other();
    // Get instance field reference: private UnityEngine.RectTransform _rectTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__rectTransform();
    // Get instance field reference: private System.Boolean _valid
    [[deprecated("Use field access instead!")]] bool& dyn__valid();
    // Get instance field reference: private System.Single _lastHeight
    [[deprecated("Use field access instead!")]] float& dyn__lastHeight();
    // Get instance field reference: private System.Single _lastWidth
    [[deprecated("Use field access instead!")]] float& dyn__lastWidth();
    // public System.Void .ctor()
    // Offset: 0xAC0F38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MatchOtherRectTransform* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MatchOtherRectTransform::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MatchOtherRectTransform*, creationType>()));
    }
    // private System.Void LateUpdate()
    // Offset: 0xAC0D24
    void LateUpdate();
    // private System.Void GetValues()
    // Offset: 0xAC0E5C
    void GetValues();
    // private System.Void UpdateSize(System.Boolean force)
    // Offset: 0xAC0D6C
    void UpdateSize(bool force);
  }; // VROSC.MatchOtherRectTransform
  #pragma pack(pop)
  static check_size<sizeof(MatchOtherRectTransform), 48 + sizeof(float)> __VROSC_MatchOtherRectTransformSizeCheck;
  static_assert(sizeof(MatchOtherRectTransform) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::MatchOtherRectTransform::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::MatchOtherRectTransform::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MatchOtherRectTransform::*)()>(&VROSC::MatchOtherRectTransform::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MatchOtherRectTransform*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MatchOtherRectTransform::GetValues
// Il2CppName: GetValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MatchOtherRectTransform::*)()>(&VROSC::MatchOtherRectTransform::GetValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MatchOtherRectTransform*), "GetValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MatchOtherRectTransform::UpdateSize
// Il2CppName: UpdateSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MatchOtherRectTransform::*)(bool)>(&VROSC::MatchOtherRectTransform::UpdateSize)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MatchOtherRectTransform*), "UpdateSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
