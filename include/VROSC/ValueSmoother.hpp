// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.SignalNode
#include "VROSC/SignalNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Signal
  class Signal;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ValueSmoother
  class ValueSmoother;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ValueSmoother);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ValueSmoother*, "VROSC", "ValueSmoother");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ValueSmoother
  // [TokenAttribute] Offset: FFFFFFFF
  class ValueSmoother : public ::VROSC::SignalNode {
    public:
    public:
    // private System.Int32 _smoothFrames
    // Size: 0x4
    // Offset: 0x40
    int smoothFrames;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: smoothFrames and: buffer
    char __padding0[0x4] = {};
    // private System.Collections.Generic.List`1<System.Single> _buffer
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<float>* buffer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<float>*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 _smoothFrames
    [[deprecated]] int& dyn__smoothFrames();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Single> _buffer
    [[deprecated]] ::System::Collections::Generic::List_1<float>*& dyn__buffer();
    // private VROSC.Signal TransformValue(VROSC.Signal signal)
    // Offset: 0x19218EC
    ::VROSC::Signal* TransformValue(::VROSC::Signal* signal);
    // public System.Void .ctor()
    // Offset: 0x1921AAC
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ValueSmoother* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ValueSmoother::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ValueSmoother*, creationType>()));
    }
    // protected override System.Void NodeBegin(VROSC.Signal signal)
    // Offset: 0x19218E8
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeBegin(VROSC.Signal signal)
    void NodeBegin(::VROSC::Signal* signal);
    // protected override System.Void NodeStay(VROSC.Signal signal)
    // Offset: 0x1921AA4
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeStay(VROSC.Signal signal)
    void NodeStay(::VROSC::Signal* signal);
    // protected override System.Void NodeEnd(VROSC.Signal signal)
    // Offset: 0x1921AA8
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeEnd(VROSC.Signal signal)
    void NodeEnd(::VROSC::Signal* signal);
  }; // VROSC.ValueSmoother
  #pragma pack(pop)
  static check_size<sizeof(ValueSmoother), 72 + sizeof(::System::Collections::Generic::List_1<float>*)> __VROSC_ValueSmootherSizeCheck;
  static_assert(sizeof(ValueSmoother) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ValueSmoother::TransformValue
// Il2CppName: TransformValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Signal* (VROSC::ValueSmoother::*)(::VROSC::Signal*)>(&VROSC::ValueSmoother::TransformValue)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ValueSmoother*), "TransformValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::ValueSmoother::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::ValueSmoother::NodeBegin
// Il2CppName: NodeBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ValueSmoother::*)(::VROSC::Signal*)>(&VROSC::ValueSmoother::NodeBegin)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ValueSmoother*), "NodeBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::ValueSmoother::NodeStay
// Il2CppName: NodeStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ValueSmoother::*)(::VROSC::Signal*)>(&VROSC::ValueSmoother::NodeStay)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ValueSmoother*), "NodeStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::ValueSmoother::NodeEnd
// Il2CppName: NodeEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ValueSmoother::*)(::VROSC::Signal*)>(&VROSC::ValueSmoother::NodeEnd)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ValueSmoother*), "NodeEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
