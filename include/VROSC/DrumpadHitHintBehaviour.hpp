// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.PlayableBehaviour
#include "UnityEngine/Playables/PlayableBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: DrumPadEffectOnSignal
  class DrumPadEffectOnSignal;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: FrameData
  struct FrameData;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: DrumpadHitHintBehaviour
  class DrumpadHitHintBehaviour;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::DrumpadHitHintBehaviour);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::DrumpadHitHintBehaviour*, "VROSC", "DrumpadHitHintBehaviour");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.DrumpadHitHintBehaviour
  // [TokenAttribute] Offset: FFFFFFFF
  class DrumpadHitHintBehaviour : public ::UnityEngine::Playables::PlayableBehaviour {
    public:
    public:
    // private VROSC.DrumPadEffectOnSignal _drumEffect
    // Size: 0x8
    // Offset: 0x10
    ::VROSC::DrumPadEffectOnSignal* drumEffect;
    // Field size check
    static_assert(sizeof(::VROSC::DrumPadEffectOnSignal*) == 0x8);
    // [RangeAttribute] Offset: 0x789B3C
    // public System.Single CurrentTime
    // Size: 0x4
    // Offset: 0x18
    float CurrentTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x789B54
    // public System.Single HitPower
    // Size: 0x4
    // Offset: 0x1C
    float HitPower;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [ColorUsageAttribute] Offset: 0x789B6C
    // public UnityEngine.Color Color
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Color Color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Get instance field reference: private VROSC.DrumPadEffectOnSignal _drumEffect
    [[deprecated]] ::VROSC::DrumPadEffectOnSignal*& dyn__drumEffect();
    // Get instance field reference: public System.Single CurrentTime
    [[deprecated]] float& dyn_CurrentTime();
    // Get instance field reference: public System.Single HitPower
    [[deprecated]] float& dyn_HitPower();
    // Get instance field reference: public UnityEngine.Color Color
    [[deprecated]] ::UnityEngine::Color& dyn_Color();
    // public System.Void Setup(VROSC.DrumPadEffectOnSignal drumEffect)
    // Offset: 0x8E8A18
    void Setup(::VROSC::DrumPadEffectOnSignal* drumEffect);
    // public System.Void .ctor()
    // Offset: 0x8E8A74
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DrumpadHitHintBehaviour* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::DrumpadHitHintBehaviour::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DrumpadHitHintBehaviour*, creationType>()));
    }
    // public override System.Void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    // Offset: 0x8E8A4C
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    void ProcessFrame(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info, ::Il2CppObject* playerData);
  }; // VROSC.DrumpadHitHintBehaviour
  #pragma pack(pop)
  static check_size<sizeof(DrumpadHitHintBehaviour), 32 + sizeof(::UnityEngine::Color)> __VROSC_DrumpadHitHintBehaviourSizeCheck;
  static_assert(sizeof(DrumpadHitHintBehaviour) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::DrumpadHitHintBehaviour::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadHitHintBehaviour::*)(::VROSC::DrumPadEffectOnSignal*)>(&VROSC::DrumpadHitHintBehaviour::Setup)> {
  static const MethodInfo* get() {
    static auto* drumEffect = &::il2cpp_utils::GetClassFromName("VROSC", "DrumPadEffectOnSignal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadHitHintBehaviour*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{drumEffect});
  }
};
// Writing MetadataGetter for method: VROSC::DrumpadHitHintBehaviour::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::DrumpadHitHintBehaviour::ProcessFrame
// Il2CppName: ProcessFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumpadHitHintBehaviour::*)(::UnityEngine::Playables::Playable, ::UnityEngine::Playables::FrameData, ::Il2CppObject*)>(&VROSC::DrumpadHitHintBehaviour::ProcessFrame)> {
  static const MethodInfo* get() {
    static auto* playable = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "Playable")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "FrameData")->byval_arg;
    static auto* playerData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumpadHitHintBehaviour*), "ProcessFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playable, info, playerData});
  }
};
