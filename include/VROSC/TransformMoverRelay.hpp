// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.Grabable
#include "VROSC/Grabable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: TransformMover
  class TransformMover;
  // Forward declaring type: GrabData
  class GrabData;
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TransformMoverRelay
  class TransformMoverRelay;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TransformMoverRelay);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TransformMoverRelay*, "VROSC", "TransformMoverRelay");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TransformMoverRelay
  // [TokenAttribute] Offset: FFFFFFFF
  class TransformMoverRelay : public ::VROSC::Grabable {
    public:
    // Writing base type padding for base size: 0x69 to desired offset: 0x70
    char ___base_padding[0x7] = {};
    public:
    // private VROSC.TransformMover _target
    // Size: 0x8
    // Offset: 0x70
    ::VROSC::TransformMover* target;
    // Field size check
    static_assert(sizeof(::VROSC::TransformMover*) == 0x8);
    public:
    // Get instance field reference: private VROSC.TransformMover _target
    [[deprecated]] ::VROSC::TransformMover*& dyn__target();
    // public VROSC.TransformMover get_Target()
    // Offset: 0xA2C5C4
    ::VROSC::TransformMover* get_Target();
    // private System.Void Start()
    // Offset: 0xA2C5CC
    void Start();
    // public System.Void ResetRelay()
    // Offset: 0xA2C658
    void ResetRelay();
    // public System.Void SetTarget(VROSC.TransformMover transformMover)
    // Offset: 0xA2C8B4
    void SetTarget(::VROSC::TransformMover* transformMover);
    // public System.Void .ctor()
    // Offset: 0xA2C94C
    // Implemented from: VROSC.Grabable
    // Base method: System.Void Grabable::.ctor()
    // Base method: System.Void Interactable::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransformMoverRelay* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransformMoverRelay::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransformMoverRelay*, creationType>()));
    }
    // public override System.Void Grab(VROSC.GrabData grabData, System.Boolean grabbing)
    // Offset: 0xA2C6E0
    // Implemented from: VROSC.Grabable
    // Base method: System.Void Grabable::Grab(VROSC.GrabData grabData, System.Boolean grabbing)
    void Grab(::VROSC::GrabData* grabData, bool grabbing);
    // public override System.Void SetHovering(VROSC.InputDevice device, UnityEngine.Vector3 position, System.Boolean pointedAt, System.Boolean controllerIsHovering)
    // Offset: 0xA2C7A0
    // Implemented from: VROSC.Interactable
    // Base method: System.Void Interactable::SetHovering(VROSC.InputDevice device, UnityEngine.Vector3 position, System.Boolean pointedAt, System.Boolean controllerIsHovering)
    void SetHovering(::VROSC::InputDevice* device, ::UnityEngine::Vector3 position, bool pointedAt, bool controllerIsHovering);
  }; // VROSC.TransformMoverRelay
  #pragma pack(pop)
  static check_size<sizeof(TransformMoverRelay), 112 + sizeof(::VROSC::TransformMover*)> __VROSC_TransformMoverRelaySizeCheck;
  static_assert(sizeof(TransformMoverRelay) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TransformMoverRelay::get_Target
// Il2CppName: get_Target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::TransformMover* (VROSC::TransformMoverRelay::*)()>(&VROSC::TransformMoverRelay::get_Target)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMoverRelay*), "get_Target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMoverRelay::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMoverRelay::*)()>(&VROSC::TransformMoverRelay::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMoverRelay*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMoverRelay::ResetRelay
// Il2CppName: ResetRelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMoverRelay::*)()>(&VROSC::TransformMoverRelay::ResetRelay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMoverRelay*), "ResetRelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMoverRelay::SetTarget
// Il2CppName: SetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMoverRelay::*)(::VROSC::TransformMover*)>(&VROSC::TransformMoverRelay::SetTarget)> {
  static const MethodInfo* get() {
    static auto* transformMover = &::il2cpp_utils::GetClassFromName("VROSC", "TransformMover")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMoverRelay*), "SetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformMover});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMoverRelay::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::TransformMoverRelay::Grab
// Il2CppName: Grab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMoverRelay::*)(::VROSC::GrabData*, bool)>(&VROSC::TransformMoverRelay::Grab)> {
  static const MethodInfo* get() {
    static auto* grabData = &::il2cpp_utils::GetClassFromName("VROSC", "GrabData")->byval_arg;
    static auto* grabbing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMoverRelay*), "Grab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabData, grabbing});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMoverRelay::SetHovering
// Il2CppName: SetHovering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMoverRelay::*)(::VROSC::InputDevice*, ::UnityEngine::Vector3, bool, bool)>(&VROSC::TransformMoverRelay::SetHovering)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* pointedAt = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* controllerIsHovering = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMoverRelay*), "SetHovering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, position, pointedAt, controllerIsHovering});
  }
};
