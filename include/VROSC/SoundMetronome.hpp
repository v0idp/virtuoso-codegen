// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: SoundMetronome
  class SoundMetronome;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::SoundMetronome);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::SoundMetronome*, "VROSC", "SoundMetronome");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.SoundMetronome
  // [TokenAttribute] Offset: FFFFFFFF
  class SoundMetronome : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.AudioSource _barSound
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AudioSource* barSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioSource _beatSound
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AudioSource* beatSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Boolean _beatScheduled
    // Size: 0x1
    // Offset: 0x28
    bool beatScheduled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: beatScheduled and: lastScheduledBeatTime
    char __padding2[0x7] = {};
    // private System.Double _lastScheduledBeatTime
    // Size: 0x8
    // Offset: 0x30
    double lastScheduledBeatTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double _updateMargin
    // Size: 0x8
    // Offset: 0x38
    double updateMargin;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.AudioSource _barSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn__barSound();
    // Get instance field reference: private UnityEngine.AudioSource _beatSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn__beatSound();
    // Get instance field reference: private System.Boolean _beatScheduled
    [[deprecated("Use field access instead!")]] bool& dyn__beatScheduled();
    // Get instance field reference: private System.Double _lastScheduledBeatTime
    [[deprecated("Use field access instead!")]] double& dyn__lastScheduledBeatTime();
    // Get instance field reference: private System.Double _updateMargin
    [[deprecated("Use field access instead!")]] double& dyn__updateMargin();
    // public System.Void .ctor()
    // Offset: 0x192CB00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SoundMetronome* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SoundMetronome::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SoundMetronome*, creationType>()));
    }
    // protected System.Void OnEnable()
    // Offset: 0x192C970
    void OnEnable();
    // protected System.Void Update()
    // Offset: 0x192C9F8
    void Update();
  }; // VROSC.SoundMetronome
  #pragma pack(pop)
  static check_size<sizeof(SoundMetronome), 56 + sizeof(double)> __VROSC_SoundMetronomeSizeCheck;
  static_assert(sizeof(SoundMetronome) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::SoundMetronome::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::SoundMetronome::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SoundMetronome::*)()>(&VROSC::SoundMetronome::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SoundMetronome*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SoundMetronome::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SoundMetronome::*)()>(&VROSC::SoundMetronome::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SoundMetronome*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
