// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: TransformMover
  class TransformMover;
  // Forward declaring type: DrumpadPlayer
  class DrumpadPlayer;
  // Forward declaring type: DrumpadUI
  class DrumpadUI;
  // Forward declaring type: DrumpadSpawner
  class DrumpadSpawner;
  // Forward declaring type: ModularDrumsController
  class ModularDrumsController;
  // Forward declaring type: GrabData
  class GrabData;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableDirector
  class PlayableDirector;
  // Forward declaring type: PlayableAsset
  class PlayableAsset;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: Drumpad
  class Drumpad;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::Drumpad);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::Drumpad*, "VROSC", "Drumpad");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.Drumpad
  // [TokenAttribute] Offset: FFFFFFFF
  class Drumpad : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.TransformMover _mover
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::TransformMover* mover;
    // Field size check
    static_assert(sizeof(::VROSC::TransformMover*) == 0x8);
    // private VROSC.DrumpadPlayer _player
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::DrumpadPlayer* player;
    // Field size check
    static_assert(sizeof(::VROSC::DrumpadPlayer*) == 0x8);
    // private VROSC.DrumpadUI _UI
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::DrumpadUI* UI;
    // Field size check
    static_assert(sizeof(::VROSC::DrumpadUI*) == 0x8);
    // private UnityEngine.Playables.PlayableDirector _playableDirector
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Playables::PlayableDirector* playableDirector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Playables::PlayableDirector*) == 0x8);
    // private UnityEngine.Playables.PlayableAsset _enterTimeline
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Playables::PlayableAsset* enterTimeline;
    // Field size check
    static_assert(sizeof(::UnityEngine::Playables::PlayableAsset*) == 0x8);
    // private UnityEngine.Playables.PlayableAsset _exitTimeline
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Playables::PlayableAsset* exitTimeline;
    // Field size check
    static_assert(sizeof(::UnityEngine::Playables::PlayableAsset*) == 0x8);
    // private UnityEngine.Collider[] _overlaps
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Collider*> overlaps;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private VROSC.DrumpadSpawner _overlappingSpawner
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::DrumpadSpawner* overlappingSpawner;
    // Field size check
    static_assert(sizeof(::VROSC::DrumpadSpawner*) == 0x8);
    // private System.Single _spawnerDeleteDistance
    // Size: 0x4
    // Offset: 0x58
    float spawnerDeleteDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: spawnerDeleteDistance and: drumpadSpawner
    char __padding8[0x4] = {};
    // private VROSC.DrumpadSpawner _drumpadSpawner
    // Size: 0x8
    // Offset: 0x60
    ::VROSC::DrumpadSpawner* drumpadSpawner;
    // Field size check
    static_assert(sizeof(::VROSC::DrumpadSpawner*) == 0x8);
    // private System.Int32 _empadId
    // Size: 0x4
    // Offset: 0x68
    int empadId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: empadId and: parent
    char __padding10[0x4] = {};
    // private UnityEngine.Transform _parent
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* parent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private VROSC.ModularDrumsController _instrumentController
    // Size: 0x8
    // Offset: 0x78
    ::VROSC::ModularDrumsController* instrumentController;
    // Field size check
    static_assert(sizeof(::VROSC::ModularDrumsController*) == 0x8);
    // public System.Action`1<VROSC.Drumpad> OnRemoveDrumpad
    // Size: 0x8
    // Offset: 0x80
    ::System::Action_1<::VROSC::Drumpad*>* OnRemoveDrumpad;
    // Field size check
    static_assert(sizeof(::System::Action_1<::VROSC::Drumpad*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.TransformMover _mover
    [[deprecated("Use field access instead!")]] ::VROSC::TransformMover*& dyn__mover();
    // Get instance field reference: private VROSC.DrumpadPlayer _player
    [[deprecated("Use field access instead!")]] ::VROSC::DrumpadPlayer*& dyn__player();
    // Get instance field reference: private VROSC.DrumpadUI _UI
    [[deprecated("Use field access instead!")]] ::VROSC::DrumpadUI*& dyn__UI();
    // Get instance field reference: private UnityEngine.Playables.PlayableDirector _playableDirector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableDirector*& dyn__playableDirector();
    // Get instance field reference: private UnityEngine.Playables.PlayableAsset _enterTimeline
    [[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableAsset*& dyn__enterTimeline();
    // Get instance field reference: private UnityEngine.Playables.PlayableAsset _exitTimeline
    [[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableAsset*& dyn__exitTimeline();
    // Get instance field reference: private UnityEngine.Collider[] _overlaps
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn__overlaps();
    // Get instance field reference: private VROSC.DrumpadSpawner _overlappingSpawner
    [[deprecated("Use field access instead!")]] ::VROSC::DrumpadSpawner*& dyn__overlappingSpawner();
    // Get instance field reference: private System.Single _spawnerDeleteDistance
    [[deprecated("Use field access instead!")]] float& dyn__spawnerDeleteDistance();
    // Get instance field reference: private VROSC.DrumpadSpawner _drumpadSpawner
    [[deprecated("Use field access instead!")]] ::VROSC::DrumpadSpawner*& dyn__drumpadSpawner();
    // Get instance field reference: private System.Int32 _empadId
    [[deprecated("Use field access instead!")]] int& dyn__empadId();
    // Get instance field reference: private UnityEngine.Transform _parent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__parent();
    // Get instance field reference: private VROSC.ModularDrumsController _instrumentController
    [[deprecated("Use field access instead!")]] ::VROSC::ModularDrumsController*& dyn__instrumentController();
    // Get instance field reference: public System.Action`1<VROSC.Drumpad> OnRemoveDrumpad
    [[deprecated("Use field access instead!")]] ::System::Action_1<::VROSC::Drumpad*>*& dyn_OnRemoveDrumpad();
    // public VROSC.DrumpadSpawner get_DrumpadSpawner()
    // Offset: 0x8E6F88
    ::VROSC::DrumpadSpawner* get_DrumpadSpawner();
    // public VROSC.DrumpadPlayer get_DrumpadPlayer()
    // Offset: 0x8E6F90
    ::VROSC::DrumpadPlayer* get_DrumpadPlayer();
    // public VROSC.TransformMover get_TransformMover()
    // Offset: 0x8E6F98
    ::VROSC::TransformMover* get_TransformMover();
    // public System.Void .ctor()
    // Offset: 0x8E83BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Drumpad* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::Drumpad::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Drumpad*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x8E6FA0
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x8E7290
    void OnDestroy();
    // private System.Void SetDrumUseVelocity(System.Boolean useVelocity)
    // Offset: 0x8E7608
    void SetDrumUseVelocity(bool useVelocity);
    // private System.Void SetPitch(System.Int32 pitch)
    // Offset: 0x8E7690
    void SetPitch(int pitch);
    // public System.Void Setup(VROSC.DrumpadSpawner drumpadSpawner, System.Int32 empadId, UnityEngine.Transform parent, VROSC.ModularDrumsController instrumentController)
    // Offset: 0x8E77DC
    void Setup(::VROSC::DrumpadSpawner* drumpadSpawner, int empadId, ::UnityEngine::Transform* parent, ::VROSC::ModularDrumsController* instrumentController);
    // System.Void SetActive(System.Boolean isActive)
    // Offset: 0x8E7E18
    void SetActive(bool isActive);
    // public System.Void Grab(VROSC.GrabData grabData, System.Boolean grabbing)
    // Offset: 0x8E7EC8
    void Grab(::VROSC::GrabData* grabData, bool grabbing);
    // public System.Void GrabEnded(VROSC.TransformMover mover)
    // Offset: 0x8E7EEC
    void GrabEnded(::VROSC::TransformMover* mover);
    // private System.Void SetDrumSampleOrNoteNumber(System.Int32 sampleIdOrNoteNumber, System.Boolean preview)
    // Offset: 0x8E7B0C
    void SetDrumSampleOrNoteNumber(int sampleIdOrNoteNumber, bool preview);
    // private System.Void Delete()
    // Offset: 0x8E811C
    void Delete();
    // public System.Void Delete(System.Boolean removeFromController)
    // Offset: 0x8E81D0
    void Delete(bool removeFromController);
    // private System.Void SynthesizerChanged(System.Boolean useExternal)
    // Offset: 0x8E8370
    void SynthesizerChanged(bool useExternal);
  }; // VROSC.Drumpad
  #pragma pack(pop)
  static check_size<sizeof(Drumpad), 128 + sizeof(::System::Action_1<::VROSC::Drumpad*>*)> __VROSC_DrumpadSizeCheck;
  static_assert(sizeof(Drumpad) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::Drumpad::get_DrumpadSpawner
// Il2CppName: get_DrumpadSpawner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::DrumpadSpawner* (VROSC::Drumpad::*)()>(&VROSC::Drumpad::get_DrumpadSpawner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Drumpad*), "get_DrumpadSpawner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Drumpad::get_DrumpadPlayer
// Il2CppName: get_DrumpadPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::DrumpadPlayer* (VROSC::Drumpad::*)()>(&VROSC::Drumpad::get_DrumpadPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Drumpad*), "get_DrumpadPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Drumpad::get_TransformMover
// Il2CppName: get_TransformMover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::TransformMover* (VROSC::Drumpad::*)()>(&VROSC::Drumpad::get_TransformMover)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Drumpad*), "get_TransformMover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Drumpad::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::Drumpad::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Drumpad::*)()>(&VROSC::Drumpad::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Drumpad*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Drumpad::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Drumpad::*)()>(&VROSC::Drumpad::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Drumpad*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Drumpad::SetDrumUseVelocity
// Il2CppName: SetDrumUseVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Drumpad::*)(bool)>(&VROSC::Drumpad::SetDrumUseVelocity)> {
  static const MethodInfo* get() {
    static auto* useVelocity = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Drumpad*), "SetDrumUseVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useVelocity});
  }
};
// Writing MetadataGetter for method: VROSC::Drumpad::SetPitch
// Il2CppName: SetPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Drumpad::*)(int)>(&VROSC::Drumpad::SetPitch)> {
  static const MethodInfo* get() {
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Drumpad*), "SetPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pitch});
  }
};
// Writing MetadataGetter for method: VROSC::Drumpad::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Drumpad::*)(::VROSC::DrumpadSpawner*, int, ::UnityEngine::Transform*, ::VROSC::ModularDrumsController*)>(&VROSC::Drumpad::Setup)> {
  static const MethodInfo* get() {
    static auto* drumpadSpawner = &::il2cpp_utils::GetClassFromName("VROSC", "DrumpadSpawner")->byval_arg;
    static auto* empadId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* instrumentController = &::il2cpp_utils::GetClassFromName("VROSC", "ModularDrumsController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Drumpad*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{drumpadSpawner, empadId, parent, instrumentController});
  }
};
// Writing MetadataGetter for method: VROSC::Drumpad::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Drumpad::*)(bool)>(&VROSC::Drumpad::SetActive)> {
  static const MethodInfo* get() {
    static auto* isActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Drumpad*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isActive});
  }
};
// Writing MetadataGetter for method: VROSC::Drumpad::Grab
// Il2CppName: Grab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Drumpad::*)(::VROSC::GrabData*, bool)>(&VROSC::Drumpad::Grab)> {
  static const MethodInfo* get() {
    static auto* grabData = &::il2cpp_utils::GetClassFromName("VROSC", "GrabData")->byval_arg;
    static auto* grabbing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Drumpad*), "Grab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabData, grabbing});
  }
};
// Writing MetadataGetter for method: VROSC::Drumpad::GrabEnded
// Il2CppName: GrabEnded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Drumpad::*)(::VROSC::TransformMover*)>(&VROSC::Drumpad::GrabEnded)> {
  static const MethodInfo* get() {
    static auto* mover = &::il2cpp_utils::GetClassFromName("VROSC", "TransformMover")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Drumpad*), "GrabEnded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mover});
  }
};
// Writing MetadataGetter for method: VROSC::Drumpad::SetDrumSampleOrNoteNumber
// Il2CppName: SetDrumSampleOrNoteNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Drumpad::*)(int, bool)>(&VROSC::Drumpad::SetDrumSampleOrNoteNumber)> {
  static const MethodInfo* get() {
    static auto* sampleIdOrNoteNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* preview = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Drumpad*), "SetDrumSampleOrNoteNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sampleIdOrNoteNumber, preview});
  }
};
// Writing MetadataGetter for method: VROSC::Drumpad::Delete
// Il2CppName: Delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Drumpad::*)()>(&VROSC::Drumpad::Delete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Drumpad*), "Delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Drumpad::Delete
// Il2CppName: Delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Drumpad::*)(bool)>(&VROSC::Drumpad::Delete)> {
  static const MethodInfo* get() {
    static auto* removeFromController = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Drumpad*), "Delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{removeFromController});
  }
};
// Writing MetadataGetter for method: VROSC::Drumpad::SynthesizerChanged
// Il2CppName: SynthesizerChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Drumpad::*)(bool)>(&VROSC::Drumpad::SynthesizerChanged)> {
  static const MethodInfo* get() {
    static auto* useExternal = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Drumpad*), "SynthesizerChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useExternal});
  }
};
