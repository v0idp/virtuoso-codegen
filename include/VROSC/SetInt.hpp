// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.IntChanger
#include "VROSC/IntChanger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: IntField
  class IntField;
  // Forward declaring type: Signal
  class Signal;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: SetInt
  class SetInt;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::SetInt);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::SetInt*, "VROSC", "SetInt");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.SetInt
  // [TokenAttribute] Offset: FFFFFFFF
  class SetInt : public ::VROSC::IntChanger {
    public:
    // Writing base type padding for base size: 0x49 to desired offset: 0x50
    char ___base_padding[0x7] = {};
    public:
    // private VROSC.IntField _setTo
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::IntField* setTo;
    // Field size check
    static_assert(sizeof(::VROSC::IntField*) == 0x8);
    // private System.Boolean _useSignalValue
    // Size: 0x1
    // Offset: 0x58
    bool useSignalValue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useSignalValue and: minValue
    char __padding1[0x7] = {};
    // private VROSC.IntField _minValue
    // Size: 0x8
    // Offset: 0x60
    ::VROSC::IntField* minValue;
    // Field size check
    static_assert(sizeof(::VROSC::IntField*) == 0x8);
    // private VROSC.IntField _maxValue
    // Size: 0x8
    // Offset: 0x68
    ::VROSC::IntField* maxValue;
    // Field size check
    static_assert(sizeof(::VROSC::IntField*) == 0x8);
    public:
    // Get instance field reference: private VROSC.IntField _setTo
    [[deprecated]] ::VROSC::IntField*& dyn__setTo();
    // Get instance field reference: private System.Boolean _useSignalValue
    [[deprecated]] bool& dyn__useSignalValue();
    // Get instance field reference: private VROSC.IntField _minValue
    [[deprecated]] ::VROSC::IntField*& dyn__minValue();
    // Get instance field reference: private VROSC.IntField _maxValue
    [[deprecated]] ::VROSC::IntField*& dyn__maxValue();
    // public System.Void .ctor()
    // Offset: 0x1924B60
    // Implemented from: VROSC.IntChanger
    // Base method: System.Void IntChanger::.ctor()
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SetInt* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SetInt::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SetInt*, creationType>()));
    }
    // protected override System.Void SetValueBySignal(VROSC.Signal signal)
    // Offset: 0x1924A90
    // Implemented from: VROSC.IntChanger
    // Base method: System.Void IntChanger::SetValueBySignal(VROSC.Signal signal)
    void SetValueBySignal(::VROSC::Signal* signal);
  }; // VROSC.SetInt
  #pragma pack(pop)
  static check_size<sizeof(SetInt), 104 + sizeof(::VROSC::IntField*)> __VROSC_SetIntSizeCheck;
  static_assert(sizeof(SetInt) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::SetInt::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::SetInt::SetValueBySignal
// Il2CppName: SetValueBySignal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SetInt::*)(::VROSC::Signal*)>(&VROSC::SetInt::SetValueBySignal)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SetInt*), "SetValueBySignal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
