// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableDirector
  class PlayableDirector;
  // Forward declaring type: PlayableAsset
  class PlayableAsset;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: LocalTransformData
  class LocalTransformData;
  // Forward declaring type: ClickData
  class ClickData;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: MalletAnimator
  class MalletAnimator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::MalletAnimator);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::MalletAnimator*, "VROSC", "MalletAnimator");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.MalletAnimator
  // [TokenAttribute] Offset: FFFFFFFF
  class MalletAnimator : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Action`1<System.Boolean> OnFinished
    // Size: 0x8
    // Offset: 0x18
    ::System::Action_1<bool>* OnFinished;
    // Field size check
    static_assert(sizeof(::System::Action_1<bool>*) == 0x8);
    // private UnityEngine.Playables.PlayableDirector _playableDirector
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Playables::PlayableDirector* playableDirector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Playables::PlayableDirector*) == 0x8);
    // private UnityEngine.Playables.PlayableAsset _enterTimeline
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Playables::PlayableAsset* enterTimeline;
    // Field size check
    static_assert(sizeof(::UnityEngine::Playables::PlayableAsset*) == 0x8);
    // private UnityEngine.Playables.PlayableAsset _exitTimeline
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Playables::PlayableAsset* exitTimeline;
    // Field size check
    static_assert(sizeof(::UnityEngine::Playables::PlayableAsset*) == 0x8);
    // private UnityEngine.Transform _startPosition
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* startPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private VROSC.LocalTransformData _defaultStartPosition
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::LocalTransformData* defaultStartPosition;
    // Field size check
    static_assert(sizeof(::VROSC::LocalTransformData*) == 0x8);
    // private System.Boolean _isActive
    // Size: 0x1
    // Offset: 0x48
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Action`1<System.Boolean> OnFinished
    [[deprecated]] ::System::Action_1<bool>*& dyn_OnFinished();
    // Get instance field reference: private UnityEngine.Playables.PlayableDirector _playableDirector
    [[deprecated]] ::UnityEngine::Playables::PlayableDirector*& dyn__playableDirector();
    // Get instance field reference: private UnityEngine.Playables.PlayableAsset _enterTimeline
    [[deprecated]] ::UnityEngine::Playables::PlayableAsset*& dyn__enterTimeline();
    // Get instance field reference: private UnityEngine.Playables.PlayableAsset _exitTimeline
    [[deprecated]] ::UnityEngine::Playables::PlayableAsset*& dyn__exitTimeline();
    // Get instance field reference: private UnityEngine.Transform _startPosition
    [[deprecated]] ::UnityEngine::Transform*& dyn__startPosition();
    // Get instance field reference: private VROSC.LocalTransformData _defaultStartPosition
    [[deprecated]] ::VROSC::LocalTransformData*& dyn__defaultStartPosition();
    // Get instance field reference: private System.Boolean _isActive
    [[deprecated]] bool& dyn__isActive();
    // private System.Void Awake()
    // Offset: 0x197D894
    void Awake();
    // public System.Void SetActive(System.Boolean active)
    // Offset: 0x197D7CC
    void SetActive(bool active);
    // System.Void GrabbedAt(VROSC.ClickData clickData)
    // Offset: 0x197D728
    void GrabbedAt(::VROSC::ClickData* clickData);
    // private System.Void OnDestroy()
    // Offset: 0x197D970
    void OnDestroy();
    // private System.Void OnPlayableDirectorStopped(UnityEngine.Playables.PlayableDirector aDirector)
    // Offset: 0x197DA18
    void OnPlayableDirectorStopped(::UnityEngine::Playables::PlayableDirector* aDirector);
    // public System.Void .ctor()
    // Offset: 0x197DACC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MalletAnimator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MalletAnimator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MalletAnimator*, creationType>()));
    }
  }; // VROSC.MalletAnimator
  #pragma pack(pop)
  static check_size<sizeof(MalletAnimator), 72 + sizeof(bool)> __VROSC_MalletAnimatorSizeCheck;
  static_assert(sizeof(MalletAnimator) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::MalletAnimator::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MalletAnimator::*)()>(&VROSC::MalletAnimator::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletAnimator*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MalletAnimator::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MalletAnimator::*)(bool)>(&VROSC::MalletAnimator::SetActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletAnimator*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: VROSC::MalletAnimator::GrabbedAt
// Il2CppName: GrabbedAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MalletAnimator::*)(::VROSC::ClickData*)>(&VROSC::MalletAnimator::GrabbedAt)> {
  static const MethodInfo* get() {
    static auto* clickData = &::il2cpp_utils::GetClassFromName("VROSC", "ClickData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletAnimator*), "GrabbedAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clickData});
  }
};
// Writing MetadataGetter for method: VROSC::MalletAnimator::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MalletAnimator::*)()>(&VROSC::MalletAnimator::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletAnimator*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MalletAnimator::OnPlayableDirectorStopped
// Il2CppName: OnPlayableDirectorStopped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MalletAnimator::*)(::UnityEngine::Playables::PlayableDirector*)>(&VROSC::MalletAnimator::OnPlayableDirectorStopped)> {
  static const MethodInfo* get() {
    static auto* aDirector = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableDirector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletAnimator*), "OnPlayableDirectorStopped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aDirector});
  }
};
// Writing MetadataGetter for method: VROSC::MalletAnimator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
