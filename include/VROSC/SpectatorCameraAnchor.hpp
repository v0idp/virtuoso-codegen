// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: VRPlayer
  class VRPlayer;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: SpectatorCameraAnchor
  class SpectatorCameraAnchor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::SpectatorCameraAnchor);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::SpectatorCameraAnchor*, "VROSC", "SpectatorCameraAnchor");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.SpectatorCameraAnchor
  // [TokenAttribute] Offset: FFFFFFFF
  class SpectatorCameraAnchor : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.String _displayName
    // Size: 0x8
    // Offset: 0x18
    ::StringW displayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Transform _targetTransform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* targetTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean _followPlayer
    // Size: 0x1
    // Offset: 0x28
    bool followPlayer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _followPosition
    // Size: 0x1
    // Offset: 0x29
    bool followPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _followRotation
    // Size: 0x1
    // Offset: 0x2A
    bool followRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _lookAtTarget
    // Size: 0x1
    // Offset: 0x2B
    bool lookAtTarget;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Vector3 _offsetToTarget
    // Size: 0xC
    // Offset: 0x2C
    ::UnityEngine::Vector3 offsetToTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean _xOffsetLocal
    // Size: 0x1
    // Offset: 0x38
    bool xOffsetLocal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _yOffsetLocal
    // Size: 0x1
    // Offset: 0x39
    bool yOffsetLocal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _zOffsetLocal
    // Size: 0x1
    // Offset: 0x3A
    bool zOffsetLocal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: zOffsetLocal and: cameraLayerMask
    char __padding9[0x1] = {};
    // private UnityEngine.LayerMask _cameraLayerMask
    // Size: 0x4
    // Offset: 0x3C
    ::UnityEngine::LayerMask cameraLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private System.Single _fov
    // Size: 0x4
    // Offset: 0x40
    float fov;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _active
    // Size: 0x1
    // Offset: 0x44
    bool active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: active and: OnAnchorActivated
    char __padding12[0x3] = {};
    // public System.Action`1<System.Boolean> OnAnchorActivated
    // Size: 0x8
    // Offset: 0x48
    ::System::Action_1<bool>* OnAnchorActivated;
    // Field size check
    static_assert(sizeof(::System::Action_1<bool>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.String _displayName
    [[deprecated]] ::StringW& dyn__displayName();
    // Get instance field reference: private UnityEngine.Transform _targetTransform
    [[deprecated]] ::UnityEngine::Transform*& dyn__targetTransform();
    // Get instance field reference: private System.Boolean _followPlayer
    [[deprecated]] bool& dyn__followPlayer();
    // Get instance field reference: private System.Boolean _followPosition
    [[deprecated]] bool& dyn__followPosition();
    // Get instance field reference: private System.Boolean _followRotation
    [[deprecated]] bool& dyn__followRotation();
    // Get instance field reference: private System.Boolean _lookAtTarget
    [[deprecated]] bool& dyn__lookAtTarget();
    // Get instance field reference: private UnityEngine.Vector3 _offsetToTarget
    [[deprecated]] ::UnityEngine::Vector3& dyn__offsetToTarget();
    // Get instance field reference: private System.Boolean _xOffsetLocal
    [[deprecated]] bool& dyn__xOffsetLocal();
    // Get instance field reference: private System.Boolean _yOffsetLocal
    [[deprecated]] bool& dyn__yOffsetLocal();
    // Get instance field reference: private System.Boolean _zOffsetLocal
    [[deprecated]] bool& dyn__zOffsetLocal();
    // Get instance field reference: private UnityEngine.LayerMask _cameraLayerMask
    [[deprecated]] ::UnityEngine::LayerMask& dyn__cameraLayerMask();
    // Get instance field reference: private System.Single _fov
    [[deprecated]] float& dyn__fov();
    // Get instance field reference: private System.Boolean _active
    [[deprecated]] bool& dyn__active();
    // Get instance field reference: public System.Action`1<System.Boolean> OnAnchorActivated
    [[deprecated]] ::System::Action_1<bool>*& dyn_OnAnchorActivated();
    // public System.String get_DisplayName()
    // Offset: 0x192D6D4
    ::StringW get_DisplayName();
    // public System.Boolean get_IsFollowing()
    // Offset: 0x192D6DC
    bool get_IsFollowing();
    // public UnityEngine.LayerMask get_CameraLayerMask()
    // Offset: 0x192D764
    ::UnityEngine::LayerMask get_CameraLayerMask();
    // public System.Void set_CameraLayerMask(UnityEngine.LayerMask value)
    // Offset: 0x192D76C
    void set_CameraLayerMask(::UnityEngine::LayerMask value);
    // public System.Single get_FoV()
    // Offset: 0x192D774
    float get_FoV();
    // public System.Boolean get_Active()
    // Offset: 0x192D77C
    bool get_Active();
    // private System.Void Start()
    // Offset: 0x192D784
    void Start();
    // private System.Void OnValidate()
    // Offset: 0x192D924
    void OnValidate();
    // private System.Void Update()
    // Offset: 0x192D9B8
    void Update();
    // System.Void SetActive(System.Boolean active, UnityEngine.Camera spectatorCamera, System.Boolean hideBackground)
    // Offset: 0x192DBEC
    void SetActive(bool active, ::UnityEngine::Camera* spectatorCamera, bool hideBackground);
    // public System.Void ApplyDefaultLayerMask(UnityEngine.Camera spectatorCamera)
    // Offset: 0x192DD4C
    void ApplyDefaultLayerMask(::UnityEngine::Camera* spectatorCamera);
    // private System.Void PlayerInitialized(VROSC.VRPlayer vrPlayer)
    // Offset: 0x192D8EC
    void PlayerInitialized(::VROSC::VRPlayer* vrPlayer);
    // public System.Void .ctor()
    // Offset: 0x192DD88
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpectatorCameraAnchor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SpectatorCameraAnchor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpectatorCameraAnchor*, creationType>()));
    }
  }; // VROSC.SpectatorCameraAnchor
  #pragma pack(pop)
  static check_size<sizeof(SpectatorCameraAnchor), 72 + sizeof(::System::Action_1<bool>*)> __VROSC_SpectatorCameraAnchorSizeCheck;
  static_assert(sizeof(SpectatorCameraAnchor) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::SpectatorCameraAnchor::get_DisplayName
// Il2CppName: get_DisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::SpectatorCameraAnchor::*)()>(&VROSC::SpectatorCameraAnchor::get_DisplayName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraAnchor*), "get_DisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraAnchor::get_IsFollowing
// Il2CppName: get_IsFollowing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::SpectatorCameraAnchor::*)()>(&VROSC::SpectatorCameraAnchor::get_IsFollowing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraAnchor*), "get_IsFollowing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraAnchor::get_CameraLayerMask
// Il2CppName: get_CameraLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (VROSC::SpectatorCameraAnchor::*)()>(&VROSC::SpectatorCameraAnchor::get_CameraLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraAnchor*), "get_CameraLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraAnchor::set_CameraLayerMask
// Il2CppName: set_CameraLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraAnchor::*)(::UnityEngine::LayerMask)>(&VROSC::SpectatorCameraAnchor::set_CameraLayerMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraAnchor*), "set_CameraLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraAnchor::get_FoV
// Il2CppName: get_FoV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::SpectatorCameraAnchor::*)()>(&VROSC::SpectatorCameraAnchor::get_FoV)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraAnchor*), "get_FoV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraAnchor::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::SpectatorCameraAnchor::*)()>(&VROSC::SpectatorCameraAnchor::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraAnchor*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraAnchor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraAnchor::*)()>(&VROSC::SpectatorCameraAnchor::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraAnchor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraAnchor::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraAnchor::*)()>(&VROSC::SpectatorCameraAnchor::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraAnchor*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraAnchor::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraAnchor::*)()>(&VROSC::SpectatorCameraAnchor::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraAnchor*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraAnchor::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraAnchor::*)(bool, ::UnityEngine::Camera*, bool)>(&VROSC::SpectatorCameraAnchor::SetActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* spectatorCamera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* hideBackground = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraAnchor*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active, spectatorCamera, hideBackground});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraAnchor::ApplyDefaultLayerMask
// Il2CppName: ApplyDefaultLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraAnchor::*)(::UnityEngine::Camera*)>(&VROSC::SpectatorCameraAnchor::ApplyDefaultLayerMask)> {
  static const MethodInfo* get() {
    static auto* spectatorCamera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraAnchor*), "ApplyDefaultLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{spectatorCamera});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraAnchor::PlayerInitialized
// Il2CppName: PlayerInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraAnchor::*)(::VROSC::VRPlayer*)>(&VROSC::SpectatorCameraAnchor::PlayerInitialized)> {
  static const MethodInfo* get() {
    static auto* vrPlayer = &::il2cpp_utils::GetClassFromName("VROSC", "VRPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraAnchor*), "PlayerInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vrPlayer});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraAnchor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
