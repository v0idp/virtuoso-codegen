// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: IState
  class IState;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: StateMachine
  class StateMachine;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::StateMachine);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::StateMachine*, "VROSC", "StateMachine");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.StateMachine
  // [TokenAttribute] Offset: FFFFFFFF
  class StateMachine : public ::Il2CppObject {
    public:
    // Nested type: ::VROSC::StateMachine::Transition
    class Transition;
    public:
    // private VROSC.IState _currentState
    // Size: 0x8
    // Offset: 0x10
    ::VROSC::IState* currentState;
    // Field size check
    static_assert(sizeof(::VROSC::IState*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.List`1<VROSC.StateMachine/VROSC.Transition>> _transitions
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Collections::Generic::List_1<::VROSC::StateMachine::Transition*>*>* transitions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Collections::Generic::List_1<::VROSC::StateMachine::Transition*>*>*) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.StateMachine/VROSC.Transition> _currentTransitions
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::VROSC::StateMachine::Transition*>* currentTransitions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::StateMachine::Transition*>*) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.StateMachine/VROSC.Transition> _anyTransitions
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::VROSC::StateMachine::Transition*>* anyTransitions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::StateMachine::Transition*>*) == 0x8);
    public:
    // Get static field: static private System.Collections.Generic.List`1<VROSC.StateMachine/VROSC.Transition> EmptyTransitions
    static ::System::Collections::Generic::List_1<::VROSC::StateMachine::Transition*>* _get_EmptyTransitions();
    // Set static field: static private System.Collections.Generic.List`1<VROSC.StateMachine/VROSC.Transition> EmptyTransitions
    static void _set_EmptyTransitions(::System::Collections::Generic::List_1<::VROSC::StateMachine::Transition*>* value);
    // Get instance field reference: private VROSC.IState _currentState
    [[deprecated("Use field access instead!")]] ::VROSC::IState*& dyn__currentState();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.List`1<VROSC.StateMachine/VROSC.Transition>> _transitions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Collections::Generic::List_1<::VROSC::StateMachine::Transition*>*>*& dyn__transitions();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.StateMachine/VROSC.Transition> _currentTransitions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VROSC::StateMachine::Transition*>*& dyn__currentTransitions();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.StateMachine/VROSC.Transition> _anyTransitions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VROSC::StateMachine::Transition*>*& dyn__anyTransitions();
    // public System.Void .ctor()
    // Offset: 0x193096C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StateMachine* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::StateMachine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StateMachine*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1930A44
    static void _cctor();
    // public System.Boolean IsState(VROSC.IState state)
    // Offset: 0x19300DC
    bool IsState(::VROSC::IState* state);
    // public System.Void Tick()
    // Offset: 0x19300EC
    void Tick();
    // public System.Void SetState(VROSC.IState state, params System.Object[] values)
    // Offset: 0x193053C
    void SetState(::VROSC::IState* state, ::ArrayW<::Il2CppObject*> values);
    // public System.Void AddTransition(VROSC.IState from, VROSC.IState to, System.Func`1<System.Boolean> predicate)
    // Offset: 0x193076C
    void AddTransition(::VROSC::IState* from, ::VROSC::IState* to, ::System::Func_1<bool>* predicate);
    // public System.Void AddAnyTransition(VROSC.IState state, System.Func`1<System.Boolean> predicate)
    // Offset: 0x19308D0
    void AddAnyTransition(::VROSC::IState* state, ::System::Func_1<bool>* predicate);
    // private System.Boolean GetTransition(out VROSC.StateMachine/VROSC.Transition transition)
    // Offset: 0x1930270
    bool GetTransition(ByRef<::VROSC::StateMachine::Transition*> transition);
  }; // VROSC.StateMachine
  #pragma pack(pop)
  static check_size<sizeof(StateMachine), 40 + sizeof(::System::Collections::Generic::List_1<::VROSC::StateMachine::Transition*>*)> __VROSC_StateMachineSizeCheck;
  static_assert(sizeof(StateMachine) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::StateMachine::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::StateMachine::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VROSC::StateMachine::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::StateMachine*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::StateMachine::IsState
// Il2CppName: IsState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::StateMachine::*)(::VROSC::IState*)>(&VROSC::StateMachine::IsState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("VROSC", "IState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::StateMachine*), "IsState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: VROSC::StateMachine::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::StateMachine::*)()>(&VROSC::StateMachine::Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::StateMachine*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::StateMachine::SetState
// Il2CppName: SetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::StateMachine::*)(::VROSC::IState*, ::ArrayW<::Il2CppObject*>)>(&VROSC::StateMachine::SetState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("VROSC", "IState")->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::StateMachine*), "SetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, values});
  }
};
// Writing MetadataGetter for method: VROSC::StateMachine::AddTransition
// Il2CppName: AddTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::StateMachine::*)(::VROSC::IState*, ::VROSC::IState*, ::System::Func_1<bool>*)>(&VROSC::StateMachine::AddTransition)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("VROSC", "IState")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("VROSC", "IState")->byval_arg;
    static auto* predicate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::StateMachine*), "AddTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, predicate});
  }
};
// Writing MetadataGetter for method: VROSC::StateMachine::AddAnyTransition
// Il2CppName: AddAnyTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::StateMachine::*)(::VROSC::IState*, ::System::Func_1<bool>*)>(&VROSC::StateMachine::AddAnyTransition)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("VROSC", "IState")->byval_arg;
    static auto* predicate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::StateMachine*), "AddAnyTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, predicate});
  }
};
// Writing MetadataGetter for method: VROSC::StateMachine::GetTransition
// Il2CppName: GetTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::StateMachine::*)(ByRef<::VROSC::StateMachine::Transition*>)>(&VROSC::StateMachine::GetTransition)> {
  static const MethodInfo* get() {
    static auto* transition = &::il2cpp_utils::GetClassFromName("VROSC", "StateMachine/Transition")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::StateMachine*), "GetTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transition});
  }
};
