// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.PaginatedListItemUI
#include "VROSC/PaginatedListItemUI.hpp"
// Including type: VROSC.SessionUIData
#include "VROSC/SessionUIData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: PaginatedListDataHolder
  class PaginatedListDataHolder;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: SessionItemUI
  class SessionItemUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::SessionItemUI);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::SessionItemUI*, "VROSC", "SessionItemUI");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.SessionItemUI
  // [TokenAttribute] Offset: FFFFFFFF
  class SessionItemUI : public ::VROSC::PaginatedListItemUI {
    public:
    public:
    // private TMPro.TextMeshPro _nameLabel
    // Size: 0x8
    // Offset: 0x40
    ::TMPro::TextMeshPro* nameLabel;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private TMPro.TextMeshPro _authorLabel
    // Size: 0x8
    // Offset: 0x48
    ::TMPro::TextMeshPro* authorLabel;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private TMPro.TextMeshPro _dateLabel
    // Size: 0x8
    // Offset: 0x50
    ::TMPro::TextMeshPro* dateLabel;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private UnityEngine.GameObject _cloudIcon
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::GameObject* cloudIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _mySharedIcon
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::GameObject* mySharedIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _communityIcon
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::GameObject* communityIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Get instance field reference: private TMPro.TextMeshPro _nameLabel
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& dyn__nameLabel();
    // Get instance field reference: private TMPro.TextMeshPro _authorLabel
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& dyn__authorLabel();
    // Get instance field reference: private TMPro.TextMeshPro _dateLabel
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& dyn__dateLabel();
    // Get instance field reference: private UnityEngine.GameObject _cloudIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__cloudIcon();
    // Get instance field reference: private UnityEngine.GameObject _mySharedIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__mySharedIcon();
    // Get instance field reference: private UnityEngine.GameObject _communityIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__communityIcon();
    // public System.Void SetUIData(System.String displayName, System.String authorName, System.String dateText, VROSC.SessionUIData/VROSC.Type sessionType)
    // Offset: 0x19871CC
    void SetUIData(::StringW displayName, ::StringW authorName, ::StringW dateText, ::VROSC::SessionUIData::Type sessionType);
    // public System.Void .ctor()
    // Offset: 0x1987294
    // Implemented from: VROSC.PaginatedListItemUI
    // Base method: System.Void PaginatedListItemUI::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SessionItemUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SessionItemUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SessionItemUI*, creationType>()));
    }
    // public override System.Void SetNewData(VROSC.PaginatedListDataHolder dataholder)
    // Offset: 0x1987028
    // Implemented from: VROSC.PaginatedListItemUI
    // Base method: System.Void PaginatedListItemUI::SetNewData(VROSC.PaginatedListDataHolder dataholder)
    void SetNewData(::VROSC::PaginatedListDataHolder* dataholder);
  }; // VROSC.SessionItemUI
  #pragma pack(pop)
  static check_size<sizeof(SessionItemUI), 104 + sizeof(::UnityEngine::GameObject*)> __VROSC_SessionItemUISizeCheck;
  static_assert(sizeof(SessionItemUI) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::SessionItemUI::SetUIData
// Il2CppName: SetUIData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SessionItemUI::*)(::StringW, ::StringW, ::StringW, ::VROSC::SessionUIData::Type)>(&VROSC::SessionItemUI::SetUIData)> {
  static const MethodInfo* get() {
    static auto* displayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* authorName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dateText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sessionType = &::il2cpp_utils::GetClassFromName("VROSC", "SessionUIData/Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SessionItemUI*), "SetUIData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayName, authorName, dateText, sessionType});
  }
};
// Writing MetadataGetter for method: VROSC::SessionItemUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::SessionItemUI::SetNewData
// Il2CppName: SetNewData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SessionItemUI::*)(::VROSC::PaginatedListDataHolder*)>(&VROSC::SessionItemUI::SetNewData)> {
  static const MethodInfo* get() {
    static auto* dataholder = &::il2cpp_utils::GetClassFromName("VROSC", "PaginatedListDataHolder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SessionItemUI*), "SetNewData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dataholder});
  }
};
