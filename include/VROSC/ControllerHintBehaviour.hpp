// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.PlayableBehaviour
#include "UnityEngine/Playables/PlayableBehaviour.hpp"
// Including type: VROSC.HighlightControllerComponents/VROSC.Component
#include "VROSC/HighlightControllerComponents_Component.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: VROSC.NoteBoard/VROSC.PlayAxis
#include "VROSC/NoteBoard_PlayAxis.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: NoteBoardNoteController
  class NoteBoardNoteController;
  // Skipping declaration: HighlightControllerComponents because it is already included!
  // Forward declaring type: TouchableObjectsController
  class TouchableObjectsController;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: FrameData
  struct FrameData;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ControllerHintBehaviour
  class ControllerHintBehaviour;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ControllerHintBehaviour);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ControllerHintBehaviour*, "VROSC", "ControllerHintBehaviour");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x56
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ControllerHintBehaviour
  // [TokenAttribute] Offset: FFFFFFFF
  class ControllerHintBehaviour : public ::UnityEngine::Playables::PlayableBehaviour {
    public:
    public:
    // private VROSC.NoteBoardNoteController _noteboardController
    // Size: 0x8
    // Offset: 0x10
    ::VROSC::NoteBoardNoteController* noteboardController;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoardNoteController*) == 0x8);
    // private VROSC.HighlightControllerComponents _highlight
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::HighlightControllerComponents* highlight;
    // Field size check
    static_assert(sizeof(::VROSC::HighlightControllerComponents*) == 0x8);
    // private VROSC.TouchableObjectsController _touchables
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::TouchableObjectsController* touchables;
    // Field size check
    static_assert(sizeof(::VROSC::TouchableObjectsController*) == 0x8);
    // public VROSC.HighlightControllerComponents/VROSC.Component component
    // Size: 0x4
    // Offset: 0x28
    ::VROSC::HighlightControllerComponents::Component component;
    // Field size check
    static_assert(sizeof(::VROSC::HighlightControllerComponents::Component) == 0x4);
    // [RangeAttribute] Offset: 0x789AF4
    // public System.Single Visible
    // Size: 0x4
    // Offset: 0x2C
    float Visible;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [ColorUsageAttribute] Offset: 0x789B0C
    // public UnityEngine.Color FromColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color FromColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [ColorUsageAttribute] Offset: 0x789B24
    // public UnityEngine.Color ToColor
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color ToColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public VROSC.NoteBoard/VROSC.PlayAxis Axis
    // Size: 0x4
    // Offset: 0x50
    ::VROSC::NoteBoard::PlayAxis Axis;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoard::PlayAxis) == 0x4);
    // public System.Boolean UpdateAllTouchables
    // Size: 0x1
    // Offset: 0x54
    bool UpdateAllTouchables;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean OnlyHovering
    // Size: 0x1
    // Offset: 0x55
    bool OnlyHovering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private VROSC.NoteBoardNoteController _noteboardController
    [[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNoteController*& dyn__noteboardController();
    // Get instance field reference: private VROSC.HighlightControllerComponents _highlight
    [[deprecated("Use field access instead!")]] ::VROSC::HighlightControllerComponents*& dyn__highlight();
    // Get instance field reference: private VROSC.TouchableObjectsController _touchables
    [[deprecated("Use field access instead!")]] ::VROSC::TouchableObjectsController*& dyn__touchables();
    // Get instance field reference: public VROSC.HighlightControllerComponents/VROSC.Component component
    [[deprecated("Use field access instead!")]] ::VROSC::HighlightControllerComponents::Component& dyn_component();
    // Get instance field reference: public System.Single Visible
    [[deprecated("Use field access instead!")]] float& dyn_Visible();
    // Get instance field reference: public UnityEngine.Color FromColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_FromColor();
    // Get instance field reference: public UnityEngine.Color ToColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_ToColor();
    // Get instance field reference: public VROSC.NoteBoard/VROSC.PlayAxis Axis
    [[deprecated("Use field access instead!")]] ::VROSC::NoteBoard::PlayAxis& dyn_Axis();
    // Get instance field reference: public System.Boolean UpdateAllTouchables
    [[deprecated("Use field access instead!")]] bool& dyn_UpdateAllTouchables();
    // Get instance field reference: public System.Boolean OnlyHovering
    [[deprecated("Use field access instead!")]] bool& dyn_OnlyHovering();
    // public System.Void .ctor()
    // Offset: 0x94E380
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ControllerHintBehaviour* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ControllerHintBehaviour::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ControllerHintBehaviour*, creationType>()));
    }
    // public System.Void Setup(VROSC.HighlightControllerComponents highlight, VROSC.TouchableObjectsController touchables)
    // Offset: 0x94E268
    void Setup(::VROSC::HighlightControllerComponents* highlight, ::VROSC::TouchableObjectsController* touchables);
    // public override System.Void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    // Offset: 0x94E288
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    void ProcessFrame(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info, ::Il2CppObject* playerData);
  }; // VROSC.ControllerHintBehaviour
  #pragma pack(pop)
  static check_size<sizeof(ControllerHintBehaviour), 85 + sizeof(bool)> __VROSC_ControllerHintBehaviourSizeCheck;
  static_assert(sizeof(ControllerHintBehaviour) == 0x56);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ControllerHintBehaviour::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::ControllerHintBehaviour::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ControllerHintBehaviour::*)(::VROSC::HighlightControllerComponents*, ::VROSC::TouchableObjectsController*)>(&VROSC::ControllerHintBehaviour::Setup)> {
  static const MethodInfo* get() {
    static auto* highlight = &::il2cpp_utils::GetClassFromName("VROSC", "HighlightControllerComponents")->byval_arg;
    static auto* touchables = &::il2cpp_utils::GetClassFromName("VROSC", "TouchableObjectsController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ControllerHintBehaviour*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{highlight, touchables});
  }
};
// Writing MetadataGetter for method: VROSC::ControllerHintBehaviour::ProcessFrame
// Il2CppName: ProcessFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ControllerHintBehaviour::*)(::UnityEngine::Playables::Playable, ::UnityEngine::Playables::FrameData, ::Il2CppObject*)>(&VROSC::ControllerHintBehaviour::ProcessFrame)> {
  static const MethodInfo* get() {
    static auto* playable = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "Playable")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "FrameData")->byval_arg;
    static auto* playerData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ControllerHintBehaviour*), "ProcessFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playable, info, playerData});
  }
};
