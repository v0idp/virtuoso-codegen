// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.SoundSource
#include "VROSC/SoundSource.hpp"
// Including type: VROSC.WidgetSettings
#include "VROSC/WidgetSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopStationRecordingUI
  class LoopStationRecordingUI;
  // Forward declaring type: LoopStation
  class LoopStation;
  // Skipping declaration: RecordingState because it is already included!
  // Forward declaring type: Signal
  class Signal;
  // Forward declaring type: PatchSettings
  class PatchSettings;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopStationRecorder
  class LoopStationRecorder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::LoopStationRecorder);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LoopStationRecorder*, "VROSC", "LoopStationRecorder");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.LoopStationRecorder
  // [TokenAttribute] Offset: FFFFFFFF
  class LoopStationRecorder : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::LoopStationRecorder::RecordingState
    struct RecordingState;
    // Nested type: ::VROSC::LoopStationRecorder::$ScheduleButtonPress$d__24
    struct $ScheduleButtonPress$d__24;
    // Nested type: ::VROSC::LoopStationRecorder::$ConcludeRecording$d__31
    struct $ConcludeRecording$d__31;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: VROSC.LoopStationRecorder/VROSC.RecordingState
    // [TokenAttribute] Offset: FFFFFFFF
    struct RecordingState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RecordingState
      constexpr RecordingState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public VROSC.LoopStationRecorder/VROSC.RecordingState Stopped
      static constexpr const int Stopped = 0;
      // Get static field: static public VROSC.LoopStationRecorder/VROSC.RecordingState Stopped
      static ::VROSC::LoopStationRecorder::RecordingState _get_Stopped();
      // Set static field: static public VROSC.LoopStationRecorder/VROSC.RecordingState Stopped
      static void _set_Stopped(::VROSC::LoopStationRecorder::RecordingState value);
      // static field const value: static public VROSC.LoopStationRecorder/VROSC.RecordingState WaitingForNotes
      static constexpr const int WaitingForNotes = 1;
      // Get static field: static public VROSC.LoopStationRecorder/VROSC.RecordingState WaitingForNotes
      static ::VROSC::LoopStationRecorder::RecordingState _get_WaitingForNotes();
      // Set static field: static public VROSC.LoopStationRecorder/VROSC.RecordingState WaitingForNotes
      static void _set_WaitingForNotes(::VROSC::LoopStationRecorder::RecordingState value);
      // static field const value: static public VROSC.LoopStationRecorder/VROSC.RecordingState Recording
      static constexpr const int Recording = 2;
      // Get static field: static public VROSC.LoopStationRecorder/VROSC.RecordingState Recording
      static ::VROSC::LoopStationRecorder::RecordingState _get_Recording();
      // Set static field: static public VROSC.LoopStationRecorder/VROSC.RecordingState Recording
      static void _set_Recording(::VROSC::LoopStationRecorder::RecordingState value);
      // static field const value: static public VROSC.LoopStationRecorder/VROSC.RecordingState FinishingUp
      static constexpr const int FinishingUp = 3;
      // Get static field: static public VROSC.LoopStationRecorder/VROSC.RecordingState FinishingUp
      static ::VROSC::LoopStationRecorder::RecordingState _get_FinishingUp();
      // Set static field: static public VROSC.LoopStationRecorder/VROSC.RecordingState FinishingUp
      static void _set_FinishingUp(::VROSC::LoopStationRecorder::RecordingState value);
      // static field const value: static public VROSC.LoopStationRecorder/VROSC.RecordingState Playing
      static constexpr const int Playing = 4;
      // Get static field: static public VROSC.LoopStationRecorder/VROSC.RecordingState Playing
      static ::VROSC::LoopStationRecorder::RecordingState _get_Playing();
      // Set static field: static public VROSC.LoopStationRecorder/VROSC.RecordingState Playing
      static void _set_Playing(::VROSC::LoopStationRecorder::RecordingState value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // VROSC.LoopStationRecorder/VROSC.RecordingState
    #pragma pack(pop)
    static check_size<sizeof(LoopStationRecorder::RecordingState), 0 + sizeof(int)> __VROSC_LoopStationRecorder_RecordingStateSizeCheck;
    static_assert(sizeof(LoopStationRecorder::RecordingState) == 0x4);
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private VROSC.LoopStation <LoopStation>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::LoopStation* LoopStation;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStation*) == 0x8);
    // private VROSC.LoopStationRecorder/VROSC.RecordingState <State>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    ::VROSC::LoopStationRecorder::RecordingState State;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationRecorder::RecordingState) == 0x4);
    // Padding between fields: State and: ui
    char __padding1[0x4] = {};
    // private VROSC.LoopStationRecordingUI _ui
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::LoopStationRecordingUI* ui;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationRecordingUI*) == 0x8);
    // private System.Int32 _recordingMaxLength
    // Size: 0x4
    // Offset: 0x30
    int recordingMaxLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: recordingMaxLength and: currentTrackId
    char __padding3[0x4] = {};
    // private System.String _currentTrackId
    // Size: 0x8
    // Offset: 0x38
    ::StringW currentTrackId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _buttonPressScheduled
    // Size: 0x1
    // Offset: 0x40
    bool buttonPressScheduled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: buttonPressScheduled and: currentRecordingSoundSource
    char __padding5[0x3] = {};
    // private VROSC.SoundSource _currentRecordingSoundSource
    // Size: 0x4
    // Offset: 0x44
    ::VROSC::SoundSource currentRecordingSoundSource;
    // Field size check
    static_assert(sizeof(::VROSC::SoundSource) == 0x4);
    // private System.Int32 _recordingStartSample
    // Size: 0x4
    // Offset: 0x48
    int recordingStartSample;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _currentRecordingIsOverdub
    // Size: 0x1
    // Offset: 0x4C
    bool currentRecordingIsOverdub;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: currentRecordingIsOverdub and: fadeOverlapSeconds
    char __padding8[0x3] = {};
    // private System.Single _fadeOverlapSeconds
    // Size: 0x4
    // Offset: 0x50
    float fadeOverlapSeconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _fadeOverlapLength
    // Size: 0x4
    // Offset: 0x54
    int fadeOverlapLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _setBpmRecordingOffset
    // Size: 0x4
    // Offset: 0x58
    int setBpmRecordingOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public System.Action`1<VROSC.LoopStationRecorder/VROSC.RecordingState> OnStateChanged
    static ::System::Action_1<::VROSC::LoopStationRecorder::RecordingState>* _get_OnStateChanged();
    // Set static field: static public System.Action`1<VROSC.LoopStationRecorder/VROSC.RecordingState> OnStateChanged
    static void _set_OnStateChanged(::System::Action_1<::VROSC::LoopStationRecorder::RecordingState>* value);
    // Get instance field reference: private VROSC.LoopStation <LoopStation>k__BackingField
    ::VROSC::LoopStation*& dyn_$LoopStation$k__BackingField();
    // Get instance field reference: private VROSC.LoopStationRecorder/VROSC.RecordingState <State>k__BackingField
    ::VROSC::LoopStationRecorder::RecordingState& dyn_$State$k__BackingField();
    // Get instance field reference: private VROSC.LoopStationRecordingUI _ui
    ::VROSC::LoopStationRecordingUI*& dyn__ui();
    // Get instance field reference: private System.Int32 _recordingMaxLength
    int& dyn__recordingMaxLength();
    // Get instance field reference: private System.String _currentTrackId
    ::StringW& dyn__currentTrackId();
    // Get instance field reference: private System.Boolean _buttonPressScheduled
    bool& dyn__buttonPressScheduled();
    // Get instance field reference: private VROSC.SoundSource _currentRecordingSoundSource
    ::VROSC::SoundSource& dyn__currentRecordingSoundSource();
    // Get instance field reference: private System.Int32 _recordingStartSample
    int& dyn__recordingStartSample();
    // Get instance field reference: private System.Boolean _currentRecordingIsOverdub
    bool& dyn__currentRecordingIsOverdub();
    // Get instance field reference: private System.Single _fadeOverlapSeconds
    float& dyn__fadeOverlapSeconds();
    // Get instance field reference: private System.Int32 _fadeOverlapLength
    int& dyn__fadeOverlapLength();
    // Get instance field reference: private System.Int32 _setBpmRecordingOffset
    int& dyn__setBpmRecordingOffset();
    // public VROSC.LoopStation get_LoopStation()
    // Offset: 0x917014
    ::VROSC::LoopStation* get_LoopStation();
    // private System.Void set_LoopStation(VROSC.LoopStation value)
    // Offset: 0x91701C
    void set_LoopStation(::VROSC::LoopStation* value);
    // public VROSC.LoopStationRecorder/VROSC.RecordingState get_State()
    // Offset: 0x917024
    ::VROSC::LoopStationRecorder::RecordingState get_State();
    // private System.Void set_State(VROSC.LoopStationRecorder/VROSC.RecordingState value)
    // Offset: 0x91702C
    void set_State(::VROSC::LoopStationRecorder::RecordingState value);
    // public System.Void Setup(VROSC.LoopStation loopStation)
    // Offset: 0x90A558
    void Setup(::VROSC::LoopStation* loopStation);
    // protected System.Void OnDestroy()
    // Offset: 0x917034
    void OnDestroy();
    // public System.Void UpdateLooperState()
    // Offset: 0x90A1DC
    void UpdateLooperState();
    // public System.Void RecordOrStop(VROSC.Signal signal)
    // Offset: 0x91724C
    void RecordOrStop(::VROSC::Signal* signal);
    // private System.Void ScheduleButtonPress(System.Double dspTime)
    // Offset: 0x917270
    void ScheduleButtonPress(double dspTime);
    // public System.Void StopRecordingByUser(System.Boolean restart)
    // Offset: 0x90ADB8
    void StopRecordingByUser(bool restart);
    // private System.Void PrepareForRecording()
    // Offset: 0x91756C
    void PrepareForRecording();
    // public System.Void CancelPreparingForRecording()
    // Offset: 0x9173D0
    void CancelPreparingForRecording();
    // private System.Void StartRecordingMicrophone()
    // Offset: 0x91773C
    void StartRecordingMicrophone();
    // private System.Void StartRecording(VROSC.WidgetSettings/VROSC.Identifier instrumentId, VROSC.PatchSettings patchSettings)
    // Offset: 0x917748
    void StartRecording(::VROSC::WidgetSettings::Identifier instrumentId, ::VROSC::PatchSettings* patchSettings);
    // public System.Void CancelRecording()
    // Offset: 0x90A210
    void CancelRecording();
    // private System.Void ConcludeRecording()
    // Offset: 0x917F30
    void ConcludeRecording();
    // private System.Void ReceiveRecording(System.Single[] audioData)
    // Offset: 0x917FF0
    void ReceiveRecording(::ArrayW<float> audioData);
    // private System.Void Finish()
    // Offset: 0x918084
    void Finish();
    // private System.Void CopyAudioDataToLoopTrack(System.Single[] sourceData)
    // Offset: 0x9180E4
    void CopyAudioDataToLoopTrack(::ArrayW<float> sourceData);
    // private System.Int32 CalculateGlobalSyncOffset(System.Int32 recordingLength)
    // Offset: 0x917D98
    int CalculateGlobalSyncOffset(int recordingLength);
    // private System.Void PlayAll()
    // Offset: 0x918168
    void PlayAll();
    // private System.Void SetToIdle()
    // Offset: 0x917344
    void SetToIdle();
    // public System.Void SetState(VROSC.LoopStationRecorder/VROSC.RecordingState state)
    // Offset: 0x90B5C0
    void SetState(::VROSC::LoopStationRecorder::RecordingState state);
    // public System.Void .ctor()
    // Offset: 0x9181A4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoopStationRecorder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::LoopStationRecorder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoopStationRecorder*, creationType>()));
    }
  }; // VROSC.LoopStationRecorder
  #pragma pack(pop)
  static check_size<sizeof(LoopStationRecorder), 88 + sizeof(int)> __VROSC_LoopStationRecorderSizeCheck;
  static_assert(sizeof(LoopStationRecorder) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LoopStationRecorder::RecordingState, "VROSC", "LoopStationRecorder/RecordingState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::get_LoopStation
// Il2CppName: get_LoopStation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopStation* (VROSC::LoopStationRecorder::*)()>(&VROSC::LoopStationRecorder::get_LoopStation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "get_LoopStation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::set_LoopStation
// Il2CppName: set_LoopStation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)(::VROSC::LoopStation*)>(&VROSC::LoopStationRecorder::set_LoopStation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "set_LoopStation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopStationRecorder::RecordingState (VROSC::LoopStationRecorder::*)()>(&VROSC::LoopStationRecorder::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::set_State
// Il2CppName: set_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)(::VROSC::LoopStationRecorder::RecordingState)>(&VROSC::LoopStationRecorder::set_State)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStationRecorder/RecordingState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "set_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)(::VROSC::LoopStation*)>(&VROSC::LoopStationRecorder::Setup)> {
  static const MethodInfo* get() {
    static auto* loopStation = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopStation});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)()>(&VROSC::LoopStationRecorder::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::UpdateLooperState
// Il2CppName: UpdateLooperState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)()>(&VROSC::LoopStationRecorder::UpdateLooperState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "UpdateLooperState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::RecordOrStop
// Il2CppName: RecordOrStop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)(::VROSC::Signal*)>(&VROSC::LoopStationRecorder::RecordOrStop)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "RecordOrStop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::ScheduleButtonPress
// Il2CppName: ScheduleButtonPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)(double)>(&VROSC::LoopStationRecorder::ScheduleButtonPress)> {
  static const MethodInfo* get() {
    static auto* dspTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "ScheduleButtonPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspTime});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::StopRecordingByUser
// Il2CppName: StopRecordingByUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)(bool)>(&VROSC::LoopStationRecorder::StopRecordingByUser)> {
  static const MethodInfo* get() {
    static auto* restart = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "StopRecordingByUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{restart});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::PrepareForRecording
// Il2CppName: PrepareForRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)()>(&VROSC::LoopStationRecorder::PrepareForRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "PrepareForRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::CancelPreparingForRecording
// Il2CppName: CancelPreparingForRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)()>(&VROSC::LoopStationRecorder::CancelPreparingForRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "CancelPreparingForRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::StartRecordingMicrophone
// Il2CppName: StartRecordingMicrophone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)()>(&VROSC::LoopStationRecorder::StartRecordingMicrophone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "StartRecordingMicrophone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::StartRecording
// Il2CppName: StartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)(::VROSC::WidgetSettings::Identifier, ::VROSC::PatchSettings*)>(&VROSC::LoopStationRecorder::StartRecording)> {
  static const MethodInfo* get() {
    static auto* instrumentId = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings/Identifier")->byval_arg;
    static auto* patchSettings = &::il2cpp_utils::GetClassFromName("VROSC", "PatchSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "StartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instrumentId, patchSettings});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::CancelRecording
// Il2CppName: CancelRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)()>(&VROSC::LoopStationRecorder::CancelRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "CancelRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::ConcludeRecording
// Il2CppName: ConcludeRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)()>(&VROSC::LoopStationRecorder::ConcludeRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "ConcludeRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::ReceiveRecording
// Il2CppName: ReceiveRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)(::ArrayW<float>)>(&VROSC::LoopStationRecorder::ReceiveRecording)> {
  static const MethodInfo* get() {
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "ReceiveRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioData});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::Finish
// Il2CppName: Finish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)()>(&VROSC::LoopStationRecorder::Finish)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "Finish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::CopyAudioDataToLoopTrack
// Il2CppName: CopyAudioDataToLoopTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)(::ArrayW<float>)>(&VROSC::LoopStationRecorder::CopyAudioDataToLoopTrack)> {
  static const MethodInfo* get() {
    static auto* sourceData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "CopyAudioDataToLoopTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceData});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::CalculateGlobalSyncOffset
// Il2CppName: CalculateGlobalSyncOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::LoopStationRecorder::*)(int)>(&VROSC::LoopStationRecorder::CalculateGlobalSyncOffset)> {
  static const MethodInfo* get() {
    static auto* recordingLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "CalculateGlobalSyncOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recordingLength});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::PlayAll
// Il2CppName: PlayAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)()>(&VROSC::LoopStationRecorder::PlayAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "PlayAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::SetToIdle
// Il2CppName: SetToIdle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)()>(&VROSC::LoopStationRecorder::SetToIdle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "SetToIdle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::SetState
// Il2CppName: SetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecorder::*)(::VROSC::LoopStationRecorder::RecordingState)>(&VROSC::LoopStationRecorder::SetState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStationRecorder/RecordingState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecorder*), "SetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecorder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
