// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.PlayableAsset
#include "UnityEngine/Playables/PlayableAsset.hpp"
// Including type: VROSC.HandType
#include "VROSC/HandType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: TutorialHapticBehaviour
  class TutorialHapticBehaviour;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: PlayableGraph
  struct PlayableGraph;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TutorialHapticAsset
  class TutorialHapticAsset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TutorialHapticAsset);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TutorialHapticAsset*, "VROSC", "TutorialHapticAsset");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TutorialHapticAsset
  // [TokenAttribute] Offset: FFFFFFFF
  class TutorialHapticAsset : public ::UnityEngine::Playables::PlayableAsset {
    public:
    public:
    // private VROSC.HandType _hand
    // Size: 0x4
    // Offset: 0x18
    ::VROSC::HandType hand;
    // Field size check
    static_assert(sizeof(::VROSC::HandType) == 0x4);
    // private System.Single _frequency
    // Size: 0x4
    // Offset: 0x1C
    float frequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _amplitude
    // Size: 0x4
    // Offset: 0x20
    float amplitude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: amplitude and: animation
    char __padding2[0x4] = {};
    // public VROSC.TutorialHapticBehaviour animation
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::TutorialHapticBehaviour* animation;
    // Field size check
    static_assert(sizeof(::VROSC::TutorialHapticBehaviour*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.HandType _hand
    [[deprecated("Use field access instead!")]] ::VROSC::HandType& dyn__hand();
    // Get instance field reference: private System.Single _frequency
    [[deprecated("Use field access instead!")]] float& dyn__frequency();
    // Get instance field reference: private System.Single _amplitude
    [[deprecated("Use field access instead!")]] float& dyn__amplitude();
    // Get instance field reference: public VROSC.TutorialHapticBehaviour animation
    [[deprecated("Use field access instead!")]] ::VROSC::TutorialHapticBehaviour*& dyn_animation();
    // public System.Void .ctor()
    // Offset: 0xA2F4B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TutorialHapticAsset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TutorialHapticAsset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TutorialHapticAsset*, creationType>()));
    }
    // public override UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject owner)
    // Offset: 0xA2F3A0
    // Implemented from: UnityEngine.Playables.PlayableAsset
    // Base method: UnityEngine.Playables.Playable PlayableAsset::CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject owner)
    ::UnityEngine::Playables::Playable CreatePlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* owner);
  }; // VROSC.TutorialHapticAsset
  #pragma pack(pop)
  static check_size<sizeof(TutorialHapticAsset), 40 + sizeof(::VROSC::TutorialHapticBehaviour*)> __VROSC_TutorialHapticAssetSizeCheck;
  static_assert(sizeof(TutorialHapticAsset) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TutorialHapticAsset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::TutorialHapticAsset::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Playables::Playable (VROSC::TutorialHapticAsset::*)(::UnityEngine::Playables::PlayableGraph, ::UnityEngine::GameObject*)>(&VROSC::TutorialHapticAsset::CreatePlayable)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->byval_arg;
    static auto* owner = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialHapticAsset*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, owner});
  }
};
