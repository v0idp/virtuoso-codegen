// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: Mesh
  class Mesh;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ButtonVisual
  class ButtonVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ButtonVisual);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ButtonVisual*, "VROSC", "ButtonVisual");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x69
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ButtonVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class ButtonVisual : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.MeshFilter _meshFilter
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::MeshFilter* meshFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // private UnityEngine.Mesh _activeMesh
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Mesh* activeMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Mesh _inactiveMesh
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Mesh* inactiveMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // [HeaderAttribute] Offset: 0x788EC8
    // private TMPro.TextMeshPro _text
    // Size: 0x8
    // Offset: 0x30
    ::TMPro::TextMeshPro* text;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private UnityEngine.Color _activeTextColor
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Color activeTextColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _inActiveTextColor
    // Size: 0x10
    // Offset: 0x48
    ::UnityEngine::Color inActiveTextColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _hoverColor
    // Size: 0x10
    // Offset: 0x58
    ::UnityEngine::Color hoverColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Boolean _active
    // Size: 0x1
    // Offset: 0x68
    bool active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.MeshFilter _meshFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn__meshFilter();
    // Get instance field reference: private UnityEngine.Mesh _activeMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn__activeMesh();
    // Get instance field reference: private UnityEngine.Mesh _inactiveMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn__inactiveMesh();
    // Get instance field reference: private TMPro.TextMeshPro _text
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& dyn__text();
    // Get instance field reference: private UnityEngine.Color _activeTextColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__activeTextColor();
    // Get instance field reference: private UnityEngine.Color _inActiveTextColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__inActiveTextColor();
    // Get instance field reference: private UnityEngine.Color _hoverColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__hoverColor();
    // Get instance field reference: private System.Boolean _active
    [[deprecated("Use field access instead!")]] bool& dyn__active();
    // public System.Void .ctor()
    // Offset: 0x93BC74
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ButtonVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ButtonVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ButtonVisual*, creationType>()));
    }
    // public System.Void SetText(System.String text)
    // Offset: 0x93B940
    void SetText(::StringW text);
    // public System.Void SetHovering(System.Boolean hovering)
    // Offset: 0x93B958
    void SetHovering(bool hovering);
    // public System.Void SetActive(System.Boolean active)
    // Offset: 0x93BA54
    void SetActive(bool active);
    // private System.Void AutoFind()
    // Offset: 0x93BB8C
    void AutoFind();
  }; // VROSC.ButtonVisual
  #pragma pack(pop)
  static check_size<sizeof(ButtonVisual), 104 + sizeof(bool)> __VROSC_ButtonVisualSizeCheck;
  static_assert(sizeof(ButtonVisual) == 0x69);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ButtonVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::ButtonVisual::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ButtonVisual::*)(::StringW)>(&VROSC::ButtonVisual::SetText)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ButtonVisual*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: VROSC::ButtonVisual::SetHovering
// Il2CppName: SetHovering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ButtonVisual::*)(bool)>(&VROSC::ButtonVisual::SetHovering)> {
  static const MethodInfo* get() {
    static auto* hovering = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ButtonVisual*), "SetHovering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hovering});
  }
};
// Writing MetadataGetter for method: VROSC::ButtonVisual::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ButtonVisual::*)(bool)>(&VROSC::ButtonVisual::SetActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ButtonVisual*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: VROSC::ButtonVisual::AutoFind
// Il2CppName: AutoFind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ButtonVisual::*)()>(&VROSC::ButtonVisual::AutoFind)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ButtonVisual*), "AutoFind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
