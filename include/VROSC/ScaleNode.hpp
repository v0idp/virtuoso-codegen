// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.IntNode
#include "VROSC/IntNode.hpp"
// Including type: VROSC.Scale
#include "VROSC/Scale.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Note
  struct Note;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ScaleNode
  class ScaleNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ScaleNode);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ScaleNode*, "VROSC", "ScaleNode");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ScaleNode
  // [TokenAttribute] Offset: FFFFFFFF
  class ScaleNode : public ::VROSC::IntNode {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public System.Action OnScaleSet
    // Size: 0x8
    // Offset: 0x30
    ::System::Action* OnScaleSet;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // [BitMaskAttribute] Offset: 0x6709A0
    // private VROSC.Scale _scale
    // Size: 0x4
    // Offset: 0x38
    ::VROSC::Scale scale;
    // Field size check
    static_assert(sizeof(::VROSC::Scale) == 0x4);
    public:
    // Get instance field reference: public System.Action OnScaleSet
    ::System::Action*& dyn_OnScaleSet();
    // Get instance field reference: private VROSC.Scale _scale
    ::VROSC::Scale& dyn__scale();
    // public VROSC.Scale get_Scale()
    // Offset: 0x13DE238
    ::VROSC::Scale get_Scale();
    // public System.Void set_Scale(VROSC.Scale value)
    // Offset: 0x13DE240
    void set_Scale(::VROSC::Scale value);
    // public System.Void SetScale(VROSC.Scale scale)
    // Offset: 0x13DE290
    void SetScale(::VROSC::Scale scale);
    // static public VROSC.Scale RandomScale(out VROSC.Note baseNote)
    // Offset: 0x13DE2D0
    static ::VROSC::Scale RandomScale(ByRef<::VROSC::Note> baseNote);
    // public System.Void .ctor()
    // Offset: 0x13DE440
    // Implemented from: VROSC.IntNode
    // Base method: System.Void IntNode::.ctor()
    // Base method: System.Void Node::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScaleNode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScaleNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScaleNode*, creationType>()));
    }
    // protected override System.Void OnValidate()
    // Offset: 0x13DE24C
    // Implemented from: VROSC.IntNode
    // Base method: System.Void IntNode::OnValidate()
    void OnValidate();
    // protected override System.Int32 SetValueInRange(System.Int32 value)
    // Offset: 0x13DE268
    // Implemented from: VROSC.IntNode
    // Base method: System.Int32 IntNode::SetValueInRange(System.Int32 value)
    int SetValueInRange(int value);
  }; // VROSC.ScaleNode
  #pragma pack(pop)
  static check_size<sizeof(ScaleNode), 56 + sizeof(::VROSC::Scale)> __VROSC_ScaleNodeSizeCheck;
  static_assert(sizeof(ScaleNode) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ScaleNode::get_Scale
// Il2CppName: get_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Scale (VROSC::ScaleNode::*)()>(&VROSC::ScaleNode::get_Scale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ScaleNode*), "get_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ScaleNode::set_Scale
// Il2CppName: set_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ScaleNode::*)(::VROSC::Scale)>(&VROSC::ScaleNode::set_Scale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "Scale")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ScaleNode*), "set_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::ScaleNode::SetScale
// Il2CppName: SetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ScaleNode::*)(::VROSC::Scale)>(&VROSC::ScaleNode::SetScale)> {
  static const MethodInfo* get() {
    static auto* scale = &::il2cpp_utils::GetClassFromName("VROSC", "Scale")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ScaleNode*), "SetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scale});
  }
};
// Writing MetadataGetter for method: VROSC::ScaleNode::RandomScale
// Il2CppName: RandomScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Scale (*)(ByRef<::VROSC::Note>)>(&VROSC::ScaleNode::RandomScale)> {
  static const MethodInfo* get() {
    static auto* baseNote = &::il2cpp_utils::GetClassFromName("VROSC", "Note")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ScaleNode*), "RandomScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseNote});
  }
};
// Writing MetadataGetter for method: VROSC::ScaleNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::ScaleNode::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ScaleNode::*)()>(&VROSC::ScaleNode::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ScaleNode*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ScaleNode::SetValueInRange
// Il2CppName: SetValueInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::ScaleNode::*)(int)>(&VROSC::ScaleNode::SetValueInRange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ScaleNode*), "SetValueInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
