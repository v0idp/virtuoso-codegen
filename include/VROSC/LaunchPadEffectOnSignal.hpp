// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.SignalNode
#include "VROSC/SignalNode.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: MinMaxInt
  class MinMaxInt;
  // Forward declaring type: Signal
  class Signal;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: LaunchPadEffectOnSignal
  class LaunchPadEffectOnSignal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::LaunchPadEffectOnSignal);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LaunchPadEffectOnSignal*, "VROSC", "LaunchPadEffectOnSignal");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xA9
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.LaunchPadEffectOnSignal
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class LaunchPadEffectOnSignal : public ::VROSC::SignalNode {
    public:
    // Nested type: ::VROSC::LaunchPadEffectOnSignal::$NodeBegin$d__14
    struct $NodeBegin$d__14;
    // Nested type: ::VROSC::LaunchPadEffectOnSignal::$ActivateFlow$d__16
    class $ActivateFlow$d__16;
    public:
    // [HeaderAttribute] Offset: 0x787878
    // private UnityEngine.Renderer _padRenderer
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Renderer* padRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // [HeaderAttribute] Offset: 0x7878C4
    // private System.Boolean _effectScaledByPower
    // Size: 0x1
    // Offset: 0x48
    bool effectScaledByPower;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: effectScaledByPower and: duration
    char __padding1[0x3] = {};
    // private System.Single _duration
    // Size: 0x4
    // Offset: 0x4C
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.AnimationCurve _powerCurve
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AnimationCurve* powerCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // [HeaderAttribute] Offset: 0x787930
    // private UnityEngine.ParticleSystem _particleSystem
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::ParticleSystem* particleSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private VROSC.MinMaxInt _particleAmount
    // Size: 0x8
    // Offset: 0x60
    ::VROSC::MinMaxInt* particleAmount;
    // Field size check
    static_assert(sizeof(::VROSC::MinMaxInt*) == 0x8);
    // [HeaderAttribute] Offset: 0x78798C
    // private System.Boolean _preview
    // Size: 0x1
    // Offset: 0x68
    bool preview;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: preview and: previewColor
    char __padding6[0x3] = {};
    // private UnityEngine.Color _previewColor
    // Size: 0x10
    // Offset: 0x6C
    ::UnityEngine::Color previewColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [RangeAttribute] Offset: 0x7879E8
    // private System.Single _previewTiming
    // Size: 0x4
    // Offset: 0x7C
    float previewTiming;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x787A28
    // private System.Single _previewMultiplier
    // Size: 0x4
    // Offset: 0x80
    float previewMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color _color
    // Size: 0x10
    // Offset: 0x84
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // Padding between fields: color and: propBlock
    char __padding10[0x4] = {};
    // private UnityEngine.MaterialPropertyBlock _propBlock
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::MaterialPropertyBlock* propBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    // private System.Single _currentTiming
    // Size: 0x4
    // Offset: 0xA0
    float currentTiming;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _multiplier
    // Size: 0x4
    // Offset: 0xA4
    float multiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _isPlaying
    // Size: 0x1
    // Offset: 0xA8
    bool isPlaying;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Renderer _padRenderer
    [[deprecated]] ::UnityEngine::Renderer*& dyn__padRenderer();
    // Get instance field reference: private System.Boolean _effectScaledByPower
    [[deprecated]] bool& dyn__effectScaledByPower();
    // Get instance field reference: private System.Single _duration
    [[deprecated]] float& dyn__duration();
    // Get instance field reference: private UnityEngine.AnimationCurve _powerCurve
    [[deprecated]] ::UnityEngine::AnimationCurve*& dyn__powerCurve();
    // Get instance field reference: private UnityEngine.ParticleSystem _particleSystem
    [[deprecated]] ::UnityEngine::ParticleSystem*& dyn__particleSystem();
    // Get instance field reference: private VROSC.MinMaxInt _particleAmount
    [[deprecated]] ::VROSC::MinMaxInt*& dyn__particleAmount();
    // Get instance field reference: private System.Boolean _preview
    [[deprecated]] bool& dyn__preview();
    // Get instance field reference: private UnityEngine.Color _previewColor
    [[deprecated]] ::UnityEngine::Color& dyn__previewColor();
    // Get instance field reference: private System.Single _previewTiming
    [[deprecated]] float& dyn__previewTiming();
    // Get instance field reference: private System.Single _previewMultiplier
    [[deprecated]] float& dyn__previewMultiplier();
    // Get instance field reference: private UnityEngine.Color _color
    [[deprecated]] ::UnityEngine::Color& dyn__color();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock _propBlock
    [[deprecated]] ::UnityEngine::MaterialPropertyBlock*& dyn__propBlock();
    // Get instance field reference: private System.Single _currentTiming
    [[deprecated]] float& dyn__currentTiming();
    // Get instance field reference: private System.Single _multiplier
    [[deprecated]] float& dyn__multiplier();
    // Get instance field reference: private System.Boolean _isPlaying
    [[deprecated]] bool& dyn__isPlaying();
    // public System.Void SetColor(UnityEngine.Color color, System.Boolean affectVisual)
    // Offset: 0x194DD1C
    void SetColor(::UnityEngine::Color color, bool affectVisual);
    // public System.Void Activate(System.Single power)
    // Offset: 0x194DF1C
    void Activate(float power);
    // private System.Collections.IEnumerator ActivateFlow(System.Single power)
    // Offset: 0x194DFE4
    ::System::Collections::IEnumerator* ActivateFlow(float power);
    // public System.Void DisplayEffectForTime(System.Single time)
    // Offset: 0x194E050
    void DisplayEffectForTime(float time);
    // private System.Void SetEffectOnMesh(System.Single hitEffectTiming)
    // Offset: 0x194DBA8
    void SetEffectOnMesh(float hitEffectTiming);
    // private System.Void SetMeshColor(UnityEngine.Color color)
    // Offset: 0x194DC78
    void SetMeshColor(::UnityEngine::Color color);
    // private System.Void UpdateColor()
    // Offset: 0x194E0E8
    void UpdateColor();
    // System.Void SetMultiplier(System.Single multiplier)
    // Offset: 0x194E0F4
    void SetMultiplier(float multiplier);
    // System.Void SetPlaying(System.Boolean isPlaying)
    // Offset: 0x194E110
    void SetPlaying(bool isPlaying);
    // private System.Void CreatePropBlock()
    // Offset: 0x194E084
    void CreatePropBlock();
    // public System.Void .ctor()
    // Offset: 0x194E138
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LaunchPadEffectOnSignal* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::LaunchPadEffectOnSignal::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LaunchPadEffectOnSignal*, creationType>()));
    }
    // protected override System.Void OnEnable()
    // Offset: 0x194DB6C
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::OnEnable()
    void OnEnable();
    // protected override System.Void NodeBegin(VROSC.Signal signal)
    // Offset: 0x194DE54
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeBegin(VROSC.Signal signal)
    void NodeBegin(::VROSC::Signal* signal);
  }; // VROSC.LaunchPadEffectOnSignal
  #pragma pack(pop)
  static check_size<sizeof(LaunchPadEffectOnSignal), 168 + sizeof(bool)> __VROSC_LaunchPadEffectOnSignalSizeCheck;
  static_assert(sizeof(LaunchPadEffectOnSignal) == 0xA9);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::LaunchPadEffectOnSignal::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LaunchPadEffectOnSignal::*)(::UnityEngine::Color, bool)>(&VROSC::LaunchPadEffectOnSignal::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* affectVisual = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LaunchPadEffectOnSignal*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, affectVisual});
  }
};
// Writing MetadataGetter for method: VROSC::LaunchPadEffectOnSignal::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LaunchPadEffectOnSignal::*)(float)>(&VROSC::LaunchPadEffectOnSignal::Activate)> {
  static const MethodInfo* get() {
    static auto* power = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LaunchPadEffectOnSignal*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{power});
  }
};
// Writing MetadataGetter for method: VROSC::LaunchPadEffectOnSignal::ActivateFlow
// Il2CppName: ActivateFlow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (VROSC::LaunchPadEffectOnSignal::*)(float)>(&VROSC::LaunchPadEffectOnSignal::ActivateFlow)> {
  static const MethodInfo* get() {
    static auto* power = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LaunchPadEffectOnSignal*), "ActivateFlow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{power});
  }
};
// Writing MetadataGetter for method: VROSC::LaunchPadEffectOnSignal::DisplayEffectForTime
// Il2CppName: DisplayEffectForTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LaunchPadEffectOnSignal::*)(float)>(&VROSC::LaunchPadEffectOnSignal::DisplayEffectForTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LaunchPadEffectOnSignal*), "DisplayEffectForTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: VROSC::LaunchPadEffectOnSignal::SetEffectOnMesh
// Il2CppName: SetEffectOnMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LaunchPadEffectOnSignal::*)(float)>(&VROSC::LaunchPadEffectOnSignal::SetEffectOnMesh)> {
  static const MethodInfo* get() {
    static auto* hitEffectTiming = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LaunchPadEffectOnSignal*), "SetEffectOnMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitEffectTiming});
  }
};
// Writing MetadataGetter for method: VROSC::LaunchPadEffectOnSignal::SetMeshColor
// Il2CppName: SetMeshColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LaunchPadEffectOnSignal::*)(::UnityEngine::Color)>(&VROSC::LaunchPadEffectOnSignal::SetMeshColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LaunchPadEffectOnSignal*), "SetMeshColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::LaunchPadEffectOnSignal::UpdateColor
// Il2CppName: UpdateColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LaunchPadEffectOnSignal::*)()>(&VROSC::LaunchPadEffectOnSignal::UpdateColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LaunchPadEffectOnSignal*), "UpdateColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LaunchPadEffectOnSignal::SetMultiplier
// Il2CppName: SetMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LaunchPadEffectOnSignal::*)(float)>(&VROSC::LaunchPadEffectOnSignal::SetMultiplier)> {
  static const MethodInfo* get() {
    static auto* multiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LaunchPadEffectOnSignal*), "SetMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{multiplier});
  }
};
// Writing MetadataGetter for method: VROSC::LaunchPadEffectOnSignal::SetPlaying
// Il2CppName: SetPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LaunchPadEffectOnSignal::*)(bool)>(&VROSC::LaunchPadEffectOnSignal::SetPlaying)> {
  static const MethodInfo* get() {
    static auto* isPlaying = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LaunchPadEffectOnSignal*), "SetPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isPlaying});
  }
};
// Writing MetadataGetter for method: VROSC::LaunchPadEffectOnSignal::CreatePropBlock
// Il2CppName: CreatePropBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LaunchPadEffectOnSignal::*)()>(&VROSC::LaunchPadEffectOnSignal::CreatePropBlock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LaunchPadEffectOnSignal*), "CreatePropBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LaunchPadEffectOnSignal::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::LaunchPadEffectOnSignal::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LaunchPadEffectOnSignal::*)()>(&VROSC::LaunchPadEffectOnSignal::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LaunchPadEffectOnSignal*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LaunchPadEffectOnSignal::NodeBegin
// Il2CppName: NodeBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LaunchPadEffectOnSignal::*)(::VROSC::Signal*)>(&VROSC::LaunchPadEffectOnSignal::NodeBegin)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LaunchPadEffectOnSignal*), "NodeBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
