// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopStation
  class LoopStation;
  // Forward declaring type: LoopStationGroup
  class LoopStationGroup;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: GroupArranger
  class GroupArranger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::GroupArranger);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::GroupArranger*, "VROSC", "GroupArranger");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.GroupArranger
  // [TokenAttribute] Offset: FFFFFFFF
  class GroupArranger : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::GroupArranger::$$c
    class $$c;
    public:
    // private UnityEngine.RectTransform _sortArea
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::RectTransform* sortArea;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private System.Single _padding
    // Size: 0x4
    // Offset: 0x20
    float padding;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x784C24
    // private System.Single _keepGroupIfLargerThanPercent
    // Size: 0x4
    // Offset: 0x24
    float keepGroupIfLargerThanPercent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _rightToLeft
    // Size: 0x1
    // Offset: 0x28
    bool rightToLeft;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _bySize
    // Size: 0x1
    // Offset: 0x29
    bool bySize;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: bySize and: currentRowCount
    char __padding4[0x2] = {};
    // private System.Int32 _currentRowCount
    // Size: 0x4
    // Offset: 0x2C
    int currentRowCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _groupWidth
    // Size: 0x4
    // Offset: 0x30
    float groupWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: groupWidth and: loopStation
    char __padding6[0x4] = {};
    // private VROSC.LoopStation _loopStation
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::LoopStation* loopStation;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStation*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.RectTransform _sortArea
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__sortArea();
    // Get instance field reference: private System.Single _padding
    [[deprecated("Use field access instead!")]] float& dyn__padding();
    // Get instance field reference: private System.Single _keepGroupIfLargerThanPercent
    [[deprecated("Use field access instead!")]] float& dyn__keepGroupIfLargerThanPercent();
    // Get instance field reference: private System.Boolean _rightToLeft
    [[deprecated("Use field access instead!")]] bool& dyn__rightToLeft();
    // Get instance field reference: private System.Boolean _bySize
    [[deprecated("Use field access instead!")]] bool& dyn__bySize();
    // Get instance field reference: private System.Int32 _currentRowCount
    [[deprecated("Use field access instead!")]] int& dyn__currentRowCount();
    // Get instance field reference: private System.Single _groupWidth
    [[deprecated("Use field access instead!")]] float& dyn__groupWidth();
    // Get instance field reference: private VROSC.LoopStation _loopStation
    [[deprecated("Use field access instead!")]] ::VROSC::LoopStation*& dyn__loopStation();
    // public System.Void .ctor()
    // Offset: 0x19AAC58
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GroupArranger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GroupArranger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GroupArranger*, creationType>()));
    }
    // public System.Void Setup(VROSC.LoopStation loopStation, System.Single groupWidth)
    // Offset: 0x19AA710
    void Setup(::VROSC::LoopStation* loopStation, float groupWidth);
    // public System.Void ArrangeGroups(System.Collections.Generic.List`1<VROSC.LoopStationGroup> groups, System.Boolean allowRowChange)
    // Offset: 0x19AA71C
    void ArrangeGroups(::System::Collections::Generic::List_1<::VROSC::LoopStationGroup*>* groups, bool allowRowChange);
  }; // VROSC.GroupArranger
  #pragma pack(pop)
  static check_size<sizeof(GroupArranger), 56 + sizeof(::VROSC::LoopStation*)> __VROSC_GroupArrangerSizeCheck;
  static_assert(sizeof(GroupArranger) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::GroupArranger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::GroupArranger::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::GroupArranger::*)(::VROSC::LoopStation*, float)>(&VROSC::GroupArranger::Setup)> {
  static const MethodInfo* get() {
    static auto* loopStation = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStation")->byval_arg;
    static auto* groupWidth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::GroupArranger*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopStation, groupWidth});
  }
};
// Writing MetadataGetter for method: VROSC::GroupArranger::ArrangeGroups
// Il2CppName: ArrangeGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::GroupArranger::*)(::System::Collections::Generic::List_1<::VROSC::LoopStationGroup*>*, bool)>(&VROSC::GroupArranger::ArrangeGroups)> {
  static const MethodInfo* get() {
    static auto* groups = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "LoopStationGroup")})->byval_arg;
    static auto* allowRowChange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::GroupArranger*), "ArrangeGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groups, allowRowChange});
  }
};
