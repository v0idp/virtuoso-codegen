// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: Rotator
  class Rotator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::Rotator);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::Rotator*, "VROSC", "Rotator");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.Rotator
  // [TokenAttribute] Offset: FFFFFFFF
  class Rotator : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Vector3 _rotation
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Vector3 _rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__rotation();
    // public System.Void .ctor()
    // Offset: 0xDD2748
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Rotator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::Rotator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Rotator*, creationType>()));
    }
    // protected System.Void Update()
    // Offset: 0xDD26E0
    void Update();
  }; // VROSC.Rotator
  #pragma pack(pop)
  static check_size<sizeof(Rotator), 24 + sizeof(::UnityEngine::Vector3)> __VROSC_RotatorSizeCheck;
  static_assert(sizeof(Rotator) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::Rotator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::Rotator::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Rotator::*)()>(&VROSC::Rotator::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Rotator*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
