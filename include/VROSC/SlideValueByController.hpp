// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.IntChanger
#include "VROSC/IntChanger.hpp"
// Including type: VROSC.Axis
#include "VROSC/Axis.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: IntField
  class IntField;
  // Forward declaring type: Signal
  class Signal;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: SlideValueByController
  class SlideValueByController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::SlideValueByController);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::SlideValueByController*, "VROSC", "SlideValueByController");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.SlideValueByController
  // [TokenAttribute] Offset: FFFFFFFF
  class SlideValueByController : public ::VROSC::IntChanger {
    public:
    // Writing base type padding for base size: 0x49 to desired offset: 0x4C
    char ___base_padding[0x3] = {};
    public:
    // private VROSC.Axis _slideAxis
    // Size: 0x4
    // Offset: 0x4C
    ::VROSC::Axis slideAxis;
    // Field size check
    static_assert(sizeof(::VROSC::Axis) == 0x4);
    // private VROSC.IntField _sensitivity
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::IntField* sensitivity;
    // Field size check
    static_assert(sizeof(::VROSC::IntField*) == 0x8);
    // private UnityEngine.Vector3 _startPosition
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 startPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Int32 _startValue
    // Size: 0x4
    // Offset: 0x64
    int startValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Transform _affectingTransform
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* affectingTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Get instance field reference: private VROSC.Axis _slideAxis
    [[deprecated]] ::VROSC::Axis& dyn__slideAxis();
    // Get instance field reference: private VROSC.IntField _sensitivity
    [[deprecated]] ::VROSC::IntField*& dyn__sensitivity();
    // Get instance field reference: private UnityEngine.Vector3 _startPosition
    [[deprecated]] ::UnityEngine::Vector3& dyn__startPosition();
    // Get instance field reference: private System.Int32 _startValue
    [[deprecated]] int& dyn__startValue();
    // Get instance field reference: private UnityEngine.Transform _affectingTransform
    [[deprecated]] ::UnityEngine::Transform*& dyn__affectingTransform();
    // protected override System.Boolean get_RequireOrigin()
    // Offset: 0x1928A48
    // Implemented from: VROSC.SignalNode
    // Base method: System.Boolean SignalNode::get_RequireOrigin()
    bool get_RequireOrigin();
    // public System.Void .ctor()
    // Offset: 0x1928C48
    // Implemented from: VROSC.IntChanger
    // Base method: System.Void IntChanger::.ctor()
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SlideValueByController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SlideValueByController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SlideValueByController*, creationType>()));
    }
    // protected override System.Void NodeBegin(VROSC.Signal signal)
    // Offset: 0x1928A50
    // Implemented from: VROSC.IntChanger
    // Base method: System.Void IntChanger::NodeBegin(VROSC.Signal signal)
    void NodeBegin(::VROSC::Signal* signal);
    // protected override System.Void NodeStay(VROSC.Signal signal)
    // Offset: 0x1928AC4
    // Implemented from: VROSC.IntChanger
    // Base method: System.Void IntChanger::NodeStay(VROSC.Signal signal)
    void NodeStay(::VROSC::Signal* signal);
    // protected override System.Void SetValueBySignal(VROSC.Signal signal)
    // Offset: 0x1928B84
    // Implemented from: VROSC.IntChanger
    // Base method: System.Void IntChanger::SetValueBySignal(VROSC.Signal signal)
    void SetValueBySignal(::VROSC::Signal* signal);
  }; // VROSC.SlideValueByController
  #pragma pack(pop)
  static check_size<sizeof(SlideValueByController), 104 + sizeof(::UnityEngine::Transform*)> __VROSC_SlideValueByControllerSizeCheck;
  static_assert(sizeof(SlideValueByController) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::SlideValueByController::get_RequireOrigin
// Il2CppName: get_RequireOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::SlideValueByController::*)()>(&VROSC::SlideValueByController::get_RequireOrigin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SlideValueByController*), "get_RequireOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SlideValueByController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::SlideValueByController::NodeBegin
// Il2CppName: NodeBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SlideValueByController::*)(::VROSC::Signal*)>(&VROSC::SlideValueByController::NodeBegin)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SlideValueByController*), "NodeBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::SlideValueByController::NodeStay
// Il2CppName: NodeStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SlideValueByController::*)(::VROSC::Signal*)>(&VROSC::SlideValueByController::NodeStay)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SlideValueByController*), "NodeStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::SlideValueByController::SetValueBySignal
// Il2CppName: SetValueBySignal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SlideValueByController::*)(::VROSC::Signal*)>(&VROSC::SlideValueByController::SetValueBySignal)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SlideValueByController*), "SetValueBySignal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
