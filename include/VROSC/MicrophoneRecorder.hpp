// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.SourceRecorder
#include "VROSC/SourceRecorder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: MicrophoneRecorder
  class MicrophoneRecorder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::MicrophoneRecorder);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::MicrophoneRecorder*, "VROSC", "MicrophoneRecorder");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.MicrophoneRecorder
  // [TokenAttribute] Offset: FFFFFFFF
  class MicrophoneRecorder : public ::VROSC::SourceRecorder {
    public:
    public:
    // private System.Single[] _effectData
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<float> effectData;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single[] _microphoneData
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<float> microphoneData;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Get instance field reference: private System.Single[] _effectData
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__effectData();
    // Get instance field reference: private System.Single[] _microphoneData
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__microphoneData();
    // public System.Void SetMicrophoneData(System.Single[] buffer)
    // Offset: 0xAC7480
    void SetMicrophoneData(::ArrayW<float> buffer);
    // public System.Void ClearMicrophoneData()
    // Offset: 0xAC74AC
    void ClearMicrophoneData();
    // public System.Single[] GetRawMicrophoneRecordingData()
    // Offset: 0xAC74D0
    ::ArrayW<float> GetRawMicrophoneRecordingData();
    // protected System.Void OnAudioFilterRead(System.Single[] data, System.Int32 channels)
    // Offset: 0xAC74D8
    void OnAudioFilterRead(::ArrayW<float> data, int channels);
    // public System.Void .ctor()
    // Offset: 0xAC75D4
    // Implemented from: VROSC.SourceRecorder
    // Base method: System.Void SourceRecorder::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MicrophoneRecorder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MicrophoneRecorder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MicrophoneRecorder*, creationType>()));
    }
  }; // VROSC.MicrophoneRecorder
  #pragma pack(pop)
  static check_size<sizeof(MicrophoneRecorder), 80 + sizeof(::ArrayW<float>)> __VROSC_MicrophoneRecorderSizeCheck;
  static_assert(sizeof(MicrophoneRecorder) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::MicrophoneRecorder::SetMicrophoneData
// Il2CppName: SetMicrophoneData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneRecorder::*)(::ArrayW<float>)>(&VROSC::MicrophoneRecorder::SetMicrophoneData)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneRecorder*), "SetMicrophoneData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneRecorder::ClearMicrophoneData
// Il2CppName: ClearMicrophoneData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneRecorder::*)()>(&VROSC::MicrophoneRecorder::ClearMicrophoneData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneRecorder*), "ClearMicrophoneData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneRecorder::GetRawMicrophoneRecordingData
// Il2CppName: GetRawMicrophoneRecordingData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (VROSC::MicrophoneRecorder::*)()>(&VROSC::MicrophoneRecorder::GetRawMicrophoneRecordingData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneRecorder*), "GetRawMicrophoneRecordingData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneRecorder::OnAudioFilterRead
// Il2CppName: OnAudioFilterRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MicrophoneRecorder::*)(::ArrayW<float>, int)>(&VROSC::MicrophoneRecorder::OnAudioFilterRead)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MicrophoneRecorder*), "OnAudioFilterRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, channels});
  }
};
// Writing MetadataGetter for method: VROSC::MicrophoneRecorder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
