// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animator
  class Animator;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: SyncAnimationToBeat
  class SyncAnimationToBeat;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::SyncAnimationToBeat);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::SyncAnimationToBeat*, "VROSC", "SyncAnimationToBeat");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.SyncAnimationToBeat
  // [TokenAttribute] Offset: FFFFFFFF
  class SyncAnimationToBeat : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single _animationMatchesBPM
    // Size: 0x4
    // Offset: 0x18
    float animationMatchesBPM;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: animationMatchesBPM and: animator
    char __padding0[0x4] = {};
    // private UnityEngine.Animator _animator
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Animator* animator;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // private System.Single _playbackSpeed
    // Size: 0x4
    // Offset: 0x28
    float playbackSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single _animationMatchesBPM
    [[deprecated]] float& dyn__animationMatchesBPM();
    // Get instance field reference: private UnityEngine.Animator _animator
    [[deprecated]] ::UnityEngine::Animator*& dyn__animator();
    // Get instance field reference: private System.Single _playbackSpeed
    [[deprecated]] float& dyn__playbackSpeed();
    // private System.Void OnEnable()
    // Offset: 0x193114C
    void OnEnable();
    // private System.Void SyncAnimator()
    // Offset: 0x193123C
    void SyncAnimator();
    // private System.Void OnDisable()
    // Offset: 0x1931350
    void OnDisable();
    // private System.Void BPMChanged(System.Single newBPM)
    // Offset: 0x193143C
    void BPMChanged(float newBPM);
    // private System.Void SyncNextBeat(System.Int32 obj)
    // Offset: 0x1931530
    void SyncNextBeat(int obj);
    // public System.Void .ctor()
    // Offset: 0x1931648
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SyncAnimationToBeat* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SyncAnimationToBeat::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SyncAnimationToBeat*, creationType>()));
    }
  }; // VROSC.SyncAnimationToBeat
  #pragma pack(pop)
  static check_size<sizeof(SyncAnimationToBeat), 40 + sizeof(float)> __VROSC_SyncAnimationToBeatSizeCheck;
  static_assert(sizeof(SyncAnimationToBeat) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::SyncAnimationToBeat::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SyncAnimationToBeat::*)()>(&VROSC::SyncAnimationToBeat::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SyncAnimationToBeat*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SyncAnimationToBeat::SyncAnimator
// Il2CppName: SyncAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SyncAnimationToBeat::*)()>(&VROSC::SyncAnimationToBeat::SyncAnimator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SyncAnimationToBeat*), "SyncAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SyncAnimationToBeat::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SyncAnimationToBeat::*)()>(&VROSC::SyncAnimationToBeat::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SyncAnimationToBeat*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SyncAnimationToBeat::BPMChanged
// Il2CppName: BPMChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SyncAnimationToBeat::*)(float)>(&VROSC::SyncAnimationToBeat::BPMChanged)> {
  static const MethodInfo* get() {
    static auto* newBPM = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SyncAnimationToBeat*), "BPMChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newBPM});
  }
};
// Writing MetadataGetter for method: VROSC::SyncAnimationToBeat::SyncNextBeat
// Il2CppName: SyncNextBeat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SyncAnimationToBeat::*)(int)>(&VROSC::SyncAnimationToBeat::SyncNextBeat)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SyncAnimationToBeat*), "SyncNextBeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: VROSC::SyncAnimationToBeat::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
