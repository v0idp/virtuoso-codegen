// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.SignalFilter
#include "VROSC/SignalFilter.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Signal
  class Signal;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: RotationalTicker
  class RotationalTicker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::RotationalTicker);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::RotationalTicker*, "VROSC", "RotationalTicker");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x85
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.RotationalTicker
  // [TokenAttribute] Offset: FFFFFFFF
  class RotationalTicker : public ::VROSC::SignalFilter {
    public:
    // Nested type: ::VROSC::RotationalTicker::TrackedDirection
    struct TrackedDirection;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: VROSC.RotationalTicker/VROSC.TrackedDirection
    // [TokenAttribute] Offset: FFFFFFFF
    struct TrackedDirection/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TrackedDirection
      constexpr TrackedDirection(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public VROSC.RotationalTicker/VROSC.TrackedDirection Clockwise
      static constexpr const int Clockwise = 0;
      // Get static field: static public VROSC.RotationalTicker/VROSC.TrackedDirection Clockwise
      static ::VROSC::RotationalTicker::TrackedDirection _get_Clockwise();
      // Set static field: static public VROSC.RotationalTicker/VROSC.TrackedDirection Clockwise
      static void _set_Clockwise(::VROSC::RotationalTicker::TrackedDirection value);
      // static field const value: static public VROSC.RotationalTicker/VROSC.TrackedDirection CounterClockwise
      static constexpr const int CounterClockwise = 1;
      // Get static field: static public VROSC.RotationalTicker/VROSC.TrackedDirection CounterClockwise
      static ::VROSC::RotationalTicker::TrackedDirection _get_CounterClockwise();
      // Set static field: static public VROSC.RotationalTicker/VROSC.TrackedDirection CounterClockwise
      static void _set_CounterClockwise(::VROSC::RotationalTicker::TrackedDirection value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated]] int& dyn_value__();
    }; // VROSC.RotationalTicker/VROSC.TrackedDirection
    #pragma pack(pop)
    static check_size<sizeof(RotationalTicker::TrackedDirection), 0 + sizeof(int)> __VROSC_RotationalTicker_TrackedDirectionSizeCheck;
    static_assert(sizeof(RotationalTicker::TrackedDirection) == 0x4);
    public:
    // private VROSC.RotationalTicker/VROSC.TrackedDirection _trackedDirection
    // Size: 0x4
    // Offset: 0x40
    ::VROSC::RotationalTicker::TrackedDirection trackedDirection;
    // Field size check
    static_assert(sizeof(::VROSC::RotationalTicker::TrackedDirection) == 0x4);
    // Padding between fields: trackedDirection and: transformToTrack
    char __padding0[0x4] = {};
    // private UnityEngine.Transform _transformToTrack
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* transformToTrack;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _lastTrackedTransform
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Transform* lastTrackedTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [RangeAttribute] Offset: 0x787470
    // private System.Single _tickDegrees
    // Size: 0x4
    // Offset: 0x58
    float tickDegrees;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _rotationalAxis
    // Size: 0xC
    // Offset: 0x5C
    ::UnityEngine::Vector3 rotationalAxis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _lastFrameLookDirection
    // Size: 0xC
    // Offset: 0x68
    ::UnityEngine::Vector3 lastFrameLookDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _currentFrameLookDirection
    // Size: 0xC
    // Offset: 0x74
    ::UnityEngine::Vector3 currentFrameLookDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single _angleDifference
    // Size: 0x4
    // Offset: 0x80
    float angleDifference;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _tickedLastFrame
    // Size: 0x1
    // Offset: 0x84
    bool tickedLastFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private VROSC.RotationalTicker/VROSC.TrackedDirection _trackedDirection
    [[deprecated]] ::VROSC::RotationalTicker::TrackedDirection& dyn__trackedDirection();
    // Get instance field reference: private UnityEngine.Transform _transformToTrack
    [[deprecated]] ::UnityEngine::Transform*& dyn__transformToTrack();
    // Get instance field reference: private UnityEngine.Transform _lastTrackedTransform
    [[deprecated]] ::UnityEngine::Transform*& dyn__lastTrackedTransform();
    // Get instance field reference: private System.Single _tickDegrees
    [[deprecated]] float& dyn__tickDegrees();
    // Get instance field reference: private UnityEngine.Vector3 _rotationalAxis
    [[deprecated]] ::UnityEngine::Vector3& dyn__rotationalAxis();
    // Get instance field reference: private UnityEngine.Vector3 _lastFrameLookDirection
    [[deprecated]] ::UnityEngine::Vector3& dyn__lastFrameLookDirection();
    // Get instance field reference: private UnityEngine.Vector3 _currentFrameLookDirection
    [[deprecated]] ::UnityEngine::Vector3& dyn__currentFrameLookDirection();
    // Get instance field reference: private System.Single _angleDifference
    [[deprecated]] float& dyn__angleDifference();
    // Get instance field reference: private System.Boolean _tickedLastFrame
    [[deprecated]] bool& dyn__tickedLastFrame();
    // private System.Void TickCounterClockwise()
    // Offset: 0xB3794C
    void TickCounterClockwise();
    // private System.Void TickClockwise()
    // Offset: 0xB37968
    void TickClockwise();
    // public System.Void .ctor()
    // Offset: 0xB37984
    // Implemented from: VROSC.SignalFilter
    // Base method: System.Void SignalFilter::.ctor()
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RotationalTicker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::RotationalTicker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RotationalTicker*, creationType>()));
    }
    // protected override System.Void FilterSignal(VROSC.Signal signal)
    // Offset: 0xB376F4
    // Implemented from: VROSC.SignalFilter
    // Base method: System.Void SignalFilter::FilterSignal(VROSC.Signal signal)
    void FilterSignal(::VROSC::Signal* signal);
  }; // VROSC.RotationalTicker
  #pragma pack(pop)
  static check_size<sizeof(RotationalTicker), 132 + sizeof(bool)> __VROSC_RotationalTickerSizeCheck;
  static_assert(sizeof(RotationalTicker) == 0x85);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::RotationalTicker::TrackedDirection, "VROSC", "RotationalTicker/TrackedDirection");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::RotationalTicker::TickCounterClockwise
// Il2CppName: TickCounterClockwise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::RotationalTicker::*)()>(&VROSC::RotationalTicker::TickCounterClockwise)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::RotationalTicker*), "TickCounterClockwise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::RotationalTicker::TickClockwise
// Il2CppName: TickClockwise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::RotationalTicker::*)()>(&VROSC::RotationalTicker::TickClockwise)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::RotationalTicker*), "TickClockwise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::RotationalTicker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::RotationalTicker::FilterSignal
// Il2CppName: FilterSignal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::RotationalTicker::*)(::VROSC::Signal*)>(&VROSC::RotationalTicker::FilterSignal)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::RotationalTicker*), "FilterSignal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
