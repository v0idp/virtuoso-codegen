// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.AdjustableMeshColors
#include "VROSC/AdjustableMeshColors.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: AdjustableMesh
  class AdjustableMesh;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Color because it is already included!
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: AdjustableMeshColors32
  class AdjustableMeshColors32;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AdjustableMeshColors32);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AdjustableMeshColors32*, "VROSC", "AdjustableMeshColors32");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AdjustableMeshColors32
  // [TokenAttribute] Offset: FFFFFFFF
  class AdjustableMeshColors32 : public ::VROSC::AdjustableMeshColors {
    public:
    public:
    // private UnityEngine.Color32[] _colors
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Color32> colors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color32>) == 0x8);
    // private UnityEngine.Color32[] _originalColors
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Color32> originalColors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color32>) == 0x8);
    // private UnityEngine.Color32[] _shownColors
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Color32> shownColors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color32>) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Color32[] _colors
    [[deprecated]] ::ArrayW<::UnityEngine::Color32>& dyn__colors();
    // Get instance field reference: private UnityEngine.Color32[] _originalColors
    [[deprecated]] ::ArrayW<::UnityEngine::Color32>& dyn__originalColors();
    // Get instance field reference: private UnityEngine.Color32[] _shownColors
    [[deprecated]] ::ArrayW<::UnityEngine::Color32>& dyn__shownColors();
    // public System.Void .ctor(VROSC.AdjustableMesh adjustableMesh)
    // Offset: 0x9667C0
    // Implemented from: VROSC.AdjustableMeshColors
    // Base method: System.Void AdjustableMeshColors::.ctor(VROSC.AdjustableMesh adjustableMesh)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdjustableMeshColors32* New_ctor(::VROSC::AdjustableMesh* adjustableMesh) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColors32::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdjustableMeshColors32*, creationType>(adjustableMesh)));
    }
    // public override System.Void SetColor(UnityEngine.Color color)
    // Offset: 0x96734C
    // Implemented from: VROSC.AdjustableMeshColors
    // Base method: System.Void AdjustableMeshColors::SetColor(UnityEngine.Color color)
    void SetColor(::UnityEngine::Color color);
    // public override System.Void Tint(UnityEngine.Color color, System.Single amount)
    // Offset: 0x96754C
    // Implemented from: VROSC.AdjustableMeshColors
    // Base method: System.Void AdjustableMeshColors::Tint(UnityEngine.Color color, System.Single amount)
    void Tint(::UnityEngine::Color color, float amount);
  }; // VROSC.AdjustableMeshColors32
  #pragma pack(pop)
  static check_size<sizeof(AdjustableMeshColors32), 48 + sizeof(::ArrayW<::UnityEngine::Color32>)> __VROSC_AdjustableMeshColors32SizeCheck;
  static_assert(sizeof(AdjustableMeshColors32) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AdjustableMeshColors32::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::AdjustableMeshColors32::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AdjustableMeshColors32::*)(::UnityEngine::Color)>(&VROSC::AdjustableMeshColors32::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AdjustableMeshColors32*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::AdjustableMeshColors32::Tint
// Il2CppName: Tint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AdjustableMeshColors32::*)(::UnityEngine::Color, float)>(&VROSC::AdjustableMeshColors32::Tint)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AdjustableMeshColors32*), "Tint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, amount});
  }
};
