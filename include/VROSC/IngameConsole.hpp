// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LogType
  struct LogType;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: IngameConsole
  class IngameConsole;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::IngameConsole);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::IngameConsole*, "VROSC", "IngameConsole");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.IngameConsole
  // [TokenAttribute] Offset: FFFFFFFF
  class IngameConsole : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private TMPro.TextMeshPro _text
    // Size: 0x8
    // Offset: 0x18
    ::TMPro::TextMeshPro* text;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private System.String[] _excludes
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::StringW> excludes;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.Boolean _showErrors
    // Size: 0x1
    // Offset: 0x28
    bool showErrors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _showWarnings
    // Size: 0x1
    // Offset: 0x29
    bool showWarnings;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _showLogs
    // Size: 0x1
    // Offset: 0x2A
    bool showLogs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showLogs and: lines
    char __padding4[0x1] = {};
    // private System.Int32 _lines
    // Size: 0x4
    // Offset: 0x2C
    int lines;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _maxLines
    // Size: 0x4
    // Offset: 0x30
    int maxLines;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: maxLines and: loggedErrorStacks
    char __padding6[0x4] = {};
    // private System.Collections.Generic.List`1<System.String> _loggedErrorStacks
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::StringW>* loggedErrorStacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private TMPro.TextMeshPro _text
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& dyn__text();
    // Get instance field reference: private System.String[] _excludes
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn__excludes();
    // Get instance field reference: private System.Boolean _showErrors
    [[deprecated("Use field access instead!")]] bool& dyn__showErrors();
    // Get instance field reference: private System.Boolean _showWarnings
    [[deprecated("Use field access instead!")]] bool& dyn__showWarnings();
    // Get instance field reference: private System.Boolean _showLogs
    [[deprecated("Use field access instead!")]] bool& dyn__showLogs();
    // Get instance field reference: private System.Int32 _lines
    [[deprecated("Use field access instead!")]] int& dyn__lines();
    // Get instance field reference: private System.Int32 _maxLines
    [[deprecated("Use field access instead!")]] int& dyn__maxLines();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> _loggedErrorStacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn__loggedErrorStacks();
    // public System.Void .ctor()
    // Offset: 0x19439D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IngameConsole* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::IngameConsole::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IngameConsole*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x1943428
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x1943494
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x1943510
    void OnDisable();
    // private System.Void LogReceived(System.String logString, System.String stackTrace, UnityEngine.LogType logType)
    // Offset: 0x194358C
    void LogReceived(::StringW logString, ::StringW stackTrace, ::UnityEngine::LogType logType);
    // private System.Void LogErrorToFirebase(System.String message, System.String stack)
    // Offset: 0x1943818
    void LogErrorToFirebase(::StringW message, ::StringW stack);
  }; // VROSC.IngameConsole
  #pragma pack(pop)
  static check_size<sizeof(IngameConsole), 56 + sizeof(::System::Collections::Generic::List_1<::StringW>*)> __VROSC_IngameConsoleSizeCheck;
  static_assert(sizeof(IngameConsole) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::IngameConsole::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::IngameConsole::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::IngameConsole::*)()>(&VROSC::IngameConsole::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::IngameConsole*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::IngameConsole::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::IngameConsole::*)()>(&VROSC::IngameConsole::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::IngameConsole*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::IngameConsole::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::IngameConsole::*)()>(&VROSC::IngameConsole::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::IngameConsole*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::IngameConsole::LogReceived
// Il2CppName: LogReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::IngameConsole::*)(::StringW, ::StringW, ::UnityEngine::LogType)>(&VROSC::IngameConsole::LogReceived)> {
  static const MethodInfo* get() {
    static auto* logString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* stackTrace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* logType = &::il2cpp_utils::GetClassFromName("UnityEngine", "LogType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::IngameConsole*), "LogReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logString, stackTrace, logType});
  }
};
// Writing MetadataGetter for method: VROSC::IngameConsole::LogErrorToFirebase
// Il2CppName: LogErrorToFirebase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::IngameConsole::*)(::StringW, ::StringW)>(&VROSC::IngameConsole::LogErrorToFirebase)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* stack = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::IngameConsole*), "LogErrorToFirebase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, stack});
  }
};
