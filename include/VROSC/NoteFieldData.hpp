// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: NoteFieldNoteData
  class NoteFieldNoteData;
  // Forward declaring type: NoteFieldParameters
  class NoteFieldParameters;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: NoteFieldData
  class NoteFieldData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::NoteFieldData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::NoteFieldData*, "VROSC", "NoteFieldData");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.NoteFieldData
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteFieldData : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 <XFields>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int XFields;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <YFields>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int YFields;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <ZFields>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int ZFields;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 <FieldSize>k__BackingField
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 FieldSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private VROSC.NoteFieldNoteData[,,] _noteFieldArray
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::VROSC::NoteFieldNoteData*> noteFieldArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::NoteFieldNoteData*>) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.NoteFieldNoteData> _noteFieldList
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::VROSC::NoteFieldNoteData*>* noteFieldList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::NoteFieldNoteData*>*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 <XFields>k__BackingField
    [[deprecated]] int& dyn_$XFields$k__BackingField();
    // Get instance field reference: private System.Int32 <YFields>k__BackingField
    [[deprecated]] int& dyn_$YFields$k__BackingField();
    // Get instance field reference: private System.Int32 <ZFields>k__BackingField
    [[deprecated]] int& dyn_$ZFields$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <FieldSize>k__BackingField
    [[deprecated]] ::UnityEngine::Vector3& dyn_$FieldSize$k__BackingField();
    // Get instance field reference: private VROSC.NoteFieldNoteData[,,] _noteFieldArray
    [[deprecated]] ::ArrayW<::VROSC::NoteFieldNoteData*>& dyn__noteFieldArray();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.NoteFieldNoteData> _noteFieldList
    [[deprecated]] ::System::Collections::Generic::List_1<::VROSC::NoteFieldNoteData*>*& dyn__noteFieldList();
    // public System.Int32 get_XFields()
    // Offset: 0xC588F0
    int get_XFields();
    // private System.Void set_XFields(System.Int32 value)
    // Offset: 0xC588E8
    void set_XFields(int value);
    // public System.Int32 get_YFields()
    // Offset: 0xC58900
    int get_YFields();
    // private System.Void set_YFields(System.Int32 value)
    // Offset: 0xC588F8
    void set_YFields(int value);
    // public System.Int32 get_ZFields()
    // Offset: 0xC58910
    int get_ZFields();
    // private System.Void set_ZFields(System.Int32 value)
    // Offset: 0xC58908
    void set_ZFields(int value);
    // public UnityEngine.Vector3 get_FieldSize()
    // Offset: 0xC58924
    ::UnityEngine::Vector3 get_FieldSize();
    // private System.Void set_FieldSize(UnityEngine.Vector3 value)
    // Offset: 0xC58918
    void set_FieldSize(::UnityEngine::Vector3 value);
    // public System.Void .ctor(VROSC.NoteFieldParameters parameters)
    // Offset: 0xC58930
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteFieldData* New_ctor(::VROSC::NoteFieldParameters* parameters) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteFieldData*, creationType>(parameters)));
    }
    // private System.Void SetFieldSize(VROSC.NoteFieldParameters parameters)
    // Offset: 0xC58D74
    void SetFieldSize(::VROSC::NoteFieldParameters* parameters);
    // public VROSC.NoteFieldNoteData GetNoteBoardNote(UnityEngine.Vector3 normalizedPoint)
    // Offset: 0xC58FF8
    ::VROSC::NoteFieldNoteData* GetNoteBoardNote(::UnityEngine::Vector3 normalizedPoint);
    // public VROSC.NoteFieldNoteData GetNoteBoardNote(System.Int32 x, System.Int32 y, System.Int32 z)
    // Offset: 0xC590EC
    ::VROSC::NoteFieldNoteData* GetNoteBoardNote(int x, int y, int z);
  }; // VROSC.NoteFieldData
  #pragma pack(pop)
  static check_size<sizeof(NoteFieldData), 48 + sizeof(::System::Collections::Generic::List_1<::VROSC::NoteFieldNoteData*>*)> __VROSC_NoteFieldDataSizeCheck;
  static_assert(sizeof(NoteFieldData) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::NoteFieldData::get_XFields
// Il2CppName: get_XFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::NoteFieldData::*)()>(&VROSC::NoteFieldData::get_XFields)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldData*), "get_XFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldData::set_XFields
// Il2CppName: set_XFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldData::*)(int)>(&VROSC::NoteFieldData::set_XFields)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldData*), "set_XFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldData::get_YFields
// Il2CppName: get_YFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::NoteFieldData::*)()>(&VROSC::NoteFieldData::get_YFields)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldData*), "get_YFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldData::set_YFields
// Il2CppName: set_YFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldData::*)(int)>(&VROSC::NoteFieldData::set_YFields)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldData*), "set_YFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldData::get_ZFields
// Il2CppName: get_ZFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::NoteFieldData::*)()>(&VROSC::NoteFieldData::get_ZFields)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldData*), "get_ZFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldData::set_ZFields
// Il2CppName: set_ZFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldData::*)(int)>(&VROSC::NoteFieldData::set_ZFields)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldData*), "set_ZFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldData::get_FieldSize
// Il2CppName: get_FieldSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::NoteFieldData::*)()>(&VROSC::NoteFieldData::get_FieldSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldData*), "get_FieldSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldData::set_FieldSize
// Il2CppName: set_FieldSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldData::*)(::UnityEngine::Vector3)>(&VROSC::NoteFieldData::set_FieldSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldData*), "set_FieldSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::NoteFieldData::SetFieldSize
// Il2CppName: SetFieldSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldData::*)(::VROSC::NoteFieldParameters*)>(&VROSC::NoteFieldData::SetFieldSize)> {
  static const MethodInfo* get() {
    static auto* parameters = &::il2cpp_utils::GetClassFromName("VROSC", "NoteFieldParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldData*), "SetFieldSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameters});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldData::GetNoteBoardNote
// Il2CppName: GetNoteBoardNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::NoteFieldNoteData* (VROSC::NoteFieldData::*)(::UnityEngine::Vector3)>(&VROSC::NoteFieldData::GetNoteBoardNote)> {
  static const MethodInfo* get() {
    static auto* normalizedPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldData*), "GetNoteBoardNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{normalizedPoint});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldData::GetNoteBoardNote
// Il2CppName: GetNoteBoardNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::NoteFieldNoteData* (VROSC::NoteFieldData::*)(int, int, int)>(&VROSC::NoteFieldData::GetNoteBoardNote)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldData*), "GetNoteBoardNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
