// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: NoteBoardNote
  class NoteBoardNote;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: NoteBoardNoteNeighbours
  class NoteBoardNoteNeighbours;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::NoteBoardNoteNeighbours);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::NoteBoardNoteNeighbours*, "VROSC", "NoteBoardNoteNeighbours");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.NoteBoardNoteNeighbours
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteBoardNoteNeighbours : public ::Il2CppObject {
    public:
    // Nested type: ::VROSC::NoteBoardNoteNeighbours::Axis
    class Axis;
    public:
    // private VROSC.NoteBoardNoteNeighbours/VROSC.Axis _x
    // Size: 0x8
    // Offset: 0x10
    ::VROSC::NoteBoardNoteNeighbours::Axis* x;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoardNoteNeighbours::Axis*) == 0x8);
    // private VROSC.NoteBoardNoteNeighbours/VROSC.Axis _y
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::NoteBoardNoteNeighbours::Axis* y;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoardNoteNeighbours::Axis*) == 0x8);
    // private VROSC.NoteBoardNoteNeighbours/VROSC.Axis _z
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::NoteBoardNoteNeighbours::Axis* z;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoardNoteNeighbours::Axis*) == 0x8);
    // public VROSC.NoteBoardNote[] AllNeighbours
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::VROSC::NoteBoardNote*> AllNeighbours;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::NoteBoardNote*>) == 0x8);
    public:
    // Get instance field reference: private VROSC.NoteBoardNoteNeighbours/VROSC.Axis _x
    [[deprecated]] ::VROSC::NoteBoardNoteNeighbours::Axis*& dyn__x();
    // Get instance field reference: private VROSC.NoteBoardNoteNeighbours/VROSC.Axis _y
    [[deprecated]] ::VROSC::NoteBoardNoteNeighbours::Axis*& dyn__y();
    // Get instance field reference: private VROSC.NoteBoardNoteNeighbours/VROSC.Axis _z
    [[deprecated]] ::VROSC::NoteBoardNoteNeighbours::Axis*& dyn__z();
    // Get instance field reference: public VROSC.NoteBoardNote[] AllNeighbours
    [[deprecated]] ::ArrayW<::VROSC::NoteBoardNote*>& dyn_AllNeighbours();
    // public System.Void .ctor(VROSC.NoteBoardNote xUp, VROSC.NoteBoardNote xDown, VROSC.NoteBoardNote yUp, VROSC.NoteBoardNote yDown, VROSC.NoteBoardNote zUp, VROSC.NoteBoardNote zDown)
    // Offset: 0xC5678C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteBoardNoteNeighbours* New_ctor(::VROSC::NoteBoardNote* xUp, ::VROSC::NoteBoardNote* xDown, ::VROSC::NoteBoardNote* yUp, ::VROSC::NoteBoardNote* yDown, ::VROSC::NoteBoardNote* zUp, ::VROSC::NoteBoardNote* zDown) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardNoteNeighbours::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteBoardNoteNeighbours*, creationType>(xUp, xDown, yUp, yDown, zUp, zDown)));
    }
    // public VROSC.NoteBoardNote[] GetNeighbours(System.Int32 axis, System.Boolean inverted)
    // Offset: 0xC569AC
    ::ArrayW<::VROSC::NoteBoardNote*> GetNeighbours(int axis, bool inverted);
  }; // VROSC.NoteBoardNoteNeighbours
  #pragma pack(pop)
  static check_size<sizeof(NoteBoardNoteNeighbours), 40 + sizeof(::ArrayW<::VROSC::NoteBoardNote*>)> __VROSC_NoteBoardNoteNeighboursSizeCheck;
  static_assert(sizeof(NoteBoardNoteNeighbours) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::NoteBoardNoteNeighbours::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::NoteBoardNoteNeighbours::GetNeighbours
// Il2CppName: GetNeighbours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::VROSC::NoteBoardNote*> (VROSC::NoteBoardNoteNeighbours::*)(int, bool)>(&VROSC::NoteBoardNoteNeighbours::GetNeighbours)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inverted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteBoardNoteNeighbours*), "GetNeighbours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, inverted});
  }
};
