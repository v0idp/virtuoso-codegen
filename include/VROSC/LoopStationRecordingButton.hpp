// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.SignalNode
#include "VROSC/SignalNode.hpp"
// Including type: VROSC.LoopStationLoopHandler/VROSC.LooperState
#include "VROSC/LoopStationLoopHandler_LooperState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Skipping declaration: LoopStationRecorder because it is already included!
  // Forward declaring type: SelectionBar
  class SelectionBar;
  // Forward declaring type: ResetableMover
  class ResetableMover;
  // Forward declaring type: DrumPadEffectOnSignal
  class DrumPadEffectOnSignal;
  // Forward declaring type: LooperButtonProgressUpdater
  class LooperButtonProgressUpdater;
  // Forward declaring type: LoopStationRecordingButtonVisual
  class LoopStationRecordingButtonVisual;
  // Forward declaring type: LoopStationRecordingButtonPlayback
  class LoopStationRecordingButtonPlayback;
  // Forward declaring type: LoopStation
  class LoopStation;
  // Forward declaring type: LoopStationRecordingProgress
  class LoopStationRecordingProgress;
  // Forward declaring type: LoopPlaybackConfig
  class LoopPlaybackConfig;
  // Forward declaring type: UIScrollableItem
  class UIScrollableItem;
  // Forward declaring type: TransformMover
  class TransformMover;
  // Forward declaring type: Signal
  class Signal;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: VROSC::UI::Meshes
namespace VROSC::UI::Meshes {
  // Forward declaring type: ProceduralArc
  class ProceduralArc;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopStationRecordingButton
  class LoopStationRecordingButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::LoopStationRecordingButton);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LoopStationRecordingButton*, "VROSC", "LoopStationRecordingButton");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xB8
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.LoopStationRecordingButton
  // [TokenAttribute] Offset: FFFFFFFF
  class LoopStationRecordingButton : public ::VROSC::SignalNode {
    public:
    public:
    // private System.Single <RecordingProgressValue>k__BackingField
    // Size: 0x4
    // Offset: 0x40
    float RecordingProgressValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: RecordingProgressValue and: recorder
    char __padding0[0x4] = {};
    // [HeaderAttribute] Offset: 0x7848DC
    // private VROSC.LoopStationRecorder _recorder
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::LoopStationRecorder* recorder;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationRecorder*) == 0x8);
    // private VROSC.SelectionBar _loopLengthSelectionBar
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::SelectionBar* loopLengthSelectionBar;
    // Field size check
    static_assert(sizeof(::VROSC::SelectionBar*) == 0x8);
    // private UnityEngine.GameObject _loopLengthSelectionBarHolder
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::GameObject* loopLengthSelectionBarHolder;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private VROSC.ResetableMover _resetableMover
    // Size: 0x8
    // Offset: 0x60
    ::VROSC::ResetableMover* resetableMover;
    // Field size check
    static_assert(sizeof(::VROSC::ResetableMover*) == 0x8);
    // [HeaderAttribute] Offset: 0x784958
    // private VROSC.DrumPadEffectOnSignal _drumPadEffect
    // Size: 0x8
    // Offset: 0x68
    ::VROSC::DrumPadEffectOnSignal* drumPadEffect;
    // Field size check
    static_assert(sizeof(::VROSC::DrumPadEffectOnSignal*) == 0x8);
    // private VROSC.LooperButtonProgressUpdater _slider
    // Size: 0x8
    // Offset: 0x70
    ::VROSC::LooperButtonProgressUpdater* slider;
    // Field size check
    static_assert(sizeof(::VROSC::LooperButtonProgressUpdater*) == 0x8);
    // private TMPro.TextMeshPro _buttonText
    // Size: 0x8
    // Offset: 0x78
    ::TMPro::TextMeshPro* buttonText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private VROSC.LoopStationRecordingButtonVisual _visual
    // Size: 0x8
    // Offset: 0x80
    ::VROSC::LoopStationRecordingButtonVisual* visual;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationRecordingButtonVisual*) == 0x8);
    // private VROSC.UI.Meshes.ProceduralArc _arc
    // Size: 0x8
    // Offset: 0x88
    ::VROSC::UI::Meshes::ProceduralArc* arc;
    // Field size check
    static_assert(sizeof(::VROSC::UI::Meshes::ProceduralArc*) == 0x8);
    // private VROSC.LoopStationRecordingButtonPlayback _playback
    // Size: 0x8
    // Offset: 0x90
    ::VROSC::LoopStationRecordingButtonPlayback* playback;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationRecordingButtonPlayback*) == 0x8);
    // private System.Single _offset
    // Size: 0x4
    // Offset: 0x98
    float offset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: offset and: loopStation
    char __padding11[0x4] = {};
    // private VROSC.LoopStation _loopStation
    // Size: 0x8
    // Offset: 0xA0
    ::VROSC::LoopStation* loopStation;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStation*) == 0x8);
    // private VROSC.LoopStationRecordingProgress _recordingProgress
    // Size: 0x8
    // Offset: 0xA8
    ::VROSC::LoopStationRecordingProgress* recordingProgress;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationRecordingProgress*) == 0x8);
    // private VROSC.LoopStationLoopHandler/VROSC.LooperState _looperState
    // Size: 0x4
    // Offset: 0xB0
    ::VROSC::LoopStationLoopHandler::LooperState looperState;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationLoopHandler::LooperState) == 0x4);
    // private VROSC.LoopStationRecorder/VROSC.RecordingState _recordingState
    // Size: 0x4
    // Offset: 0xB4
    ::VROSC::LoopStationRecorder::RecordingState recordingState;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationRecorder::RecordingState) == 0x4);
    public:
    // Get instance field reference: private System.Single <RecordingProgressValue>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$RecordingProgressValue$k__BackingField();
    // Get instance field reference: private VROSC.LoopStationRecorder _recorder
    [[deprecated("Use field access instead!")]] ::VROSC::LoopStationRecorder*& dyn__recorder();
    // Get instance field reference: private VROSC.SelectionBar _loopLengthSelectionBar
    [[deprecated("Use field access instead!")]] ::VROSC::SelectionBar*& dyn__loopLengthSelectionBar();
    // Get instance field reference: private UnityEngine.GameObject _loopLengthSelectionBarHolder
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__loopLengthSelectionBarHolder();
    // Get instance field reference: private VROSC.ResetableMover _resetableMover
    [[deprecated("Use field access instead!")]] ::VROSC::ResetableMover*& dyn__resetableMover();
    // Get instance field reference: private VROSC.DrumPadEffectOnSignal _drumPadEffect
    [[deprecated("Use field access instead!")]] ::VROSC::DrumPadEffectOnSignal*& dyn__drumPadEffect();
    // Get instance field reference: private VROSC.LooperButtonProgressUpdater _slider
    [[deprecated("Use field access instead!")]] ::VROSC::LooperButtonProgressUpdater*& dyn__slider();
    // Get instance field reference: private TMPro.TextMeshPro _buttonText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& dyn__buttonText();
    // Get instance field reference: private VROSC.LoopStationRecordingButtonVisual _visual
    [[deprecated("Use field access instead!")]] ::VROSC::LoopStationRecordingButtonVisual*& dyn__visual();
    // Get instance field reference: private VROSC.UI.Meshes.ProceduralArc _arc
    [[deprecated("Use field access instead!")]] ::VROSC::UI::Meshes::ProceduralArc*& dyn__arc();
    // Get instance field reference: private VROSC.LoopStationRecordingButtonPlayback _playback
    [[deprecated("Use field access instead!")]] ::VROSC::LoopStationRecordingButtonPlayback*& dyn__playback();
    // Get instance field reference: private System.Single _offset
    [[deprecated("Use field access instead!")]] float& dyn__offset();
    // Get instance field reference: private VROSC.LoopStation _loopStation
    [[deprecated("Use field access instead!")]] ::VROSC::LoopStation*& dyn__loopStation();
    // Get instance field reference: private VROSC.LoopStationRecordingProgress _recordingProgress
    [[deprecated("Use field access instead!")]] ::VROSC::LoopStationRecordingProgress*& dyn__recordingProgress();
    // Get instance field reference: private VROSC.LoopStationLoopHandler/VROSC.LooperState _looperState
    [[deprecated("Use field access instead!")]] ::VROSC::LoopStationLoopHandler::LooperState& dyn__looperState();
    // Get instance field reference: private VROSC.LoopStationRecorder/VROSC.RecordingState _recordingState
    [[deprecated("Use field access instead!")]] ::VROSC::LoopStationRecorder::RecordingState& dyn__recordingState();
    // public System.Single get_RecordingProgressValue()
    // Offset: 0x1976174
    float get_RecordingProgressValue();
    // private System.Void set_RecordingProgressValue(System.Single value)
    // Offset: 0x197616C
    void set_RecordingProgressValue(float value);
    // public VROSC.LoopPlaybackConfig get_LoopPlaybackConfig()
    // Offset: 0x197617C
    ::VROSC::LoopPlaybackConfig* get_LoopPlaybackConfig();
    // private System.Void Awake()
    // Offset: 0x1976198
    void Awake();
    // private System.Void Start()
    // Offset: 0x1976410
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x19764F8
    void OnDestroy();
    // public System.Void Setup(VROSC.LoopStation loopStation)
    // Offset: 0x197683C
    void Setup(::VROSC::LoopStation* loopStation);
    // public System.Void Reset(VROSC.LoopPlaybackConfig loopPlaybackConfig)
    // Offset: 0x1976954
    void Reset(::VROSC::LoopPlaybackConfig* loopPlaybackConfig);
    // private System.Void MultiplierChanged(VROSC.UIScrollableItem obj)
    // Offset: 0x1976A44
    void MultiplierChanged(::VROSC::UIScrollableItem* obj);
    // public System.Void UpdateLooperState(VROSC.LoopStationLoopHandler/VROSC.LooperState state)
    // Offset: 0x1976A68
    void UpdateLooperState(::VROSC::LoopStationLoopHandler::LooperState state);
    // private System.Void RecorderStateChanged(VROSC.LoopStationRecorder/VROSC.RecordingState recordingState)
    // Offset: 0x1976B94
    void RecorderStateChanged(::VROSC::LoopStationRecorder::RecordingState recordingState);
    // private System.Void Update()
    // Offset: 0x1976BB4
    void Update();
    // private System.Void UpdateArc()
    // Offset: 0x1977030
    void UpdateArc();
    // private System.Void UpdateVisually()
    // Offset: 0x1976A70
    void UpdateVisually();
    // private System.Void SetValue(System.Single value, System.Single flashValue)
    // Offset: 0x1976F0C
    void SetValue(float value, float flashValue);
    // private System.Void ButtonReset(VROSC.ResetableMover mover)
    // Offset: 0x1977428
    void ButtonReset(::VROSC::ResetableMover* mover);
    // private System.Void ButtonMoved(VROSC.ResetableMover mover)
    // Offset: 0x1977450
    void ButtonMoved(::VROSC::ResetableMover* mover);
    // public System.Void SetToPosition(System.Boolean isAttached, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale)
    // Offset: 0x1977534
    void SetToPosition(bool isAttached, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 scale);
    // private System.Void LoopStationMoved(VROSC.TransformMover mover)
    // Offset: 0x1977574
    void LoopStationMoved(::VROSC::TransformMover* mover);
    // public System.Void .ctor()
    // Offset: 0x19775F4
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoopStationRecordingButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::LoopStationRecordingButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoopStationRecordingButton*, creationType>()));
    }
    // protected override System.Void OnEnable()
    // Offset: 0x19764F0
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::OnEnable()
    void OnEnable();
    // protected override System.Void NodeBegin(VROSC.Signal signal)
    // Offset: 0x1976B9C
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeBegin(VROSC.Signal signal)
    void NodeBegin(::VROSC::Signal* signal);
  }; // VROSC.LoopStationRecordingButton
  #pragma pack(pop)
  static check_size<sizeof(LoopStationRecordingButton), 180 + sizeof(::VROSC::LoopStationRecorder::RecordingState)> __VROSC_LoopStationRecordingButtonSizeCheck;
  static_assert(sizeof(LoopStationRecordingButton) == 0xB8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::get_RecordingProgressValue
// Il2CppName: get_RecordingProgressValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::LoopStationRecordingButton::*)()>(&VROSC::LoopStationRecordingButton::get_RecordingProgressValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "get_RecordingProgressValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::set_RecordingProgressValue
// Il2CppName: set_RecordingProgressValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)(float)>(&VROSC::LoopStationRecordingButton::set_RecordingProgressValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "set_RecordingProgressValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::get_LoopPlaybackConfig
// Il2CppName: get_LoopPlaybackConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlaybackConfig* (VROSC::LoopStationRecordingButton::*)()>(&VROSC::LoopStationRecordingButton::get_LoopPlaybackConfig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "get_LoopPlaybackConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)()>(&VROSC::LoopStationRecordingButton::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)()>(&VROSC::LoopStationRecordingButton::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)()>(&VROSC::LoopStationRecordingButton::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)(::VROSC::LoopStation*)>(&VROSC::LoopStationRecordingButton::Setup)> {
  static const MethodInfo* get() {
    static auto* loopStation = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopStation});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)(::VROSC::LoopPlaybackConfig*)>(&VROSC::LoopStationRecordingButton::Reset)> {
  static const MethodInfo* get() {
    static auto* loopPlaybackConfig = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlaybackConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopPlaybackConfig});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::MultiplierChanged
// Il2CppName: MultiplierChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)(::VROSC::UIScrollableItem*)>(&VROSC::LoopStationRecordingButton::MultiplierChanged)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("VROSC", "UIScrollableItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "MultiplierChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::UpdateLooperState
// Il2CppName: UpdateLooperState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)(::VROSC::LoopStationLoopHandler::LooperState)>(&VROSC::LoopStationRecordingButton::UpdateLooperState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStationLoopHandler/LooperState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "UpdateLooperState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::RecorderStateChanged
// Il2CppName: RecorderStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)(::VROSC::LoopStationRecorder::RecordingState)>(&VROSC::LoopStationRecordingButton::RecorderStateChanged)> {
  static const MethodInfo* get() {
    static auto* recordingState = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStationRecorder/RecordingState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "RecorderStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recordingState});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)()>(&VROSC::LoopStationRecordingButton::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::UpdateArc
// Il2CppName: UpdateArc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)()>(&VROSC::LoopStationRecordingButton::UpdateArc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "UpdateArc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::UpdateVisually
// Il2CppName: UpdateVisually
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)()>(&VROSC::LoopStationRecordingButton::UpdateVisually)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "UpdateVisually", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)(float, float)>(&VROSC::LoopStationRecordingButton::SetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* flashValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, flashValue});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::ButtonReset
// Il2CppName: ButtonReset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)(::VROSC::ResetableMover*)>(&VROSC::LoopStationRecordingButton::ButtonReset)> {
  static const MethodInfo* get() {
    static auto* mover = &::il2cpp_utils::GetClassFromName("VROSC", "ResetableMover")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "ButtonReset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mover});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::ButtonMoved
// Il2CppName: ButtonMoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)(::VROSC::ResetableMover*)>(&VROSC::LoopStationRecordingButton::ButtonMoved)> {
  static const MethodInfo* get() {
    static auto* mover = &::il2cpp_utils::GetClassFromName("VROSC", "ResetableMover")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "ButtonMoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mover});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::SetToPosition
// Il2CppName: SetToPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)(bool, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3)>(&VROSC::LoopStationRecordingButton::SetToPosition)> {
  static const MethodInfo* get() {
    static auto* isAttached = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "SetToPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isAttached, position, rotation, scale});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::LoopStationMoved
// Il2CppName: LoopStationMoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)(::VROSC::TransformMover*)>(&VROSC::LoopStationRecordingButton::LoopStationMoved)> {
  static const MethodInfo* get() {
    static auto* mover = &::il2cpp_utils::GetClassFromName("VROSC", "TransformMover")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "LoopStationMoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mover});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)()>(&VROSC::LoopStationRecordingButton::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationRecordingButton::NodeBegin
// Il2CppName: NodeBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationRecordingButton::*)(::VROSC::Signal*)>(&VROSC::LoopStationRecordingButton::NodeBegin)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationRecordingButton*), "NodeBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
