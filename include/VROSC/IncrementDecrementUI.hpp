// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: UIButton
  class UIButton;
  // Forward declaring type: IntNode
  class IntNode;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: IncrementDecrementUI
  class IncrementDecrementUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::IncrementDecrementUI);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::IncrementDecrementUI*, "VROSC", "IncrementDecrementUI");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.IncrementDecrementUI
  // [TokenAttribute] Offset: FFFFFFFF
  class IncrementDecrementUI : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.UIButton _incrementButton
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::UIButton* incrementButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.UIButton _decrementButton
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::UIButton* decrementButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // protected TMPro.TextMeshPro _display
    // Size: 0x8
    // Offset: 0x28
    ::TMPro::TextMeshPro* display;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // protected VROSC.IntNode _output
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::IntNode* output;
    // Field size check
    static_assert(sizeof(::VROSC::IntNode*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.UIButton _incrementButton
    [[deprecated]] ::VROSC::UIButton*& dyn__incrementButton();
    // Get instance field reference: private VROSC.UIButton _decrementButton
    [[deprecated]] ::VROSC::UIButton*& dyn__decrementButton();
    // Get instance field reference: protected TMPro.TextMeshPro _display
    [[deprecated]] ::TMPro::TextMeshPro*& dyn__display();
    // Get instance field reference: protected VROSC.IntNode _output
    [[deprecated]] ::VROSC::IntNode*& dyn__output();
    // private System.Void Start()
    // Offset: 0x1942D80
    void Start();
    // protected System.Void IncrementButtonPressed()
    // Offset: 0x1942FC8
    void IncrementButtonPressed();
    // protected System.Void DecrementButtonPressed()
    // Offset: 0x1943044
    void DecrementButtonPressed();
    // protected System.Void OnDestroy()
    // Offset: 0x19430C0
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x19431C4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IncrementDecrementUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::IncrementDecrementUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IncrementDecrementUI*, creationType>()));
    }
  }; // VROSC.IncrementDecrementUI
  #pragma pack(pop)
  static check_size<sizeof(IncrementDecrementUI), 48 + sizeof(::VROSC::IntNode*)> __VROSC_IncrementDecrementUISizeCheck;
  static_assert(sizeof(IncrementDecrementUI) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::IncrementDecrementUI::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::IncrementDecrementUI::*)()>(&VROSC::IncrementDecrementUI::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::IncrementDecrementUI*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::IncrementDecrementUI::IncrementButtonPressed
// Il2CppName: IncrementButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::IncrementDecrementUI::*)()>(&VROSC::IncrementDecrementUI::IncrementButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::IncrementDecrementUI*), "IncrementButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::IncrementDecrementUI::DecrementButtonPressed
// Il2CppName: DecrementButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::IncrementDecrementUI::*)()>(&VROSC::IncrementDecrementUI::DecrementButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::IncrementDecrementUI*), "DecrementButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::IncrementDecrementUI::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::IncrementDecrementUI::*)()>(&VROSC::IncrementDecrementUI::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::IncrementDecrementUI*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::IncrementDecrementUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
