// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.Credits.CreditsObject
#include "VROSC/Credits/CreditsObject.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: AdjustableMesh
  class AdjustableMesh;
}
// Completed forward declares
// Type namespace: VROSC.Credits
namespace VROSC::Credits {
  // Forward declaring type: CreditsMultiObject
  class CreditsMultiObject;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::Credits::CreditsMultiObject);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::Credits::CreditsMultiObject*, "VROSC.Credits", "CreditsMultiObject");
// Type namespace: VROSC.Credits
namespace VROSC::Credits {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.Credits.CreditsMultiObject
  // [TokenAttribute] Offset: FFFFFFFF
  class CreditsMultiObject : public ::VROSC::Credits::CreditsObject {
    public:
    public:
    // private TMPro.TextMeshPro[] _lines
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::TMPro::TextMeshPro*> lines;
    // Field size check
    static_assert(sizeof(::ArrayW<::TMPro::TextMeshPro*>) == 0x8);
    // private VROSC.AdjustableMesh[] _meshes
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::VROSC::AdjustableMesh*> meshes;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::AdjustableMesh*>) == 0x8);
    // private UnityEngine.Color[] _linesColors
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Color> linesColors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    public:
    // Get instance field reference: private TMPro.TextMeshPro[] _lines
    [[deprecated("Use field access instead!")]] ::ArrayW<::TMPro::TextMeshPro*>& dyn__lines();
    // Get instance field reference: private VROSC.AdjustableMesh[] _meshes
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::AdjustableMesh*>& dyn__meshes();
    // Get instance field reference: private UnityEngine.Color[] _linesColors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn__linesColors();
    // private System.Void Awake()
    // Offset: 0x8DF8A0
    void Awake();
    // public System.Void .ctor()
    // Offset: 0x8DFB70
    // Implemented from: VROSC.Credits.CreditsObject
    // Base method: System.Void CreditsObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CreditsMultiObject* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::Credits::CreditsMultiObject::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CreditsMultiObject*, creationType>()));
    }
    // protected override System.Void UpdateVisibility(System.Single visible)
    // Offset: 0x8DF9E4
    // Implemented from: VROSC.Credits.CreditsObject
    // Base method: System.Void CreditsObject::UpdateVisibility(System.Single visible)
    void UpdateVisibility(float visible);
  }; // VROSC.Credits.CreditsMultiObject
  #pragma pack(pop)
  static check_size<sizeof(CreditsMultiObject), 48 + sizeof(::ArrayW<::UnityEngine::Color>)> __VROSC_Credits_CreditsMultiObjectSizeCheck;
  static_assert(sizeof(CreditsMultiObject) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::Credits::CreditsMultiObject::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Credits::CreditsMultiObject::*)()>(&VROSC::Credits::CreditsMultiObject::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Credits::CreditsMultiObject*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Credits::CreditsMultiObject::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::Credits::CreditsMultiObject::UpdateVisibility
// Il2CppName: UpdateVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Credits::CreditsMultiObject::*)(float)>(&VROSC::Credits::CreditsMultiObject::UpdateVisibility)> {
  static const MethodInfo* get() {
    static auto* visible = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Credits::CreditsMultiObject*), "UpdateVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{visible});
  }
};
