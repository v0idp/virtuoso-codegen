// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: VROSC.Credits
namespace VROSC::Credits {
  // Forward declaring type: CreditsNameData
  class CreditsNameData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::Credits::CreditsNameData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::Credits::CreditsNameData*, "VROSC.Credits", "CreditsNameData");
// Type namespace: VROSC.Credits
namespace VROSC::Credits {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.Credits.CreditsNameData
  // [TokenAttribute] Offset: FFFFFFFF
  class CreditsNameData : public ::Il2CppObject {
    public:
    public:
    // private System.String _name
    // Size: 0x8
    // Offset: 0x10
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _title
    // Size: 0x8
    // Offset: 0x18
    ::StringW title;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.String _name
    [[deprecated("Use field access instead!")]] ::StringW& dyn__name();
    // Get instance field reference: private System.String _title
    [[deprecated("Use field access instead!")]] ::StringW& dyn__title();
    // public System.String get_Name()
    // Offset: 0x8DFB78
    ::StringW get_Name();
    // public System.String get_Title()
    // Offset: 0x8DFB80
    ::StringW get_Title();
    // public System.Void .ctor()
    // Offset: 0x8DFB88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CreditsNameData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::Credits::CreditsNameData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CreditsNameData*, creationType>()));
    }
  }; // VROSC.Credits.CreditsNameData
  #pragma pack(pop)
  static check_size<sizeof(CreditsNameData), 24 + sizeof(::StringW)> __VROSC_Credits_CreditsNameDataSizeCheck;
  static_assert(sizeof(CreditsNameData) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::Credits::CreditsNameData::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::Credits::CreditsNameData::*)()>(&VROSC::Credits::CreditsNameData::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Credits::CreditsNameData*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Credits::CreditsNameData::get_Title
// Il2CppName: get_Title
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::Credits::CreditsNameData::*)()>(&VROSC::Credits::CreditsNameData::get_Title)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Credits::CreditsNameData*), "get_Title", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Credits::CreditsNameData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
