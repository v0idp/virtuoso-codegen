// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.Credits.CreditsObject
#include "VROSC/Credits/CreditsObject.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Completed forward declares
// Type namespace: VROSC.Credits
namespace VROSC::Credits {
  // Forward declaring type: CreditsHeader
  class CreditsHeader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::Credits::CreditsHeader);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::Credits::CreditsHeader*, "VROSC.Credits", "CreditsHeader");
// Type namespace: VROSC.Credits
namespace VROSC::Credits {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.Credits.CreditsHeader
  // [TokenAttribute] Offset: FFFFFFFF
  class CreditsHeader : public ::VROSC::Credits::CreditsObject {
    public:
    public:
    // private TMPro.TextMeshPro _name
    // Size: 0x8
    // Offset: 0x20
    ::TMPro::TextMeshPro* name;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private UnityEngine.Color _nameColor
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::Color nameColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Get instance field reference: private TMPro.TextMeshPro _name
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& dyn__name();
    // Get instance field reference: private UnityEngine.Color _nameColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__nameColor();
    // private System.Void Awake()
    // Offset: 0x8DF490
    void Awake();
    // public System.Void Setup(System.String name)
    // Offset: 0x8DF4D0
    void Setup(::StringW name);
    // public System.Void .ctor()
    // Offset: 0x8DF59C
    // Implemented from: VROSC.Credits.CreditsObject
    // Base method: System.Void CreditsObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CreditsHeader* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::Credits::CreditsHeader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CreditsHeader*, creationType>()));
    }
    // protected override System.Void UpdateVisibility(System.Single visible)
    // Offset: 0x8DF530
    // Implemented from: VROSC.Credits.CreditsObject
    // Base method: System.Void CreditsObject::UpdateVisibility(System.Single visible)
    void UpdateVisibility(float visible);
  }; // VROSC.Credits.CreditsHeader
  #pragma pack(pop)
  static check_size<sizeof(CreditsHeader), 40 + sizeof(::UnityEngine::Color)> __VROSC_Credits_CreditsHeaderSizeCheck;
  static_assert(sizeof(CreditsHeader) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::Credits::CreditsHeader::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Credits::CreditsHeader::*)()>(&VROSC::Credits::CreditsHeader::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Credits::CreditsHeader*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Credits::CreditsHeader::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Credits::CreditsHeader::*)(::StringW)>(&VROSC::Credits::CreditsHeader::Setup)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Credits::CreditsHeader*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: VROSC::Credits::CreditsHeader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::Credits::CreditsHeader::UpdateVisibility
// Il2CppName: UpdateVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Credits::CreditsHeader::*)(float)>(&VROSC::Credits::CreditsHeader::UpdateVisibility)> {
  static const MethodInfo* get() {
    static auto* visible = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Credits::CreditsHeader*), "UpdateVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{visible});
  }
};
