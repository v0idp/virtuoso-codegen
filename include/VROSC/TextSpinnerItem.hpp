// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: AdjustableMesh
  class AdjustableMesh;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TextSpinnerItem
  class TextSpinnerItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TextSpinnerItem);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TextSpinnerItem*, "VROSC", "TextSpinnerItem");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xA1
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TextSpinnerItem
  // [TokenAttribute] Offset: FFFFFFFF
  class TextSpinnerItem : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private TMPro.TextMeshPro _valueText
    // Size: 0x8
    // Offset: 0x18
    ::TMPro::TextMeshPro* valueText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private VROSC.AdjustableMesh _background
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::AdjustableMesh* background;
    // Field size check
    static_assert(sizeof(::VROSC::AdjustableMesh*) == 0x8);
    // private UnityEngine.Color _selectedColor
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::Color selectedColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _inactiveColor
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Color inactiveColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _backgroundColor
    // Size: 0x10
    // Offset: 0x48
    ::UnityEngine::Color backgroundColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.AnimationCurve _alphaCurve
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AnimationCurve* alphaCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.Color _currentTextColor
    // Size: 0x10
    // Offset: 0x60
    ::UnityEngine::Color currentTextColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _currentBackgroundColor
    // Size: 0x10
    // Offset: 0x70
    ::UnityEngine::Color currentBackgroundColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single _currentAlpha
    // Size: 0x4
    // Offset: 0x80
    float currentAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: currentAlpha and: adjustableMeshRenderer
    char __padding8[0x4] = {};
    // private UnityEngine.Renderer _adjustableMeshRenderer
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Renderer* adjustableMeshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.Material _transparentMaterial
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Material* transparentMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _normalMaterial
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Material* normalMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Boolean _isTransparent
    // Size: 0x1
    // Offset: 0xA0
    bool isTransparent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private TMPro.TextMeshPro _valueText
    [[deprecated]] ::TMPro::TextMeshPro*& dyn__valueText();
    // Get instance field reference: private VROSC.AdjustableMesh _background
    [[deprecated]] ::VROSC::AdjustableMesh*& dyn__background();
    // Get instance field reference: private UnityEngine.Color _selectedColor
    [[deprecated]] ::UnityEngine::Color& dyn__selectedColor();
    // Get instance field reference: private UnityEngine.Color _inactiveColor
    [[deprecated]] ::UnityEngine::Color& dyn__inactiveColor();
    // Get instance field reference: private UnityEngine.Color _backgroundColor
    [[deprecated]] ::UnityEngine::Color& dyn__backgroundColor();
    // Get instance field reference: private UnityEngine.AnimationCurve _alphaCurve
    [[deprecated]] ::UnityEngine::AnimationCurve*& dyn__alphaCurve();
    // Get instance field reference: private UnityEngine.Color _currentTextColor
    [[deprecated]] ::UnityEngine::Color& dyn__currentTextColor();
    // Get instance field reference: private UnityEngine.Color _currentBackgroundColor
    [[deprecated]] ::UnityEngine::Color& dyn__currentBackgroundColor();
    // Get instance field reference: private System.Single _currentAlpha
    [[deprecated]] float& dyn__currentAlpha();
    // Get instance field reference: private UnityEngine.Renderer _adjustableMeshRenderer
    [[deprecated]] ::UnityEngine::Renderer*& dyn__adjustableMeshRenderer();
    // Get instance field reference: private UnityEngine.Material _transparentMaterial
    [[deprecated]] ::UnityEngine::Material*& dyn__transparentMaterial();
    // Get instance field reference: private UnityEngine.Material _normalMaterial
    [[deprecated]] ::UnityEngine::Material*& dyn__normalMaterial();
    // Get instance field reference: private System.Boolean _isTransparent
    [[deprecated]] bool& dyn__isTransparent();
    // private System.Void Awake()
    // Offset: 0xA25A58
    void Awake();
    // private System.Void AddHook()
    // Offset: 0xA25B18
    void AddHook();
    // private System.Void SetMaterial(UnityEngine.Color color)
    // Offset: 0xA25BF4
    void SetMaterial(::UnityEngine::Color color);
    // public System.Void Set(System.String text, System.Boolean selected, System.Single valueOffCenter)
    // Offset: 0xA2535C
    void Set(::StringW text, bool selected, float valueOffCenter);
    // public System.Void .ctor()
    // Offset: 0xA25C58
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextSpinnerItem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TextSpinnerItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextSpinnerItem*, creationType>()));
    }
  }; // VROSC.TextSpinnerItem
  #pragma pack(pop)
  static check_size<sizeof(TextSpinnerItem), 160 + sizeof(bool)> __VROSC_TextSpinnerItemSizeCheck;
  static_assert(sizeof(TextSpinnerItem) == 0xA1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TextSpinnerItem::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TextSpinnerItem::*)()>(&VROSC::TextSpinnerItem::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TextSpinnerItem*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TextSpinnerItem::AddHook
// Il2CppName: AddHook
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TextSpinnerItem::*)()>(&VROSC::TextSpinnerItem::AddHook)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TextSpinnerItem*), "AddHook", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TextSpinnerItem::SetMaterial
// Il2CppName: SetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TextSpinnerItem::*)(::UnityEngine::Color)>(&VROSC::TextSpinnerItem::SetMaterial)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TextSpinnerItem*), "SetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::TextSpinnerItem::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TextSpinnerItem::*)(::StringW, bool, float)>(&VROSC::TextSpinnerItem::Set)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* selected = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* valueOffCenter = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TextSpinnerItem*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, selected, valueOffCenter});
  }
};
// Writing MetadataGetter for method: VROSC::TextSpinnerItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
