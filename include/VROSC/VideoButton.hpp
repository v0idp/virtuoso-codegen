// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.PaginatedListItemUI
#include "VROSC/PaginatedListItemUI.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: VideoInfo
  class VideoInfo;
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: PaginatedList
  class PaginatedList;
  // Forward declaring type: PaginatedListDataHolder
  class PaginatedListDataHolder;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Texture
  class Texture;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: VideoButton
  class VideoButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::VideoButton);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::VideoButton*, "VROSC", "VideoButton");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.VideoButton
  // [TokenAttribute] Offset: FFFFFFFF
  class VideoButton : public ::VROSC::PaginatedListItemUI {
    public:
    // Nested type: ::VROSC::VideoButton::$DownloadThumbnail$d__5
    struct $DownloadThumbnail$d__5;
    public:
    // private UnityEngine.MeshRenderer _thumbnailMesh
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::MeshRenderer* thumbnailMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private TMPro.TextMeshPro _titleUI
    // Size: 0x8
    // Offset: 0x48
    ::TMPro::TextMeshPro* titleUI;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private UnityEngine.GameObject _playIcon
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* playIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.MeshRenderer _thumbnailMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn__thumbnailMesh();
    // Get instance field reference: private TMPro.TextMeshPro _titleUI
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& dyn__titleUI();
    // Get instance field reference: private UnityEngine.GameObject _playIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__playIcon();
    // private System.Void DownloadThumbnail(VROSC.VideoInfo videoInfo)
    // Offset: 0x1922504
    void DownloadThumbnail(::VROSC::VideoInfo* videoInfo);
    // private System.Void SetThumbnail(UnityEngine.Texture thumbnail)
    // Offset: 0x19225D0
    void SetThumbnail(::UnityEngine::Texture* thumbnail);
    // private System.Void Toggled(VROSC.InputDevice inputDevice, System.Boolean toggledOn)
    // Offset: 0x192260C
    void Toggled(::VROSC::InputDevice* inputDevice, bool toggledOn);
    // public System.Void .ctor()
    // Offset: 0x1922630
    // Implemented from: VROSC.PaginatedListItemUI
    // Base method: System.Void PaginatedListItemUI::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VideoButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::VideoButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VideoButton*, creationType>()));
    }
    // public override System.Void Setup(VROSC.PaginatedList paginatedList)
    // Offset: 0x19222F0
    // Implemented from: VROSC.PaginatedListItemUI
    // Base method: System.Void PaginatedListItemUI::Setup(VROSC.PaginatedList paginatedList)
    void Setup(::VROSC::PaginatedList* paginatedList);
    // public override System.Void SetNewData(VROSC.PaginatedListDataHolder dataholder)
    // Offset: 0x19223E0
    // Implemented from: VROSC.PaginatedListItemUI
    // Base method: System.Void PaginatedListItemUI::SetNewData(VROSC.PaginatedListDataHolder dataholder)
    void SetNewData(::VROSC::PaginatedListDataHolder* dataholder);
  }; // VROSC.VideoButton
  #pragma pack(pop)
  static check_size<sizeof(VideoButton), 80 + sizeof(::UnityEngine::GameObject*)> __VROSC_VideoButtonSizeCheck;
  static_assert(sizeof(VideoButton) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::VideoButton::DownloadThumbnail
// Il2CppName: DownloadThumbnail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoButton::*)(::VROSC::VideoInfo*)>(&VROSC::VideoButton::DownloadThumbnail)> {
  static const MethodInfo* get() {
    static auto* videoInfo = &::il2cpp_utils::GetClassFromName("VROSC", "VideoInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoButton*), "DownloadThumbnail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{videoInfo});
  }
};
// Writing MetadataGetter for method: VROSC::VideoButton::SetThumbnail
// Il2CppName: SetThumbnail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoButton::*)(::UnityEngine::Texture*)>(&VROSC::VideoButton::SetThumbnail)> {
  static const MethodInfo* get() {
    static auto* thumbnail = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoButton*), "SetThumbnail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{thumbnail});
  }
};
// Writing MetadataGetter for method: VROSC::VideoButton::Toggled
// Il2CppName: Toggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoButton::*)(::VROSC::InputDevice*, bool)>(&VROSC::VideoButton::Toggled)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* toggledOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoButton*), "Toggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice, toggledOn});
  }
};
// Writing MetadataGetter for method: VROSC::VideoButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::VideoButton::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoButton::*)(::VROSC::PaginatedList*)>(&VROSC::VideoButton::Setup)> {
  static const MethodInfo* get() {
    static auto* paginatedList = &::il2cpp_utils::GetClassFromName("VROSC", "PaginatedList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoButton*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paginatedList});
  }
};
// Writing MetadataGetter for method: VROSC::VideoButton::SetNewData
// Il2CppName: SetNewData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoButton::*)(::VROSC::PaginatedListDataHolder*)>(&VROSC::VideoButton::SetNewData)> {
  static const MethodInfo* get() {
    static auto* dataholder = &::il2cpp_utils::GetClassFromName("VROSC", "PaginatedListDataHolder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoButton*), "SetNewData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dataholder});
  }
};
