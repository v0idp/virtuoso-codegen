// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: UISlideToggle
  class UISlideToggle;
  // Forward declaring type: UISlider
  class UISlider;
  // Forward declaring type: UIButton
  class UIButton;
  // Forward declaring type: SessionsLibraryPreviewPlayer
  class SessionsLibraryPreviewPlayer;
  // Forward declaring type: TimeSlider
  class TimeSlider;
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: UserDataControllers
  class UserDataControllers;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: PreviewOptionsUI
  class PreviewOptionsUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::PreviewOptionsUI);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::PreviewOptionsUI*, "VROSC", "PreviewOptionsUI");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.PreviewOptionsUI
  // [TokenAttribute] Offset: FFFFFFFF
  class PreviewOptionsUI : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.UISlideToggle _autoPlayToggle
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::UISlideToggle* autoPlayToggle;
    // Field size check
    static_assert(sizeof(::VROSC::UISlideToggle*) == 0x8);
    // private VROSC.UISlider _volumeSlider
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::UISlider* volumeSlider;
    // Field size check
    static_assert(sizeof(::VROSC::UISlider*) == 0x8);
    // private VROSC.UIButton _playButton
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::UIButton* playButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.SessionsLibraryPreviewPlayer _previewPlayer
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::SessionsLibraryPreviewPlayer* previewPlayer;
    // Field size check
    static_assert(sizeof(::VROSC::SessionsLibraryPreviewPlayer*) == 0x8);
    // private VROSC.TimeSlider _timeSlider
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::TimeSlider* timeSlider;
    // Field size check
    static_assert(sizeof(::VROSC::TimeSlider*) == 0x8);
    // private UnityEngine.GameObject _playIcon
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* playIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _pauseIcon
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* pauseIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.UISlideToggle _autoPlayToggle
    [[deprecated]] ::VROSC::UISlideToggle*& dyn__autoPlayToggle();
    // Get instance field reference: private VROSC.UISlider _volumeSlider
    [[deprecated]] ::VROSC::UISlider*& dyn__volumeSlider();
    // Get instance field reference: private VROSC.UIButton _playButton
    [[deprecated]] ::VROSC::UIButton*& dyn__playButton();
    // Get instance field reference: private VROSC.SessionsLibraryPreviewPlayer _previewPlayer
    [[deprecated]] ::VROSC::SessionsLibraryPreviewPlayer*& dyn__previewPlayer();
    // Get instance field reference: private VROSC.TimeSlider _timeSlider
    [[deprecated]] ::VROSC::TimeSlider*& dyn__timeSlider();
    // Get instance field reference: private UnityEngine.GameObject _playIcon
    [[deprecated]] ::UnityEngine::GameObject*& dyn__playIcon();
    // Get instance field reference: private UnityEngine.GameObject _pauseIcon
    [[deprecated]] ::UnityEngine::GameObject*& dyn__pauseIcon();
    // private System.Void Awake()
    // Offset: 0xAE540C
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0xAE5718
    void OnDestroy();
    // private System.Void OnEnable()
    // Offset: 0xAE5A24
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0xAE5AF0
    void OnDisable();
    // public System.Void PreviewChanged(System.Boolean hasPreview)
    // Offset: 0xAE5B58
    void PreviewChanged(bool hasPreview);
    // private System.Void AutoPlayToggled(VROSC.InputDevice device, System.Boolean isOn)
    // Offset: 0xAE5BD0
    void AutoPlayToggled(::VROSC::InputDevice* device, bool isOn);
    // private System.Void VolumeValueChanged(System.Single value)
    // Offset: 0xAE5C38
    void VolumeValueChanged(float value);
    // private System.Void PlayButtonPressed()
    // Offset: 0xAE5CC0
    void PlayButtonPressed();
    // private System.Void PlayingStateChanged(System.Boolean playing)
    // Offset: 0xAE5CEC
    void PlayingStateChanged(bool playing);
    // private System.Void PreferencesDataLoaded(VROSC.UserDataControllers userDataControllers)
    // Offset: 0xAE5D78
    void PreferencesDataLoaded(::VROSC::UserDataControllers* userDataControllers);
    // public System.Void .ctor()
    // Offset: 0xAE5E04
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PreviewOptionsUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PreviewOptionsUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PreviewOptionsUI*, creationType>()));
    }
  }; // VROSC.PreviewOptionsUI
  #pragma pack(pop)
  static check_size<sizeof(PreviewOptionsUI), 72 + sizeof(::UnityEngine::GameObject*)> __VROSC_PreviewOptionsUISizeCheck;
  static_assert(sizeof(PreviewOptionsUI) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::PreviewOptionsUI::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreviewOptionsUI::*)()>(&VROSC::PreviewOptionsUI::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreviewOptionsUI*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PreviewOptionsUI::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreviewOptionsUI::*)()>(&VROSC::PreviewOptionsUI::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreviewOptionsUI*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PreviewOptionsUI::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreviewOptionsUI::*)()>(&VROSC::PreviewOptionsUI::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreviewOptionsUI*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PreviewOptionsUI::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreviewOptionsUI::*)()>(&VROSC::PreviewOptionsUI::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreviewOptionsUI*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PreviewOptionsUI::PreviewChanged
// Il2CppName: PreviewChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreviewOptionsUI::*)(bool)>(&VROSC::PreviewOptionsUI::PreviewChanged)> {
  static const MethodInfo* get() {
    static auto* hasPreview = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreviewOptionsUI*), "PreviewChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hasPreview});
  }
};
// Writing MetadataGetter for method: VROSC::PreviewOptionsUI::AutoPlayToggled
// Il2CppName: AutoPlayToggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreviewOptionsUI::*)(::VROSC::InputDevice*, bool)>(&VROSC::PreviewOptionsUI::AutoPlayToggled)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* isOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreviewOptionsUI*), "AutoPlayToggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, isOn});
  }
};
// Writing MetadataGetter for method: VROSC::PreviewOptionsUI::VolumeValueChanged
// Il2CppName: VolumeValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreviewOptionsUI::*)(float)>(&VROSC::PreviewOptionsUI::VolumeValueChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreviewOptionsUI*), "VolumeValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::PreviewOptionsUI::PlayButtonPressed
// Il2CppName: PlayButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreviewOptionsUI::*)()>(&VROSC::PreviewOptionsUI::PlayButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreviewOptionsUI*), "PlayButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PreviewOptionsUI::PlayingStateChanged
// Il2CppName: PlayingStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreviewOptionsUI::*)(bool)>(&VROSC::PreviewOptionsUI::PlayingStateChanged)> {
  static const MethodInfo* get() {
    static auto* playing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreviewOptionsUI*), "PlayingStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playing});
  }
};
// Writing MetadataGetter for method: VROSC::PreviewOptionsUI::PreferencesDataLoaded
// Il2CppName: PreferencesDataLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PreviewOptionsUI::*)(::VROSC::UserDataControllers*)>(&VROSC::PreviewOptionsUI::PreferencesDataLoaded)> {
  static const MethodInfo* get() {
    static auto* userDataControllers = &::il2cpp_utils::GetClassFromName("VROSC", "UserDataControllers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PreviewOptionsUI*), "PreferencesDataLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userDataControllers});
  }
};
// Writing MetadataGetter for method: VROSC::PreviewOptionsUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
