// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.StateMachine
#include "VROSC/StateMachine.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: IState
  class IState;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::StateMachine::Transition);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::StateMachine::Transition*, "VROSC", "StateMachine/Transition");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.StateMachine/VROSC.Transition
  // [TokenAttribute] Offset: FFFFFFFF
  class StateMachine::Transition : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Func`1<System.Boolean> <Condition>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Func_1<bool>* Condition;
    // Field size check
    static_assert(sizeof(::System::Func_1<bool>*) == 0x8);
    // private readonly VROSC.IState <To>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::IState* To;
    // Field size check
    static_assert(sizeof(::VROSC::IState*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Func`1<System.Boolean> <Condition>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Func_1<bool>*& dyn_$Condition$k__BackingField();
    // Get instance field reference: private readonly VROSC.IState <To>k__BackingField
    [[deprecated("Use field access instead!")]] ::VROSC::IState*& dyn_$To$k__BackingField();
    // public System.Func`1<System.Boolean> get_Condition()
    // Offset: 0x8DA5EC
    ::System::Func_1<bool>* get_Condition();
    // public VROSC.IState get_To()
    // Offset: 0x8DA5F4
    ::VROSC::IState* get_To();
    // public System.Void .ctor(VROSC.IState to, System.Func`1<System.Boolean> condition)
    // Offset: 0x8DA5FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StateMachine::Transition* New_ctor(::VROSC::IState* to, ::System::Func_1<bool>* condition) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::StateMachine::Transition::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StateMachine::Transition*, creationType>(to, condition)));
    }
  }; // VROSC.StateMachine/VROSC.Transition
  #pragma pack(pop)
  static check_size<sizeof(StateMachine::Transition), 24 + sizeof(::VROSC::IState*)> __VROSC_StateMachine_TransitionSizeCheck;
  static_assert(sizeof(StateMachine::Transition) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::StateMachine::Transition::get_Condition
// Il2CppName: get_Condition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Func_1<bool>* (VROSC::StateMachine::Transition::*)()>(&VROSC::StateMachine::Transition::get_Condition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::StateMachine::Transition*), "get_Condition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::StateMachine::Transition::get_To
// Il2CppName: get_To
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::IState* (VROSC::StateMachine::Transition::*)()>(&VROSC::StateMachine::Transition::get_To)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::StateMachine::Transition*), "get_To", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::StateMachine::Transition::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
