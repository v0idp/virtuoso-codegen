// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.SignalNode
#include "VROSC/SignalNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: FloatField
  class FloatField;
  // Forward declaring type: Signal
  class Signal;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ShaderFloatOnSignal
  class ShaderFloatOnSignal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ShaderFloatOnSignal);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ShaderFloatOnSignal*, "VROSC", "ShaderFloatOnSignal");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ShaderFloatOnSignal
  // [TokenAttribute] Offset: FFFFFFFF
  class ShaderFloatOnSignal : public ::VROSC::SignalNode {
    public:
    public:
    // private UnityEngine.Renderer _outputRenderer
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Renderer* outputRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private System.String _valueName
    // Size: 0x8
    // Offset: 0x48
    ::StringW valueName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private VROSC.FloatField _startValue
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::FloatField* startValue;
    // Field size check
    static_assert(sizeof(::VROSC::FloatField*) == 0x8);
    // private UnityEngine.Material _materialInstance
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Material* materialInstance;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Renderer _outputRenderer
    [[deprecated]] ::UnityEngine::Renderer*& dyn__outputRenderer();
    // Get instance field reference: private System.String _valueName
    [[deprecated]] ::StringW& dyn__valueName();
    // Get instance field reference: private VROSC.FloatField _startValue
    [[deprecated]] ::VROSC::FloatField*& dyn__startValue();
    // Get instance field reference: private UnityEngine.Material _materialInstance
    [[deprecated]] ::UnityEngine::Material*& dyn__materialInstance();
    // protected System.Void Awake()
    // Offset: 0x1926F88
    void Awake();
    // private System.Void TurnOn(VROSC.Signal signal)
    // Offset: 0x1927010
    void TurnOn(::VROSC::Signal* signal);
    // private System.Void StayOn(VROSC.Signal signal)
    // Offset: 0x1927040
    void StayOn(::VROSC::Signal* signal);
    // private System.Void SetValue(System.Single value)
    // Offset: 0x1926FD4
    void SetValue(float value);
    // public System.Void .ctor()
    // Offset: 0x1927058
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ShaderFloatOnSignal* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ShaderFloatOnSignal::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ShaderFloatOnSignal*, creationType>()));
    }
    // protected override System.Void NodeBegin(VROSC.Signal signal)
    // Offset: 0x1926FF8
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeBegin(VROSC.Signal signal)
    void NodeBegin(::VROSC::Signal* signal);
    // protected override System.Void NodeStay(VROSC.Signal signal)
    // Offset: 0x1927028
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeStay(VROSC.Signal signal)
    void NodeStay(::VROSC::Signal* signal);
  }; // VROSC.ShaderFloatOnSignal
  #pragma pack(pop)
  static check_size<sizeof(ShaderFloatOnSignal), 88 + sizeof(::UnityEngine::Material*)> __VROSC_ShaderFloatOnSignalSizeCheck;
  static_assert(sizeof(ShaderFloatOnSignal) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ShaderFloatOnSignal::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ShaderFloatOnSignal::*)()>(&VROSC::ShaderFloatOnSignal::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ShaderFloatOnSignal*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ShaderFloatOnSignal::TurnOn
// Il2CppName: TurnOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ShaderFloatOnSignal::*)(::VROSC::Signal*)>(&VROSC::ShaderFloatOnSignal::TurnOn)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ShaderFloatOnSignal*), "TurnOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::ShaderFloatOnSignal::StayOn
// Il2CppName: StayOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ShaderFloatOnSignal::*)(::VROSC::Signal*)>(&VROSC::ShaderFloatOnSignal::StayOn)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ShaderFloatOnSignal*), "StayOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::ShaderFloatOnSignal::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ShaderFloatOnSignal::*)(float)>(&VROSC::ShaderFloatOnSignal::SetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ShaderFloatOnSignal*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::ShaderFloatOnSignal::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::ShaderFloatOnSignal::NodeBegin
// Il2CppName: NodeBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ShaderFloatOnSignal::*)(::VROSC::Signal*)>(&VROSC::ShaderFloatOnSignal::NodeBegin)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ShaderFloatOnSignal*), "NodeBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::ShaderFloatOnSignal::NodeStay
// Il2CppName: NodeStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ShaderFloatOnSignal::*)(::VROSC::Signal*)>(&VROSC::ShaderFloatOnSignal::NodeStay)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ShaderFloatOnSignal*), "NodeStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
