// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Skipping declaration: PreviewSource because it is already included!
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: Session
  class Session;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::Session);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::Session*, "VROSC", "Session");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.Session
  // [TokenAttribute] Offset: FFFFFFFF
  class Session : public ::Il2CppObject {
    public:
    // Nested type: ::VROSC::Session::PreviewSource
    struct PreviewSource;
    // Nested type: ::VROSC::Session::Contributor
    class Contributor;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: VROSC.Session/VROSC.PreviewSource
    // [TokenAttribute] Offset: FFFFFFFF
    struct PreviewSource/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: PreviewSource
      constexpr PreviewSource(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public VROSC.Session/VROSC.PreviewSource None
      static constexpr const int None = 0;
      // Get static field: static public VROSC.Session/VROSC.PreviewSource None
      static ::VROSC::Session::PreviewSource _get_None();
      // Set static field: static public VROSC.Session/VROSC.PreviewSource None
      static void _set_None(::VROSC::Session::PreviewSource value);
      // static field const value: static public VROSC.Session/VROSC.PreviewSource Looper
      static constexpr const int Looper = 1;
      // Get static field: static public VROSC.Session/VROSC.PreviewSource Looper
      static ::VROSC::Session::PreviewSource _get_Looper();
      // Set static field: static public VROSC.Session/VROSC.PreviewSource Looper
      static void _set_Looper(::VROSC::Session::PreviewSource value);
      // static field const value: static public VROSC.Session/VROSC.PreviewSource TapeRecorder
      static constexpr const int TapeRecorder = 2;
      // Get static field: static public VROSC.Session/VROSC.PreviewSource TapeRecorder
      static ::VROSC::Session::PreviewSource _get_TapeRecorder();
      // Set static field: static public VROSC.Session/VROSC.PreviewSource TapeRecorder
      static void _set_TapeRecorder(::VROSC::Session::PreviewSource value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // VROSC.Session/VROSC.PreviewSource
    #pragma pack(pop)
    static check_size<sizeof(Session::PreviewSource), 0 + sizeof(int)> __VROSC_Session_PreviewSourceSizeCheck;
    static_assert(sizeof(Session::PreviewSource) == 0x4);
    public:
    // public System.Int32 Version
    // Size: 0x4
    // Offset: 0x10
    int Version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Version and: SessionName
    char __padding0[0x4] = {};
    // public System.String SessionName
    // Size: 0x8
    // Offset: 0x18
    ::StringW SessionName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String SessionId
    // Size: 0x8
    // Offset: 0x20
    ::StringW SessionId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String DisplayName
    // Size: 0x8
    // Offset: 0x28
    ::StringW DisplayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String AuthorName
    // Size: 0x8
    // Offset: 0x30
    ::StringW AuthorName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String PlatformName
    // Size: 0x8
    // Offset: 0x38
    ::StringW PlatformName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Date
    // Size: 0x8
    // Offset: 0x40
    ::StringW Date;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 TrackCount
    // Size: 0x4
    // Offset: 0x48
    int TrackCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean HasPreview
    // Size: 0x1
    // Offset: 0x4C
    bool HasPreview;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: HasPreview and: PreviewNormalizeMultiplier
    char __padding8[0x3] = {};
    // public System.Single PreviewNormalizeMultiplier
    // Size: 0x4
    // Offset: 0x50
    float PreviewNormalizeMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public VROSC.Session/VROSC.PreviewSource PreviewType
    // Size: 0x4
    // Offset: 0x54
    ::VROSC::Session::PreviewSource PreviewType;
    // Field size check
    static_assert(sizeof(::VROSC::Session::PreviewSource) == 0x4);
    // public System.String Description
    // Size: 0x8
    // Offset: 0x58
    ::StringW Description;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 UpVotesCount
    // Size: 0x4
    // Offset: 0x60
    int UpVotesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 FavoritesCount
    // Size: 0x4
    // Offset: 0x64
    int FavoritesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 DownloadsCount
    // Size: 0x4
    // Offset: 0x68
    int DownloadsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PreviewPlaysCount
    // Size: 0x4
    // Offset: 0x6C
    int PreviewPlaysCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Collections.Generic.List`1<System.String> Tags
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::StringW>* Tags;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public System.Collections.Generic.List`1<VROSC.Session/VROSC.Contributor> Contributors
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::VROSC::Session::Contributor*>* Contributors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::Session::Contributor*>*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 Version
    [[deprecated("Use field access instead!")]] int& dyn_Version();
    // Get instance field reference: public System.String SessionName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_SessionName();
    // Get instance field reference: public System.String SessionId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_SessionId();
    // Get instance field reference: public System.String DisplayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_DisplayName();
    // Get instance field reference: public System.String AuthorName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_AuthorName();
    // Get instance field reference: public System.String PlatformName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_PlatformName();
    // Get instance field reference: public System.String Date
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Date();
    // Get instance field reference: public System.Int32 TrackCount
    [[deprecated("Use field access instead!")]] int& dyn_TrackCount();
    // Get instance field reference: public System.Boolean HasPreview
    [[deprecated("Use field access instead!")]] bool& dyn_HasPreview();
    // Get instance field reference: public System.Single PreviewNormalizeMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_PreviewNormalizeMultiplier();
    // Get instance field reference: public VROSC.Session/VROSC.PreviewSource PreviewType
    [[deprecated("Use field access instead!")]] ::VROSC::Session::PreviewSource& dyn_PreviewType();
    // Get instance field reference: public System.String Description
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Description();
    // Get instance field reference: public System.Int32 UpVotesCount
    [[deprecated("Use field access instead!")]] int& dyn_UpVotesCount();
    // Get instance field reference: public System.Int32 FavoritesCount
    [[deprecated("Use field access instead!")]] int& dyn_FavoritesCount();
    // Get instance field reference: public System.Int32 DownloadsCount
    [[deprecated("Use field access instead!")]] int& dyn_DownloadsCount();
    // Get instance field reference: public System.Int32 PreviewPlaysCount
    [[deprecated("Use field access instead!")]] int& dyn_PreviewPlaysCount();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> Tags
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_Tags();
    // Get instance field reference: public System.Collections.Generic.List`1<VROSC.Session/VROSC.Contributor> Contributors
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VROSC::Session::Contributor*>*& dyn_Contributors();
    // public System.Void .ctor()
    // Offset: 0x1985480
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Session* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::Session::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Session*, creationType>()));
    }
    // public VROSC.Session Clone()
    // Offset: 0x1985210
    ::VROSC::Session* Clone();
    // public System.Void SetHasPreview(System.Boolean hasPreview, System.Single multiplier, VROSC.Session/VROSC.PreviewSource previewSource)
    // Offset: 0x198546C
    void SetHasPreview(bool hasPreview, float multiplier, ::VROSC::Session::PreviewSource previewSource);
  }; // VROSC.Session
  #pragma pack(pop)
  static check_size<sizeof(Session), 120 + sizeof(::System::Collections::Generic::List_1<::VROSC::Session::Contributor*>*)> __VROSC_SessionSizeCheck;
  static_assert(sizeof(Session) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::Session::PreviewSource, "VROSC", "Session/PreviewSource");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::Session::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::Session::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Session* (VROSC::Session::*)()>(&VROSC::Session::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Session*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Session::SetHasPreview
// Il2CppName: SetHasPreview
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Session::*)(bool, float, ::VROSC::Session::PreviewSource)>(&VROSC::Session::SetHasPreview)> {
  static const MethodInfo* get() {
    static auto* hasPreview = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* multiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* previewSource = &::il2cpp_utils::GetClassFromName("VROSC", "Session/PreviewSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Session*), "SetHasPreview", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hasPreview, multiplier, previewSource});
  }
};
