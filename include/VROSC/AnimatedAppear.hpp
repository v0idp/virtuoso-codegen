// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: AnimatedAppearSettings
  class AnimatedAppearSettings;
  // Forward declaring type: TimelinePlaybackHelper
  class TimelinePlaybackHelper;
  // Forward declaring type: AnimatedAppearData
  class AnimatedAppearData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: AnimatedAppear
  class AnimatedAppear;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AnimatedAppear);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AnimatedAppear*, "VROSC", "AnimatedAppear");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x5F
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AnimatedAppear
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 780788
  class AnimatedAppear : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::AnimatedAppear::Mode
    struct Mode;
    public:
    // private System.Single _move
    // Size: 0x4
    // Offset: 0x18
    float move;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: move and: enter
    char __padding0[0x4] = {};
    // private VROSC.AnimatedAppearSettings _enter
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::AnimatedAppearSettings* enter;
    // Field size check
    static_assert(sizeof(::VROSC::AnimatedAppearSettings*) == 0x8);
    // private VROSC.AnimatedAppearSettings _exit
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::AnimatedAppearSettings* exit;
    // Field size check
    static_assert(sizeof(::VROSC::AnimatedAppearSettings*) == 0x8);
    // private UnityEngine.RectTransform _rectTransform
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::RectTransform* rectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private System.Boolean _forceLayoutUpdate
    // Size: 0x1
    // Offset: 0x38
    bool forceLayoutUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: forceLayoutUpdate and: playbackHelper
    char __padding4[0x7] = {};
    // private VROSC.TimelinePlaybackHelper _playbackHelper
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::TimelinePlaybackHelper* playbackHelper;
    // Field size check
    static_assert(sizeof(::VROSC::TimelinePlaybackHelper*) == 0x8);
    // private VROSC.AnimatedAppearData _data
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::AnimatedAppearData* data;
    // Field size check
    static_assert(sizeof(::VROSC::AnimatedAppearData*) == 0x8);
    // private UnityEngine.Vector3 _startPosition
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 startPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean _startPositionSet
    // Size: 0x1
    // Offset: 0x5C
    bool startPositionSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _startAnimationPlaying
    // Size: 0x1
    // Offset: 0x5D
    bool startAnimationPlaying;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _setupDone
    // Size: 0x1
    // Offset: 0x5E
    bool setupDone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single _move
    [[deprecated("Use field access instead!")]] float& dyn__move();
    // Get instance field reference: private VROSC.AnimatedAppearSettings _enter
    [[deprecated("Use field access instead!")]] ::VROSC::AnimatedAppearSettings*& dyn__enter();
    // Get instance field reference: private VROSC.AnimatedAppearSettings _exit
    [[deprecated("Use field access instead!")]] ::VROSC::AnimatedAppearSettings*& dyn__exit();
    // Get instance field reference: private UnityEngine.RectTransform _rectTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__rectTransform();
    // Get instance field reference: private System.Boolean _forceLayoutUpdate
    [[deprecated("Use field access instead!")]] bool& dyn__forceLayoutUpdate();
    // Get instance field reference: private VROSC.TimelinePlaybackHelper _playbackHelper
    [[deprecated("Use field access instead!")]] ::VROSC::TimelinePlaybackHelper*& dyn__playbackHelper();
    // Get instance field reference: private VROSC.AnimatedAppearData _data
    [[deprecated("Use field access instead!")]] ::VROSC::AnimatedAppearData*& dyn__data();
    // Get instance field reference: private UnityEngine.Vector3 _startPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__startPosition();
    // Get instance field reference: private System.Boolean _startPositionSet
    [[deprecated("Use field access instead!")]] bool& dyn__startPositionSet();
    // Get instance field reference: private System.Boolean _startAnimationPlaying
    [[deprecated("Use field access instead!")]] bool& dyn__startAnimationPlaying();
    // Get instance field reference: private System.Boolean _setupDone
    [[deprecated("Use field access instead!")]] bool& dyn__setupDone();
    // public VROSC.AnimatedAppearSettings get_Enter()
    // Offset: 0x969204
    ::VROSC::AnimatedAppearSettings* get_Enter();
    // public VROSC.AnimatedAppearSettings get_Exit()
    // Offset: 0x96920C
    ::VROSC::AnimatedAppearSettings* get_Exit();
    // public System.Boolean get_IsAnimating()
    // Offset: 0x969214
    bool get_IsAnimating();
    // public System.Void .ctor()
    // Offset: 0x96A0FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AnimatedAppear* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppear::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AnimatedAppear*, creationType>()));
    }
    // private System.Void OnDestroy()
    // Offset: 0x9692F0
    void OnDestroy();
    // public System.Void Setup()
    // Offset: 0x9693B8
    void Setup();
    // private System.Void FixLayoutGroups()
    // Offset: 0x9696E0
    void FixLayoutGroups();
    // public System.Void UpdateAppearAmount(System.Single amount, VROSC.AnimatedAppear/VROSC.Mode mode, System.Boolean useFlash, System.Boolean force)
    // Offset: 0x969838
    void UpdateAppearAmount(float amount, ::VROSC::AnimatedAppear::Mode mode, bool useFlash, bool force);
    // public System.Void Play(System.Boolean playEnterAnimation)
    // Offset: 0x9699BC
    void Play(bool playEnterAnimation);
    // private System.Void Update()
    // Offset: 0x969B30
    void Update();
    // public System.Void Stop()
    // Offset: 0x969B4C
    void Stop();
    // private System.Void AnimationHasFinished()
    // Offset: 0x969BF0
    void AnimationHasFinished();
    // private System.Void OnEnable()
    // Offset: 0x969C40
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x969C48
    void OnDisable();
    // public System.Void SetAppearActive(System.Boolean appearing)
    // Offset: 0x969C70
    void SetAppearActive(bool appearing);
    // public System.Void Clear()
    // Offset: 0x969C5C
    void Clear();
    // System.ValueTuple`2<UnityEngine.Vector3,UnityEngine.Vector3> GetMovementData(System.Boolean enter)
    // Offset: 0x969C8C
    ::System::ValueTuple_2<::UnityEngine::Vector3, ::UnityEngine::Vector3> GetMovementData(bool enter);
    // private System.Void OnDrawGizmos()
    // Offset: 0x969DAC
    void OnDrawGizmos();
    // public System.Void EditorUnloadDirector()
    // Offset: 0x969EA4
    void EditorUnloadDirector();
    // public System.Void EditorLoadDirector(System.Boolean enter)
    // Offset: 0x96A0B8
    void EditorLoadDirector(bool enter);
  }; // VROSC.AnimatedAppear
  #pragma pack(pop)
  static check_size<sizeof(AnimatedAppear), 94 + sizeof(bool)> __VROSC_AnimatedAppearSizeCheck;
  static_assert(sizeof(AnimatedAppear) == 0x5F);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AnimatedAppear::get_Enter
// Il2CppName: get_Enter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::AnimatedAppearSettings* (VROSC::AnimatedAppear::*)()>(&VROSC::AnimatedAppear::get_Enter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "get_Enter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppear::get_Exit
// Il2CppName: get_Exit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::AnimatedAppearSettings* (VROSC::AnimatedAppear::*)()>(&VROSC::AnimatedAppear::get_Exit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "get_Exit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppear::get_IsAnimating
// Il2CppName: get_IsAnimating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::AnimatedAppear::*)()>(&VROSC::AnimatedAppear::get_IsAnimating)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "get_IsAnimating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppear::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::AnimatedAppear::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppear::*)()>(&VROSC::AnimatedAppear::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppear::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppear::*)()>(&VROSC::AnimatedAppear::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppear::FixLayoutGroups
// Il2CppName: FixLayoutGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppear::*)()>(&VROSC::AnimatedAppear::FixLayoutGroups)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "FixLayoutGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppear::UpdateAppearAmount
// Il2CppName: UpdateAppearAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppear::*)(float, ::VROSC::AnimatedAppear::Mode, bool, bool)>(&VROSC::AnimatedAppear::UpdateAppearAmount)> {
  static const MethodInfo* get() {
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("VROSC", "AnimatedAppear/Mode")->byval_arg;
    static auto* useFlash = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "UpdateAppearAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{amount, mode, useFlash, force});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppear::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppear::*)(bool)>(&VROSC::AnimatedAppear::Play)> {
  static const MethodInfo* get() {
    static auto* playEnterAnimation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playEnterAnimation});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppear::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppear::*)()>(&VROSC::AnimatedAppear::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppear::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppear::*)()>(&VROSC::AnimatedAppear::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppear::AnimationHasFinished
// Il2CppName: AnimationHasFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppear::*)()>(&VROSC::AnimatedAppear::AnimationHasFinished)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "AnimationHasFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppear::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppear::*)()>(&VROSC::AnimatedAppear::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppear::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppear::*)()>(&VROSC::AnimatedAppear::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppear::SetAppearActive
// Il2CppName: SetAppearActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppear::*)(bool)>(&VROSC::AnimatedAppear::SetAppearActive)> {
  static const MethodInfo* get() {
    static auto* appearing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "SetAppearActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{appearing});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppear::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppear::*)()>(&VROSC::AnimatedAppear::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppear::GetMovementData
// Il2CppName: GetMovementData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::UnityEngine::Vector3, ::UnityEngine::Vector3> (VROSC::AnimatedAppear::*)(bool)>(&VROSC::AnimatedAppear::GetMovementData)> {
  static const MethodInfo* get() {
    static auto* enter = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "GetMovementData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enter});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppear::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppear::*)()>(&VROSC::AnimatedAppear::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppear::EditorUnloadDirector
// Il2CppName: EditorUnloadDirector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppear::*)()>(&VROSC::AnimatedAppear::EditorUnloadDirector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "EditorUnloadDirector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppear::EditorLoadDirector
// Il2CppName: EditorLoadDirector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppear::*)(bool)>(&VROSC::AnimatedAppear::EditorLoadDirector)> {
  static const MethodInfo* get() {
    static auto* enter = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppear*), "EditorLoadDirector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enter});
  }
};
