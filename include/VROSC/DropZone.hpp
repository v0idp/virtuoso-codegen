// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Droppable
  class Droppable;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: DropZone
  class DropZone;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::DropZone);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::DropZone*, "VROSC", "DropZone");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.DropZone
  // [TokenAttribute] Offset: FFFFFFFF
  class DropZone : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Action`1<VROSC.Droppable> OnDroppedInto
    // Size: 0x8
    // Offset: 0x18
    ::System::Action_1<::VROSC::Droppable*>* OnDroppedInto;
    // Field size check
    static_assert(sizeof(::System::Action_1<::VROSC::Droppable*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Action`1<VROSC.Droppable> OnDroppedInto
    [[deprecated("Use field access instead!")]] ::System::Action_1<::VROSC::Droppable*>*& dyn_OnDroppedInto();
    // public System.Void .ctor()
    // Offset: 0x8E5458
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DropZone* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::DropZone::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DropZone*, creationType>()));
    }
    // public System.Void Drop(VROSC.Droppable droppable)
    // Offset: 0x8E53E8
    void Drop(::VROSC::Droppable* droppable);
  }; // VROSC.DropZone
  #pragma pack(pop)
  static check_size<sizeof(DropZone), 24 + sizeof(::System::Action_1<::VROSC::Droppable*>*)> __VROSC_DropZoneSizeCheck;
  static_assert(sizeof(DropZone) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::DropZone::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::DropZone::Drop
// Il2CppName: Drop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DropZone::*)(::VROSC::Droppable*)>(&VROSC::DropZone::Drop)> {
  static const MethodInfo* get() {
    static auto* droppable = &::il2cpp_utils::GetClassFromName("VROSC", "Droppable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DropZone*), "Drop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{droppable});
  }
};
