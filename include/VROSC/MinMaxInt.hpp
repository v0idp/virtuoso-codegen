// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: MinMaxInt
  class MinMaxInt;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::MinMaxInt);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::MinMaxInt*, "VROSC", "MinMaxInt");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.MinMaxInt
  // [TokenAttribute] Offset: FFFFFFFF
  class MinMaxInt : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 _min
    // Size: 0x4
    // Offset: 0x10
    int min;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _max
    // Size: 0x4
    // Offset: 0x14
    int max;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Int32 _min
    [[deprecated]] int& dyn__min();
    // Get instance field reference: private System.Int32 _max
    [[deprecated]] int& dyn__max();
    // public System.Int32 get_Min()
    // Offset: 0xAC8AA8
    int get_Min();
    // public System.Int32 get_Max()
    // Offset: 0xAC8AB0
    int get_Max();
    // public System.Void .ctor(System.Int32 min, System.Int32 max)
    // Offset: 0xAC4708
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MinMaxInt* New_ctor(int min, int max) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MinMaxInt::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MinMaxInt*, creationType>(min, max)));
    }
    // public System.Int32 Random()
    // Offset: 0xAC8AB8
    int Random();
  }; // VROSC.MinMaxInt
  #pragma pack(pop)
  static check_size<sizeof(MinMaxInt), 20 + sizeof(int)> __VROSC_MinMaxIntSizeCheck;
  static_assert(sizeof(MinMaxInt) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::MinMaxInt::get_Min
// Il2CppName: get_Min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::MinMaxInt::*)()>(&VROSC::MinMaxInt::get_Min)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MinMaxInt*), "get_Min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MinMaxInt::get_Max
// Il2CppName: get_Max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::MinMaxInt::*)()>(&VROSC::MinMaxInt::get_Max)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MinMaxInt*), "get_Max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MinMaxInt::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::MinMaxInt::Random
// Il2CppName: Random
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::MinMaxInt::*)()>(&VROSC::MinMaxInt::Random)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MinMaxInt*), "Random", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
