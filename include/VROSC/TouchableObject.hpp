// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.NoteBoard
#include "VROSC/NoteBoard.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Skipping declaration: NoteBoardNote because it is already included!
  // Forward declaring type: NoteFieldParameters
  class NoteFieldParameters;
  // Forward declaring type: NoteFieldData
  class NoteFieldData;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TouchableObject
  class TouchableObject;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TouchableObject);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TouchableObject*, "VROSC", "TouchableObject");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x74
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TouchableObject
  // [TokenAttribute] Offset: FFFFFFFF
  class TouchableObject : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.NoteBoardNote _note
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::NoteBoardNote* note;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoardNote*) == 0x8);
    // private VROSC.NoteBoardNote _xUp
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::NoteBoardNote* xUp;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoardNote*) == 0x8);
    // private VROSC.NoteBoardNote _xDown
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::NoteBoardNote* xDown;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoardNote*) == 0x8);
    // private VROSC.NoteBoardNote _yUp
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::NoteBoardNote* yUp;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoardNote*) == 0x8);
    // private VROSC.NoteBoardNote _yDown
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::NoteBoardNote* yDown;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoardNote*) == 0x8);
    // private VROSC.NoteBoardNote _zUp
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::NoteBoardNote* zUp;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoardNote*) == 0x8);
    // private VROSC.NoteBoardNote _zDown
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::NoteBoardNote* zDown;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoardNote*) == 0x8);
    // private System.Int32 _x
    // Size: 0x4
    // Offset: 0x50
    int x;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _y
    // Size: 0x4
    // Offset: 0x54
    int y;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _z
    // Size: 0x4
    // Offset: 0x58
    int z;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _3d
    // Size: 0x4
    // Offset: 0x5C
    int _3d;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 _playingPower
    // Size: 0xC
    // Offset: 0x60
    ::UnityEngine::Vector3 playingPower;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean _playing
    // Size: 0x1
    // Offset: 0x6C
    bool playing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: playing and: height
    char __padding12[0x3] = {};
    // private System.Single _height
    // Size: 0x4
    // Offset: 0x70
    float height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.NoteBoardNote _note
    [[deprecated]] ::VROSC::NoteBoardNote*& dyn__note();
    // Get instance field reference: private VROSC.NoteBoardNote _xUp
    [[deprecated]] ::VROSC::NoteBoardNote*& dyn__xUp();
    // Get instance field reference: private VROSC.NoteBoardNote _xDown
    [[deprecated]] ::VROSC::NoteBoardNote*& dyn__xDown();
    // Get instance field reference: private VROSC.NoteBoardNote _yUp
    [[deprecated]] ::VROSC::NoteBoardNote*& dyn__yUp();
    // Get instance field reference: private VROSC.NoteBoardNote _yDown
    [[deprecated]] ::VROSC::NoteBoardNote*& dyn__yDown();
    // Get instance field reference: private VROSC.NoteBoardNote _zUp
    [[deprecated]] ::VROSC::NoteBoardNote*& dyn__zUp();
    // Get instance field reference: private VROSC.NoteBoardNote _zDown
    [[deprecated]] ::VROSC::NoteBoardNote*& dyn__zDown();
    // Get instance field reference: private System.Int32 _x
    [[deprecated]] int& dyn__x();
    // Get instance field reference: private System.Int32 _y
    [[deprecated]] int& dyn__y();
    // Get instance field reference: private System.Int32 _z
    [[deprecated]] int& dyn__z();
    // Get instance field reference: private System.Int32 _3d
    [[deprecated]] int& dyn__3d();
    // Get instance field reference: private UnityEngine.Vector3 _playingPower
    [[deprecated]] ::UnityEngine::Vector3& dyn__playingPower();
    // Get instance field reference: private System.Boolean _playing
    [[deprecated]] bool& dyn__playing();
    // Get instance field reference: private System.Single _height
    [[deprecated]] float& dyn__height();
    // public VROSC.NoteBoardNote get_Note()
    // Offset: 0xA28E24
    ::VROSC::NoteBoardNote* get_Note();
    // public System.Void Setup(VROSC.NoteFieldParameters parameters, VROSC.NoteFieldData noteFieldData, UnityEngine.Vector3 fieldSize)
    // Offset: 0xA28E2C
    void Setup(::VROSC::NoteFieldParameters* parameters, ::VROSC::NoteFieldData* noteFieldData, ::UnityEngine::Vector3 fieldSize);
    // public System.Void UpdateHovering(System.Boolean isInside)
    // Offset: 0xA2923C
    void UpdateHovering(bool isInside);
    // public System.Void UpdatePlaying(System.Boolean isInside, System.Boolean playing, VROSC.NoteBoard/VROSC.PlayAxis playAxis)
    // Offset: 0xA29264
    void UpdatePlaying(bool isInside, bool playing, ::VROSC::NoteBoard::PlayAxis playAxis);
    // public System.Void SetHeight(System.Single height)
    // Offset: 0xA29308
    void SetHeight(float height);
    // public System.Void UpdateVisuals()
    // Offset: 0xA29310
    void UpdateVisuals();
    // private System.Void AutoSetup()
    // Offset: 0xA293EC
    void AutoSetup();
    // private System.Void AutoSetupNeighbours()
    // Offset: 0xA29440
    void AutoSetupNeighbours();
    // private System.Void OnDrawGizmosSelected()
    // Offset: 0xA29730
    void OnDrawGizmosSelected();
    // public System.Void .ctor()
    // Offset: 0xA29B1C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TouchableObject* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TouchableObject::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TouchableObject*, creationType>()));
    }
  }; // VROSC.TouchableObject
  #pragma pack(pop)
  static check_size<sizeof(TouchableObject), 112 + sizeof(float)> __VROSC_TouchableObjectSizeCheck;
  static_assert(sizeof(TouchableObject) == 0x74);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TouchableObject::get_Note
// Il2CppName: get_Note
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::NoteBoardNote* (VROSC::TouchableObject::*)()>(&VROSC::TouchableObject::get_Note)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TouchableObject*), "get_Note", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TouchableObject::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TouchableObject::*)(::VROSC::NoteFieldParameters*, ::VROSC::NoteFieldData*, ::UnityEngine::Vector3)>(&VROSC::TouchableObject::Setup)> {
  static const MethodInfo* get() {
    static auto* parameters = &::il2cpp_utils::GetClassFromName("VROSC", "NoteFieldParameters")->byval_arg;
    static auto* noteFieldData = &::il2cpp_utils::GetClassFromName("VROSC", "NoteFieldData")->byval_arg;
    static auto* fieldSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TouchableObject*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameters, noteFieldData, fieldSize});
  }
};
// Writing MetadataGetter for method: VROSC::TouchableObject::UpdateHovering
// Il2CppName: UpdateHovering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TouchableObject::*)(bool)>(&VROSC::TouchableObject::UpdateHovering)> {
  static const MethodInfo* get() {
    static auto* isInside = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TouchableObject*), "UpdateHovering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isInside});
  }
};
// Writing MetadataGetter for method: VROSC::TouchableObject::UpdatePlaying
// Il2CppName: UpdatePlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TouchableObject::*)(bool, bool, ::VROSC::NoteBoard::PlayAxis)>(&VROSC::TouchableObject::UpdatePlaying)> {
  static const MethodInfo* get() {
    static auto* isInside = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* playing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* playAxis = &::il2cpp_utils::GetClassFromName("VROSC", "NoteBoard/PlayAxis")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TouchableObject*), "UpdatePlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isInside, playing, playAxis});
  }
};
// Writing MetadataGetter for method: VROSC::TouchableObject::SetHeight
// Il2CppName: SetHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TouchableObject::*)(float)>(&VROSC::TouchableObject::SetHeight)> {
  static const MethodInfo* get() {
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TouchableObject*), "SetHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{height});
  }
};
// Writing MetadataGetter for method: VROSC::TouchableObject::UpdateVisuals
// Il2CppName: UpdateVisuals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TouchableObject::*)()>(&VROSC::TouchableObject::UpdateVisuals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TouchableObject*), "UpdateVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TouchableObject::AutoSetup
// Il2CppName: AutoSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TouchableObject::*)()>(&VROSC::TouchableObject::AutoSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TouchableObject*), "AutoSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TouchableObject::AutoSetupNeighbours
// Il2CppName: AutoSetupNeighbours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TouchableObject::*)()>(&VROSC::TouchableObject::AutoSetupNeighbours)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TouchableObject*), "AutoSetupNeighbours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TouchableObject::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TouchableObject::*)()>(&VROSC::TouchableObject::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TouchableObject*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TouchableObject::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
