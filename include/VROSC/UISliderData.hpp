// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: MinMaxFloat
  class MinMaxFloat;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: UISliderData
  class UISliderData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UISliderData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UISliderData*, "VROSC", "UISliderData");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x26
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UISliderData
  // [TokenAttribute] Offset: FFFFFFFF
  class UISliderData : public ::Il2CppObject {
    public:
    public:
    // private System.String _valueName
    // Size: 0x8
    // Offset: 0x10
    ::StringW valueName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private VROSC.MinMaxFloat _valueRange
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::MinMaxFloat* valueRange;
    // Field size check
    static_assert(sizeof(::VROSC::MinMaxFloat*) == 0x8);
    // [RangeAttribute] Offset: 0x789FEC
    // private System.Int32 _precission
    // Size: 0x4
    // Offset: 0x20
    int precission;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _canBeSetToInteger
    // Size: 0x1
    // Offset: 0x24
    bool canBeSetToInteger;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isInIntegerMode
    // Size: 0x1
    // Offset: 0x25
    bool isInIntegerMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.String _valueName
    [[deprecated]] ::StringW& dyn__valueName();
    // Get instance field reference: private VROSC.MinMaxFloat _valueRange
    [[deprecated]] ::VROSC::MinMaxFloat*& dyn__valueRange();
    // Get instance field reference: private System.Int32 _precission
    [[deprecated]] int& dyn__precission();
    // Get instance field reference: private System.Boolean _canBeSetToInteger
    [[deprecated]] bool& dyn__canBeSetToInteger();
    // Get instance field reference: private System.Boolean _isInIntegerMode
    [[deprecated]] bool& dyn__isInIntegerMode();
    // public System.String get_ValueName()
    // Offset: 0x191728C
    ::StringW get_ValueName();
    // public VROSC.MinMaxFloat get_ValueRange()
    // Offset: 0x1917294
    ::VROSC::MinMaxFloat* get_ValueRange();
    // public System.String get_Precission()
    // Offset: 0x191729C
    ::StringW get_Precission();
    // public System.Boolean get_CanBeSetToInteger()
    // Offset: 0x1917324
    bool get_CanBeSetToInteger();
    // public System.Boolean get_IsIntegerMode()
    // Offset: 0x191732C
    bool get_IsIntegerMode();
    // public System.String ValueToString(System.Single value)
    // Offset: 0x1917334
    ::StringW ValueToString(float value);
    // public System.String MinToString()
    // Offset: 0x191742C
    ::StringW MinToString();
    // public System.String MaxToString()
    // Offset: 0x1917498
    ::StringW MaxToString();
    // public System.Void Set(System.String name, VROSC.MinMaxFloat range, System.Int32 precission, System.Boolean canBeSetToInteger)
    // Offset: 0x1917504
    void Set(::StringW name, ::VROSC::MinMaxFloat* range, int precission, bool canBeSetToInteger);
    // public System.Single GetValue(System.Single value)
    // Offset: 0x19173CC
    float GetValue(float value);
    // public System.Void SetIntegerMode(System.Boolean shouldBeInIntegerMode)
    // Offset: 0x1917518
    void SetIntegerMode(bool shouldBeInIntegerMode);
    // System.Void ToggleIntegerMode()
    // Offset: 0x1917524
    void ToggleIntegerMode();
    // public System.Void .ctor()
    // Offset: 0x191753C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UISliderData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UISliderData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UISliderData*, creationType>()));
    }
  }; // VROSC.UISliderData
  #pragma pack(pop)
  static check_size<sizeof(UISliderData), 37 + sizeof(bool)> __VROSC_UISliderDataSizeCheck;
  static_assert(sizeof(UISliderData) == 0x26);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UISliderData::get_ValueName
// Il2CppName: get_ValueName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::UISliderData::*)()>(&VROSC::UISliderData::get_ValueName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISliderData*), "get_ValueName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UISliderData::get_ValueRange
// Il2CppName: get_ValueRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::MinMaxFloat* (VROSC::UISliderData::*)()>(&VROSC::UISliderData::get_ValueRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISliderData*), "get_ValueRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UISliderData::get_Precission
// Il2CppName: get_Precission
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::UISliderData::*)()>(&VROSC::UISliderData::get_Precission)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISliderData*), "get_Precission", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UISliderData::get_CanBeSetToInteger
// Il2CppName: get_CanBeSetToInteger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::UISliderData::*)()>(&VROSC::UISliderData::get_CanBeSetToInteger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISliderData*), "get_CanBeSetToInteger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UISliderData::get_IsIntegerMode
// Il2CppName: get_IsIntegerMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::UISliderData::*)()>(&VROSC::UISliderData::get_IsIntegerMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISliderData*), "get_IsIntegerMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UISliderData::ValueToString
// Il2CppName: ValueToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::UISliderData::*)(float)>(&VROSC::UISliderData::ValueToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISliderData*), "ValueToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::UISliderData::MinToString
// Il2CppName: MinToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::UISliderData::*)()>(&VROSC::UISliderData::MinToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISliderData*), "MinToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UISliderData::MaxToString
// Il2CppName: MaxToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::UISliderData::*)()>(&VROSC::UISliderData::MaxToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISliderData*), "MaxToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UISliderData::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UISliderData::*)(::StringW, ::VROSC::MinMaxFloat*, int, bool)>(&VROSC::UISliderData::Set)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* range = &::il2cpp_utils::GetClassFromName("VROSC", "MinMaxFloat")->byval_arg;
    static auto* precission = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* canBeSetToInteger = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISliderData*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, range, precission, canBeSetToInteger});
  }
};
// Writing MetadataGetter for method: VROSC::UISliderData::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::UISliderData::*)(float)>(&VROSC::UISliderData::GetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISliderData*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::UISliderData::SetIntegerMode
// Il2CppName: SetIntegerMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UISliderData::*)(bool)>(&VROSC::UISliderData::SetIntegerMode)> {
  static const MethodInfo* get() {
    static auto* shouldBeInIntegerMode = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISliderData*), "SetIntegerMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shouldBeInIntegerMode});
  }
};
// Writing MetadataGetter for method: VROSC::UISliderData::ToggleIntegerMode
// Il2CppName: ToggleIntegerMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UISliderData::*)()>(&VROSC::UISliderData::ToggleIntegerMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISliderData*), "ToggleIntegerMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UISliderData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
