// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.WidgetSettings/VROSC.Identifier
#include "VROSC/WidgetSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: ExternalSynthesizer
  class ExternalSynthesizer;
  // Forward declaring type: InternalSynthesizer
  class InternalSynthesizer;
  // Forward declaring type: PatchSettings
  class PatchSettings;
  // Forward declaring type: HandType
  struct HandType;
  // Forward declaring type: UserDataControllers
  class UserDataControllers;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: MidiManager
  class MidiManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::MidiManager);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::MidiManager*, "VROSC", "MidiManager");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x32
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.MidiManager
  // [TokenAttribute] Offset: FFFFFFFF
  class MidiManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::MidiManager::ActiveNote
    class ActiveNote;
    // Nested type: ::VROSC::MidiManager::$Setup$d__17
    struct $Setup$d__17;
    // Nested type: ::VROSC::MidiManager::$$c__DisplayClass19_0
    class $$c__DisplayClass19_0;
    // Nested type: ::VROSC::MidiManager::$$c__DisplayClass20_0
    class $$c__DisplayClass20_0;
    // Nested type: ::VROSC::MidiManager::$$c__DisplayClass23_0
    class $$c__DisplayClass23_0;
    // Nested type: ::VROSC::MidiManager::$$c__DisplayClass26_0
    class $$c__DisplayClass26_0;
    public:
    // private VROSC.ExternalSynthesizer _externalSynthesizer
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::ExternalSynthesizer* externalSynthesizer;
    // Field size check
    static_assert(sizeof(::VROSC::ExternalSynthesizer*) == 0x8);
    // private VROSC.InternalSynthesizer _internalSynthesizer
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::InternalSynthesizer* internalSynthesizer;
    // Field size check
    static_assert(sizeof(::VROSC::InternalSynthesizer*) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.MidiManager/VROSC.ActiveNote> _activeNotes
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::VROSC::MidiManager::ActiveNote*>* activeNotes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::MidiManager::ActiveNote*>*) == 0x8);
    // private System.Boolean _retriggerExternalNotes
    // Size: 0x1
    // Offset: 0x30
    bool retriggerExternalNotes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IsReady>k__BackingField
    // Size: 0x1
    // Offset: 0x31
    bool IsReady;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public System.Action`1<System.Boolean> OnUseExternalSynthesizerChanged
    static ::System::Action_1<bool>* _get_OnUseExternalSynthesizerChanged();
    // Set static field: static public System.Action`1<System.Boolean> OnUseExternalSynthesizerChanged
    static void _set_OnUseExternalSynthesizerChanged(::System::Action_1<bool>* value);
    // Get static field: static public System.Action OnReset
    static ::System::Action* _get_OnReset();
    // Set static field: static public System.Action OnReset
    static void _set_OnReset(::System::Action* value);
    // Get static field: static public System.Action`2<VROSC.WidgetSettings/VROSC.Identifier,VROSC.PatchSettings> OnAnyNotePlayed
    static ::System::Action_2<::VROSC::WidgetSettings::Identifier, ::VROSC::PatchSettings*>* _get_OnAnyNotePlayed();
    // Set static field: static public System.Action`2<VROSC.WidgetSettings/VROSC.Identifier,VROSC.PatchSettings> OnAnyNotePlayed
    static void _set_OnAnyNotePlayed(::System::Action_2<::VROSC::WidgetSettings::Identifier, ::VROSC::PatchSettings*>* value);
    // Get instance field reference: private VROSC.ExternalSynthesizer _externalSynthesizer
    [[deprecated]] ::VROSC::ExternalSynthesizer*& dyn__externalSynthesizer();
    // Get instance field reference: private VROSC.InternalSynthesizer _internalSynthesizer
    [[deprecated]] ::VROSC::InternalSynthesizer*& dyn__internalSynthesizer();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.MidiManager/VROSC.ActiveNote> _activeNotes
    [[deprecated]] ::System::Collections::Generic::List_1<::VROSC::MidiManager::ActiveNote*>*& dyn__activeNotes();
    // Get instance field reference: private System.Boolean _retriggerExternalNotes
    [[deprecated]] bool& dyn__retriggerExternalNotes();
    // Get instance field reference: private System.Boolean <IsReady>k__BackingField
    [[deprecated]] bool& dyn_$IsReady$k__BackingField();
    // public VROSC.ExternalSynthesizer get_ExternalSynthesizer()
    // Offset: 0xAC7748
    ::VROSC::ExternalSynthesizer* get_ExternalSynthesizer();
    // public VROSC.InternalSynthesizer get_InternalSynthesizer()
    // Offset: 0xAC7750
    ::VROSC::InternalSynthesizer* get_InternalSynthesizer();
    // public System.Boolean get_IsReady()
    // Offset: 0xAC7758
    bool get_IsReady();
    // private System.Void set_IsReady(System.Boolean value)
    // Offset: 0xAC7760
    void set_IsReady(bool value);
    // protected System.Void Awake()
    // Offset: 0xAC776C
    void Awake();
    // public System.Void Setup()
    // Offset: 0xAC7858
    void Setup();
    // private System.Void OnDestroy()
    // Offset: 0xAC791C
    void OnDestroy();
    // public System.Void PlayNote(VROSC.WidgetSettings/VROSC.Identifier instrumentId, System.Int32 note, System.Single velocity, VROSC.PatchSettings patchSettings, System.Int32 channel, System.Object source, System.Double predictedDspTime, VROSC.HandType handType, System.Single pitch)
    // Offset: 0xAC7A08
    void PlayNote(::VROSC::WidgetSettings::Identifier instrumentId, int note, float velocity, ::VROSC::PatchSettings* patchSettings, int channel, ::Il2CppObject* source, double predictedDspTime, ::VROSC::HandType handType, float pitch);
    // public System.Void StopNote(System.Int32 note, VROSC.PatchSettings patchSettings, System.Int32 channel, System.Object source, VROSC.HandType handType)
    // Offset: 0xAC7EC0
    void StopNote(int note, ::VROSC::PatchSettings* patchSettings, int channel, ::Il2CppObject* source, ::VROSC::HandType handType);
    // private VROSC.MidiManager/VROSC.ActiveNote GetActiveNote(System.Int32 note, System.Object patch, System.Int32 channel, System.Object source)
    // Offset: 0xAC7D44
    ::VROSC::MidiManager::ActiveNote* GetActiveNote(int note, ::Il2CppObject* patch, int channel, ::Il2CppObject* source);
    // public System.Boolean IsPlaying()
    // Offset: 0xAC8114
    bool IsPlaying();
    // public System.Boolean IsPlaying(System.Object patch, System.Int32 channel)
    // Offset: 0xAC8168
    bool IsPlaying(::Il2CppObject* patch, int channel);
    // public System.Void SetMidiCC(System.Single midiCCValue, System.Int32 midiCC, VROSC.PatchSettings patchSettings, System.Int32 channel, System.Boolean sendToExternal, VROSC.HandType handType, System.Boolean saveToPatch)
    // Offset: 0xAC825C
    void SetMidiCC(float midiCCValue, int midiCC, ::VROSC::PatchSettings* patchSettings, int channel, bool sendToExternal, ::VROSC::HandType handType, bool saveToPatch);
    // public System.Void SetMidiPitchBend(System.Single pitchBendValue, VROSC.PatchSettings patchSettings, System.Int32 channel, System.Boolean sendToExternal, VROSC.HandType handType)
    // Offset: 0xAC83A0
    void SetMidiPitchBend(float pitchBendValue, ::VROSC::PatchSettings* patchSettings, int channel, bool sendToExternal, ::VROSC::HandType handType);
    // public System.Void AllNotesOff(System.Object patch, System.Int32 channel)
    // Offset: 0xAC84C0
    void AllNotesOff(::Il2CppObject* patch, int channel);
    // public System.Void AllNotesOff()
    // Offset: 0xAC861C
    void AllNotesOff();
    // public System.Void ToggleInternalExternalSynthesizer()
    // Offset: 0xAC86D0
    void ToggleInternalExternalSynthesizer();
    // private System.Void SetUseExternalSynthesizer(System.Boolean useExternal)
    // Offset: 0xAC8744
    void SetUseExternalSynthesizer(bool useExternal);
    // private System.Void UserDataLoaded(VROSC.UserDataControllers user)
    // Offset: 0xAC8864
    void UserDataLoaded(::VROSC::UserDataControllers* user);
    // public System.Void .ctor()
    // Offset: 0xAC895C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MidiManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MidiManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MidiManager*, creationType>()));
    }
  }; // VROSC.MidiManager
  #pragma pack(pop)
  static check_size<sizeof(MidiManager), 49 + sizeof(bool)> __VROSC_MidiManagerSizeCheck;
  static_assert(sizeof(MidiManager) == 0x32);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::MidiManager::get_ExternalSynthesizer
// Il2CppName: get_ExternalSynthesizer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::ExternalSynthesizer* (VROSC::MidiManager::*)()>(&VROSC::MidiManager::get_ExternalSynthesizer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "get_ExternalSynthesizer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::get_InternalSynthesizer
// Il2CppName: get_InternalSynthesizer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::InternalSynthesizer* (VROSC::MidiManager::*)()>(&VROSC::MidiManager::get_InternalSynthesizer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "get_InternalSynthesizer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::get_IsReady
// Il2CppName: get_IsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::MidiManager::*)()>(&VROSC::MidiManager::get_IsReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "get_IsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::set_IsReady
// Il2CppName: set_IsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MidiManager::*)(bool)>(&VROSC::MidiManager::set_IsReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "set_IsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MidiManager::*)()>(&VROSC::MidiManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MidiManager::*)()>(&VROSC::MidiManager::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MidiManager::*)()>(&VROSC::MidiManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::PlayNote
// Il2CppName: PlayNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MidiManager::*)(::VROSC::WidgetSettings::Identifier, int, float, ::VROSC::PatchSettings*, int, ::Il2CppObject*, double, ::VROSC::HandType, float)>(&VROSC::MidiManager::PlayNote)> {
  static const MethodInfo* get() {
    static auto* instrumentId = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings/Identifier")->byval_arg;
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* patchSettings = &::il2cpp_utils::GetClassFromName("VROSC", "PatchSettings")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* predictedDspTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* handType = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "PlayNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instrumentId, note, velocity, patchSettings, channel, source, predictedDspTime, handType, pitch});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::StopNote
// Il2CppName: StopNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MidiManager::*)(int, ::VROSC::PatchSettings*, int, ::Il2CppObject*, ::VROSC::HandType)>(&VROSC::MidiManager::StopNote)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* patchSettings = &::il2cpp_utils::GetClassFromName("VROSC", "PatchSettings")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* handType = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "StopNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, patchSettings, channel, source, handType});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::GetActiveNote
// Il2CppName: GetActiveNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::MidiManager::ActiveNote* (VROSC::MidiManager::*)(int, ::Il2CppObject*, int, ::Il2CppObject*)>(&VROSC::MidiManager::GetActiveNote)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* patch = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "GetActiveNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, patch, channel, source});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::IsPlaying
// Il2CppName: IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::MidiManager::*)()>(&VROSC::MidiManager::IsPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::IsPlaying
// Il2CppName: IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::MidiManager::*)(::Il2CppObject*, int)>(&VROSC::MidiManager::IsPlaying)> {
  static const MethodInfo* get() {
    static auto* patch = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{patch, channel});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::SetMidiCC
// Il2CppName: SetMidiCC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MidiManager::*)(float, int, ::VROSC::PatchSettings*, int, bool, ::VROSC::HandType, bool)>(&VROSC::MidiManager::SetMidiCC)> {
  static const MethodInfo* get() {
    static auto* midiCCValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* midiCC = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* patchSettings = &::il2cpp_utils::GetClassFromName("VROSC", "PatchSettings")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sendToExternal = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* handType = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    static auto* saveToPatch = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "SetMidiCC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{midiCCValue, midiCC, patchSettings, channel, sendToExternal, handType, saveToPatch});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::SetMidiPitchBend
// Il2CppName: SetMidiPitchBend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MidiManager::*)(float, ::VROSC::PatchSettings*, int, bool, ::VROSC::HandType)>(&VROSC::MidiManager::SetMidiPitchBend)> {
  static const MethodInfo* get() {
    static auto* pitchBendValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* patchSettings = &::il2cpp_utils::GetClassFromName("VROSC", "PatchSettings")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sendToExternal = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* handType = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "SetMidiPitchBend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pitchBendValue, patchSettings, channel, sendToExternal, handType});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::AllNotesOff
// Il2CppName: AllNotesOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MidiManager::*)(::Il2CppObject*, int)>(&VROSC::MidiManager::AllNotesOff)> {
  static const MethodInfo* get() {
    static auto* patch = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "AllNotesOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{patch, channel});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::AllNotesOff
// Il2CppName: AllNotesOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MidiManager::*)()>(&VROSC::MidiManager::AllNotesOff)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "AllNotesOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::ToggleInternalExternalSynthesizer
// Il2CppName: ToggleInternalExternalSynthesizer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MidiManager::*)()>(&VROSC::MidiManager::ToggleInternalExternalSynthesizer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "ToggleInternalExternalSynthesizer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::SetUseExternalSynthesizer
// Il2CppName: SetUseExternalSynthesizer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MidiManager::*)(bool)>(&VROSC::MidiManager::SetUseExternalSynthesizer)> {
  static const MethodInfo* get() {
    static auto* useExternal = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "SetUseExternalSynthesizer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useExternal});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::UserDataLoaded
// Il2CppName: UserDataLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MidiManager::*)(::VROSC::UserDataControllers*)>(&VROSC::MidiManager::UserDataLoaded)> {
  static const MethodInfo* get() {
    static auto* user = &::il2cpp_utils::GetClassFromName("VROSC", "UserDataControllers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MidiManager*), "UserDataLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{user});
  }
};
// Writing MetadataGetter for method: VROSC::MidiManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
