// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.HapticRequest
#include "VROSC/HapticRequest.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: HapticManager
  class HapticManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::HapticManager);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::HapticManager*, "VROSC", "HapticManager");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.HapticManager
  // [TokenAttribute] Offset: FFFFFFFF
  class HapticManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Collections.Generic.List`1<VROSC.HapticRequest> _hapticRequests
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::VROSC::HapticRequest>* hapticRequests;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::HapticRequest>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.HapticRequest> _hapticRequests
    [[deprecated]] ::System::Collections::Generic::List_1<::VROSC::HapticRequest>*& dyn__hapticRequests();
    // public System.Void RequestHapticFeedback(VROSC.HapticRequest hapticRequest)
    // Offset: 0x19ABB94
    void RequestHapticFeedback(::VROSC::HapticRequest hapticRequest);
    // protected System.Void Update()
    // Offset: 0x19ABCD4
    void Update();
    // public System.Void .ctor()
    // Offset: 0x19ABFD8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HapticManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HapticManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HapticManager*, creationType>()));
    }
  }; // VROSC.HapticManager
  #pragma pack(pop)
  static check_size<sizeof(HapticManager), 24 + sizeof(::System::Collections::Generic::List_1<::VROSC::HapticRequest>*)> __VROSC_HapticManagerSizeCheck;
  static_assert(sizeof(HapticManager) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::HapticManager::RequestHapticFeedback
// Il2CppName: RequestHapticFeedback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HapticManager::*)(::VROSC::HapticRequest)>(&VROSC::HapticManager::RequestHapticFeedback)> {
  static const MethodInfo* get() {
    static auto* hapticRequest = &::il2cpp_utils::GetClassFromName("VROSC", "HapticRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HapticManager*), "RequestHapticFeedback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hapticRequest});
  }
};
// Writing MetadataGetter for method: VROSC::HapticManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HapticManager::*)()>(&VROSC::HapticManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::HapticManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::HapticManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
