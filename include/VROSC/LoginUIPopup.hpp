// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoginUIPopupLoginPanel
  class LoginUIPopupLoginPanel;
  // Forward declaring type: LoginUIPopupEmailVerificationPanel
  class LoginUIPopupEmailVerificationPanel;
  // Forward declaring type: LoginUIPopupChangeEmailPanel
  class LoginUIPopupChangeEmailPanel;
  // Forward declaring type: LoginUIPopupChangePasswordPanel
  class LoginUIPopupChangePasswordPanel;
  // Forward declaring type: LoginUIPopupAcceptTermsPanel
  class LoginUIPopupAcceptTermsPanel;
  // Forward declaring type: UIButton
  class UIButton;
  // Forward declaring type: LoginUIPopupPanelBase
  class LoginUIPopupPanelBase;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoginUIPopup
  class LoginUIPopup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::LoginUIPopup);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LoginUIPopup*, "VROSC", "LoginUIPopup");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.LoginUIPopup
  // [TokenAttribute] Offset: FFFFFFFF
  class LoginUIPopup : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::LoginUIPopup::Panel
    struct Panel;
    public:
    // private VROSC.LoginUIPopupLoginPanel _loginPanel
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::LoginUIPopupLoginPanel* loginPanel;
    // Field size check
    static_assert(sizeof(::VROSC::LoginUIPopupLoginPanel*) == 0x8);
    // private VROSC.LoginUIPopupEmailVerificationPanel _waitingForVerificationPanel
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::LoginUIPopupEmailVerificationPanel* waitingForVerificationPanel;
    // Field size check
    static_assert(sizeof(::VROSC::LoginUIPopupEmailVerificationPanel*) == 0x8);
    // private VROSC.LoginUIPopupChangeEmailPanel _changeEmailPanel
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::LoginUIPopupChangeEmailPanel* changeEmailPanel;
    // Field size check
    static_assert(sizeof(::VROSC::LoginUIPopupChangeEmailPanel*) == 0x8);
    // private VROSC.LoginUIPopupChangePasswordPanel _changePasswordPanel
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::LoginUIPopupChangePasswordPanel* changePasswordPanel;
    // Field size check
    static_assert(sizeof(::VROSC::LoginUIPopupChangePasswordPanel*) == 0x8);
    // private VROSC.LoginUIPopupAcceptTermsPanel _acceptTermsPanel
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::LoginUIPopupAcceptTermsPanel* acceptTermsPanel;
    // Field size check
    static_assert(sizeof(::VROSC::LoginUIPopupAcceptTermsPanel*) == 0x8);
    // private VROSC.UIButton _privacyPolicyButton
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::UIButton* privacyPolicyButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.LoginUIPopupPanelBase _previousPanel
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::LoginUIPopupPanelBase* previousPanel;
    // Field size check
    static_assert(sizeof(::VROSC::LoginUIPopupPanelBase*) == 0x8);
    // private VROSC.LoginUIPopupPanelBase _currentPanel
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::LoginUIPopupPanelBase* currentPanel;
    // Field size check
    static_assert(sizeof(::VROSC::LoginUIPopupPanelBase*) == 0x8);
    // private System.Boolean <IsOpen>k__BackingField
    // Size: 0x1
    // Offset: 0x58
    bool IsOpen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsOpen and: OnLoginPopupClosed
    char __padding8[0x7] = {};
    // public System.Action OnLoginPopupClosed
    // Size: 0x8
    // Offset: 0x60
    ::System::Action* OnLoginPopupClosed;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.LoginUIPopupLoginPanel _loginPanel
    [[deprecated("Use field access instead!")]] ::VROSC::LoginUIPopupLoginPanel*& dyn__loginPanel();
    // Get instance field reference: private VROSC.LoginUIPopupEmailVerificationPanel _waitingForVerificationPanel
    [[deprecated("Use field access instead!")]] ::VROSC::LoginUIPopupEmailVerificationPanel*& dyn__waitingForVerificationPanel();
    // Get instance field reference: private VROSC.LoginUIPopupChangeEmailPanel _changeEmailPanel
    [[deprecated("Use field access instead!")]] ::VROSC::LoginUIPopupChangeEmailPanel*& dyn__changeEmailPanel();
    // Get instance field reference: private VROSC.LoginUIPopupChangePasswordPanel _changePasswordPanel
    [[deprecated("Use field access instead!")]] ::VROSC::LoginUIPopupChangePasswordPanel*& dyn__changePasswordPanel();
    // Get instance field reference: private VROSC.LoginUIPopupAcceptTermsPanel _acceptTermsPanel
    [[deprecated("Use field access instead!")]] ::VROSC::LoginUIPopupAcceptTermsPanel*& dyn__acceptTermsPanel();
    // Get instance field reference: private VROSC.UIButton _privacyPolicyButton
    [[deprecated("Use field access instead!")]] ::VROSC::UIButton*& dyn__privacyPolicyButton();
    // Get instance field reference: private VROSC.LoginUIPopupPanelBase _previousPanel
    [[deprecated("Use field access instead!")]] ::VROSC::LoginUIPopupPanelBase*& dyn__previousPanel();
    // Get instance field reference: private VROSC.LoginUIPopupPanelBase _currentPanel
    [[deprecated("Use field access instead!")]] ::VROSC::LoginUIPopupPanelBase*& dyn__currentPanel();
    // Get instance field reference: private System.Boolean <IsOpen>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsOpen$k__BackingField();
    // Get instance field reference: public System.Action OnLoginPopupClosed
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnLoginPopupClosed();
    // public System.Boolean get_IsOpen()
    // Offset: 0x19AF8B4
    bool get_IsOpen();
    // private System.Void set_IsOpen(System.Boolean value)
    // Offset: 0x19AF8BC
    void set_IsOpen(bool value);
    // public System.Void .ctor()
    // Offset: 0x19AFE60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoginUIPopup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::LoginUIPopup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoginUIPopup*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x19AF8C8
    void Awake();
    // public System.Void Setup()
    // Offset: 0x19AFA28
    void Setup();
    // public System.Void OpenPanel(VROSC.LoginUIPopup/VROSC.Panel panel)
    // Offset: 0x19AFABC
    void OpenPanel(::VROSC::LoginUIPopup::Panel panel);
    // public System.Void ClosePanel()
    // Offset: 0x19AFD7C
    void ClosePanel();
    // public System.Void ClosePopup()
    // Offset: 0x19AFD0C
    void ClosePopup();
    // private System.Void PrivacyPolicyPressed()
    // Offset: 0x19AFE18
    void PrivacyPolicyPressed();
  }; // VROSC.LoginUIPopup
  #pragma pack(pop)
  static check_size<sizeof(LoginUIPopup), 96 + sizeof(::System::Action*)> __VROSC_LoginUIPopupSizeCheck;
  static_assert(sizeof(LoginUIPopup) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::LoginUIPopup::get_IsOpen
// Il2CppName: get_IsOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoginUIPopup::*)()>(&VROSC::LoginUIPopup::get_IsOpen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoginUIPopup*), "get_IsOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoginUIPopup::set_IsOpen
// Il2CppName: set_IsOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoginUIPopup::*)(bool)>(&VROSC::LoginUIPopup::set_IsOpen)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoginUIPopup*), "set_IsOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoginUIPopup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::LoginUIPopup::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoginUIPopup::*)()>(&VROSC::LoginUIPopup::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoginUIPopup*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoginUIPopup::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoginUIPopup::*)()>(&VROSC::LoginUIPopup::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoginUIPopup*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoginUIPopup::OpenPanel
// Il2CppName: OpenPanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoginUIPopup::*)(::VROSC::LoginUIPopup::Panel)>(&VROSC::LoginUIPopup::OpenPanel)> {
  static const MethodInfo* get() {
    static auto* panel = &::il2cpp_utils::GetClassFromName("VROSC", "LoginUIPopup/Panel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoginUIPopup*), "OpenPanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{panel});
  }
};
// Writing MetadataGetter for method: VROSC::LoginUIPopup::ClosePanel
// Il2CppName: ClosePanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoginUIPopup::*)()>(&VROSC::LoginUIPopup::ClosePanel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoginUIPopup*), "ClosePanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoginUIPopup::ClosePopup
// Il2CppName: ClosePopup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoginUIPopup::*)()>(&VROSC::LoginUIPopup::ClosePopup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoginUIPopup*), "ClosePopup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoginUIPopup::PrivacyPolicyPressed
// Il2CppName: PrivacyPolicyPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoginUIPopup::*)()>(&VROSC::LoginUIPopup::PrivacyPolicyPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoginUIPopup*), "PrivacyPolicyPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
