// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: TapeRecorder
  class TapeRecorder;
  // Forward declaring type: UIButton
  class UIButton;
  // Forward declaring type: UISlideToggle
  class UISlideToggle;
  // Forward declaring type: WaveformVisualizer
  class WaveformVisualizer;
  // Forward declaring type: TimeSlider
  class TimeSlider;
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: Error
  struct Error;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TapeRecorderUI
  class TapeRecorderUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TapeRecorderUI);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TapeRecorderUI*, "VROSC", "TapeRecorderUI");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xAC
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TapeRecorderUI
  // [TokenAttribute] Offset: FFFFFFFF
  class TapeRecorderUI : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::TapeRecorderUI::$DisplayTextAlert$d__45
    struct $DisplayTextAlert$d__45;
    public:
    // private VROSC.TapeRecorder _tapeRecorder
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::TapeRecorder* tapeRecorder;
    // Field size check
    static_assert(sizeof(::VROSC::TapeRecorder*) == 0x8);
    // private UnityEngine.GameObject _mainPanel
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* mainPanel;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _warningPopup
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* warningPopup;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private VROSC.UIButton _recordButton
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::UIButton* recordButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.UIButton _playButton
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::UIButton* playButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.UIButton _saveButton
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::UIButton* saveButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.UIButton _warningCancelButton
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::UIButton* warningCancelButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.UIButton _warningOKButton
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::UIButton* warningOKButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.UISlideToggle _previewToggle
    // Size: 0x8
    // Offset: 0x58
    ::VROSC::UISlideToggle* previewToggle;
    // Field size check
    static_assert(sizeof(::VROSC::UISlideToggle*) == 0x8);
    // private UnityEngine.GameObject _recordIcon
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::GameObject* recordIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _stopIcon
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::GameObject* stopIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _playIcon
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::GameObject* playIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _pauseIcon
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::GameObject* pauseIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private TMPro.TextMeshPro _textAlert
    // Size: 0x8
    // Offset: 0x80
    ::TMPro::TextMeshPro* textAlert;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private TMPro.TextMeshPro _timeCounter
    // Size: 0x8
    // Offset: 0x88
    ::TMPro::TextMeshPro* timeCounter;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private VROSC.WaveformVisualizer _waveformVisualizer
    // Size: 0x8
    // Offset: 0x90
    ::VROSC::WaveformVisualizer* waveformVisualizer;
    // Field size check
    static_assert(sizeof(::VROSC::WaveformVisualizer*) == 0x8);
    // private UnityEngine.RectTransform _playHead
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::RectTransform* playHead;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private VROSC.TimeSlider _timeSlider
    // Size: 0x8
    // Offset: 0xA0
    ::VROSC::TimeSlider* timeSlider;
    // Field size check
    static_assert(sizeof(::VROSC::TimeSlider*) == 0x8);
    // private System.Single _playHeadFullWidth
    // Size: 0x4
    // Offset: 0xA8
    float playHeadFullWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.TapeRecorder _tapeRecorder
    [[deprecated]] ::VROSC::TapeRecorder*& dyn__tapeRecorder();
    // Get instance field reference: private UnityEngine.GameObject _mainPanel
    [[deprecated]] ::UnityEngine::GameObject*& dyn__mainPanel();
    // Get instance field reference: private UnityEngine.GameObject _warningPopup
    [[deprecated]] ::UnityEngine::GameObject*& dyn__warningPopup();
    // Get instance field reference: private VROSC.UIButton _recordButton
    [[deprecated]] ::VROSC::UIButton*& dyn__recordButton();
    // Get instance field reference: private VROSC.UIButton _playButton
    [[deprecated]] ::VROSC::UIButton*& dyn__playButton();
    // Get instance field reference: private VROSC.UIButton _saveButton
    [[deprecated]] ::VROSC::UIButton*& dyn__saveButton();
    // Get instance field reference: private VROSC.UIButton _warningCancelButton
    [[deprecated]] ::VROSC::UIButton*& dyn__warningCancelButton();
    // Get instance field reference: private VROSC.UIButton _warningOKButton
    [[deprecated]] ::VROSC::UIButton*& dyn__warningOKButton();
    // Get instance field reference: private VROSC.UISlideToggle _previewToggle
    [[deprecated]] ::VROSC::UISlideToggle*& dyn__previewToggle();
    // Get instance field reference: private UnityEngine.GameObject _recordIcon
    [[deprecated]] ::UnityEngine::GameObject*& dyn__recordIcon();
    // Get instance field reference: private UnityEngine.GameObject _stopIcon
    [[deprecated]] ::UnityEngine::GameObject*& dyn__stopIcon();
    // Get instance field reference: private UnityEngine.GameObject _playIcon
    [[deprecated]] ::UnityEngine::GameObject*& dyn__playIcon();
    // Get instance field reference: private UnityEngine.GameObject _pauseIcon
    [[deprecated]] ::UnityEngine::GameObject*& dyn__pauseIcon();
    // Get instance field reference: private TMPro.TextMeshPro _textAlert
    [[deprecated]] ::TMPro::TextMeshPro*& dyn__textAlert();
    // Get instance field reference: private TMPro.TextMeshPro _timeCounter
    [[deprecated]] ::TMPro::TextMeshPro*& dyn__timeCounter();
    // Get instance field reference: private VROSC.WaveformVisualizer _waveformVisualizer
    [[deprecated]] ::VROSC::WaveformVisualizer*& dyn__waveformVisualizer();
    // Get instance field reference: private UnityEngine.RectTransform _playHead
    [[deprecated]] ::UnityEngine::RectTransform*& dyn__playHead();
    // Get instance field reference: private VROSC.TimeSlider _timeSlider
    [[deprecated]] ::VROSC::TimeSlider*& dyn__timeSlider();
    // Get instance field reference: private System.Single _playHeadFullWidth
    [[deprecated]] float& dyn__playHeadFullWidth();
    // public VROSC.TimeSlider get_TimeSlider()
    // Offset: 0xA22DD4
    ::VROSC::TimeSlider* get_TimeSlider();
    // public System.Void Setup(VROSC.TapeRecorder tapeRecorder)
    // Offset: 0xA22DDC
    void Setup(::VROSC::TapeRecorder* tapeRecorder);
    // protected System.Void OnDestroy()
    // Offset: 0xA23448
    void OnDestroy();
    // public System.Void Clear()
    // Offset: 0xA232E8
    void Clear();
    // private System.Void RecordButtonPressed()
    // Offset: 0xA2387C
    void RecordButtonPressed();
    // private System.Void PlayButtonPressed()
    // Offset: 0xA23928
    void PlayButtonPressed();
    // private System.Void SaveButtonPressed()
    // Offset: 0xA23954
    void SaveButtonPressed();
    // private System.Void WarningCancelPressed()
    // Offset: 0xA239A0
    void WarningCancelPressed();
    // private System.Void WarningOKPressed()
    // Offset: 0xA239A4
    void WarningOKPressed();
    // private System.Void PreviewToggleChanged(VROSC.InputDevice inputDevice, System.Boolean toggled)
    // Offset: 0xA239D4
    void PreviewToggleChanged(::VROSC::InputDevice* inputDevice, bool toggled);
    // public System.Void UpdateVisualization(System.Single[] audioData, System.Single elapsedTimeSeconds)
    // Offset: 0xA239F4
    void UpdateVisualization(::ArrayW<float> audioData, float elapsedTimeSeconds);
    // public System.Void UpdateTimeLabel(System.Boolean useSliderValue)
    // Offset: 0xA23A2C
    void UpdateTimeLabel(bool useSliderValue);
    // private System.Void ShowWarningPopup()
    // Offset: 0xA238E4
    void ShowWarningPopup();
    // private System.Void HideWarningPopup()
    // Offset: 0xA23838
    void HideWarningPopup();
    // public System.Void ShowAsRecording()
    // Offset: 0xA23AE8
    void ShowAsRecording();
    // public System.Void ShowAsPlaying()
    // Offset: 0xA23B5C
    void ShowAsPlaying();
    // public System.Void ShowAsPaused()
    // Offset: 0xA23BF4
    void ShowAsPaused();
    // public System.Void ShowAsConcluded()
    // Offset: 0xA23C58
    void ShowAsConcluded();
    // public System.Void ShowAsSaving()
    // Offset: 0xA23C9C
    void ShowAsSaving();
    // public System.Void SaveSucceeded()
    // Offset: 0xA23E04
    void SaveSucceeded();
    // public System.Void SaveFailed(VROSC.Error error)
    // Offset: 0xA23E90
    void SaveFailed(::VROSC::Error error);
    // private System.Void TimeSliderChanged(System.Single newValue)
    // Offset: 0xA23F84
    void TimeSliderChanged(float newValue);
    // private System.Void SessionSaveBegun()
    // Offset: 0xA23FFC
    void SessionSaveBegun();
    // public System.Void DisplayLoadedRecording(System.Single[] audioData, System.Int32 startIndex, System.Int32 endIndex)
    // Offset: 0xA24024
    void DisplayLoadedRecording(::ArrayW<float> audioData, int startIndex, int endIndex);
    // public System.Void SetUseAsPreviewToggled(System.Boolean state)
    // Offset: 0xA24290
    void SetUseAsPreviewToggled(bool state);
    // private System.Void DisplayTextAlert(System.String text, System.Single displayTime)
    // Offset: 0xA23D28
    void DisplayTextAlert(::StringW text, float displayTime);
    // public System.Void .ctor()
    // Offset: 0xA242B4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TapeRecorderUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TapeRecorderUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TapeRecorderUI*, creationType>()));
    }
  }; // VROSC.TapeRecorderUI
  #pragma pack(pop)
  static check_size<sizeof(TapeRecorderUI), 168 + sizeof(float)> __VROSC_TapeRecorderUISizeCheck;
  static_assert(sizeof(TapeRecorderUI) == 0xAC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::get_TimeSlider
// Il2CppName: get_TimeSlider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::TimeSlider* (VROSC::TapeRecorderUI::*)()>(&VROSC::TapeRecorderUI::get_TimeSlider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "get_TimeSlider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)(::VROSC::TapeRecorder*)>(&VROSC::TapeRecorderUI::Setup)> {
  static const MethodInfo* get() {
    static auto* tapeRecorder = &::il2cpp_utils::GetClassFromName("VROSC", "TapeRecorder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tapeRecorder});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)()>(&VROSC::TapeRecorderUI::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)()>(&VROSC::TapeRecorderUI::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::RecordButtonPressed
// Il2CppName: RecordButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)()>(&VROSC::TapeRecorderUI::RecordButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "RecordButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::PlayButtonPressed
// Il2CppName: PlayButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)()>(&VROSC::TapeRecorderUI::PlayButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "PlayButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::SaveButtonPressed
// Il2CppName: SaveButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)()>(&VROSC::TapeRecorderUI::SaveButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "SaveButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::WarningCancelPressed
// Il2CppName: WarningCancelPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)()>(&VROSC::TapeRecorderUI::WarningCancelPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "WarningCancelPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::WarningOKPressed
// Il2CppName: WarningOKPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)()>(&VROSC::TapeRecorderUI::WarningOKPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "WarningOKPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::PreviewToggleChanged
// Il2CppName: PreviewToggleChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)(::VROSC::InputDevice*, bool)>(&VROSC::TapeRecorderUI::PreviewToggleChanged)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* toggled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "PreviewToggleChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice, toggled});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::UpdateVisualization
// Il2CppName: UpdateVisualization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)(::ArrayW<float>, float)>(&VROSC::TapeRecorderUI::UpdateVisualization)> {
  static const MethodInfo* get() {
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* elapsedTimeSeconds = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "UpdateVisualization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioData, elapsedTimeSeconds});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::UpdateTimeLabel
// Il2CppName: UpdateTimeLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)(bool)>(&VROSC::TapeRecorderUI::UpdateTimeLabel)> {
  static const MethodInfo* get() {
    static auto* useSliderValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "UpdateTimeLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useSliderValue});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::ShowWarningPopup
// Il2CppName: ShowWarningPopup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)()>(&VROSC::TapeRecorderUI::ShowWarningPopup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "ShowWarningPopup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::HideWarningPopup
// Il2CppName: HideWarningPopup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)()>(&VROSC::TapeRecorderUI::HideWarningPopup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "HideWarningPopup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::ShowAsRecording
// Il2CppName: ShowAsRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)()>(&VROSC::TapeRecorderUI::ShowAsRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "ShowAsRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::ShowAsPlaying
// Il2CppName: ShowAsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)()>(&VROSC::TapeRecorderUI::ShowAsPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "ShowAsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::ShowAsPaused
// Il2CppName: ShowAsPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)()>(&VROSC::TapeRecorderUI::ShowAsPaused)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "ShowAsPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::ShowAsConcluded
// Il2CppName: ShowAsConcluded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)()>(&VROSC::TapeRecorderUI::ShowAsConcluded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "ShowAsConcluded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::ShowAsSaving
// Il2CppName: ShowAsSaving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)()>(&VROSC::TapeRecorderUI::ShowAsSaving)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "ShowAsSaving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::SaveSucceeded
// Il2CppName: SaveSucceeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)()>(&VROSC::TapeRecorderUI::SaveSucceeded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "SaveSucceeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::SaveFailed
// Il2CppName: SaveFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)(::VROSC::Error)>(&VROSC::TapeRecorderUI::SaveFailed)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("VROSC", "Error")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "SaveFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::TimeSliderChanged
// Il2CppName: TimeSliderChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)(float)>(&VROSC::TapeRecorderUI::TimeSliderChanged)> {
  static const MethodInfo* get() {
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "TimeSliderChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newValue});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::SessionSaveBegun
// Il2CppName: SessionSaveBegun
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)()>(&VROSC::TapeRecorderUI::SessionSaveBegun)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "SessionSaveBegun", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::DisplayLoadedRecording
// Il2CppName: DisplayLoadedRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)(::ArrayW<float>, int, int)>(&VROSC::TapeRecorderUI::DisplayLoadedRecording)> {
  static const MethodInfo* get() {
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "DisplayLoadedRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioData, startIndex, endIndex});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::SetUseAsPreviewToggled
// Il2CppName: SetUseAsPreviewToggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)(bool)>(&VROSC::TapeRecorderUI::SetUseAsPreviewToggled)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "SetUseAsPreviewToggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::DisplayTextAlert
// Il2CppName: DisplayTextAlert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorderUI::*)(::StringW, float)>(&VROSC::TapeRecorderUI::DisplayTextAlert)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* displayTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorderUI*), "DisplayTextAlert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, displayTime});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorderUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
