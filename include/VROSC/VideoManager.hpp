// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: VideoUI
  class VideoUI;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: VideoManager
  class VideoManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::VideoManager);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::VideoManager*, "VROSC", "VideoManager");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.VideoManager
  // [TokenAttribute] Offset: FFFFFFFF
  class VideoManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.VideoUI _videoUI
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::VideoUI* videoUI;
    // Field size check
    static_assert(sizeof(::VROSC::VideoUI*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.VideoUI _videoUI
    [[deprecated("Use field access instead!")]] ::VROSC::VideoUI*& dyn__videoUI();
    // public System.Void .ctor()
    // Offset: 0x1922CD8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VideoManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::VideoManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VideoManager*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x1922650
    void Start();
    // public System.Void OpenUI(System.String videoPath, System.String title)
    // Offset: 0x1922A14
    void OpenUI(::StringW videoPath, ::StringW title);
    // public System.Void CloseUI()
    // Offset: 0x1922C34
    void CloseUI();
  }; // VROSC.VideoManager
  #pragma pack(pop)
  static check_size<sizeof(VideoManager), 24 + sizeof(::VROSC::VideoUI*)> __VROSC_VideoManagerSizeCheck;
  static_assert(sizeof(VideoManager) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::VideoManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::VideoManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoManager::*)()>(&VROSC::VideoManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::VideoManager::OpenUI
// Il2CppName: OpenUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoManager::*)(::StringW, ::StringW)>(&VROSC::VideoManager::OpenUI)> {
  static const MethodInfo* get() {
    static auto* videoPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* title = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoManager*), "OpenUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{videoPath, title});
  }
};
// Writing MetadataGetter for method: VROSC::VideoManager::CloseUI
// Il2CppName: CloseUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::VideoManager::*)()>(&VROSC::VideoManager::CloseUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::VideoManager*), "CloseUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
