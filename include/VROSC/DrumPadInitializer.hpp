// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.SignalNode
#include "VROSC/SignalNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: IntNode
  class IntNode;
  // Forward declaring type: NotePlayer
  class NotePlayer;
  // Forward declaring type: UIButton
  class UIButton;
  // Forward declaring type: NoteBoard
  class NoteBoard;
  // Forward declaring type: Signal
  class Signal;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: DrumPadInitializer
  class DrumPadInitializer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::DrumPadInitializer);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::DrumPadInitializer*, "VROSC", "DrumPadInitializer");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.DrumPadInitializer
  // [TokenAttribute] Offset: FFFFFFFF
  class DrumPadInitializer : public ::VROSC::SignalNode {
    public:
    public:
    // private VROSC.IntNode _noteNode
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::IntNode* noteNode;
    // Field size check
    static_assert(sizeof(::VROSC::IntNode*) == 0x8);
    // private VROSC.NotePlayer _notePlayer
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::NotePlayer* notePlayer;
    // Field size check
    static_assert(sizeof(::VROSC::NotePlayer*) == 0x8);
    // private VROSC.UIButton _closeButton
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::UIButton* closeButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.NoteBoard _noteBoard
    // Size: 0x8
    // Offset: 0x58
    ::VROSC::NoteBoard* noteBoard;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoard*) == 0x8);
    public:
    // Get instance field reference: private VROSC.IntNode _noteNode
    [[deprecated("Use field access instead!")]] ::VROSC::IntNode*& dyn__noteNode();
    // Get instance field reference: private VROSC.NotePlayer _notePlayer
    [[deprecated("Use field access instead!")]] ::VROSC::NotePlayer*& dyn__notePlayer();
    // Get instance field reference: private VROSC.UIButton _closeButton
    [[deprecated("Use field access instead!")]] ::VROSC::UIButton*& dyn__closeButton();
    // Get instance field reference: private VROSC.NoteBoard _noteBoard
    [[deprecated("Use field access instead!")]] ::VROSC::NoteBoard*& dyn__noteBoard();
    // private System.Void GetNoteBoardRecursive(UnityEngine.Transform t)
    // Offset: 0x8E66C0
    void GetNoteBoardRecursive(::UnityEngine::Transform* t);
    // private System.Void CloseButtonPressed()
    // Offset: 0x8E6788
    void CloseButtonPressed();
    // private System.Void OnDestroy()
    // Offset: 0x8E6800
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x8E68C0
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DrumPadInitializer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::DrumPadInitializer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DrumPadInitializer*, creationType>()));
    }
    // protected override System.Void NodeBegin(VROSC.Signal signal)
    // Offset: 0x8E6558
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeBegin(VROSC.Signal signal)
    void NodeBegin(::VROSC::Signal* signal);
  }; // VROSC.DrumPadInitializer
  #pragma pack(pop)
  static check_size<sizeof(DrumPadInitializer), 88 + sizeof(::VROSC::NoteBoard*)> __VROSC_DrumPadInitializerSizeCheck;
  static_assert(sizeof(DrumPadInitializer) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::DrumPadInitializer::GetNoteBoardRecursive
// Il2CppName: GetNoteBoardRecursive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumPadInitializer::*)(::UnityEngine::Transform*)>(&VROSC::DrumPadInitializer::GetNoteBoardRecursive)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumPadInitializer*), "GetNoteBoardRecursive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: VROSC::DrumPadInitializer::CloseButtonPressed
// Il2CppName: CloseButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumPadInitializer::*)()>(&VROSC::DrumPadInitializer::CloseButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumPadInitializer*), "CloseButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DrumPadInitializer::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumPadInitializer::*)()>(&VROSC::DrumPadInitializer::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumPadInitializer*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DrumPadInitializer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::DrumPadInitializer::NodeBegin
// Il2CppName: NodeBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumPadInitializer::*)(::VROSC::Signal*)>(&VROSC::DrumPadInitializer::NodeBegin)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumPadInitializer*), "NodeBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
