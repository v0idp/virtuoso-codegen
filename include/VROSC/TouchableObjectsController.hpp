// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.Scale
#include "VROSC/Scale.hpp"
// Including type: VROSC.NoteBoard
#include "VROSC/NoteBoard.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: TouchableObject
  class TouchableObject;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TouchableObjectsController
  class TouchableObjectsController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TouchableObjectsController);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TouchableObjectsController*, "VROSC", "TouchableObjectsController");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TouchableObjectsController
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class TouchableObjectsController : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Collections.Generic.List`1<VROSC.TouchableObject> _notes
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::VROSC::TouchableObject*>* notes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::TouchableObject*>*) == 0x8);
    // private UnityEngine.Transform _checkPosition
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* checkPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Int32 _height
    // Size: 0x4
    // Offset: 0x28
    int height;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _width
    // Size: 0x4
    // Offset: 0x2C
    int width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _depth
    // Size: 0x4
    // Offset: 0x30
    int depth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _size
    // Size: 0x4
    // Offset: 0x34
    float size;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [BitMaskAttribute] Offset: 0x6739C8
    // private VROSC.Scale previewScale
    // Size: 0x4
    // Offset: 0x38
    ::VROSC::Scale previewScale;
    // Field size check
    static_assert(sizeof(::VROSC::Scale) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.TouchableObject> _notes
    ::System::Collections::Generic::List_1<::VROSC::TouchableObject*>*& dyn__notes();
    // Get instance field reference: private UnityEngine.Transform _checkPosition
    ::UnityEngine::Transform*& dyn__checkPosition();
    // Get instance field reference: private System.Int32 _height
    int& dyn__height();
    // Get instance field reference: private System.Int32 _width
    int& dyn__width();
    // Get instance field reference: private System.Int32 _depth
    int& dyn__depth();
    // Get instance field reference: private System.Single _size
    float& dyn__size();
    // Get instance field reference: private VROSC.Scale previewScale
    ::VROSC::Scale& dyn_previewScale();
    // public System.Void Setup()
    // Offset: 0x1401A00
    void Setup();
    // public System.Void ProcessFrame(System.Boolean updatePlaying, System.Boolean playing, VROSC.NoteBoard/VROSC.PlayAxis playAxis)
    // Offset: 0x1401E08
    void ProcessFrame(bool updatePlaying, bool playing, ::VROSC::NoteBoard::PlayAxis playAxis);
    // public System.Void UpdateAll()
    // Offset: 0x1402120
    void UpdateAll();
    // private System.Void OnDrawGizmosSelected()
    // Offset: 0x1402234
    void OnDrawGizmosSelected();
    // public System.Void .ctor()
    // Offset: 0x14022E4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TouchableObjectsController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TouchableObjectsController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TouchableObjectsController*, creationType>()));
    }
  }; // VROSC.TouchableObjectsController
  #pragma pack(pop)
  static check_size<sizeof(TouchableObjectsController), 56 + sizeof(::VROSC::Scale)> __VROSC_TouchableObjectsControllerSizeCheck;
  static_assert(sizeof(TouchableObjectsController) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TouchableObjectsController::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TouchableObjectsController::*)()>(&VROSC::TouchableObjectsController::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TouchableObjectsController*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TouchableObjectsController::ProcessFrame
// Il2CppName: ProcessFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TouchableObjectsController::*)(bool, bool, ::VROSC::NoteBoard::PlayAxis)>(&VROSC::TouchableObjectsController::ProcessFrame)> {
  static const MethodInfo* get() {
    static auto* updatePlaying = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* playing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* playAxis = &::il2cpp_utils::GetClassFromName("VROSC", "NoteBoard/PlayAxis")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TouchableObjectsController*), "ProcessFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePlaying, playing, playAxis});
  }
};
// Writing MetadataGetter for method: VROSC::TouchableObjectsController::UpdateAll
// Il2CppName: UpdateAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TouchableObjectsController::*)()>(&VROSC::TouchableObjectsController::UpdateAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TouchableObjectsController*), "UpdateAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TouchableObjectsController::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TouchableObjectsController::*)()>(&VROSC::TouchableObjectsController::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TouchableObjectsController*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TouchableObjectsController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
