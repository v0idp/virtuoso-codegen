// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.LoopStationRecorder
#include "VROSC/LoopStationRecorder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: UserDataControllers
  class UserDataControllers;
  // Forward declaring type: UserPreferencesDataController
  class UserPreferencesDataController;
  // Skipping declaration: Mode because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: Metronome
  class Metronome;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::Metronome);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::Metronome*, "VROSC", "Metronome");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.Metronome
  // [TokenAttribute] Offset: FFFFFFFF
  class Metronome : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::Metronome::Mode
    struct Mode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: VROSC.Metronome/VROSC.Mode
    // [TokenAttribute] Offset: FFFFFFFF
    struct Mode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Mode
      constexpr Mode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public VROSC.Metronome/VROSC.Mode Auto
      static constexpr const int Auto = 0;
      // Get static field: static public VROSC.Metronome/VROSC.Mode Auto
      static ::VROSC::Metronome::Mode _get_Auto();
      // Set static field: static public VROSC.Metronome/VROSC.Mode Auto
      static void _set_Auto(::VROSC::Metronome::Mode value);
      // static field const value: static public VROSC.Metronome/VROSC.Mode On
      static constexpr const int On = 1;
      // Get static field: static public VROSC.Metronome/VROSC.Mode On
      static ::VROSC::Metronome::Mode _get_On();
      // Set static field: static public VROSC.Metronome/VROSC.Mode On
      static void _set_On(::VROSC::Metronome::Mode value);
      // static field const value: static public VROSC.Metronome/VROSC.Mode Off
      static constexpr const int Off = 2;
      // Get static field: static public VROSC.Metronome/VROSC.Mode Off
      static ::VROSC::Metronome::Mode _get_Off();
      // Set static field: static public VROSC.Metronome/VROSC.Mode Off
      static void _set_Off(::VROSC::Metronome::Mode value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // VROSC.Metronome/VROSC.Mode
    #pragma pack(pop)
    static check_size<sizeof(Metronome::Mode), 0 + sizeof(int)> __VROSC_Metronome_ModeSizeCheck;
    static_assert(sizeof(Metronome::Mode) == 0x4);
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private UnityEngine.GameObject _hapticMetronome
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* hapticMetronome;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private VROSC.UserPreferencesDataController _preferencesController
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::UserPreferencesDataController* preferencesController;
    // Field size check
    static_assert(sizeof(::VROSC::UserPreferencesDataController*) == 0x8);
    // private VROSC.Metronome/VROSC.Mode _mode
    // Size: 0x4
    // Offset: 0x28
    ::VROSC::Metronome::Mode mode;
    // Field size check
    static_assert(sizeof(::VROSC::Metronome::Mode) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.GameObject _hapticMetronome
    ::UnityEngine::GameObject*& dyn__hapticMetronome();
    // Get instance field reference: private VROSC.UserPreferencesDataController _preferencesController
    ::VROSC::UserPreferencesDataController*& dyn__preferencesController();
    // Get instance field reference: private VROSC.Metronome/VROSC.Mode _mode
    ::VROSC::Metronome::Mode& dyn__mode();
    // private System.Void Awake()
    // Offset: 0x8AE690
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x8AE8CC
    void OnDestroy();
    // public System.Void DataLoaded(VROSC.UserDataControllers user)
    // Offset: 0x8AEB08
    void DataLoaded(::VROSC::UserDataControllers* user);
    // public System.Void SetMode(VROSC.Metronome/VROSC.Mode mode)
    // Offset: 0x8AECA4
    void SetMode(::VROSC::Metronome::Mode mode);
    // private System.Void LoopStationRecorderStateChanged(VROSC.LoopStationRecorder/VROSC.RecordingState state)
    // Offset: 0x8AED50
    void LoopStationRecorderStateChanged(::VROSC::LoopStationRecorder::RecordingState state);
    // private System.Void LoopStationTrackRemoved(System.Int32 newTrackCount)
    // Offset: 0x8AEE00
    void LoopStationTrackRemoved(int newTrackCount);
    // private System.Void UpdateMetronome(System.Single bpm)
    // Offset: 0x8AEE70
    void UpdateMetronome(float bpm);
    // private System.Void UpdateMetronome(System.Single bpm, System.Int32 trackCount)
    // Offset: 0x8AEBB0
    void UpdateMetronome(float bpm, int trackCount);
    // public System.Void .ctor()
    // Offset: 0x8AEEF0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Metronome* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::Metronome::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Metronome*, creationType>()));
    }
  }; // VROSC.Metronome
  #pragma pack(pop)
  static check_size<sizeof(Metronome), 40 + sizeof(::VROSC::Metronome::Mode)> __VROSC_MetronomeSizeCheck;
  static_assert(sizeof(Metronome) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::Metronome::Mode, "VROSC", "Metronome/Mode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::Metronome::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Metronome::*)()>(&VROSC::Metronome::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Metronome*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Metronome::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Metronome::*)()>(&VROSC::Metronome::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Metronome*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Metronome::DataLoaded
// Il2CppName: DataLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Metronome::*)(::VROSC::UserDataControllers*)>(&VROSC::Metronome::DataLoaded)> {
  static const MethodInfo* get() {
    static auto* user = &::il2cpp_utils::GetClassFromName("VROSC", "UserDataControllers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Metronome*), "DataLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{user});
  }
};
// Writing MetadataGetter for method: VROSC::Metronome::SetMode
// Il2CppName: SetMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Metronome::*)(::VROSC::Metronome::Mode)>(&VROSC::Metronome::SetMode)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("VROSC", "Metronome/Mode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Metronome*), "SetMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: VROSC::Metronome::LoopStationRecorderStateChanged
// Il2CppName: LoopStationRecorderStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Metronome::*)(::VROSC::LoopStationRecorder::RecordingState)>(&VROSC::Metronome::LoopStationRecorderStateChanged)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStationRecorder/RecordingState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Metronome*), "LoopStationRecorderStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: VROSC::Metronome::LoopStationTrackRemoved
// Il2CppName: LoopStationTrackRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Metronome::*)(int)>(&VROSC::Metronome::LoopStationTrackRemoved)> {
  static const MethodInfo* get() {
    static auto* newTrackCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Metronome*), "LoopStationTrackRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newTrackCount});
  }
};
// Writing MetadataGetter for method: VROSC::Metronome::UpdateMetronome
// Il2CppName: UpdateMetronome
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Metronome::*)(float)>(&VROSC::Metronome::UpdateMetronome)> {
  static const MethodInfo* get() {
    static auto* bpm = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Metronome*), "UpdateMetronome", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bpm});
  }
};
// Writing MetadataGetter for method: VROSC::Metronome::UpdateMetronome
// Il2CppName: UpdateMetronome
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Metronome::*)(float, int)>(&VROSC::Metronome::UpdateMetronome)> {
  static const MethodInfo* get() {
    static auto* bpm = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* trackCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Metronome*), "UpdateMetronome", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bpm, trackCount});
  }
};
// Writing MetadataGetter for method: VROSC::Metronome::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
