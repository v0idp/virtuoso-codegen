// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: VROSC.NotefieldColorSettings
#include "VROSC/NotefieldColorSettings.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: NoteBoardNote
  class NoteBoardNote;
  // Forward declaring type: NoteBoardNoteController
  class NoteBoardNoteController;
  // Forward declaring type: NetNoteboard
  class NetNoteboard;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TransmissionData
  struct TransmissionData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TransmissionData, "VROSC", "TransmissionData");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x1C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: VROSC.TransmissionData
  // [TokenAttribute] Offset: FFFFFFFF
  struct TransmissionData/*, public ::System::ValueType*/ {
    public:
    public:
    // private VROSC.NoteBoardNote _noteBoardNote
    // Size: 0x8
    // Offset: 0x0
    ::VROSC::NoteBoardNote* noteBoardNote;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoardNote*) == 0x8);
    // private UnityEngine.Vector3 _invertedInfluence
    // Size: 0xC
    // Offset: 0x8
    ::UnityEngine::Vector3 invertedInfluence;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single _fullInfluence
    // Size: 0x4
    // Offset: 0x14
    float fullInfluence;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _hoverInfluence
    // Size: 0x4
    // Offset: 0x18
    float hoverInfluence;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: TransmissionData
    constexpr TransmissionData(::VROSC::NoteBoardNote* noteBoardNote_ = {}, ::UnityEngine::Vector3 invertedInfluence_ = {}, float fullInfluence_ = {}, float hoverInfluence_ = {}) noexcept : noteBoardNote{noteBoardNote_}, invertedInfluence{invertedInfluence_}, fullInfluence{fullInfluence_}, hoverInfluence{hoverInfluence_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private VROSC.NoteBoardNote _noteBoardNote
    [[deprecated]] ::VROSC::NoteBoardNote*& dyn__noteBoardNote();
    // Get instance field reference: private UnityEngine.Vector3 _invertedInfluence
    [[deprecated]] ::UnityEngine::Vector3& dyn__invertedInfluence();
    // Get instance field reference: private System.Single _fullInfluence
    [[deprecated]] float& dyn__fullInfluence();
    // Get instance field reference: private System.Single _hoverInfluence
    [[deprecated]] float& dyn__hoverInfluence();
    // public System.Void .ctor(VROSC.NoteBoardNote noteBoardNote, UnityEngine.Vector3 invertedInfluence)
    // Offset: 0xA291E4
    TransmissionData(::VROSC::NoteBoardNote* noteBoardNote, ::UnityEngine::Vector3 invertedInfluence);
    // public System.Void .ctor(VROSC.NoteBoardNote noteBoardNote, UnityEngine.Vector3 influence, System.Single fullInfluence, System.Single hoverInfluence)
    // Offset: 0xA2D1F8
    // ABORTED: conflicts with another method.  TransmissionData(::VROSC::NoteBoardNote* noteBoardNote, ::UnityEngine::Vector3 influence, float fullInfluence, float hoverInfluence);
    // public System.Void Transmit(UnityEngine.Vector3 power, VROSC.NotefieldColorSettings/VROSC.SpreadType spread)
    // Offset: 0xA2D20C
    void Transmit(::UnityEngine::Vector3 power, ::VROSC::NotefieldColorSettings::SpreadType spread);
    // public System.Void TransmitHovering(System.Single hoveringAmount)
    // Offset: 0xA2D2F8
    void TransmitHovering(float hoveringAmount);
    // public System.Void Draw(UnityEngine.Vector3 source)
    // Offset: 0xA2D32C
    void Draw(::UnityEngine::Vector3 source);
    // static public System.Collections.Generic.List`1<VROSC.TransmissionData> GetTransmissionData(VROSC.NoteBoardNoteController controller, System.Int32 noteNumberX, System.Int32 noteNumberY, System.Int32 noteNumberZ, VROSC.NotefieldColorSettings settings, VROSC.NoteBoardNote[,,] allNotes)
    // Offset: 0xA2D3D4
    static ::System::Collections::Generic::List_1<::VROSC::TransmissionData>* GetTransmissionData(::VROSC::NoteBoardNoteController* controller, int noteNumberX, int noteNumberY, int noteNumberZ, ::VROSC::NotefieldColorSettings* settings, ::ArrayW<::VROSC::NoteBoardNote*> allNotes);
    // static private VROSC.TransmissionData GetSameData(VROSC.NoteBoardNote otherNote, VROSC.NotefieldColorSettings settings, System.Int32 note, System.Int32 index, System.Single step, UnityEngine.Vector3 axis)
    // Offset: 0xA2DA28
    static ::VROSC::TransmissionData GetSameData(::VROSC::NoteBoardNote* otherNote, ::VROSC::NotefieldColorSettings* settings, int note, int index, float step, ::UnityEngine::Vector3 axis);
    // static System.Collections.Generic.List`1<VROSC.TransmissionData> GetTransmissionDataXY(VROSC.NetNoteboard controller, System.Int32 noteNumberX, System.Int32 noteNumberY, VROSC.NotefieldColorSettings settings, VROSC.NoteBoardNote[,] XYNotes)
    // Offset: 0xA2DAE8
    static ::System::Collections::Generic::List_1<::VROSC::TransmissionData>* GetTransmissionDataXY(::VROSC::NetNoteboard* controller, int noteNumberX, int noteNumberY, ::VROSC::NotefieldColorSettings* settings, ::ArrayW<::VROSC::NoteBoardNote*> XYNotes);
    // static System.Collections.Generic.List`1<VROSC.TransmissionData> GetTransmissionDataXZ(VROSC.NetNoteboard controller, System.Int32 noteNumberX, System.Int32 noteNumberZ, VROSC.NotefieldColorSettings settings, VROSC.NoteBoardNote[,] XZNotes)
    // Offset: 0xA2DDBC
    static ::System::Collections::Generic::List_1<::VROSC::TransmissionData>* GetTransmissionDataXZ(::VROSC::NetNoteboard* controller, int noteNumberX, int noteNumberZ, ::VROSC::NotefieldColorSettings* settings, ::ArrayW<::VROSC::NoteBoardNote*> XZNotes);
    // static System.Collections.Generic.List`1<VROSC.TransmissionData> GetTransmissionDataYZ(VROSC.NetNoteboard controller, System.Int32 noteNumberY, System.Int32 noteNumberZ, VROSC.NotefieldColorSettings settings, VROSC.NoteBoardNote[,] YZNotes)
    // Offset: 0xA2E098
    static ::System::Collections::Generic::List_1<::VROSC::TransmissionData>* GetTransmissionDataYZ(::VROSC::NetNoteboard* controller, int noteNumberY, int noteNumberZ, ::VROSC::NotefieldColorSettings* settings, ::ArrayW<::VROSC::NoteBoardNote*> YZNotes);
  }; // VROSC.TransmissionData
  #pragma pack(pop)
  static check_size<sizeof(TransmissionData), 24 + sizeof(float)> __VROSC_TransmissionDataSizeCheck;
  static_assert(sizeof(TransmissionData) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TransmissionData::TransmissionData
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::TransmissionData::TransmissionData
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::TransmissionData::Transmit
// Il2CppName: Transmit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransmissionData::*)(::UnityEngine::Vector3, ::VROSC::NotefieldColorSettings::SpreadType)>(&VROSC::TransmissionData::Transmit)> {
  static const MethodInfo* get() {
    static auto* power = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* spread = &::il2cpp_utils::GetClassFromName("VROSC", "NotefieldColorSettings/SpreadType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransmissionData), "Transmit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{power, spread});
  }
};
// Writing MetadataGetter for method: VROSC::TransmissionData::TransmitHovering
// Il2CppName: TransmitHovering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransmissionData::*)(float)>(&VROSC::TransmissionData::TransmitHovering)> {
  static const MethodInfo* get() {
    static auto* hoveringAmount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransmissionData), "TransmitHovering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hoveringAmount});
  }
};
// Writing MetadataGetter for method: VROSC::TransmissionData::Draw
// Il2CppName: Draw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransmissionData::*)(::UnityEngine::Vector3)>(&VROSC::TransmissionData::Draw)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransmissionData), "Draw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: VROSC::TransmissionData::GetTransmissionData
// Il2CppName: GetTransmissionData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::VROSC::TransmissionData>* (*)(::VROSC::NoteBoardNoteController*, int, int, int, ::VROSC::NotefieldColorSettings*, ::ArrayW<::VROSC::NoteBoardNote*>)>(&VROSC::TransmissionData::GetTransmissionData)> {
  static const MethodInfo* get() {
    static auto* controller = &::il2cpp_utils::GetClassFromName("VROSC", "NoteBoardNoteController")->byval_arg;
    static auto* noteNumberX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteNumberY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteNumberZ = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("VROSC", "NotefieldColorSettings")->byval_arg;
    static auto* allNotes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("VROSC", "NoteBoardNote"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransmissionData), "GetTransmissionData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controller, noteNumberX, noteNumberY, noteNumberZ, settings, allNotes});
  }
};
// Writing MetadataGetter for method: VROSC::TransmissionData::GetSameData
// Il2CppName: GetSameData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::TransmissionData (*)(::VROSC::NoteBoardNote*, ::VROSC::NotefieldColorSettings*, int, int, float, ::UnityEngine::Vector3)>(&VROSC::TransmissionData::GetSameData)> {
  static const MethodInfo* get() {
    static auto* otherNote = &::il2cpp_utils::GetClassFromName("VROSC", "NoteBoardNote")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("VROSC", "NotefieldColorSettings")->byval_arg;
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* step = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransmissionData), "GetSameData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherNote, settings, note, index, step, axis});
  }
};
// Writing MetadataGetter for method: VROSC::TransmissionData::GetTransmissionDataXY
// Il2CppName: GetTransmissionDataXY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::VROSC::TransmissionData>* (*)(::VROSC::NetNoteboard*, int, int, ::VROSC::NotefieldColorSettings*, ::ArrayW<::VROSC::NoteBoardNote*>)>(&VROSC::TransmissionData::GetTransmissionDataXY)> {
  static const MethodInfo* get() {
    static auto* controller = &::il2cpp_utils::GetClassFromName("VROSC", "NetNoteboard")->byval_arg;
    static auto* noteNumberX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteNumberY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("VROSC", "NotefieldColorSettings")->byval_arg;
    static auto* XYNotes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("VROSC", "NoteBoardNote"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransmissionData), "GetTransmissionDataXY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controller, noteNumberX, noteNumberY, settings, XYNotes});
  }
};
// Writing MetadataGetter for method: VROSC::TransmissionData::GetTransmissionDataXZ
// Il2CppName: GetTransmissionDataXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::VROSC::TransmissionData>* (*)(::VROSC::NetNoteboard*, int, int, ::VROSC::NotefieldColorSettings*, ::ArrayW<::VROSC::NoteBoardNote*>)>(&VROSC::TransmissionData::GetTransmissionDataXZ)> {
  static const MethodInfo* get() {
    static auto* controller = &::il2cpp_utils::GetClassFromName("VROSC", "NetNoteboard")->byval_arg;
    static auto* noteNumberX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteNumberZ = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("VROSC", "NotefieldColorSettings")->byval_arg;
    static auto* XZNotes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("VROSC", "NoteBoardNote"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransmissionData), "GetTransmissionDataXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controller, noteNumberX, noteNumberZ, settings, XZNotes});
  }
};
// Writing MetadataGetter for method: VROSC::TransmissionData::GetTransmissionDataYZ
// Il2CppName: GetTransmissionDataYZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::VROSC::TransmissionData>* (*)(::VROSC::NetNoteboard*, int, int, ::VROSC::NotefieldColorSettings*, ::ArrayW<::VROSC::NoteBoardNote*>)>(&VROSC::TransmissionData::GetTransmissionDataYZ)> {
  static const MethodInfo* get() {
    static auto* controller = &::il2cpp_utils::GetClassFromName("VROSC", "NetNoteboard")->byval_arg;
    static auto* noteNumberY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteNumberZ = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("VROSC", "NotefieldColorSettings")->byval_arg;
    static auto* YZNotes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("VROSC", "NoteBoardNote"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransmissionData), "GetTransmissionDataYZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controller, noteNumberY, noteNumberZ, settings, YZNotes});
  }
};
