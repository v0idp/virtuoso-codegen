// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.PlayableAsset
#include "UnityEngine/Playables/PlayableAsset.hpp"
// Including type: VROSC.TutorialEvent
#include "VROSC/TutorialEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: TutorialEventBehaviour
  class TutorialEventBehaviour;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: PlayableGraph
  struct PlayableGraph;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TutorialEventAsset
  class TutorialEventAsset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TutorialEventAsset);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TutorialEventAsset*, "VROSC", "TutorialEventAsset");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TutorialEventAsset
  // [TokenAttribute] Offset: FFFFFFFF
  class TutorialEventAsset : public ::UnityEngine::Playables::PlayableAsset {
    public:
    public:
    // public VROSC.TutorialEventBehaviour settings
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::TutorialEventBehaviour* settings;
    // Field size check
    static_assert(sizeof(::VROSC::TutorialEventBehaviour*) == 0x8);
    // private VROSC.TutorialEvent _startEvent
    // Size: 0x4
    // Offset: 0x20
    ::VROSC::TutorialEvent startEvent;
    // Field size check
    static_assert(sizeof(::VROSC::TutorialEvent) == 0x4);
    // private VROSC.TutorialEvent _endEvent
    // Size: 0x4
    // Offset: 0x24
    ::VROSC::TutorialEvent endEvent;
    // Field size check
    static_assert(sizeof(::VROSC::TutorialEvent) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public VROSC.TutorialEventBehaviour settings
    [[deprecated("Use field access instead!")]] ::VROSC::TutorialEventBehaviour*& dyn_settings();
    // Get instance field reference: private VROSC.TutorialEvent _startEvent
    [[deprecated("Use field access instead!")]] ::VROSC::TutorialEvent& dyn__startEvent();
    // Get instance field reference: private VROSC.TutorialEvent _endEvent
    [[deprecated("Use field access instead!")]] ::VROSC::TutorialEvent& dyn__endEvent();
    // public System.Void .ctor()
    // Offset: 0xA2F070
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TutorialEventAsset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TutorialEventAsset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TutorialEventAsset*, creationType>()));
    }
    // public override UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject owner)
    // Offset: 0xA2EF68
    // Implemented from: UnityEngine.Playables.PlayableAsset
    // Base method: UnityEngine.Playables.Playable PlayableAsset::CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject owner)
    ::UnityEngine::Playables::Playable CreatePlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* owner);
  }; // VROSC.TutorialEventAsset
  #pragma pack(pop)
  static check_size<sizeof(TutorialEventAsset), 36 + sizeof(::VROSC::TutorialEvent)> __VROSC_TutorialEventAssetSizeCheck;
  static_assert(sizeof(TutorialEventAsset) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TutorialEventAsset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::TutorialEventAsset::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Playables::Playable (VROSC::TutorialEventAsset::*)(::UnityEngine::Playables::PlayableGraph, ::UnityEngine::GameObject*)>(&VROSC::TutorialEventAsset::CreatePlayable)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->byval_arg;
    static auto* owner = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialEventAsset*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, owner});
  }
};
