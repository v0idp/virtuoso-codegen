// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: Dashboard
  class Dashboard;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::Dashboard);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::Dashboard*, "VROSC", "Dashboard");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x26
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.Dashboard
  // [TokenAttribute] Offset: FFFFFFFF
  class Dashboard : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // protected UnityEngine.GameObject _dashboardObject
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* dashboardObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // protected System.Boolean _showingDashboard
    // Size: 0x1
    // Offset: 0x20
    bool showingDashboard;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <KeepFromClosing>k__BackingField
    // Size: 0x1
    // Offset: 0x21
    bool KeepFromClosing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _allowOpenWhenPlaying
    // Size: 0x1
    // Offset: 0x22
    bool allowOpenWhenPlaying;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _freeFloating
    // Size: 0x1
    // Offset: 0x23
    bool freeFloating;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _inHand
    // Size: 0x1
    // Offset: 0x24
    bool inHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _disabled
    // Size: 0x1
    // Offset: 0x25
    bool disabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public System.Action`1<System.Boolean> OnDashboardToggled
    static ::System::Action_1<bool>* _get_OnDashboardToggled();
    // Set static field: static public System.Action`1<System.Boolean> OnDashboardToggled
    static void _set_OnDashboardToggled(::System::Action_1<bool>* value);
    // Get static field: static public System.Action`1<System.Boolean> DashboardVisibilityChanged
    static ::System::Action_1<bool>* _get_DashboardVisibilityChanged();
    // Set static field: static public System.Action`1<System.Boolean> DashboardVisibilityChanged
    static void _set_DashboardVisibilityChanged(::System::Action_1<bool>* value);
    // Get instance field reference: protected UnityEngine.GameObject _dashboardObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__dashboardObject();
    // Get instance field reference: protected System.Boolean _showingDashboard
    [[deprecated("Use field access instead!")]] bool& dyn__showingDashboard();
    // Get instance field reference: private System.Boolean <KeepFromClosing>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$KeepFromClosing$k__BackingField();
    // Get instance field reference: protected System.Boolean _allowOpenWhenPlaying
    [[deprecated("Use field access instead!")]] bool& dyn__allowOpenWhenPlaying();
    // Get instance field reference: protected System.Boolean _freeFloating
    [[deprecated("Use field access instead!")]] bool& dyn__freeFloating();
    // Get instance field reference: protected System.Boolean _inHand
    [[deprecated("Use field access instead!")]] bool& dyn__inHand();
    // Get instance field reference: protected System.Boolean _disabled
    [[deprecated("Use field access instead!")]] bool& dyn__disabled();
    // private System.Boolean get_KeepFromClosing()
    // Offset: 0x8E0634
    bool get_KeepFromClosing();
    // public System.Void set_KeepFromClosing(System.Boolean value)
    // Offset: 0x8E063C
    void set_KeepFromClosing(bool value);
    // public System.Boolean get_Disabled()
    // Offset: 0x8E0648
    bool get_Disabled();
    // protected System.Void .ctor()
    // Offset: 0x8E0974
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Dashboard* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::Dashboard::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Dashboard*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x8E0650
    void Awake();
    // protected System.Void Update()
    // Offset: 0x8E0670
    void Update();
    // protected System.Void SetFreeFloating()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetFreeFloating();
    // public System.Void SetActive(System.Boolean shouldBeActive)
    // Offset: 0x8E07F4
    void SetActive(bool shouldBeActive);
    // public System.Void SetDisabled(System.Boolean disabled)
    // Offset: 0x8E0940
    void SetDisabled(bool disabled);
    // protected System.Void MoveToHand()
    // Offset: 0x8E094C
    void MoveToHand();
    // protected System.Void ReturnToFreeFloat()
    // Offset: 0x8E0950
    void ReturnToFreeFloat();
    // protected System.Void UpdateVisibility(System.Boolean show)
    // Offset: 0x8E0954
    void UpdateVisibility(bool show);
    // protected System.Boolean EvaluateActivationCondition()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool EvaluateActivationCondition();
    // protected System.Boolean EvaluateDropCondition()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool EvaluateDropCondition();
    // protected System.Boolean EvaluateDeactivationCondition()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool EvaluateDeactivationCondition();
    // protected System.Void PlaceDashboard()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void PlaceDashboard();
  }; // VROSC.Dashboard
  #pragma pack(pop)
  static check_size<sizeof(Dashboard), 37 + sizeof(bool)> __VROSC_DashboardSizeCheck;
  static_assert(sizeof(Dashboard) == 0x26);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::Dashboard::get_KeepFromClosing
// Il2CppName: get_KeepFromClosing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::Dashboard::*)()>(&VROSC::Dashboard::get_KeepFromClosing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Dashboard*), "get_KeepFromClosing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Dashboard::set_KeepFromClosing
// Il2CppName: set_KeepFromClosing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Dashboard::*)(bool)>(&VROSC::Dashboard::set_KeepFromClosing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Dashboard*), "set_KeepFromClosing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::Dashboard::get_Disabled
// Il2CppName: get_Disabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::Dashboard::*)()>(&VROSC::Dashboard::get_Disabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Dashboard*), "get_Disabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Dashboard::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::Dashboard::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Dashboard::*)()>(&VROSC::Dashboard::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Dashboard*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Dashboard::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Dashboard::*)()>(&VROSC::Dashboard::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Dashboard*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Dashboard::SetFreeFloating
// Il2CppName: SetFreeFloating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Dashboard::*)()>(&VROSC::Dashboard::SetFreeFloating)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Dashboard*), "SetFreeFloating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Dashboard::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Dashboard::*)(bool)>(&VROSC::Dashboard::SetActive)> {
  static const MethodInfo* get() {
    static auto* shouldBeActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Dashboard*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shouldBeActive});
  }
};
// Writing MetadataGetter for method: VROSC::Dashboard::SetDisabled
// Il2CppName: SetDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Dashboard::*)(bool)>(&VROSC::Dashboard::SetDisabled)> {
  static const MethodInfo* get() {
    static auto* disabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Dashboard*), "SetDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disabled});
  }
};
// Writing MetadataGetter for method: VROSC::Dashboard::MoveToHand
// Il2CppName: MoveToHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Dashboard::*)()>(&VROSC::Dashboard::MoveToHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Dashboard*), "MoveToHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Dashboard::ReturnToFreeFloat
// Il2CppName: ReturnToFreeFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Dashboard::*)()>(&VROSC::Dashboard::ReturnToFreeFloat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Dashboard*), "ReturnToFreeFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Dashboard::UpdateVisibility
// Il2CppName: UpdateVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Dashboard::*)(bool)>(&VROSC::Dashboard::UpdateVisibility)> {
  static const MethodInfo* get() {
    static auto* show = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Dashboard*), "UpdateVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{show});
  }
};
// Writing MetadataGetter for method: VROSC::Dashboard::EvaluateActivationCondition
// Il2CppName: EvaluateActivationCondition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::Dashboard::*)()>(&VROSC::Dashboard::EvaluateActivationCondition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Dashboard*), "EvaluateActivationCondition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Dashboard::EvaluateDropCondition
// Il2CppName: EvaluateDropCondition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::Dashboard::*)()>(&VROSC::Dashboard::EvaluateDropCondition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Dashboard*), "EvaluateDropCondition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Dashboard::EvaluateDeactivationCondition
// Il2CppName: EvaluateDeactivationCondition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::Dashboard::*)()>(&VROSC::Dashboard::EvaluateDeactivationCondition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Dashboard*), "EvaluateDeactivationCondition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Dashboard::PlaceDashboard
// Il2CppName: PlaceDashboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Dashboard::*)()>(&VROSC::Dashboard::PlaceDashboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Dashboard*), "PlaceDashboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
