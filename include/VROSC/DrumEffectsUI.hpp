// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: UISlider
  class UISlider;
  // Forward declaring type: AnimatedPanel
  class AnimatedPanel;
  // Forward declaring type: ModularDrumsDataController
  class ModularDrumsDataController;
  // Forward declaring type: ModularDrumsController
  class ModularDrumsController;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: DrumEffectsUI
  class DrumEffectsUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::DrumEffectsUI);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::DrumEffectsUI*, "VROSC", "DrumEffectsUI");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.DrumEffectsUI
  // [TokenAttribute] Offset: FFFFFFFF
  class DrumEffectsUI : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.UISlider _reverbAmountSlider
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::UISlider* reverbAmountSlider;
    // Field size check
    static_assert(sizeof(::VROSC::UISlider*) == 0x8);
    // private VROSC.UISlider _reverbLengthSlider
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::UISlider* reverbLengthSlider;
    // Field size check
    static_assert(sizeof(::VROSC::UISlider*) == 0x8);
    // private VROSC.UISlider _dryVolumeSlider
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::UISlider* dryVolumeSlider;
    // Field size check
    static_assert(sizeof(::VROSC::UISlider*) == 0x8);
    // private VROSC.UISlider _compressionSlider
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::UISlider* compressionSlider;
    // Field size check
    static_assert(sizeof(::VROSC::UISlider*) == 0x8);
    // private VROSC.AnimatedPanel _animation
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::AnimatedPanel* animation;
    // Field size check
    static_assert(sizeof(::VROSC::AnimatedPanel*) == 0x8);
    // private VROSC.ModularDrumsDataController _dataController
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::ModularDrumsDataController* dataController;
    // Field size check
    static_assert(sizeof(::VROSC::ModularDrumsDataController*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.UISlider _reverbAmountSlider
    [[deprecated]] ::VROSC::UISlider*& dyn__reverbAmountSlider();
    // Get instance field reference: private VROSC.UISlider _reverbLengthSlider
    [[deprecated]] ::VROSC::UISlider*& dyn__reverbLengthSlider();
    // Get instance field reference: private VROSC.UISlider _dryVolumeSlider
    [[deprecated]] ::VROSC::UISlider*& dyn__dryVolumeSlider();
    // Get instance field reference: private VROSC.UISlider _compressionSlider
    [[deprecated]] ::VROSC::UISlider*& dyn__compressionSlider();
    // Get instance field reference: private VROSC.AnimatedPanel _animation
    [[deprecated]] ::VROSC::AnimatedPanel*& dyn__animation();
    // Get instance field reference: private VROSC.ModularDrumsDataController _dataController
    [[deprecated]] ::VROSC::ModularDrumsDataController*& dyn__dataController();
    // public System.Void Setup(VROSC.ModularDrumsController controller)
    // Offset: 0x8E5470
    void Setup(::VROSC::ModularDrumsController* controller);
    // public System.Void SetActive(System.Boolean shouldBeOpen, System.Boolean animate)
    // Offset: 0x8E59C0
    void SetActive(bool shouldBeOpen, bool animate);
    // private System.Void DataLoaded(VROSC.ModularDrumsDataController dataController)
    // Offset: 0x8E58D0
    void DataLoaded(::VROSC::ModularDrumsDataController* dataController);
    // private System.Void OnDestroy()
    // Offset: 0x8E5A14
    void OnDestroy();
    // private System.Void SetReverbAmount(System.Single amount)
    // Offset: 0x8E5C14
    void SetReverbAmount(float amount);
    // private System.Void SetReverbLength(System.Single length)
    // Offset: 0x8E5C94
    void SetReverbLength(float length);
    // private System.Void SetDryVolume(System.Single volume)
    // Offset: 0x8E5D14
    void SetDryVolume(float volume);
    // private System.Void SetCompression(System.Single compression)
    // Offset: 0x8E5D94
    void SetCompression(float compression);
    // public System.Void .ctor()
    // Offset: 0x8E5E14
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DrumEffectsUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::DrumEffectsUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DrumEffectsUI*, creationType>()));
    }
  }; // VROSC.DrumEffectsUI
  #pragma pack(pop)
  static check_size<sizeof(DrumEffectsUI), 64 + sizeof(::VROSC::ModularDrumsDataController*)> __VROSC_DrumEffectsUISizeCheck;
  static_assert(sizeof(DrumEffectsUI) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::DrumEffectsUI::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumEffectsUI::*)(::VROSC::ModularDrumsController*)>(&VROSC::DrumEffectsUI::Setup)> {
  static const MethodInfo* get() {
    static auto* controller = &::il2cpp_utils::GetClassFromName("VROSC", "ModularDrumsController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumEffectsUI*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controller});
  }
};
// Writing MetadataGetter for method: VROSC::DrumEffectsUI::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumEffectsUI::*)(bool, bool)>(&VROSC::DrumEffectsUI::SetActive)> {
  static const MethodInfo* get() {
    static auto* shouldBeOpen = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* animate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumEffectsUI*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shouldBeOpen, animate});
  }
};
// Writing MetadataGetter for method: VROSC::DrumEffectsUI::DataLoaded
// Il2CppName: DataLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumEffectsUI::*)(::VROSC::ModularDrumsDataController*)>(&VROSC::DrumEffectsUI::DataLoaded)> {
  static const MethodInfo* get() {
    static auto* dataController = &::il2cpp_utils::GetClassFromName("VROSC", "ModularDrumsDataController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumEffectsUI*), "DataLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dataController});
  }
};
// Writing MetadataGetter for method: VROSC::DrumEffectsUI::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumEffectsUI::*)()>(&VROSC::DrumEffectsUI::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumEffectsUI*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DrumEffectsUI::SetReverbAmount
// Il2CppName: SetReverbAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumEffectsUI::*)(float)>(&VROSC::DrumEffectsUI::SetReverbAmount)> {
  static const MethodInfo* get() {
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumEffectsUI*), "SetReverbAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{amount});
  }
};
// Writing MetadataGetter for method: VROSC::DrumEffectsUI::SetReverbLength
// Il2CppName: SetReverbLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumEffectsUI::*)(float)>(&VROSC::DrumEffectsUI::SetReverbLength)> {
  static const MethodInfo* get() {
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumEffectsUI*), "SetReverbLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{length});
  }
};
// Writing MetadataGetter for method: VROSC::DrumEffectsUI::SetDryVolume
// Il2CppName: SetDryVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumEffectsUI::*)(float)>(&VROSC::DrumEffectsUI::SetDryVolume)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumEffectsUI*), "SetDryVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: VROSC::DrumEffectsUI::SetCompression
// Il2CppName: SetCompression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DrumEffectsUI::*)(float)>(&VROSC::DrumEffectsUI::SetCompression)> {
  static const MethodInfo* get() {
    static auto* compression = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DrumEffectsUI*), "SetCompression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{compression});
  }
};
// Writing MetadataGetter for method: VROSC::DrumEffectsUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
