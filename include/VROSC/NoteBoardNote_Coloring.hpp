// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.NoteBoardNote
#include "VROSC/NoteBoardNote.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::NoteBoardNote::Coloring, "VROSC", "NoteBoardNote/Coloring");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.NoteBoardNote/VROSC.Coloring
  // [TokenAttribute] Offset: FFFFFFFF
  struct NoteBoardNote::Coloring/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Coloring
    constexpr Coloring(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public VROSC.NoteBoardNote/VROSC.Coloring AsPlayed
    static constexpr const int AsPlayed = 0;
    // Get static field: static public VROSC.NoteBoardNote/VROSC.Coloring AsPlayed
    static ::VROSC::NoteBoardNote::Coloring _get_AsPlayed();
    // Set static field: static public VROSC.NoteBoardNote/VROSC.Coloring AsPlayed
    static void _set_AsPlayed(::VROSC::NoteBoardNote::Coloring value);
    // static field const value: static public VROSC.NoteBoardNote/VROSC.Coloring AlwaysX
    static constexpr const int AlwaysX = 1;
    // Get static field: static public VROSC.NoteBoardNote/VROSC.Coloring AlwaysX
    static ::VROSC::NoteBoardNote::Coloring _get_AlwaysX();
    // Set static field: static public VROSC.NoteBoardNote/VROSC.Coloring AlwaysX
    static void _set_AlwaysX(::VROSC::NoteBoardNote::Coloring value);
    // static field const value: static public VROSC.NoteBoardNote/VROSC.Coloring AlwaysY
    static constexpr const int AlwaysY = 2;
    // Get static field: static public VROSC.NoteBoardNote/VROSC.Coloring AlwaysY
    static ::VROSC::NoteBoardNote::Coloring _get_AlwaysY();
    // Set static field: static public VROSC.NoteBoardNote/VROSC.Coloring AlwaysY
    static void _set_AlwaysY(::VROSC::NoteBoardNote::Coloring value);
    // static field const value: static public VROSC.NoteBoardNote/VROSC.Coloring AlwaysZ
    static constexpr const int AlwaysZ = 3;
    // Get static field: static public VROSC.NoteBoardNote/VROSC.Coloring AlwaysZ
    static ::VROSC::NoteBoardNote::Coloring _get_AlwaysZ();
    // Set static field: static public VROSC.NoteBoardNote/VROSC.Coloring AlwaysZ
    static void _set_AlwaysZ(::VROSC::NoteBoardNote::Coloring value);
    // Get instance field reference: public System.Int32 value__
    int& dyn_value__();
  }; // VROSC.NoteBoardNote/VROSC.Coloring
  #pragma pack(pop)
  static check_size<sizeof(NoteBoardNote::Coloring), 0 + sizeof(int)> __VROSC_NoteBoardNote_ColoringSizeCheck;
  static_assert(sizeof(NoteBoardNote::Coloring) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
