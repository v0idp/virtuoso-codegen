// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: PatchGroup
  class PatchGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::PatchGroup);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::PatchGroup*, "VROSC", "PatchGroup");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.PatchGroup
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: 77F6C4
  class PatchGroup : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // private System.Collections.Generic.List`1<UnityEngine.Object> _patches
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::Object*>* patches;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Object*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.String DrumsName
    static constexpr const char* DrumsName = "Drums";
    // Get static field: static public System.String DrumsName
    static ::StringW _get_DrumsName();
    // Set static field: static public System.String DrumsName
    static void _set_DrumsName(::StringW value);
    // static field const value: static public System.String MicrophoneName
    static constexpr const char* MicrophoneName = "Microphone";
    // Get static field: static public System.String MicrophoneName
    static ::StringW _get_MicrophoneName();
    // Set static field: static public System.String MicrophoneName
    static void _set_MicrophoneName(::StringW value);
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Object> _patches
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Object*>*& dyn__patches();
    // public System.Collections.Generic.List`1<UnityEngine.Object> get_Patches()
    // Offset: 0xADD4AC
    ::System::Collections::Generic::List_1<::UnityEngine::Object*>* get_Patches();
    // public System.Void .ctor()
    // Offset: 0xADD5DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PatchGroup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PatchGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PatchGroup*, creationType>()));
    }
    // static public System.String GetPatchName(System.Object patch)
    // Offset: 0xADD4B4
    static ::StringW GetPatchName(::Il2CppObject* patch);
    // static public System.Boolean PatchIsDrums(System.Object patch)
    // Offset: 0xADD560
    static bool PatchIsDrums(::Il2CppObject* patch);
  }; // VROSC.PatchGroup
  #pragma pack(pop)
  static check_size<sizeof(PatchGroup), 24 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::Object*>*)> __VROSC_PatchGroupSizeCheck;
  static_assert(sizeof(PatchGroup) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::PatchGroup::get_Patches
// Il2CppName: get_Patches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Object*>* (VROSC::PatchGroup::*)()>(&VROSC::PatchGroup::get_Patches)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PatchGroup*), "get_Patches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PatchGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::PatchGroup::GetPatchName
// Il2CppName: GetPatchName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Il2CppObject*)>(&VROSC::PatchGroup::GetPatchName)> {
  static const MethodInfo* get() {
    static auto* patch = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PatchGroup*), "GetPatchName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{patch});
  }
};
// Writing MetadataGetter for method: VROSC::PatchGroup::PatchIsDrums
// Il2CppName: PatchIsDrums
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppObject*)>(&VROSC::PatchGroup::PatchIsDrums)> {
  static const MethodInfo* get() {
    static auto* patch = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PatchGroup*), "PatchIsDrums", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{patch});
  }
};
