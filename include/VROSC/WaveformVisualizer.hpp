// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: WaveformVisualizer
  class WaveformVisualizer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::WaveformVisualizer);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::WaveformVisualizer*, "VROSC", "WaveformVisualizer");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.WaveformVisualizer
  // [TokenAttribute] Offset: FFFFFFFF
  class WaveformVisualizer : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Renderer _visualizationRenderer
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Renderer* visualizationRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private System.Single _defaultVisualNormalization
    // Size: 0x4
    // Offset: 0x20
    float defaultVisualNormalization;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _visualizationWindowLength
    // Size: 0x4
    // Offset: 0x24
    float visualizationWindowLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _currentVisualizationPixel
    // Size: 0x4
    // Offset: 0x28
    int currentVisualizationPixel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _lastMeasuredPeakValue
    // Size: 0x4
    // Offset: 0x2C
    float lastMeasuredPeakValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _visualizationStartIndex
    // Size: 0x4
    // Offset: 0x30
    int visualizationStartIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: visualizationStartIndex and: visualizationTexture
    char __padding5[0x4] = {};
    // private UnityEngine.Texture2D _visualizationTexture
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Texture2D* visualizationTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private UnityEngine.Color[] _barColorArray
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Color> barColorArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // private UnityEngine.Color[] _wipeColorArray
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Color> wipeColorArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // private System.Single _pixelOverflow
    // Size: 0x4
    // Offset: 0x50
    float pixelOverflow;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 VisualizationXRes
    static constexpr const int VisualizationXRes = 1024;
    // Get static field: static private System.Int32 VisualizationXRes
    static int _get_VisualizationXRes();
    // Set static field: static private System.Int32 VisualizationXRes
    static void _set_VisualizationXRes(int value);
    // Get instance field reference: private UnityEngine.Renderer _visualizationRenderer
    [[deprecated]] ::UnityEngine::Renderer*& dyn__visualizationRenderer();
    // Get instance field reference: private System.Single _defaultVisualNormalization
    [[deprecated]] float& dyn__defaultVisualNormalization();
    // Get instance field reference: private System.Single _visualizationWindowLength
    [[deprecated]] float& dyn__visualizationWindowLength();
    // Get instance field reference: private System.Int32 _currentVisualizationPixel
    [[deprecated]] int& dyn__currentVisualizationPixel();
    // Get instance field reference: private System.Single _lastMeasuredPeakValue
    [[deprecated]] float& dyn__lastMeasuredPeakValue();
    // Get instance field reference: private System.Int32 _visualizationStartIndex
    [[deprecated]] int& dyn__visualizationStartIndex();
    // Get instance field reference: private UnityEngine.Texture2D _visualizationTexture
    [[deprecated]] ::UnityEngine::Texture2D*& dyn__visualizationTexture();
    // Get instance field reference: private UnityEngine.Color[] _barColorArray
    [[deprecated]] ::ArrayW<::UnityEngine::Color>& dyn__barColorArray();
    // Get instance field reference: private UnityEngine.Color[] _wipeColorArray
    [[deprecated]] ::ArrayW<::UnityEngine::Color>& dyn__wipeColorArray();
    // Get instance field reference: private System.Single _pixelOverflow
    [[deprecated]] float& dyn__pixelOverflow();
    // public System.Void Setup()
    // Offset: 0x950104
    void Setup();
    // public System.Void Clear()
    // Offset: 0x950234
    void Clear();
    // private System.Void WipeTexture()
    // Offset: 0x950240
    void WipeTexture();
    // public System.Void CreateVisualization(System.Single[] audioData, System.Int32 startIndex, System.Int32 endIndex)
    // Offset: 0x950290
    void CreateVisualization(::ArrayW<float> audioData, int startIndex, int endIndex);
    // public System.Void UpdateVisualization(System.Single[] newData, System.Single elapsedTimeSeconds)
    // Offset: 0x950538
    void UpdateVisualization(::ArrayW<float> newData, float elapsedTimeSeconds);
    // private System.Single GetVisualPower(System.Single[] audioData, System.Int32 startIndex, System.Int32 endIndex, System.Single normalize)
    // Offset: 0x950484
    float GetVisualPower(::ArrayW<float> audioData, int startIndex, int endIndex, float normalize);
    // private System.Void DrawPixelsToTexture(System.Int32 xPos, UnityEngine.Color[] colors)
    // Offset: 0x950504
    void DrawPixelsToTexture(int xPos, ::ArrayW<::UnityEngine::Color> colors);
    // public System.Void .ctor()
    // Offset: 0x9507D8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaveformVisualizer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::WaveformVisualizer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaveformVisualizer*, creationType>()));
    }
  }; // VROSC.WaveformVisualizer
  #pragma pack(pop)
  static check_size<sizeof(WaveformVisualizer), 80 + sizeof(float)> __VROSC_WaveformVisualizerSizeCheck;
  static_assert(sizeof(WaveformVisualizer) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::WaveformVisualizer::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::WaveformVisualizer::*)()>(&VROSC::WaveformVisualizer::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::WaveformVisualizer*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::WaveformVisualizer::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::WaveformVisualizer::*)()>(&VROSC::WaveformVisualizer::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::WaveformVisualizer*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::WaveformVisualizer::WipeTexture
// Il2CppName: WipeTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::WaveformVisualizer::*)()>(&VROSC::WaveformVisualizer::WipeTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::WaveformVisualizer*), "WipeTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::WaveformVisualizer::CreateVisualization
// Il2CppName: CreateVisualization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::WaveformVisualizer::*)(::ArrayW<float>, int, int)>(&VROSC::WaveformVisualizer::CreateVisualization)> {
  static const MethodInfo* get() {
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::WaveformVisualizer*), "CreateVisualization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioData, startIndex, endIndex});
  }
};
// Writing MetadataGetter for method: VROSC::WaveformVisualizer::UpdateVisualization
// Il2CppName: UpdateVisualization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::WaveformVisualizer::*)(::ArrayW<float>, float)>(&VROSC::WaveformVisualizer::UpdateVisualization)> {
  static const MethodInfo* get() {
    static auto* newData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* elapsedTimeSeconds = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::WaveformVisualizer*), "UpdateVisualization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newData, elapsedTimeSeconds});
  }
};
// Writing MetadataGetter for method: VROSC::WaveformVisualizer::GetVisualPower
// Il2CppName: GetVisualPower
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::WaveformVisualizer::*)(::ArrayW<float>, int, int, float)>(&VROSC::WaveformVisualizer::GetVisualPower)> {
  static const MethodInfo* get() {
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* normalize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::WaveformVisualizer*), "GetVisualPower", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioData, startIndex, endIndex, normalize});
  }
};
// Writing MetadataGetter for method: VROSC::WaveformVisualizer::DrawPixelsToTexture
// Il2CppName: DrawPixelsToTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::WaveformVisualizer::*)(int, ::ArrayW<::UnityEngine::Color>)>(&VROSC::WaveformVisualizer::DrawPixelsToTexture)> {
  static const MethodInfo* get() {
    static auto* xPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::WaveformVisualizer*), "DrawPixelsToTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xPos, colors});
  }
};
// Writing MetadataGetter for method: VROSC::WaveformVisualizer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
