// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.BaseDataController
#include "VROSC/BaseDataController.hpp"
// Including type: VROSC.WidgetSettings
#include "VROSC/WidgetSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: InstrumentsDataController
  class InstrumentsDataController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::InstrumentsDataController);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::InstrumentsDataController*, "VROSC", "InstrumentsDataController");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.InstrumentsDataController
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: 77EB08
  class InstrumentsDataController : public ::VROSC::BaseDataController {
    public:
    // Nested type: ::VROSC::InstrumentsDataController::PatchSettings
    class PatchSettings;
    // public System.Void ApplyDefaults(VROSC.WidgetSettings widgetDefaultSettings)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ApplyDefaults(::VROSC::WidgetSettings* widgetDefaultSettings);
    // public System.Boolean IsOpen(VROSC.WidgetSettings/VROSC.Identifier id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool IsOpen(::VROSC::WidgetSettings::Identifier id);
    // public UnityEngine.Vector3 GetPosition(VROSC.WidgetSettings/VROSC.Identifier id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector3 GetPosition(::VROSC::WidgetSettings::Identifier id);
    // public UnityEngine.Quaternion GetRotation(VROSC.WidgetSettings/VROSC.Identifier id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Quaternion GetRotation(::VROSC::WidgetSettings::Identifier id);
    // public UnityEngine.Vector3 GetScale(VROSC.WidgetSettings/VROSC.Identifier id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector3 GetScale(::VROSC::WidgetSettings::Identifier id);
    // public System.Void SetOpen(VROSC.WidgetSettings/VROSC.Identifier id, System.Boolean isOpen)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetOpen(::VROSC::WidgetSettings::Identifier id, bool isOpen);
    // public System.Void SetPosition(VROSC.WidgetSettings/VROSC.Identifier id, UnityEngine.Vector3 position)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetPosition(::VROSC::WidgetSettings::Identifier id, ::UnityEngine::Vector3 position);
    // public System.Void SetRotation(VROSC.WidgetSettings/VROSC.Identifier id, UnityEngine.Quaternion rotation)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetRotation(::VROSC::WidgetSettings::Identifier id, ::UnityEngine::Quaternion rotation);
    // public System.Void SetScale(VROSC.WidgetSettings/VROSC.Identifier id, UnityEngine.Vector3 scale)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetScale(::VROSC::WidgetSettings::Identifier id, ::UnityEngine::Vector3 scale);
    // public System.Void SetQuantize(VROSC.WidgetSettings/VROSC.Identifier id, System.Boolean quantize)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetQuantize(::VROSC::WidgetSettings::Identifier id, bool quantize);
    // public System.Void SetQuantizeTolerance(VROSC.WidgetSettings/VROSC.Identifier id, System.Single tolerance)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetQuantizeTolerance(::VROSC::WidgetSettings::Identifier id, float tolerance);
    // public System.Void SetQuantizeBeatDivision(VROSC.WidgetSettings/VROSC.Identifier id, System.Int32 division)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetQuantizeBeatDivision(::VROSC::WidgetSettings::Identifier id, int division);
    // public System.Boolean GetQuantize(VROSC.WidgetSettings/VROSC.Identifier id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool GetQuantize(::VROSC::WidgetSettings::Identifier id);
    // public System.Single GetQuantizeTolerance(VROSC.WidgetSettings/VROSC.Identifier id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    float GetQuantizeTolerance(::VROSC::WidgetSettings::Identifier id);
    // public System.Int32 GetQuantizeBeatDivision(VROSC.WidgetSettings/VROSC.Identifier id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetQuantizeBeatDivision(::VROSC::WidgetSettings::Identifier id);
    // protected System.Void .ctor()
    // Offset: 0x194881C
    // Implemented from: VROSC.BaseDataController
    // Base method: System.Void BaseDataController::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InstrumentsDataController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::InstrumentsDataController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InstrumentsDataController*, creationType>()));
    }
  }; // VROSC.InstrumentsDataController
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::InstrumentsDataController::ApplyDefaults
// Il2CppName: ApplyDefaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InstrumentsDataController::*)(::VROSC::WidgetSettings*)>(&VROSC::InstrumentsDataController::ApplyDefaults)> {
  static const MethodInfo* get() {
    static auto* widgetDefaultSettings = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentsDataController*), "ApplyDefaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{widgetDefaultSettings});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentsDataController::IsOpen
// Il2CppName: IsOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::InstrumentsDataController::*)(::VROSC::WidgetSettings::Identifier)>(&VROSC::InstrumentsDataController::IsOpen)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings/Identifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentsDataController*), "IsOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentsDataController::GetPosition
// Il2CppName: GetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::InstrumentsDataController::*)(::VROSC::WidgetSettings::Identifier)>(&VROSC::InstrumentsDataController::GetPosition)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings/Identifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentsDataController*), "GetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentsDataController::GetRotation
// Il2CppName: GetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (VROSC::InstrumentsDataController::*)(::VROSC::WidgetSettings::Identifier)>(&VROSC::InstrumentsDataController::GetRotation)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings/Identifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentsDataController*), "GetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentsDataController::GetScale
// Il2CppName: GetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::InstrumentsDataController::*)(::VROSC::WidgetSettings::Identifier)>(&VROSC::InstrumentsDataController::GetScale)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings/Identifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentsDataController*), "GetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentsDataController::SetOpen
// Il2CppName: SetOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InstrumentsDataController::*)(::VROSC::WidgetSettings::Identifier, bool)>(&VROSC::InstrumentsDataController::SetOpen)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings/Identifier")->byval_arg;
    static auto* isOpen = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentsDataController*), "SetOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, isOpen});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentsDataController::SetPosition
// Il2CppName: SetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InstrumentsDataController::*)(::VROSC::WidgetSettings::Identifier, ::UnityEngine::Vector3)>(&VROSC::InstrumentsDataController::SetPosition)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings/Identifier")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentsDataController*), "SetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, position});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentsDataController::SetRotation
// Il2CppName: SetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InstrumentsDataController::*)(::VROSC::WidgetSettings::Identifier, ::UnityEngine::Quaternion)>(&VROSC::InstrumentsDataController::SetRotation)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings/Identifier")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentsDataController*), "SetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, rotation});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentsDataController::SetScale
// Il2CppName: SetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InstrumentsDataController::*)(::VROSC::WidgetSettings::Identifier, ::UnityEngine::Vector3)>(&VROSC::InstrumentsDataController::SetScale)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings/Identifier")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentsDataController*), "SetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, scale});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentsDataController::SetQuantize
// Il2CppName: SetQuantize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InstrumentsDataController::*)(::VROSC::WidgetSettings::Identifier, bool)>(&VROSC::InstrumentsDataController::SetQuantize)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings/Identifier")->byval_arg;
    static auto* quantize = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentsDataController*), "SetQuantize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, quantize});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentsDataController::SetQuantizeTolerance
// Il2CppName: SetQuantizeTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InstrumentsDataController::*)(::VROSC::WidgetSettings::Identifier, float)>(&VROSC::InstrumentsDataController::SetQuantizeTolerance)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings/Identifier")->byval_arg;
    static auto* tolerance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentsDataController*), "SetQuantizeTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, tolerance});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentsDataController::SetQuantizeBeatDivision
// Il2CppName: SetQuantizeBeatDivision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InstrumentsDataController::*)(::VROSC::WidgetSettings::Identifier, int)>(&VROSC::InstrumentsDataController::SetQuantizeBeatDivision)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings/Identifier")->byval_arg;
    static auto* division = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentsDataController*), "SetQuantizeBeatDivision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, division});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentsDataController::GetQuantize
// Il2CppName: GetQuantize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::InstrumentsDataController::*)(::VROSC::WidgetSettings::Identifier)>(&VROSC::InstrumentsDataController::GetQuantize)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings/Identifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentsDataController*), "GetQuantize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentsDataController::GetQuantizeTolerance
// Il2CppName: GetQuantizeTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::InstrumentsDataController::*)(::VROSC::WidgetSettings::Identifier)>(&VROSC::InstrumentsDataController::GetQuantizeTolerance)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings/Identifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentsDataController*), "GetQuantizeTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentsDataController::GetQuantizeBeatDivision
// Il2CppName: GetQuantizeBeatDivision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::InstrumentsDataController::*)(::VROSC::WidgetSettings::Identifier)>(&VROSC::InstrumentsDataController::GetQuantizeBeatDivision)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings/Identifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentsDataController*), "GetQuantizeBeatDivision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentsDataController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
