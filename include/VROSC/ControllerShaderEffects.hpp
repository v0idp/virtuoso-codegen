// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ControllerShaderEffects
  class ControllerShaderEffects;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ControllerShaderEffects);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ControllerShaderEffects*, "VROSC", "ControllerShaderEffects");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ControllerShaderEffects
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  class ControllerShaderEffects : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::ControllerShaderEffects::ShaderSettings
    struct ShaderSettings;
    public:
    // private UnityEngine.Renderer _renderer
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Renderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // [HeaderAttribute] Offset: 0x787ED8
    // private System.Boolean _preview
    // Size: 0x1
    // Offset: 0x20
    bool preview;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: preview and: triggerButton
    char __padding1[0x3] = {};
    // private UnityEngine.Color _triggerButton
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::Color triggerButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _gripButton
    // Size: 0x10
    // Offset: 0x34
    ::UnityEngine::Color gripButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _topButton
    // Size: 0x10
    // Offset: 0x44
    ::UnityEngine::Color topButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _bottomButton
    // Size: 0x10
    // Offset: 0x54
    ::UnityEngine::Color bottomButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _menuButton
    // Size: 0x10
    // Offset: 0x64
    ::UnityEngine::Color menuButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _thumbstick
    // Size: 0x10
    // Offset: 0x74
    ::UnityEngine::Color thumbstick;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _special
    // Size: 0x10
    // Offset: 0x84
    ::UnityEngine::Color special;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // Padding between fields: special and: propBlock
    char __padding8[0x4] = {};
    // private UnityEngine.MaterialPropertyBlock _propBlock
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::MaterialPropertyBlock* propBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Renderer _renderer
    [[deprecated]] ::UnityEngine::Renderer*& dyn__renderer();
    // Get instance field reference: private System.Boolean _preview
    [[deprecated]] bool& dyn__preview();
    // Get instance field reference: private UnityEngine.Color _triggerButton
    [[deprecated]] ::UnityEngine::Color& dyn__triggerButton();
    // Get instance field reference: private UnityEngine.Color _gripButton
    [[deprecated]] ::UnityEngine::Color& dyn__gripButton();
    // Get instance field reference: private UnityEngine.Color _topButton
    [[deprecated]] ::UnityEngine::Color& dyn__topButton();
    // Get instance field reference: private UnityEngine.Color _bottomButton
    [[deprecated]] ::UnityEngine::Color& dyn__bottomButton();
    // Get instance field reference: private UnityEngine.Color _menuButton
    [[deprecated]] ::UnityEngine::Color& dyn__menuButton();
    // Get instance field reference: private UnityEngine.Color _thumbstick
    [[deprecated]] ::UnityEngine::Color& dyn__thumbstick();
    // Get instance field reference: private UnityEngine.Color _special
    [[deprecated]] ::UnityEngine::Color& dyn__special();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock _propBlock
    [[deprecated]] ::UnityEngine::MaterialPropertyBlock*& dyn__propBlock();
    // private System.Void OnEnable()
    // Offset: 0x8DDDF4
    void OnEnable();
    // private System.Void Update()
    // Offset: 0x8DDFDC
    void Update();
    // private System.Void CreatePropBlock()
    // Offset: 0x8DE0D0
    void CreatePropBlock();
    // public System.Void SetEffectOnShader(VROSC.ControllerShaderEffects/VROSC.ShaderSettings settings)
    // Offset: 0x8DDE34
    void SetEffectOnShader(::VROSC::ControllerShaderEffects::ShaderSettings settings);
    // public System.Void .ctor()
    // Offset: 0x8DE134
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ControllerShaderEffects* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ControllerShaderEffects::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ControllerShaderEffects*, creationType>()));
    }
  }; // VROSC.ControllerShaderEffects
  #pragma pack(pop)
  static check_size<sizeof(ControllerShaderEffects), 152 + sizeof(::UnityEngine::MaterialPropertyBlock*)> __VROSC_ControllerShaderEffectsSizeCheck;
  static_assert(sizeof(ControllerShaderEffects) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ControllerShaderEffects::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ControllerShaderEffects::*)()>(&VROSC::ControllerShaderEffects::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ControllerShaderEffects*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ControllerShaderEffects::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ControllerShaderEffects::*)()>(&VROSC::ControllerShaderEffects::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ControllerShaderEffects*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ControllerShaderEffects::CreatePropBlock
// Il2CppName: CreatePropBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ControllerShaderEffects::*)()>(&VROSC::ControllerShaderEffects::CreatePropBlock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ControllerShaderEffects*), "CreatePropBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ControllerShaderEffects::SetEffectOnShader
// Il2CppName: SetEffectOnShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ControllerShaderEffects::*)(::VROSC::ControllerShaderEffects::ShaderSettings)>(&VROSC::ControllerShaderEffects::SetEffectOnShader)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("VROSC", "ControllerShaderEffects/ShaderSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ControllerShaderEffects*), "SetEffectOnShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings});
  }
};
// Writing MetadataGetter for method: VROSC::ControllerShaderEffects::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
