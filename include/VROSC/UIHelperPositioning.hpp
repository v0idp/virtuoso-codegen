// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: UIHelperPositioning
  class UIHelperPositioning;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UIHelperPositioning);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UIHelperPositioning*, "VROSC", "UIHelperPositioning");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UIHelperPositioning
  // [TokenAttribute] Offset: FFFFFFFF
  class UIHelperPositioning : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::UIHelperPositioning::$MoveOutObject$d__8
    class $MoveOutObject$d__8;
    public:
    // private System.Single _directionOffset
    // Size: 0x4
    // Offset: 0x18
    float directionOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _verticalOffset
    // Size: 0x4
    // Offset: 0x1C
    float verticalOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _moveTowardsFace
    // Size: 0x1
    // Offset: 0x20
    bool moveTowardsFace;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: moveTowardsFace and: minDistance
    char __padding2[0x3] = {};
    // private System.Single _minDistance
    // Size: 0x4
    // Offset: 0x24
    float minDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x78A8A4
    // private System.Single _lookAtCamera
    // Size: 0x4
    // Offset: 0x28
    float lookAtCamera;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lookAtCamera and: targetBone
    char __padding4[0x4] = {};
    // [HeaderAttribute] Offset: 0x78A8E4
    // private UnityEngine.Transform _targetBone
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* targetBone;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [HeaderAttribute] Offset: 0x78A930
    // private System.Single _moveDuration
    // Size: 0x4
    // Offset: 0x38
    float moveDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: moveDuration and: moveCurve
    char __padding6[0x4] = {};
    // private UnityEngine.AnimationCurve _moveCurve
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AnimationCurve* moveCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single _directionOffset
    [[deprecated]] float& dyn__directionOffset();
    // Get instance field reference: private System.Single _verticalOffset
    [[deprecated]] float& dyn__verticalOffset();
    // Get instance field reference: private System.Boolean _moveTowardsFace
    [[deprecated]] bool& dyn__moveTowardsFace();
    // Get instance field reference: private System.Single _minDistance
    [[deprecated]] float& dyn__minDistance();
    // Get instance field reference: private System.Single _lookAtCamera
    [[deprecated]] float& dyn__lookAtCamera();
    // Get instance field reference: private UnityEngine.Transform _targetBone
    [[deprecated]] ::UnityEngine::Transform*& dyn__targetBone();
    // Get instance field reference: private System.Single _moveDuration
    [[deprecated]] float& dyn__moveDuration();
    // Get instance field reference: private UnityEngine.AnimationCurve _moveCurve
    [[deprecated]] ::UnityEngine::AnimationCurve*& dyn__moveCurve();
    // public System.Collections.IEnumerator MoveOutObject(UnityEngine.Transform target, UnityEngine.Vector3 endPosition, UnityEngine.Vector3 size)
    // Offset: 0x190F614
    ::System::Collections::IEnumerator* MoveOutObject(::UnityEngine::Transform* target, ::UnityEngine::Vector3 endPosition, ::UnityEngine::Vector3 size);
    // public System.Void PlaceAtEndPosition(UnityEngine.Transform target, VROSC.InputDevice device)
    // Offset: 0x190F6C8
    void PlaceAtEndPosition(::UnityEngine::Transform* target, ::VROSC::InputDevice* device);
    // public System.Void PlaceTargetBone(UnityEngine.Transform target, UnityEngine.Vector3 size)
    // Offset: 0x190FA80
    void PlaceTargetBone(::UnityEngine::Transform* target, ::UnityEngine::Vector3 size);
    // public System.Void .ctor()
    // Offset: 0x190FB7C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIHelperPositioning* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UIHelperPositioning::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIHelperPositioning*, creationType>()));
    }
  }; // VROSC.UIHelperPositioning
  #pragma pack(pop)
  static check_size<sizeof(UIHelperPositioning), 64 + sizeof(::UnityEngine::AnimationCurve*)> __VROSC_UIHelperPositioningSizeCheck;
  static_assert(sizeof(UIHelperPositioning) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UIHelperPositioning::MoveOutObject
// Il2CppName: MoveOutObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (VROSC::UIHelperPositioning::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&VROSC::UIHelperPositioning::MoveOutObject)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* endPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIHelperPositioning*), "MoveOutObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, endPosition, size});
  }
};
// Writing MetadataGetter for method: VROSC::UIHelperPositioning::PlaceAtEndPosition
// Il2CppName: PlaceAtEndPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIHelperPositioning::*)(::UnityEngine::Transform*, ::VROSC::InputDevice*)>(&VROSC::UIHelperPositioning::PlaceAtEndPosition)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIHelperPositioning*), "PlaceAtEndPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, device});
  }
};
// Writing MetadataGetter for method: VROSC::UIHelperPositioning::PlaceTargetBone
// Il2CppName: PlaceTargetBone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIHelperPositioning::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&VROSC::UIHelperPositioning::PlaceTargetBone)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIHelperPositioning*), "PlaceTargetBone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, size});
  }
};
// Writing MetadataGetter for method: VROSC::UIHelperPositioning::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
