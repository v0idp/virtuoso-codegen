// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: HelmPatchFormat
  class HelmPatchFormat;
  // Forward declaring type: Param
  struct Param;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: PatchSettings
  class PatchSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::PatchSettings);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::PatchSettings*, "VROSC", "PatchSettings");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.PatchSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class PatchSettings : public ::Il2CppObject {
    public:
    public:
    // public AudioHelm.HelmPatchFormat Patch
    // Size: 0x8
    // Offset: 0x10
    ::AudioHelm::HelmPatchFormat* Patch;
    // Field size check
    static_assert(sizeof(::AudioHelm::HelmPatchFormat*) == 0x8);
    public:
    // Creating conversion operator: operator ::AudioHelm::HelmPatchFormat*
    constexpr operator ::AudioHelm::HelmPatchFormat*() const noexcept {
      return Patch;
    }
    // Get instance field reference: public AudioHelm.HelmPatchFormat Patch
    [[deprecated]] ::AudioHelm::HelmPatchFormat*& dyn_Patch();
    // static public System.Single GetVirtuosoAdjustedPercentValue(AudioHelm.Param parameter, System.Single percent)
    // Offset: 0xADD5E4
    static float GetVirtuosoAdjustedPercentValue(::AudioHelm::Param parameter, float percent);
    // public System.Void SetParameterPercent(AudioHelm.Param parameter, System.Single percent)
    // Offset: 0xADD60C
    void SetParameterPercent(::AudioHelm::Param parameter, float percent);
    // public System.Single GetParameterPercent(AudioHelm.Param parameter)
    // Offset: 0xADCE10
    float GetParameterPercent(::AudioHelm::Param parameter);
    // public System.Void SetParameterValue(AudioHelm.Param parameter, System.Single newValue)
    // Offset: 0xADD69C
    void SetParameterValue(::AudioHelm::Param parameter, float newValue);
    // public System.Single GetParameterValue(AudioHelm.Param parameter)
    // Offset: 0xADE0C0
    float GetParameterValue(::AudioHelm::Param parameter);
    // public System.Void .ctor()
    // Offset: 0xADE81C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PatchSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PatchSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PatchSettings*, creationType>()));
    }
  }; // VROSC.PatchSettings
  #pragma pack(pop)
  static check_size<sizeof(PatchSettings), 16 + sizeof(::AudioHelm::HelmPatchFormat*)> __VROSC_PatchSettingsSizeCheck;
  static_assert(sizeof(PatchSettings) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::PatchSettings::GetVirtuosoAdjustedPercentValue
// Il2CppName: GetVirtuosoAdjustedPercentValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::AudioHelm::Param, float)>(&VROSC::PatchSettings::GetVirtuosoAdjustedPercentValue)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "Param")->byval_arg;
    static auto* percent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PatchSettings*), "GetVirtuosoAdjustedPercentValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter, percent});
  }
};
// Writing MetadataGetter for method: VROSC::PatchSettings::SetParameterPercent
// Il2CppName: SetParameterPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PatchSettings::*)(::AudioHelm::Param, float)>(&VROSC::PatchSettings::SetParameterPercent)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "Param")->byval_arg;
    static auto* percent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PatchSettings*), "SetParameterPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter, percent});
  }
};
// Writing MetadataGetter for method: VROSC::PatchSettings::GetParameterPercent
// Il2CppName: GetParameterPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::PatchSettings::*)(::AudioHelm::Param)>(&VROSC::PatchSettings::GetParameterPercent)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "Param")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PatchSettings*), "GetParameterPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter});
  }
};
// Writing MetadataGetter for method: VROSC::PatchSettings::SetParameterValue
// Il2CppName: SetParameterValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PatchSettings::*)(::AudioHelm::Param, float)>(&VROSC::PatchSettings::SetParameterValue)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "Param")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PatchSettings*), "SetParameterValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter, newValue});
  }
};
// Writing MetadataGetter for method: VROSC::PatchSettings::GetParameterValue
// Il2CppName: GetParameterValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::PatchSettings::*)(::AudioHelm::Param)>(&VROSC::PatchSettings::GetParameterValue)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("AudioHelm", "Param")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PatchSettings*), "GetParameterValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter});
  }
};
// Writing MetadataGetter for method: VROSC::PatchSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
