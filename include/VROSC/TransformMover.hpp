// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.Grabable
#include "VROSC/Grabable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: MinMaxFloat
  class MinMaxFloat;
  // Forward declaring type: LocalTransformData
  class LocalTransformData;
  // Forward declaring type: WorldTransformData
  class WorldTransformData;
  // Forward declaring type: TooltipData
  class TooltipData;
  // Forward declaring type: GrabbingDevice
  class GrabbingDevice;
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: TriggerButton
  struct TriggerButton;
  // Forward declaring type: GrabData
  class GrabData;
  // Forward declaring type: TransformDataController
  class TransformDataController;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TransformMover
  class TransformMover;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TransformMover);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TransformMover*, "VROSC", "TransformMover");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xE0
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TransformMover
  // [TokenAttribute] Offset: FFFFFFFF
  class TransformMover : public ::VROSC::Grabable {
    public:
    // Writing base type padding for base size: 0x69 to desired offset: 0x6C
    char ___base_padding[0x3] = {};
    // Nested type: ::VROSC::TransformMover::$MoveInObject$d__48
    class $MoveInObject$d__48;
    public:
    // private System.Single <Scale>k__BackingField
    // Size: 0x4
    // Offset: 0x6C
    float Scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _disableRotation
    // Size: 0x1
    // Offset: 0x70
    bool disableRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _lockUpright
    // Size: 0x1
    // Offset: 0x71
    bool lockUpright;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _dontLockInOneHanded
    // Size: 0x1
    // Offset: 0x72
    bool dontLockInOneHanded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: dontLockInOneHanded and: scalingLimits
    char __padding3[0x5] = {};
    // private VROSC.MinMaxFloat _scalingLimits
    // Size: 0x8
    // Offset: 0x78
    ::VROSC::MinMaxFloat* scalingLimits;
    // Field size check
    static_assert(sizeof(::VROSC::MinMaxFloat*) == 0x8);
    // private VROSC.LocalTransformData _originaltransformData
    // Size: 0x8
    // Offset: 0x80
    ::VROSC::LocalTransformData* originaltransformData;
    // Field size check
    static_assert(sizeof(::VROSC::LocalTransformData*) == 0x8);
    // private VROSC.WorldTransformData _grabOriginData
    // Size: 0x8
    // Offset: 0x88
    ::VROSC::WorldTransformData* grabOriginData;
    // Field size check
    static_assert(sizeof(::VROSC::WorldTransformData*) == 0x8);
    // private System.Single _scaleAtGrab
    // Size: 0x4
    // Offset: 0x90
    float scaleAtGrab;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _pinned
    // Size: 0x1
    // Offset: 0x94
    bool pinned;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _animating
    // Size: 0x1
    // Offset: 0x95
    bool animating;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: animating and: gripTooltip
    char __padding9[0x2] = {};
    // private VROSC.TooltipData _gripTooltip
    // Size: 0x8
    // Offset: 0x98
    ::VROSC::TooltipData* gripTooltip;
    // Field size check
    static_assert(sizeof(::VROSC::TooltipData*) == 0x8);
    // private VROSC.TooltipData _pinTooltip
    // Size: 0x8
    // Offset: 0xA0
    ::VROSC::TooltipData* pinTooltip;
    // Field size check
    static_assert(sizeof(::VROSC::TooltipData*) == 0x8);
    // private VROSC.TooltipData _unpinTooltip
    // Size: 0x8
    // Offset: 0xA8
    ::VROSC::TooltipData* unpinTooltip;
    // Field size check
    static_assert(sizeof(::VROSC::TooltipData*) == 0x8);
    // private VROSC.TooltipData _attractTooltip
    // Size: 0x8
    // Offset: 0xB0
    ::VROSC::TooltipData* attractTooltip;
    // Field size check
    static_assert(sizeof(::VROSC::TooltipData*) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.TooltipData> _pinnedTooltips
    // Size: 0x8
    // Offset: 0xB8
    ::System::Collections::Generic::List_1<::VROSC::TooltipData*>* pinnedTooltips;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::TooltipData*>*) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.TooltipData> _unpinnedTooltips
    // Size: 0x8
    // Offset: 0xC0
    ::System::Collections::Generic::List_1<::VROSC::TooltipData*>* unpinnedTooltips;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::TooltipData*>*) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.GrabbingDevice> <GrabbingDevices>k__BackingField
    // Size: 0x8
    // Offset: 0xC8
    ::System::Collections::Generic::List_1<::VROSC::GrabbingDevice*>* GrabbingDevices;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::GrabbingDevice*>*) == 0x8);
    // public System.Action`1<VROSC.TransformMover> OnGrabBegin
    // Size: 0x8
    // Offset: 0xD0
    ::System::Action_1<::VROSC::TransformMover*>* OnGrabBegin;
    // Field size check
    static_assert(sizeof(::System::Action_1<::VROSC::TransformMover*>*) == 0x8);
    // public System.Action`1<VROSC.TransformMover> OnGrabEnd
    // Size: 0x8
    // Offset: 0xD8
    ::System::Action_1<::VROSC::TransformMover*>* OnGrabEnd;
    // Field size check
    static_assert(sizeof(::System::Action_1<::VROSC::TransformMover*>*) == 0x8);
    public:
    // Get instance field reference: private System.Single <Scale>k__BackingField
    [[deprecated]] float& dyn_$Scale$k__BackingField();
    // Get instance field reference: private System.Boolean _disableRotation
    [[deprecated]] bool& dyn__disableRotation();
    // Get instance field reference: private System.Boolean _lockUpright
    [[deprecated]] bool& dyn__lockUpright();
    // Get instance field reference: private System.Boolean _dontLockInOneHanded
    [[deprecated]] bool& dyn__dontLockInOneHanded();
    // Get instance field reference: private VROSC.MinMaxFloat _scalingLimits
    [[deprecated]] ::VROSC::MinMaxFloat*& dyn__scalingLimits();
    // Get instance field reference: private VROSC.LocalTransformData _originaltransformData
    [[deprecated]] ::VROSC::LocalTransformData*& dyn__originaltransformData();
    // Get instance field reference: private VROSC.WorldTransformData _grabOriginData
    [[deprecated]] ::VROSC::WorldTransformData*& dyn__grabOriginData();
    // Get instance field reference: private System.Single _scaleAtGrab
    [[deprecated]] float& dyn__scaleAtGrab();
    // Get instance field reference: private System.Boolean _pinned
    [[deprecated]] bool& dyn__pinned();
    // Get instance field reference: private System.Boolean _animating
    [[deprecated]] bool& dyn__animating();
    // Get instance field reference: private VROSC.TooltipData _gripTooltip
    [[deprecated]] ::VROSC::TooltipData*& dyn__gripTooltip();
    // Get instance field reference: private VROSC.TooltipData _pinTooltip
    [[deprecated]] ::VROSC::TooltipData*& dyn__pinTooltip();
    // Get instance field reference: private VROSC.TooltipData _unpinTooltip
    [[deprecated]] ::VROSC::TooltipData*& dyn__unpinTooltip();
    // Get instance field reference: private VROSC.TooltipData _attractTooltip
    [[deprecated]] ::VROSC::TooltipData*& dyn__attractTooltip();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.TooltipData> _pinnedTooltips
    [[deprecated]] ::System::Collections::Generic::List_1<::VROSC::TooltipData*>*& dyn__pinnedTooltips();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.TooltipData> _unpinnedTooltips
    [[deprecated]] ::System::Collections::Generic::List_1<::VROSC::TooltipData*>*& dyn__unpinnedTooltips();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.GrabbingDevice> <GrabbingDevices>k__BackingField
    [[deprecated]] ::System::Collections::Generic::List_1<::VROSC::GrabbingDevice*>*& dyn_$GrabbingDevices$k__BackingField();
    // Get instance field reference: public System.Action`1<VROSC.TransformMover> OnGrabBegin
    [[deprecated]] ::System::Action_1<::VROSC::TransformMover*>*& dyn_OnGrabBegin();
    // Get instance field reference: public System.Action`1<VROSC.TransformMover> OnGrabEnd
    [[deprecated]] ::System::Action_1<::VROSC::TransformMover*>*& dyn_OnGrabEnd();
    // public System.Single get_Scale()
    // Offset: 0xA2A8E0
    float get_Scale();
    // private System.Void set_Scale(System.Single value)
    // Offset: 0xA2A8D8
    void set_Scale(float value);
    // public System.Boolean get_Grabbed()
    // Offset: 0xA2A8E8
    bool get_Grabbed();
    // public System.Boolean get_IsPinned()
    // Offset: 0xA2A93C
    bool get_IsPinned();
    // public System.Collections.Generic.List`1<VROSC.GrabbingDevice> get_GrabbingDevices()
    // Offset: 0xA2A94C
    ::System::Collections::Generic::List_1<::VROSC::GrabbingDevice*>* get_GrabbingDevices();
    // private System.Void set_GrabbingDevices(System.Collections.Generic.List`1<VROSC.GrabbingDevice> value)
    // Offset: 0xA2A944
    void set_GrabbingDevices(::System::Collections::Generic::List_1<::VROSC::GrabbingDevice*>* value);
    // protected System.Void Awake()
    // Offset: 0xA2A954
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0xA2AC68
    void OnEnable();
    // private System.Void ButtonEnd(VROSC.InputDevice inputDevice, VROSC.TriggerButton button)
    // Offset: 0xA2ADBC
    void ButtonEnd(::VROSC::InputDevice* inputDevice, ::VROSC::TriggerButton button);
    // System.Void SetPinned(System.Boolean isPinned)
    // Offset: 0xA2AEC0
    void SetPinned(bool isPinned);
    // public System.Void ResetTransform()
    // Offset: 0xA28A58
    void ResetTransform();
    // private System.Void LateUpdate()
    // Offset: 0xA2AECC
    void LateUpdate();
    // private System.Void RemoveGrabbingDevice(VROSC.InputDevice inputDevice)
    // Offset: 0xA2ADCC
    void RemoveGrabbingDevice(::VROSC::InputDevice* inputDevice);
    // private VROSC.GrabbingDevice GetGrabbingDevice(VROSC.InputDevice inputDevice)
    // Offset: 0xA2B0AC
    ::VROSC::GrabbingDevice* GetGrabbingDevice(::VROSC::InputDevice* inputDevice);
    // private System.Void GrabBegin(VROSC.GrabData data)
    // Offset: 0xA2B004
    void GrabBegin(::VROSC::GrabData* data);
    // private System.Void SetNewOrigin()
    // Offset: 0xA2B3A4
    void SetNewOrigin();
    // private System.Void AnchorForOneHand()
    // Offset: 0xA2B24C
    void AnchorForOneHand();
    // private System.Void UpdateDualHandLookat()
    // Offset: 0xA2B644
    void UpdateDualHandLookat();
    // protected System.Void UpdateGrab()
    // Offset: 0xA2B8C4
    void UpdateGrab();
    // private System.Void GetTwoHandScale()
    // Offset: 0xA2BD04
    void GetTwoHandScale();
    // public System.Void SetScale(System.Single scale)
    // Offset: 0xA28AA8
    void SetScale(float scale);
    // private System.Void ButtonBegin(VROSC.InputDevice inputDevice, VROSC.TriggerButton button)
    // Offset: 0xA2C2CC
    void ButtonBegin(::VROSC::InputDevice* inputDevice, ::VROSC::TriggerButton button);
    // private System.Void TogglePin()
    // Offset: 0xA2C42C
    void TogglePin();
    // private System.Collections.IEnumerator MoveInObject(VROSC.GrabbingDevice device)
    // Offset: 0xA2C3B4
    ::System::Collections::IEnumerator* MoveInObject(::VROSC::GrabbingDevice* device);
    // private System.Void UpdateIsGrabbedTooltips()
    // Offset: 0xA2B50C
    void UpdateIsGrabbedTooltips();
    // public System.Void ApplyTransformData(VROSC.TransformDataController controller)
    // Offset: 0xA2C464
    void ApplyTransformData(::VROSC::TransformDataController* controller);
    // public System.Void .ctor()
    // Offset: 0xA2C540
    // Implemented from: VROSC.Grabable
    // Base method: System.Void Grabable::.ctor()
    // Base method: System.Void Interactable::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransformMover* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransformMover::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransformMover*, creationType>()));
    }
    // public override System.Void Grab(VROSC.GrabData data, System.Boolean grabbing)
    // Offset: 0xA2AF40
    // Implemented from: VROSC.Grabable
    // Base method: System.Void Grabable::Grab(VROSC.GrabData data, System.Boolean grabbing)
    void Grab(::VROSC::GrabData* data, bool grabbing);
    // protected override System.Void OnDisable()
    // Offset: 0xA2C164
    // Implemented from: VROSC.Interactable
    // Base method: System.Void Interactable::OnDisable()
    void OnDisable();
  }; // VROSC.TransformMover
  #pragma pack(pop)
  static check_size<sizeof(TransformMover), 216 + sizeof(::System::Action_1<::VROSC::TransformMover*>*)> __VROSC_TransformMoverSizeCheck;
  static_assert(sizeof(TransformMover) == 0xE0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TransformMover::get_Scale
// Il2CppName: get_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::TransformMover::*)()>(&VROSC::TransformMover::get_Scale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "get_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::set_Scale
// Il2CppName: set_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)(float)>(&VROSC::TransformMover::set_Scale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "set_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::get_Grabbed
// Il2CppName: get_Grabbed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::TransformMover::*)()>(&VROSC::TransformMover::get_Grabbed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "get_Grabbed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::get_IsPinned
// Il2CppName: get_IsPinned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::TransformMover::*)()>(&VROSC::TransformMover::get_IsPinned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "get_IsPinned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::get_GrabbingDevices
// Il2CppName: get_GrabbingDevices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::VROSC::GrabbingDevice*>* (VROSC::TransformMover::*)()>(&VROSC::TransformMover::get_GrabbingDevices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "get_GrabbingDevices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::set_GrabbingDevices
// Il2CppName: set_GrabbingDevices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)(::System::Collections::Generic::List_1<::VROSC::GrabbingDevice*>*)>(&VROSC::TransformMover::set_GrabbingDevices)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "GrabbingDevice")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "set_GrabbingDevices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)()>(&VROSC::TransformMover::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)()>(&VROSC::TransformMover::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::ButtonEnd
// Il2CppName: ButtonEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)(::VROSC::InputDevice*, ::VROSC::TriggerButton)>(&VROSC::TransformMover::ButtonEnd)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* button = &::il2cpp_utils::GetClassFromName("VROSC", "TriggerButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "ButtonEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice, button});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::SetPinned
// Il2CppName: SetPinned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)(bool)>(&VROSC::TransformMover::SetPinned)> {
  static const MethodInfo* get() {
    static auto* isPinned = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "SetPinned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isPinned});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::ResetTransform
// Il2CppName: ResetTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)()>(&VROSC::TransformMover::ResetTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "ResetTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)()>(&VROSC::TransformMover::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::RemoveGrabbingDevice
// Il2CppName: RemoveGrabbingDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)(::VROSC::InputDevice*)>(&VROSC::TransformMover::RemoveGrabbingDevice)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "RemoveGrabbingDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::GetGrabbingDevice
// Il2CppName: GetGrabbingDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::GrabbingDevice* (VROSC::TransformMover::*)(::VROSC::InputDevice*)>(&VROSC::TransformMover::GetGrabbingDevice)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "GetGrabbingDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::GrabBegin
// Il2CppName: GrabBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)(::VROSC::GrabData*)>(&VROSC::TransformMover::GrabBegin)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("VROSC", "GrabData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "GrabBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::SetNewOrigin
// Il2CppName: SetNewOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)()>(&VROSC::TransformMover::SetNewOrigin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "SetNewOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::AnchorForOneHand
// Il2CppName: AnchorForOneHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)()>(&VROSC::TransformMover::AnchorForOneHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "AnchorForOneHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::UpdateDualHandLookat
// Il2CppName: UpdateDualHandLookat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)()>(&VROSC::TransformMover::UpdateDualHandLookat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "UpdateDualHandLookat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::UpdateGrab
// Il2CppName: UpdateGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)()>(&VROSC::TransformMover::UpdateGrab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "UpdateGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::GetTwoHandScale
// Il2CppName: GetTwoHandScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)()>(&VROSC::TransformMover::GetTwoHandScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "GetTwoHandScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::SetScale
// Il2CppName: SetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)(float)>(&VROSC::TransformMover::SetScale)> {
  static const MethodInfo* get() {
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "SetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scale});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::ButtonBegin
// Il2CppName: ButtonBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)(::VROSC::InputDevice*, ::VROSC::TriggerButton)>(&VROSC::TransformMover::ButtonBegin)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* button = &::il2cpp_utils::GetClassFromName("VROSC", "TriggerButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "ButtonBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice, button});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::TogglePin
// Il2CppName: TogglePin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)()>(&VROSC::TransformMover::TogglePin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "TogglePin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::MoveInObject
// Il2CppName: MoveInObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (VROSC::TransformMover::*)(::VROSC::GrabbingDevice*)>(&VROSC::TransformMover::MoveInObject)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "GrabbingDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "MoveInObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::UpdateIsGrabbedTooltips
// Il2CppName: UpdateIsGrabbedTooltips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)()>(&VROSC::TransformMover::UpdateIsGrabbedTooltips)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "UpdateIsGrabbedTooltips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::ApplyTransformData
// Il2CppName: ApplyTransformData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)(::VROSC::TransformDataController*)>(&VROSC::TransformMover::ApplyTransformData)> {
  static const MethodInfo* get() {
    static auto* controller = &::il2cpp_utils::GetClassFromName("VROSC", "TransformDataController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "ApplyTransformData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controller});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::TransformMover::Grab
// Il2CppName: Grab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)(::VROSC::GrabData*, bool)>(&VROSC::TransformMover::Grab)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("VROSC", "GrabData")->byval_arg;
    static auto* grabbing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "Grab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, grabbing});
  }
};
// Writing MetadataGetter for method: VROSC::TransformMover::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformMover::*)()>(&VROSC::TransformMover::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformMover*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
