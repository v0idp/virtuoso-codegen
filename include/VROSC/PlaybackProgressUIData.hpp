// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: PlaybackProgressUIData
  struct PlaybackProgressUIData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::PlaybackProgressUIData, "VROSC", "PlaybackProgressUIData");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: VROSC.PlaybackProgressUIData
  // [TokenAttribute] Offset: FFFFFFFF
  struct PlaybackProgressUIData/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.Boolean <ShowPlayButton>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool ShowPlayButton;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Boolean <WaitingToStart>k__BackingField
    // Size: 0x1
    // Offset: 0x1
    bool WaitingToStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: WaitingToStart and: PlayBackProgress
    char __padding1[0x2] = {};
    // private readonly System.Single <PlayBackProgress>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    float PlayBackProgress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Single <BeginningProgress>k__BackingField
    // Size: 0x4
    // Offset: 0x8
    float BeginningProgress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Single <Fade>k__BackingField
    // Size: 0x4
    // Offset: 0xC
    float Fade;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: PlaybackProgressUIData
    constexpr PlaybackProgressUIData(bool ShowPlayButton_ = {}, bool WaitingToStart_ = {}, float PlayBackProgress_ = {}, float BeginningProgress_ = {}, float Fade_ = {}) noexcept : ShowPlayButton{ShowPlayButton_}, WaitingToStart{WaitingToStart_}, PlayBackProgress{PlayBackProgress_}, BeginningProgress{BeginningProgress_}, Fade{Fade_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly System.Boolean <ShowPlayButton>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ShowPlayButton$k__BackingField();
    // Get instance field reference: private readonly System.Boolean <WaitingToStart>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$WaitingToStart$k__BackingField();
    // Get instance field reference: private readonly System.Single <PlayBackProgress>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$PlayBackProgress$k__BackingField();
    // Get instance field reference: private readonly System.Single <BeginningProgress>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$BeginningProgress$k__BackingField();
    // Get instance field reference: private readonly System.Single <Fade>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$Fade$k__BackingField();
    // public System.Boolean get_ShowPlayButton()
    // Offset: 0xAE1D4C
    bool get_ShowPlayButton();
    // public System.Boolean get_WaitingToStart()
    // Offset: 0xAE1D54
    bool get_WaitingToStart();
    // public System.Single get_PlayBackProgress()
    // Offset: 0xAE1D5C
    float get_PlayBackProgress();
    // public System.Single get_BeginningProgress()
    // Offset: 0xAE1D64
    float get_BeginningProgress();
    // public System.Single get_Fade()
    // Offset: 0xAE1D6C
    float get_Fade();
    // public System.Void .ctor(System.Boolean showPlayButton, System.Boolean waitingToStart, System.Single playBackProgress, System.Single beginProgress, System.Single fade)
    // Offset: 0xAE1D74
    // ABORTED: conflicts with another method.  PlaybackProgressUIData(bool showPlayButton, bool waitingToStart, float playBackProgress, float beginProgress, float fade);
  }; // VROSC.PlaybackProgressUIData
  #pragma pack(pop)
  static check_size<sizeof(PlaybackProgressUIData), 12 + sizeof(float)> __VROSC_PlaybackProgressUIDataSizeCheck;
  static_assert(sizeof(PlaybackProgressUIData) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::PlaybackProgressUIData::get_ShowPlayButton
// Il2CppName: get_ShowPlayButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::PlaybackProgressUIData::*)()>(&VROSC::PlaybackProgressUIData::get_ShowPlayButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PlaybackProgressUIData), "get_ShowPlayButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PlaybackProgressUIData::get_WaitingToStart
// Il2CppName: get_WaitingToStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::PlaybackProgressUIData::*)()>(&VROSC::PlaybackProgressUIData::get_WaitingToStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PlaybackProgressUIData), "get_WaitingToStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PlaybackProgressUIData::get_PlayBackProgress
// Il2CppName: get_PlayBackProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::PlaybackProgressUIData::*)()>(&VROSC::PlaybackProgressUIData::get_PlayBackProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PlaybackProgressUIData), "get_PlayBackProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PlaybackProgressUIData::get_BeginningProgress
// Il2CppName: get_BeginningProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::PlaybackProgressUIData::*)()>(&VROSC::PlaybackProgressUIData::get_BeginningProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PlaybackProgressUIData), "get_BeginningProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PlaybackProgressUIData::get_Fade
// Il2CppName: get_Fade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::PlaybackProgressUIData::*)()>(&VROSC::PlaybackProgressUIData::get_Fade)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PlaybackProgressUIData), "get_Fade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PlaybackProgressUIData::PlaybackProgressUIData
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
