// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.AudioHelmInstrumentWrapper
#include "VROSC/AudioHelmInstrumentWrapper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AudioHelm
namespace AudioHelm {
  // Forward declaring type: Sampler
  class Sampler;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: InternalSynthesizer
  class InternalSynthesizer;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: SamplerWrapper
  class SamplerWrapper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::SamplerWrapper);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::SamplerWrapper*, "VROSC", "SamplerWrapper");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.SamplerWrapper
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 77E7A8
  class SamplerWrapper : public ::VROSC::AudioHelmInstrumentWrapper {
    public:
    public:
    // private AudioHelm.Sampler _sampler
    // Size: 0x8
    // Offset: 0x18
    ::AudioHelm::Sampler* sampler;
    // Field size check
    static_assert(sizeof(::AudioHelm::Sampler*) == 0x8);
    // private VROSC.InternalSynthesizer _internalSynthesizer
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::InternalSynthesizer* internalSynthesizer;
    // Field size check
    static_assert(sizeof(::VROSC::InternalSynthesizer*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private AudioHelm.Sampler _sampler
    [[deprecated("Use field access instead!")]] ::AudioHelm::Sampler*& dyn__sampler();
    // Get instance field reference: private VROSC.InternalSynthesizer _internalSynthesizer
    [[deprecated("Use field access instead!")]] ::VROSC::InternalSynthesizer*& dyn__internalSynthesizer();
    // public System.Void ResetInstrument()
    // Offset: 0xDDDE64
    void ResetInstrument();
    // public System.Void .ctor()
    // Offset: 0xDDDEF8
    // Implemented from: VROSC.AudioHelmInstrumentWrapper
    // Base method: System.Void AudioHelmInstrumentWrapper::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SamplerWrapper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SamplerWrapper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SamplerWrapper*, creationType>()));
    }
    // public override System.Void Setup(VROSC.InternalSynthesizer internalSynthesizer)
    // Offset: 0xDDDDE0
    // Implemented from: VROSC.AudioHelmInstrumentWrapper
    // Base method: System.Void AudioHelmInstrumentWrapper::Setup(VROSC.InternalSynthesizer internalSynthesizer)
    void Setup(::VROSC::InternalSynthesizer* internalSynthesizer);
    // public override System.Void NoteOn(System.Int32 note, System.Single velocity, System.Double predictedDspTime, System.Single pitch)
    // Offset: 0xDDDE9C
    // Implemented from: VROSC.AudioHelmInstrumentWrapper
    // Base method: System.Void AudioHelmInstrumentWrapper::NoteOn(System.Int32 note, System.Single velocity, System.Double predictedDspTime, System.Single pitch)
    void NoteOn(int note, float velocity, double predictedDspTime, float pitch);
    // public override System.Void NoteOff(System.Int32 note)
    // Offset: 0xDDDEB4
    // Implemented from: VROSC.AudioHelmInstrumentWrapper
    // Base method: System.Void AudioHelmInstrumentWrapper::NoteOff(System.Int32 note)
    void NoteOff(int note);
    // public override System.Void AllNotesOff()
    // Offset: 0xDDDED8
    // Implemented from: VROSC.AudioHelmInstrumentWrapper
    // Base method: System.Void AudioHelmInstrumentWrapper::AllNotesOff()
    void AllNotesOff();
    // public override System.Void SetMidiCC(System.Single midiCCValue, System.Int32 midiCC)
    // Offset: 0xDDDEF0
    // Implemented from: VROSC.AudioHelmInstrumentWrapper
    // Base method: System.Void AudioHelmInstrumentWrapper::SetMidiCC(System.Single midiCCValue, System.Int32 midiCC)
    void SetMidiCC(float midiCCValue, int midiCC);
    // public override System.Void SetPitchBend(System.Single pitchBendValue)
    // Offset: 0xDDDEF4
    // Implemented from: VROSC.AudioHelmInstrumentWrapper
    // Base method: System.Void AudioHelmInstrumentWrapper::SetPitchBend(System.Single pitchBendValue)
    void SetPitchBend(float pitchBendValue);
  }; // VROSC.SamplerWrapper
  #pragma pack(pop)
  static check_size<sizeof(SamplerWrapper), 32 + sizeof(::VROSC::InternalSynthesizer*)> __VROSC_SamplerWrapperSizeCheck;
  static_assert(sizeof(SamplerWrapper) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::SamplerWrapper::ResetInstrument
// Il2CppName: ResetInstrument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SamplerWrapper::*)()>(&VROSC::SamplerWrapper::ResetInstrument)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SamplerWrapper*), "ResetInstrument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SamplerWrapper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::SamplerWrapper::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SamplerWrapper::*)(::VROSC::InternalSynthesizer*)>(&VROSC::SamplerWrapper::Setup)> {
  static const MethodInfo* get() {
    static auto* internalSynthesizer = &::il2cpp_utils::GetClassFromName("VROSC", "InternalSynthesizer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SamplerWrapper*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{internalSynthesizer});
  }
};
// Writing MetadataGetter for method: VROSC::SamplerWrapper::NoteOn
// Il2CppName: NoteOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SamplerWrapper::*)(int, float, double, float)>(&VROSC::SamplerWrapper::NoteOn)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* predictedDspTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SamplerWrapper*), "NoteOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, velocity, predictedDspTime, pitch});
  }
};
// Writing MetadataGetter for method: VROSC::SamplerWrapper::NoteOff
// Il2CppName: NoteOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SamplerWrapper::*)(int)>(&VROSC::SamplerWrapper::NoteOff)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SamplerWrapper*), "NoteOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note});
  }
};
// Writing MetadataGetter for method: VROSC::SamplerWrapper::AllNotesOff
// Il2CppName: AllNotesOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SamplerWrapper::*)()>(&VROSC::SamplerWrapper::AllNotesOff)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SamplerWrapper*), "AllNotesOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SamplerWrapper::SetMidiCC
// Il2CppName: SetMidiCC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SamplerWrapper::*)(float, int)>(&VROSC::SamplerWrapper::SetMidiCC)> {
  static const MethodInfo* get() {
    static auto* midiCCValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* midiCC = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SamplerWrapper*), "SetMidiCC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{midiCCValue, midiCC});
  }
};
// Writing MetadataGetter for method: VROSC::SamplerWrapper::SetPitchBend
// Il2CppName: SetPitchBend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SamplerWrapper::*)(float)>(&VROSC::SamplerWrapper::SetPitchBend)> {
  static const MethodInfo* get() {
    static auto* pitchBendValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SamplerWrapper*), "SetPitchBend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pitchBendValue});
  }
};
