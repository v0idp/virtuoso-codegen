// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.AdjustableMesh
#include "VROSC/AdjustableMesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC::UI::Meshes
namespace VROSC::UI::Meshes {
  // Forward declaring type: AdjustableMeshData
  class AdjustableMeshData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rect
  struct Rect;
  // Forward declaring type: Mesh
  class Mesh;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ResizeableAdjustableMesh
  class ResizeableAdjustableMesh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ResizeableAdjustableMesh);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ResizeableAdjustableMesh*, "VROSC", "ResizeableAdjustableMesh");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ResizeableAdjustableMesh
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  // [RequireComponent] Offset: 7806A8
  class ResizeableAdjustableMesh : public ::VROSC::AdjustableMesh {
    public:
    public:
    // private VROSC.UI.Meshes.AdjustableMeshData _data
    // Size: 0x8
    // Offset: 0x88
    ::VROSC::UI::Meshes::AdjustableMeshData* data;
    // Field size check
    static_assert(sizeof(::VROSC::UI::Meshes::AdjustableMeshData*) == 0x8);
    // private System.Boolean _alwaysUpdate
    // Size: 0x1
    // Offset: 0x90
    bool alwaysUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: alwaysUpdate and: lastHeight
    char __padding1[0x3] = {};
    // private System.Single _lastHeight
    // Size: 0x4
    // Offset: 0x94
    float lastHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _lastWidth
    // Size: 0x4
    // Offset: 0x98
    float lastWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastWidth and: originalPositions
    char __padding3[0x4] = {};
    // private UnityEngine.Vector3[] _originalPositions
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<::UnityEngine::Vector3> originalPositions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector3[] _modifiedPositions
    // Size: 0x8
    // Offset: 0xA8
    ::ArrayW<::UnityEngine::Vector3> modifiedPositions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    public:
    // Get instance field reference: private VROSC.UI.Meshes.AdjustableMeshData _data
    [[deprecated]] ::VROSC::UI::Meshes::AdjustableMeshData*& dyn__data();
    // Get instance field reference: private System.Boolean _alwaysUpdate
    [[deprecated]] bool& dyn__alwaysUpdate();
    // Get instance field reference: private System.Single _lastHeight
    [[deprecated]] float& dyn__lastHeight();
    // Get instance field reference: private System.Single _lastWidth
    [[deprecated]] float& dyn__lastWidth();
    // Get instance field reference: private UnityEngine.Vector3[] _originalPositions
    [[deprecated]] ::ArrayW<::UnityEngine::Vector3>& dyn__originalPositions();
    // Get instance field reference: private UnityEngine.Vector3[] _modifiedPositions
    [[deprecated]] ::ArrayW<::UnityEngine::Vector3>& dyn__modifiedPositions();
    // public System.Void UpdateMesh(System.Boolean force)
    // Offset: 0xB3461C
    void UpdateMesh(bool force);
    // private System.Void SetMeshSize(UnityEngine.Rect rect)
    // Offset: 0xB3475C
    void SetMeshSize(::UnityEngine::Rect rect);
    // private System.Void Update()
    // Offset: 0xB347C0
    void Update();
    // private System.Void OnDrawGizmos()
    // Offset: 0xB34A00
    void OnDrawGizmos();
    // public override UnityEngine.Mesh get_Original()
    // Offset: 0xB34530
    // Implemented from: VROSC.AdjustableMesh
    // Base method: UnityEngine.Mesh AdjustableMesh::get_Original()
    ::UnityEngine::Mesh* get_Original();
    // public System.Void .ctor()
    // Offset: 0xB34A90
    // Implemented from: VROSC.AdjustableMesh
    // Base method: System.Void AdjustableMesh::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ResizeableAdjustableMesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ResizeableAdjustableMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ResizeableAdjustableMesh*, creationType>()));
    }
    // protected override System.Void OnEnable()
    // Offset: 0xB3454C
    // Implemented from: VROSC.AdjustableMesh
    // Base method: System.Void AdjustableMesh::OnEnable()
    void OnEnable();
    // public override System.Void LoadMesh(System.Boolean force)
    // Offset: 0xB34560
    // Implemented from: VROSC.AdjustableMesh
    // Base method: System.Void AdjustableMesh::LoadMesh(System.Boolean force)
    void LoadMesh(bool force);
    // public override System.Void UpdateMeshAppearance(System.Single appearAmount, VROSC.AnimatedAppear/VROSC.Mode mode, System.Boolean useFlash)
    // Offset: 0xB34900
    // Implemented from: VROSC.AdjustableMesh
    // Base method: System.Void AdjustableMesh::UpdateMeshAppearance(System.Single appearAmount, VROSC.AnimatedAppear/VROSC.Mode mode, System.Boolean useFlash)
    void UpdateMeshAppearance(float appearAmount, ::VROSC::AnimatedAppear::Mode mode, bool useFlash);
  }; // VROSC.ResizeableAdjustableMesh
  #pragma pack(pop)
  static check_size<sizeof(ResizeableAdjustableMesh), 168 + sizeof(::ArrayW<::UnityEngine::Vector3>)> __VROSC_ResizeableAdjustableMeshSizeCheck;
  static_assert(sizeof(ResizeableAdjustableMesh) == 0xB0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ResizeableAdjustableMesh::UpdateMesh
// Il2CppName: UpdateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ResizeableAdjustableMesh::*)(bool)>(&VROSC::ResizeableAdjustableMesh::UpdateMesh)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ResizeableAdjustableMesh*), "UpdateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: VROSC::ResizeableAdjustableMesh::SetMeshSize
// Il2CppName: SetMeshSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ResizeableAdjustableMesh::*)(::UnityEngine::Rect)>(&VROSC::ResizeableAdjustableMesh::SetMeshSize)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ResizeableAdjustableMesh*), "SetMeshSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect});
  }
};
// Writing MetadataGetter for method: VROSC::ResizeableAdjustableMesh::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ResizeableAdjustableMesh::*)()>(&VROSC::ResizeableAdjustableMesh::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ResizeableAdjustableMesh*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ResizeableAdjustableMesh::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ResizeableAdjustableMesh::*)()>(&VROSC::ResizeableAdjustableMesh::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ResizeableAdjustableMesh*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ResizeableAdjustableMesh::get_Original
// Il2CppName: get_Original
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (VROSC::ResizeableAdjustableMesh::*)()>(&VROSC::ResizeableAdjustableMesh::get_Original)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ResizeableAdjustableMesh*), "get_Original", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ResizeableAdjustableMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::ResizeableAdjustableMesh::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ResizeableAdjustableMesh::*)()>(&VROSC::ResizeableAdjustableMesh::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ResizeableAdjustableMesh*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ResizeableAdjustableMesh::LoadMesh
// Il2CppName: LoadMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ResizeableAdjustableMesh::*)(bool)>(&VROSC::ResizeableAdjustableMesh::LoadMesh)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ResizeableAdjustableMesh*), "LoadMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: VROSC::ResizeableAdjustableMesh::UpdateMeshAppearance
// Il2CppName: UpdateMeshAppearance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ResizeableAdjustableMesh::*)(float, ::VROSC::AnimatedAppear::Mode, bool)>(&VROSC::ResizeableAdjustableMesh::UpdateMeshAppearance)> {
  static const MethodInfo* get() {
    static auto* appearAmount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("VROSC", "AnimatedAppear/Mode")->byval_arg;
    static auto* useFlash = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ResizeableAdjustableMesh*), "UpdateMeshAppearance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{appearAmount, mode, useFlash});
  }
};
