// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.ToolDataController
#include "VROSC/ToolDataController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: TransformDataController
  class TransformDataController;
  // Forward declaring type: LoopStationDataModel
  class LoopStationDataModel;
  // Forward declaring type: LoopPlaybackConfigData
  class LoopPlaybackConfigData;
  // Forward declaring type: LoopStationTrack
  class LoopStationTrack;
  // Forward declaring type: LoopStationTrackGroup
  class LoopStationTrackGroup;
  // Forward declaring type: LoopPlaybackConfigOverrideFlags
  class LoopPlaybackConfigOverrideFlags;
  // Forward declaring type: LoopStationLaunchpadData
  class LoopStationLaunchpadData;
  // Forward declaring type: TransformMover
  class TransformMover;
  // Forward declaring type: WidgetSettings
  class WidgetSettings;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopStationDataController
  class LoopStationDataController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::LoopStationDataController);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LoopStationDataController*, "VROSC", "LoopStationDataController");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.LoopStationDataController
  // [TokenAttribute] Offset: FFFFFFFF
  class LoopStationDataController : public ::VROSC::ToolDataController {
    public:
    // Nested type: ::VROSC::LoopStationDataController::$$c__DisplayClass36_0
    class $$c__DisplayClass36_0;
    // Nested type: ::VROSC::LoopStationDataController::$SaveData$d__36
    struct $SaveData$d__36;
    // Nested type: ::VROSC::LoopStationDataController::$$c__DisplayClass37_0
    class $$c__DisplayClass37_0;
    // Nested type: ::VROSC::LoopStationDataController::$$c
    class $$c;
    // Nested type: ::VROSC::LoopStationDataController::$SaveAudioPreview$d__37
    struct $SaveAudioPreview$d__37;
    // Nested type: ::VROSC::LoopStationDataController::$$c__DisplayClass39_0
    class $$c__DisplayClass39_0;
    // Nested type: ::VROSC::LoopStationDataController::$$c__DisplayClass39_1
    class $$c__DisplayClass39_1;
    // Nested type: ::VROSC::LoopStationDataController::$$c__DisplayClass39_2
    class $$c__DisplayClass39_2;
    public:
    // private VROSC.TransformDataController _transformData
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::TransformDataController* transformData;
    // Field size check
    static_assert(sizeof(::VROSC::TransformDataController*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.String,System.Single[]> _loopStationAudioDatas
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<float>>* loopStationAudioDatas;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<float>>*) == 0x8);
    public:
    // Get static field: static public System.Action`1<System.Int32> OnTrackRemoved
    static ::System::Action_1<int>* _get_OnTrackRemoved();
    // Set static field: static public System.Action`1<System.Int32> OnTrackRemoved
    static void _set_OnTrackRemoved(::System::Action_1<int>* value);
    // Get instance field reference: private VROSC.TransformDataController _transformData
    [[deprecated("Use field access instead!")]] ::VROSC::TransformDataController*& dyn__transformData();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.String,System.Single[]> _loopStationAudioDatas
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<float>>*& dyn__loopStationAudioDatas();
    // private VROSC.LoopStationDataModel get_DataModel()
    // Offset: 0x196A254
    ::VROSC::LoopStationDataModel* get_DataModel();
    // public System.Single get_Volume()
    // Offset: 0x196A5AC
    float get_Volume();
    // public System.Void set_Volume(System.Single value)
    // Offset: 0x196A5CC
    void set_Volume(float value);
    // public System.Boolean get_AutoSortUserGroups()
    // Offset: 0x196A60C
    bool get_AutoSortUserGroups();
    // public System.Void set_AutoSortUserGroups(System.Boolean value)
    // Offset: 0x196A62C
    void set_AutoSortUserGroups(bool value);
    // public System.Boolean get_RecordButtonIsAttached()
    // Offset: 0x196A668
    bool get_RecordButtonIsAttached();
    // public System.Void set_RecordButtonIsAttached(System.Boolean value)
    // Offset: 0x196A688
    void set_RecordButtonIsAttached(bool value);
    // public UnityEngine.Vector3 get_RecordButtonPosition()
    // Offset: 0x196A6C4
    ::UnityEngine::Vector3 get_RecordButtonPosition();
    // public UnityEngine.Quaternion get_RecordButtonRotation()
    // Offset: 0x196A764
    ::UnityEngine::Quaternion get_RecordButtonRotation();
    // public UnityEngine.Vector3 get_RecordButtonScale()
    // Offset: 0x196A854
    ::UnityEngine::Vector3 get_RecordButtonScale();
    // public System.Int32 get_TrackCount()
    // Offset: 0x196A8F4
    int get_TrackCount();
    // public VROSC.LoopPlaybackConfigData get_DefaultPlaybackConfigData()
    // Offset: 0x196AA14
    ::VROSC::LoopPlaybackConfigData* get_DefaultPlaybackConfigData();
    // public System.Void set_DefaultPlaybackConfigData(VROSC.LoopPlaybackConfigData value)
    // Offset: 0x196AA34
    void set_DefaultPlaybackConfigData(::VROSC::LoopPlaybackConfigData* value);
    // public System.Void SetRecordButtonTransformData(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale)
    // Offset: 0x196AA6C
    void SetRecordButtonTransformData(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 scale);
    // public System.Threading.Tasks.Task SaveAudioPreview(System.String sessionName, System.Action`2<System.Boolean,System.Single> onSuccess, System.Action`1<VROSC.Error> onFailure)
    // Offset: 0x196AD40
    ::System::Threading::Tasks::Task* SaveAudioPreview(::StringW sessionName, ::System::Action_2<bool, float>* onSuccess, ::System::Action_1<::VROSC::Error>* onFailure);
    // public System.Void CheckIntegrity()
    // Offset: 0x196AE6C
    void CheckIntegrity();
    // private VROSC.LoopStationTrack GetTrackWithId(System.String trackId, System.String debugMessage)
    // Offset: 0x196BAFC
    ::VROSC::LoopStationTrack* GetTrackWithId(::StringW trackId, ::StringW debugMessage);
    // public System.Collections.Generic.List`1<System.String> GetTrackIds()
    // Offset: 0x196B600
    ::System::Collections::Generic::List_1<::StringW>* GetTrackIds();
    // private System.Int32 GenerateNewTrackNumber()
    // Offset: 0x196BD84
    int GenerateNewTrackNumber();
    // public System.Void SetGroupTrackBelongsTo(System.String trackId, System.String groupId, System.Int32 placeInGroup)
    // Offset: 0x196B838
    void SetGroupTrackBelongsTo(::StringW trackId, ::StringW groupId, int placeInGroup);
    // public System.String GetGroupTrackBelongsTo(System.String trackId)
    // Offset: 0x196B74C
    ::StringW GetGroupTrackBelongsTo(::StringW trackId);
    // public System.Int32 GetTrackPositionInGroup(System.String trackId)
    // Offset: 0x196B7D0
    int GetTrackPositionInGroup(::StringW trackId);
    // public System.String CreateLoopTrack(System.String instrumentName, System.String groupId, System.String patchName, System.Int32 loopLength)
    // Offset: 0x196C1B4
    ::StringW CreateLoopTrack(::StringW instrumentName, ::StringW groupId, ::StringW patchName, int loopLength);
    // public System.Void RemoveTrack(System.String trackId)
    // Offset: 0x196C3BC
    void RemoveTrack(::StringW trackId);
    // public System.Boolean HasTrack(System.String trackId)
    // Offset: 0x196C590
    bool HasTrack(::StringW trackId);
    // public System.Void SetTrackRecording(System.String trackId, System.Single[] audioData)
    // Offset: 0x196C5F8
    void SetTrackRecording(::StringW trackId, ::ArrayW<float> audioData);
    // public System.Single[] GetTrackAudioData(System.String trackId)
    // Offset: 0x196C724
    ::ArrayW<float> GetTrackAudioData(::StringW trackId);
    // public System.Void SetTrackLoopLength(System.String trackId, System.Int32 length)
    // Offset: 0x196C83C
    void SetTrackLoopLength(::StringW trackId, int length);
    // public System.Int32 GetTrackLoopLength(System.String trackId)
    // Offset: 0x196C938
    int GetTrackLoopLength(::StringW trackId);
    // public System.Void SetTrackVolume(System.String trackId, System.Single volume)
    // Offset: 0x196CA54
    void SetTrackVolume(::StringW trackId, float volume);
    // public System.Single GetTrackVolume(System.String trackId)
    // Offset: 0x196CAE4
    float GetTrackVolume(::StringW trackId);
    // public System.Void SetTrackMuted(System.String trackId, System.Boolean isMuted)
    // Offset: 0x196CB54
    void SetTrackMuted(::StringW trackId, bool isMuted);
    // public System.Boolean IsTrackMuted(System.String trackId)
    // Offset: 0x196CBDC
    bool IsTrackMuted(::StringW trackId);
    // public System.String GenerateTrackDisplayName(System.String trackId)
    // Offset: 0x196CC4C
    ::StringW GenerateTrackDisplayName(::StringW trackId);
    // System.Void SetTrackDisplayName(System.String trackId, System.String displayName)
    // Offset: 0x196CD1C
    void SetTrackDisplayName(::StringW trackId, ::StringW displayName);
    // public System.String GetTrackDisplayName(System.String trackId)
    // Offset: 0x196CDA0
    ::StringW GetTrackDisplayName(::StringW trackId);
    // public System.String GetTrackInstrumentName(System.String trackId)
    // Offset: 0x196887C
    ::StringW GetTrackInstrumentName(::StringW trackId);
    // public System.String GetTrackPatchName(System.String trackId)
    // Offset: 0x196CE4C
    ::StringW GetTrackPatchName(::StringW trackId);
    // public System.Void SetTrackGlobalSyncStartOffset(System.String trackId, System.Int32 globalSyncStartOffset)
    // Offset: 0x196CED0
    void SetTrackGlobalSyncStartOffset(::StringW trackId, int globalSyncStartOffset);
    // public System.Int32 GetTrackGlobalSyncStartOffset(System.String trackId)
    // Offset: 0x196CF54
    int GetTrackGlobalSyncStartOffset(::StringW trackId);
    // public UnityEngine.Color GetTrackColor(System.String trackId)
    // Offset: 0x196CFBC
    ::UnityEngine::Color GetTrackColor(::StringW trackId);
    // public System.Void SetTrackColor(System.String trackId, UnityEngine.Color color)
    // Offset: 0x196D030
    void SetTrackColor(::StringW trackId, ::UnityEngine::Color color);
    // public System.Void SetTrackPlaybackConfigData(System.String trackId, VROSC.LoopPlaybackConfigData playbackConfigData)
    // Offset: 0x196D0DC
    void SetTrackPlaybackConfigData(::StringW trackId, ::VROSC::LoopPlaybackConfigData* playbackConfigData);
    // public VROSC.LoopPlaybackConfigData GetTrackPlaybackConfigData(System.String trackId)
    // Offset: 0x196D160
    ::VROSC::LoopPlaybackConfigData* GetTrackPlaybackConfigData(::StringW trackId);
    // public System.Void SetTrackPlaying(System.String trackId, System.Boolean isPlaying, VROSC.LoopPlaybackConfigData playbackConfigData)
    // Offset: 0x196D1C8
    void SetTrackPlaying(::StringW trackId, bool isPlaying, ::VROSC::LoopPlaybackConfigData* playbackConfigData);
    // public VROSC.LoopPlaybackConfigData GetTrackStartConfigData(System.String trackId)
    // Offset: 0x196D294
    ::VROSC::LoopPlaybackConfigData* GetTrackStartConfigData(::StringW trackId);
    // public System.Boolean IsTrackPlaying(System.String trackId)
    // Offset: 0x196D2FC
    bool IsTrackPlaying(::StringW trackId);
    // public System.String CreateGroup(System.String groupName, System.Single volume, System.Boolean isUserGroup, System.String id)
    // Offset: 0x19681D8
    ::StringW CreateGroup(::StringW groupName, float volume, bool isUserGroup, ::StringW id);
    // public System.Void RemoveGroup(System.String groupID)
    // Offset: 0x196B540
    void RemoveGroup(::StringW groupID);
    // private VROSC.LoopStationTrackGroup GetGroupWithId(System.String groupID, System.String debugMessage)
    // Offset: 0x196BF2C
    ::VROSC::LoopStationTrackGroup* GetGroupWithId(::StringW groupID, ::StringW debugMessage);
    // public System.Collections.Generic.List`1<System.String> GetGroupIds()
    // Offset: 0x196B218
    ::System::Collections::Generic::List_1<::StringW>* GetGroupIds();
    // public System.Void SetGroupName(System.String groupID, System.String groupName)
    // Offset: 0x196D438
    void SetGroupName(::StringW groupID, ::StringW groupName);
    // public System.String GetGroupName(System.String groupID)
    // Offset: 0x196B364
    ::StringW GetGroupName(::StringW groupID);
    // public System.Boolean GetGroupIsUserGroup(System.String groupID)
    // Offset: 0x196B4D0
    bool GetGroupIsUserGroup(::StringW groupID);
    // public System.Void SetGroupPosition(System.String groupID, UnityEngine.Vector3 position)
    // Offset: 0x196D4BC
    void SetGroupPosition(::StringW groupID, ::UnityEngine::Vector3 position);
    // public UnityEngine.Vector3 GetGroupPosition(System.String groupID)
    // Offset: 0x196D57C
    ::UnityEngine::Vector3 GetGroupPosition(::StringW groupID);
    // public System.Void SetGroupRotation(System.String groupID, UnityEngine.Quaternion rotation)
    // Offset: 0x196D600
    void SetGroupRotation(::StringW groupID, ::UnityEngine::Quaternion rotation);
    // public UnityEngine.Quaternion GetGroupRotation(System.String groupID)
    // Offset: 0x196D6C8
    ::UnityEngine::Quaternion GetGroupRotation(::StringW groupID);
    // public System.Void SetGroupVolume(System.String groupID, System.Single volume)
    // Offset: 0x196D74C
    void SetGroupVolume(::StringW groupID, float volume);
    // public System.Single GetGroupVolume(System.String groupID)
    // Offset: 0x196B3E8
    float GetGroupVolume(::StringW groupID);
    // public System.Void SetGroupMuted(System.String groupID, System.Boolean muted)
    // Offset: 0x196D7DC
    void SetGroupMuted(::StringW groupID, bool muted);
    // public System.Boolean GetGroupMuted(System.String groupID)
    // Offset: 0x196D864
    bool GetGroupMuted(::StringW groupID);
    // public UnityEngine.Color GetGroupColor(System.String groupID)
    // Offset: 0x196D8E4
    ::UnityEngine::Color GetGroupColor(::StringW groupID);
    // public System.Void SetGroupColor(System.String groupID, UnityEngine.Color color)
    // Offset: 0x196D958
    void SetGroupColor(::StringW groupID, ::UnityEngine::Color color);
    // public System.Void SetGroupPlaybackOverrideFlags(System.String groupID, VROSC.LoopPlaybackConfigOverrideFlags overrideFlags)
    // Offset: 0x196DA04
    void SetGroupPlaybackOverrideFlags(::StringW groupID, ::VROSC::LoopPlaybackConfigOverrideFlags* overrideFlags);
    // public System.Void SetGroupPlaybackConfig(System.String groupID, VROSC.LoopPlaybackConfigData playbackConfigData)
    // Offset: 0x196DA88
    void SetGroupPlaybackConfig(::StringW groupID, ::VROSC::LoopPlaybackConfigData* playbackConfigData);
    // public VROSC.LoopPlaybackConfigOverrideFlags GetGroupPlaybackOverrideFlags(System.String groupID)
    // Offset: 0x196DB0C
    ::VROSC::LoopPlaybackConfigOverrideFlags* GetGroupPlaybackOverrideFlags(::StringW groupID);
    // public VROSC.LoopPlaybackConfigData GetGroupPlaybackConfig(System.String groupID)
    // Offset: 0x196DB74
    ::VROSC::LoopPlaybackConfigData* GetGroupPlaybackConfig(::StringW groupID);
    // private VROSC.LoopStationLaunchpadData GetLaunchpadWithId(System.String launchpadID, System.String debugMessage)
    // Offset: 0x196DBDC
    ::VROSC::LoopStationLaunchpadData* GetLaunchpadWithId(::StringW launchpadID, ::StringW debugMessage);
    // public System.Void CreateLaunchPad(System.String launchpadID, System.String targetID, System.Boolean isGroup)
    // Offset: 0x196DE64
    void CreateLaunchPad(::StringW launchpadID, ::StringW targetID, bool isGroup);
    // public System.Void RemoveLaunchPad(System.String launchpadID)
    // Offset: 0x196E018
    void RemoveLaunchPad(::StringW launchpadID);
    // public System.Collections.Generic.List`1<System.String> GetLaunchpadIds()
    // Offset: 0x196E0D0
    ::System::Collections::Generic::List_1<::StringW>* GetLaunchpadIds();
    // public System.Void SetLaunchpadTransform(System.String launchpadID, VROSC.TransformMover transformMover)
    // Offset: 0x196E21C
    void SetLaunchpadTransform(::StringW launchpadID, ::VROSC::TransformMover* transformMover);
    // VROSC.TransformDataController GetLaunchpadTransformData(System.String launchpadID)
    // Offset: 0x196E330
    ::VROSC::TransformDataController* GetLaunchpadTransformData(::StringW launchpadID);
    // public System.Boolean GetLaunchpadIsGroup(System.String launchpadID)
    // Offset: 0x196E3A4
    bool GetLaunchpadIsGroup(::StringW launchpadID);
    // public System.String GetLaunchpadTargetID(System.String launchpadID)
    // Offset: 0x196E414
    ::StringW GetLaunchpadTargetID(::StringW launchpadID);
    // public override VROSC.TransformDataController get_TransformData()
    // Offset: 0x196A2D0
    // Implemented from: VROSC.ToolDataController
    // Base method: VROSC.TransformDataController ToolDataController::get_TransformData()
    ::VROSC::TransformDataController* get_TransformData();
    // public override System.Boolean get_IsOpen()
    // Offset: 0x196A94C
    // Implemented from: VROSC.ToolDataController
    // Base method: System.Boolean ToolDataController::get_IsOpen()
    bool get_IsOpen();
    // public override System.Void set_IsOpen(System.Boolean value)
    // Offset: 0x196A974
    // Implemented from: VROSC.ToolDataController
    // Base method: System.Void ToolDataController::set_IsOpen(System.Boolean value)
    void set_IsOpen(bool value);
    // public override System.Boolean get_HasBeenOpened()
    // Offset: 0x196A9B8
    // Implemented from: VROSC.ToolDataController
    // Base method: System.Boolean ToolDataController::get_HasBeenOpened()
    bool get_HasBeenOpened();
    // public override System.Void set_HasBeenOpened(System.Boolean value)
    // Offset: 0x196A9D8
    // Implemented from: VROSC.ToolDataController
    // Base method: System.Void ToolDataController::set_HasBeenOpened(System.Boolean value)
    void set_HasBeenOpened(bool value);
    // public System.Void .ctor()
    // Offset: 0x196A2D8
    // Implemented from: VROSC.ToolDataController
    // Base method: System.Void ToolDataController::.ctor()
    // Base method: System.Void BaseDataController::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoopStationDataController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::LoopStationDataController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoopStationDataController*, creationType>()));
    }
    // public override System.Void ApplyDefaults(VROSC.WidgetSettings widgetDefaultSettings)
    // Offset: 0x196AC14
    // Implemented from: VROSC.ToolDataController
    // Base method: System.Void ToolDataController::ApplyDefaults(VROSC.WidgetSettings widgetDefaultSettings)
    void ApplyDefaults(::VROSC::WidgetSettings* widgetDefaultSettings);
    // public override System.Void SaveData(System.String sessionName, System.Action onSuccess, System.Action`1<VROSC.Error> onFailure)
    // Offset: 0x196AC5C
    // Implemented from: VROSC.BaseDataController
    // Base method: System.Void BaseDataController::SaveData(System.String sessionName, System.Action onSuccess, System.Action`1<VROSC.Error> onFailure)
    void SaveData(::StringW sessionName, ::System::Action* onSuccess, ::System::Action_1<::VROSC::Error>* onFailure);
    // public override System.Void LoadData(System.String sessionId, System.Action onSuccess, System.Action`1<VROSC.Error> onFailure)
    // Offset: 0x196B910
    // Implemented from: VROSC.BaseDataController
    // Base method: System.Void BaseDataController::LoadData(System.String sessionId, System.Action onSuccess, System.Action`1<VROSC.Error> onFailure)
    void LoadData(::StringW sessionId, ::System::Action* onSuccess, ::System::Action_1<::VROSC::Error>* onFailure);
    // public override System.Int32 GetLoadSteps()
    // Offset: 0x196BA4C
    // Implemented from: VROSC.BaseDataController
    // Base method: System.Int32 BaseDataController::GetLoadSteps()
    int GetLoadSteps();
    // public override System.Int32 GetSaveSteps()
    // Offset: 0x196BAA4
    // Implemented from: VROSC.BaseDataController
    // Base method: System.Int32 BaseDataController::GetSaveSteps()
    int GetSaveSteps();
  }; // VROSC.LoopStationDataController
  #pragma pack(pop)
  static check_size<sizeof(LoopStationDataController), 48 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<float>>*)> __VROSC_LoopStationDataControllerSizeCheck;
  static_assert(sizeof(LoopStationDataController) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::LoopStationDataController::get_DataModel
// Il2CppName: get_DataModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopStationDataModel* (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::get_DataModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "get_DataModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::get_Volume
// Il2CppName: get_Volume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::get_Volume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "get_Volume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::set_Volume
// Il2CppName: set_Volume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(float)>(&VROSC::LoopStationDataController::set_Volume)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "set_Volume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::get_AutoSortUserGroups
// Il2CppName: get_AutoSortUserGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::get_AutoSortUserGroups)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "get_AutoSortUserGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::set_AutoSortUserGroups
// Il2CppName: set_AutoSortUserGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(bool)>(&VROSC::LoopStationDataController::set_AutoSortUserGroups)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "set_AutoSortUserGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::get_RecordButtonIsAttached
// Il2CppName: get_RecordButtonIsAttached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::get_RecordButtonIsAttached)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "get_RecordButtonIsAttached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::set_RecordButtonIsAttached
// Il2CppName: set_RecordButtonIsAttached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(bool)>(&VROSC::LoopStationDataController::set_RecordButtonIsAttached)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "set_RecordButtonIsAttached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::get_RecordButtonPosition
// Il2CppName: get_RecordButtonPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::get_RecordButtonPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "get_RecordButtonPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::get_RecordButtonRotation
// Il2CppName: get_RecordButtonRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::get_RecordButtonRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "get_RecordButtonRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::get_RecordButtonScale
// Il2CppName: get_RecordButtonScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::get_RecordButtonScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "get_RecordButtonScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::get_TrackCount
// Il2CppName: get_TrackCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::get_TrackCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "get_TrackCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::get_DefaultPlaybackConfigData
// Il2CppName: get_DefaultPlaybackConfigData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlaybackConfigData* (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::get_DefaultPlaybackConfigData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "get_DefaultPlaybackConfigData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::set_DefaultPlaybackConfigData
// Il2CppName: set_DefaultPlaybackConfigData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::VROSC::LoopPlaybackConfigData*)>(&VROSC::LoopStationDataController::set_DefaultPlaybackConfigData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlaybackConfigData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "set_DefaultPlaybackConfigData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetRecordButtonTransformData
// Il2CppName: SetRecordButtonTransformData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3)>(&VROSC::LoopStationDataController::SetRecordButtonTransformData)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetRecordButtonTransformData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation, scale});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SaveAudioPreview
// Il2CppName: SaveAudioPreview
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (VROSC::LoopStationDataController::*)(::StringW, ::System::Action_2<bool, float>*, ::System::Action_1<::VROSC::Error>*)>(&VROSC::LoopStationDataController::SaveAudioPreview)> {
  static const MethodInfo* get() {
    static auto* sessionName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SaveAudioPreview", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionName, onSuccess, onFailure});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::CheckIntegrity
// Il2CppName: CheckIntegrity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::CheckIntegrity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "CheckIntegrity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetTrackWithId
// Il2CppName: GetTrackWithId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopStationTrack* (VROSC::LoopStationDataController::*)(::StringW, ::StringW)>(&VROSC::LoopStationDataController::GetTrackWithId)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* debugMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetTrackWithId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId, debugMessage});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetTrackIds
// Il2CppName: GetTrackIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::GetTrackIds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetTrackIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GenerateNewTrackNumber
// Il2CppName: GenerateNewTrackNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::GenerateNewTrackNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GenerateNewTrackNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetGroupTrackBelongsTo
// Il2CppName: SetGroupTrackBelongsTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, ::StringW, int)>(&VROSC::LoopStationDataController::SetGroupTrackBelongsTo)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* groupId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* placeInGroup = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetGroupTrackBelongsTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId, groupId, placeInGroup});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetGroupTrackBelongsTo
// Il2CppName: GetGroupTrackBelongsTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetGroupTrackBelongsTo)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetGroupTrackBelongsTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetTrackPositionInGroup
// Il2CppName: GetTrackPositionInGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetTrackPositionInGroup)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetTrackPositionInGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::CreateLoopTrack
// Il2CppName: CreateLoopTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::LoopStationDataController::*)(::StringW, ::StringW, ::StringW, int)>(&VROSC::LoopStationDataController::CreateLoopTrack)> {
  static const MethodInfo* get() {
    static auto* instrumentName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* groupId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* patchName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* loopLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "CreateLoopTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instrumentName, groupId, patchName, loopLength});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::RemoveTrack
// Il2CppName: RemoveTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::RemoveTrack)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "RemoveTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::HasTrack
// Il2CppName: HasTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::HasTrack)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "HasTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetTrackRecording
// Il2CppName: SetTrackRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, ::ArrayW<float>)>(&VROSC::LoopStationDataController::SetTrackRecording)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetTrackRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId, audioData});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetTrackAudioData
// Il2CppName: GetTrackAudioData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetTrackAudioData)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetTrackAudioData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetTrackLoopLength
// Il2CppName: SetTrackLoopLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, int)>(&VROSC::LoopStationDataController::SetTrackLoopLength)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetTrackLoopLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId, length});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetTrackLoopLength
// Il2CppName: GetTrackLoopLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetTrackLoopLength)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetTrackLoopLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetTrackVolume
// Il2CppName: SetTrackVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, float)>(&VROSC::LoopStationDataController::SetTrackVolume)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetTrackVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId, volume});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetTrackVolume
// Il2CppName: GetTrackVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetTrackVolume)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetTrackVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetTrackMuted
// Il2CppName: SetTrackMuted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, bool)>(&VROSC::LoopStationDataController::SetTrackMuted)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isMuted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetTrackMuted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId, isMuted});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::IsTrackMuted
// Il2CppName: IsTrackMuted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::IsTrackMuted)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "IsTrackMuted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GenerateTrackDisplayName
// Il2CppName: GenerateTrackDisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GenerateTrackDisplayName)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GenerateTrackDisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetTrackDisplayName
// Il2CppName: SetTrackDisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, ::StringW)>(&VROSC::LoopStationDataController::SetTrackDisplayName)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* displayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetTrackDisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId, displayName});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetTrackDisplayName
// Il2CppName: GetTrackDisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetTrackDisplayName)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetTrackDisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetTrackInstrumentName
// Il2CppName: GetTrackInstrumentName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetTrackInstrumentName)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetTrackInstrumentName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetTrackPatchName
// Il2CppName: GetTrackPatchName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetTrackPatchName)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetTrackPatchName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetTrackGlobalSyncStartOffset
// Il2CppName: SetTrackGlobalSyncStartOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, int)>(&VROSC::LoopStationDataController::SetTrackGlobalSyncStartOffset)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* globalSyncStartOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetTrackGlobalSyncStartOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId, globalSyncStartOffset});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetTrackGlobalSyncStartOffset
// Il2CppName: GetTrackGlobalSyncStartOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetTrackGlobalSyncStartOffset)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetTrackGlobalSyncStartOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetTrackColor
// Il2CppName: GetTrackColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetTrackColor)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetTrackColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetTrackColor
// Il2CppName: SetTrackColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, ::UnityEngine::Color)>(&VROSC::LoopStationDataController::SetTrackColor)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetTrackColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId, color});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetTrackPlaybackConfigData
// Il2CppName: SetTrackPlaybackConfigData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, ::VROSC::LoopPlaybackConfigData*)>(&VROSC::LoopStationDataController::SetTrackPlaybackConfigData)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* playbackConfigData = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlaybackConfigData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetTrackPlaybackConfigData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId, playbackConfigData});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetTrackPlaybackConfigData
// Il2CppName: GetTrackPlaybackConfigData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlaybackConfigData* (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetTrackPlaybackConfigData)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetTrackPlaybackConfigData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetTrackPlaying
// Il2CppName: SetTrackPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, bool, ::VROSC::LoopPlaybackConfigData*)>(&VROSC::LoopStationDataController::SetTrackPlaying)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isPlaying = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* playbackConfigData = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlaybackConfigData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetTrackPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId, isPlaying, playbackConfigData});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetTrackStartConfigData
// Il2CppName: GetTrackStartConfigData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlaybackConfigData* (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetTrackStartConfigData)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetTrackStartConfigData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::IsTrackPlaying
// Il2CppName: IsTrackPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::IsTrackPlaying)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "IsTrackPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::CreateGroup
// Il2CppName: CreateGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::LoopStationDataController::*)(::StringW, float, bool, ::StringW)>(&VROSC::LoopStationDataController::CreateGroup)> {
  static const MethodInfo* get() {
    static auto* groupName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* isUserGroup = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "CreateGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupName, volume, isUserGroup, id});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::RemoveGroup
// Il2CppName: RemoveGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::RemoveGroup)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "RemoveGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetGroupWithId
// Il2CppName: GetGroupWithId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopStationTrackGroup* (VROSC::LoopStationDataController::*)(::StringW, ::StringW)>(&VROSC::LoopStationDataController::GetGroupWithId)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* debugMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetGroupWithId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID, debugMessage});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetGroupIds
// Il2CppName: GetGroupIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::GetGroupIds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetGroupIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetGroupName
// Il2CppName: SetGroupName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, ::StringW)>(&VROSC::LoopStationDataController::SetGroupName)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* groupName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetGroupName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID, groupName});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetGroupName
// Il2CppName: GetGroupName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetGroupName)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetGroupName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetGroupIsUserGroup
// Il2CppName: GetGroupIsUserGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetGroupIsUserGroup)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetGroupIsUserGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetGroupPosition
// Il2CppName: SetGroupPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, ::UnityEngine::Vector3)>(&VROSC::LoopStationDataController::SetGroupPosition)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetGroupPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID, position});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetGroupPosition
// Il2CppName: GetGroupPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetGroupPosition)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetGroupPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetGroupRotation
// Il2CppName: SetGroupRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, ::UnityEngine::Quaternion)>(&VROSC::LoopStationDataController::SetGroupRotation)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetGroupRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID, rotation});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetGroupRotation
// Il2CppName: GetGroupRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetGroupRotation)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetGroupRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetGroupVolume
// Il2CppName: SetGroupVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, float)>(&VROSC::LoopStationDataController::SetGroupVolume)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetGroupVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID, volume});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetGroupVolume
// Il2CppName: GetGroupVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetGroupVolume)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetGroupVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetGroupMuted
// Il2CppName: SetGroupMuted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, bool)>(&VROSC::LoopStationDataController::SetGroupMuted)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* muted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetGroupMuted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID, muted});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetGroupMuted
// Il2CppName: GetGroupMuted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetGroupMuted)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetGroupMuted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetGroupColor
// Il2CppName: GetGroupColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetGroupColor)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetGroupColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetGroupColor
// Il2CppName: SetGroupColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, ::UnityEngine::Color)>(&VROSC::LoopStationDataController::SetGroupColor)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetGroupColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID, color});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetGroupPlaybackOverrideFlags
// Il2CppName: SetGroupPlaybackOverrideFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, ::VROSC::LoopPlaybackConfigOverrideFlags*)>(&VROSC::LoopStationDataController::SetGroupPlaybackOverrideFlags)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* overrideFlags = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlaybackConfigOverrideFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetGroupPlaybackOverrideFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID, overrideFlags});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetGroupPlaybackConfig
// Il2CppName: SetGroupPlaybackConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, ::VROSC::LoopPlaybackConfigData*)>(&VROSC::LoopStationDataController::SetGroupPlaybackConfig)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* playbackConfigData = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlaybackConfigData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetGroupPlaybackConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID, playbackConfigData});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetGroupPlaybackOverrideFlags
// Il2CppName: GetGroupPlaybackOverrideFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlaybackConfigOverrideFlags* (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetGroupPlaybackOverrideFlags)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetGroupPlaybackOverrideFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetGroupPlaybackConfig
// Il2CppName: GetGroupPlaybackConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlaybackConfigData* (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetGroupPlaybackConfig)> {
  static const MethodInfo* get() {
    static auto* groupID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetGroupPlaybackConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupID});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetLaunchpadWithId
// Il2CppName: GetLaunchpadWithId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopStationLaunchpadData* (VROSC::LoopStationDataController::*)(::StringW, ::StringW)>(&VROSC::LoopStationDataController::GetLaunchpadWithId)> {
  static const MethodInfo* get() {
    static auto* launchpadID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* debugMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetLaunchpadWithId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{launchpadID, debugMessage});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::CreateLaunchPad
// Il2CppName: CreateLaunchPad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, ::StringW, bool)>(&VROSC::LoopStationDataController::CreateLaunchPad)> {
  static const MethodInfo* get() {
    static auto* launchpadID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* targetID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isGroup = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "CreateLaunchPad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{launchpadID, targetID, isGroup});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::RemoveLaunchPad
// Il2CppName: RemoveLaunchPad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::RemoveLaunchPad)> {
  static const MethodInfo* get() {
    static auto* launchpadID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "RemoveLaunchPad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{launchpadID});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetLaunchpadIds
// Il2CppName: GetLaunchpadIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::GetLaunchpadIds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetLaunchpadIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SetLaunchpadTransform
// Il2CppName: SetLaunchpadTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, ::VROSC::TransformMover*)>(&VROSC::LoopStationDataController::SetLaunchpadTransform)> {
  static const MethodInfo* get() {
    static auto* launchpadID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* transformMover = &::il2cpp_utils::GetClassFromName("VROSC", "TransformMover")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SetLaunchpadTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{launchpadID, transformMover});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetLaunchpadTransformData
// Il2CppName: GetLaunchpadTransformData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::TransformDataController* (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetLaunchpadTransformData)> {
  static const MethodInfo* get() {
    static auto* launchpadID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetLaunchpadTransformData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{launchpadID});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetLaunchpadIsGroup
// Il2CppName: GetLaunchpadIsGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetLaunchpadIsGroup)> {
  static const MethodInfo* get() {
    static auto* launchpadID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetLaunchpadIsGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{launchpadID});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetLaunchpadTargetID
// Il2CppName: GetLaunchpadTargetID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::LoopStationDataController::*)(::StringW)>(&VROSC::LoopStationDataController::GetLaunchpadTargetID)> {
  static const MethodInfo* get() {
    static auto* launchpadID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetLaunchpadTargetID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{launchpadID});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::get_TransformData
// Il2CppName: get_TransformData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::TransformDataController* (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::get_TransformData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "get_TransformData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::get_IsOpen
// Il2CppName: get_IsOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::get_IsOpen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "get_IsOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::set_IsOpen
// Il2CppName: set_IsOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(bool)>(&VROSC::LoopStationDataController::set_IsOpen)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "set_IsOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::get_HasBeenOpened
// Il2CppName: get_HasBeenOpened
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::get_HasBeenOpened)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "get_HasBeenOpened", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::set_HasBeenOpened
// Il2CppName: set_HasBeenOpened
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(bool)>(&VROSC::LoopStationDataController::set_HasBeenOpened)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "set_HasBeenOpened", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::LoopStationDataController::ApplyDefaults
// Il2CppName: ApplyDefaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::VROSC::WidgetSettings*)>(&VROSC::LoopStationDataController::ApplyDefaults)> {
  static const MethodInfo* get() {
    static auto* widgetDefaultSettings = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "ApplyDefaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{widgetDefaultSettings});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::SaveData
// Il2CppName: SaveData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, ::System::Action*, ::System::Action_1<::VROSC::Error>*)>(&VROSC::LoopStationDataController::SaveData)> {
  static const MethodInfo* get() {
    static auto* sessionName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "SaveData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionName, onSuccess, onFailure});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::LoadData
// Il2CppName: LoadData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationDataController::*)(::StringW, ::System::Action*, ::System::Action_1<::VROSC::Error>*)>(&VROSC::LoopStationDataController::LoadData)> {
  static const MethodInfo* get() {
    static auto* sessionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "Error")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "LoadData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionId, onSuccess, onFailure});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetLoadSteps
// Il2CppName: GetLoadSteps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::GetLoadSteps)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetLoadSteps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationDataController::GetSaveSteps
// Il2CppName: GetSaveSteps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::LoopStationDataController::*)()>(&VROSC::LoopStationDataController::GetSaveSteps)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationDataController*), "GetSaveSteps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
