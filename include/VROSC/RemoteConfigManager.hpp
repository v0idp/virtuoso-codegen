// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: RemoteConfigManager
  class RemoteConfigManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::RemoteConfigManager);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::RemoteConfigManager*, "VROSC", "RemoteConfigManager");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.RemoteConfigManager
  // [TokenAttribute] Offset: FFFFFFFF
  class RemoteConfigManager : public ::Il2CppObject {
    public:
    // Nested type: ::VROSC::RemoteConfigManager::UserAttributes
    struct UserAttributes;
    // Nested type: ::VROSC::RemoteConfigManager::AppAttributes
    struct AppAttributes;
    public:
    // private System.String <ABGroupName>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW ABGroupName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <ABTestId>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW ABTestId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <StartEnvironment>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW StartEnvironment;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.String <ABGroupName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$ABGroupName$k__BackingField();
    // Get instance field reference: private System.String <ABTestId>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$ABTestId$k__BackingField();
    // Get instance field reference: private System.String <StartEnvironment>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$StartEnvironment$k__BackingField();
    // public System.String get_ABGroupName()
    // Offset: 0xB31494
    ::StringW get_ABGroupName();
    // private System.Void set_ABGroupName(System.String value)
    // Offset: 0xB3149C
    void set_ABGroupName(::StringW value);
    // public System.String get_ABTestId()
    // Offset: 0xB314A4
    ::StringW get_ABTestId();
    // private System.Void set_ABTestId(System.String value)
    // Offset: 0xB314AC
    void set_ABTestId(::StringW value);
    // public System.String get_StartEnvironment()
    // Offset: 0xB314B4
    ::StringW get_StartEnvironment();
    // private System.Void set_StartEnvironment(System.String value)
    // Offset: 0xB314BC
    void set_StartEnvironment(::StringW value);
    // public System.Void .ctor()
    // Offset: 0xB31658
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RemoteConfigManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::RemoteConfigManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RemoteConfigManager*, creationType>()));
    }
    // public System.Void Setup()
    // Offset: 0xB314C4
    void Setup();
    // private System.Void GetConfigValues()
    // Offset: 0xB31548
    void GetConfigValues();
  }; // VROSC.RemoteConfigManager
  #pragma pack(pop)
  static check_size<sizeof(RemoteConfigManager), 32 + sizeof(::StringW)> __VROSC_RemoteConfigManagerSizeCheck;
  static_assert(sizeof(RemoteConfigManager) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::RemoteConfigManager::get_ABGroupName
// Il2CppName: get_ABGroupName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::RemoteConfigManager::*)()>(&VROSC::RemoteConfigManager::get_ABGroupName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::RemoteConfigManager*), "get_ABGroupName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::RemoteConfigManager::set_ABGroupName
// Il2CppName: set_ABGroupName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::RemoteConfigManager::*)(::StringW)>(&VROSC::RemoteConfigManager::set_ABGroupName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::RemoteConfigManager*), "set_ABGroupName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::RemoteConfigManager::get_ABTestId
// Il2CppName: get_ABTestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::RemoteConfigManager::*)()>(&VROSC::RemoteConfigManager::get_ABTestId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::RemoteConfigManager*), "get_ABTestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::RemoteConfigManager::set_ABTestId
// Il2CppName: set_ABTestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::RemoteConfigManager::*)(::StringW)>(&VROSC::RemoteConfigManager::set_ABTestId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::RemoteConfigManager*), "set_ABTestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::RemoteConfigManager::get_StartEnvironment
// Il2CppName: get_StartEnvironment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::RemoteConfigManager::*)()>(&VROSC::RemoteConfigManager::get_StartEnvironment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::RemoteConfigManager*), "get_StartEnvironment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::RemoteConfigManager::set_StartEnvironment
// Il2CppName: set_StartEnvironment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::RemoteConfigManager::*)(::StringW)>(&VROSC::RemoteConfigManager::set_StartEnvironment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::RemoteConfigManager*), "set_StartEnvironment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::RemoteConfigManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::RemoteConfigManager::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::RemoteConfigManager::*)()>(&VROSC::RemoteConfigManager::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::RemoteConfigManager*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::RemoteConfigManager::GetConfigValues
// Il2CppName: GetConfigValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::RemoteConfigManager::*)()>(&VROSC::RemoteConfigManager::GetConfigValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::RemoteConfigManager*), "GetConfigValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
