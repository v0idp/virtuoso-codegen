// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.AudioReactive.CoroutineDrivenEffect
#include "VROSC/AudioReactive/CoroutineDrivenEffect.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC::AudioReactive
namespace VROSC::AudioReactive {
  // Forward declaring type: ChangeColorEffectData
  class ChangeColorEffectData;
  // Forward declaring type: AudioReactiveBehaviour
  class AudioReactiveBehaviour;
  // Forward declaring type: ReactToBeat
  class ReactToBeat;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: VROSC.AudioReactive
namespace VROSC::AudioReactive {
  // Forward declaring type: LerpColorEffect
  class LerpColorEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AudioReactive::LerpColorEffect);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AudioReactive::LerpColorEffect*, "VROSC.AudioReactive", "LerpColorEffect");
// Type namespace: VROSC.AudioReactive
namespace VROSC::AudioReactive {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AudioReactive.LerpColorEffect
  // [TokenAttribute] Offset: FFFFFFFF
  class LerpColorEffect : public ::VROSC::AudioReactive::CoroutineDrivenEffect {
    public:
    // Nested type: ::VROSC::AudioReactive::LerpColorEffect::$SpecificFlow$d__14
    class $SpecificFlow$d__14;
    public:
    // private VROSC.AudioReactive.ChangeColorEffectData _data
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::AudioReactive::ChangeColorEffectData* data;
    // Field size check
    static_assert(sizeof(::VROSC::AudioReactive::ChangeColorEffectData*) == 0x8);
    // private UnityEngine.Renderer[] _renderers
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Renderer*> renderers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Renderer*>) == 0x8);
    // private System.Int32 _currentInt
    // Size: 0x4
    // Offset: 0x40
    int currentInt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _pingPongDirection
    // Size: 0x4
    // Offset: 0x44
    int pingPongDirection;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Color _currentColor
    // Size: 0x10
    // Offset: 0x48
    ::UnityEngine::Color currentColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Renderer[] _normalRenderers
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::Renderer*> normalRenderers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Renderer*>) == 0x8);
    // private UnityEngine.MaterialPropertyBlock[] _materialBlocks
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::UnityEngine::MaterialPropertyBlock*> materialBlocks;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::MaterialPropertyBlock*>) == 0x8);
    // private UnityEngine.ParticleSystem[] _particleSystems
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::ParticleSystem*> particleSystems;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ParticleSystem*>) == 0x8);
    public:
    // Get instance field reference: private VROSC.AudioReactive.ChangeColorEffectData _data
    [[deprecated]] ::VROSC::AudioReactive::ChangeColorEffectData*& dyn__data();
    // Get instance field reference: private UnityEngine.Renderer[] _renderers
    [[deprecated]] ::ArrayW<::UnityEngine::Renderer*>& dyn__renderers();
    // Get instance field reference: private System.Int32 _currentInt
    [[deprecated]] int& dyn__currentInt();
    // Get instance field reference: private System.Int32 _pingPongDirection
    [[deprecated]] int& dyn__pingPongDirection();
    // Get instance field reference: private UnityEngine.Color _currentColor
    [[deprecated]] ::UnityEngine::Color& dyn__currentColor();
    // Get instance field reference: private UnityEngine.Renderer[] _normalRenderers
    [[deprecated]] ::ArrayW<::UnityEngine::Renderer*>& dyn__normalRenderers();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock[] _materialBlocks
    [[deprecated]] ::ArrayW<::UnityEngine::MaterialPropertyBlock*>& dyn__materialBlocks();
    // Get instance field reference: private UnityEngine.ParticleSystem[] _particleSystems
    [[deprecated]] ::ArrayW<::UnityEngine::ParticleSystem*>& dyn__particleSystems();
    // public VROSC.AudioReactive.ChangeColorEffectData get_Data()
    // Offset: 0x194F988
    ::VROSC::AudioReactive::ChangeColorEffectData* get_Data();
    // public UnityEngine.Renderer[] get_Renderers()
    // Offset: 0x194F990
    ::ArrayW<::UnityEngine::Renderer*> get_Renderers();
    // private System.Void CreateArrays()
    // Offset: 0x194FB1C
    void CreateArrays();
    // private UnityEngine.Color GetNewColor()
    // Offset: 0x194FD18
    ::UnityEngine::Color GetNewColor();
    // private System.Void SetColor(UnityEngine.Color color)
    // Offset: 0x194FF64
    void SetColor(::UnityEngine::Color color);
    // public System.Void .ctor()
    // Offset: 0x1950288
    // Implemented from: VROSC.AudioReactive.CoroutineDrivenEffect
    // Base method: System.Void CoroutineDrivenEffect::.ctor()
    // Base method: System.Void ReactiveEffect::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LerpColorEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AudioReactive::LerpColorEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LerpColorEffect*, creationType>()));
    }
    // public override System.Void Setup(VROSC.AudioReactive.AudioReactiveBehaviour behaviour)
    // Offset: 0x194F998
    // Implemented from: VROSC.AudioReactive.CoroutineDrivenEffect
    // Base method: System.Void CoroutineDrivenEffect::Setup(VROSC.AudioReactive.AudioReactiveBehaviour behaviour)
    void Setup(::VROSC::AudioReactive::AudioReactiveBehaviour* behaviour);
    // protected override System.Collections.IEnumerator SpecificFlow()
    // Offset: 0x1950120
    // Implemented from: VROSC.AudioReactive.CoroutineDrivenEffect
    // Base method: System.Collections.IEnumerator CoroutineDrivenEffect::SpecificFlow()
    ::System::Collections::IEnumerator* SpecificFlow();
    // public override System.Void DrawGizmos(VROSC.AudioReactive.ReactToBeat sender)
    // Offset: 0x195018C
    // Implemented from: VROSC.AudioReactive.ReactiveEffect
    // Base method: System.Void ReactiveEffect::DrawGizmos(VROSC.AudioReactive.ReactToBeat sender)
    void DrawGizmos(::VROSC::AudioReactive::ReactToBeat* sender);
  }; // VROSC.AudioReactive.LerpColorEffect
  #pragma pack(pop)
  static check_size<sizeof(LerpColorEffect), 104 + sizeof(::ArrayW<::UnityEngine::ParticleSystem*>)> __VROSC_AudioReactive_LerpColorEffectSizeCheck;
  static_assert(sizeof(LerpColorEffect) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AudioReactive::LerpColorEffect::get_Data
// Il2CppName: get_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::AudioReactive::ChangeColorEffectData* (VROSC::AudioReactive::LerpColorEffect::*)()>(&VROSC::AudioReactive::LerpColorEffect::get_Data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::LerpColorEffect*), "get_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::LerpColorEffect::get_Renderers
// Il2CppName: get_Renderers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Renderer*> (VROSC::AudioReactive::LerpColorEffect::*)()>(&VROSC::AudioReactive::LerpColorEffect::get_Renderers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::LerpColorEffect*), "get_Renderers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::LerpColorEffect::CreateArrays
// Il2CppName: CreateArrays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::LerpColorEffect::*)()>(&VROSC::AudioReactive::LerpColorEffect::CreateArrays)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::LerpColorEffect*), "CreateArrays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::LerpColorEffect::GetNewColor
// Il2CppName: GetNewColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::AudioReactive::LerpColorEffect::*)()>(&VROSC::AudioReactive::LerpColorEffect::GetNewColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::LerpColorEffect*), "GetNewColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::LerpColorEffect::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::LerpColorEffect::*)(::UnityEngine::Color)>(&VROSC::AudioReactive::LerpColorEffect::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::LerpColorEffect*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::LerpColorEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::AudioReactive::LerpColorEffect::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::LerpColorEffect::*)(::VROSC::AudioReactive::AudioReactiveBehaviour*)>(&VROSC::AudioReactive::LerpColorEffect::Setup)> {
  static const MethodInfo* get() {
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("VROSC.AudioReactive", "AudioReactiveBehaviour")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::LerpColorEffect*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviour});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::LerpColorEffect::SpecificFlow
// Il2CppName: SpecificFlow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (VROSC::AudioReactive::LerpColorEffect::*)()>(&VROSC::AudioReactive::LerpColorEffect::SpecificFlow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::LerpColorEffect*), "SpecificFlow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::LerpColorEffect::DrawGizmos
// Il2CppName: DrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::LerpColorEffect::*)(::VROSC::AudioReactive::ReactToBeat*)>(&VROSC::AudioReactive::LerpColorEffect::DrawGizmos)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("VROSC.AudioReactive", "ReactToBeat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::LerpColorEffect*), "DrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender});
  }
};
