// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.AudioReactive.AudioReactiveEffectData
#include "VROSC/AudioReactive/AudioReactiveEffectData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: MinMaxVector3
  class MinMaxVector3;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: VROSC.AudioReactive
namespace VROSC::AudioReactive {
  // Forward declaring type: TranslateEffectData
  class TranslateEffectData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AudioReactive::TranslateEffectData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AudioReactive::TranslateEffectData*, "VROSC.AudioReactive", "TranslateEffectData");
// Type namespace: VROSC.AudioReactive
namespace VROSC::AudioReactive {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AudioReactive.TranslateEffectData
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: 780DAC
  class TranslateEffectData : public ::VROSC::AudioReactive::AudioReactiveEffectData {
    public:
    public:
    // private VROSC.MinMaxVector3 _translation
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::MinMaxVector3* translation;
    // Field size check
    static_assert(sizeof(::VROSC::MinMaxVector3*) == 0x8);
    // private System.Boolean _uniformRandom
    // Size: 0x1
    // Offset: 0x20
    bool uniformRandom;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _local
    // Size: 0x1
    // Offset: 0x21
    bool local;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: local and: duration
    char __padding2[0x2] = {};
    // private System.Single _duration
    // Size: 0x4
    // Offset: 0x24
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.AnimationCurve _curve
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AnimationCurve* curve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.MinMaxVector3 _translation
    [[deprecated("Use field access instead!")]] ::VROSC::MinMaxVector3*& dyn__translation();
    // Get instance field reference: private System.Boolean _uniformRandom
    [[deprecated("Use field access instead!")]] bool& dyn__uniformRandom();
    // Get instance field reference: private System.Boolean _local
    [[deprecated("Use field access instead!")]] bool& dyn__local();
    // Get instance field reference: private System.Single _duration
    [[deprecated("Use field access instead!")]] float& dyn__duration();
    // Get instance field reference: private UnityEngine.AnimationCurve _curve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__curve();
    // public VROSC.MinMaxVector3 get_Translation()
    // Offset: 0xA2D088
    ::VROSC::MinMaxVector3* get_Translation();
    // public System.Boolean get_UniformRandom()
    // Offset: 0xA2D090
    bool get_UniformRandom();
    // public System.Boolean get_Local()
    // Offset: 0xA2D098
    bool get_Local();
    // public System.Single get_Duration()
    // Offset: 0xA2D0A0
    float get_Duration();
    // public UnityEngine.AnimationCurve get_Curve()
    // Offset: 0xA2D0A8
    ::UnityEngine::AnimationCurve* get_Curve();
    // public System.Void .ctor()
    // Offset: 0xA2D0B0
    // Implemented from: VROSC.AudioReactive.AudioReactiveEffectData
    // Base method: System.Void AudioReactiveEffectData::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TranslateEffectData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AudioReactive::TranslateEffectData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TranslateEffectData*, creationType>()));
    }
  }; // VROSC.AudioReactive.TranslateEffectData
  #pragma pack(pop)
  static check_size<sizeof(TranslateEffectData), 40 + sizeof(::UnityEngine::AnimationCurve*)> __VROSC_AudioReactive_TranslateEffectDataSizeCheck;
  static_assert(sizeof(TranslateEffectData) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AudioReactive::TranslateEffectData::get_Translation
// Il2CppName: get_Translation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::MinMaxVector3* (VROSC::AudioReactive::TranslateEffectData::*)()>(&VROSC::AudioReactive::TranslateEffectData::get_Translation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::TranslateEffectData*), "get_Translation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::TranslateEffectData::get_UniformRandom
// Il2CppName: get_UniformRandom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::AudioReactive::TranslateEffectData::*)()>(&VROSC::AudioReactive::TranslateEffectData::get_UniformRandom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::TranslateEffectData*), "get_UniformRandom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::TranslateEffectData::get_Local
// Il2CppName: get_Local
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::AudioReactive::TranslateEffectData::*)()>(&VROSC::AudioReactive::TranslateEffectData::get_Local)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::TranslateEffectData*), "get_Local", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::TranslateEffectData::get_Duration
// Il2CppName: get_Duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::AudioReactive::TranslateEffectData::*)()>(&VROSC::AudioReactive::TranslateEffectData::get_Duration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::TranslateEffectData*), "get_Duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::TranslateEffectData::get_Curve
// Il2CppName: get_Curve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (VROSC::AudioReactive::TranslateEffectData::*)()>(&VROSC::AudioReactive::TranslateEffectData::get_Curve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::TranslateEffectData*), "get_Curve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::TranslateEffectData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
