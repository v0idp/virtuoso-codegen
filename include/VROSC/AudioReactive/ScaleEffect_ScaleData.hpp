// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.AudioReactive.ScaleEffect
#include "VROSC/AudioReactive/ScaleEffect.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: VROSC::AudioReactive
namespace VROSC::AudioReactive {
  // Forward declaring type: ScaleEffectData
  class ScaleEffectData;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AudioReactive::ScaleEffect::ScaleData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AudioReactive::ScaleEffect::ScaleData*, "VROSC.AudioReactive", "ScaleEffect/ScaleData");
// Type namespace: VROSC.AudioReactive
namespace VROSC::AudioReactive {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AudioReactive.ScaleEffect/VROSC.AudioReactive.ScaleData
  // [TokenAttribute] Offset: FFFFFFFF
  class ScaleEffect::ScaleData : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.Transform _transform
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 _startScale
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 startScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _initialScale
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 initialScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _endScale
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 endScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: private UnityEngine.Transform _transform
    [[deprecated]] ::UnityEngine::Transform*& dyn__transform();
    // Get instance field reference: private UnityEngine.Vector3 _startScale
    [[deprecated]] ::UnityEngine::Vector3& dyn__startScale();
    // Get instance field reference: private UnityEngine.Vector3 _initialScale
    [[deprecated]] ::UnityEngine::Vector3& dyn__initialScale();
    // Get instance field reference: private UnityEngine.Vector3 _endScale
    [[deprecated]] ::UnityEngine::Vector3& dyn__endScale();
    // public System.Void .ctor(UnityEngine.Transform transform, VROSC.AudioReactive.ScaleEffectData data)
    // Offset: 0x8D4320
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScaleEffect::ScaleData* New_ctor(::UnityEngine::Transform* transform, ::VROSC::AudioReactive::ScaleEffectData* data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AudioReactive::ScaleEffect::ScaleData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScaleEffect::ScaleData*, creationType>(transform, data)));
    }
    // public System.Void SetStartScale(VROSC.AudioReactive.ScaleEffectData data)
    // Offset: 0x8D42B0
    void SetStartScale(::VROSC::AudioReactive::ScaleEffectData* data);
    // public System.Void Lerp(System.Single amount)
    // Offset: 0x8D4214
    void Lerp(float amount);
  }; // VROSC.AudioReactive.ScaleEffect/VROSC.AudioReactive.ScaleData
  #pragma pack(pop)
  static check_size<sizeof(ScaleEffect::ScaleData), 48 + sizeof(::UnityEngine::Vector3)> __VROSC_AudioReactive_ScaleEffect_ScaleDataSizeCheck;
  static_assert(sizeof(ScaleEffect::ScaleData) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AudioReactive::ScaleEffect::ScaleData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::AudioReactive::ScaleEffect::ScaleData::SetStartScale
// Il2CppName: SetStartScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::ScaleEffect::ScaleData::*)(::VROSC::AudioReactive::ScaleEffectData*)>(&VROSC::AudioReactive::ScaleEffect::ScaleData::SetStartScale)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("VROSC.AudioReactive", "ScaleEffectData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::ScaleEffect::ScaleData*), "SetStartScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::ScaleEffect::ScaleData::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::ScaleEffect::ScaleData::*)(float)>(&VROSC::AudioReactive::ScaleEffect::ScaleData::Lerp)> {
  static const MethodInfo* get() {
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::ScaleEffect::ScaleData*), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{amount});
  }
};
