// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.AudioReactive.AudioReactiveBehaviour
#include "VROSC/AudioReactive/AudioReactiveBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC::AudioReactive
namespace VROSC::AudioReactive {
  // Forward declaring type: ReactiveEffect
  class ReactiveEffect;
  // Forward declaring type: LerpColorEffect
  class LerpColorEffect;
  // Forward declaring type: RotateEffect
  class RotateEffect;
  // Forward declaring type: TranslateEffect
  class TranslateEffect;
  // Forward declaring type: ScaleEffect
  class ScaleEffect;
  // Forward declaring type: TransformLerpEffect
  class TransformLerpEffect;
  // Forward declaring type: EmitParticlesEffect
  class EmitParticlesEffect;
  // Forward declaring type: SlowdownParticlesEffect
  class SlowdownParticlesEffect;
  // Forward declaring type: ShaderEffect
  class ShaderEffect;
  // Forward declaring type: ShiftColorEffect
  class ShiftColorEffect;
  // Forward declaring type: DrumpadEffect
  class DrumpadEffect;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: VROSC.AudioReactive
namespace VROSC::AudioReactive {
  // Forward declaring type: ReactToBeat
  class ReactToBeat;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AudioReactive::ReactToBeat);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AudioReactive::ReactToBeat*, "VROSC.AudioReactive", "ReactToBeat");
// Type namespace: VROSC.AudioReactive
namespace VROSC::AudioReactive {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AudioReactive.ReactToBeat
  // [TokenAttribute] Offset: FFFFFFFF
  class ReactToBeat : public ::VROSC::AudioReactive::AudioReactiveBehaviour {
    public:
    // Writing base type padding for base size: 0x24 to desired offset: 0x28
    char ___base_padding[0x4] = {};
    // Nested type: ::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect
    class ReactToBeatEffect;
    // Size: 0x64
    #pragma pack(push, 1)
    // Autogenerated type: VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect
    // [TokenAttribute] Offset: FFFFFFFF
    class ReactToBeatEffect : public ::Il2CppObject {
      public:
      // Nested type: ::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type
      struct Type;
      // Size: 0x4
      #pragma pack(push, 1)
      // Autogenerated type: VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type
      // [TokenAttribute] Offset: FFFFFFFF
      struct Type/*, public ::System::Enum*/ {
        public:
        public:
        // public System.Int32 value__
        // Size: 0x4
        // Offset: 0x0
        int value;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        public:
        // Creating value type constructor for type: Type
        constexpr Type(int value_ = {}) noexcept : value{value_} {}
        // Creating interface conversion operator: operator ::System::Enum
        operator ::System::Enum() noexcept {
          return *reinterpret_cast<::System::Enum*>(this);
        }
        // Creating conversion operator: operator int
        constexpr operator int() const noexcept {
          return value;
        }
        // static field const value: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type ColorChange
        static constexpr const int ColorChange = 0;
        // Get static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type ColorChange
        static ::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type _get_ColorChange();
        // Set static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type ColorChange
        static void _set_ColorChange(::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type value);
        // static field const value: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type Rotate
        static constexpr const int Rotate = 1;
        // Get static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type Rotate
        static ::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type _get_Rotate();
        // Set static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type Rotate
        static void _set_Rotate(::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type value);
        // static field const value: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type Translate
        static constexpr const int Translate = 2;
        // Get static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type Translate
        static ::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type _get_Translate();
        // Set static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type Translate
        static void _set_Translate(::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type value);
        // static field const value: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type Scale
        static constexpr const int Scale = 3;
        // Get static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type Scale
        static ::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type _get_Scale();
        // Set static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type Scale
        static void _set_Scale(::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type value);
        // static field const value: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type Transform
        static constexpr const int Transform = 4;
        // Get static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type Transform
        static ::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type _get_Transform();
        // Set static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type Transform
        static void _set_Transform(::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type value);
        // static field const value: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type EmitParticles
        static constexpr const int EmitParticles = 5;
        // Get static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type EmitParticles
        static ::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type _get_EmitParticles();
        // Set static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type EmitParticles
        static void _set_EmitParticles(::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type value);
        // static field const value: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type AffectParticleSpeed
        static constexpr const int AffectParticleSpeed = 6;
        // Get static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type AffectParticleSpeed
        static ::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type _get_AffectParticleSpeed();
        // Set static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type AffectParticleSpeed
        static void _set_AffectParticleSpeed(::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type value);
        // static field const value: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type ShaderEffect
        static constexpr const int ShaderEffect = 7;
        // Get static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type ShaderEffect
        static ::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type _get_ShaderEffect();
        // Set static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type ShaderEffect
        static void _set_ShaderEffect(::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type value);
        // static field const value: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type ShiftColor
        static constexpr const int ShiftColor = 8;
        // Get static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type ShiftColor
        static ::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type _get_ShiftColor();
        // Set static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type ShiftColor
        static void _set_ShiftColor(::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type value);
        // static field const value: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type DrumpadEffect
        static constexpr const int DrumpadEffect = 9;
        // Get static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type DrumpadEffect
        static ::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type _get_DrumpadEffect();
        // Set static field: static public VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type DrumpadEffect
        static void _set_DrumpadEffect(::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type value);
        // Get instance field reference: public System.Int32 value__
        [[deprecated("Use field access instead!")]] int& dyn_value__();
      }; // VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type
      #pragma pack(pop)
      static check_size<sizeof(ReactToBeat::ReactToBeatEffect::Type), 0 + sizeof(int)> __VROSC_AudioReactive_ReactToBeat_ReactToBeatEffect_TypeSizeCheck;
      static_assert(sizeof(ReactToBeat::ReactToBeatEffect::Type) == 0x4);
      public:
      // private VROSC.AudioReactive.LerpColorEffect _colorEffect
      // Size: 0x8
      // Offset: 0x10
      ::VROSC::AudioReactive::LerpColorEffect* colorEffect;
      // Field size check
      static_assert(sizeof(::VROSC::AudioReactive::LerpColorEffect*) == 0x8);
      // private VROSC.AudioReactive.RotateEffect _rotateEffect
      // Size: 0x8
      // Offset: 0x18
      ::VROSC::AudioReactive::RotateEffect* rotateEffect;
      // Field size check
      static_assert(sizeof(::VROSC::AudioReactive::RotateEffect*) == 0x8);
      // private VROSC.AudioReactive.TranslateEffect _translateEffect
      // Size: 0x8
      // Offset: 0x20
      ::VROSC::AudioReactive::TranslateEffect* translateEffect;
      // Field size check
      static_assert(sizeof(::VROSC::AudioReactive::TranslateEffect*) == 0x8);
      // private VROSC.AudioReactive.ScaleEffect _scaleEffect
      // Size: 0x8
      // Offset: 0x28
      ::VROSC::AudioReactive::ScaleEffect* scaleEffect;
      // Field size check
      static_assert(sizeof(::VROSC::AudioReactive::ScaleEffect*) == 0x8);
      // private VROSC.AudioReactive.TransformLerpEffect _transformEffect
      // Size: 0x8
      // Offset: 0x30
      ::VROSC::AudioReactive::TransformLerpEffect* transformEffect;
      // Field size check
      static_assert(sizeof(::VROSC::AudioReactive::TransformLerpEffect*) == 0x8);
      // private VROSC.AudioReactive.EmitParticlesEffect _emitParticlesEffect
      // Size: 0x8
      // Offset: 0x38
      ::VROSC::AudioReactive::EmitParticlesEffect* emitParticlesEffect;
      // Field size check
      static_assert(sizeof(::VROSC::AudioReactive::EmitParticlesEffect*) == 0x8);
      // private VROSC.AudioReactive.SlowdownParticlesEffect _slowdownParticlesEffect
      // Size: 0x8
      // Offset: 0x40
      ::VROSC::AudioReactive::SlowdownParticlesEffect* slowdownParticlesEffect;
      // Field size check
      static_assert(sizeof(::VROSC::AudioReactive::SlowdownParticlesEffect*) == 0x8);
      // private VROSC.AudioReactive.ShaderEffect _shaderEffect
      // Size: 0x8
      // Offset: 0x48
      ::VROSC::AudioReactive::ShaderEffect* shaderEffect;
      // Field size check
      static_assert(sizeof(::VROSC::AudioReactive::ShaderEffect*) == 0x8);
      // private VROSC.AudioReactive.ShiftColorEffect _shiftColorEffect
      // Size: 0x8
      // Offset: 0x50
      ::VROSC::AudioReactive::ShiftColorEffect* shiftColorEffect;
      // Field size check
      static_assert(sizeof(::VROSC::AudioReactive::ShiftColorEffect*) == 0x8);
      // private VROSC.AudioReactive.DrumpadEffect _drumpadEffect
      // Size: 0x8
      // Offset: 0x58
      ::VROSC::AudioReactive::DrumpadEffect* drumpadEffect;
      // Field size check
      static_assert(sizeof(::VROSC::AudioReactive::DrumpadEffect*) == 0x8);
      // private VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type _type
      // Size: 0x4
      // Offset: 0x60
      ::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type type;
      // Field size check
      static_assert(sizeof(::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type) == 0x4);
      public:
      // Get instance field reference: private VROSC.AudioReactive.LerpColorEffect _colorEffect
      [[deprecated("Use field access instead!")]] ::VROSC::AudioReactive::LerpColorEffect*& dyn__colorEffect();
      // Get instance field reference: private VROSC.AudioReactive.RotateEffect _rotateEffect
      [[deprecated("Use field access instead!")]] ::VROSC::AudioReactive::RotateEffect*& dyn__rotateEffect();
      // Get instance field reference: private VROSC.AudioReactive.TranslateEffect _translateEffect
      [[deprecated("Use field access instead!")]] ::VROSC::AudioReactive::TranslateEffect*& dyn__translateEffect();
      // Get instance field reference: private VROSC.AudioReactive.ScaleEffect _scaleEffect
      [[deprecated("Use field access instead!")]] ::VROSC::AudioReactive::ScaleEffect*& dyn__scaleEffect();
      // Get instance field reference: private VROSC.AudioReactive.TransformLerpEffect _transformEffect
      [[deprecated("Use field access instead!")]] ::VROSC::AudioReactive::TransformLerpEffect*& dyn__transformEffect();
      // Get instance field reference: private VROSC.AudioReactive.EmitParticlesEffect _emitParticlesEffect
      [[deprecated("Use field access instead!")]] ::VROSC::AudioReactive::EmitParticlesEffect*& dyn__emitParticlesEffect();
      // Get instance field reference: private VROSC.AudioReactive.SlowdownParticlesEffect _slowdownParticlesEffect
      [[deprecated("Use field access instead!")]] ::VROSC::AudioReactive::SlowdownParticlesEffect*& dyn__slowdownParticlesEffect();
      // Get instance field reference: private VROSC.AudioReactive.ShaderEffect _shaderEffect
      [[deprecated("Use field access instead!")]] ::VROSC::AudioReactive::ShaderEffect*& dyn__shaderEffect();
      // Get instance field reference: private VROSC.AudioReactive.ShiftColorEffect _shiftColorEffect
      [[deprecated("Use field access instead!")]] ::VROSC::AudioReactive::ShiftColorEffect*& dyn__shiftColorEffect();
      // Get instance field reference: private VROSC.AudioReactive.DrumpadEffect _drumpadEffect
      [[deprecated("Use field access instead!")]] ::VROSC::AudioReactive::DrumpadEffect*& dyn__drumpadEffect();
      // Get instance field reference: private VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type _type
      [[deprecated("Use field access instead!")]] ::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type& dyn__type();
      // public VROSC.AudioReactive.ReactiveEffect get_Effect()
      // Offset: 0x8CFBD0
      ::VROSC::AudioReactive::ReactiveEffect* get_Effect();
      // public System.Void .ctor(VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type type)
      // Offset: 0x8CFC4C
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static ReactToBeat::ReactToBeatEffect* New_ctor(::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type type) {
        static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<ReactToBeat::ReactToBeatEffect*, creationType>(type)));
      }
      // private VROSC.AudioReactive.ReactiveEffect GetEffectByType()
      // Offset: 0x8CFBD4
      ::VROSC::AudioReactive::ReactiveEffect* GetEffectByType();
    }; // VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect
    #pragma pack(pop)
    static check_size<sizeof(ReactToBeat::ReactToBeatEffect), 96 + sizeof(::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type)> __VROSC_AudioReactive_ReactToBeat_ReactToBeatEffectSizeCheck;
    static_assert(sizeof(ReactToBeat::ReactToBeatEffect) == 0x64);
    public:
    // private System.Collections.Generic.List`1<VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect> _effects
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect*>* effects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect*>*) == 0x8);
    // private System.Boolean _showGuides
    // Size: 0x1
    // Offset: 0x30
    bool showGuides;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect> _effects
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect*>*& dyn__effects();
    // Get instance field reference: private System.Boolean _showGuides
    [[deprecated("Use field access instead!")]] bool& dyn__showGuides();
    // private System.Void Update()
    // Offset: 0xB2DCAC
    void Update();
    // public System.Void AddEffect(VROSC.AudioReactive.ReactToBeat/VROSC.AudioReactive.ReactToBeatEffect/VROSC.AudioReactive.Type type)
    // Offset: 0xB2DF28
    void AddEffect(::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type type);
    // private System.Void OnDrawGizmos()
    // Offset: 0xB2DFBC
    void OnDrawGizmos();
    // public System.Void .ctor()
    // Offset: 0xB2E150
    // Implemented from: VROSC.AudioReactive.AudioReactiveBehaviour
    // Base method: System.Void AudioReactiveBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReactToBeat* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AudioReactive::ReactToBeat::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReactToBeat*, creationType>()));
    }
    // protected override System.Void Awake()
    // Offset: 0xB2DB6C
    // Implemented from: VROSC.AudioReactive.AudioReactiveBehaviour
    // Base method: System.Void AudioReactiveBehaviour::Awake()
    void Awake();
    // protected override System.Void OnBeat(System.Int32 beat)
    // Offset: 0xB2DDDC
    // Implemented from: VROSC.AudioReactive.AudioReactiveBehaviour
    // Base method: System.Void AudioReactiveBehaviour::OnBeat(System.Int32 beat)
    void OnBeat(int beat);
  }; // VROSC.AudioReactive.ReactToBeat
  #pragma pack(pop)
  static check_size<sizeof(ReactToBeat), 48 + sizeof(bool)> __VROSC_AudioReactive_ReactToBeatSizeCheck;
  static_assert(sizeof(ReactToBeat) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect*, "VROSC.AudioReactive", "ReactToBeat/ReactToBeatEffect");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type, "VROSC.AudioReactive", "ReactToBeat/ReactToBeatEffect/Type");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AudioReactive::ReactToBeat::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::ReactToBeat::*)()>(&VROSC::AudioReactive::ReactToBeat::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::ReactToBeat*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::ReactToBeat::AddEffect
// Il2CppName: AddEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::ReactToBeat::*)(::VROSC::AudioReactive::ReactToBeat::ReactToBeatEffect::Type)>(&VROSC::AudioReactive::ReactToBeat::AddEffect)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("VROSC.AudioReactive", "ReactToBeat/ReactToBeatEffect/Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::ReactToBeat*), "AddEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::ReactToBeat::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::ReactToBeat::*)()>(&VROSC::AudioReactive::ReactToBeat::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::ReactToBeat*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::ReactToBeat::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::AudioReactive::ReactToBeat::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::ReactToBeat::*)()>(&VROSC::AudioReactive::ReactToBeat::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::ReactToBeat*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::ReactToBeat::OnBeat
// Il2CppName: OnBeat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::ReactToBeat::*)(int)>(&VROSC::AudioReactive::ReactToBeat::OnBeat)> {
  static const MethodInfo* get() {
    static auto* beat = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::ReactToBeat*), "OnBeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beat});
  }
};
