// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.AudioReactive.AudioReactiveBehaviour
#include "VROSC/AudioReactive/AudioReactiveBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC::AudioReactive
namespace VROSC::AudioReactive {
  // Forward declaring type: ChangeColorEffectData
  class ChangeColorEffectData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: VROSC.AudioReactive
namespace VROSC::AudioReactive {
  // Forward declaring type: GlobalDrumOnBeat
  class GlobalDrumOnBeat;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AudioReactive::GlobalDrumOnBeat);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AudioReactive::GlobalDrumOnBeat*, "VROSC.AudioReactive", "GlobalDrumOnBeat");
// Type namespace: VROSC.AudioReactive
namespace VROSC::AudioReactive {
  // Size: 0x55
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AudioReactive.GlobalDrumOnBeat
  // [TokenAttribute] Offset: FFFFFFFF
  class GlobalDrumOnBeat : public ::VROSC::AudioReactive::AudioReactiveBehaviour {
    public:
    // Writing base type padding for base size: 0x24 to desired offset: 0x28
    char ___base_padding[0x4] = {};
    // Nested type: ::VROSC::AudioReactive::GlobalDrumOnBeat::$ChangeColor$d__12
    class $ChangeColor$d__12;
    // Nested type: ::VROSC::AudioReactive::GlobalDrumOnBeat::$AnimateTiming$d__13
    class $AnimateTiming$d__13;
    public:
    // private UnityEngine.AnimationCurve _powerCurve
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AnimationCurve* powerCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private VROSC.AudioReactive.ChangeColorEffectData _data
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::AudioReactive::ChangeColorEffectData* data;
    // Field size check
    static_assert(sizeof(::VROSC::AudioReactive::ChangeColorEffectData*) == 0x8);
    // private System.Single _timeIfBPM0
    // Size: 0x4
    // Offset: 0x38
    float timeIfBPM0;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _currentInt
    // Size: 0x4
    // Offset: 0x3C
    int currentInt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _pingPongDirection
    // Size: 0x4
    // Offset: 0x40
    int pingPongDirection;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Color _currentColor
    // Size: 0x10
    // Offset: 0x44
    ::UnityEngine::Color currentColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Boolean _active
    // Size: 0x1
    // Offset: 0x54
    bool active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.AnimationCurve _powerCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__powerCurve();
    // Get instance field reference: private VROSC.AudioReactive.ChangeColorEffectData _data
    [[deprecated("Use field access instead!")]] ::VROSC::AudioReactive::ChangeColorEffectData*& dyn__data();
    // Get instance field reference: private System.Single _timeIfBPM0
    [[deprecated("Use field access instead!")]] float& dyn__timeIfBPM0();
    // Get instance field reference: private System.Int32 _currentInt
    [[deprecated("Use field access instead!")]] int& dyn__currentInt();
    // Get instance field reference: private System.Int32 _pingPongDirection
    [[deprecated("Use field access instead!")]] int& dyn__pingPongDirection();
    // Get instance field reference: private UnityEngine.Color _currentColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__currentColor();
    // Get instance field reference: private System.Boolean _active
    [[deprecated("Use field access instead!")]] bool& dyn__active();
    // private System.Void Update()
    // Offset: 0x19A4F50
    void Update();
    // private System.Void UpdateDrums(System.Single timing)
    // Offset: 0x19A4EBC
    void UpdateDrums(float timing);
    // private System.Void SetDrumcolor(UnityEngine.Color color)
    // Offset: 0x19A4E44
    void SetDrumcolor(::UnityEngine::Color color);
    // protected System.Collections.IEnumerator ChangeColor()
    // Offset: 0x19A50E0
    ::System::Collections::IEnumerator* ChangeColor();
    // protected System.Collections.IEnumerator AnimateTiming()
    // Offset: 0x19A514C
    ::System::Collections::IEnumerator* AnimateTiming();
    // private UnityEngine.Color GetNewColor()
    // Offset: 0x19A4BF8
    ::UnityEngine::Color GetNewColor();
    // public System.Void .ctor()
    // Offset: 0x19A51B8
    // Implemented from: VROSC.AudioReactive.AudioReactiveBehaviour
    // Base method: System.Void AudioReactiveBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GlobalDrumOnBeat* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AudioReactive::GlobalDrumOnBeat::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GlobalDrumOnBeat*, creationType>()));
    }
    // protected override System.Void OnEnable()
    // Offset: 0x19A4BA0
    // Implemented from: VROSC.AudioReactive.AudioReactiveBehaviour
    // Base method: System.Void AudioReactiveBehaviour::OnEnable()
    void OnEnable();
    // protected override System.Void OnBeat(System.Int32 beat)
    // Offset: 0x19A5024
    // Implemented from: VROSC.AudioReactive.AudioReactiveBehaviour
    // Base method: System.Void AudioReactiveBehaviour::OnBeat(System.Int32 beat)
    void OnBeat(int beat);
  }; // VROSC.AudioReactive.GlobalDrumOnBeat
  #pragma pack(pop)
  static check_size<sizeof(GlobalDrumOnBeat), 84 + sizeof(bool)> __VROSC_AudioReactive_GlobalDrumOnBeatSizeCheck;
  static_assert(sizeof(GlobalDrumOnBeat) == 0x55);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalDrumOnBeat::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::GlobalDrumOnBeat::*)()>(&VROSC::AudioReactive::GlobalDrumOnBeat::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalDrumOnBeat*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalDrumOnBeat::UpdateDrums
// Il2CppName: UpdateDrums
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::GlobalDrumOnBeat::*)(float)>(&VROSC::AudioReactive::GlobalDrumOnBeat::UpdateDrums)> {
  static const MethodInfo* get() {
    static auto* timing = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalDrumOnBeat*), "UpdateDrums", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timing});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalDrumOnBeat::SetDrumcolor
// Il2CppName: SetDrumcolor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::GlobalDrumOnBeat::*)(::UnityEngine::Color)>(&VROSC::AudioReactive::GlobalDrumOnBeat::SetDrumcolor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalDrumOnBeat*), "SetDrumcolor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalDrumOnBeat::ChangeColor
// Il2CppName: ChangeColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (VROSC::AudioReactive::GlobalDrumOnBeat::*)()>(&VROSC::AudioReactive::GlobalDrumOnBeat::ChangeColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalDrumOnBeat*), "ChangeColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalDrumOnBeat::AnimateTiming
// Il2CppName: AnimateTiming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (VROSC::AudioReactive::GlobalDrumOnBeat::*)()>(&VROSC::AudioReactive::GlobalDrumOnBeat::AnimateTiming)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalDrumOnBeat*), "AnimateTiming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalDrumOnBeat::GetNewColor
// Il2CppName: GetNewColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::AudioReactive::GlobalDrumOnBeat::*)()>(&VROSC::AudioReactive::GlobalDrumOnBeat::GetNewColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalDrumOnBeat*), "GetNewColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalDrumOnBeat::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalDrumOnBeat::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::GlobalDrumOnBeat::*)()>(&VROSC::AudioReactive::GlobalDrumOnBeat::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalDrumOnBeat*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalDrumOnBeat::OnBeat
// Il2CppName: OnBeat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::GlobalDrumOnBeat::*)(int)>(&VROSC::AudioReactive::GlobalDrumOnBeat::OnBeat)> {
  static const MethodInfo* get() {
    static auto* beat = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalDrumOnBeat*), "OnBeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beat});
  }
};
