// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC::AudioReactive
namespace VROSC::AudioReactive {
  // Forward declaring type: GlobalColorEffectData
  class GlobalColorEffectData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: VROSC.AudioReactive
namespace VROSC::AudioReactive {
  // Forward declaring type: GlobalShiftColorData
  class GlobalShiftColorData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AudioReactive::GlobalShiftColorData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AudioReactive::GlobalShiftColorData*, "VROSC.AudioReactive", "GlobalShiftColorData");
// Type namespace: VROSC.AudioReactive
namespace VROSC::AudioReactive {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AudioReactive.GlobalShiftColorData
  // [TokenAttribute] Offset: FFFFFFFF
  class GlobalShiftColorData : public ::Il2CppObject {
    public:
    public:
    // private VROSC.AudioReactive.GlobalColorEffectData _data
    // Size: 0x8
    // Offset: 0x10
    ::VROSC::AudioReactive::GlobalColorEffectData* data;
    // Field size check
    static_assert(sizeof(::VROSC::AudioReactive::GlobalColorEffectData*) == 0x8);
    // private System.Int32 _channel
    // Size: 0x4
    // Offset: 0x18
    int channel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _shift
    // Size: 0x4
    // Offset: 0x1C
    float shift;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _currentHue
    // Size: 0x4
    // Offset: 0x20
    float currentHue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _currentSaturation
    // Size: 0x4
    // Offset: 0x24
    float currentSaturation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _currentValue
    // Size: 0x4
    // Offset: 0x28
    float currentValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _startSaturation
    // Size: 0x4
    // Offset: 0x2C
    float startSaturation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _intensityShift
    // Size: 0x4
    // Offset: 0x30
    float intensityShift;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _saturationShift
    // Size: 0x4
    // Offset: 0x34
    float saturationShift;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.MaterialPropertyBlock _block
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::MaterialPropertyBlock* block;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    public:
    // Get static field: static public System.Action`2<UnityEngine.Color,System.Single> OnColor1Change
    static ::System::Action_2<::UnityEngine::Color, float>* _get_OnColor1Change();
    // Set static field: static public System.Action`2<UnityEngine.Color,System.Single> OnColor1Change
    static void _set_OnColor1Change(::System::Action_2<::UnityEngine::Color, float>* value);
    // Get static field: static public System.Action`2<UnityEngine.Color,System.Single> OnColor2Change
    static ::System::Action_2<::UnityEngine::Color, float>* _get_OnColor2Change();
    // Set static field: static public System.Action`2<UnityEngine.Color,System.Single> OnColor2Change
    static void _set_OnColor2Change(::System::Action_2<::UnityEngine::Color, float>* value);
    // Get static field: static public System.Action`2<UnityEngine.Color,System.Single> OnColor3Change
    static ::System::Action_2<::UnityEngine::Color, float>* _get_OnColor3Change();
    // Set static field: static public System.Action`2<UnityEngine.Color,System.Single> OnColor3Change
    static void _set_OnColor3Change(::System::Action_2<::UnityEngine::Color, float>* value);
    // Get static field: static public System.Action`2<UnityEngine.Color,System.Single> OnColor4Change
    static ::System::Action_2<::UnityEngine::Color, float>* _get_OnColor4Change();
    // Set static field: static public System.Action`2<UnityEngine.Color,System.Single> OnColor4Change
    static void _set_OnColor4Change(::System::Action_2<::UnityEngine::Color, float>* value);
    // Get instance field reference: private VROSC.AudioReactive.GlobalColorEffectData _data
    [[deprecated("Use field access instead!")]] ::VROSC::AudioReactive::GlobalColorEffectData*& dyn__data();
    // Get instance field reference: private System.Int32 _channel
    [[deprecated("Use field access instead!")]] int& dyn__channel();
    // Get instance field reference: private System.Single _shift
    [[deprecated("Use field access instead!")]] float& dyn__shift();
    // Get instance field reference: private System.Single _currentHue
    [[deprecated("Use field access instead!")]] float& dyn__currentHue();
    // Get instance field reference: private System.Single _currentSaturation
    [[deprecated("Use field access instead!")]] float& dyn__currentSaturation();
    // Get instance field reference: private System.Single _currentValue
    [[deprecated("Use field access instead!")]] float& dyn__currentValue();
    // Get instance field reference: private System.Single _startSaturation
    [[deprecated("Use field access instead!")]] float& dyn__startSaturation();
    // Get instance field reference: private System.Single _intensityShift
    [[deprecated("Use field access instead!")]] float& dyn__intensityShift();
    // Get instance field reference: private System.Single _saturationShift
    [[deprecated("Use field access instead!")]] float& dyn__saturationShift();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock _block
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn__block();
    // public UnityEngine.Color get_Color()
    // Offset: 0x19A51D4
    ::UnityEngine::Color get_Color();
    // public System.Void .ctor(VROSC.AudioReactive.GlobalColorEffectData data, System.Int32 channel)
    // Offset: 0x19A4584
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GlobalShiftColorData* New_ctor(::VROSC::AudioReactive::GlobalColorEffectData* data, int channel) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AudioReactive::GlobalShiftColorData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GlobalShiftColorData*, creationType>(data, channel)));
    }
    // public System.Void SetColor(UnityEngine.Color color)
    // Offset: 0x19A4910
    void SetColor(::UnityEngine::Color color);
    // private UnityEngine.Color GetColor()
    // Offset: 0x19A51D8
    ::UnityEngine::Color GetColor();
    // public System.Void ShiftShade()
    // Offset: 0x19A4868
    void ShiftShade();
    // public System.Void ShiftShadeSpecific(System.Single shift)
    // Offset: 0x19A521C
    void ShiftShadeSpecific(float shift);
    // public System.Void SetSaturationShift(System.Single saturationShift)
    // Offset: 0x19A52E8
    void SetSaturationShift(float saturationShift);
    // public System.Void SetValueShift(System.Single value)
    // Offset: 0x19A52F0
    void SetValueShift(float value);
    // public System.Void UpdateGlobalColor()
    // Offset: 0x19A48EC
    void UpdateGlobalColor();
    // static public System.Void UpdateGlobalColor(UnityEngine.Color color, System.Int32 channel)
    // Offset: 0x19A4B38
    static void UpdateGlobalColor(::UnityEngine::Color color, int channel);
    // static private System.Void SendActions(UnityEngine.Color color, System.Single multiplier, System.Int32 channel)
    // Offset: 0x19A5380
    static void SendActions(::UnityEngine::Color color, float multiplier, int channel);
    // static private System.String GetGlobalShaderString(System.Int32 channel)
    // Offset: 0x19A52F8
    static ::StringW GetGlobalShaderString(int channel);
  }; // VROSC.AudioReactive.GlobalShiftColorData
  #pragma pack(pop)
  static check_size<sizeof(GlobalShiftColorData), 56 + sizeof(::UnityEngine::MaterialPropertyBlock*)> __VROSC_AudioReactive_GlobalShiftColorDataSizeCheck;
  static_assert(sizeof(GlobalShiftColorData) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalShiftColorData::get_Color
// Il2CppName: get_Color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::AudioReactive::GlobalShiftColorData::*)()>(&VROSC::AudioReactive::GlobalShiftColorData::get_Color)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalShiftColorData*), "get_Color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalShiftColorData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalShiftColorData::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::GlobalShiftColorData::*)(::UnityEngine::Color)>(&VROSC::AudioReactive::GlobalShiftColorData::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalShiftColorData*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalShiftColorData::GetColor
// Il2CppName: GetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::AudioReactive::GlobalShiftColorData::*)()>(&VROSC::AudioReactive::GlobalShiftColorData::GetColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalShiftColorData*), "GetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalShiftColorData::ShiftShade
// Il2CppName: ShiftShade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::GlobalShiftColorData::*)()>(&VROSC::AudioReactive::GlobalShiftColorData::ShiftShade)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalShiftColorData*), "ShiftShade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalShiftColorData::ShiftShadeSpecific
// Il2CppName: ShiftShadeSpecific
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::GlobalShiftColorData::*)(float)>(&VROSC::AudioReactive::GlobalShiftColorData::ShiftShadeSpecific)> {
  static const MethodInfo* get() {
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalShiftColorData*), "ShiftShadeSpecific", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shift});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalShiftColorData::SetSaturationShift
// Il2CppName: SetSaturationShift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::GlobalShiftColorData::*)(float)>(&VROSC::AudioReactive::GlobalShiftColorData::SetSaturationShift)> {
  static const MethodInfo* get() {
    static auto* saturationShift = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalShiftColorData*), "SetSaturationShift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{saturationShift});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalShiftColorData::SetValueShift
// Il2CppName: SetValueShift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::GlobalShiftColorData::*)(float)>(&VROSC::AudioReactive::GlobalShiftColorData::SetValueShift)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalShiftColorData*), "SetValueShift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalShiftColorData::UpdateGlobalColor
// Il2CppName: UpdateGlobalColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::GlobalShiftColorData::*)()>(&VROSC::AudioReactive::GlobalShiftColorData::UpdateGlobalColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalShiftColorData*), "UpdateGlobalColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalShiftColorData::UpdateGlobalColor
// Il2CppName: UpdateGlobalColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Color, int)>(&VROSC::AudioReactive::GlobalShiftColorData::UpdateGlobalColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalShiftColorData*), "UpdateGlobalColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, channel});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalShiftColorData::SendActions
// Il2CppName: SendActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Color, float, int)>(&VROSC::AudioReactive::GlobalShiftColorData::SendActions)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* multiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalShiftColorData*), "SendActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, multiplier, channel});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::GlobalShiftColorData::GetGlobalShaderString
// Il2CppName: GetGlobalShaderString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int)>(&VROSC::AudioReactive::GlobalShiftColorData::GetGlobalShaderString)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::GlobalShiftColorData*), "GetGlobalShaderString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel});
  }
};
