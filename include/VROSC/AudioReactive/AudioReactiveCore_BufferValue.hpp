// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.AudioReactive.AudioReactiveCore
#include "VROSC/AudioReactive/AudioReactiveCore.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: MinMaxFloat
  class MinMaxFloat;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AudioReactive::AudioReactiveCore::BufferValue);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AudioReactive::AudioReactiveCore::BufferValue*, "VROSC.AudioReactive", "AudioReactiveCore/BufferValue");
// Type namespace: VROSC.AudioReactive
namespace VROSC::AudioReactive {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AudioReactive.AudioReactiveCore/VROSC.AudioReactive.BufferValue
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioReactiveCore::BufferValue : public ::Il2CppObject {
    public:
    public:
    // private System.Single <Value>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    float Value;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <Buffer>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    float Buffer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <Interpolated>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    float Interpolated;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _peak
    // Size: 0x4
    // Offset: 0x1C
    float peak;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private VROSC.MinMaxFloat _interval
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::MinMaxFloat* interval;
    // Field size check
    static_assert(sizeof(::VROSC::MinMaxFloat*) == 0x8);
    // public System.Action OnBeat
    // Size: 0x8
    // Offset: 0x28
    ::System::Action* OnBeat;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Single _coolDown
    // Size: 0x4
    // Offset: 0x30
    float coolDown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Single <Value>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$Value$k__BackingField();
    // Get instance field reference: private System.Single <Buffer>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$Buffer$k__BackingField();
    // Get instance field reference: private System.Single <Interpolated>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$Interpolated$k__BackingField();
    // Get instance field reference: private System.Single _peak
    [[deprecated("Use field access instead!")]] float& dyn__peak();
    // Get instance field reference: private VROSC.MinMaxFloat _interval
    [[deprecated("Use field access instead!")]] ::VROSC::MinMaxFloat*& dyn__interval();
    // Get instance field reference: public System.Action OnBeat
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnBeat();
    // Get instance field reference: private System.Single _coolDown
    [[deprecated("Use field access instead!")]] float& dyn__coolDown();
    // public System.Single get_Value()
    // Offset: 0x957414
    float get_Value();
    // private System.Void set_Value(System.Single value)
    // Offset: 0x95740C
    void set_Value(float value);
    // public System.Single get_Buffer()
    // Offset: 0x957424
    float get_Buffer();
    // private System.Void set_Buffer(System.Single value)
    // Offset: 0x95741C
    void set_Buffer(float value);
    // public System.Single get_Interpolated()
    // Offset: 0x957434
    float get_Interpolated();
    // private System.Void set_Interpolated(System.Single value)
    // Offset: 0x95742C
    void set_Interpolated(float value);
    // public System.Void .ctor()
    // Offset: 0x95761C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioReactiveCore::BufferValue* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AudioReactive::AudioReactiveCore::BufferValue::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioReactiveCore::BufferValue*, creationType>()));
    }
    // public System.Void Set(System.Single min, System.Single max)
    // Offset: 0x95743C
    void Set(float min, float max);
    // public System.Void Update(System.Single modifier, System.Single fallSpeed, System.Single coolDownTime)
    // Offset: 0x9574B0
    void Update(float modifier, float fallSpeed, float coolDownTime);
  }; // VROSC.AudioReactive.AudioReactiveCore/VROSC.AudioReactive.BufferValue
  #pragma pack(pop)
  static check_size<sizeof(AudioReactiveCore::BufferValue), 48 + sizeof(float)> __VROSC_AudioReactive_AudioReactiveCore_BufferValueSizeCheck;
  static_assert(sizeof(AudioReactiveCore::BufferValue) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AudioReactive::AudioReactiveCore::BufferValue::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::AudioReactive::AudioReactiveCore::BufferValue::*)()>(&VROSC::AudioReactive::AudioReactiveCore::BufferValue::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::AudioReactiveCore::BufferValue*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::AudioReactiveCore::BufferValue::set_Value
// Il2CppName: set_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::AudioReactiveCore::BufferValue::*)(float)>(&VROSC::AudioReactive::AudioReactiveCore::BufferValue::set_Value)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::AudioReactiveCore::BufferValue*), "set_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::AudioReactiveCore::BufferValue::get_Buffer
// Il2CppName: get_Buffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::AudioReactive::AudioReactiveCore::BufferValue::*)()>(&VROSC::AudioReactive::AudioReactiveCore::BufferValue::get_Buffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::AudioReactiveCore::BufferValue*), "get_Buffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::AudioReactiveCore::BufferValue::set_Buffer
// Il2CppName: set_Buffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::AudioReactiveCore::BufferValue::*)(float)>(&VROSC::AudioReactive::AudioReactiveCore::BufferValue::set_Buffer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::AudioReactiveCore::BufferValue*), "set_Buffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::AudioReactiveCore::BufferValue::get_Interpolated
// Il2CppName: get_Interpolated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::AudioReactive::AudioReactiveCore::BufferValue::*)()>(&VROSC::AudioReactive::AudioReactiveCore::BufferValue::get_Interpolated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::AudioReactiveCore::BufferValue*), "get_Interpolated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::AudioReactiveCore::BufferValue::set_Interpolated
// Il2CppName: set_Interpolated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::AudioReactiveCore::BufferValue::*)(float)>(&VROSC::AudioReactive::AudioReactiveCore::BufferValue::set_Interpolated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::AudioReactiveCore::BufferValue*), "set_Interpolated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::AudioReactiveCore::BufferValue::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::AudioReactive::AudioReactiveCore::BufferValue::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::AudioReactiveCore::BufferValue::*)(float, float)>(&VROSC::AudioReactive::AudioReactiveCore::BufferValue::Set)> {
  static const MethodInfo* get() {
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::AudioReactiveCore::BufferValue*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{min, max});
  }
};
// Writing MetadataGetter for method: VROSC::AudioReactive::AudioReactiveCore::BufferValue::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioReactive::AudioReactiveCore::BufferValue::*)(float, float, float)>(&VROSC::AudioReactive::AudioReactiveCore::BufferValue::Update)> {
  static const MethodInfo* get() {
    static auto* modifier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fallSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* coolDownTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioReactive::AudioReactiveCore::BufferValue*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{modifier, fallSpeed, coolDownTime});
  }
};
