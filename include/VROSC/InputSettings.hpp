// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: VROSC.TriggerButton
#include "VROSC/TriggerButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: PointingLaser
  class PointingLaser;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: InputSettings
  class InputSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::InputSettings);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::InputSettings*, "VROSC", "InputSettings");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.InputSettings
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: 669558
  class InputSettings : public ::UnityEngine::ScriptableObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private VROSC.PointingLaser _pointerPrefab
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::PointingLaser* pointerPrefab;
    // Field size check
    static_assert(sizeof(::VROSC::PointingLaser*) == 0x8);
    // [HeaderAttribute] Offset: 0x66DD14
    // [RangeAttribute] Offset: 0x66DD14
    // private System.Single _pointingDistance
    // Size: 0x4
    // Offset: 0x20
    float pointingDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x66DD78
    // private System.Single _overlapDistance
    // Size: 0x4
    // Offset: 0x24
    float overlapDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x66DDBC
    // private System.Int32 _maxOverlapColliders
    // Size: 0x4
    // Offset: 0x28
    int maxOverlapColliders;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [RangeAttribute] Offset: 0x66DDFC
    // [HeaderAttribute] Offset: 0x66DDFC
    // private System.Single _positionSmoothing
    // Size: 0x4
    // Offset: 0x2C
    float positionSmoothing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x66DE60
    // private System.Single _grabSmoothing
    // Size: 0x4
    // Offset: 0x30
    float grabSmoothing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x66DEA0
    // private System.Single _rotationSmoothing
    // Size: 0x4
    // Offset: 0x34
    float rotationSmoothing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0x66DEE0
    // private UnityEngine.LayerMask _uiInteractionMask
    // Size: 0x4
    // Offset: 0x38
    ::UnityEngine::LayerMask uiInteractionMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private UnityEngine.LayerMask _overlapLayerMask
    // Size: 0x4
    // Offset: 0x3C
    ::UnityEngine::LayerMask overlapLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private UnityEngine.LayerMask _gripOnlyLayerMask
    // Size: 0x4
    // Offset: 0x40
    ::UnityEngine::LayerMask gripOnlyLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // [HeaderAttribute] Offset: 0x66DF4C
    // private VROSC.TriggerButton _pinButton
    // Size: 0x4
    // Offset: 0x44
    ::VROSC::TriggerButton pinButton;
    // Field size check
    static_assert(sizeof(::VROSC::TriggerButton) == 0x4);
    // private VROSC.TriggerButton _attractButton
    // Size: 0x4
    // Offset: 0x48
    ::VROSC::TriggerButton attractButton;
    // Field size check
    static_assert(sizeof(::VROSC::TriggerButton) == 0x4);
    // private System.Single _attractInDuration
    // Size: 0x4
    // Offset: 0x4C
    float attractInDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.AnimationCurve _attractAnimationInCurve
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AnimationCurve* attractAnimationInCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // [HeaderAttribute] Offset: 0x66DFC8
    // private System.Single _activationTime
    // Size: 0x4
    // Offset: 0x58
    float activationTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.PointingLaser _pointerPrefab
    ::VROSC::PointingLaser*& dyn__pointerPrefab();
    // Get instance field reference: private System.Single _pointingDistance
    float& dyn__pointingDistance();
    // Get instance field reference: private System.Single _overlapDistance
    float& dyn__overlapDistance();
    // Get instance field reference: private System.Int32 _maxOverlapColliders
    int& dyn__maxOverlapColliders();
    // Get instance field reference: private System.Single _positionSmoothing
    float& dyn__positionSmoothing();
    // Get instance field reference: private System.Single _grabSmoothing
    float& dyn__grabSmoothing();
    // Get instance field reference: private System.Single _rotationSmoothing
    float& dyn__rotationSmoothing();
    // Get instance field reference: private UnityEngine.LayerMask _uiInteractionMask
    ::UnityEngine::LayerMask& dyn__uiInteractionMask();
    // Get instance field reference: private UnityEngine.LayerMask _overlapLayerMask
    ::UnityEngine::LayerMask& dyn__overlapLayerMask();
    // Get instance field reference: private UnityEngine.LayerMask _gripOnlyLayerMask
    ::UnityEngine::LayerMask& dyn__gripOnlyLayerMask();
    // Get instance field reference: private VROSC.TriggerButton _pinButton
    ::VROSC::TriggerButton& dyn__pinButton();
    // Get instance field reference: private VROSC.TriggerButton _attractButton
    ::VROSC::TriggerButton& dyn__attractButton();
    // Get instance field reference: private System.Single _attractInDuration
    float& dyn__attractInDuration();
    // Get instance field reference: private UnityEngine.AnimationCurve _attractAnimationInCurve
    ::UnityEngine::AnimationCurve*& dyn__attractAnimationInCurve();
    // Get instance field reference: private System.Single _activationTime
    float& dyn__activationTime();
    // public VROSC.PointingLaser get_PointerPrefab()
    // Offset: 0x1383130
    ::VROSC::PointingLaser* get_PointerPrefab();
    // public System.Single get_PointingDistance()
    // Offset: 0x1383138
    float get_PointingDistance();
    // public System.Single get_OverlapDistance()
    // Offset: 0x1383140
    float get_OverlapDistance();
    // public System.Int32 get_MaxOverlapColliders()
    // Offset: 0x1383148
    int get_MaxOverlapColliders();
    // public System.Single get_PositionSmoothing()
    // Offset: 0x1383150
    float get_PositionSmoothing();
    // public System.Single get_GrabSmoothing()
    // Offset: 0x1383158
    float get_GrabSmoothing();
    // public System.Single get_RotationSmoothing()
    // Offset: 0x1383160
    float get_RotationSmoothing();
    // public UnityEngine.LayerMask get_UIInteractionMask()
    // Offset: 0x1383168
    ::UnityEngine::LayerMask get_UIInteractionMask();
    // public UnityEngine.LayerMask get_OverlapLayerMask()
    // Offset: 0x1383170
    ::UnityEngine::LayerMask get_OverlapLayerMask();
    // public UnityEngine.LayerMask get_GripOnlyLayerMask()
    // Offset: 0x1383178
    ::UnityEngine::LayerMask get_GripOnlyLayerMask();
    // public VROSC.TriggerButton get_AttractButton()
    // Offset: 0x1383180
    ::VROSC::TriggerButton get_AttractButton();
    // public VROSC.TriggerButton get_PinButton()
    // Offset: 0x1383188
    ::VROSC::TriggerButton get_PinButton();
    // public System.Single get_AttractDuration()
    // Offset: 0x1383190
    float get_AttractDuration();
    // public UnityEngine.AnimationCurve get_AttractAnimationCurve()
    // Offset: 0x1383198
    ::UnityEngine::AnimationCurve* get_AttractAnimationCurve();
    // public System.Single get_ActivationTime()
    // Offset: 0x13831A0
    float get_ActivationTime();
    // public System.Void .ctor()
    // Offset: 0x13831A8
    // Implemented from: UnityEngine.ScriptableObject
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::InputSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputSettings*, creationType>()));
    }
  }; // VROSC.InputSettings
  #pragma pack(pop)
  static check_size<sizeof(InputSettings), 88 + sizeof(float)> __VROSC_InputSettingsSizeCheck;
  static_assert(sizeof(InputSettings) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::InputSettings::get_PointerPrefab
// Il2CppName: get_PointerPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::PointingLaser* (VROSC::InputSettings::*)()>(&VROSC::InputSettings::get_PointerPrefab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputSettings*), "get_PointerPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputSettings::get_PointingDistance
// Il2CppName: get_PointingDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::InputSettings::*)()>(&VROSC::InputSettings::get_PointingDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputSettings*), "get_PointingDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputSettings::get_OverlapDistance
// Il2CppName: get_OverlapDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::InputSettings::*)()>(&VROSC::InputSettings::get_OverlapDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputSettings*), "get_OverlapDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputSettings::get_MaxOverlapColliders
// Il2CppName: get_MaxOverlapColliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::InputSettings::*)()>(&VROSC::InputSettings::get_MaxOverlapColliders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputSettings*), "get_MaxOverlapColliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputSettings::get_PositionSmoothing
// Il2CppName: get_PositionSmoothing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::InputSettings::*)()>(&VROSC::InputSettings::get_PositionSmoothing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputSettings*), "get_PositionSmoothing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputSettings::get_GrabSmoothing
// Il2CppName: get_GrabSmoothing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::InputSettings::*)()>(&VROSC::InputSettings::get_GrabSmoothing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputSettings*), "get_GrabSmoothing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputSettings::get_RotationSmoothing
// Il2CppName: get_RotationSmoothing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::InputSettings::*)()>(&VROSC::InputSettings::get_RotationSmoothing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputSettings*), "get_RotationSmoothing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputSettings::get_UIInteractionMask
// Il2CppName: get_UIInteractionMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (VROSC::InputSettings::*)()>(&VROSC::InputSettings::get_UIInteractionMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputSettings*), "get_UIInteractionMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputSettings::get_OverlapLayerMask
// Il2CppName: get_OverlapLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (VROSC::InputSettings::*)()>(&VROSC::InputSettings::get_OverlapLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputSettings*), "get_OverlapLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputSettings::get_GripOnlyLayerMask
// Il2CppName: get_GripOnlyLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (VROSC::InputSettings::*)()>(&VROSC::InputSettings::get_GripOnlyLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputSettings*), "get_GripOnlyLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputSettings::get_AttractButton
// Il2CppName: get_AttractButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::TriggerButton (VROSC::InputSettings::*)()>(&VROSC::InputSettings::get_AttractButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputSettings*), "get_AttractButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputSettings::get_PinButton
// Il2CppName: get_PinButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::TriggerButton (VROSC::InputSettings::*)()>(&VROSC::InputSettings::get_PinButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputSettings*), "get_PinButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputSettings::get_AttractDuration
// Il2CppName: get_AttractDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::InputSettings::*)()>(&VROSC::InputSettings::get_AttractDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputSettings*), "get_AttractDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputSettings::get_AttractAnimationCurve
// Il2CppName: get_AttractAnimationCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (VROSC::InputSettings::*)()>(&VROSC::InputSettings::get_AttractAnimationCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputSettings*), "get_AttractAnimationCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputSettings::get_ActivationTime
// Il2CppName: get_ActivationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::InputSettings::*)()>(&VROSC::InputSettings::get_ActivationTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InputSettings*), "get_ActivationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InputSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
