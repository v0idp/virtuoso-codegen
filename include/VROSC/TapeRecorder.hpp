// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.Error
#include "VROSC/Error.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: TapeRecorderUI
  class TapeRecorderUI;
  // Forward declaring type: TapeRecorderDataController
  class TapeRecorderDataController;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TapeRecorder
  class TapeRecorder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TapeRecorder);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TapeRecorder*, "VROSC", "TapeRecorder");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x45
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TapeRecorder
  // [TokenAttribute] Offset: FFFFFFFF
  class TapeRecorder : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.TapeRecorderUI _ui
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::TapeRecorderUI* ui;
    // Field size check
    static_assert(sizeof(::VROSC::TapeRecorderUI*) == 0x8);
    // private UnityEngine.AudioSource _audioSource
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private VROSC.TapeRecorderDataController _dataController
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::TapeRecorderDataController* dataController;
    // Field size check
    static_assert(sizeof(::VROSC::TapeRecorderDataController*) == 0x8);
    // private System.Double _recordingStartTime
    // Size: 0x8
    // Offset: 0x30
    double recordingStartTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Int32 _lastFetchedRecordingIndex
    // Size: 0x4
    // Offset: 0x38
    int lastFetchedRecordingIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _recording
    // Size: 0x1
    // Offset: 0x3C
    bool recording;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _wasPlaying
    // Size: 0x1
    // Offset: 0x3D
    bool wasPlaying;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _playing
    // Size: 0x1
    // Offset: 0x3E
    bool playing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: playing and: currentPlaybackPosition
    char __padding7[0x1] = {};
    // private System.Int32 _currentPlaybackPosition
    // Size: 0x4
    // Offset: 0x40
    int currentPlaybackPosition;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <IsSetup>k__BackingField
    // Size: 0x1
    // Offset: 0x44
    bool IsSetup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public System.Action OnStartSaving
    static ::System::Action* _get_OnStartSaving();
    // Set static field: static public System.Action OnStartSaving
    static void _set_OnStartSaving(::System::Action* value);
    // Get static field: static public System.Action OnSaveSuccess
    static ::System::Action* _get_OnSaveSuccess();
    // Set static field: static public System.Action OnSaveSuccess
    static void _set_OnSaveSuccess(::System::Action* value);
    // Get static field: static public System.Action`1<VROSC.Error> OnSaveFailure
    static ::System::Action_1<::VROSC::Error>* _get_OnSaveFailure();
    // Set static field: static public System.Action`1<VROSC.Error> OnSaveFailure
    static void _set_OnSaveFailure(::System::Action_1<::VROSC::Error>* value);
    // Get instance field reference: private VROSC.TapeRecorderUI _ui
    [[deprecated("Use field access instead!")]] ::VROSC::TapeRecorderUI*& dyn__ui();
    // Get instance field reference: private UnityEngine.AudioSource _audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn__audioSource();
    // Get instance field reference: private VROSC.TapeRecorderDataController _dataController
    [[deprecated("Use field access instead!")]] ::VROSC::TapeRecorderDataController*& dyn__dataController();
    // Get instance field reference: private System.Double _recordingStartTime
    [[deprecated("Use field access instead!")]] double& dyn__recordingStartTime();
    // Get instance field reference: private System.Int32 _lastFetchedRecordingIndex
    [[deprecated("Use field access instead!")]] int& dyn__lastFetchedRecordingIndex();
    // Get instance field reference: private System.Boolean _recording
    [[deprecated("Use field access instead!")]] bool& dyn__recording();
    // Get instance field reference: private System.Boolean _wasPlaying
    [[deprecated("Use field access instead!")]] bool& dyn__wasPlaying();
    // Get instance field reference: private System.Boolean _playing
    [[deprecated("Use field access instead!")]] bool& dyn__playing();
    // Get instance field reference: private System.Int32 _currentPlaybackPosition
    [[deprecated("Use field access instead!")]] int& dyn__currentPlaybackPosition();
    // Get instance field reference: private System.Boolean <IsSetup>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsSetup$k__BackingField();
    // public System.Single get_MaxRecordingLengthSeconds()
    // Offset: 0x193AD84
    float get_MaxRecordingLengthSeconds();
    // public System.Boolean get_Recording()
    // Offset: 0x193ADA0
    bool get_Recording();
    // public System.Boolean get_Playing()
    // Offset: 0x193ADA8
    bool get_Playing();
    // public System.Boolean get_HasRecording()
    // Offset: 0x193ADB0
    bool get_HasRecording();
    // public System.Single get_CurrentPlaybackTimeSeconds()
    // Offset: 0x193ADCC
    float get_CurrentPlaybackTimeSeconds();
    // public System.Single get_RecordingLengthSeconds()
    // Offset: 0x193AEB4
    float get_RecordingLengthSeconds();
    // public System.Boolean get_IsSetup()
    // Offset: 0x193AF98
    bool get_IsSetup();
    // private System.Void set_IsSetup(System.Boolean value)
    // Offset: 0x193AFA0
    void set_IsSetup(bool value);
    // public System.Void .ctor()
    // Offset: 0x193BA68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TapeRecorder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TapeRecorder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TapeRecorder*, creationType>()));
    }
    // public System.Void Setup(VROSC.TapeRecorderDataController dataController)
    // Offset: 0x193AFAC
    void Setup(::VROSC::TapeRecorderDataController* dataController);
    // protected System.Void Update()
    // Offset: 0x193AFF8
    void Update();
    // public System.Void StartRecording()
    // Offset: 0x193B198
    void StartRecording();
    // public System.Single GetElapsedRecordingTime()
    // Offset: 0x193B158
    float GetElapsedRecordingTime();
    // private System.Void RecordingReachedEnd(System.Single[] recordingData)
    // Offset: 0x193B2E0
    void RecordingReachedEnd(::ArrayW<float> recordingData);
    // public System.Void StopRecording()
    // Offset: 0x193B344
    void StopRecording();
    // private System.Void ConcludeRecording()
    // Offset: 0x193B2E4
    void ConcludeRecording();
    // private System.Void UpdateLoadedRecording(System.Boolean trim, System.Single recordedLengthSeconds)
    // Offset: 0x193B3AC
    void UpdateLoadedRecording(bool trim, float recordedLengthSeconds);
    // public System.Void SaveRecording()
    // Offset: 0x193B5D4
    void SaveRecording();
    // public System.Void StartPlayback()
    // Offset: 0x193B7E4
    void StartPlayback();
    // public System.Void PausePlayback()
    // Offset: 0x193B2BC
    void PausePlayback();
    // public System.Void SetUseAsPreview(System.Boolean useAsPreview)
    // Offset: 0x193B80C
    void SetUseAsPreview(bool useAsPreview);
    // public System.Void UserDataLoaded(VROSC.TapeRecorderDataController dataController)
    // Offset: 0x193B82C
    void UserDataLoaded(::VROSC::TapeRecorderDataController* dataController);
    // public System.Void SetPlaybackTime(System.Single time)
    // Offset: 0x193B894
    void SetPlaybackTime(float time);
    // protected System.Void OnAudioFilterRead(System.Single[] data, System.Int32 channels)
    // Offset: 0x193B99C
    void OnAudioFilterRead(::ArrayW<float> data, int channels);
    // private System.Void <SaveRecording>b__36_0()
    // Offset: 0x193BA70
    void $SaveRecording$b__36_0();
    // private System.Void <SaveRecording>b__36_1(VROSC.Error error)
    // Offset: 0x193BADC
    void $SaveRecording$b__36_1(::VROSC::Error error);
  }; // VROSC.TapeRecorder
  #pragma pack(pop)
  static check_size<sizeof(TapeRecorder), 68 + sizeof(bool)> __VROSC_TapeRecorderSizeCheck;
  static_assert(sizeof(TapeRecorder) == 0x45);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TapeRecorder::get_MaxRecordingLengthSeconds
// Il2CppName: get_MaxRecordingLengthSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::TapeRecorder::*)()>(&VROSC::TapeRecorder::get_MaxRecordingLengthSeconds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "get_MaxRecordingLengthSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::get_Recording
// Il2CppName: get_Recording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::TapeRecorder::*)()>(&VROSC::TapeRecorder::get_Recording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "get_Recording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::get_Playing
// Il2CppName: get_Playing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::TapeRecorder::*)()>(&VROSC::TapeRecorder::get_Playing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "get_Playing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::get_HasRecording
// Il2CppName: get_HasRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::TapeRecorder::*)()>(&VROSC::TapeRecorder::get_HasRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "get_HasRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::get_CurrentPlaybackTimeSeconds
// Il2CppName: get_CurrentPlaybackTimeSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::TapeRecorder::*)()>(&VROSC::TapeRecorder::get_CurrentPlaybackTimeSeconds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "get_CurrentPlaybackTimeSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::get_RecordingLengthSeconds
// Il2CppName: get_RecordingLengthSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::TapeRecorder::*)()>(&VROSC::TapeRecorder::get_RecordingLengthSeconds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "get_RecordingLengthSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::get_IsSetup
// Il2CppName: get_IsSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::TapeRecorder::*)()>(&VROSC::TapeRecorder::get_IsSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "get_IsSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::set_IsSetup
// Il2CppName: set_IsSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorder::*)(bool)>(&VROSC::TapeRecorder::set_IsSetup)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "set_IsSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::TapeRecorder::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorder::*)(::VROSC::TapeRecorderDataController*)>(&VROSC::TapeRecorder::Setup)> {
  static const MethodInfo* get() {
    static auto* dataController = &::il2cpp_utils::GetClassFromName("VROSC", "TapeRecorderDataController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dataController});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorder::*)()>(&VROSC::TapeRecorder::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::StartRecording
// Il2CppName: StartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorder::*)()>(&VROSC::TapeRecorder::StartRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "StartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::GetElapsedRecordingTime
// Il2CppName: GetElapsedRecordingTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::TapeRecorder::*)()>(&VROSC::TapeRecorder::GetElapsedRecordingTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "GetElapsedRecordingTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::RecordingReachedEnd
// Il2CppName: RecordingReachedEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorder::*)(::ArrayW<float>)>(&VROSC::TapeRecorder::RecordingReachedEnd)> {
  static const MethodInfo* get() {
    static auto* recordingData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "RecordingReachedEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recordingData});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::StopRecording
// Il2CppName: StopRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorder::*)()>(&VROSC::TapeRecorder::StopRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "StopRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::ConcludeRecording
// Il2CppName: ConcludeRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorder::*)()>(&VROSC::TapeRecorder::ConcludeRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "ConcludeRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::UpdateLoadedRecording
// Il2CppName: UpdateLoadedRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorder::*)(bool, float)>(&VROSC::TapeRecorder::UpdateLoadedRecording)> {
  static const MethodInfo* get() {
    static auto* trim = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* recordedLengthSeconds = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "UpdateLoadedRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trim, recordedLengthSeconds});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::SaveRecording
// Il2CppName: SaveRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorder::*)()>(&VROSC::TapeRecorder::SaveRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "SaveRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::StartPlayback
// Il2CppName: StartPlayback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorder::*)()>(&VROSC::TapeRecorder::StartPlayback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "StartPlayback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::PausePlayback
// Il2CppName: PausePlayback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorder::*)()>(&VROSC::TapeRecorder::PausePlayback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "PausePlayback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::SetUseAsPreview
// Il2CppName: SetUseAsPreview
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorder::*)(bool)>(&VROSC::TapeRecorder::SetUseAsPreview)> {
  static const MethodInfo* get() {
    static auto* useAsPreview = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "SetUseAsPreview", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useAsPreview});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::UserDataLoaded
// Il2CppName: UserDataLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorder::*)(::VROSC::TapeRecorderDataController*)>(&VROSC::TapeRecorder::UserDataLoaded)> {
  static const MethodInfo* get() {
    static auto* dataController = &::il2cpp_utils::GetClassFromName("VROSC", "TapeRecorderDataController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "UserDataLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dataController});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::SetPlaybackTime
// Il2CppName: SetPlaybackTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorder::*)(float)>(&VROSC::TapeRecorder::SetPlaybackTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "SetPlaybackTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::OnAudioFilterRead
// Il2CppName: OnAudioFilterRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorder::*)(::ArrayW<float>, int)>(&VROSC::TapeRecorder::OnAudioFilterRead)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "OnAudioFilterRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, channels});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::$SaveRecording$b__36_0
// Il2CppName: <SaveRecording>b__36_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorder::*)()>(&VROSC::TapeRecorder::$SaveRecording$b__36_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "<SaveRecording>b__36_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TapeRecorder::$SaveRecording$b__36_1
// Il2CppName: <SaveRecording>b__36_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TapeRecorder::*)(::VROSC::Error)>(&VROSC::TapeRecorder::$SaveRecording$b__36_1)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("VROSC", "Error")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TapeRecorder*), "<SaveRecording>b__36_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
