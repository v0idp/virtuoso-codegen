// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: SampleData
  class SampleData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::SampleData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::SampleData*, "VROSC", "SampleData");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.SampleData
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: 77F728
  class SampleData : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // private System.Int32 _id
    // Size: 0x4
    // Offset: 0x18
    int id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: id and: displayName
    char __padding0[0x4] = {};
    // private System.String _displayName
    // Size: 0x8
    // Offset: 0x20
    ::StringW displayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.AudioClip _audioClip
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AudioClip* audioClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Int32 _id
    [[deprecated]] int& dyn__id();
    // Get instance field reference: private System.String _displayName
    [[deprecated]] ::StringW& dyn__displayName();
    // Get instance field reference: private UnityEngine.AudioClip _audioClip
    [[deprecated]] ::UnityEngine::AudioClip*& dyn__audioClip();
    // public System.Int32 get_Id()
    // Offset: 0xDDB9C0
    int get_Id();
    // public System.String get_DisplayName()
    // Offset: 0xDDB9C8
    ::StringW get_DisplayName();
    // public UnityEngine.AudioClip get_Clip()
    // Offset: 0xDDB9D0
    ::UnityEngine::AudioClip* get_Clip();
    // public System.Void .ctor()
    // Offset: 0xDDB9D8
    // Implemented from: UnityEngine.ScriptableObject
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SampleData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SampleData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SampleData*, creationType>()));
    }
  }; // VROSC.SampleData
  #pragma pack(pop)
  static check_size<sizeof(SampleData), 40 + sizeof(::UnityEngine::AudioClip*)> __VROSC_SampleDataSizeCheck;
  static_assert(sizeof(SampleData) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::SampleData::get_Id
// Il2CppName: get_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::SampleData::*)()>(&VROSC::SampleData::get_Id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SampleData*), "get_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SampleData::get_DisplayName
// Il2CppName: get_DisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::SampleData::*)()>(&VROSC::SampleData::get_DisplayName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SampleData*), "get_DisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SampleData::get_Clip
// Il2CppName: get_Clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (VROSC::SampleData::*)()>(&VROSC::SampleData::get_Clip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SampleData*), "get_Clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SampleData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
