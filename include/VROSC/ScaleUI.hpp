// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.Note
#include "VROSC/Note.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: UIButton
  class UIButton;
  // Forward declaring type: UISpinner
  class UISpinner;
  // Forward declaring type: ScalePresets
  class ScalePresets;
  // Forward declaring type: ScalePreset
  class ScalePreset;
  // Forward declaring type: UserDataControllers
  class UserDataControllers;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ScaleUI
  class ScaleUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ScaleUI);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ScaleUI*, "VROSC", "ScaleUI");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ScaleUI
  // [TokenAttribute] Offset: FFFFFFFF
  class ScaleUI : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::ScaleUI::$$c
    class $$c;
    public:
    // private VROSC.UIButton _randomizeButton
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::UIButton* randomizeButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private VROSC.UISpinner _noteSpinner
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::UISpinner* noteSpinner;
    // Field size check
    static_assert(sizeof(::VROSC::UISpinner*) == 0x8);
    // private VROSC.UISpinner _scaleSpinner
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::UISpinner* scaleSpinner;
    // Field size check
    static_assert(sizeof(::VROSC::UISpinner*) == 0x8);
    // private VROSC.ScalePresets _scalePresets
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::ScalePresets* scalePresets;
    // Field size check
    static_assert(sizeof(::VROSC::ScalePresets*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public System.Action`2<VROSC.ScalePreset,VROSC.Note> OnScalePresetChanged
    static ::System::Action_2<::VROSC::ScalePreset*, ::VROSC::Note>* _get_OnScalePresetChanged();
    // Set static field: static public System.Action`2<VROSC.ScalePreset,VROSC.Note> OnScalePresetChanged
    static void _set_OnScalePresetChanged(::System::Action_2<::VROSC::ScalePreset*, ::VROSC::Note>* value);
    // Get instance field reference: private VROSC.UIButton _randomizeButton
    [[deprecated("Use field access instead!")]] ::VROSC::UIButton*& dyn__randomizeButton();
    // Get instance field reference: private VROSC.UISpinner _noteSpinner
    [[deprecated("Use field access instead!")]] ::VROSC::UISpinner*& dyn__noteSpinner();
    // Get instance field reference: private VROSC.UISpinner _scaleSpinner
    [[deprecated("Use field access instead!")]] ::VROSC::UISpinner*& dyn__scaleSpinner();
    // Get instance field reference: private VROSC.ScalePresets _scalePresets
    [[deprecated("Use field access instead!")]] ::VROSC::ScalePresets*& dyn__scalePresets();
    // public System.Void .ctor()
    // Offset: 0xDE5B2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScaleUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScaleUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScaleUI*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0xDE4EEC
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0xDE54B8
    void OnDestroy();
    // protected System.Void OnEnable()
    // Offset: 0xDE5710
    void OnEnable();
    // private System.Void UserDataLoaded(VROSC.UserDataControllers user)
    // Offset: 0xDE5750
    void UserDataLoaded(::VROSC::UserDataControllers* user);
    // private System.Void UpdateSpinners()
    // Offset: 0xDE5754
    void UpdateSpinners();
    // private System.Void RandomizeScaleButtonPressed()
    // Offset: 0xDE5820
    void RandomizeScaleButtonPressed();
    // private System.Void NoteChanged(System.Int32 selection)
    // Offset: 0xDE5924
    void NoteChanged(int selection);
    // private System.Void ScaleChanged(System.Int32 selection)
    // Offset: 0xDE5A28
    void ScaleChanged(int selection);
  }; // VROSC.ScaleUI
  #pragma pack(pop)
  static check_size<sizeof(ScaleUI), 48 + sizeof(::VROSC::ScalePresets*)> __VROSC_ScaleUISizeCheck;
  static_assert(sizeof(ScaleUI) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ScaleUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::ScaleUI::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ScaleUI::*)()>(&VROSC::ScaleUI::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ScaleUI*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ScaleUI::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ScaleUI::*)()>(&VROSC::ScaleUI::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ScaleUI*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ScaleUI::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ScaleUI::*)()>(&VROSC::ScaleUI::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ScaleUI*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ScaleUI::UserDataLoaded
// Il2CppName: UserDataLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ScaleUI::*)(::VROSC::UserDataControllers*)>(&VROSC::ScaleUI::UserDataLoaded)> {
  static const MethodInfo* get() {
    static auto* user = &::il2cpp_utils::GetClassFromName("VROSC", "UserDataControllers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ScaleUI*), "UserDataLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{user});
  }
};
// Writing MetadataGetter for method: VROSC::ScaleUI::UpdateSpinners
// Il2CppName: UpdateSpinners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ScaleUI::*)()>(&VROSC::ScaleUI::UpdateSpinners)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ScaleUI*), "UpdateSpinners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ScaleUI::RandomizeScaleButtonPressed
// Il2CppName: RandomizeScaleButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ScaleUI::*)()>(&VROSC::ScaleUI::RandomizeScaleButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ScaleUI*), "RandomizeScaleButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ScaleUI::NoteChanged
// Il2CppName: NoteChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ScaleUI::*)(int)>(&VROSC::ScaleUI::NoteChanged)> {
  static const MethodInfo* get() {
    static auto* selection = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ScaleUI*), "NoteChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selection});
  }
};
// Writing MetadataGetter for method: VROSC::ScaleUI::ScaleChanged
// Il2CppName: ScaleChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ScaleUI::*)(int)>(&VROSC::ScaleUI::ScaleChanged)> {
  static const MethodInfo* get() {
    static auto* selection = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ScaleUI*), "ScaleChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selection});
  }
};
