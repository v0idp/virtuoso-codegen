// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.MidiInterface
#include "VROSC/MidiInterface.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: VROSC.OscMessage
#include "VROSC/OscMessage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ExternalSynthesizer
  class ExternalSynthesizer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ExternalSynthesizer);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ExternalSynthesizer*, "VROSC", "ExternalSynthesizer");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ExternalSynthesizer
  // [TokenAttribute] Offset: FFFFFFFF
  class ExternalSynthesizer : public ::VROSC::MidiInterface {
    public:
    // Nested type: ::VROSC::ExternalSynthesizer::$$c__DisplayClass6_0
    class $$c__DisplayClass6_0;
    public:
    // private System.Boolean _printToLog
    // Size: 0x1
    // Offset: 0x18
    bool printToLog;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: printToLog and: clientName
    char __padding0[0x7] = {};
    // private System.String _clientName
    // Size: 0x8
    // Offset: 0x20
    ::StringW clientName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 _oscServerPort
    // Size: 0x4
    // Offset: 0x28
    int oscServerPort;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: oscServerPort and: udpThreadCancellationTokenSource
    char __padding2[0x4] = {};
    // private System.Threading.CancellationTokenSource _udpThreadCancellationTokenSource
    // Size: 0x8
    // Offset: 0x30
    ::System::Threading::CancellationTokenSource* udpThreadCancellationTokenSource;
    // Field size check
    static_assert(sizeof(::System::Threading::CancellationTokenSource*) == 0x8);
    // private System.Boolean _isSetup
    // Size: 0x1
    // Offset: 0x38
    bool isSetup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.Int32 MaxEmpadMidiNotes
    static constexpr const int MaxEmpadMidiNotes = 127;
    // Get static field: static public System.Int32 MaxEmpadMidiNotes
    static int _get_MaxEmpadMidiNotes();
    // Set static field: static public System.Int32 MaxEmpadMidiNotes
    static void _set_MaxEmpadMidiNotes(int value);
    // Get instance field reference: private System.Boolean _printToLog
    [[deprecated]] bool& dyn__printToLog();
    // Get instance field reference: private System.String _clientName
    [[deprecated]] ::StringW& dyn__clientName();
    // Get instance field reference: private System.Int32 _oscServerPort
    [[deprecated]] int& dyn__oscServerPort();
    // Get instance field reference: private System.Threading.CancellationTokenSource _udpThreadCancellationTokenSource
    [[deprecated]] ::System::Threading::CancellationTokenSource*& dyn__udpThreadCancellationTokenSource();
    // Get instance field reference: private System.Boolean _isSetup
    [[deprecated]] bool& dyn__isSetup();
    // protected System.Void OnDestroy()
    // Offset: 0x8F0A18
    void OnDestroy();
    // private System.Void CreateClient(System.Net.IPAddress ipAddress)
    // Offset: 0x8F0A54
    void CreateClient(::System::Net::IPAddress* ipAddress);
    // public System.Void AllNotesOff(System.Int32 channel)
    // Offset: 0x8F1108
    void AllNotesOff(int channel);
    // public System.Void Send(VROSC.OscMessage message, T data, params System.Object[] arguments)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void Send(::VROSC::OscMessage message, T data, ::ArrayW<::Il2CppObject*> arguments) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ExternalSynthesizer::Send");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(arguments)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, message, data, arguments);
    }
    // public System.Void Send(VROSC.OscMessage message, System.Collections.Generic.List`1<T> data, params System.Object[] arguments)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void Send(::VROSC::OscMessage message, ::System::Collections::Generic::List_1<T>* data, ::ArrayW<::Il2CppObject*> arguments) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ExternalSynthesizer::Send");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(arguments)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, message, data, arguments);
    }
    // public System.Void .ctor()
    // Offset: 0x8F124C
    // Implemented from: VROSC.MidiInterface
    // Base method: System.Void MidiInterface::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ExternalSynthesizer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ExternalSynthesizer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ExternalSynthesizer*, creationType>()));
    }
    // public override System.Void Setup()
    // Offset: 0x8F07B0
    // Implemented from: VROSC.MidiInterface
    // Base method: System.Void MidiInterface::Setup()
    void Setup();
    // public override System.Void PlayNote(System.Int32 note, System.Int32 channel, System.Single velocity)
    // Offset: 0x8F0B60
    // Implemented from: VROSC.MidiInterface
    // Base method: System.Void MidiInterface::PlayNote(System.Int32 note, System.Int32 channel, System.Single velocity)
    void PlayNote(int note, int channel, float velocity);
    // public override System.Void StopNote(System.Int32 note, System.Int32 channel)
    // Offset: 0x8F0CDC
    // Implemented from: VROSC.MidiInterface
    // Base method: System.Void MidiInterface::StopNote(System.Int32 note, System.Int32 channel)
    void StopNote(int note, int channel);
    // public override System.Void SetMidiCC(System.Single midiCCValue, System.Int32 midiCC, System.Int32 channel)
    // Offset: 0x8F0E20
    // Implemented from: VROSC.MidiInterface
    // Base method: System.Void MidiInterface::SetMidiCC(System.Single midiCCValue, System.Int32 midiCC, System.Int32 channel)
    void SetMidiCC(float midiCCValue, int midiCC, int channel);
    // public override System.Void SetPitchBend(System.Single pitchBendValue, System.Int32 channel)
    // Offset: 0x8F0F9C
    // Implemented from: VROSC.MidiInterface
    // Base method: System.Void MidiInterface::SetPitchBend(System.Single pitchBendValue, System.Int32 channel)
    void SetPitchBend(float pitchBendValue, int channel);
    // public override System.Void AllNotesOff()
    // Offset: 0x8F10D0
    // Implemented from: VROSC.MidiInterface
    // Base method: System.Void MidiInterface::AllNotesOff()
    void AllNotesOff();
  }; // VROSC.ExternalSynthesizer
  #pragma pack(pop)
  static check_size<sizeof(ExternalSynthesizer), 56 + sizeof(bool)> __VROSC_ExternalSynthesizerSizeCheck;
  static_assert(sizeof(ExternalSynthesizer) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ExternalSynthesizer::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ExternalSynthesizer::*)()>(&VROSC::ExternalSynthesizer::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ExternalSynthesizer*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ExternalSynthesizer::CreateClient
// Il2CppName: CreateClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ExternalSynthesizer::*)(::System::Net::IPAddress*)>(&VROSC::ExternalSynthesizer::CreateClient)> {
  static const MethodInfo* get() {
    static auto* ipAddress = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ExternalSynthesizer*), "CreateClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ipAddress});
  }
};
// Writing MetadataGetter for method: VROSC::ExternalSynthesizer::AllNotesOff
// Il2CppName: AllNotesOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ExternalSynthesizer::*)(int)>(&VROSC::ExternalSynthesizer::AllNotesOff)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ExternalSynthesizer*), "AllNotesOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel});
  }
};
// Writing MetadataGetter for method: VROSC::ExternalSynthesizer::Send
// Il2CppName: Send
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VROSC::ExternalSynthesizer::Send
// Il2CppName: Send
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VROSC::ExternalSynthesizer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::ExternalSynthesizer::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ExternalSynthesizer::*)()>(&VROSC::ExternalSynthesizer::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ExternalSynthesizer*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ExternalSynthesizer::PlayNote
// Il2CppName: PlayNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ExternalSynthesizer::*)(int, int, float)>(&VROSC::ExternalSynthesizer::PlayNote)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ExternalSynthesizer*), "PlayNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, channel, velocity});
  }
};
// Writing MetadataGetter for method: VROSC::ExternalSynthesizer::StopNote
// Il2CppName: StopNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ExternalSynthesizer::*)(int, int)>(&VROSC::ExternalSynthesizer::StopNote)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ExternalSynthesizer*), "StopNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, channel});
  }
};
// Writing MetadataGetter for method: VROSC::ExternalSynthesizer::SetMidiCC
// Il2CppName: SetMidiCC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ExternalSynthesizer::*)(float, int, int)>(&VROSC::ExternalSynthesizer::SetMidiCC)> {
  static const MethodInfo* get() {
    static auto* midiCCValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* midiCC = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ExternalSynthesizer*), "SetMidiCC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{midiCCValue, midiCC, channel});
  }
};
// Writing MetadataGetter for method: VROSC::ExternalSynthesizer::SetPitchBend
// Il2CppName: SetPitchBend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ExternalSynthesizer::*)(float, int)>(&VROSC::ExternalSynthesizer::SetPitchBend)> {
  static const MethodInfo* get() {
    static auto* pitchBendValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ExternalSynthesizer*), "SetPitchBend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pitchBendValue, channel});
  }
};
// Writing MetadataGetter for method: VROSC::ExternalSynthesizer::AllNotesOff
// Il2CppName: AllNotesOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ExternalSynthesizer::*)()>(&VROSC::ExternalSynthesizer::AllNotesOff)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ExternalSynthesizer*), "AllNotesOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
