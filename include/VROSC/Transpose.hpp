// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.IntChanger
#include "VROSC/IntChanger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: IntField
  class IntField;
  // Forward declaring type: Signal
  class Signal;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: Transpose
  class Transpose;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::Transpose);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::Transpose*, "VROSC", "Transpose");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.Transpose
  // [TokenAttribute] Offset: FFFFFFFF
  class Transpose : public ::VROSC::IntChanger {
    public:
    // Writing base type padding for base size: 0x49 to desired offset: 0x50
    char ___base_padding[0x7] = {};
    public:
    // private VROSC.IntField _transposeAmount
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::IntField* transposeAmount;
    // Field size check
    static_assert(sizeof(::VROSC::IntField*) == 0x8);
    // private System.Boolean _resetOnNodeEnd
    // Size: 0x1
    // Offset: 0x58
    bool resetOnNodeEnd;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: resetOnNodeEnd and: changeAmount
    char __padding1[0x3] = {};
    // private System.Int32 changeAmount
    // Size: 0x4
    // Offset: 0x5C
    int changeAmount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private VROSC.IntField _transposeAmount
    [[deprecated("Use field access instead!")]] ::VROSC::IntField*& dyn__transposeAmount();
    // Get instance field reference: private System.Boolean _resetOnNodeEnd
    [[deprecated("Use field access instead!")]] bool& dyn__resetOnNodeEnd();
    // Get instance field reference: private System.Int32 changeAmount
    [[deprecated("Use field access instead!")]] int& dyn_changeAmount();
    // public System.Void .ctor()
    // Offset: 0xA2E478
    // Implemented from: VROSC.IntChanger
    // Base method: System.Void IntChanger::.ctor()
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Transpose* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::Transpose::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Transpose*, creationType>()));
    }
    // protected override System.Void SetValueBySignal(VROSC.Signal signal)
    // Offset: 0xA2E36C
    // Implemented from: VROSC.IntChanger
    // Base method: System.Void IntChanger::SetValueBySignal(VROSC.Signal signal)
    void SetValueBySignal(::VROSC::Signal* signal);
    // protected override System.Void NodeEnd(VROSC.Signal signal)
    // Offset: 0xA2E3D4
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeEnd(VROSC.Signal signal)
    void NodeEnd(::VROSC::Signal* signal);
  }; // VROSC.Transpose
  #pragma pack(pop)
  static check_size<sizeof(Transpose), 92 + sizeof(int)> __VROSC_TransposeSizeCheck;
  static_assert(sizeof(Transpose) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::Transpose::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::Transpose::SetValueBySignal
// Il2CppName: SetValueBySignal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Transpose::*)(::VROSC::Signal*)>(&VROSC::Transpose::SetValueBySignal)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Transpose*), "SetValueBySignal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::Transpose::NodeEnd
// Il2CppName: NodeEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Transpose::*)(::VROSC::Signal*)>(&VROSC::Transpose::NodeEnd)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Transpose*), "NodeEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
