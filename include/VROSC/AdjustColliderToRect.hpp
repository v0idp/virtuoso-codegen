// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: MinMaxFloat
  class MinMaxFloat;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: AdjustColliderToRect
  class AdjustColliderToRect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AdjustColliderToRect);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AdjustColliderToRect*, "VROSC", "AdjustColliderToRect");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AdjustColliderToRect
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 780718
  // [ExecuteAlways] Offset: FFFFFFFF
  class AdjustColliderToRect : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single _depth
    // Size: 0x4
    // Offset: 0x18
    float depth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x78B908
    // private System.Single _push
    // Size: 0x4
    // Offset: 0x1C
    float push;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private VROSC.MinMaxFloat _marginX
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::MinMaxFloat* marginX;
    // Field size check
    static_assert(sizeof(::VROSC::MinMaxFloat*) == 0x8);
    // private VROSC.MinMaxFloat _marginY
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::MinMaxFloat* marginY;
    // Field size check
    static_assert(sizeof(::VROSC::MinMaxFloat*) == 0x8);
    // private UnityEngine.Vector2 _offset
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Vector2 offset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.RectTransform _rectTransform
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::RectTransform* rectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.Collider _collider
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Collider* collider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // private System.Boolean _valid
    // Size: 0x1
    // Offset: 0x48
    bool valid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: valid and: lastHeight
    char __padding7[0x3] = {};
    // private System.Single _lastHeight
    // Size: 0x4
    // Offset: 0x4C
    float lastHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _lastWidth
    // Size: 0x4
    // Offset: 0x50
    float lastWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single _depth
    [[deprecated]] float& dyn__depth();
    // Get instance field reference: private System.Single _push
    [[deprecated]] float& dyn__push();
    // Get instance field reference: private VROSC.MinMaxFloat _marginX
    [[deprecated]] ::VROSC::MinMaxFloat*& dyn__marginX();
    // Get instance field reference: private VROSC.MinMaxFloat _marginY
    [[deprecated]] ::VROSC::MinMaxFloat*& dyn__marginY();
    // Get instance field reference: private UnityEngine.Vector2 _offset
    [[deprecated]] ::UnityEngine::Vector2& dyn__offset();
    // Get instance field reference: private UnityEngine.RectTransform _rectTransform
    [[deprecated]] ::UnityEngine::RectTransform*& dyn__rectTransform();
    // Get instance field reference: private UnityEngine.Collider _collider
    [[deprecated]] ::UnityEngine::Collider*& dyn__collider();
    // Get instance field reference: private System.Boolean _valid
    [[deprecated]] bool& dyn__valid();
    // Get instance field reference: private System.Single _lastHeight
    [[deprecated]] float& dyn__lastHeight();
    // Get instance field reference: private System.Single _lastWidth
    [[deprecated]] float& dyn__lastWidth();
    // private System.Void ResizeCollider()
    // Offset: 0x9659B8
    void ResizeCollider();
    // private System.Void Update()
    // Offset: 0x965D84
    void Update();
    // private System.Void UpdateSize(System.Boolean force)
    // Offset: 0x965DCC
    void UpdateSize(bool force);
    // private System.Void GetValues()
    // Offset: 0x965E98
    void GetValues();
    // public System.Void .ctor()
    // Offset: 0x965F98
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdjustColliderToRect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustColliderToRect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdjustColliderToRect*, creationType>()));
    }
  }; // VROSC.AdjustColliderToRect
  #pragma pack(pop)
  static check_size<sizeof(AdjustColliderToRect), 80 + sizeof(float)> __VROSC_AdjustColliderToRectSizeCheck;
  static_assert(sizeof(AdjustColliderToRect) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AdjustColliderToRect::ResizeCollider
// Il2CppName: ResizeCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AdjustColliderToRect::*)()>(&VROSC::AdjustColliderToRect::ResizeCollider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AdjustColliderToRect*), "ResizeCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AdjustColliderToRect::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AdjustColliderToRect::*)()>(&VROSC::AdjustColliderToRect::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AdjustColliderToRect*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AdjustColliderToRect::UpdateSize
// Il2CppName: UpdateSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AdjustColliderToRect::*)(bool)>(&VROSC::AdjustColliderToRect::UpdateSize)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AdjustColliderToRect*), "UpdateSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: VROSC::AdjustColliderToRect::GetValues
// Il2CppName: GetValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AdjustColliderToRect::*)()>(&VROSC::AdjustColliderToRect::GetValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AdjustColliderToRect*), "GetValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AdjustColliderToRect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
