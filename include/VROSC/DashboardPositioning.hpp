// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: VRPlayer
  class VRPlayer;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: DashboardPositioning
  class DashboardPositioning;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::DashboardPositioning);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::DashboardPositioning*, "VROSC", "DashboardPositioning");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.DashboardPositioning
  // [TokenAttribute] Offset: FFFFFFFF
  class DashboardPositioning : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [HeaderAttribute] Offset: 0x7882D4
    // [RangeAttribute] Offset: 0x7882D4
    // private System.Single _distanceFromHand
    // Size: 0x4
    // Offset: 0x18
    float distanceFromHand;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x788338
    // private System.Single _moveTowardsCamera
    // Size: 0x4
    // Offset: 0x1C
    float moveTowardsCamera;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x788378
    // private System.Single _lookAtPointAbovePlayer
    // Size: 0x4
    // Offset: 0x20
    float lookAtPointAbovePlayer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0x7883B8
    // private System.Single _debugPlayerDepth
    // Size: 0x4
    // Offset: 0x24
    float debugPlayerDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.RectTransform _rectTransform
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::RectTransform* rectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private System.Boolean _isInRightHand
    // Size: 0x1
    // Offset: 0x30
    bool isInRightHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isInRightHand and: lookAtPoint
    char __padding5[0x3] = {};
    // private UnityEngine.Vector3 _lookAtPoint
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 lookAtPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _controllerPosition
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 controllerPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _cameraPosition
    // Size: 0xC
    // Offset: 0x4C
    ::UnityEngine::Vector3 cameraPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _dashboardPosition
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 dashboardPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _cameraCenter
    // Size: 0xC
    // Offset: 0x64
    ::UnityEngine::Vector3 cameraCenter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single _distanceFromHand
    [[deprecated]] float& dyn__distanceFromHand();
    // Get instance field reference: private System.Single _moveTowardsCamera
    [[deprecated]] float& dyn__moveTowardsCamera();
    // Get instance field reference: private System.Single _lookAtPointAbovePlayer
    [[deprecated]] float& dyn__lookAtPointAbovePlayer();
    // Get instance field reference: private System.Single _debugPlayerDepth
    [[deprecated]] float& dyn__debugPlayerDepth();
    // Get instance field reference: private UnityEngine.RectTransform _rectTransform
    [[deprecated]] ::UnityEngine::RectTransform*& dyn__rectTransform();
    // Get instance field reference: private System.Boolean _isInRightHand
    [[deprecated]] bool& dyn__isInRightHand();
    // Get instance field reference: private UnityEngine.Vector3 _lookAtPoint
    [[deprecated]] ::UnityEngine::Vector3& dyn__lookAtPoint();
    // Get instance field reference: private UnityEngine.Vector3 _controllerPosition
    [[deprecated]] ::UnityEngine::Vector3& dyn__controllerPosition();
    // Get instance field reference: private UnityEngine.Vector3 _cameraPosition
    [[deprecated]] ::UnityEngine::Vector3& dyn__cameraPosition();
    // Get instance field reference: private UnityEngine.Vector3 _dashboardPosition
    [[deprecated]] ::UnityEngine::Vector3& dyn__dashboardPosition();
    // Get instance field reference: private UnityEngine.Vector3 _cameraCenter
    [[deprecated]] ::UnityEngine::Vector3& dyn__cameraCenter();
    // private System.Void Awake()
    // Offset: 0x8E097C
    void Awake();
    // public System.Void UpdateDashboardHandPosition(System.Boolean activeInRightHand)
    // Offset: 0x8E09D0
    void UpdateDashboardHandPosition(bool activeInRightHand);
    // private System.Void LookAtPlayer(UnityEngine.Transform cameraTransform, VROSC.VRPlayer vrPlayer, System.Boolean activeInRightHand)
    // Offset: 0x8E0B4C
    void LookAtPlayer(::UnityEngine::Transform* cameraTransform, ::VROSC::VRPlayer* vrPlayer, bool activeInRightHand);
    // private System.Void LookAtDebugPlayer(UnityEngine.Transform cameraTransform)
    // Offset: 0x8E0AC4
    void LookAtDebugPlayer(::UnityEngine::Transform* cameraTransform);
    // private System.Void OnDrawGizmos()
    // Offset: 0x8E0D00
    void OnDrawGizmos();
    // public System.Void .ctor()
    // Offset: 0x8E0D98
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DashboardPositioning* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::DashboardPositioning::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DashboardPositioning*, creationType>()));
    }
  }; // VROSC.DashboardPositioning
  #pragma pack(pop)
  static check_size<sizeof(DashboardPositioning), 100 + sizeof(::UnityEngine::Vector3)> __VROSC_DashboardPositioningSizeCheck;
  static_assert(sizeof(DashboardPositioning) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::DashboardPositioning::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardPositioning::*)()>(&VROSC::DashboardPositioning::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardPositioning*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardPositioning::UpdateDashboardHandPosition
// Il2CppName: UpdateDashboardHandPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardPositioning::*)(bool)>(&VROSC::DashboardPositioning::UpdateDashboardHandPosition)> {
  static const MethodInfo* get() {
    static auto* activeInRightHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardPositioning*), "UpdateDashboardHandPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activeInRightHand});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardPositioning::LookAtPlayer
// Il2CppName: LookAtPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardPositioning::*)(::UnityEngine::Transform*, ::VROSC::VRPlayer*, bool)>(&VROSC::DashboardPositioning::LookAtPlayer)> {
  static const MethodInfo* get() {
    static auto* cameraTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* vrPlayer = &::il2cpp_utils::GetClassFromName("VROSC", "VRPlayer")->byval_arg;
    static auto* activeInRightHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardPositioning*), "LookAtPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraTransform, vrPlayer, activeInRightHand});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardPositioning::LookAtDebugPlayer
// Il2CppName: LookAtDebugPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardPositioning::*)(::UnityEngine::Transform*)>(&VROSC::DashboardPositioning::LookAtDebugPlayer)> {
  static const MethodInfo* get() {
    static auto* cameraTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardPositioning*), "LookAtDebugPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraTransform});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardPositioning::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardPositioning::*)()>(&VROSC::DashboardPositioning::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardPositioning*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardPositioning::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
