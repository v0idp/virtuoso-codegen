// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopPlayer
  class LoopPlayer;
  // Forward declaring type: UIToggle
  class UIToggle;
  // Forward declaring type: LooperProgressSliderUpdater
  class LooperProgressSliderUpdater;
  // Forward declaring type: LaunchPadEffectOnSignal
  class LaunchPadEffectOnSignal;
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: Launchpad
  class Launchpad;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopPlayButton
  class LoopPlayButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::LoopPlayButton);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LoopPlayButton*, "VROSC", "LoopPlayButton");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.LoopPlayButton
  // [TokenAttribute] Offset: FFFFFFFF
  class LoopPlayButton : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.LoopPlayer <ConnectedPlayer>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::LoopPlayer* ConnectedPlayer;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlayer*) == 0x8);
    // private VROSC.UIToggle _playButton
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::UIToggle* playButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIToggle*) == 0x8);
    // private VROSC.LooperProgressSliderUpdater _progressUpdater
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::LooperProgressSliderUpdater* progressUpdater;
    // Field size check
    static_assert(sizeof(::VROSC::LooperProgressSliderUpdater*) == 0x8);
    // private VROSC.LaunchPadEffectOnSignal _padVisual
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::LaunchPadEffectOnSignal* padVisual;
    // Field size check
    static_assert(sizeof(::VROSC::LaunchPadEffectOnSignal*) == 0x8);
    // public System.Action`1<System.Boolean> OnPlayToggleChanged
    // Size: 0x8
    // Offset: 0x38
    ::System::Action_1<bool>* OnPlayToggleChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<bool>*) == 0x8);
    // public System.Action`1<System.Boolean> OnPlayingChanged
    // Size: 0x8
    // Offset: 0x40
    ::System::Action_1<bool>* OnPlayingChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<bool>*) == 0x8);
    // public System.Action OnNewLoopPlayerAssigned
    // Size: 0x8
    // Offset: 0x48
    ::System::Action* OnNewLoopPlayerAssigned;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Boolean _playing
    // Size: 0x1
    // Offset: 0x50
    bool playing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.LoopPlayer <ConnectedPlayer>k__BackingField
    [[deprecated]] ::VROSC::LoopPlayer*& dyn_$ConnectedPlayer$k__BackingField();
    // Get instance field reference: private VROSC.UIToggle _playButton
    [[deprecated]] ::VROSC::UIToggle*& dyn__playButton();
    // Get instance field reference: private VROSC.LooperProgressSliderUpdater _progressUpdater
    [[deprecated]] ::VROSC::LooperProgressSliderUpdater*& dyn__progressUpdater();
    // Get instance field reference: private VROSC.LaunchPadEffectOnSignal _padVisual
    [[deprecated]] ::VROSC::LaunchPadEffectOnSignal*& dyn__padVisual();
    // Get instance field reference: public System.Action`1<System.Boolean> OnPlayToggleChanged
    [[deprecated]] ::System::Action_1<bool>*& dyn_OnPlayToggleChanged();
    // Get instance field reference: public System.Action`1<System.Boolean> OnPlayingChanged
    [[deprecated]] ::System::Action_1<bool>*& dyn_OnPlayingChanged();
    // Get instance field reference: public System.Action OnNewLoopPlayerAssigned
    [[deprecated]] ::System::Action*& dyn_OnNewLoopPlayerAssigned();
    // Get instance field reference: private System.Boolean _playing
    [[deprecated]] bool& dyn__playing();
    // public VROSC.LooperProgressSliderUpdater get_ProgressUpdater()
    // Offset: 0x19B5514
    ::VROSC::LooperProgressSliderUpdater* get_ProgressUpdater();
    // public VROSC.LoopPlayer get_ConnectedPlayer()
    // Offset: 0x19B5524
    ::VROSC::LoopPlayer* get_ConnectedPlayer();
    // private System.Void set_ConnectedPlayer(VROSC.LoopPlayer value)
    // Offset: 0x19B551C
    void set_ConnectedPlayer(::VROSC::LoopPlayer* value);
    // private System.Void Awake()
    // Offset: 0x19B552C
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x19B56F4
    void OnDestroy();
    // private System.Void OnButtonPressed(VROSC.InputDevice device, System.Boolean play)
    // Offset: 0x19B57C8
    void OnButtonPressed(::VROSC::InputDevice* device, bool play);
    // public System.Void TogglePlay()
    // Offset: 0x19B57CC
    void TogglePlay();
    // System.Void LaunchpadHit(VROSC.Launchpad launchpad)
    // Offset: 0x19B5834
    void LaunchpadHit(::VROSC::Launchpad* launchpad);
    // public System.Void TrackLoopPlayer(VROSC.LoopPlayer loopPlayer)
    // Offset: 0x19B58B4
    void TrackLoopPlayer(::VROSC::LoopPlayer* loopPlayer);
    // System.Void SetDisabled(System.Boolean disabled)
    // Offset: 0x19B5AB8
    void SetDisabled(bool disabled);
    // public System.Void ShowAsMuted(System.Boolean muted)
    // Offset: 0x19B5B28
    void ShowAsMuted(bool muted);
    // private System.Void Update()
    // Offset: 0x19B5B48
    void Update();
    // private System.Void UpdatePlaying(System.Boolean isPlaying, System.Boolean force)
    // Offset: 0x19B59D8
    void UpdatePlaying(bool isPlaying, bool force);
    // private System.Boolean GetIsPlaying()
    // Offset: 0x19B5938
    bool GetIsPlaying();
    // System.Void SetColor(UnityEngine.Color color)
    // Offset: 0x19B5C18
    void SetColor(::UnityEngine::Color color);
    // public System.Void .ctor()
    // Offset: 0x19B5C9C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoopPlayButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::LoopPlayButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoopPlayButton*, creationType>()));
    }
  }; // VROSC.LoopPlayButton
  #pragma pack(pop)
  static check_size<sizeof(LoopPlayButton), 80 + sizeof(bool)> __VROSC_LoopPlayButtonSizeCheck;
  static_assert(sizeof(LoopPlayButton) == 0x51);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::LoopPlayButton::get_ProgressUpdater
// Il2CppName: get_ProgressUpdater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LooperProgressSliderUpdater* (VROSC::LoopPlayButton::*)()>(&VROSC::LoopPlayButton::get_ProgressUpdater)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayButton*), "get_ProgressUpdater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayButton::get_ConnectedPlayer
// Il2CppName: get_ConnectedPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlayer* (VROSC::LoopPlayButton::*)()>(&VROSC::LoopPlayButton::get_ConnectedPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayButton*), "get_ConnectedPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayButton::set_ConnectedPlayer
// Il2CppName: set_ConnectedPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayButton::*)(::VROSC::LoopPlayer*)>(&VROSC::LoopPlayButton::set_ConnectedPlayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayButton*), "set_ConnectedPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayButton::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayButton::*)()>(&VROSC::LoopPlayButton::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayButton*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayButton::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayButton::*)()>(&VROSC::LoopPlayButton::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayButton*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayButton::OnButtonPressed
// Il2CppName: OnButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayButton::*)(::VROSC::InputDevice*, bool)>(&VROSC::LoopPlayButton::OnButtonPressed)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* play = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayButton*), "OnButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, play});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayButton::TogglePlay
// Il2CppName: TogglePlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayButton::*)()>(&VROSC::LoopPlayButton::TogglePlay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayButton*), "TogglePlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayButton::LaunchpadHit
// Il2CppName: LaunchpadHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayButton::*)(::VROSC::Launchpad*)>(&VROSC::LoopPlayButton::LaunchpadHit)> {
  static const MethodInfo* get() {
    static auto* launchpad = &::il2cpp_utils::GetClassFromName("VROSC", "Launchpad")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayButton*), "LaunchpadHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{launchpad});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayButton::TrackLoopPlayer
// Il2CppName: TrackLoopPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayButton::*)(::VROSC::LoopPlayer*)>(&VROSC::LoopPlayButton::TrackLoopPlayer)> {
  static const MethodInfo* get() {
    static auto* loopPlayer = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayButton*), "TrackLoopPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopPlayer});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayButton::SetDisabled
// Il2CppName: SetDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayButton::*)(bool)>(&VROSC::LoopPlayButton::SetDisabled)> {
  static const MethodInfo* get() {
    static auto* disabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayButton*), "SetDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disabled});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayButton::ShowAsMuted
// Il2CppName: ShowAsMuted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayButton::*)(bool)>(&VROSC::LoopPlayButton::ShowAsMuted)> {
  static const MethodInfo* get() {
    static auto* muted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayButton*), "ShowAsMuted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{muted});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayButton::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayButton::*)()>(&VROSC::LoopPlayButton::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayButton*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayButton::UpdatePlaying
// Il2CppName: UpdatePlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayButton::*)(bool, bool)>(&VROSC::LoopPlayButton::UpdatePlaying)> {
  static const MethodInfo* get() {
    static auto* isPlaying = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayButton*), "UpdatePlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isPlaying, force});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayButton::GetIsPlaying
// Il2CppName: GetIsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopPlayButton::*)()>(&VROSC::LoopPlayButton::GetIsPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayButton*), "GetIsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayButton::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayButton::*)(::UnityEngine::Color)>(&VROSC::LoopPlayButton::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayButton*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
