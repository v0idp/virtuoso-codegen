// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: UISlider
  class UISlider;
  // Forward declaring type: TapeRecorder
  class TapeRecorder;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: UnityEngine::Video
namespace UnityEngine::Video {
  // Forward declaring type: VideoPlayer
  class VideoPlayer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TimeSlider
  class TimeSlider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TimeSlider);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TimeSlider*, "VROSC", "TimeSlider");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x47
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TimeSlider
  // [TokenAttribute] Offset: FFFFFFFF
  class TimeSlider : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::TimeSlider::SourceType
    struct SourceType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: VROSC.TimeSlider/VROSC.SourceType
    // [TokenAttribute] Offset: FFFFFFFF
    struct SourceType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SourceType
      constexpr SourceType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public VROSC.TimeSlider/VROSC.SourceType AudioSource
      static constexpr const int AudioSource = 0;
      // Get static field: static public VROSC.TimeSlider/VROSC.SourceType AudioSource
      static ::VROSC::TimeSlider::SourceType _get_AudioSource();
      // Set static field: static public VROSC.TimeSlider/VROSC.SourceType AudioSource
      static void _set_AudioSource(::VROSC::TimeSlider::SourceType value);
      // static field const value: static public VROSC.TimeSlider/VROSC.SourceType VideoPlayer
      static constexpr const int VideoPlayer = 1;
      // Get static field: static public VROSC.TimeSlider/VROSC.SourceType VideoPlayer
      static ::VROSC::TimeSlider::SourceType _get_VideoPlayer();
      // Set static field: static public VROSC.TimeSlider/VROSC.SourceType VideoPlayer
      static void _set_VideoPlayer(::VROSC::TimeSlider::SourceType value);
      // static field const value: static public VROSC.TimeSlider/VROSC.SourceType TapeRecorder
      static constexpr const int TapeRecorder = 2;
      // Get static field: static public VROSC.TimeSlider/VROSC.SourceType TapeRecorder
      static ::VROSC::TimeSlider::SourceType _get_TapeRecorder();
      // Set static field: static public VROSC.TimeSlider/VROSC.SourceType TapeRecorder
      static void _set_TapeRecorder(::VROSC::TimeSlider::SourceType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated]] int& dyn_value__();
    }; // VROSC.TimeSlider/VROSC.SourceType
    #pragma pack(pop)
    static check_size<sizeof(TimeSlider::SourceType), 0 + sizeof(int)> __VROSC_TimeSlider_SourceTypeSizeCheck;
    static_assert(sizeof(TimeSlider::SourceType) == 0x4);
    public:
    // private VROSC.UISlider _timeSlider
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::UISlider* timeSlider;
    // Field size check
    static_assert(sizeof(::VROSC::UISlider*) == 0x8);
    // private TMPro.TextMeshPro _timeText
    // Size: 0x8
    // Offset: 0x20
    ::TMPro::TextMeshPro* timeText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private UnityEngine.Video.VideoPlayer _videoPlayer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Video::VideoPlayer* videoPlayer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Video::VideoPlayer*) == 0x8);
    // private UnityEngine.AudioSource _audioSource
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private VROSC.TapeRecorder _tapeRecorder
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::TapeRecorder* tapeRecorder;
    // Field size check
    static_assert(sizeof(::VROSC::TapeRecorder*) == 0x8);
    // private VROSC.TimeSlider/VROSC.SourceType _source
    // Size: 0x4
    // Offset: 0x40
    ::VROSC::TimeSlider::SourceType source;
    // Field size check
    static_assert(sizeof(::VROSC::TimeSlider::SourceType) == 0x4);
    // private System.Boolean <Seeking>k__BackingField
    // Size: 0x1
    // Offset: 0x44
    bool Seeking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _sliderFollowsTime
    // Size: 0x1
    // Offset: 0x45
    bool sliderFollowsTime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _sourceIsPlaying
    // Size: 0x1
    // Offset: 0x46
    bool sourceIsPlaying;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.UISlider _timeSlider
    [[deprecated]] ::VROSC::UISlider*& dyn__timeSlider();
    // Get instance field reference: private TMPro.TextMeshPro _timeText
    [[deprecated]] ::TMPro::TextMeshPro*& dyn__timeText();
    // Get instance field reference: private UnityEngine.Video.VideoPlayer _videoPlayer
    [[deprecated]] ::UnityEngine::Video::VideoPlayer*& dyn__videoPlayer();
    // Get instance field reference: private UnityEngine.AudioSource _audioSource
    [[deprecated]] ::UnityEngine::AudioSource*& dyn__audioSource();
    // Get instance field reference: private VROSC.TapeRecorder _tapeRecorder
    [[deprecated]] ::VROSC::TapeRecorder*& dyn__tapeRecorder();
    // Get instance field reference: private VROSC.TimeSlider/VROSC.SourceType _source
    [[deprecated]] ::VROSC::TimeSlider::SourceType& dyn__source();
    // Get instance field reference: private System.Boolean <Seeking>k__BackingField
    [[deprecated]] bool& dyn_$Seeking$k__BackingField();
    // Get instance field reference: private System.Boolean _sliderFollowsTime
    [[deprecated]] bool& dyn__sliderFollowsTime();
    // Get instance field reference: private System.Boolean _sourceIsPlaying
    [[deprecated]] bool& dyn__sourceIsPlaying();
    // public VROSC.UISlider get_Slider()
    // Offset: 0xA269FC
    ::VROSC::UISlider* get_Slider();
    // public System.Boolean get_Seeking()
    // Offset: 0xA26A04
    bool get_Seeking();
    // public System.Void set_Seeking(System.Boolean value)
    // Offset: 0xA26A0C
    void set_Seeking(bool value);
    // public System.Boolean get_SourceIsPlaying()
    // Offset: 0xA26A18
    bool get_SourceIsPlaying();
    // public System.Void set_SourceIsPlaying(System.Boolean value)
    // Offset: 0xA23BC4
    void set_SourceIsPlaying(bool value);
    // protected System.Void Start()
    // Offset: 0xA26B70
    void Start();
    // public System.Void Init(System.Single sourceLength)
    // Offset: 0xA241C8
    void Init(float sourceLength);
    // protected System.Void Update()
    // Offset: 0xA26D20
    void Update();
    // public System.Void Disable(System.Boolean disable)
    // Offset: 0xA26D8C
    void Disable(bool disable);
    // private System.Void UpdateTimeSlider()
    // Offset: 0xA26D24
    void UpdateTimeSlider();
    // private System.Void UpdateSlider()
    // Offset: 0xA26A20
    void UpdateSlider();
    // private System.Void UpdateLabel(System.Boolean useSliderValue)
    // Offset: 0xA26A8C
    void UpdateLabel(bool useSliderValue);
    // private System.Single GetTime()
    // Offset: 0xA26F3C
    float GetTime();
    // private System.Single GetLength()
    // Offset: 0xA26E30
    float GetLength();
    // private System.Void TimeSliderGrabbed(System.Boolean isGrabbed)
    // Offset: 0xA26FA8
    void TimeSliderGrabbed(bool isGrabbed);
    // private System.Void PauseSource()
    // Offset: 0xA2702C
    void PauseSource();
    // private System.Void PlaySource()
    // Offset: 0xA27148
    void PlaySource();
    // private System.Void SetTime(System.Single time)
    // Offset: 0xA270DC
    void SetTime(float time);
    // private System.Void SeekCompleted(UnityEngine.Video.VideoPlayer videoPlayer)
    // Offset: 0xA271B0
    void SeekCompleted(::UnityEngine::Video::VideoPlayer* videoPlayer);
    // public System.Void .ctor()
    // Offset: 0xA271B8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimeSlider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TimeSlider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimeSlider*, creationType>()));
    }
  }; // VROSC.TimeSlider
  #pragma pack(pop)
  static check_size<sizeof(TimeSlider), 70 + sizeof(bool)> __VROSC_TimeSliderSizeCheck;
  static_assert(sizeof(TimeSlider) == 0x47);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TimeSlider::SourceType, "VROSC", "TimeSlider/SourceType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TimeSlider::get_Slider
// Il2CppName: get_Slider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::UISlider* (VROSC::TimeSlider::*)()>(&VROSC::TimeSlider::get_Slider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "get_Slider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::get_Seeking
// Il2CppName: get_Seeking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::TimeSlider::*)()>(&VROSC::TimeSlider::get_Seeking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "get_Seeking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::set_Seeking
// Il2CppName: set_Seeking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimeSlider::*)(bool)>(&VROSC::TimeSlider::set_Seeking)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "set_Seeking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::get_SourceIsPlaying
// Il2CppName: get_SourceIsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::TimeSlider::*)()>(&VROSC::TimeSlider::get_SourceIsPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "get_SourceIsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::set_SourceIsPlaying
// Il2CppName: set_SourceIsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimeSlider::*)(bool)>(&VROSC::TimeSlider::set_SourceIsPlaying)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "set_SourceIsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimeSlider::*)()>(&VROSC::TimeSlider::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimeSlider::*)(float)>(&VROSC::TimeSlider::Init)> {
  static const MethodInfo* get() {
    static auto* sourceLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceLength});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimeSlider::*)()>(&VROSC::TimeSlider::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::Disable
// Il2CppName: Disable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimeSlider::*)(bool)>(&VROSC::TimeSlider::Disable)> {
  static const MethodInfo* get() {
    static auto* disable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "Disable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disable});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::UpdateTimeSlider
// Il2CppName: UpdateTimeSlider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimeSlider::*)()>(&VROSC::TimeSlider::UpdateTimeSlider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "UpdateTimeSlider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::UpdateSlider
// Il2CppName: UpdateSlider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimeSlider::*)()>(&VROSC::TimeSlider::UpdateSlider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "UpdateSlider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::UpdateLabel
// Il2CppName: UpdateLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimeSlider::*)(bool)>(&VROSC::TimeSlider::UpdateLabel)> {
  static const MethodInfo* get() {
    static auto* useSliderValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "UpdateLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useSliderValue});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::GetTime
// Il2CppName: GetTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::TimeSlider::*)()>(&VROSC::TimeSlider::GetTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "GetTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::GetLength
// Il2CppName: GetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::TimeSlider::*)()>(&VROSC::TimeSlider::GetLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "GetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::TimeSliderGrabbed
// Il2CppName: TimeSliderGrabbed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimeSlider::*)(bool)>(&VROSC::TimeSlider::TimeSliderGrabbed)> {
  static const MethodInfo* get() {
    static auto* isGrabbed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "TimeSliderGrabbed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isGrabbed});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::PauseSource
// Il2CppName: PauseSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimeSlider::*)()>(&VROSC::TimeSlider::PauseSource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "PauseSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::PlaySource
// Il2CppName: PlaySource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimeSlider::*)()>(&VROSC::TimeSlider::PlaySource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "PlaySource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::SetTime
// Il2CppName: SetTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimeSlider::*)(float)>(&VROSC::TimeSlider::SetTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "SetTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::SeekCompleted
// Il2CppName: SeekCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimeSlider::*)(::UnityEngine::Video::VideoPlayer*)>(&VROSC::TimeSlider::SeekCompleted)> {
  static const MethodInfo* get() {
    static auto* videoPlayer = &::il2cpp_utils::GetClassFromName("UnityEngine.Video", "VideoPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimeSlider*), "SeekCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{videoPlayer});
  }
};
// Writing MetadataGetter for method: VROSC::TimeSlider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
