// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.SignalNode
#include "VROSC/SignalNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Signal
  class Signal;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ScaleRandomizer
  class ScaleRandomizer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ScaleRandomizer);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ScaleRandomizer*, "VROSC", "ScaleRandomizer");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ScaleRandomizer
  // [TokenAttribute] Offset: FFFFFFFF
  class ScaleRandomizer : public ::VROSC::SignalNode {
    public:
    // Nested type: ::VROSC::ScaleRandomizer::RandomTarget
    class RandomTarget;
    public:
    // private VROSC.ScaleRandomizer/VROSC.RandomTarget[] _randomTargets
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::VROSC::ScaleRandomizer::RandomTarget*> randomTargets;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::ScaleRandomizer::RandomTarget*>) == 0x8);
    public:
    // Get instance field reference: private VROSC.ScaleRandomizer/VROSC.RandomTarget[] _randomTargets
    [[deprecated]] ::ArrayW<::VROSC::ScaleRandomizer::RandomTarget*>& dyn__randomTargets();
    // public System.Void .ctor()
    // Offset: 0xDE4618
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScaleRandomizer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ScaleRandomizer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScaleRandomizer*, creationType>()));
    }
    // protected override System.Void NodeBegin(VROSC.Signal signal)
    // Offset: 0xDE43F4
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeBegin(VROSC.Signal signal)
    void NodeBegin(::VROSC::Signal* signal);
  }; // VROSC.ScaleRandomizer
  #pragma pack(pop)
  static check_size<sizeof(ScaleRandomizer), 64 + sizeof(::ArrayW<::VROSC::ScaleRandomizer::RandomTarget*>)> __VROSC_ScaleRandomizerSizeCheck;
  static_assert(sizeof(ScaleRandomizer) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ScaleRandomizer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::ScaleRandomizer::NodeBegin
// Il2CppName: NodeBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ScaleRandomizer::*)(::VROSC::Signal*)>(&VROSC::ScaleRandomizer::NodeBegin)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ScaleRandomizer*), "NodeBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
