// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.AnimatedAppear
#include "VROSC/AnimatedAppear.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Interactable
  class Interactable;
  // Forward declaring type: AdjustableMesh
  class AdjustableMesh;
  // Forward declaring type: SimpleAppearObject
  class SimpleAppearObject;
  // Forward declaring type: MinMaxVector2
  class MinMaxVector2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: AnimatedAppearData
  class AnimatedAppearData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AnimatedAppearData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AnimatedAppearData*, "VROSC", "AnimatedAppearData");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AnimatedAppearData
  // [TokenAttribute] Offset: FFFFFFFF
  class AnimatedAppearData : public ::Il2CppObject {
    public:
    // Nested type: ::VROSC::AnimatedAppearData::AppearingObject
    class AppearingObject;
    // Nested type: ::VROSC::AnimatedAppearData::TextMeshAppear
    class TextMeshAppear;
    // Nested type: ::VROSC::AnimatedAppearData::AdjustableMeshAppear
    class AdjustableMeshAppear;
    // Nested type: ::VROSC::AnimatedAppearData::SimpleAppear
    class SimpleAppear;
    public:
    // private UnityEngine.RectTransform _rectTransform
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::RectTransform* rectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private VROSC.Interactable[] _interactables
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::VROSC::Interactable*> interactables;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::Interactable*>) == 0x8);
    // private VROSC.AdjustableMesh[] _adjustableMeshes
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::VROSC::AdjustableMesh*> adjustableMeshes;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::AdjustableMesh*>) == 0x8);
    // private TMPro.TextMeshPro[] _textMeshPros
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::TMPro::TextMeshPro*> textMeshPros;
    // Field size check
    static_assert(sizeof(::ArrayW<::TMPro::TextMeshPro*>) == 0x8);
    // private VROSC.SimpleAppearObject[] _simpleAppearObjects
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::VROSC::SimpleAppearObject*> simpleAppearObjects;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::SimpleAppearObject*>) == 0x8);
    // private VROSC.AnimatedAppearData/VROSC.TextMeshAppear[] _textAppears
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::VROSC::AnimatedAppearData::TextMeshAppear*> textAppears;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::AnimatedAppearData::TextMeshAppear*>) == 0x8);
    // private VROSC.AnimatedAppearData/VROSC.AdjustableMeshAppear[] _meshAppears
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::VROSC::AnimatedAppearData::AdjustableMeshAppear*> meshAppears;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::AnimatedAppearData::AdjustableMeshAppear*>) == 0x8);
    // private VROSC.AnimatedAppearData/VROSC.SimpleAppear[] _simpleAppears
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::VROSC::AnimatedAppearData::SimpleAppear*> simpleAppears;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::AnimatedAppearData::SimpleAppear*>) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.RectTransform _rectTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__rectTransform();
    // Get instance field reference: private VROSC.Interactable[] _interactables
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::Interactable*>& dyn__interactables();
    // Get instance field reference: private VROSC.AdjustableMesh[] _adjustableMeshes
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::AdjustableMesh*>& dyn__adjustableMeshes();
    // Get instance field reference: private TMPro.TextMeshPro[] _textMeshPros
    [[deprecated("Use field access instead!")]] ::ArrayW<::TMPro::TextMeshPro*>& dyn__textMeshPros();
    // Get instance field reference: private VROSC.SimpleAppearObject[] _simpleAppearObjects
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::SimpleAppearObject*>& dyn__simpleAppearObjects();
    // Get instance field reference: private VROSC.AnimatedAppearData/VROSC.TextMeshAppear[] _textAppears
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::AnimatedAppearData::TextMeshAppear*>& dyn__textAppears();
    // Get instance field reference: private VROSC.AnimatedAppearData/VROSC.AdjustableMeshAppear[] _meshAppears
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::AnimatedAppearData::AdjustableMeshAppear*>& dyn__meshAppears();
    // Get instance field reference: private VROSC.AnimatedAppearData/VROSC.SimpleAppear[] _simpleAppears
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::AnimatedAppearData::SimpleAppear*>& dyn__simpleAppears();
    // public System.Void .ctor(UnityEngine.GameObject parent, UnityEngine.RectTransform rectTransform)
    // Offset: 0x969574
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AnimatedAppearData* New_ctor(::UnityEngine::GameObject* parent, ::UnityEngine::RectTransform* rectTransform) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AnimatedAppearData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AnimatedAppearData*, creationType>(parent, rectTransform)));
    }
    // private System.Void SetAppearData(UnityEngine.RectTransform reference)
    // Offset: 0x96A160
    void SetAppearData(::UnityEngine::RectTransform* reference);
    // public System.Void UpdateAppearAmount(System.Single amount, VROSC.AnimatedAppear/VROSC.Mode mode, System.Boolean useFlash, System.Boolean force)
    // Offset: 0x969850
    void UpdateAppearAmount(float amount, ::VROSC::AnimatedAppear::Mode mode, bool useFlash, bool force);
    // public System.Void SetAppearActive(System.Boolean appearing)
    // Offset: 0x969C84
    void SetAppearActive(bool appearing);
    // public System.Void Clear()
    // Offset: 0x969FCC
    void Clear();
    // private System.Void SetInteractablesDisabled(System.Boolean disabled)
    // Offset: 0x96A7F0
    void SetInteractablesDisabled(bool disabled);
    // private VROSC.MinMaxVector2 GetAppearData(UnityEngine.RectTransform reference, VROSC.SimpleAppearObject target)
    // Offset: 0x96A6EC
    ::VROSC::MinMaxVector2* GetAppearData(::UnityEngine::RectTransform* reference, ::VROSC::SimpleAppearObject* target);
    // private VROSC.MinMaxVector2 GetAppearData(UnityEngine.RectTransform reference, VROSC.AdjustableMesh target)
    // Offset: 0x96A564
    ::VROSC::MinMaxVector2* GetAppearData(::UnityEngine::RectTransform* reference, ::VROSC::AdjustableMesh* target);
    // private VROSC.MinMaxVector2 GetAppearData(UnityEngine.RectTransform reference, UnityEngine.RectTransform target)
    // Offset: 0x96A4A0
    ::VROSC::MinMaxVector2* GetAppearData(::UnityEngine::RectTransform* reference, ::UnityEngine::RectTransform* target);
    // private UnityEngine.Vector2 GetLocalPos(UnityEngine.RectTransform reference, UnityEngine.RectTransform target, UnityEngine.Vector2 pos)
    // Offset: 0x96A85C
    ::UnityEngine::Vector2 GetLocalPos(::UnityEngine::RectTransform* reference, ::UnityEngine::RectTransform* target, ::UnityEngine::Vector2 pos);
  }; // VROSC.AnimatedAppearData
  #pragma pack(pop)
  static check_size<sizeof(AnimatedAppearData), 72 + sizeof(::ArrayW<::VROSC::AnimatedAppearData::SimpleAppear*>)> __VROSC_AnimatedAppearDataSizeCheck;
  static_assert(sizeof(AnimatedAppearData) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AnimatedAppearData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::AnimatedAppearData::SetAppearData
// Il2CppName: SetAppearData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppearData::*)(::UnityEngine::RectTransform*)>(&VROSC::AnimatedAppearData::SetAppearData)> {
  static const MethodInfo* get() {
    static auto* reference = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppearData*), "SetAppearData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reference});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppearData::UpdateAppearAmount
// Il2CppName: UpdateAppearAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppearData::*)(float, ::VROSC::AnimatedAppear::Mode, bool, bool)>(&VROSC::AnimatedAppearData::UpdateAppearAmount)> {
  static const MethodInfo* get() {
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("VROSC", "AnimatedAppear/Mode")->byval_arg;
    static auto* useFlash = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppearData*), "UpdateAppearAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{amount, mode, useFlash, force});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppearData::SetAppearActive
// Il2CppName: SetAppearActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppearData::*)(bool)>(&VROSC::AnimatedAppearData::SetAppearActive)> {
  static const MethodInfo* get() {
    static auto* appearing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppearData*), "SetAppearActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{appearing});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppearData::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppearData::*)()>(&VROSC::AnimatedAppearData::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppearData*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppearData::SetInteractablesDisabled
// Il2CppName: SetInteractablesDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AnimatedAppearData::*)(bool)>(&VROSC::AnimatedAppearData::SetInteractablesDisabled)> {
  static const MethodInfo* get() {
    static auto* disabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppearData*), "SetInteractablesDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disabled});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppearData::GetAppearData
// Il2CppName: GetAppearData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::MinMaxVector2* (VROSC::AnimatedAppearData::*)(::UnityEngine::RectTransform*, ::VROSC::SimpleAppearObject*)>(&VROSC::AnimatedAppearData::GetAppearData)> {
  static const MethodInfo* get() {
    static auto* reference = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("VROSC", "SimpleAppearObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppearData*), "GetAppearData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reference, target});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppearData::GetAppearData
// Il2CppName: GetAppearData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::MinMaxVector2* (VROSC::AnimatedAppearData::*)(::UnityEngine::RectTransform*, ::VROSC::AdjustableMesh*)>(&VROSC::AnimatedAppearData::GetAppearData)> {
  static const MethodInfo* get() {
    static auto* reference = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("VROSC", "AdjustableMesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppearData*), "GetAppearData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reference, target});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppearData::GetAppearData
// Il2CppName: GetAppearData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::MinMaxVector2* (VROSC::AnimatedAppearData::*)(::UnityEngine::RectTransform*, ::UnityEngine::RectTransform*)>(&VROSC::AnimatedAppearData::GetAppearData)> {
  static const MethodInfo* get() {
    static auto* reference = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppearData*), "GetAppearData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reference, target});
  }
};
// Writing MetadataGetter for method: VROSC::AnimatedAppearData::GetLocalPos
// Il2CppName: GetLocalPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (VROSC::AnimatedAppearData::*)(::UnityEngine::RectTransform*, ::UnityEngine::RectTransform*, ::UnityEngine::Vector2)>(&VROSC::AnimatedAppearData::GetLocalPos)> {
  static const MethodInfo* get() {
    static auto* reference = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AnimatedAppearData*), "GetLocalPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reference, target, pos});
  }
};
