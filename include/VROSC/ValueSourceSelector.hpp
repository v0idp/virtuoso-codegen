// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.SignalNode
#include "VROSC/SignalNode.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Signal
  class Signal;
  // Skipping declaration: ValueSource because it is already included!
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ValueSourceSelector
  class ValueSourceSelector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ValueSourceSelector);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ValueSourceSelector*, "VROSC", "ValueSourceSelector");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ValueSourceSelector
  // [TokenAttribute] Offset: FFFFFFFF
  class ValueSourceSelector : public ::VROSC::SignalNode {
    public:
    // Nested type: ::VROSC::ValueSourceSelector::ValueSource
    struct ValueSource;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: VROSC.ValueSourceSelector/VROSC.ValueSource
    // [TokenAttribute] Offset: FFFFFFFF
    struct ValueSource/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ValueSource
      constexpr ValueSource(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public VROSC.ValueSourceSelector/VROSC.ValueSource PositionX
      static constexpr const int PositionX = 0;
      // Get static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource PositionX
      static ::VROSC::ValueSourceSelector::ValueSource _get_PositionX();
      // Set static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource PositionX
      static void _set_PositionX(::VROSC::ValueSourceSelector::ValueSource value);
      // static field const value: static public VROSC.ValueSourceSelector/VROSC.ValueSource PositionY
      static constexpr const int PositionY = 1;
      // Get static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource PositionY
      static ::VROSC::ValueSourceSelector::ValueSource _get_PositionY();
      // Set static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource PositionY
      static void _set_PositionY(::VROSC::ValueSourceSelector::ValueSource value);
      // static field const value: static public VROSC.ValueSourceSelector/VROSC.ValueSource PositionZ
      static constexpr const int PositionZ = 2;
      // Get static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource PositionZ
      static ::VROSC::ValueSourceSelector::ValueSource _get_PositionZ();
      // Set static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource PositionZ
      static void _set_PositionZ(::VROSC::ValueSourceSelector::ValueSource value);
      // static field const value: static public VROSC.ValueSourceSelector/VROSC.ValueSource RotationX
      static constexpr const int RotationX = 3;
      // Get static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource RotationX
      static ::VROSC::ValueSourceSelector::ValueSource _get_RotationX();
      // Set static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource RotationX
      static void _set_RotationX(::VROSC::ValueSourceSelector::ValueSource value);
      // static field const value: static public VROSC.ValueSourceSelector/VROSC.ValueSource RotationY
      static constexpr const int RotationY = 4;
      // Get static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource RotationY
      static ::VROSC::ValueSourceSelector::ValueSource _get_RotationY();
      // Set static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource RotationY
      static void _set_RotationY(::VROSC::ValueSourceSelector::ValueSource value);
      // static field const value: static public VROSC.ValueSourceSelector/VROSC.ValueSource RotationZ
      static constexpr const int RotationZ = 5;
      // Get static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource RotationZ
      static ::VROSC::ValueSourceSelector::ValueSource _get_RotationZ();
      // Set static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource RotationZ
      static void _set_RotationZ(::VROSC::ValueSourceSelector::ValueSource value);
      // static field const value: static public VROSC.ValueSourceSelector/VROSC.ValueSource Velocity
      static constexpr const int Velocity = 6;
      // Get static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource Velocity
      static ::VROSC::ValueSourceSelector::ValueSource _get_Velocity();
      // Set static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource Velocity
      static void _set_Velocity(::VROSC::ValueSourceSelector::ValueSource value);
      // static field const value: static public VROSC.ValueSourceSelector/VROSC.ValueSource IndexTrigger
      static constexpr const int IndexTrigger = 7;
      // Get static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource IndexTrigger
      static ::VROSC::ValueSourceSelector::ValueSource _get_IndexTrigger();
      // Set static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource IndexTrigger
      static void _set_IndexTrigger(::VROSC::ValueSourceSelector::ValueSource value);
      // static field const value: static public VROSC.ValueSourceSelector/VROSC.ValueSource GripTrigger
      static constexpr const int GripTrigger = 8;
      // Get static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource GripTrigger
      static ::VROSC::ValueSourceSelector::ValueSource _get_GripTrigger();
      // Set static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource GripTrigger
      static void _set_GripTrigger(::VROSC::ValueSourceSelector::ValueSource value);
      // static field const value: static public VROSC.ValueSourceSelector/VROSC.ValueSource StickPadX
      static constexpr const int StickPadX = 9;
      // Get static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource StickPadX
      static ::VROSC::ValueSourceSelector::ValueSource _get_StickPadX();
      // Set static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource StickPadX
      static void _set_StickPadX(::VROSC::ValueSourceSelector::ValueSource value);
      // static field const value: static public VROSC.ValueSourceSelector/VROSC.ValueSource StickPadY
      static constexpr const int StickPadY = 10;
      // Get static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource StickPadY
      static ::VROSC::ValueSourceSelector::ValueSource _get_StickPadY();
      // Set static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource StickPadY
      static void _set_StickPadY(::VROSC::ValueSourceSelector::ValueSource value);
      // static field const value: static public VROSC.ValueSourceSelector/VROSC.ValueSource DistanceBetweenControllers
      static constexpr const int DistanceBetweenControllers = 11;
      // Get static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource DistanceBetweenControllers
      static ::VROSC::ValueSourceSelector::ValueSource _get_DistanceBetweenControllers();
      // Set static field: static public VROSC.ValueSourceSelector/VROSC.ValueSource DistanceBetweenControllers
      static void _set_DistanceBetweenControllers(::VROSC::ValueSourceSelector::ValueSource value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated]] int& dyn_value__();
    }; // VROSC.ValueSourceSelector/VROSC.ValueSource
    #pragma pack(pop)
    static check_size<sizeof(ValueSourceSelector::ValueSource), 0 + sizeof(int)> __VROSC_ValueSourceSelector_ValueSourceSizeCheck;
    static_assert(sizeof(ValueSourceSelector::ValueSource) == 0x4);
    public:
    // private VROSC.ValueSourceSelector/VROSC.ValueSource _valueSource
    // Size: 0x4
    // Offset: 0x40
    ::VROSC::ValueSourceSelector::ValueSource valueSource;
    // Field size check
    static_assert(sizeof(::VROSC::ValueSourceSelector::ValueSource) == 0x4);
    public:
    // Get instance field reference: private VROSC.ValueSourceSelector/VROSC.ValueSource _valueSource
    [[deprecated]] ::VROSC::ValueSourceSelector::ValueSource& dyn__valueSource();
    // static public System.Single GetSignalValue(VROSC.Signal signal, VROSC.ValueSourceSelector/VROSC.ValueSource valueSource)
    // Offset: 0x1921B64
    static float GetSignalValue(::VROSC::Signal* signal, ::VROSC::ValueSourceSelector::ValueSource valueSource);
    // public System.Void .ctor()
    // Offset: 0x1921E80
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ValueSourceSelector* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ValueSourceSelector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ValueSourceSelector*, creationType>()));
    }
    // protected override System.Void NodeBegin(VROSC.Signal signal)
    // Offset: 0x1921B2C
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeBegin(VROSC.Signal signal)
    void NodeBegin(::VROSC::Signal* signal);
    // protected override System.Void NodeStay(VROSC.Signal signal)
    // Offset: 0x1921E10
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeStay(VROSC.Signal signal)
    void NodeStay(::VROSC::Signal* signal);
    // protected override System.Void NodeEnd(VROSC.Signal signal)
    // Offset: 0x1921E48
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeEnd(VROSC.Signal signal)
    void NodeEnd(::VROSC::Signal* signal);
  }; // VROSC.ValueSourceSelector
  #pragma pack(pop)
  static check_size<sizeof(ValueSourceSelector), 64 + sizeof(::VROSC::ValueSourceSelector::ValueSource)> __VROSC_ValueSourceSelectorSizeCheck;
  static_assert(sizeof(ValueSourceSelector) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ValueSourceSelector::ValueSource, "VROSC", "ValueSourceSelector/ValueSource");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ValueSourceSelector::GetSignalValue
// Il2CppName: GetSignalValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::VROSC::Signal*, ::VROSC::ValueSourceSelector::ValueSource)>(&VROSC::ValueSourceSelector::GetSignalValue)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    static auto* valueSource = &::il2cpp_utils::GetClassFromName("VROSC", "ValueSourceSelector/ValueSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ValueSourceSelector*), "GetSignalValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal, valueSource});
  }
};
// Writing MetadataGetter for method: VROSC::ValueSourceSelector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::ValueSourceSelector::NodeBegin
// Il2CppName: NodeBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ValueSourceSelector::*)(::VROSC::Signal*)>(&VROSC::ValueSourceSelector::NodeBegin)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ValueSourceSelector*), "NodeBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::ValueSourceSelector::NodeStay
// Il2CppName: NodeStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ValueSourceSelector::*)(::VROSC::Signal*)>(&VROSC::ValueSourceSelector::NodeStay)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ValueSourceSelector*), "NodeStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::ValueSourceSelector::NodeEnd
// Il2CppName: NodeEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ValueSourceSelector::*)(::VROSC::Signal*)>(&VROSC::ValueSourceSelector::NodeEnd)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ValueSourceSelector*), "NodeEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
