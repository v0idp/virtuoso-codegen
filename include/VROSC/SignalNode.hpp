// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.Node
#include "VROSC/Node.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Signal
  class Signal;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: SignalNode
  class SignalNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::SignalNode);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::SignalNode*, "VROSC", "SignalNode");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.SignalNode
  // [TokenAttribute] Offset: FFFFFFFF
  class SignalNode : public ::VROSC::Node {
    public:
    public:
    // public System.Boolean _bypass
    // Size: 0x1
    // Offset: 0x18
    bool bypass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: bypass and: output
    char __padding0[0x7] = {};
    // protected VROSC.SignalNode[] _output
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::VROSC::SignalNode*> output;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::SignalNode*>) == 0x8);
    // protected System.Boolean _blockPassOnThisFrame
    // Size: 0x1
    // Offset: 0x28
    bool blockPassOnThisFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: blockPassOnThisFrame and: receivedSignalsThisFrame
    char __padding2[0x3] = {};
    // protected System.Int32 _receivedSignalsThisFrame
    // Size: 0x4
    // Offset: 0x2C
    int receivedSignalsThisFrame;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean _nodeProcessingSignal
    // Size: 0x1
    // Offset: 0x30
    bool nodeProcessingSignal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: nodeProcessingSignal and: cachedSignal
    char __padding4[0x7] = {};
    // private VROSC.Signal _cachedSignal
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::Signal* cachedSignal;
    // Field size check
    static_assert(sizeof(::VROSC::Signal*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean _bypass
    [[deprecated]] bool& dyn__bypass();
    // Get instance field reference: protected VROSC.SignalNode[] _output
    [[deprecated]] ::ArrayW<::VROSC::SignalNode*>& dyn__output();
    // Get instance field reference: protected System.Boolean _blockPassOnThisFrame
    [[deprecated]] bool& dyn__blockPassOnThisFrame();
    // Get instance field reference: protected System.Int32 _receivedSignalsThisFrame
    [[deprecated]] int& dyn__receivedSignalsThisFrame();
    // Get instance field reference: protected System.Boolean _nodeProcessingSignal
    [[deprecated]] bool& dyn__nodeProcessingSignal();
    // Get instance field reference: private VROSC.Signal _cachedSignal
    [[deprecated]] ::VROSC::Signal*& dyn__cachedSignal();
    // protected System.Int32 get_MaxInputs()
    // Offset: 0x1928504
    int get_MaxInputs();
    // protected System.Boolean get_RequireOrigin()
    // Offset: 0x192850C
    bool get_RequireOrigin();
    // protected System.Void OnDisable()
    // Offset: 0x192809C
    void OnDisable();
    // protected System.Void OnEnable()
    // Offset: 0x1928514
    void OnEnable();
    // public System.Void ReceiveSignal(VROSC.Signal signal)
    // Offset: 0x192851C
    void ReceiveSignal(::VROSC::Signal* signal);
    // protected System.Void PassOnSignal(VROSC.Signal signal)
    // Offset: 0x1927F20
    void PassOnSignal(::VROSC::Signal* signal);
    // protected System.Void LateUpdate()
    // Offset: 0x1927D38
    void LateUpdate();
    // protected System.Void NodeBegin(VROSC.Signal signal)
    // Offset: 0x1928608
    void NodeBegin(::VROSC::Signal* signal);
    // protected System.Void NodeStay(VROSC.Signal signal)
    // Offset: 0x192860C
    void NodeStay(::VROSC::Signal* signal);
    // protected System.Void NodeEnd(VROSC.Signal signal)
    // Offset: 0x1928610
    void NodeEnd(::VROSC::Signal* signal);
    // public System.Void .ctor()
    // Offset: 0x1925C8C
    // Implemented from: VROSC.Node
    // Base method: System.Void Node::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SignalNode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SignalNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SignalNode*, creationType>()));
    }
  }; // VROSC.SignalNode
  #pragma pack(pop)
  static check_size<sizeof(SignalNode), 56 + sizeof(::VROSC::Signal*)> __VROSC_SignalNodeSizeCheck;
  static_assert(sizeof(SignalNode) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::SignalNode::get_MaxInputs
// Il2CppName: get_MaxInputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::SignalNode::*)()>(&VROSC::SignalNode::get_MaxInputs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SignalNode*), "get_MaxInputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SignalNode::get_RequireOrigin
// Il2CppName: get_RequireOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::SignalNode::*)()>(&VROSC::SignalNode::get_RequireOrigin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SignalNode*), "get_RequireOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SignalNode::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SignalNode::*)()>(&VROSC::SignalNode::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SignalNode*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SignalNode::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SignalNode::*)()>(&VROSC::SignalNode::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SignalNode*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SignalNode::ReceiveSignal
// Il2CppName: ReceiveSignal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SignalNode::*)(::VROSC::Signal*)>(&VROSC::SignalNode::ReceiveSignal)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SignalNode*), "ReceiveSignal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::SignalNode::PassOnSignal
// Il2CppName: PassOnSignal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SignalNode::*)(::VROSC::Signal*)>(&VROSC::SignalNode::PassOnSignal)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SignalNode*), "PassOnSignal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::SignalNode::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SignalNode::*)()>(&VROSC::SignalNode::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SignalNode*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SignalNode::NodeBegin
// Il2CppName: NodeBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SignalNode::*)(::VROSC::Signal*)>(&VROSC::SignalNode::NodeBegin)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SignalNode*), "NodeBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::SignalNode::NodeStay
// Il2CppName: NodeStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SignalNode::*)(::VROSC::Signal*)>(&VROSC::SignalNode::NodeStay)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SignalNode*), "NodeStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::SignalNode::NodeEnd
// Il2CppName: NodeEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SignalNode::*)(::VROSC::Signal*)>(&VROSC::SignalNode::NodeEnd)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SignalNode*), "NodeEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::SignalNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
