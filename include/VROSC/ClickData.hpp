// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.TriggerButton
#include "VROSC/TriggerButton.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ClickData
  class ClickData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ClickData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ClickData*, "VROSC", "ClickData");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ClickData
  // [TokenAttribute] Offset: FFFFFFFF
  class ClickData : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly VROSC.InputDevice <Device>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::VROSC::InputDevice* Device;
    // Field size check
    static_assert(sizeof(::VROSC::InputDevice*) == 0x8);
    // private readonly VROSC.TriggerButton <Button>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    ::VROSC::TriggerButton Button;
    // Field size check
    static_assert(sizeof(::VROSC::TriggerButton) == 0x4);
    // private readonly UnityEngine.Vector3 <Position>k__BackingField
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 Position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private readonly System.Boolean <PointedAt>k__BackingField
    // Size: 0x1
    // Offset: 0x28
    bool PointedAt;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private readonly VROSC.InputDevice <Device>k__BackingField
    ::VROSC::InputDevice*& dyn_$Device$k__BackingField();
    // Get instance field reference: private readonly VROSC.TriggerButton <Button>k__BackingField
    ::VROSC::TriggerButton& dyn_$Button$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.Vector3 <Position>k__BackingField
    ::UnityEngine::Vector3& dyn_$Position$k__BackingField();
    // Get instance field reference: private readonly System.Boolean <PointedAt>k__BackingField
    bool& dyn_$PointedAt$k__BackingField();
    // public VROSC.InputDevice get_Device()
    // Offset: 0x1330EE4
    ::VROSC::InputDevice* get_Device();
    // public VROSC.TriggerButton get_Button()
    // Offset: 0x1330EEC
    ::VROSC::TriggerButton get_Button();
    // public UnityEngine.Vector3 get_Position()
    // Offset: 0x1330EF4
    ::UnityEngine::Vector3 get_Position();
    // public System.Boolean get_PointedAt()
    // Offset: 0x1330F00
    bool get_PointedAt();
    // public System.Void .ctor(VROSC.InputDevice device, VROSC.TriggerButton button, UnityEngine.Vector3 position, System.Boolean pointedAt)
    // Offset: 0x1330F08
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClickData* New_ctor(::VROSC::InputDevice* device, ::VROSC::TriggerButton button, ::UnityEngine::Vector3 position, bool pointedAt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ClickData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClickData*, creationType>(device, button, position, pointedAt)));
    }
  }; // VROSC.ClickData
  #pragma pack(pop)
  static check_size<sizeof(ClickData), 40 + sizeof(bool)> __VROSC_ClickDataSizeCheck;
  static_assert(sizeof(ClickData) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ClickData::get_Device
// Il2CppName: get_Device
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::InputDevice* (VROSC::ClickData::*)()>(&VROSC::ClickData::get_Device)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ClickData*), "get_Device", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ClickData::get_Button
// Il2CppName: get_Button
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::TriggerButton (VROSC::ClickData::*)()>(&VROSC::ClickData::get_Button)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ClickData*), "get_Button", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ClickData::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::ClickData::*)()>(&VROSC::ClickData::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ClickData*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ClickData::get_PointedAt
// Il2CppName: get_PointedAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::ClickData::*)()>(&VROSC::ClickData::get_PointedAt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ClickData*), "get_PointedAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ClickData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
