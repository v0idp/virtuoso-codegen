// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.AdjustableMeshEffect
#include "VROSC/AdjustableMeshEffect.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: AdjustableMeshColorChangeEffect
  class AdjustableMeshColorChangeEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AdjustableMeshColorChangeEffect);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AdjustableMeshColorChangeEffect*, "VROSC", "AdjustableMeshColorChangeEffect");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AdjustableMeshColorChangeEffect
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class AdjustableMeshColorChangeEffect : public ::VROSC::AdjustableMeshEffect {
    public:
    public:
    // [ColorUsageAttribute] Offset: 0x78B818
    // private UnityEngine.Color _color
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _baseColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color baseColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Get instance field reference: private UnityEngine.Color _color
    [[deprecated]] ::UnityEngine::Color& dyn__color();
    // Get instance field reference: private UnityEngine.Color _baseColor
    [[deprecated]] ::UnityEngine::Color& dyn__baseColor();
    // private System.Void Awake()
    // Offset: 0x967210
    void Awake();
    // public System.Void SetColor(UnityEngine.Color color)
    // Offset: 0x9672D4
    void SetColor(::UnityEngine::Color color);
    // public System.Void .ctor()
    // Offset: 0x9672E8
    // Implemented from: VROSC.AdjustableMeshEffect
    // Base method: System.Void AdjustableMeshEffect::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdjustableMeshColorChangeEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColorChangeEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdjustableMeshColorChangeEffect*, creationType>()));
    }
    // protected override System.Void OnMeshVisible()
    // Offset: 0x96721C
    // Implemented from: VROSC.AdjustableMeshEffect
    // Base method: System.Void AdjustableMeshEffect::OnMeshVisible()
    void OnMeshVisible();
  }; // VROSC.AdjustableMeshColorChangeEffect
  #pragma pack(pop)
  static check_size<sizeof(AdjustableMeshColorChangeEffect), 48 + sizeof(::UnityEngine::Color)> __VROSC_AdjustableMeshColorChangeEffectSizeCheck;
  static_assert(sizeof(AdjustableMeshColorChangeEffect) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AdjustableMeshColorChangeEffect::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AdjustableMeshColorChangeEffect::*)()>(&VROSC::AdjustableMeshColorChangeEffect::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AdjustableMeshColorChangeEffect*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AdjustableMeshColorChangeEffect::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AdjustableMeshColorChangeEffect::*)(::UnityEngine::Color)>(&VROSC::AdjustableMeshColorChangeEffect::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AdjustableMeshColorChangeEffect*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::AdjustableMeshColorChangeEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::AdjustableMeshColorChangeEffect::OnMeshVisible
// Il2CppName: OnMeshVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AdjustableMeshColorChangeEffect::*)()>(&VROSC::AdjustableMeshColorChangeEffect::OnMeshVisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AdjustableMeshColorChangeEffect*), "OnMeshVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
