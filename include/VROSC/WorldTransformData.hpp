// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: WorldTransformData
  class WorldTransformData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::WorldTransformData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::WorldTransformData*, "VROSC", "WorldTransformData");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.WorldTransformData
  // [TokenAttribute] Offset: FFFFFFFF
  class WorldTransformData : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Transform Transform
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Transform* Transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Vector3 Position
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 Position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion Rotation
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::Quaternion Rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 LocalScale
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 LocalScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public UnityEngine.Transform Transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_Transform();
    // Get instance field reference: public UnityEngine.Vector3 Position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Position();
    // Get instance field reference: public UnityEngine.Quaternion Rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_Rotation();
    // Get instance field reference: public UnityEngine.Vector3 LocalScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_LocalScale();
    // public System.Void .ctor(UnityEngine.Transform transform)
    // Offset: 0x953710
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WorldTransformData* New_ctor(::UnityEngine::Transform* transform) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::WorldTransformData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WorldTransformData*, creationType>(transform)));
    }
    // public System.Void Update()
    // Offset: 0x9537B4
    void Update();
    // public System.Void ResetTransform()
    // Offset: 0x95381C
    void ResetTransform();
  }; // VROSC.WorldTransformData
  #pragma pack(pop)
  static check_size<sizeof(WorldTransformData), 52 + sizeof(::UnityEngine::Vector3)> __VROSC_WorldTransformDataSizeCheck;
  static_assert(sizeof(WorldTransformData) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::WorldTransformData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::WorldTransformData::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::WorldTransformData::*)()>(&VROSC::WorldTransformData::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::WorldTransformData*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::WorldTransformData::ResetTransform
// Il2CppName: ResetTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::WorldTransformData::*)()>(&VROSC::WorldTransformData::ResetTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::WorldTransformData*), "ResetTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
