// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.Grabable
#include "VROSC/Grabable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: MovementPlane
  class MovementPlane;
  // Forward declaring type: SmoothMovement
  class SmoothMovement;
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: TriggerButton
  struct TriggerButton;
  // Forward declaring type: GrabData
  class GrabData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: MoveOnPlane
  class MoveOnPlane;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::MoveOnPlane);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::MoveOnPlane*, "VROSC", "MoveOnPlane");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xE8
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.MoveOnPlane
  // [TokenAttribute] Offset: FFFFFFFF
  class MoveOnPlane : public ::VROSC::Grabable {
    public:
    // Writing base type padding for base size: 0x69 to desired offset: 0x70
    char ___base_padding[0x7] = {};
    public:
    // private UnityEngine.RectTransform _constrain
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::RectTransform* constrain;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private System.Single _liftAmount
    // Size: 0x4
    // Offset: 0x78
    float liftAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _smoothing
    // Size: 0x4
    // Offset: 0x7C
    float smoothing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private VROSC.MovementPlane _plane
    // Size: 0x8
    // Offset: 0x80
    ::VROSC::MovementPlane* plane;
    // Field size check
    static_assert(sizeof(::VROSC::MovementPlane*) == 0x8);
    // private UnityEngine.Transform _target
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 _lastPlaneHit
    // Size: 0xC
    // Offset: 0x90
    ::UnityEngine::Vector3 lastPlaneHit;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: lastPlaneHit and: smoothMovement
    char __padding5[0x4] = {};
    // private VROSC.SmoothMovement _smoothMovement
    // Size: 0x8
    // Offset: 0xA0
    ::VROSC::SmoothMovement* smoothMovement;
    // Field size check
    static_assert(sizeof(::VROSC::SmoothMovement*) == 0x8);
    // private VROSC.InputDevice _grabber
    // Size: 0x8
    // Offset: 0xA8
    ::VROSC::InputDevice* grabber;
    // Field size check
    static_assert(sizeof(::VROSC::InputDevice*) == 0x8);
    // private UnityEngine.Vector3 _grabOffset
    // Size: 0xC
    // Offset: 0xB0
    ::UnityEngine::Vector3 grabOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _grabRotation
    // Size: 0x10
    // Offset: 0xBC
    ::UnityEngine::Quaternion grabRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // Padding between fields: grabRotation and: OnGrabBegin
    char __padding9[0x4] = {};
    // public System.Action OnGrabBegin
    // Size: 0x8
    // Offset: 0xD0
    ::System::Action* OnGrabBegin;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Action OnGrabEnd
    // Size: 0x8
    // Offset: 0xD8
    ::System::Action* OnGrabEnd;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Action OnPositioningComplete
    // Size: 0x8
    // Offset: 0xE0
    ::System::Action* OnPositioningComplete;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.RectTransform _constrain
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__constrain();
    // Get instance field reference: private System.Single _liftAmount
    [[deprecated("Use field access instead!")]] float& dyn__liftAmount();
    // Get instance field reference: private System.Single _smoothing
    [[deprecated("Use field access instead!")]] float& dyn__smoothing();
    // Get instance field reference: private VROSC.MovementPlane _plane
    [[deprecated("Use field access instead!")]] ::VROSC::MovementPlane*& dyn__plane();
    // Get instance field reference: private UnityEngine.Transform _target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__target();
    // Get instance field reference: private UnityEngine.Vector3 _lastPlaneHit
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__lastPlaneHit();
    // Get instance field reference: private VROSC.SmoothMovement _smoothMovement
    [[deprecated("Use field access instead!")]] ::VROSC::SmoothMovement*& dyn__smoothMovement();
    // Get instance field reference: private VROSC.InputDevice _grabber
    [[deprecated("Use field access instead!")]] ::VROSC::InputDevice*& dyn__grabber();
    // Get instance field reference: private UnityEngine.Vector3 _grabOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__grabOffset();
    // Get instance field reference: private UnityEngine.Quaternion _grabRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__grabRotation();
    // Get instance field reference: public System.Action OnGrabBegin
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnGrabBegin();
    // Get instance field reference: public System.Action OnGrabEnd
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnGrabEnd();
    // Get instance field reference: public System.Action OnPositioningComplete
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnPositioningComplete();
    // public System.Void Setup(UnityEngine.Transform target, VROSC.MovementPlane movementPlane)
    // Offset: 0xACCCDC
    void Setup(::UnityEngine::Transform* target, ::VROSC::MovementPlane* movementPlane);
    // private System.Void OnEnable()
    // Offset: 0xACCD88
    void OnEnable();
    // private System.Void ButtonEnd(VROSC.InputDevice inputDevice, VROSC.TriggerButton button)
    // Offset: 0xACCF60
    void ButtonEnd(::VROSC::InputDevice* inputDevice, ::VROSC::TriggerButton button);
    // private System.Void LateUpdate()
    // Offset: 0xACD028
    void LateUpdate();
    // public System.Void StopGrab()
    // Offset: 0xACD00C
    void StopGrab();
    // private System.Void GrabBegin(VROSC.InputDevice grabber)
    // Offset: 0xACD1D4
    void GrabBegin(::VROSC::InputDevice* grabber);
    // protected System.Void UpdateGrab()
    // Offset: 0xACD480
    void UpdateGrab();
    // private UnityEngine.Vector3 BeamPositionOnGrid()
    // Offset: 0xACD328
    ::UnityEngine::Vector3 BeamPositionOnGrid();
    // private System.Void OnDrawGizmos()
    // Offset: 0xACD9B0
    void OnDrawGizmos();
    // public System.Void .ctor()
    // Offset: 0xACDA68
    // Implemented from: VROSC.Grabable
    // Base method: System.Void Grabable::.ctor()
    // Base method: System.Void Interactable::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MoveOnPlane* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MoveOnPlane::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MoveOnPlane*, creationType>()));
    }
    // protected override System.Void OnDisable()
    // Offset: 0xACCE74
    // Implemented from: VROSC.Interactable
    // Base method: System.Void Interactable::OnDisable()
    void OnDisable();
    // public override System.Void Grab(VROSC.GrabData data, System.Boolean grabbing)
    // Offset: 0xACD0B4
    // Implemented from: VROSC.Grabable
    // Base method: System.Void Grabable::Grab(VROSC.GrabData data, System.Boolean grabbing)
    void Grab(::VROSC::GrabData* data, bool grabbing);
  }; // VROSC.MoveOnPlane
  #pragma pack(pop)
  static check_size<sizeof(MoveOnPlane), 224 + sizeof(::System::Action*)> __VROSC_MoveOnPlaneSizeCheck;
  static_assert(sizeof(MoveOnPlane) == 0xE8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::MoveOnPlane::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MoveOnPlane::*)(::UnityEngine::Transform*, ::VROSC::MovementPlane*)>(&VROSC::MoveOnPlane::Setup)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* movementPlane = &::il2cpp_utils::GetClassFromName("VROSC", "MovementPlane")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MoveOnPlane*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, movementPlane});
  }
};
// Writing MetadataGetter for method: VROSC::MoveOnPlane::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MoveOnPlane::*)()>(&VROSC::MoveOnPlane::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MoveOnPlane*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MoveOnPlane::ButtonEnd
// Il2CppName: ButtonEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MoveOnPlane::*)(::VROSC::InputDevice*, ::VROSC::TriggerButton)>(&VROSC::MoveOnPlane::ButtonEnd)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* button = &::il2cpp_utils::GetClassFromName("VROSC", "TriggerButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MoveOnPlane*), "ButtonEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice, button});
  }
};
// Writing MetadataGetter for method: VROSC::MoveOnPlane::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MoveOnPlane::*)()>(&VROSC::MoveOnPlane::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MoveOnPlane*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MoveOnPlane::StopGrab
// Il2CppName: StopGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MoveOnPlane::*)()>(&VROSC::MoveOnPlane::StopGrab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MoveOnPlane*), "StopGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MoveOnPlane::GrabBegin
// Il2CppName: GrabBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MoveOnPlane::*)(::VROSC::InputDevice*)>(&VROSC::MoveOnPlane::GrabBegin)> {
  static const MethodInfo* get() {
    static auto* grabber = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MoveOnPlane*), "GrabBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabber});
  }
};
// Writing MetadataGetter for method: VROSC::MoveOnPlane::UpdateGrab
// Il2CppName: UpdateGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MoveOnPlane::*)()>(&VROSC::MoveOnPlane::UpdateGrab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MoveOnPlane*), "UpdateGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MoveOnPlane::BeamPositionOnGrid
// Il2CppName: BeamPositionOnGrid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::MoveOnPlane::*)()>(&VROSC::MoveOnPlane::BeamPositionOnGrid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MoveOnPlane*), "BeamPositionOnGrid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MoveOnPlane::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MoveOnPlane::*)()>(&VROSC::MoveOnPlane::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MoveOnPlane*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MoveOnPlane::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::MoveOnPlane::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MoveOnPlane::*)()>(&VROSC::MoveOnPlane::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MoveOnPlane*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MoveOnPlane::Grab
// Il2CppName: Grab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MoveOnPlane::*)(::VROSC::GrabData*, bool)>(&VROSC::MoveOnPlane::Grab)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("VROSC", "GrabData")->byval_arg;
    static auto* grabbing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MoveOnPlane*), "Grab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, grabbing});
  }
};
