// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: TransformMover
  class TransformMover;
  // Forward declaring type: UIButton
  class UIButton;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ResetableMover
  class ResetableMover;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ResetableMover);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ResetableMover*, "VROSC", "ResetableMover");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ResetableMover
  // [TokenAttribute] Offset: FFFFFFFF
  class ResetableMover : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.TransformMover _mover
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::TransformMover* mover;
    // Field size check
    static_assert(sizeof(::VROSC::TransformMover*) == 0x8);
    // private UnityEngine.Transform _freeMoveParent
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* freeMoveParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [HeaderAttribute] Offset: 0x7886E0
    // private UnityEngine.Transform _snapToObject
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* snapToObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single _snapBackDistance
    // Size: 0x4
    // Offset: 0x30
    float snapBackDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: snapBackDistance and: resetButton
    char __padding3[0x4] = {};
    // [HeaderAttribute] Offset: 0x78873C
    // private VROSC.UIButton _resetButton
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::UIButton* resetButton;
    // Field size check
    static_assert(sizeof(::VROSC::UIButton*) == 0x8);
    // private UnityEngine.GameObject _resetButtonParent
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* resetButtonParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Transform _originalParent
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* originalParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean _isAttached
    // Size: 0x1
    // Offset: 0x50
    bool isAttached;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isAttached and: InstrumentScaleMultiplier
    char __padding7[0x3] = {};
    // public System.Single InstrumentScaleMultiplier
    // Size: 0x4
    // Offset: 0x54
    float InstrumentScaleMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Action`1<VROSC.ResetableMover> OnMoved
    // Size: 0x8
    // Offset: 0x58
    ::System::Action_1<::VROSC::ResetableMover*>* OnMoved;
    // Field size check
    static_assert(sizeof(::System::Action_1<::VROSC::ResetableMover*>*) == 0x8);
    // public System.Action`1<VROSC.ResetableMover> OnReset
    // Size: 0x8
    // Offset: 0x60
    ::System::Action_1<::VROSC::ResetableMover*>* OnReset;
    // Field size check
    static_assert(sizeof(::System::Action_1<::VROSC::ResetableMover*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.TransformMover _mover
    [[deprecated("Use field access instead!")]] ::VROSC::TransformMover*& dyn__mover();
    // Get instance field reference: private UnityEngine.Transform _freeMoveParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__freeMoveParent();
    // Get instance field reference: private UnityEngine.Transform _snapToObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__snapToObject();
    // Get instance field reference: private System.Single _snapBackDistance
    [[deprecated("Use field access instead!")]] float& dyn__snapBackDistance();
    // Get instance field reference: private VROSC.UIButton _resetButton
    [[deprecated("Use field access instead!")]] ::VROSC::UIButton*& dyn__resetButton();
    // Get instance field reference: private UnityEngine.GameObject _resetButtonParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__resetButtonParent();
    // Get instance field reference: private UnityEngine.Transform _originalParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__originalParent();
    // Get instance field reference: private System.Boolean _isAttached
    [[deprecated("Use field access instead!")]] bool& dyn__isAttached();
    // Get instance field reference: public System.Single InstrumentScaleMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_InstrumentScaleMultiplier();
    // Get instance field reference: public System.Action`1<VROSC.ResetableMover> OnMoved
    [[deprecated("Use field access instead!")]] ::System::Action_1<::VROSC::ResetableMover*>*& dyn_OnMoved();
    // Get instance field reference: public System.Action`1<VROSC.ResetableMover> OnReset
    [[deprecated("Use field access instead!")]] ::System::Action_1<::VROSC::ResetableMover*>*& dyn_OnReset();
    // public UnityEngine.Vector3 get_Position()
    // Offset: 0xB33B48
    ::UnityEngine::Vector3 get_Position();
    // public UnityEngine.Quaternion get_Rotation()
    // Offset: 0xB33B74
    ::UnityEngine::Quaternion get_Rotation();
    // public UnityEngine.Vector3 get_Scale()
    // Offset: 0xB33BA0
    ::UnityEngine::Vector3 get_Scale();
    // public System.Void .ctor()
    // Offset: 0xB34518
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ResetableMover* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ResetableMover::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ResetableMover*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0xB33BCC
    void Awake();
    // private System.Void GrabEnded(VROSC.TransformMover mover)
    // Offset: 0xB33D9C
    void GrabEnded(::VROSC::TransformMover* mover);
    // public System.Void SetToPosition(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale)
    // Offset: 0xB33ED8
    void SetToPosition(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 scale);
    // public System.Void ResetTransform()
    // Offset: 0xB340E0
    void ResetTransform();
    // private System.Void ResetPressed()
    // Offset: 0xB34184
    void ResetPressed();
    // private System.Void OnDestroy()
    // Offset: 0xB34208
    void OnDestroy();
    // private System.Void OnDrawGizmos()
    // Offset: 0xB34394
    void OnDrawGizmos();
  }; // VROSC.ResetableMover
  #pragma pack(pop)
  static check_size<sizeof(ResetableMover), 96 + sizeof(::System::Action_1<::VROSC::ResetableMover*>*)> __VROSC_ResetableMoverSizeCheck;
  static_assert(sizeof(ResetableMover) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ResetableMover::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::ResetableMover::*)()>(&VROSC::ResetableMover::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ResetableMover*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ResetableMover::get_Rotation
// Il2CppName: get_Rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (VROSC::ResetableMover::*)()>(&VROSC::ResetableMover::get_Rotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ResetableMover*), "get_Rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ResetableMover::get_Scale
// Il2CppName: get_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::ResetableMover::*)()>(&VROSC::ResetableMover::get_Scale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ResetableMover*), "get_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ResetableMover::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::ResetableMover::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ResetableMover::*)()>(&VROSC::ResetableMover::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ResetableMover*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ResetableMover::GrabEnded
// Il2CppName: GrabEnded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ResetableMover::*)(::VROSC::TransformMover*)>(&VROSC::ResetableMover::GrabEnded)> {
  static const MethodInfo* get() {
    static auto* mover = &::il2cpp_utils::GetClassFromName("VROSC", "TransformMover")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ResetableMover*), "GrabEnded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mover});
  }
};
// Writing MetadataGetter for method: VROSC::ResetableMover::SetToPosition
// Il2CppName: SetToPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ResetableMover::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3)>(&VROSC::ResetableMover::SetToPosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ResetableMover*), "SetToPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation, scale});
  }
};
// Writing MetadataGetter for method: VROSC::ResetableMover::ResetTransform
// Il2CppName: ResetTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ResetableMover::*)()>(&VROSC::ResetableMover::ResetTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ResetableMover*), "ResetTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ResetableMover::ResetPressed
// Il2CppName: ResetPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ResetableMover::*)()>(&VROSC::ResetableMover::ResetPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ResetableMover*), "ResetPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ResetableMover::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ResetableMover::*)()>(&VROSC::ResetableMover::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ResetableMover*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ResetableMover::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ResetableMover::*)()>(&VROSC::ResetableMover::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ResetableMover*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
