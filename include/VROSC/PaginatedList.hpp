// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: PaginatedListItemUI
  class PaginatedListItemUI;
  // Forward declaring type: PaginatedListPageButton
  class PaginatedListPageButton;
  // Forward declaring type: PaginatedListDataHolder
  class PaginatedListDataHolder;
  // Forward declaring type: PaginatedListItemData
  class PaginatedListItemData;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: PaginatedList
  class PaginatedList;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::PaginatedList);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::PaginatedList*, "VROSC", "PaginatedList");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.PaginatedList
  // [TokenAttribute] Offset: FFFFFFFF
  class PaginatedList : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Int32 <Pages>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int Pages;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _itemCount
    // Size: 0x4
    // Offset: 0x1C
    int itemCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Transform _listItemParent
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* listItemParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private VROSC.PaginatedListItemUI _listItemPrefab
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::PaginatedListItemUI* listItemPrefab;
    // Field size check
    static_assert(sizeof(::VROSC::PaginatedListItemUI*) == 0x8);
    // private System.Int32 _pageButtonCount
    // Size: 0x4
    // Offset: 0x30
    int pageButtonCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: pageButtonCount and: pageButtonsParent
    char __padding4[0x4] = {};
    // private UnityEngine.Transform _pageButtonsParent
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* pageButtonsParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private VROSC.PaginatedListPageButton _pageButtonPrefab
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::PaginatedListPageButton* pageButtonPrefab;
    // Field size check
    static_assert(sizeof(::VROSC::PaginatedListPageButton*) == 0x8);
    // private System.Boolean _isSetup
    // Size: 0x1
    // Offset: 0x48
    bool isSetup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isSetup and: uiItems
    char __padding7[0x7] = {};
    // private VROSC.PaginatedListItemUI[] _uiItems
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::VROSC::PaginatedListItemUI*> uiItems;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::PaginatedListItemUI*>) == 0x8);
    // private VROSC.PaginatedListPageButton[] _pageButtons
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::VROSC::PaginatedListPageButton*> pageButtons;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::PaginatedListPageButton*>) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.PaginatedListDataHolder> _dataList
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::VROSC::PaginatedListDataHolder*>* dataList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::PaginatedListDataHolder*>*) == 0x8);
    // private System.Int32 _currentPage
    // Size: 0x4
    // Offset: 0x68
    int currentPage;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: currentPage and: OnItemSelected
    char __padding11[0x4] = {};
    // public System.Action`1<VROSC.PaginatedListDataHolder> OnItemSelected
    // Size: 0x8
    // Offset: 0x70
    ::System::Action_1<::VROSC::PaginatedListDataHolder*>* OnItemSelected;
    // Field size check
    static_assert(sizeof(::System::Action_1<::VROSC::PaginatedListDataHolder*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Int32 <Pages>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Pages$k__BackingField();
    // Get instance field reference: private System.Int32 _itemCount
    [[deprecated("Use field access instead!")]] int& dyn__itemCount();
    // Get instance field reference: private UnityEngine.Transform _listItemParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__listItemParent();
    // Get instance field reference: private VROSC.PaginatedListItemUI _listItemPrefab
    [[deprecated("Use field access instead!")]] ::VROSC::PaginatedListItemUI*& dyn__listItemPrefab();
    // Get instance field reference: private System.Int32 _pageButtonCount
    [[deprecated("Use field access instead!")]] int& dyn__pageButtonCount();
    // Get instance field reference: private UnityEngine.Transform _pageButtonsParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__pageButtonsParent();
    // Get instance field reference: private VROSC.PaginatedListPageButton _pageButtonPrefab
    [[deprecated("Use field access instead!")]] ::VROSC::PaginatedListPageButton*& dyn__pageButtonPrefab();
    // Get instance field reference: private System.Boolean _isSetup
    [[deprecated("Use field access instead!")]] bool& dyn__isSetup();
    // Get instance field reference: private VROSC.PaginatedListItemUI[] _uiItems
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::PaginatedListItemUI*>& dyn__uiItems();
    // Get instance field reference: private VROSC.PaginatedListPageButton[] _pageButtons
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::PaginatedListPageButton*>& dyn__pageButtons();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.PaginatedListDataHolder> _dataList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VROSC::PaginatedListDataHolder*>*& dyn__dataList();
    // Get instance field reference: private System.Int32 _currentPage
    [[deprecated("Use field access instead!")]] int& dyn__currentPage();
    // Get instance field reference: public System.Action`1<VROSC.PaginatedListDataHolder> OnItemSelected
    [[deprecated("Use field access instead!")]] ::System::Action_1<::VROSC::PaginatedListDataHolder*>*& dyn_OnItemSelected();
    // public System.Int32 get_Pages()
    // Offset: 0xADB8EC
    int get_Pages();
    // private System.Void set_Pages(System.Int32 value)
    // Offset: 0xADB8E4
    void set_Pages(int value);
    // public System.Void .ctor()
    // Offset: 0xADC460
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PaginatedList* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PaginatedList::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PaginatedList*, creationType>()));
    }
    // public System.Void Setup()
    // Offset: 0xADB8F4
    void Setup();
    // public System.Void UpdateData(System.Collections.Generic.List`1<VROSC.PaginatedListDataHolder> dataList, VROSC.PaginatedListDataHolder selected)
    // Offset: 0xADBCF8
    void UpdateData(::System::Collections::Generic::List_1<::VROSC::PaginatedListDataHolder*>* dataList, ::VROSC::PaginatedListDataHolder* selected);
    // public System.Void SelectItem(VROSC.PaginatedListItemData data)
    // Offset: 0xADBEA4
    void SelectItem(::VROSC::PaginatedListItemData* data);
    // private System.Void ItemSelected(VROSC.PaginatedListDataHolder dataHolder)
    // Offset: 0xADBDE4
    void ItemSelected(::VROSC::PaginatedListDataHolder* dataHolder);
    // private System.Void ShowPage(System.Int32 page)
    // Offset: 0xADBD84
    void ShowPage(int page);
    // private System.Void ShowItemsOnCurrentPage()
    // Offset: 0xADC080
    void ShowItemsOnCurrentPage();
    // private System.Void UpdatePageButtons()
    // Offset: 0xADC1C4
    void UpdatePageButtons();
    // public System.Void UnselectAll()
    // Offset: 0xADBFE8
    void UnselectAll();
  }; // VROSC.PaginatedList
  #pragma pack(pop)
  static check_size<sizeof(PaginatedList), 112 + sizeof(::System::Action_1<::VROSC::PaginatedListDataHolder*>*)> __VROSC_PaginatedListSizeCheck;
  static_assert(sizeof(PaginatedList) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::PaginatedList::get_Pages
// Il2CppName: get_Pages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::PaginatedList::*)()>(&VROSC::PaginatedList::get_Pages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PaginatedList*), "get_Pages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PaginatedList::set_Pages
// Il2CppName: set_Pages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PaginatedList::*)(int)>(&VROSC::PaginatedList::set_Pages)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PaginatedList*), "set_Pages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::PaginatedList::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::PaginatedList::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PaginatedList::*)()>(&VROSC::PaginatedList::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PaginatedList*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PaginatedList::UpdateData
// Il2CppName: UpdateData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PaginatedList::*)(::System::Collections::Generic::List_1<::VROSC::PaginatedListDataHolder*>*, ::VROSC::PaginatedListDataHolder*)>(&VROSC::PaginatedList::UpdateData)> {
  static const MethodInfo* get() {
    static auto* dataList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "PaginatedListDataHolder")})->byval_arg;
    static auto* selected = &::il2cpp_utils::GetClassFromName("VROSC", "PaginatedListDataHolder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PaginatedList*), "UpdateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dataList, selected});
  }
};
// Writing MetadataGetter for method: VROSC::PaginatedList::SelectItem
// Il2CppName: SelectItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PaginatedList::*)(::VROSC::PaginatedListItemData*)>(&VROSC::PaginatedList::SelectItem)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("VROSC", "PaginatedListItemData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PaginatedList*), "SelectItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: VROSC::PaginatedList::ItemSelected
// Il2CppName: ItemSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PaginatedList::*)(::VROSC::PaginatedListDataHolder*)>(&VROSC::PaginatedList::ItemSelected)> {
  static const MethodInfo* get() {
    static auto* dataHolder = &::il2cpp_utils::GetClassFromName("VROSC", "PaginatedListDataHolder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PaginatedList*), "ItemSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dataHolder});
  }
};
// Writing MetadataGetter for method: VROSC::PaginatedList::ShowPage
// Il2CppName: ShowPage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PaginatedList::*)(int)>(&VROSC::PaginatedList::ShowPage)> {
  static const MethodInfo* get() {
    static auto* page = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PaginatedList*), "ShowPage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{page});
  }
};
// Writing MetadataGetter for method: VROSC::PaginatedList::ShowItemsOnCurrentPage
// Il2CppName: ShowItemsOnCurrentPage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PaginatedList::*)()>(&VROSC::PaginatedList::ShowItemsOnCurrentPage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PaginatedList*), "ShowItemsOnCurrentPage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PaginatedList::UpdatePageButtons
// Il2CppName: UpdatePageButtons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PaginatedList::*)()>(&VROSC::PaginatedList::UpdatePageButtons)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PaginatedList*), "UpdatePageButtons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::PaginatedList::UnselectAll
// Il2CppName: UnselectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PaginatedList::*)()>(&VROSC::PaginatedList::UnselectAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::PaginatedList*), "UnselectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
