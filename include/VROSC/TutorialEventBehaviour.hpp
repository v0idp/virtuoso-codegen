// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.PlayableBehaviour
#include "UnityEngine/Playables/PlayableBehaviour.hpp"
// Including type: VROSC.TutorialEvent
#include "VROSC/TutorialEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: FrameData
  struct FrameData;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TutorialEventBehaviour
  class TutorialEventBehaviour;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TutorialEventBehaviour);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TutorialEventBehaviour*, "VROSC", "TutorialEventBehaviour");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TutorialEventBehaviour
  // [TokenAttribute] Offset: FFFFFFFF
  class TutorialEventBehaviour : public ::UnityEngine::Playables::PlayableBehaviour {
    public:
    public:
    // private VROSC.TutorialEvent _startEvent
    // Size: 0x4
    // Offset: 0x10
    ::VROSC::TutorialEvent startEvent;
    // Field size check
    static_assert(sizeof(::VROSC::TutorialEvent) == 0x4);
    // private VROSC.TutorialEvent _endEvent
    // Size: 0x4
    // Offset: 0x14
    ::VROSC::TutorialEvent endEvent;
    // Field size check
    static_assert(sizeof(::VROSC::TutorialEvent) == 0x4);
    public:
    // Get instance field reference: private VROSC.TutorialEvent _startEvent
    [[deprecated("Use field access instead!")]] ::VROSC::TutorialEvent& dyn__startEvent();
    // Get instance field reference: private VROSC.TutorialEvent _endEvent
    [[deprecated("Use field access instead!")]] ::VROSC::TutorialEvent& dyn__endEvent();
    // public System.Void .ctor()
    // Offset: 0xA2F398
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TutorialEventBehaviour* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TutorialEventBehaviour::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TutorialEventBehaviour*, creationType>()));
    }
    // public System.Void Setup(VROSC.TutorialEvent startEvent, VROSC.TutorialEvent endEvent)
    // Offset: 0xA2F068
    void Setup(::VROSC::TutorialEvent startEvent, ::VROSC::TutorialEvent endEvent);
    // private System.Void SentTutorialEvent(VROSC.TutorialEvent tutorialEvent)
    // Offset: 0xA2F0C0
    void SentTutorialEvent(::VROSC::TutorialEvent tutorialEvent);
    // public override System.Void OnBehaviourPlay(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info)
    // Offset: 0xA2F078
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::OnBehaviourPlay(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info)
    void OnBehaviourPlay(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info);
    // public override System.Void OnBehaviourPause(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info)
    // Offset: 0xA2F134
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::OnBehaviourPause(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info)
    void OnBehaviourPause(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info);
  }; // VROSC.TutorialEventBehaviour
  #pragma pack(pop)
  static check_size<sizeof(TutorialEventBehaviour), 20 + sizeof(::VROSC::TutorialEvent)> __VROSC_TutorialEventBehaviourSizeCheck;
  static_assert(sizeof(TutorialEventBehaviour) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TutorialEventBehaviour::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::TutorialEventBehaviour::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialEventBehaviour::*)(::VROSC::TutorialEvent, ::VROSC::TutorialEvent)>(&VROSC::TutorialEventBehaviour::Setup)> {
  static const MethodInfo* get() {
    static auto* startEvent = &::il2cpp_utils::GetClassFromName("VROSC", "TutorialEvent")->byval_arg;
    static auto* endEvent = &::il2cpp_utils::GetClassFromName("VROSC", "TutorialEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialEventBehaviour*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startEvent, endEvent});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialEventBehaviour::SentTutorialEvent
// Il2CppName: SentTutorialEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialEventBehaviour::*)(::VROSC::TutorialEvent)>(&VROSC::TutorialEventBehaviour::SentTutorialEvent)> {
  static const MethodInfo* get() {
    static auto* tutorialEvent = &::il2cpp_utils::GetClassFromName("VROSC", "TutorialEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialEventBehaviour*), "SentTutorialEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tutorialEvent});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialEventBehaviour::OnBehaviourPlay
// Il2CppName: OnBehaviourPlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialEventBehaviour::*)(::UnityEngine::Playables::Playable, ::UnityEngine::Playables::FrameData)>(&VROSC::TutorialEventBehaviour::OnBehaviourPlay)> {
  static const MethodInfo* get() {
    static auto* playable = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "Playable")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "FrameData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialEventBehaviour*), "OnBehaviourPlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playable, info});
  }
};
// Writing MetadataGetter for method: VROSC::TutorialEventBehaviour::OnBehaviourPause
// Il2CppName: OnBehaviourPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TutorialEventBehaviour::*)(::UnityEngine::Playables::Playable, ::UnityEngine::Playables::FrameData)>(&VROSC::TutorialEventBehaviour::OnBehaviourPause)> {
  static const MethodInfo* get() {
    static auto* playable = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "Playable")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "FrameData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TutorialEventBehaviour*), "OnBehaviourPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playable, info});
  }
};
