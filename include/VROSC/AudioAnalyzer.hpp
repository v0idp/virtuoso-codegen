// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.FFTWindow
#include "UnityEngine/FFTWindow.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: AudioAnalyzer
  class AudioAnalyzer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AudioAnalyzer);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AudioAnalyzer*, "VROSC", "AudioAnalyzer");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x5D
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AudioAnalyzer
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioAnalyzer : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Single[] _currentlyPlayingData
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<float> currentlyPlayingData;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private UnityEngine.AudioSource _currentlyPlayingAudioSource
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AudioSource* currentlyPlayingAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.FFTWindow _fftWindow
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::FFTWindow fftWindow;
    // Field size check
    static_assert(sizeof(::UnityEngine::FFTWindow) == 0x4);
    // Padding between fields: fftWindow and: leftMasterSamplesRaw
    char __padding2[0x4] = {};
    // private System.Single[] _leftMasterSamplesRaw
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<float> leftMasterSamplesRaw;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single[] _rightMasterSamplesRaw
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<float> rightMasterSamplesRaw;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single[] _leftPlayingSamplesRaw
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<float> leftPlayingSamplesRaw;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single[] _rightPlayingSamplesRaw
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<float> rightPlayingSamplesRaw;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single _normalizeFloor
    // Size: 0x4
    // Offset: 0x50
    float normalizeFloor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _normalizeCeiling
    // Size: 0x4
    // Offset: 0x54
    float normalizeCeiling;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _smoothingSpeed
    // Size: 0x4
    // Offset: 0x58
    float smoothingSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _masterIsMono
    // Size: 0x1
    // Offset: 0x5C
    bool masterIsMono;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private System.Single[] _monoMasterSamplesRaw
    static ::ArrayW<float> _get__monoMasterSamplesRaw();
    // Set static field: static private System.Single[] _monoMasterSamplesRaw
    static void _set__monoMasterSamplesRaw(::ArrayW<float> value);
    // Get static field: static private System.Single[] _monoMasterSamplesNormalized
    static ::ArrayW<float> _get__monoMasterSamplesNormalized();
    // Set static field: static private System.Single[] _monoMasterSamplesNormalized
    static void _set__monoMasterSamplesNormalized(::ArrayW<float> value);
    // Get static field: static private System.Single[] _monoMasterSamplesNormalizedSmoothed
    static ::ArrayW<float> _get__monoMasterSamplesNormalizedSmoothed();
    // Set static field: static private System.Single[] _monoMasterSamplesNormalizedSmoothed
    static void _set__monoMasterSamplesNormalizedSmoothed(::ArrayW<float> value);
    // Get static field: static private System.Single[] _monoPlayingSamplesRaw
    static ::ArrayW<float> _get__monoPlayingSamplesRaw();
    // Set static field: static private System.Single[] _monoPlayingSamplesRaw
    static void _set__monoPlayingSamplesRaw(::ArrayW<float> value);
    // Get static field: static private System.Single[] _monoPlayingSamplesNormalized
    static ::ArrayW<float> _get__monoPlayingSamplesNormalized();
    // Set static field: static private System.Single[] _monoPlayingSamplesNormalized
    static void _set__monoPlayingSamplesNormalized(::ArrayW<float> value);
    // Get static field: static private System.Single[] _monoPlayingSamplesNormalizedSmoothed
    static ::ArrayW<float> _get__monoPlayingSamplesNormalizedSmoothed();
    // Set static field: static private System.Single[] _monoPlayingSamplesNormalizedSmoothed
    static void _set__monoPlayingSamplesNormalizedSmoothed(::ArrayW<float> value);
    // static field const value: static public System.Int32 MaxVisualizerBands
    static constexpr const int MaxVisualizerBands = 64;
    // Get static field: static public System.Int32 MaxVisualizerBands
    static int _get_MaxVisualizerBands();
    // Set static field: static public System.Int32 MaxVisualizerBands
    static void _set_MaxVisualizerBands(int value);
    // Get static field: static private System.Single[] _cachedBands
    static ::ArrayW<float> _get__cachedBands();
    // Set static field: static private System.Single[] _cachedBands
    static void _set__cachedBands(::ArrayW<float> value);
    // Get static field: static private System.Single[] _cachedBandsPlaying
    static ::ArrayW<float> _get__cachedBandsPlaying();
    // Set static field: static private System.Single[] _cachedBandsPlaying
    static void _set__cachedBandsPlaying(::ArrayW<float> value);
    // Get static field: static private System.Boolean _hasCachedBands
    static bool _get__hasCachedBands();
    // Set static field: static private System.Boolean _hasCachedBands
    static void _set__hasCachedBands(bool value);
    // Get static field: static private System.Boolean _hasCachedBandsPlaying
    static bool _get__hasCachedBandsPlaying();
    // Set static field: static private System.Boolean _hasCachedBandsPlaying
    static void _set__hasCachedBandsPlaying(bool value);
    // Get instance field reference: private System.Single[] _currentlyPlayingData
    ::ArrayW<float>& dyn__currentlyPlayingData();
    // Get instance field reference: private UnityEngine.AudioSource _currentlyPlayingAudioSource
    ::UnityEngine::AudioSource*& dyn__currentlyPlayingAudioSource();
    // Get instance field reference: private UnityEngine.FFTWindow _fftWindow
    ::UnityEngine::FFTWindow& dyn__fftWindow();
    // Get instance field reference: private System.Single[] _leftMasterSamplesRaw
    ::ArrayW<float>& dyn__leftMasterSamplesRaw();
    // Get instance field reference: private System.Single[] _rightMasterSamplesRaw
    ::ArrayW<float>& dyn__rightMasterSamplesRaw();
    // Get instance field reference: private System.Single[] _leftPlayingSamplesRaw
    ::ArrayW<float>& dyn__leftPlayingSamplesRaw();
    // Get instance field reference: private System.Single[] _rightPlayingSamplesRaw
    ::ArrayW<float>& dyn__rightPlayingSamplesRaw();
    // Get instance field reference: private System.Single _normalizeFloor
    float& dyn__normalizeFloor();
    // Get instance field reference: private System.Single _normalizeCeiling
    float& dyn__normalizeCeiling();
    // Get instance field reference: private System.Single _smoothingSpeed
    float& dyn__smoothingSpeed();
    // Get instance field reference: private System.Boolean _masterIsMono
    bool& dyn__masterIsMono();
    // static protected System.Void RoutingDemo_GetData(System.Int32 target, System.Single[] data, System.Int32 numsamples, System.Int32 numchannels)
    // Offset: 0x136F4FC
    static void RoutingDemo_GetData(int target, ::ArrayW<float> data, int numsamples, int numchannels);
    // protected System.Void Start()
    // Offset: 0x136F5AC
    void Start();
    // protected System.Void Update()
    // Offset: 0x136F6B0
    void Update();
    // private System.Void GetSpectrumAudioSource()
    // Offset: 0x136F6B4
    void GetSpectrumAudioSource();
    // private System.Single Normalize(System.Single rawValue)
    // Offset: 0x136FADC
    float Normalize(float rawValue);
    // private System.Single Smooth(System.Single newValue, System.Single oldValue)
    // Offset: 0x136FB1C
    float Smooth(float newValue, float oldValue);
    // static public System.Single GetAmplitude(System.Single minFrequency, System.Single maxFrequency, System.Boolean currentlyPlayingOnly, System.Boolean usePeakInsteadOfAverage, System.Boolean smoothed)
    // Offset: 0x136FB60
    static float GetAmplitude(float minFrequency, float maxFrequency, bool currentlyPlayingOnly, bool usePeakInsteadOfAverage, bool smoothed);
    // static public System.Single GetAmplitude(System.Single[] samples, System.Single minFrequency, System.Single maxFrequency, System.Boolean usePeakInsteadOfAverage)
    // Offset: 0x136FC7C
    static float GetAmplitude(::ArrayW<float> samples, float minFrequency, float maxFrequency, bool usePeakInsteadOfAverage);
    // static public System.Single[] GetBands(System.Int32 numberOfBands, System.Boolean currentPlayingOnly)
    // Offset: 0x136FFE0
    static ::ArrayW<float> GetBands(int numberOfBands, bool currentPlayingOnly);
    // static private System.Int32 FrequencyToSpectrumIndex(System.Single frequency)
    // Offset: 0x136FE98
    static int FrequencyToSpectrumIndex(float frequency);
    // static private System.Single SpectrumIndexToFrequency(System.Int32 index)
    // Offset: 0x136FF4C
    static float SpectrumIndexToFrequency(int index);
    // protected System.Void OnAudioFilterRead(System.Single[] data, System.Int32 channels)
    // Offset: 0x1370354
    void OnAudioFilterRead(::ArrayW<float> data, int channels);
    // public System.Void .ctor()
    // Offset: 0x1370448
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioAnalyzer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AudioAnalyzer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioAnalyzer*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1370500
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // VROSC.AudioAnalyzer
  #pragma pack(pop)
  static check_size<sizeof(AudioAnalyzer), 92 + sizeof(bool)> __VROSC_AudioAnalyzerSizeCheck;
  static_assert(sizeof(AudioAnalyzer) == 0x5D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AudioAnalyzer::RoutingDemo_GetData
// Il2CppName: RoutingDemo_GetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ::ArrayW<float>, int, int)>(&VROSC::AudioAnalyzer::RoutingDemo_GetData)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* numsamples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* numchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioAnalyzer*), "RoutingDemo_GetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, data, numsamples, numchannels});
  }
};
// Writing MetadataGetter for method: VROSC::AudioAnalyzer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioAnalyzer::*)()>(&VROSC::AudioAnalyzer::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioAnalyzer*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioAnalyzer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioAnalyzer::*)()>(&VROSC::AudioAnalyzer::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioAnalyzer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioAnalyzer::GetSpectrumAudioSource
// Il2CppName: GetSpectrumAudioSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioAnalyzer::*)()>(&VROSC::AudioAnalyzer::GetSpectrumAudioSource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioAnalyzer*), "GetSpectrumAudioSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::AudioAnalyzer::Normalize
// Il2CppName: Normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::AudioAnalyzer::*)(float)>(&VROSC::AudioAnalyzer::Normalize)> {
  static const MethodInfo* get() {
    static auto* rawValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioAnalyzer*), "Normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rawValue});
  }
};
// Writing MetadataGetter for method: VROSC::AudioAnalyzer::Smooth
// Il2CppName: Smooth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::AudioAnalyzer::*)(float, float)>(&VROSC::AudioAnalyzer::Smooth)> {
  static const MethodInfo* get() {
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* oldValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioAnalyzer*), "Smooth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newValue, oldValue});
  }
};
// Writing MetadataGetter for method: VROSC::AudioAnalyzer::GetAmplitude
// Il2CppName: GetAmplitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, bool, bool, bool)>(&VROSC::AudioAnalyzer::GetAmplitude)> {
  static const MethodInfo* get() {
    static auto* minFrequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxFrequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* currentlyPlayingOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* usePeakInsteadOfAverage = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* smoothed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioAnalyzer*), "GetAmplitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minFrequency, maxFrequency, currentlyPlayingOnly, usePeakInsteadOfAverage, smoothed});
  }
};
// Writing MetadataGetter for method: VROSC::AudioAnalyzer::GetAmplitude
// Il2CppName: GetAmplitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::ArrayW<float>, float, float, bool)>(&VROSC::AudioAnalyzer::GetAmplitude)> {
  static const MethodInfo* get() {
    static auto* samples = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* minFrequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxFrequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* usePeakInsteadOfAverage = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioAnalyzer*), "GetAmplitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{samples, minFrequency, maxFrequency, usePeakInsteadOfAverage});
  }
};
// Writing MetadataGetter for method: VROSC::AudioAnalyzer::GetBands
// Il2CppName: GetBands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (*)(int, bool)>(&VROSC::AudioAnalyzer::GetBands)> {
  static const MethodInfo* get() {
    static auto* numberOfBands = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* currentPlayingOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioAnalyzer*), "GetBands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numberOfBands, currentPlayingOnly});
  }
};
// Writing MetadataGetter for method: VROSC::AudioAnalyzer::FrequencyToSpectrumIndex
// Il2CppName: FrequencyToSpectrumIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&VROSC::AudioAnalyzer::FrequencyToSpectrumIndex)> {
  static const MethodInfo* get() {
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioAnalyzer*), "FrequencyToSpectrumIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frequency});
  }
};
// Writing MetadataGetter for method: VROSC::AudioAnalyzer::SpectrumIndexToFrequency
// Il2CppName: SpectrumIndexToFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(int)>(&VROSC::AudioAnalyzer::SpectrumIndexToFrequency)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioAnalyzer*), "SpectrumIndexToFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: VROSC::AudioAnalyzer::OnAudioFilterRead
// Il2CppName: OnAudioFilterRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AudioAnalyzer::*)(::ArrayW<float>, int)>(&VROSC::AudioAnalyzer::OnAudioFilterRead)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioAnalyzer*), "OnAudioFilterRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, channels});
  }
};
// Writing MetadataGetter for method: VROSC::AudioAnalyzer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::AudioAnalyzer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VROSC::AudioAnalyzer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::AudioAnalyzer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
