// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Interactable
  class Interactable;
  // Forward declaring type: TutorialBlinkingUIElement
  class TutorialBlinkingUIElement;
  // Forward declaring type: TutorialEvent
  struct TutorialEvent;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: SongLibraryTutorialHelper
  class SongLibraryTutorialHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::SongLibraryTutorialHelper);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::SongLibraryTutorialHelper*, "VROSC", "SongLibraryTutorialHelper");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.SongLibraryTutorialHelper
  // [TokenAttribute] Offset: FFFFFFFF
  class SongLibraryTutorialHelper : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.Interactable[] _interactablesToDisable
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::VROSC::Interactable*> interactablesToDisable;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::Interactable*>) == 0x8);
    // private VROSC.TutorialBlinkingUIElement _saveButtonBlinker
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::TutorialBlinkingUIElement* saveButtonBlinker;
    // Field size check
    static_assert(sizeof(::VROSC::TutorialBlinkingUIElement*) == 0x8);
    // private VROSC.TutorialBlinkingUIElement _songNameBlinker
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::TutorialBlinkingUIElement* songNameBlinker;
    // Field size check
    static_assert(sizeof(::VROSC::TutorialBlinkingUIElement*) == 0x8);
    // private VROSC.TutorialBlinkingUIElement _saveAsButtonBlinker
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::TutorialBlinkingUIElement* saveAsButtonBlinker;
    // Field size check
    static_assert(sizeof(::VROSC::TutorialBlinkingUIElement*) == 0x8);
    // private VROSC.Interactable _saveButtonInteractable
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::Interactable* saveButtonInteractable;
    // Field size check
    static_assert(sizeof(::VROSC::Interactable*) == 0x8);
    // private VROSC.Interactable _songNameInteractable
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::Interactable* songNameInteractable;
    // Field size check
    static_assert(sizeof(::VROSC::Interactable*) == 0x8);
    // private VROSC.Interactable _saveAsButtonInteractable
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::Interactable* saveAsButtonInteractable;
    // Field size check
    static_assert(sizeof(::VROSC::Interactable*) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.Interactable> _disabledInteractables
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::VROSC::Interactable*>* disabledInteractables;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::Interactable*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.Interactable[] _interactablesToDisable
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::Interactable*>& dyn__interactablesToDisable();
    // Get instance field reference: private VROSC.TutorialBlinkingUIElement _saveButtonBlinker
    [[deprecated("Use field access instead!")]] ::VROSC::TutorialBlinkingUIElement*& dyn__saveButtonBlinker();
    // Get instance field reference: private VROSC.TutorialBlinkingUIElement _songNameBlinker
    [[deprecated("Use field access instead!")]] ::VROSC::TutorialBlinkingUIElement*& dyn__songNameBlinker();
    // Get instance field reference: private VROSC.TutorialBlinkingUIElement _saveAsButtonBlinker
    [[deprecated("Use field access instead!")]] ::VROSC::TutorialBlinkingUIElement*& dyn__saveAsButtonBlinker();
    // Get instance field reference: private VROSC.Interactable _saveButtonInteractable
    [[deprecated("Use field access instead!")]] ::VROSC::Interactable*& dyn__saveButtonInteractable();
    // Get instance field reference: private VROSC.Interactable _songNameInteractable
    [[deprecated("Use field access instead!")]] ::VROSC::Interactable*& dyn__songNameInteractable();
    // Get instance field reference: private VROSC.Interactable _saveAsButtonInteractable
    [[deprecated("Use field access instead!")]] ::VROSC::Interactable*& dyn__saveAsButtonInteractable();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.Interactable> _disabledInteractables
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VROSC::Interactable*>*& dyn__disabledInteractables();
    // public System.Void .ctor()
    // Offset: 0x192C8F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SongLibraryTutorialHelper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SongLibraryTutorialHelper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SongLibraryTutorialHelper*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x192BFDC
    void Start();
    // private System.Void TutorialEventTriggered(VROSC.TutorialEvent tutorialEvent)
    // Offset: 0x192C0CC
    void TutorialEventTriggered(::VROSC::TutorialEvent tutorialEvent);
    // private System.Void DisableInteractables()
    // Offset: 0x192C2A4
    void DisableInteractables();
    // private System.Void StartBlinkSaveButtons()
    // Offset: 0x192C394
    void StartBlinkSaveButtons();
    // private System.Void SaveButtonClicked(System.Boolean enabled)
    // Offset: 0x192C628
    void SaveButtonClicked(bool enabled);
    // private System.Void SongNameClicked(System.Boolean enabled)
    // Offset: 0x192C718
    void SongNameClicked(bool enabled);
    // private System.Void SaveAsButtonClicked(System.Boolean enabled)
    // Offset: 0x192C808
    void SaveAsButtonClicked(bool enabled);
    // private System.Void ResetAll()
    // Offset: 0x192C0F8
    void ResetAll();
  }; // VROSC.SongLibraryTutorialHelper
  #pragma pack(pop)
  static check_size<sizeof(SongLibraryTutorialHelper), 80 + sizeof(::System::Collections::Generic::List_1<::VROSC::Interactable*>*)> __VROSC_SongLibraryTutorialHelperSizeCheck;
  static_assert(sizeof(SongLibraryTutorialHelper) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::SongLibraryTutorialHelper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::SongLibraryTutorialHelper::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SongLibraryTutorialHelper::*)()>(&VROSC::SongLibraryTutorialHelper::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SongLibraryTutorialHelper*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SongLibraryTutorialHelper::TutorialEventTriggered
// Il2CppName: TutorialEventTriggered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SongLibraryTutorialHelper::*)(::VROSC::TutorialEvent)>(&VROSC::SongLibraryTutorialHelper::TutorialEventTriggered)> {
  static const MethodInfo* get() {
    static auto* tutorialEvent = &::il2cpp_utils::GetClassFromName("VROSC", "TutorialEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SongLibraryTutorialHelper*), "TutorialEventTriggered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tutorialEvent});
  }
};
// Writing MetadataGetter for method: VROSC::SongLibraryTutorialHelper::DisableInteractables
// Il2CppName: DisableInteractables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SongLibraryTutorialHelper::*)()>(&VROSC::SongLibraryTutorialHelper::DisableInteractables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SongLibraryTutorialHelper*), "DisableInteractables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SongLibraryTutorialHelper::StartBlinkSaveButtons
// Il2CppName: StartBlinkSaveButtons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SongLibraryTutorialHelper::*)()>(&VROSC::SongLibraryTutorialHelper::StartBlinkSaveButtons)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SongLibraryTutorialHelper*), "StartBlinkSaveButtons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SongLibraryTutorialHelper::SaveButtonClicked
// Il2CppName: SaveButtonClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SongLibraryTutorialHelper::*)(bool)>(&VROSC::SongLibraryTutorialHelper::SaveButtonClicked)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SongLibraryTutorialHelper*), "SaveButtonClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled});
  }
};
// Writing MetadataGetter for method: VROSC::SongLibraryTutorialHelper::SongNameClicked
// Il2CppName: SongNameClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SongLibraryTutorialHelper::*)(bool)>(&VROSC::SongLibraryTutorialHelper::SongNameClicked)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SongLibraryTutorialHelper*), "SongNameClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled});
  }
};
// Writing MetadataGetter for method: VROSC::SongLibraryTutorialHelper::SaveAsButtonClicked
// Il2CppName: SaveAsButtonClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SongLibraryTutorialHelper::*)(bool)>(&VROSC::SongLibraryTutorialHelper::SaveAsButtonClicked)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SongLibraryTutorialHelper*), "SaveAsButtonClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled});
  }
};
// Writing MetadataGetter for method: VROSC::SongLibraryTutorialHelper::ResetAll
// Il2CppName: ResetAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SongLibraryTutorialHelper::*)()>(&VROSC::SongLibraryTutorialHelper::ResetAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SongLibraryTutorialHelper*), "ResetAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
