// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopPlayer
  class LoopPlayer;
  // Forward declaring type: LoopStationGroupHandler
  class LoopStationGroupHandler;
  // Forward declaring type: LoopStationGroupMover
  class LoopStationGroupMover;
  // Forward declaring type: LoopListArranger
  class LoopListArranger;
  // Forward declaring type: LoopStationGroupUI
  class LoopStationGroupUI;
  // Forward declaring type: InteractionDisabler
  class InteractionDisabler;
  // Forward declaring type: LoopStation
  class LoopStation;
  // Forward declaring type: LoopPlaybackConfigOverride
  class LoopPlaybackConfigOverride;
  // Forward declaring type: TransformDataController
  class TransformDataController;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: RectTransform
  class RectTransform;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopStationGroup
  class LoopStationGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::LoopStationGroup);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LoopStationGroup*, "VROSC", "LoopStationGroup");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.LoopStationGroup
  // [TokenAttribute] Offset: FFFFFFFF
  class LoopStationGroup : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::LoopStationGroup::SetupVariables
    struct SetupVariables;
    public:
    // private System.Int32 <RowInAutoArrange>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int RowInAutoArrange;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: RowInAutoArrange and: GroupID
    char __padding0[0x4] = {};
    // private System.String <GroupID>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW GroupID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.LoopPlayer> <LoopPlayers>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::VROSC::LoopPlayer*>* LoopPlayers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::LoopPlayer*>*) == 0x8);
    // private VROSC.LoopStationGroupHandler <Handler>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::LoopStationGroupHandler* Handler;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationGroupHandler*) == 0x8);
    // private UnityEngine.Collider _dropZone
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Collider* dropZone;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // private UnityEngine.Transform _loopsParent
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* loopsParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.RectTransform _menuRect
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::RectTransform* menuRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _dimensions
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::RectTransform* dimensions;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private VROSC.LoopStationGroupMover _autoMover
    // Size: 0x8
    // Offset: 0x58
    ::VROSC::LoopStationGroupMover* autoMover;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationGroupMover*) == 0x8);
    // private VROSC.LoopListArranger _arranger
    // Size: 0x8
    // Offset: 0x60
    ::VROSC::LoopListArranger* arranger;
    // Field size check
    static_assert(sizeof(::VROSC::LoopListArranger*) == 0x8);
    // private VROSC.LoopStationGroupUI _ui
    // Size: 0x8
    // Offset: 0x68
    ::VROSC::LoopStationGroupUI* ui;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationGroupUI*) == 0x8);
    // private VROSC.InteractionDisabler _disabler
    // Size: 0x8
    // Offset: 0x70
    ::VROSC::InteractionDisabler* disabler;
    // Field size check
    static_assert(sizeof(::VROSC::InteractionDisabler*) == 0x8);
    // public System.Action`2<VROSC.LoopStationGroup,System.Boolean> OnGroupRemoved
    // Size: 0x8
    // Offset: 0x78
    ::System::Action_2<::VROSC::LoopStationGroup*, bool>* OnGroupRemoved;
    // Field size check
    static_assert(sizeof(::System::Action_2<::VROSC::LoopStationGroup*, bool>*) == 0x8);
    // public System.Action`1<VROSC.LoopPlayer> OnLoopAdded
    // Size: 0x8
    // Offset: 0x80
    ::System::Action_1<::VROSC::LoopPlayer*>* OnLoopAdded;
    // Field size check
    static_assert(sizeof(::System::Action_1<::VROSC::LoopPlayer*>*) == 0x8);
    // public System.Action`1<VROSC.LoopPlayer> OnLoopRemoved
    // Size: 0x8
    // Offset: 0x88
    ::System::Action_1<::VROSC::LoopPlayer*>* OnLoopRemoved;
    // Field size check
    static_assert(sizeof(::System::Action_1<::VROSC::LoopPlayer*>*) == 0x8);
    // public System.Action OnGroupSizeChanged
    // Size: 0x8
    // Offset: 0x90
    ::System::Action* OnGroupSizeChanged;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Action`2<VROSC.LoopStationGroup,System.Boolean> OnSoloChanged
    // Size: 0x8
    // Offset: 0x98
    ::System::Action_2<::VROSC::LoopStationGroup*, bool>* OnSoloChanged;
    // Field size check
    static_assert(sizeof(::System::Action_2<::VROSC::LoopStationGroup*, bool>*) == 0x8);
    // protected VROSC.LoopStation _loopStation
    // Size: 0x8
    // Offset: 0xA0
    ::VROSC::LoopStation* loopStation;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStation*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public UnityEngine.Color DefaultGroupColor
    static ::UnityEngine::Color _get_DefaultGroupColor();
    // Set static field: static public UnityEngine.Color DefaultGroupColor
    static void _set_DefaultGroupColor(::UnityEngine::Color value);
    // Get instance field reference: private System.Int32 <RowInAutoArrange>k__BackingField
    [[deprecated]] int& dyn_$RowInAutoArrange$k__BackingField();
    // Get instance field reference: private System.String <GroupID>k__BackingField
    [[deprecated]] ::StringW& dyn_$GroupID$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.LoopPlayer> <LoopPlayers>k__BackingField
    [[deprecated]] ::System::Collections::Generic::List_1<::VROSC::LoopPlayer*>*& dyn_$LoopPlayers$k__BackingField();
    // Get instance field reference: private VROSC.LoopStationGroupHandler <Handler>k__BackingField
    [[deprecated]] ::VROSC::LoopStationGroupHandler*& dyn_$Handler$k__BackingField();
    // Get instance field reference: private UnityEngine.Collider _dropZone
    [[deprecated]] ::UnityEngine::Collider*& dyn__dropZone();
    // Get instance field reference: private UnityEngine.Transform _loopsParent
    [[deprecated]] ::UnityEngine::Transform*& dyn__loopsParent();
    // Get instance field reference: private UnityEngine.RectTransform _menuRect
    [[deprecated]] ::UnityEngine::RectTransform*& dyn__menuRect();
    // Get instance field reference: private UnityEngine.RectTransform _dimensions
    [[deprecated]] ::UnityEngine::RectTransform*& dyn__dimensions();
    // Get instance field reference: private VROSC.LoopStationGroupMover _autoMover
    [[deprecated]] ::VROSC::LoopStationGroupMover*& dyn__autoMover();
    // Get instance field reference: private VROSC.LoopListArranger _arranger
    [[deprecated]] ::VROSC::LoopListArranger*& dyn__arranger();
    // Get instance field reference: private VROSC.LoopStationGroupUI _ui
    [[deprecated]] ::VROSC::LoopStationGroupUI*& dyn__ui();
    // Get instance field reference: private VROSC.InteractionDisabler _disabler
    [[deprecated]] ::VROSC::InteractionDisabler*& dyn__disabler();
    // Get instance field reference: public System.Action`2<VROSC.LoopStationGroup,System.Boolean> OnGroupRemoved
    [[deprecated]] ::System::Action_2<::VROSC::LoopStationGroup*, bool>*& dyn_OnGroupRemoved();
    // Get instance field reference: public System.Action`1<VROSC.LoopPlayer> OnLoopAdded
    [[deprecated]] ::System::Action_1<::VROSC::LoopPlayer*>*& dyn_OnLoopAdded();
    // Get instance field reference: public System.Action`1<VROSC.LoopPlayer> OnLoopRemoved
    [[deprecated]] ::System::Action_1<::VROSC::LoopPlayer*>*& dyn_OnLoopRemoved();
    // Get instance field reference: public System.Action OnGroupSizeChanged
    [[deprecated]] ::System::Action*& dyn_OnGroupSizeChanged();
    // Get instance field reference: public System.Action`2<VROSC.LoopStationGroup,System.Boolean> OnSoloChanged
    [[deprecated]] ::System::Action_2<::VROSC::LoopStationGroup*, bool>*& dyn_OnSoloChanged();
    // Get instance field reference: protected VROSC.LoopStation _loopStation
    [[deprecated]] ::VROSC::LoopStation*& dyn__loopStation();
    // public UnityEngine.RectTransform get_Dimensions()
    // Offset: 0x196E504
    ::UnityEngine::RectTransform* get_Dimensions();
    // public System.Int32 get_RowInAutoArrange()
    // Offset: 0x196E50C
    int get_RowInAutoArrange();
    // public System.Void set_RowInAutoArrange(System.Int32 value)
    // Offset: 0x196E514
    void set_RowInAutoArrange(int value);
    // public System.String get_GroupID()
    // Offset: 0x196E524
    ::StringW get_GroupID();
    // private System.Void set_GroupID(System.String value)
    // Offset: 0x196E51C
    void set_GroupID(::StringW value);
    // public System.Collections.Generic.List`1<VROSC.LoopPlayer> get_LoopPlayers()
    // Offset: 0x196E52C
    ::System::Collections::Generic::List_1<::VROSC::LoopPlayer*>* get_LoopPlayers();
    // private System.Void set_LoopPlayers(System.Collections.Generic.List`1<VROSC.LoopPlayer> value)
    // Offset: 0x196E534
    void set_LoopPlayers(::System::Collections::Generic::List_1<::VROSC::LoopPlayer*>* value);
    // public VROSC.LoopStationGroupHandler get_Handler()
    // Offset: 0x196E53C
    ::VROSC::LoopStationGroupHandler* get_Handler();
    // private System.Void set_Handler(VROSC.LoopStationGroupHandler value)
    // Offset: 0x196E544
    void set_Handler(::VROSC::LoopStationGroupHandler* value);
    // public UnityEngine.Collider get_DropZone()
    // Offset: 0x196E54C
    ::UnityEngine::Collider* get_DropZone();
    // public System.Int32 get_Loops()
    // Offset: 0x196E554
    int get_Loops();
    // public System.Boolean get_IsEmpty()
    // Offset: 0x196E5A0
    bool get_IsEmpty();
    // public System.Single get_Volume()
    // Offset: 0x1968E08
    float get_Volume();
    // public System.Boolean get_IsMuted()
    // Offset: 0x196E61C
    bool get_IsMuted();
    // public VROSC.LoopStationGroupMover get_AutoMover()
    // Offset: 0x196E65C
    ::VROSC::LoopStationGroupMover* get_AutoMover();
    // public VROSC.LoopPlaybackConfigOverride get_PlaybackConfig()
    // Offset: 0x196E664
    ::VROSC::LoopPlaybackConfigOverride* get_PlaybackConfig();
    // public System.Boolean get_LoopsCanOnlyBeRearranged()
    // Offset: 0x196E6A8
    bool get_LoopsCanOnlyBeRearranged();
    // public System.Void Setup(VROSC.LoopStation loopStation, VROSC.LoopStationGroupHandler handler, VROSC.LoopStationGroup/VROSC.SetupVariables vars)
    // Offset: 0x196E6C4
    void Setup(::VROSC::LoopStation* loopStation, ::VROSC::LoopStationGroupHandler* handler, ::VROSC::LoopStationGroup::SetupVariables vars);
    // public System.Void SetAutoSorted(System.Boolean autoSorted)
    // Offset: 0x196E890
    void SetAutoSorted(bool autoSorted);
    // public System.Void SetInteractableDuringAnimation(System.Boolean interactable)
    // Offset: 0x196E894
    void SetInteractableDuringAnimation(bool interactable);
    // public System.Void OnDestroy()
    // Offset: 0x196EA04
    void OnDestroy();
    // public System.Void SetHovering(VROSC.LoopPlayer hoveringPlayer)
    // Offset: 0x196EB20
    void SetHovering(::VROSC::LoopPlayer* hoveringPlayer);
    // public System.Void SetVolumeOfGroup(System.Single volume)
    // Offset: 0x19685F8
    void SetVolumeOfGroup(float volume);
    // public System.Void AddLoop(VROSC.LoopPlayer newPlayer, System.Boolean considerPosition)
    // Offset: 0x196835C
    void AddLoop(::VROSC::LoopPlayer* newPlayer, bool considerPosition);
    // public System.Void AddLoopByLoad(VROSC.LoopPlayer newPlayer, System.Int32 position)
    // Offset: 0x196ED78
    void AddLoopByLoad(::VROSC::LoopPlayer* newPlayer, int position);
    // private System.Void AddLoopShared(VROSC.LoopPlayer newPlayer, System.Int32 position)
    // Offset: 0x196EC50
    void AddLoopShared(::VROSC::LoopPlayer* newPlayer, int position);
    // public System.Void OnLoadComplete()
    // Offset: 0x196ED7C
    void OnLoadComplete();
    // private System.Void OnLoopDeleted(VROSC.LoopPlayer loopPlayer, System.Boolean fromReset)
    // Offset: 0x196EDAC
    void OnLoopDeleted(::VROSC::LoopPlayer* loopPlayer, bool fromReset);
    // public System.Void RemoveLoop(VROSC.LoopPlayer loopPlayer, System.Boolean byGrab, System.Boolean fromReset)
    // Offset: 0x196EDC0
    void RemoveLoop(::VROSC::LoopPlayer* loopPlayer, bool byGrab, bool fromReset);
    // public System.Void UpdateSize()
    // Offset: 0x196EB54
    void UpdateSize();
    // public System.Void SaveGroupPosition()
    // Offset: 0x196EE90
    void SaveGroupPosition();
    // public System.Boolean HasTrack(System.String trackId)
    // Offset: 0x196EF20
    bool HasTrack(::StringW trackId);
    // public System.Void UpdateGroupVisibility(System.Boolean byGrab)
    // Offset: 0x196F080
    void UpdateGroupVisibility(bool byGrab);
    // public UnityEngine.Vector3 GetLooperPositionByOrderInList(System.Int32 order)
    // Offset: 0x196F0C0
    ::UnityEngine::Vector3 GetLooperPositionByOrderInList(int order);
    // public VROSC.LoopPlayer GetFirstLoop()
    // Offset: 0x196F0DC
    ::VROSC::LoopPlayer* GetFirstLoop();
    // public VROSC.LoopPlayer GetLoopPlayerWithLongestLoop()
    // Offset: 0x196F14C
    ::VROSC::LoopPlayer* GetLoopPlayerWithLongestLoop();
    // System.Void LoadLaunchPad(System.String padID, VROSC.TransformDataController transformData)
    // Offset: 0x196F288
    void LoadLaunchPad(::StringW padID, ::VROSC::TransformDataController* transformData);
    // public System.Void .ctor()
    // Offset: 0x196F2C4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoopStationGroup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::LoopStationGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoopStationGroup*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x196F33C
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // VROSC.LoopStationGroup
  #pragma pack(pop)
  static check_size<sizeof(LoopStationGroup), 160 + sizeof(::VROSC::LoopStation*)> __VROSC_LoopStationGroupSizeCheck;
  static_assert(sizeof(LoopStationGroup) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::LoopStationGroup::get_Dimensions
// Il2CppName: get_Dimensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::get_Dimensions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "get_Dimensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::get_RowInAutoArrange
// Il2CppName: get_RowInAutoArrange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::get_RowInAutoArrange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "get_RowInAutoArrange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::set_RowInAutoArrange
// Il2CppName: set_RowInAutoArrange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)(int)>(&VROSC::LoopStationGroup::set_RowInAutoArrange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "set_RowInAutoArrange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::get_GroupID
// Il2CppName: get_GroupID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::get_GroupID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "get_GroupID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::set_GroupID
// Il2CppName: set_GroupID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)(::StringW)>(&VROSC::LoopStationGroup::set_GroupID)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "set_GroupID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::get_LoopPlayers
// Il2CppName: get_LoopPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::VROSC::LoopPlayer*>* (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::get_LoopPlayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "get_LoopPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::set_LoopPlayers
// Il2CppName: set_LoopPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)(::System::Collections::Generic::List_1<::VROSC::LoopPlayer*>*)>(&VROSC::LoopStationGroup::set_LoopPlayers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "set_LoopPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::get_Handler
// Il2CppName: get_Handler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopStationGroupHandler* (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::get_Handler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "get_Handler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::set_Handler
// Il2CppName: set_Handler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)(::VROSC::LoopStationGroupHandler*)>(&VROSC::LoopStationGroup::set_Handler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStationGroupHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "set_Handler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::get_DropZone
// Il2CppName: get_DropZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider* (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::get_DropZone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "get_DropZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::get_Loops
// Il2CppName: get_Loops
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::get_Loops)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "get_Loops", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::get_IsEmpty
// Il2CppName: get_IsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::get_IsEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "get_IsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::get_Volume
// Il2CppName: get_Volume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::get_Volume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "get_Volume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::get_IsMuted
// Il2CppName: get_IsMuted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::get_IsMuted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "get_IsMuted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::get_AutoMover
// Il2CppName: get_AutoMover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopStationGroupMover* (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::get_AutoMover)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "get_AutoMover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::get_PlaybackConfig
// Il2CppName: get_PlaybackConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlaybackConfigOverride* (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::get_PlaybackConfig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "get_PlaybackConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::get_LoopsCanOnlyBeRearranged
// Il2CppName: get_LoopsCanOnlyBeRearranged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::get_LoopsCanOnlyBeRearranged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "get_LoopsCanOnlyBeRearranged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)(::VROSC::LoopStation*, ::VROSC::LoopStationGroupHandler*, ::VROSC::LoopStationGroup::SetupVariables)>(&VROSC::LoopStationGroup::Setup)> {
  static const MethodInfo* get() {
    static auto* loopStation = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStation")->byval_arg;
    static auto* handler = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStationGroupHandler")->byval_arg;
    static auto* vars = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStationGroup/SetupVariables")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopStation, handler, vars});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::SetAutoSorted
// Il2CppName: SetAutoSorted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)(bool)>(&VROSC::LoopStationGroup::SetAutoSorted)> {
  static const MethodInfo* get() {
    static auto* autoSorted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "SetAutoSorted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{autoSorted});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::SetInteractableDuringAnimation
// Il2CppName: SetInteractableDuringAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)(bool)>(&VROSC::LoopStationGroup::SetInteractableDuringAnimation)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "SetInteractableDuringAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::SetHovering
// Il2CppName: SetHovering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)(::VROSC::LoopPlayer*)>(&VROSC::LoopStationGroup::SetHovering)> {
  static const MethodInfo* get() {
    static auto* hoveringPlayer = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "SetHovering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hoveringPlayer});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::SetVolumeOfGroup
// Il2CppName: SetVolumeOfGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)(float)>(&VROSC::LoopStationGroup::SetVolumeOfGroup)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "SetVolumeOfGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::AddLoop
// Il2CppName: AddLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)(::VROSC::LoopPlayer*, bool)>(&VROSC::LoopStationGroup::AddLoop)> {
  static const MethodInfo* get() {
    static auto* newPlayer = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayer")->byval_arg;
    static auto* considerPosition = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "AddLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPlayer, considerPosition});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::AddLoopByLoad
// Il2CppName: AddLoopByLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)(::VROSC::LoopPlayer*, int)>(&VROSC::LoopStationGroup::AddLoopByLoad)> {
  static const MethodInfo* get() {
    static auto* newPlayer = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayer")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "AddLoopByLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPlayer, position});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::AddLoopShared
// Il2CppName: AddLoopShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)(::VROSC::LoopPlayer*, int)>(&VROSC::LoopStationGroup::AddLoopShared)> {
  static const MethodInfo* get() {
    static auto* newPlayer = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayer")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "AddLoopShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPlayer, position});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::OnLoadComplete
// Il2CppName: OnLoadComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::OnLoadComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "OnLoadComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::OnLoopDeleted
// Il2CppName: OnLoopDeleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)(::VROSC::LoopPlayer*, bool)>(&VROSC::LoopStationGroup::OnLoopDeleted)> {
  static const MethodInfo* get() {
    static auto* loopPlayer = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayer")->byval_arg;
    static auto* fromReset = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "OnLoopDeleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopPlayer, fromReset});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::RemoveLoop
// Il2CppName: RemoveLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)(::VROSC::LoopPlayer*, bool, bool)>(&VROSC::LoopStationGroup::RemoveLoop)> {
  static const MethodInfo* get() {
    static auto* loopPlayer = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayer")->byval_arg;
    static auto* byGrab = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* fromReset = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "RemoveLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopPlayer, byGrab, fromReset});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::UpdateSize
// Il2CppName: UpdateSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::UpdateSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "UpdateSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::SaveGroupPosition
// Il2CppName: SaveGroupPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::SaveGroupPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "SaveGroupPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::HasTrack
// Il2CppName: HasTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopStationGroup::*)(::StringW)>(&VROSC::LoopStationGroup::HasTrack)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "HasTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::UpdateGroupVisibility
// Il2CppName: UpdateGroupVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)(bool)>(&VROSC::LoopStationGroup::UpdateGroupVisibility)> {
  static const MethodInfo* get() {
    static auto* byGrab = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "UpdateGroupVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{byGrab});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::GetLooperPositionByOrderInList
// Il2CppName: GetLooperPositionByOrderInList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::LoopStationGroup::*)(int)>(&VROSC::LoopStationGroup::GetLooperPositionByOrderInList)> {
  static const MethodInfo* get() {
    static auto* order = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "GetLooperPositionByOrderInList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{order});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::GetFirstLoop
// Il2CppName: GetFirstLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlayer* (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::GetFirstLoop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "GetFirstLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::GetLoopPlayerWithLongestLoop
// Il2CppName: GetLoopPlayerWithLongestLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlayer* (VROSC::LoopStationGroup::*)()>(&VROSC::LoopStationGroup::GetLoopPlayerWithLongestLoop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "GetLoopPlayerWithLongestLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::LoadLaunchPad
// Il2CppName: LoadLaunchPad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationGroup::*)(::StringW, ::VROSC::TransformDataController*)>(&VROSC::LoopStationGroup::LoadLaunchPad)> {
  static const MethodInfo* get() {
    static auto* padID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* transformData = &::il2cpp_utils::GetClassFromName("VROSC", "TransformDataController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), "LoadLaunchPad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{padID, transformData});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::LoopStationGroup::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VROSC::LoopStationGroup::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationGroup*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
