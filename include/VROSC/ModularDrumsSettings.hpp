// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.InstrumentSettings
#include "VROSC/InstrumentSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ModularDrumsSettings
  class ModularDrumsSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ModularDrumsSettings);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ModularDrumsSettings*, "VROSC", "ModularDrumsSettings");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ModularDrumsSettings
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: 77F9B0
  class ModularDrumsSettings : public ::VROSC::InstrumentSettings {
    public:
    public:
    // [HeaderAttribute] Offset: 0x785E84
    // private System.Single _reverbAmount
    // Size: 0x4
    // Offset: 0x58
    float reverbAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _reverbLength
    // Size: 0x4
    // Offset: 0x5C
    float reverbLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _dryVolume
    // Size: 0x4
    // Offset: 0x60
    float dryVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _compression
    // Size: 0x4
    // Offset: 0x64
    float compression;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Single _reverbAmount
    [[deprecated]] float& dyn__reverbAmount();
    // Get instance field reference: private System.Single _reverbLength
    [[deprecated]] float& dyn__reverbLength();
    // Get instance field reference: private System.Single _dryVolume
    [[deprecated]] float& dyn__dryVolume();
    // Get instance field reference: private System.Single _compression
    [[deprecated]] float& dyn__compression();
    // public System.Single get_ReverbAmount()
    // Offset: 0xACCCA8
    float get_ReverbAmount();
    // public System.Single get_ReverbLength()
    // Offset: 0xACCCB0
    float get_ReverbLength();
    // public System.Single get_DryVolume()
    // Offset: 0xACCCB8
    float get_DryVolume();
    // public System.Single get_Compression()
    // Offset: 0xACCCC0
    float get_Compression();
    // public System.Void .ctor()
    // Offset: 0xACCCC8
    // Implemented from: VROSC.InstrumentSettings
    // Base method: System.Void InstrumentSettings::.ctor()
    // Base method: System.Void WidgetSettings::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ModularDrumsSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ModularDrumsSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ModularDrumsSettings*, creationType>()));
    }
  }; // VROSC.ModularDrumsSettings
  #pragma pack(pop)
  static check_size<sizeof(ModularDrumsSettings), 100 + sizeof(float)> __VROSC_ModularDrumsSettingsSizeCheck;
  static_assert(sizeof(ModularDrumsSettings) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ModularDrumsSettings::get_ReverbAmount
// Il2CppName: get_ReverbAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::ModularDrumsSettings::*)()>(&VROSC::ModularDrumsSettings::get_ReverbAmount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsSettings*), "get_ReverbAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsSettings::get_ReverbLength
// Il2CppName: get_ReverbLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::ModularDrumsSettings::*)()>(&VROSC::ModularDrumsSettings::get_ReverbLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsSettings*), "get_ReverbLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsSettings::get_DryVolume
// Il2CppName: get_DryVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::ModularDrumsSettings::*)()>(&VROSC::ModularDrumsSettings::get_DryVolume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsSettings*), "get_DryVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsSettings::get_Compression
// Il2CppName: get_Compression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::ModularDrumsSettings::*)()>(&VROSC::ModularDrumsSettings::get_Compression)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsSettings*), "get_Compression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
