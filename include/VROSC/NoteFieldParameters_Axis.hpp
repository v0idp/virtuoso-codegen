// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.NoteFieldParameters
#include "VROSC/NoteFieldParameters.hpp"
// Including type: VROSC.NoteBoard
#include "VROSC/NoteBoard.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::NoteFieldParameters::Axis);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::NoteFieldParameters::Axis*, "VROSC", "NoteFieldParameters/Axis");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.NoteFieldParameters/VROSC.Axis
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteFieldParameters::Axis : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 <FieldCount>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int FieldCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: FieldCount and: ValidNotes
    char __padding0[0x4] = {};
    // private System.Collections.Generic.List`1<System.Int32> <ValidNotes>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<int>* ValidNotes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 <FieldCount>k__BackingField
    [[deprecated]] int& dyn_$FieldCount$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> <ValidNotes>k__BackingField
    [[deprecated]] ::System::Collections::Generic::List_1<int>*& dyn_$ValidNotes$k__BackingField();
    // public System.Int32 get_FieldCount()
    // Offset: 0x1966D3C
    int get_FieldCount();
    // private System.Void set_FieldCount(System.Int32 value)
    // Offset: 0x1966D34
    void set_FieldCount(int value);
    // public System.Collections.Generic.List`1<System.Int32> get_ValidNotes()
    // Offset: 0x1966D4C
    ::System::Collections::Generic::List_1<int>* get_ValidNotes();
    // private System.Void set_ValidNotes(System.Collections.Generic.List`1<System.Int32> value)
    // Offset: 0x1966D44
    void set_ValidNotes(::System::Collections::Generic::List_1<int>* value);
    // public System.Void .ctor(System.Int32 fieldCount)
    // Offset: 0x1966CA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteFieldParameters::Axis* New_ctor(int fieldCount) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldParameters::Axis::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteFieldParameters::Axis*, creationType>(fieldCount)));
    }
    // public System.Void SetCount(System.Int32 count)
    // Offset: 0x1966D54
    void SetCount(int count);
    // public System.Void SetValidNotes(System.Collections.Generic.List`1<System.Int32> validNotes)
    // Offset: 0x1966D5C
    void SetValidNotes(::System::Collections::Generic::List_1<int>* validNotes);
    // public System.Void FindValidNotes(VROSC.NoteBoard/VROSC.NoteAxis noteAxis)
    // Offset: 0x1966D64
    void FindValidNotes(::VROSC::NoteBoard::NoteAxis* noteAxis);
  }; // VROSC.NoteFieldParameters/VROSC.Axis
  #pragma pack(pop)
  static check_size<sizeof(NoteFieldParameters::Axis), 24 + sizeof(::System::Collections::Generic::List_1<int>*)> __VROSC_NoteFieldParameters_AxisSizeCheck;
  static_assert(sizeof(NoteFieldParameters::Axis) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::NoteFieldParameters::Axis::get_FieldCount
// Il2CppName: get_FieldCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::NoteFieldParameters::Axis::*)()>(&VROSC::NoteFieldParameters::Axis::get_FieldCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldParameters::Axis*), "get_FieldCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldParameters::Axis::set_FieldCount
// Il2CppName: set_FieldCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldParameters::Axis::*)(int)>(&VROSC::NoteFieldParameters::Axis::set_FieldCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldParameters::Axis*), "set_FieldCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldParameters::Axis::get_ValidNotes
// Il2CppName: get_ValidNotes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<int>* (VROSC::NoteFieldParameters::Axis::*)()>(&VROSC::NoteFieldParameters::Axis::get_ValidNotes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldParameters::Axis*), "get_ValidNotes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldParameters::Axis::set_ValidNotes
// Il2CppName: set_ValidNotes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldParameters::Axis::*)(::System::Collections::Generic::List_1<int>*)>(&VROSC::NoteFieldParameters::Axis::set_ValidNotes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldParameters::Axis*), "set_ValidNotes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldParameters::Axis::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::NoteFieldParameters::Axis::SetCount
// Il2CppName: SetCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldParameters::Axis::*)(int)>(&VROSC::NoteFieldParameters::Axis::SetCount)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldParameters::Axis*), "SetCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldParameters::Axis::SetValidNotes
// Il2CppName: SetValidNotes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldParameters::Axis::*)(::System::Collections::Generic::List_1<int>*)>(&VROSC::NoteFieldParameters::Axis::SetValidNotes)> {
  static const MethodInfo* get() {
    static auto* validNotes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldParameters::Axis*), "SetValidNotes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{validNotes});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldParameters::Axis::FindValidNotes
// Il2CppName: FindValidNotes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldParameters::Axis::*)(::VROSC::NoteBoard::NoteAxis*)>(&VROSC::NoteFieldParameters::Axis::FindValidNotes)> {
  static const MethodInfo* get() {
    static auto* noteAxis = &::il2cpp_utils::GetClassFromName("VROSC", "NoteBoard/NoteAxis")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldParameters::Axis*), "FindValidNotes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteAxis});
  }
};
