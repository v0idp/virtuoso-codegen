// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.SignalNode
#include "VROSC/SignalNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Signal
  class Signal;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: InvertSignal
  class InvertSignal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::InvertSignal);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::InvertSignal*, "VROSC", "InvertSignal");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.InvertSignal
  // [TokenAttribute] Offset: FFFFFFFF
  class InvertSignal : public ::VROSC::SignalNode {
    public:
    public:
    // private VROSC.Signal _signal
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::Signal* signal;
    // Field size check
    static_assert(sizeof(::VROSC::Signal*) == 0x8);
    public:
    // Get instance field reference: private VROSC.Signal _signal
    [[deprecated("Use field access instead!")]] ::VROSC::Signal*& dyn__signal();
    // public System.Void .ctor()
    // Offset: 0x194B21C
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InvertSignal* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::InvertSignal::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InvertSignal*, creationType>()));
    }
    // protected override System.Void LateUpdate()
    // Offset: 0x194B198
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::LateUpdate()
    void LateUpdate();
    // public override System.Void ReceiveSignal(VROSC.Signal signal)
    // Offset: 0x194B1F4
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::ReceiveSignal(VROSC.Signal signal)
    void ReceiveSignal(::VROSC::Signal* signal);
  }; // VROSC.InvertSignal
  #pragma pack(pop)
  static check_size<sizeof(InvertSignal), 64 + sizeof(::VROSC::Signal*)> __VROSC_InvertSignalSizeCheck;
  static_assert(sizeof(InvertSignal) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::InvertSignal::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::InvertSignal::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InvertSignal::*)()>(&VROSC::InvertSignal::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InvertSignal*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InvertSignal::ReceiveSignal
// Il2CppName: ReceiveSignal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InvertSignal::*)(::VROSC::Signal*)>(&VROSC::InvertSignal::ReceiveSignal)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InvertSignal*), "ReceiveSignal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
