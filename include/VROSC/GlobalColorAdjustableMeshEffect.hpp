// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.AdjustableMeshEffect
#include "VROSC/AdjustableMeshEffect.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: GlobalColorAdjustableMeshEffect
  class GlobalColorAdjustableMeshEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::GlobalColorAdjustableMeshEffect);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::GlobalColorAdjustableMeshEffect*, "VROSC", "GlobalColorAdjustableMeshEffect");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.GlobalColorAdjustableMeshEffect
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class GlobalColorAdjustableMeshEffect : public ::VROSC::AdjustableMeshEffect {
    public:
    // Nested type: ::VROSC::GlobalColorAdjustableMeshEffect::Channel
    struct Channel;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel
    // [TokenAttribute] Offset: FFFFFFFF
    struct Channel/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Channel
      constexpr Channel(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel1
      static constexpr const int Channel1 = 0;
      // Get static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel1
      static ::VROSC::GlobalColorAdjustableMeshEffect::Channel _get_Channel1();
      // Set static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel1
      static void _set_Channel1(::VROSC::GlobalColorAdjustableMeshEffect::Channel value);
      // static field const value: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel2
      static constexpr const int Channel2 = 1;
      // Get static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel2
      static ::VROSC::GlobalColorAdjustableMeshEffect::Channel _get_Channel2();
      // Set static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel2
      static void _set_Channel2(::VROSC::GlobalColorAdjustableMeshEffect::Channel value);
      // static field const value: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel3
      static constexpr const int Channel3 = 2;
      // Get static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel3
      static ::VROSC::GlobalColorAdjustableMeshEffect::Channel _get_Channel3();
      // Set static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel3
      static void _set_Channel3(::VROSC::GlobalColorAdjustableMeshEffect::Channel value);
      // static field const value: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel4
      static constexpr const int Channel4 = 3;
      // Get static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel4
      static ::VROSC::GlobalColorAdjustableMeshEffect::Channel _get_Channel4();
      // Set static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel Channel4
      static void _set_Channel4(::VROSC::GlobalColorAdjustableMeshEffect::Channel value);
      // static field const value: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel None
      static constexpr const int None = 4;
      // Get static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel None
      static ::VROSC::GlobalColorAdjustableMeshEffect::Channel _get_None();
      // Set static field: static public VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel None
      static void _set_None(::VROSC::GlobalColorAdjustableMeshEffect::Channel value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated]] int& dyn_value__();
    }; // VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel
    #pragma pack(pop)
    static check_size<sizeof(GlobalColorAdjustableMeshEffect::Channel), 0 + sizeof(int)> __VROSC_GlobalColorAdjustableMeshEffect_ChannelSizeCheck;
    static_assert(sizeof(GlobalColorAdjustableMeshEffect::Channel) == 0x4);
    public:
    // private VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel _channel
    // Size: 0x4
    // Offset: 0x20
    ::VROSC::GlobalColorAdjustableMeshEffect::Channel channel;
    // Field size check
    static_assert(sizeof(::VROSC::GlobalColorAdjustableMeshEffect::Channel) == 0x4);
    // private System.Boolean _setColor
    // Size: 0x1
    // Offset: 0x24
    bool setColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: setColor and: color
    char __padding1[0x3] = {};
    // private UnityEngine.Color _color
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Vector2[] _uv
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Vector2> uv;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    public:
    // Get instance field reference: private VROSC.GlobalColorAdjustableMeshEffect/VROSC.Channel _channel
    [[deprecated]] ::VROSC::GlobalColorAdjustableMeshEffect::Channel& dyn__channel();
    // Get instance field reference: private System.Boolean _setColor
    [[deprecated]] bool& dyn__setColor();
    // Get instance field reference: private UnityEngine.Color _color
    [[deprecated]] ::UnityEngine::Color& dyn__color();
    // Get instance field reference: private UnityEngine.Vector2[] _uv
    [[deprecated]] ::ArrayW<::UnityEngine::Vector2>& dyn__uv();
    // private UnityEngine.Vector2 GetUVByChannel()
    // Offset: 0x19A3A8C
    ::UnityEngine::Vector2 GetUVByChannel();
    // public System.Void .ctor()
    // Offset: 0x19A3AB4
    // Implemented from: VROSC.AdjustableMeshEffect
    // Base method: System.Void AdjustableMeshEffect::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GlobalColorAdjustableMeshEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GlobalColorAdjustableMeshEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GlobalColorAdjustableMeshEffect*, creationType>()));
    }
    // protected override System.Void OnCreation()
    // Offset: 0x19A3954
    // Implemented from: VROSC.AdjustableMeshEffect
    // Base method: System.Void AdjustableMeshEffect::OnCreation()
    void OnCreation();
  }; // VROSC.GlobalColorAdjustableMeshEffect
  #pragma pack(pop)
  static check_size<sizeof(GlobalColorAdjustableMeshEffect), 56 + sizeof(::ArrayW<::UnityEngine::Vector2>)> __VROSC_GlobalColorAdjustableMeshEffectSizeCheck;
  static_assert(sizeof(GlobalColorAdjustableMeshEffect) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::GlobalColorAdjustableMeshEffect::Channel, "VROSC", "GlobalColorAdjustableMeshEffect/Channel");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::GlobalColorAdjustableMeshEffect::GetUVByChannel
// Il2CppName: GetUVByChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (VROSC::GlobalColorAdjustableMeshEffect::*)()>(&VROSC::GlobalColorAdjustableMeshEffect::GetUVByChannel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::GlobalColorAdjustableMeshEffect*), "GetUVByChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::GlobalColorAdjustableMeshEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::GlobalColorAdjustableMeshEffect::OnCreation
// Il2CppName: OnCreation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::GlobalColorAdjustableMeshEffect::*)()>(&VROSC::GlobalColorAdjustableMeshEffect::OnCreation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::GlobalColorAdjustableMeshEffect*), "OnCreation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
