// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: AdjustableMesh
  class AdjustableMesh;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: AdjustableMeshColors
  class AdjustableMeshColors;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AdjustableMeshColors);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AdjustableMeshColors*, "VROSC", "AdjustableMeshColors");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AdjustableMeshColors
  // [TokenAttribute] Offset: FFFFFFFF
  class AdjustableMeshColors : public ::Il2CppObject {
    public:
    public:
    // protected VROSC.AdjustableMesh _adjustableMesh
    // Size: 0x8
    // Offset: 0x10
    ::VROSC::AdjustableMesh* adjustableMesh;
    // Field size check
    static_assert(sizeof(::VROSC::AdjustableMesh*) == 0x8);
    // public System.Action`1<UnityEngine.Color> OnColorChange
    // Size: 0x8
    // Offset: 0x18
    ::System::Action_1<::UnityEngine::Color>* OnColorChange;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::Color>*) == 0x8);
    public:
    // Get instance field reference: protected VROSC.AdjustableMesh _adjustableMesh
    [[deprecated]] ::VROSC::AdjustableMesh*& dyn__adjustableMesh();
    // Get instance field reference: public System.Action`1<UnityEngine.Color> OnColorChange
    [[deprecated]] ::System::Action_1<::UnityEngine::Color>*& dyn_OnColorChange();
    // public System.Void .ctor(VROSC.AdjustableMesh adjustableMesh)
    // Offset: 0x966E28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdjustableMeshColors* New_ctor(::VROSC::AdjustableMesh* adjustableMesh) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshColors::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdjustableMeshColors*, creationType>(adjustableMesh)));
    }
    // public System.Void SetColor(UnityEngine.Color color)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetColor(::UnityEngine::Color color);
    // public System.Void Tint(UnityEngine.Color color, System.Single amount)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Tint(::UnityEngine::Color color, float amount);
  }; // VROSC.AdjustableMeshColors
  #pragma pack(pop)
  static check_size<sizeof(AdjustableMeshColors), 24 + sizeof(::System::Action_1<::UnityEngine::Color>*)> __VROSC_AdjustableMeshColorsSizeCheck;
  static_assert(sizeof(AdjustableMeshColors) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AdjustableMeshColors::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::AdjustableMeshColors::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AdjustableMeshColors::*)(::UnityEngine::Color)>(&VROSC::AdjustableMeshColors::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AdjustableMeshColors*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::AdjustableMeshColors::Tint
// Il2CppName: Tint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AdjustableMeshColors::*)(::UnityEngine::Color, float)>(&VROSC::AdjustableMeshColors::Tint)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AdjustableMeshColors*), "Tint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, amount});
  }
};
