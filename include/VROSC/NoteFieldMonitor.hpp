// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: ControllerInputNode
  class ControllerInputNode;
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: NoteFieldMonitor
  class NoteFieldMonitor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::NoteFieldMonitor);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::NoteFieldMonitor*, "VROSC", "NoteFieldMonitor");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.NoteFieldMonitor
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteFieldMonitor : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::NoteFieldMonitor::HandData
    class HandData;
    // Nested type: ::VROSC::NoteFieldMonitor::PlayData
    class PlayData;
    public:
    // private VROSC.ControllerInputNode _inputNode
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::ControllerInputNode* inputNode;
    // Field size check
    static_assert(sizeof(::VROSC::ControllerInputNode*) == 0x8);
    // private VROSC.NoteFieldMonitor/VROSC.HandData _leftHand
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::NoteFieldMonitor::HandData* leftHand;
    // Field size check
    static_assert(sizeof(::VROSC::NoteFieldMonitor::HandData*) == 0x8);
    // private VROSC.NoteFieldMonitor/VROSC.HandData _righthand
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::NoteFieldMonitor::HandData* righthand;
    // Field size check
    static_assert(sizeof(::VROSC::NoteFieldMonitor::HandData*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.ControllerInputNode _inputNode
    [[deprecated("Use field access instead!")]] ::VROSC::ControllerInputNode*& dyn__inputNode();
    // Get instance field reference: private VROSC.NoteFieldMonitor/VROSC.HandData _leftHand
    [[deprecated("Use field access instead!")]] ::VROSC::NoteFieldMonitor::HandData*& dyn__leftHand();
    // Get instance field reference: private VROSC.NoteFieldMonitor/VROSC.HandData _righthand
    [[deprecated("Use field access instead!")]] ::VROSC::NoteFieldMonitor::HandData*& dyn__righthand();
    // public VROSC.NoteFieldMonitor/VROSC.HandData get_Left()
    // Offset: 0xC59158
    ::VROSC::NoteFieldMonitor::HandData* get_Left();
    // public VROSC.NoteFieldMonitor/VROSC.HandData get_Right()
    // Offset: 0xC59160
    ::VROSC::NoteFieldMonitor::HandData* get_Right();
    // public System.Void .ctor()
    // Offset: 0xC59B94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteFieldMonitor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldMonitor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteFieldMonitor*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0xC59168
    void Awake();
    // private System.Void HoverBegin(VROSC.InputDevice inputDevice)
    // Offset: 0xC592FC
    void HoverBegin(::VROSC::InputDevice* inputDevice);
    // private System.Void HoverEnd(VROSC.InputDevice inputDevice)
    // Offset: 0xC59364
    void HoverEnd(::VROSC::InputDevice* inputDevice);
    // public System.Collections.Generic.List`1<VROSC.NoteFieldMonitor/VROSC.PlayData> GetPlayData()
    // Offset: 0xC593A0
    ::System::Collections::Generic::List_1<::VROSC::NoteFieldMonitor::PlayData*>* GetPlayData();
    // private System.Void Update()
    // Offset: 0xC59B58
    void Update();
    // private VROSC.NoteFieldMonitor/VROSC.HandData GetHandDataByInputDevice(VROSC.InputDevice inputDevice)
    // Offset: 0xC59338
    ::VROSC::NoteFieldMonitor::HandData* GetHandDataByInputDevice(::VROSC::InputDevice* inputDevice);
  }; // VROSC.NoteFieldMonitor
  #pragma pack(pop)
  static check_size<sizeof(NoteFieldMonitor), 40 + sizeof(::VROSC::NoteFieldMonitor::HandData*)> __VROSC_NoteFieldMonitorSizeCheck;
  static_assert(sizeof(NoteFieldMonitor) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::get_Left
// Il2CppName: get_Left
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::NoteFieldMonitor::HandData* (VROSC::NoteFieldMonitor::*)()>(&VROSC::NoteFieldMonitor::get_Left)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldMonitor*), "get_Left", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::get_Right
// Il2CppName: get_Right
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::NoteFieldMonitor::HandData* (VROSC::NoteFieldMonitor::*)()>(&VROSC::NoteFieldMonitor::get_Right)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldMonitor*), "get_Right", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldMonitor::*)()>(&VROSC::NoteFieldMonitor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldMonitor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::HoverBegin
// Il2CppName: HoverBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldMonitor::*)(::VROSC::InputDevice*)>(&VROSC::NoteFieldMonitor::HoverBegin)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldMonitor*), "HoverBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::HoverEnd
// Il2CppName: HoverEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldMonitor::*)(::VROSC::InputDevice*)>(&VROSC::NoteFieldMonitor::HoverEnd)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldMonitor*), "HoverEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::GetPlayData
// Il2CppName: GetPlayData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::VROSC::NoteFieldMonitor::PlayData*>* (VROSC::NoteFieldMonitor::*)()>(&VROSC::NoteFieldMonitor::GetPlayData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldMonitor*), "GetPlayData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldMonitor::*)()>(&VROSC::NoteFieldMonitor::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldMonitor*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::GetHandDataByInputDevice
// Il2CppName: GetHandDataByInputDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::NoteFieldMonitor::HandData* (VROSC::NoteFieldMonitor::*)(::VROSC::InputDevice*)>(&VROSC::NoteFieldMonitor::GetHandDataByInputDevice)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldMonitor*), "GetHandDataByInputDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice});
  }
};
