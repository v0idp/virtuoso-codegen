// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: TransformDataModel
  class TransformDataModel;
  // Forward declaring type: TransformMover
  class TransformMover;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TransformDataController
  class TransformDataController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TransformDataController);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TransformDataController*, "VROSC", "TransformDataController");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TransformDataController
  // [TokenAttribute] Offset: FFFFFFFF
  class TransformDataController : public ::Il2CppObject {
    public:
    public:
    // private VROSC.TransformDataModel _dataModel
    // Size: 0x8
    // Offset: 0x10
    ::VROSC::TransformDataModel* dataModel;
    // Field size check
    static_assert(sizeof(::VROSC::TransformDataModel*) == 0x8);
    // private System.Action OnChange
    // Size: 0x8
    // Offset: 0x18
    ::System::Action* OnChange;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Get instance field reference: private VROSC.TransformDataModel _dataModel
    [[deprecated]] ::VROSC::TransformDataModel*& dyn__dataModel();
    // Get instance field reference: private System.Action OnChange
    [[deprecated]] ::System::Action*& dyn_OnChange();
    // public System.Boolean get_IsOpen()
    // Offset: 0xA2A418
    bool get_IsOpen();
    // public System.Void set_IsOpen(System.Boolean value)
    // Offset: 0xA2A434
    void set_IsOpen(bool value);
    // public System.Boolean get_IsPinned()
    // Offset: 0xA2A478
    bool get_IsPinned();
    // public System.Void set_IsPinned(System.Boolean value)
    // Offset: 0xA28D8C
    void set_IsPinned(bool value);
    // public UnityEngine.Vector3 get_Position()
    // Offset: 0xA28A28
    ::UnityEngine::Vector3 get_Position();
    // public System.Void set_Position(UnityEngine.Vector3 value)
    // Offset: 0xA28CC0
    void set_Position(::UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_Rotation()
    // Offset: 0xA28A40
    ::UnityEngine::Quaternion get_Rotation();
    // public System.Void set_Rotation(UnityEngine.Quaternion value)
    // Offset: 0xA28D04
    void set_Rotation(::UnityEngine::Quaternion value);
    // public UnityEngine.Vector3 get_Scale()
    // Offset: 0xA28A90
    ::UnityEngine::Vector3 get_Scale();
    // public System.Void set_Scale(UnityEngine.Vector3 value)
    // Offset: 0xA28D48
    void set_Scale(::UnityEngine::Vector3 value);
    // public System.Void .ctor(VROSC.TransformDataModel dataModel, System.Action onChange)
    // Offset: 0xA22560
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransformDataController* New_ctor(::VROSC::TransformDataModel* dataModel, ::System::Action* onChange) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransformDataController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransformDataController*, creationType>(dataModel, onChange)));
    }
    // public System.Void SetToTransformMover(VROSC.TransformMover transformMover)
    // Offset: 0xA2A79C
    void SetToTransformMover(::VROSC::TransformMover* transformMover);
    // private System.Void Changed()
    // Offset: 0xA2A464
    void Changed();
  }; // VROSC.TransformDataController
  #pragma pack(pop)
  static check_size<sizeof(TransformDataController), 24 + sizeof(::System::Action*)> __VROSC_TransformDataControllerSizeCheck;
  static_assert(sizeof(TransformDataController) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TransformDataController::get_IsOpen
// Il2CppName: get_IsOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::TransformDataController::*)()>(&VROSC::TransformDataController::get_IsOpen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformDataController*), "get_IsOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformDataController::set_IsOpen
// Il2CppName: set_IsOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformDataController::*)(bool)>(&VROSC::TransformDataController::set_IsOpen)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformDataController*), "set_IsOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::TransformDataController::get_IsPinned
// Il2CppName: get_IsPinned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::TransformDataController::*)()>(&VROSC::TransformDataController::get_IsPinned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformDataController*), "get_IsPinned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformDataController::set_IsPinned
// Il2CppName: set_IsPinned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformDataController::*)(bool)>(&VROSC::TransformDataController::set_IsPinned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformDataController*), "set_IsPinned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::TransformDataController::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::TransformDataController::*)()>(&VROSC::TransformDataController::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformDataController*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformDataController::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformDataController::*)(::UnityEngine::Vector3)>(&VROSC::TransformDataController::set_Position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformDataController*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::TransformDataController::get_Rotation
// Il2CppName: get_Rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (VROSC::TransformDataController::*)()>(&VROSC::TransformDataController::get_Rotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformDataController*), "get_Rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformDataController::set_Rotation
// Il2CppName: set_Rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformDataController::*)(::UnityEngine::Quaternion)>(&VROSC::TransformDataController::set_Rotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformDataController*), "set_Rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::TransformDataController::get_Scale
// Il2CppName: get_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::TransformDataController::*)()>(&VROSC::TransformDataController::get_Scale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformDataController*), "get_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformDataController::set_Scale
// Il2CppName: set_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformDataController::*)(::UnityEngine::Vector3)>(&VROSC::TransformDataController::set_Scale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformDataController*), "set_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::TransformDataController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::TransformDataController::SetToTransformMover
// Il2CppName: SetToTransformMover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformDataController::*)(::VROSC::TransformMover*)>(&VROSC::TransformDataController::SetToTransformMover)> {
  static const MethodInfo* get() {
    static auto* transformMover = &::il2cpp_utils::GetClassFromName("VROSC", "TransformMover")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformDataController*), "SetToTransformMover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformMover});
  }
};
// Writing MetadataGetter for method: VROSC::TransformDataController::Changed
// Il2CppName: Changed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformDataController::*)()>(&VROSC::TransformDataController::Changed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformDataController*), "Changed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
