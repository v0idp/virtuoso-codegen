// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: HighlightControllerComponents
  class HighlightControllerComponents;
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: TooltipData
  class TooltipData;
  // Forward declaring type: HandType
  struct HandType;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: HighlightControllerComponentsManager
  class HighlightControllerComponentsManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::HighlightControllerComponentsManager);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::HighlightControllerComponentsManager*, "VROSC", "HighlightControllerComponentsManager");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.HighlightControllerComponentsManager
  // [TokenAttribute] Offset: FFFFFFFF
  class HighlightControllerComponentsManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.HighlightControllerComponents _left
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::HighlightControllerComponents* left;
    // Field size check
    static_assert(sizeof(::VROSC::HighlightControllerComponents*) == 0x8);
    // private VROSC.HighlightControllerComponents _right
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::HighlightControllerComponents* right;
    // Field size check
    static_assert(sizeof(::VROSC::HighlightControllerComponents*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.HighlightControllerComponents _left
    [[deprecated]] ::VROSC::HighlightControllerComponents*& dyn__left();
    // Get instance field reference: private VROSC.HighlightControllerComponents _right
    [[deprecated]] ::VROSC::HighlightControllerComponents*& dyn__right();
    // public System.Void Setup(VROSC.InputDevice left, VROSC.InputDevice right)
    // Offset: 0x194180C
    void Setup(::VROSC::InputDevice* left, ::VROSC::InputDevice* right);
    // public System.Void SetActive(VROSC.TooltipData tooltip, VROSC.HandType hand, System.Boolean active, System.Object requester)
    // Offset: 0x1941838
    void SetActive(::VROSC::TooltipData* tooltip, ::VROSC::HandType hand, bool active, ::Il2CppObject* requester);
    // private System.Boolean IsLeftValid(VROSC.HandType hand)
    // Offset: 0x19418D4
    bool IsLeftValid(::VROSC::HandType hand);
    // private System.Boolean IsRightValid(VROSC.HandType hand)
    // Offset: 0x1941964
    bool IsRightValid(::VROSC::HandType hand);
    // public System.Void .ctor()
    // Offset: 0x19419F8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HighlightControllerComponentsManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::HighlightControllerComponentsManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HighlightControllerComponentsManager*, creationType>()));
    }
  }; // VROSC.HighlightControllerComponentsManager
  #pragma pack(pop)
  static check_size<sizeof(HighlightControllerComponentsManager), 32 + sizeof(::VROSC::HighlightControllerComponents*)> __VROSC_HighlightControllerComponentsManagerSizeCheck;
  static_assert(sizeof(HighlightControllerComponentsManager) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::HighlightControllerComponentsManager::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HighlightControllerComponentsManager::*)(::VROSC::InputDevice*, ::VROSC::InputDevice*)>(&VROSC::HighlightControllerComponentsManager::Setup)> {
  static const MethodInfo* get() {
    static auto* left = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HighlightControllerComponentsManager*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: VROSC::HighlightControllerComponentsManager::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::HighlightControllerComponentsManager::*)(::VROSC::TooltipData*, ::VROSC::HandType, bool, ::Il2CppObject*)>(&VROSC::HighlightControllerComponentsManager::SetActive)> {
  static const MethodInfo* get() {
    static auto* tooltip = &::il2cpp_utils::GetClassFromName("VROSC", "TooltipData")->byval_arg;
    static auto* hand = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* requester = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HighlightControllerComponentsManager*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tooltip, hand, active, requester});
  }
};
// Writing MetadataGetter for method: VROSC::HighlightControllerComponentsManager::IsLeftValid
// Il2CppName: IsLeftValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::HighlightControllerComponentsManager::*)(::VROSC::HandType)>(&VROSC::HighlightControllerComponentsManager::IsLeftValid)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HighlightControllerComponentsManager*), "IsLeftValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: VROSC::HighlightControllerComponentsManager::IsRightValid
// Il2CppName: IsRightValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::HighlightControllerComponentsManager::*)(::VROSC::HandType)>(&VROSC::HighlightControllerComponentsManager::IsRightValid)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::HighlightControllerComponentsManager*), "IsRightValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: VROSC::HighlightControllerComponentsManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
