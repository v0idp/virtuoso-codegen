// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: EnvironmentData
  class EnvironmentData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: Environment
  class Environment;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::Environment);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::Environment*, "VROSC", "Environment");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.Environment
  // [TokenAttribute] Offset: FFFFFFFF
  class Environment : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.EnvironmentData _data
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::EnvironmentData* data;
    // Field size check
    static_assert(sizeof(::VROSC::EnvironmentData*) == 0x8);
    // private System.Single _effectsAmount
    // Size: 0x4
    // Offset: 0x20
    float effectsAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.EnvironmentData _data
    [[deprecated("Use field access instead!")]] ::VROSC::EnvironmentData*& dyn__data();
    // Get instance field reference: private System.Single _effectsAmount
    [[deprecated("Use field access instead!")]] float& dyn__effectsAmount();
    // public VROSC.EnvironmentData get_Data()
    // Offset: 0x8ED538
    ::VROSC::EnvironmentData* get_Data();
    // public UnityEngine.Material get_SkyboxMaterial()
    // Offset: 0x8ED540
    ::UnityEngine::Material* get_SkyboxMaterial();
    // public System.Single get_BassModifier()
    // Offset: 0x8ED55C
    float get_BassModifier();
    // public System.Single get_MidModifier()
    // Offset: 0x8ED580
    float get_MidModifier();
    // public System.Single get_TopModifier()
    // Offset: 0x8ED5A4
    float get_TopModifier();
    // public System.Void .ctor()
    // Offset: 0x8ED92C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Environment* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::Environment::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Environment*, creationType>()));
    }
    // public System.Void SetEffectsAmount(System.Single effectsAmount)
    // Offset: 0x8ED5C8
    void SetEffectsAmount(float effectsAmount);
    // private System.Void Awake()
    // Offset: 0x8ED5D0
    void Awake();
    // private System.Void SetAllSubObjectsToEnvironmentLayer()
    // Offset: 0x8ED6B4
    void SetAllSubObjectsToEnvironmentLayer();
    // private System.Void GetChildrenRecurisve(System.Collections.Generic.List`1<UnityEngine.GameObject> list, UnityEngine.GameObject gameObject)
    // Offset: 0x8ED84C
    void GetChildrenRecurisve(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* list, ::UnityEngine::GameObject* gameObject);
  }; // VROSC.Environment
  #pragma pack(pop)
  static check_size<sizeof(Environment), 32 + sizeof(float)> __VROSC_EnvironmentSizeCheck;
  static_assert(sizeof(Environment) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::Environment::get_Data
// Il2CppName: get_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::EnvironmentData* (VROSC::Environment::*)()>(&VROSC::Environment::get_Data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Environment*), "get_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Environment::get_SkyboxMaterial
// Il2CppName: get_SkyboxMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (VROSC::Environment::*)()>(&VROSC::Environment::get_SkyboxMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Environment*), "get_SkyboxMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Environment::get_BassModifier
// Il2CppName: get_BassModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::Environment::*)()>(&VROSC::Environment::get_BassModifier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Environment*), "get_BassModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Environment::get_MidModifier
// Il2CppName: get_MidModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::Environment::*)()>(&VROSC::Environment::get_MidModifier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Environment*), "get_MidModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Environment::get_TopModifier
// Il2CppName: get_TopModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::Environment::*)()>(&VROSC::Environment::get_TopModifier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Environment*), "get_TopModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Environment::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::Environment::SetEffectsAmount
// Il2CppName: SetEffectsAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Environment::*)(float)>(&VROSC::Environment::SetEffectsAmount)> {
  static const MethodInfo* get() {
    static auto* effectsAmount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Environment*), "SetEffectsAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{effectsAmount});
  }
};
// Writing MetadataGetter for method: VROSC::Environment::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Environment::*)()>(&VROSC::Environment::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Environment*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Environment::SetAllSubObjectsToEnvironmentLayer
// Il2CppName: SetAllSubObjectsToEnvironmentLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Environment::*)()>(&VROSC::Environment::SetAllSubObjectsToEnvironmentLayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::Environment*), "SetAllSubObjectsToEnvironmentLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::Environment::GetChildrenRecurisve
// Il2CppName: GetChildrenRecurisve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::Environment::*)(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*, ::UnityEngine::GameObject*)>(&VROSC::Environment::GetChildrenRecurisve)> {
  static const MethodInfo* get() {
    static auto* list = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::Environment*), "GetChildrenRecurisve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{list, gameObject});
  }
};
