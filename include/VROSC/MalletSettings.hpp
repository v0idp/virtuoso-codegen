// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: MinMaxFloat
  class MinMaxFloat;
  // Forward declaring type: Mallet
  class Mallet;
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: MalletSettings
  class MalletSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::MalletSettings);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::MalletSettings*, "VROSC", "MalletSettings");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.MalletSettings
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: 77FBC4
  class MalletSettings : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // [HeaderAttribute] Offset: 0x786938
    // private VROSC.MinMaxFloat _minMaxMalletAngle
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::MinMaxFloat* minMaxMalletAngle;
    // Field size check
    static_assert(sizeof(::VROSC::MinMaxFloat*) == 0x8);
    // private VROSC.MinMaxFloat _minMaxMalletLength
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::MinMaxFloat* minMaxMalletLength;
    // Field size check
    static_assert(sizeof(::VROSC::MinMaxFloat*) == 0x8);
    // private System.Boolean _autoDimLaser
    // Size: 0x1
    // Offset: 0x28
    bool autoDimLaser;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: autoDimLaser and: defualtMalletAngle
    char __padding2[0x3] = {};
    // private System.Single _defualtMalletAngle
    // Size: 0x4
    // Offset: 0x2C
    float defualtMalletAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _defualtMalletLength
    // Size: 0x4
    // Offset: 0x30
    float defualtMalletLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _laserEnableTime
    // Size: 0x4
    // Offset: 0x34
    float laserEnableTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _laserDisableTime
    // Size: 0x4
    // Offset: 0x38
    float laserDisableTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _hitExtendsDisableTime
    // Size: 0x4
    // Offset: 0x3C
    float hitExtendsDisableTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private VROSC.Mallet _malletPrefab
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::Mallet* malletPrefab;
    // Field size check
    static_assert(sizeof(::VROSC::Mallet*) == 0x8);
    // private UnityEngine.Color _defaultColor
    // Size: 0x10
    // Offset: 0x48
    ::UnityEngine::Color defaultColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.MinMaxFloat _minMaxMalletAngle
    [[deprecated("Use field access instead!")]] ::VROSC::MinMaxFloat*& dyn__minMaxMalletAngle();
    // Get instance field reference: private VROSC.MinMaxFloat _minMaxMalletLength
    [[deprecated("Use field access instead!")]] ::VROSC::MinMaxFloat*& dyn__minMaxMalletLength();
    // Get instance field reference: private System.Boolean _autoDimLaser
    [[deprecated("Use field access instead!")]] bool& dyn__autoDimLaser();
    // Get instance field reference: private System.Single _defualtMalletAngle
    [[deprecated("Use field access instead!")]] float& dyn__defualtMalletAngle();
    // Get instance field reference: private System.Single _defualtMalletLength
    [[deprecated("Use field access instead!")]] float& dyn__defualtMalletLength();
    // Get instance field reference: private System.Single _laserEnableTime
    [[deprecated("Use field access instead!")]] float& dyn__laserEnableTime();
    // Get instance field reference: private System.Single _laserDisableTime
    [[deprecated("Use field access instead!")]] float& dyn__laserDisableTime();
    // Get instance field reference: private System.Single _hitExtendsDisableTime
    [[deprecated("Use field access instead!")]] float& dyn__hitExtendsDisableTime();
    // Get instance field reference: private VROSC.Mallet _malletPrefab
    [[deprecated("Use field access instead!")]] ::VROSC::Mallet*& dyn__malletPrefab();
    // Get instance field reference: private UnityEngine.Color _defaultColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__defaultColor();
    // public System.Single get_DefualtMalletAngle()
    // Offset: 0x197EB20
    float get_DefualtMalletAngle();
    // public System.Single get_DefaultMalletLength()
    // Offset: 0x197EB28
    float get_DefaultMalletLength();
    // public System.Boolean get_LaserAutoDimWhenHoldingMallets()
    // Offset: 0x197EB30
    bool get_LaserAutoDimWhenHoldingMallets();
    // public VROSC.MinMaxFloat get_MinMaxMalletAngle()
    // Offset: 0x197EB38
    ::VROSC::MinMaxFloat* get_MinMaxMalletAngle();
    // public VROSC.MinMaxFloat get_MinMaxMalletLength()
    // Offset: 0x197EB40
    ::VROSC::MinMaxFloat* get_MinMaxMalletLength();
    // public System.Single get_LaserEnableTime()
    // Offset: 0x197EB48
    float get_LaserEnableTime();
    // public System.Single get_LaserDisableTime()
    // Offset: 0x197EB50
    float get_LaserDisableTime();
    // public System.Single get_HitExtendsDisableTime()
    // Offset: 0x197EB58
    float get_HitExtendsDisableTime();
    // public UnityEngine.Color get_DefaultColor()
    // Offset: 0x197EB60
    ::UnityEngine::Color get_DefaultColor();
    // public System.Void .ctor()
    // Offset: 0x197EB6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MalletSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MalletSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MalletSettings*, creationType>()));
    }
    // public VROSC.Mallet CreateMallet(VROSC.InputDevice inputDevice)
    // Offset: 0x197E100
    ::VROSC::Mallet* CreateMallet(::VROSC::InputDevice* inputDevice);
  }; // VROSC.MalletSettings
  #pragma pack(pop)
  static check_size<sizeof(MalletSettings), 72 + sizeof(::UnityEngine::Color)> __VROSC_MalletSettingsSizeCheck;
  static_assert(sizeof(MalletSettings) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::MalletSettings::get_DefualtMalletAngle
// Il2CppName: get_DefualtMalletAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::MalletSettings::*)()>(&VROSC::MalletSettings::get_DefualtMalletAngle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletSettings*), "get_DefualtMalletAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MalletSettings::get_DefaultMalletLength
// Il2CppName: get_DefaultMalletLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::MalletSettings::*)()>(&VROSC::MalletSettings::get_DefaultMalletLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletSettings*), "get_DefaultMalletLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MalletSettings::get_LaserAutoDimWhenHoldingMallets
// Il2CppName: get_LaserAutoDimWhenHoldingMallets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::MalletSettings::*)()>(&VROSC::MalletSettings::get_LaserAutoDimWhenHoldingMallets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletSettings*), "get_LaserAutoDimWhenHoldingMallets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MalletSettings::get_MinMaxMalletAngle
// Il2CppName: get_MinMaxMalletAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::MinMaxFloat* (VROSC::MalletSettings::*)()>(&VROSC::MalletSettings::get_MinMaxMalletAngle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletSettings*), "get_MinMaxMalletAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MalletSettings::get_MinMaxMalletLength
// Il2CppName: get_MinMaxMalletLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::MinMaxFloat* (VROSC::MalletSettings::*)()>(&VROSC::MalletSettings::get_MinMaxMalletLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletSettings*), "get_MinMaxMalletLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MalletSettings::get_LaserEnableTime
// Il2CppName: get_LaserEnableTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::MalletSettings::*)()>(&VROSC::MalletSettings::get_LaserEnableTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletSettings*), "get_LaserEnableTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MalletSettings::get_LaserDisableTime
// Il2CppName: get_LaserDisableTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::MalletSettings::*)()>(&VROSC::MalletSettings::get_LaserDisableTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletSettings*), "get_LaserDisableTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MalletSettings::get_HitExtendsDisableTime
// Il2CppName: get_HitExtendsDisableTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::MalletSettings::*)()>(&VROSC::MalletSettings::get_HitExtendsDisableTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletSettings*), "get_HitExtendsDisableTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MalletSettings::get_DefaultColor
// Il2CppName: get_DefaultColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (VROSC::MalletSettings::*)()>(&VROSC::MalletSettings::get_DefaultColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletSettings*), "get_DefaultColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MalletSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::MalletSettings::CreateMallet
// Il2CppName: CreateMallet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Mallet* (VROSC::MalletSettings::*)(::VROSC::InputDevice*)>(&VROSC::MalletSettings::CreateMallet)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletSettings*), "CreateMallet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice});
  }
};
