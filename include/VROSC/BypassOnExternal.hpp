// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: SignalNode
  class SignalNode;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: BypassOnExternal
  class BypassOnExternal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::BypassOnExternal);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::BypassOnExternal*, "VROSC", "BypassOnExternal");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.BypassOnExternal
  // [TokenAttribute] Offset: FFFFFFFF
  class BypassOnExternal : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.SignalNode _nodeToBypass
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::SignalNode* nodeToBypass;
    // Field size check
    static_assert(sizeof(::VROSC::SignalNode*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.SignalNode _nodeToBypass
    [[deprecated("Use field access instead!")]] ::VROSC::SignalNode*& dyn__nodeToBypass();
    // public System.Void .ctor()
    // Offset: 0x93BF54
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BypassOnExternal* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BypassOnExternal::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BypassOnExternal*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x93BC7C
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x93BD68
    void OnEnable();
    // private System.Void UseExternalChanged(System.Boolean useExternal)
    // Offset: 0x93BDD8
    void UseExternalChanged(bool useExternal);
    // protected System.Void OnDestroy()
    // Offset: 0x93BE68
    void OnDestroy();
  }; // VROSC.BypassOnExternal
  #pragma pack(pop)
  static check_size<sizeof(BypassOnExternal), 24 + sizeof(::VROSC::SignalNode*)> __VROSC_BypassOnExternalSizeCheck;
  static_assert(sizeof(BypassOnExternal) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::BypassOnExternal::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::BypassOnExternal::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BypassOnExternal::*)()>(&VROSC::BypassOnExternal::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BypassOnExternal*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BypassOnExternal::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BypassOnExternal::*)()>(&VROSC::BypassOnExternal::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BypassOnExternal*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BypassOnExternal::UseExternalChanged
// Il2CppName: UseExternalChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BypassOnExternal::*)(bool)>(&VROSC::BypassOnExternal::UseExternalChanged)> {
  static const MethodInfo* get() {
    static auto* useExternal = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::BypassOnExternal*), "UseExternalChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useExternal});
  }
};
// Writing MetadataGetter for method: VROSC::BypassOnExternal::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::BypassOnExternal::*)()>(&VROSC::BypassOnExternal::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BypassOnExternal*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
