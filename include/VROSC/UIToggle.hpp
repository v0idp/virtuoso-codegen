// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.UIInteractable
#include "VROSC/UIInteractable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: SimpleHaptic
  class SimpleHaptic;
  // Forward declaring type: ClickData
  class ClickData;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: UIToggle
  class UIToggle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UIToggle);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UIToggle*, "VROSC", "UIToggle");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xB9
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UIToggle
  // [TokenAttribute] Offset: FFFFFFFF
  class UIToggle : public ::VROSC::UIInteractable {
    public:
    public:
    // private System.Boolean <IsOn>k__BackingField
    // Size: 0x1
    // Offset: 0x88
    bool IsOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsOn and: OnToggle
    char __padding0[0x7] = {};
    // public System.Action`2<VROSC.InputDevice,System.Boolean> OnToggle
    // Size: 0x8
    // Offset: 0x90
    ::System::Action_2<::VROSC::InputDevice*, bool>* OnToggle;
    // Field size check
    static_assert(sizeof(::System::Action_2<::VROSC::InputDevice*, bool>*) == 0x8);
    // private TMPro.TextMeshPro _tmpLabel
    // Size: 0x8
    // Offset: 0x98
    ::TMPro::TextMeshPro* tmpLabel;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private System.Boolean _startInOnState
    // Size: 0x1
    // Offset: 0xA0
    bool startInOnState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: startInOnState and: toggleObject
    char __padding3[0x7] = {};
    // private UnityEngine.GameObject _toggleObject
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::GameObject* toggleObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // protected VROSC.SimpleHaptic _hapticFeedBack
    // Size: 0x8
    // Offset: 0xB0
    ::VROSC::SimpleHaptic* hapticFeedBack;
    // Field size check
    static_assert(sizeof(::VROSC::SimpleHaptic*) == 0x8);
    // private System.Boolean _isSet
    // Size: 0x1
    // Offset: 0xB8
    bool isSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Boolean <IsOn>k__BackingField
    [[deprecated]] bool& dyn_$IsOn$k__BackingField();
    // Get instance field reference: public System.Action`2<VROSC.InputDevice,System.Boolean> OnToggle
    [[deprecated]] ::System::Action_2<::VROSC::InputDevice*, bool>*& dyn_OnToggle();
    // Get instance field reference: private TMPro.TextMeshPro _tmpLabel
    [[deprecated]] ::TMPro::TextMeshPro*& dyn__tmpLabel();
    // Get instance field reference: private System.Boolean _startInOnState
    [[deprecated]] bool& dyn__startInOnState();
    // Get instance field reference: private UnityEngine.GameObject _toggleObject
    [[deprecated]] ::UnityEngine::GameObject*& dyn__toggleObject();
    // Get instance field reference: protected VROSC.SimpleHaptic _hapticFeedBack
    [[deprecated]] ::VROSC::SimpleHaptic*& dyn__hapticFeedBack();
    // Get instance field reference: private System.Boolean _isSet
    [[deprecated]] bool& dyn__isSet();
    // public System.Boolean get_IsOn()
    // Offset: 0x19195D8
    bool get_IsOn();
    // private System.Void set_IsOn(System.Boolean value)
    // Offset: 0x19195CC
    void set_IsOn(bool value);
    // protected System.Void Awake()
    // Offset: 0x19195E0
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x1919798
    void OnDestroy();
    // protected System.Void ButtonWasPressed(VROSC.ClickData clickData)
    // Offset: 0x1919850
    void ButtonWasPressed(::VROSC::ClickData* clickData);
    // public System.Void SetToggled(System.Boolean shouldBeActive, System.Boolean alsoInvoke)
    // Offset: 0x19196A8
    void SetToggled(bool shouldBeActive, bool alsoInvoke);
    // public System.Void SetText(System.String text)
    // Offset: 0x1919908
    void SetText(::StringW text);
    // public override System.Boolean get_InteractionStopsLaser()
    // Offset: 0x19195C4
    // Implemented from: VROSC.UIInteractable
    // Base method: System.Boolean UIInteractable::get_InteractionStopsLaser()
    bool get_InteractionStopsLaser();
    // public System.Void .ctor()
    // Offset: 0x19199B4
    // Implemented from: VROSC.UIInteractable
    // Base method: System.Void UIInteractable::.ctor()
    // Base method: System.Void Clickable::.ctor()
    // Base method: System.Void Interactable::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIToggle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UIToggle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIToggle*, creationType>()));
    }
  }; // VROSC.UIToggle
  #pragma pack(pop)
  static check_size<sizeof(UIToggle), 184 + sizeof(bool)> __VROSC_UIToggleSizeCheck;
  static_assert(sizeof(UIToggle) == 0xB9);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UIToggle::get_IsOn
// Il2CppName: get_IsOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::UIToggle::*)()>(&VROSC::UIToggle::get_IsOn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIToggle*), "get_IsOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UIToggle::set_IsOn
// Il2CppName: set_IsOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIToggle::*)(bool)>(&VROSC::UIToggle::set_IsOn)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIToggle*), "set_IsOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::UIToggle::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIToggle::*)()>(&VROSC::UIToggle::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIToggle*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UIToggle::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIToggle::*)()>(&VROSC::UIToggle::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIToggle*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UIToggle::ButtonWasPressed
// Il2CppName: ButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIToggle::*)(::VROSC::ClickData*)>(&VROSC::UIToggle::ButtonWasPressed)> {
  static const MethodInfo* get() {
    static auto* clickData = &::il2cpp_utils::GetClassFromName("VROSC", "ClickData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIToggle*), "ButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clickData});
  }
};
// Writing MetadataGetter for method: VROSC::UIToggle::SetToggled
// Il2CppName: SetToggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIToggle::*)(bool, bool)>(&VROSC::UIToggle::SetToggled)> {
  static const MethodInfo* get() {
    static auto* shouldBeActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* alsoInvoke = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIToggle*), "SetToggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shouldBeActive, alsoInvoke});
  }
};
// Writing MetadataGetter for method: VROSC::UIToggle::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UIToggle::*)(::StringW)>(&VROSC::UIToggle::SetText)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIToggle*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: VROSC::UIToggle::get_InteractionStopsLaser
// Il2CppName: get_InteractionStopsLaser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::UIToggle::*)()>(&VROSC::UIToggle::get_InteractionStopsLaser)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UIToggle*), "get_InteractionStopsLaser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UIToggle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
