// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.Error
#include "VROSC/Error.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: ErrorMessages
  class ErrorMessages;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ErrorHandler
  class ErrorHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ErrorHandler);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ErrorHandler*, "VROSC", "ErrorHandler");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ErrorHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class ErrorHandler : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.ErrorMessages _errorMessages
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::ErrorMessages* errorMessages;
    // Field size check
    static_assert(sizeof(::VROSC::ErrorMessages*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private System.Collections.Generic.Dictionary`2<VROSC.Error,System.String> _errorsDict
    static ::System::Collections::Generic::Dictionary_2<::VROSC::Error, ::StringW>* _get__errorsDict();
    // Set static field: static private System.Collections.Generic.Dictionary`2<VROSC.Error,System.String> _errorsDict
    static void _set__errorsDict(::System::Collections::Generic::Dictionary_2<::VROSC::Error, ::StringW>* value);
    // Get instance field reference: private VROSC.ErrorMessages _errorMessages
    [[deprecated]] ::VROSC::ErrorMessages*& dyn__errorMessages();
    // private System.Void Awake()
    // Offset: 0x8EF90C
    void Awake();
    // static public System.String GetMessage(VROSC.Error error)
    // Offset: 0x8EFBE4
    static ::StringW GetMessage(::VROSC::Error error);
    // static public VROSC.Error GetError(System.Int64 httpErrorCode)
    // Offset: 0x8EFD74
    static ::VROSC::Error GetError(int64_t httpErrorCode);
    // static public VROSC.Error GetError(System.Int32 fbErrorCode)
    // Offset: 0x8EFE68
    static ::VROSC::Error GetError(int fbErrorCode);
    // static public VROSC.Error GetError(System.Exception e)
    // Offset: 0x8EFF80
    static ::VROSC::Error GetError(::System::Exception* e);
    // public System.Void .ctor()
    // Offset: 0x8F0230
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ErrorHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ErrorHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ErrorHandler*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x8F0238
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // VROSC.ErrorHandler
  #pragma pack(pop)
  static check_size<sizeof(ErrorHandler), 24 + sizeof(::VROSC::ErrorMessages*)> __VROSC_ErrorHandlerSizeCheck;
  static_assert(sizeof(ErrorHandler) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ErrorHandler::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ErrorHandler::*)()>(&VROSC::ErrorHandler::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ErrorHandler*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ErrorHandler::GetMessage
// Il2CppName: GetMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::VROSC::Error)>(&VROSC::ErrorHandler::GetMessage)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("VROSC", "Error")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ErrorHandler*), "GetMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: VROSC::ErrorHandler::GetError
// Il2CppName: GetError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Error (*)(int64_t)>(&VROSC::ErrorHandler::GetError)> {
  static const MethodInfo* get() {
    static auto* httpErrorCode = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ErrorHandler*), "GetError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{httpErrorCode});
  }
};
// Writing MetadataGetter for method: VROSC::ErrorHandler::GetError
// Il2CppName: GetError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Error (*)(int)>(&VROSC::ErrorHandler::GetError)> {
  static const MethodInfo* get() {
    static auto* fbErrorCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ErrorHandler*), "GetError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fbErrorCode});
  }
};
// Writing MetadataGetter for method: VROSC::ErrorHandler::GetError
// Il2CppName: GetError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Error (*)(::System::Exception*)>(&VROSC::ErrorHandler::GetError)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ErrorHandler*), "GetError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: VROSC::ErrorHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::ErrorHandler::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VROSC::ErrorHandler::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ErrorHandler*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
