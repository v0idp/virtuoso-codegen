// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: TransformDataModel
  class TransformDataModel;
  // Forward declaring type: OctaveData
  class OctaveData;
  // Forward declaring type: MidiData
  class MidiData;
  // Forward declaring type: ScaleData
  class ScaleData;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: SynthData
  class SynthData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::SynthData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::SynthData*, "VROSC", "SynthData");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.SynthData
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: 77EC20
  class SynthData : public ::Il2CppObject {
    public:
    public:
    // public System.String Id
    // Size: 0x8
    // Offset: 0x10
    ::StringW Id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public VROSC.TransformDataModel TransformData
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::TransformDataModel* TransformData;
    // Field size check
    static_assert(sizeof(::VROSC::TransformDataModel*) == 0x8);
    // public VROSC.OctaveData OctaveData
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::OctaveData* OctaveData;
    // Field size check
    static_assert(sizeof(::VROSC::OctaveData*) == 0x8);
    // public VROSC.MidiData MidiData
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::MidiData* MidiData;
    // Field size check
    static_assert(sizeof(::VROSC::MidiData*) == 0x8);
    // public System.Collections.Generic.List`1<VROSC.ScaleData> ScalesData
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::VROSC::ScaleData*>* ScalesData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::ScaleData*>*) == 0x8);
    // public System.String SelectedPatchName
    // Size: 0x8
    // Offset: 0x38
    ::StringW SelectedPatchName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Collections.Generic.List`1<System.String> PatchesFilenames
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::StringW>* PatchesFilenames;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public System.Boolean Quantize
    // Size: 0x1
    // Offset: 0x48
    bool Quantize;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Quantize and: QuantizeTolerance
    char __padding7[0x3] = {};
    // public System.Single QuantizeTolerance
    // Size: 0x4
    // Offset: 0x4C
    float QuantizeTolerance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 QuantizeBeatDivision
    // Size: 0x4
    // Offset: 0x50
    int QuantizeBeatDivision;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.String Id
    [[deprecated]] ::StringW& dyn_Id();
    // Get instance field reference: public VROSC.TransformDataModel TransformData
    [[deprecated]] ::VROSC::TransformDataModel*& dyn_TransformData();
    // Get instance field reference: public VROSC.OctaveData OctaveData
    [[deprecated]] ::VROSC::OctaveData*& dyn_OctaveData();
    // Get instance field reference: public VROSC.MidiData MidiData
    [[deprecated]] ::VROSC::MidiData*& dyn_MidiData();
    // Get instance field reference: public System.Collections.Generic.List`1<VROSC.ScaleData> ScalesData
    [[deprecated]] ::System::Collections::Generic::List_1<::VROSC::ScaleData*>*& dyn_ScalesData();
    // Get instance field reference: public System.String SelectedPatchName
    [[deprecated]] ::StringW& dyn_SelectedPatchName();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> PatchesFilenames
    [[deprecated]] ::System::Collections::Generic::List_1<::StringW>*& dyn_PatchesFilenames();
    // Get instance field reference: public System.Boolean Quantize
    [[deprecated]] bool& dyn_Quantize();
    // Get instance field reference: public System.Single QuantizeTolerance
    [[deprecated]] float& dyn_QuantizeTolerance();
    // Get instance field reference: public System.Int32 QuantizeBeatDivision
    [[deprecated]] int& dyn_QuantizeBeatDivision();
    // public System.Void .ctor()
    // Offset: 0x1933614
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SynthData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SynthData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SynthData*, creationType>()));
    }
  }; // VROSC.SynthData
  #pragma pack(pop)
  static check_size<sizeof(SynthData), 80 + sizeof(int)> __VROSC_SynthDataSizeCheck;
  static_assert(sizeof(SynthData) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::SynthData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
