// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.SignalNode
#include "VROSC/SignalNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: Signal
  class Signal;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TransformRotator
  class TransformRotator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TransformRotator);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TransformRotator*, "VROSC", "TransformRotator");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x63
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TransformRotator
  // [TokenAttribute] Offset: FFFFFFFF
  class TransformRotator : public ::VROSC::SignalNode {
    public:
    public:
    // private UnityEngine.Transform _targetTransform
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* targetTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _sourceTransform
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* sourceTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Quaternion _relativeStartRotation
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Quaternion relativeStartRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Boolean _lockX
    // Size: 0x1
    // Offset: 0x60
    bool lockX;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _lockY
    // Size: 0x1
    // Offset: 0x61
    bool lockY;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _lockZ
    // Size: 0x1
    // Offset: 0x62
    bool lockZ;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Transform _targetTransform
    [[deprecated]] ::UnityEngine::Transform*& dyn__targetTransform();
    // Get instance field reference: private UnityEngine.Transform _sourceTransform
    [[deprecated]] ::UnityEngine::Transform*& dyn__sourceTransform();
    // Get instance field reference: private UnityEngine.Quaternion _relativeStartRotation
    [[deprecated]] ::UnityEngine::Quaternion& dyn__relativeStartRotation();
    // Get instance field reference: private System.Boolean _lockX
    [[deprecated]] bool& dyn__lockX();
    // Get instance field reference: private System.Boolean _lockY
    [[deprecated]] bool& dyn__lockY();
    // Get instance field reference: private System.Boolean _lockZ
    [[deprecated]] bool& dyn__lockZ();
    // protected override System.Boolean get_RequireOrigin()
    // Offset: 0xA2CBF8
    // Implemented from: VROSC.SignalNode
    // Base method: System.Boolean SignalNode::get_RequireOrigin()
    bool get_RequireOrigin();
    // public System.Void .ctor()
    // Offset: 0xA2CEC8
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::.ctor()
    // Base method: System.Void Node::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransformRotator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransformRotator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransformRotator*, creationType>()));
    }
    // protected override System.Void NodeBegin(VROSC.Signal signal)
    // Offset: 0xA2CC00
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeBegin(VROSC.Signal signal)
    void NodeBegin(::VROSC::Signal* signal);
    // protected override System.Void NodeStay(VROSC.Signal signal)
    // Offset: 0xA2CD14
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeStay(VROSC.Signal signal)
    void NodeStay(::VROSC::Signal* signal);
    // protected override System.Void NodeEnd(VROSC.Signal signal)
    // Offset: 0xA2CEC0
    // Implemented from: VROSC.SignalNode
    // Base method: System.Void SignalNode::NodeEnd(VROSC.Signal signal)
    void NodeEnd(::VROSC::Signal* signal);
  }; // VROSC.TransformRotator
  #pragma pack(pop)
  static check_size<sizeof(TransformRotator), 98 + sizeof(bool)> __VROSC_TransformRotatorSizeCheck;
  static_assert(sizeof(TransformRotator) == 0x63);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TransformRotator::get_RequireOrigin
// Il2CppName: get_RequireOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::TransformRotator::*)()>(&VROSC::TransformRotator::get_RequireOrigin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformRotator*), "get_RequireOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformRotator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::TransformRotator::NodeBegin
// Il2CppName: NodeBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformRotator::*)(::VROSC::Signal*)>(&VROSC::TransformRotator::NodeBegin)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformRotator*), "NodeBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::TransformRotator::NodeStay
// Il2CppName: NodeStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformRotator::*)(::VROSC::Signal*)>(&VROSC::TransformRotator::NodeStay)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformRotator*), "NodeStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: VROSC::TransformRotator::NodeEnd
// Il2CppName: NodeEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformRotator::*)(::VROSC::Signal*)>(&VROSC::TransformRotator::NodeEnd)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("VROSC", "Signal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformRotator*), "NodeEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
