// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.ChangeFlags
#include "VROSC/ChangeFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: BaseDataModel
  class BaseDataModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::BaseDataModel);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::BaseDataModel*, "VROSC", "BaseDataModel");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.BaseDataModel
  // [TokenAttribute] Offset: FFFFFFFF
  class BaseDataModel : public ::Il2CppObject {
    public:
    public:
    // public VROSC.ChangeFlags Flags
    // Size: 0x4
    // Offset: 0x10
    ::VROSC::ChangeFlags Flags;
    // Field size check
    static_assert(sizeof(::VROSC::ChangeFlags) == 0x4);
    // public System.Int32 SaveVersion
    // Size: 0x4
    // Offset: 0x14
    int SaveVersion;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public VROSC.ChangeFlags Flags
    [[deprecated("Use field access instead!")]] ::VROSC::ChangeFlags& dyn_Flags();
    // Get instance field reference: public System.Int32 SaveVersion
    [[deprecated("Use field access instead!")]] int& dyn_SaveVersion();
    // public System.String get_Key()
    // Offset: 0x9744A0
    ::StringW get_Key();
    // public System.Int32 get_Version()
    // Offset: 0x9744E4
    int get_Version();
    // public System.Void .ctor()
    // Offset: 0x9744EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseDataModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::BaseDataModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseDataModel*, creationType>()));
    }
    // public System.String Serialize()
    // Offset: 0x9744FC
    ::StringW Serialize();
    // public System.Collections.Generic.Dictionary`2<System.String,System.Object> GetFirestoreData()
    // Offset: 0x974530
    ::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>* GetFirestoreData();
  }; // VROSC.BaseDataModel
  #pragma pack(pop)
  static check_size<sizeof(BaseDataModel), 20 + sizeof(int)> __VROSC_BaseDataModelSizeCheck;
  static_assert(sizeof(BaseDataModel) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::BaseDataModel::get_Key
// Il2CppName: get_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::BaseDataModel::*)()>(&VROSC::BaseDataModel::get_Key)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BaseDataModel*), "get_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BaseDataModel::get_Version
// Il2CppName: get_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::BaseDataModel::*)()>(&VROSC::BaseDataModel::get_Version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BaseDataModel*), "get_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BaseDataModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::BaseDataModel::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::BaseDataModel::*)()>(&VROSC::BaseDataModel::Serialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BaseDataModel*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::BaseDataModel::GetFirestoreData
// Il2CppName: GetFirestoreData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>* (VROSC::BaseDataModel::*)()>(&VROSC::BaseDataModel::GetFirestoreData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::BaseDataModel*), "GetFirestoreData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
