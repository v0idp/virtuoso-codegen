// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: AdjustableMesh
  class AdjustableMesh;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: AdjustableMeshUvs
  class AdjustableMeshUvs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::AdjustableMeshUvs);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AdjustableMeshUvs*, "VROSC", "AdjustableMeshUvs");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.AdjustableMeshUvs
  // [TokenAttribute] Offset: FFFFFFFF
  class AdjustableMeshUvs : public ::Il2CppObject {
    public:
    // Nested type: ::VROSC::AdjustableMeshUvs::Channel
    struct Channel;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: VROSC.AdjustableMeshUvs/VROSC.Channel
    // [TokenAttribute] Offset: FFFFFFFF
    struct Channel/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Channel
      constexpr Channel(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv1
      static constexpr const int Uv1 = 0;
      // Get static field: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv1
      static ::VROSC::AdjustableMeshUvs::Channel _get_Uv1();
      // Set static field: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv1
      static void _set_Uv1(::VROSC::AdjustableMeshUvs::Channel value);
      // static field const value: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv2
      static constexpr const int Uv2 = 1;
      // Get static field: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv2
      static ::VROSC::AdjustableMeshUvs::Channel _get_Uv2();
      // Set static field: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv2
      static void _set_Uv2(::VROSC::AdjustableMeshUvs::Channel value);
      // static field const value: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv3
      static constexpr const int Uv3 = 2;
      // Get static field: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv3
      static ::VROSC::AdjustableMeshUvs::Channel _get_Uv3();
      // Set static field: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv3
      static void _set_Uv3(::VROSC::AdjustableMeshUvs::Channel value);
      // static field const value: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv4
      static constexpr const int Uv4 = 3;
      // Get static field: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv4
      static ::VROSC::AdjustableMeshUvs::Channel _get_Uv4();
      // Set static field: static public VROSC.AdjustableMeshUvs/VROSC.Channel Uv4
      static void _set_Uv4(::VROSC::AdjustableMeshUvs::Channel value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated]] int& dyn_value__();
    }; // VROSC.AdjustableMeshUvs/VROSC.Channel
    #pragma pack(pop)
    static check_size<sizeof(AdjustableMeshUvs::Channel), 0 + sizeof(int)> __VROSC_AdjustableMeshUvs_ChannelSizeCheck;
    static_assert(sizeof(AdjustableMeshUvs::Channel) == 0x4);
    public:
    // private VROSC.AdjustableMeshUvs/VROSC.Channel _channel
    // Size: 0x4
    // Offset: 0x10
    ::VROSC::AdjustableMeshUvs::Channel channel;
    // Field size check
    static_assert(sizeof(::VROSC::AdjustableMeshUvs::Channel) == 0x4);
    // Padding between fields: channel and: adjustableMesh
    char __padding0[0x4] = {};
    // private VROSC.AdjustableMesh _adjustableMesh
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::AdjustableMesh* adjustableMesh;
    // Field size check
    static_assert(sizeof(::VROSC::AdjustableMesh*) == 0x8);
    // private UnityEngine.Vector2[] _originalUv
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Vector2> originalUv;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private UnityEngine.Vector2[] _uv
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Vector2> uv;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    public:
    // Get instance field reference: private VROSC.AdjustableMeshUvs/VROSC.Channel _channel
    [[deprecated]] ::VROSC::AdjustableMeshUvs::Channel& dyn__channel();
    // Get instance field reference: private VROSC.AdjustableMesh _adjustableMesh
    [[deprecated]] ::VROSC::AdjustableMesh*& dyn__adjustableMesh();
    // Get instance field reference: private UnityEngine.Vector2[] _originalUv
    [[deprecated]] ::ArrayW<::UnityEngine::Vector2>& dyn__originalUv();
    // Get instance field reference: private UnityEngine.Vector2[] _uv
    [[deprecated]] ::ArrayW<::UnityEngine::Vector2>& dyn__uv();
    // public System.Void .ctor(VROSC.AdjustableMesh adjustableMesh, VROSC.AdjustableMeshUvs/VROSC.Channel channel, System.Boolean useOriginalAsUVSource)
    // Offset: 0x966904
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdjustableMeshUvs* New_ctor(::VROSC::AdjustableMesh* adjustableMesh, ::VROSC::AdjustableMeshUvs::Channel channel, bool useOriginalAsUVSource) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::AdjustableMeshUvs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdjustableMeshUvs*, creationType>(adjustableMesh, channel, useOriginalAsUVSource)));
    }
    // public System.Void SetOriginalUV(UnityEngine.Vector2[] uv)
    // Offset: 0x968BD0
    void SetOriginalUV(::ArrayW<::UnityEngine::Vector2> uv);
    // public System.Void OffsetUv(UnityEngine.Vector2 offset)
    // Offset: 0x968BD8
    void OffsetUv(::UnityEngine::Vector2 offset);
    // public System.Void SetAllUVs(UnityEngine.Vector2 uv)
    // Offset: 0x968CC8
    void SetAllUVs(::UnityEngine::Vector2 uv);
    // private System.Void SetUVs(UnityEngine.Vector2[] uv)
    // Offset: 0x968AC0
    void SetUVs(::ArrayW<::UnityEngine::Vector2> uv);
  }; // VROSC.AdjustableMeshUvs
  #pragma pack(pop)
  static check_size<sizeof(AdjustableMeshUvs), 40 + sizeof(::ArrayW<::UnityEngine::Vector2>)> __VROSC_AdjustableMeshUvsSizeCheck;
  static_assert(sizeof(AdjustableMeshUvs) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VROSC::AdjustableMeshUvs::Channel, "VROSC", "AdjustableMeshUvs/Channel");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::AdjustableMeshUvs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::AdjustableMeshUvs::SetOriginalUV
// Il2CppName: SetOriginalUV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AdjustableMeshUvs::*)(::ArrayW<::UnityEngine::Vector2>)>(&VROSC::AdjustableMeshUvs::SetOriginalUV)> {
  static const MethodInfo* get() {
    static auto* uv = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AdjustableMeshUvs*), "SetOriginalUV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uv});
  }
};
// Writing MetadataGetter for method: VROSC::AdjustableMeshUvs::OffsetUv
// Il2CppName: OffsetUv
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AdjustableMeshUvs::*)(::UnityEngine::Vector2)>(&VROSC::AdjustableMeshUvs::OffsetUv)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AdjustableMeshUvs*), "OffsetUv", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset});
  }
};
// Writing MetadataGetter for method: VROSC::AdjustableMeshUvs::SetAllUVs
// Il2CppName: SetAllUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AdjustableMeshUvs::*)(::UnityEngine::Vector2)>(&VROSC::AdjustableMeshUvs::SetAllUVs)> {
  static const MethodInfo* get() {
    static auto* uv = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AdjustableMeshUvs*), "SetAllUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uv});
  }
};
// Writing MetadataGetter for method: VROSC::AdjustableMeshUvs::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::AdjustableMeshUvs::*)(::ArrayW<::UnityEngine::Vector2>)>(&VROSC::AdjustableMeshUvs::SetUVs)> {
  static const MethodInfo* get() {
    static auto* uv = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::AdjustableMeshUvs*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uv});
  }
};
