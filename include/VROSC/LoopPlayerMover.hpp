// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: MoveOnPlane
  class MoveOnPlane;
  // Forward declaring type: LoopStation
  class LoopStation;
  // Forward declaring type: LoopPlayer
  class LoopPlayer;
  // Forward declaring type: LoopStationGroup
  class LoopStationGroup;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopPlayerMover
  class LoopPlayerMover;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::LoopPlayerMover);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LoopPlayerMover*, "VROSC", "LoopPlayerMover");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.LoopPlayerMover
  // [TokenAttribute] Offset: FFFFFFFF
  class LoopPlayerMover : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Boolean <IsGrabbed>k__BackingField
    // Size: 0x1
    // Offset: 0x18
    bool IsGrabbed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsGrabbed and: mover
    char __padding0[0x7] = {};
    // private VROSC.MoveOnPlane _mover
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::MoveOnPlane* mover;
    // Field size check
    static_assert(sizeof(::VROSC::MoveOnPlane*) == 0x8);
    // private UnityEngine.Collider _checkvolume
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Collider* checkvolume;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // private VROSC.LoopStation _loopStation
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::LoopStation* loopStation;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStation*) == 0x8);
    // private VROSC.LoopPlayer _loopPlayer
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::LoopPlayer* loopPlayer;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlayer*) == 0x8);
    // private VROSC.LoopStationGroup _belongsToGroup
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::LoopStationGroup* belongsToGroup;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationGroup*) == 0x8);
    // private VROSC.LoopStationGroup _hoveredGroup
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::LoopStationGroup* hoveredGroup;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStationGroup*) == 0x8);
    // private System.Boolean _onlyAllowDropOnOwnGroupOrUserGroups
    // Size: 0x1
    // Offset: 0x50
    bool onlyAllowDropOnOwnGroupOrUserGroups;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Boolean <IsGrabbed>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsGrabbed$k__BackingField();
    // Get instance field reference: private VROSC.MoveOnPlane _mover
    [[deprecated("Use field access instead!")]] ::VROSC::MoveOnPlane*& dyn__mover();
    // Get instance field reference: private UnityEngine.Collider _checkvolume
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn__checkvolume();
    // Get instance field reference: private VROSC.LoopStation _loopStation
    [[deprecated("Use field access instead!")]] ::VROSC::LoopStation*& dyn__loopStation();
    // Get instance field reference: private VROSC.LoopPlayer _loopPlayer
    [[deprecated("Use field access instead!")]] ::VROSC::LoopPlayer*& dyn__loopPlayer();
    // Get instance field reference: private VROSC.LoopStationGroup _belongsToGroup
    [[deprecated("Use field access instead!")]] ::VROSC::LoopStationGroup*& dyn__belongsToGroup();
    // Get instance field reference: private VROSC.LoopStationGroup _hoveredGroup
    [[deprecated("Use field access instead!")]] ::VROSC::LoopStationGroup*& dyn__hoveredGroup();
    // Get instance field reference: private System.Boolean _onlyAllowDropOnOwnGroupOrUserGroups
    [[deprecated("Use field access instead!")]] bool& dyn__onlyAllowDropOnOwnGroupOrUserGroups();
    // public System.Boolean get_IsGrabbed()
    // Offset: 0x19BB414
    bool get_IsGrabbed();
    // System.Void set_IsGrabbed(System.Boolean value)
    // Offset: 0x19BB41C
    void set_IsGrabbed(bool value);
    // public System.Void .ctor()
    // Offset: 0x19BBAB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoopPlayerMover* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::LoopPlayerMover::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoopPlayerMover*, creationType>()));
    }
    // public System.Void Setup(VROSC.LoopPlayer loopPlayer, VROSC.LoopStation loopStation)
    // Offset: 0x19B9F0C
    void Setup(::VROSC::LoopPlayer* loopPlayer, ::VROSC::LoopStation* loopStation);
    // public System.Void SetGroup(VROSC.LoopStationGroup loopStationGroup)
    // Offset: 0x19B9B18
    void SetGroup(::VROSC::LoopStationGroup* loopStationGroup);
    // private System.Void GrabBegin()
    // Offset: 0x19BB428
    void GrabBegin();
    // private System.Void Update()
    // Offset: 0x19BB4B4
    void Update();
    // private VROSC.LoopStationGroup GetHoveredGroup()
    // Offset: 0x19BB5DC
    ::VROSC::LoopStationGroup* GetHoveredGroup();
    // private System.Boolean IsGroupValid(VROSC.LoopStationGroup closestGroup)
    // Offset: 0x19BB7F8
    bool IsGroupValid(::VROSC::LoopStationGroup* closestGroup);
    // private System.Void GrabEnd()
    // Offset: 0x19BB8F4
    void GrabEnd();
  }; // VROSC.LoopPlayerMover
  #pragma pack(pop)
  static check_size<sizeof(LoopPlayerMover), 80 + sizeof(bool)> __VROSC_LoopPlayerMoverSizeCheck;
  static_assert(sizeof(LoopPlayerMover) == 0x51);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::LoopPlayerMover::get_IsGrabbed
// Il2CppName: get_IsGrabbed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopPlayerMover::*)()>(&VROSC::LoopPlayerMover::get_IsGrabbed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerMover*), "get_IsGrabbed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerMover::set_IsGrabbed
// Il2CppName: set_IsGrabbed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerMover::*)(bool)>(&VROSC::LoopPlayerMover::set_IsGrabbed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerMover*), "set_IsGrabbed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerMover::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::LoopPlayerMover::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerMover::*)(::VROSC::LoopPlayer*, ::VROSC::LoopStation*)>(&VROSC::LoopPlayerMover::Setup)> {
  static const MethodInfo* get() {
    static auto* loopPlayer = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayer")->byval_arg;
    static auto* loopStation = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerMover*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopPlayer, loopStation});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerMover::SetGroup
// Il2CppName: SetGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerMover::*)(::VROSC::LoopStationGroup*)>(&VROSC::LoopPlayerMover::SetGroup)> {
  static const MethodInfo* get() {
    static auto* loopStationGroup = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStationGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerMover*), "SetGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopStationGroup});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerMover::GrabBegin
// Il2CppName: GrabBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerMover::*)()>(&VROSC::LoopPlayerMover::GrabBegin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerMover*), "GrabBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerMover::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerMover::*)()>(&VROSC::LoopPlayerMover::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerMover*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerMover::GetHoveredGroup
// Il2CppName: GetHoveredGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopStationGroup* (VROSC::LoopPlayerMover::*)()>(&VROSC::LoopPlayerMover::GetHoveredGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerMover*), "GetHoveredGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerMover::IsGroupValid
// Il2CppName: IsGroupValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopPlayerMover::*)(::VROSC::LoopStationGroup*)>(&VROSC::LoopPlayerMover::IsGroupValid)> {
  static const MethodInfo* get() {
    static auto* closestGroup = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStationGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerMover*), "IsGroupValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{closestGroup});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerMover::GrabEnd
// Il2CppName: GrabEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerMover::*)()>(&VROSC::LoopPlayerMover::GrabEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerMover*), "GrabEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
