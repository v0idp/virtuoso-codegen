// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: TooltipData
  class TooltipData;
  // Forward declaring type: TriggerButton
  struct TriggerButton;
}
// Forward declaring namespace: VROSC::UI::Meshes
namespace VROSC::UI::Meshes {
  // Forward declaring type: ProceduralArc
  class ProceduralArc;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: DashboardSpawnPoint
  class DashboardSpawnPoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::DashboardSpawnPoint);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::DashboardSpawnPoint*, "VROSC", "DashboardSpawnPoint");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.DashboardSpawnPoint
  // [TokenAttribute] Offset: FFFFFFFF
  class DashboardSpawnPoint : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::DashboardSpawnPoint::TriggerCondition
    struct TriggerCondition;
    public:
    // private System.Single <ActivationAmount>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    float ActivationAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <ShouldBeDropped>k__BackingField
    // Size: 0x1
    // Offset: 0x1C
    bool ShouldBeDropped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ShouldBeDropped and: OtherHand
    char __padding1[0x3] = {};
    // private VROSC.DashboardSpawnPoint <OtherHand>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::DashboardSpawnPoint* OtherHand;
    // Field size check
    static_assert(sizeof(::VROSC::DashboardSpawnPoint*) == 0x8);
    // private System.Boolean <IsRightHand>k__BackingField
    // Size: 0x1
    // Offset: 0x28
    bool IsRightHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <DashboardIsAtHand>k__BackingField
    // Size: 0x1
    // Offset: 0x29
    bool DashboardIsAtHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: DashboardIsAtHand and: InputDevice
    char __padding4[0x6] = {};
    // private VROSC.InputDevice <InputDevice>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::InputDevice* InputDevice;
    // Field size check
    static_assert(sizeof(::VROSC::InputDevice*) == 0x8);
    // private System.Single _lookAtSensitivity
    // Size: 0x4
    // Offset: 0x38
    float lookAtSensitivity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _lookatTimeRequired
    // Size: 0x4
    // Offset: 0x3C
    float lookatTimeRequired;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _offset
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 offset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: offset and: arc
    char __padding8[0x4] = {};
    // private VROSC.UI.Meshes.ProceduralArc _arc
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::UI::Meshes::ProceduralArc* arc;
    // Field size check
    static_assert(sizeof(::VROSC::UI::Meshes::ProceduralArc*) == 0x8);
    // private System.Boolean _YPressed
    // Size: 0x1
    // Offset: 0x58
    bool YPressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _showingTooltip
    // Size: 0x1
    // Offset: 0x59
    bool showingTooltip;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showingTooltip and: openTooltip
    char __padding11[0x6] = {};
    // private VROSC.TooltipData _openTooltip
    // Size: 0x8
    // Offset: 0x60
    ::VROSC::TooltipData* openTooltip;
    // Field size check
    static_assert(sizeof(::VROSC::TooltipData*) == 0x8);
    // private VROSC.TooltipData _dropTooltip
    // Size: 0x8
    // Offset: 0x68
    ::VROSC::TooltipData* dropTooltip;
    // Field size check
    static_assert(sizeof(::VROSC::TooltipData*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single <ActivationAmount>k__BackingField
    [[deprecated]] float& dyn_$ActivationAmount$k__BackingField();
    // Get instance field reference: private System.Boolean <ShouldBeDropped>k__BackingField
    [[deprecated]] bool& dyn_$ShouldBeDropped$k__BackingField();
    // Get instance field reference: private VROSC.DashboardSpawnPoint <OtherHand>k__BackingField
    [[deprecated]] ::VROSC::DashboardSpawnPoint*& dyn_$OtherHand$k__BackingField();
    // Get instance field reference: private System.Boolean <IsRightHand>k__BackingField
    [[deprecated]] bool& dyn_$IsRightHand$k__BackingField();
    // Get instance field reference: private System.Boolean <DashboardIsAtHand>k__BackingField
    [[deprecated]] bool& dyn_$DashboardIsAtHand$k__BackingField();
    // Get instance field reference: private VROSC.InputDevice <InputDevice>k__BackingField
    [[deprecated]] ::VROSC::InputDevice*& dyn_$InputDevice$k__BackingField();
    // Get instance field reference: private System.Single _lookAtSensitivity
    [[deprecated]] float& dyn__lookAtSensitivity();
    // Get instance field reference: private System.Single _lookatTimeRequired
    [[deprecated]] float& dyn__lookatTimeRequired();
    // Get instance field reference: private UnityEngine.Vector3 _offset
    [[deprecated]] ::UnityEngine::Vector3& dyn__offset();
    // Get instance field reference: private VROSC.UI.Meshes.ProceduralArc _arc
    [[deprecated]] ::VROSC::UI::Meshes::ProceduralArc*& dyn__arc();
    // Get instance field reference: private System.Boolean _YPressed
    [[deprecated]] bool& dyn__YPressed();
    // Get instance field reference: private System.Boolean _showingTooltip
    [[deprecated]] bool& dyn__showingTooltip();
    // Get instance field reference: private VROSC.TooltipData _openTooltip
    [[deprecated]] ::VROSC::TooltipData*& dyn__openTooltip();
    // Get instance field reference: private VROSC.TooltipData _dropTooltip
    [[deprecated]] ::VROSC::TooltipData*& dyn__dropTooltip();
    // public System.Single get_ActivationAmount()
    // Offset: 0x8E0DB4
    float get_ActivationAmount();
    // private System.Void set_ActivationAmount(System.Single value)
    // Offset: 0x8E0DAC
    void set_ActivationAmount(float value);
    // public System.Boolean get_ShouldBeDropped()
    // Offset: 0x8E0DC8
    bool get_ShouldBeDropped();
    // private System.Void set_ShouldBeDropped(System.Boolean value)
    // Offset: 0x8E0DBC
    void set_ShouldBeDropped(bool value);
    // public VROSC.DashboardSpawnPoint get_OtherHand()
    // Offset: 0x8E0DD8
    ::VROSC::DashboardSpawnPoint* get_OtherHand();
    // private System.Void set_OtherHand(VROSC.DashboardSpawnPoint value)
    // Offset: 0x8E0DD0
    void set_OtherHand(::VROSC::DashboardSpawnPoint* value);
    // public System.Boolean get_IsRightHand()
    // Offset: 0x8E0DEC
    bool get_IsRightHand();
    // private System.Void set_IsRightHand(System.Boolean value)
    // Offset: 0x8E0DE0
    void set_IsRightHand(bool value);
    // public System.Boolean get_DashboardIsAtHand()
    // Offset: 0x8E0E00
    bool get_DashboardIsAtHand();
    // private System.Void set_DashboardIsAtHand(System.Boolean value)
    // Offset: 0x8E0DF4
    void set_DashboardIsAtHand(bool value);
    // public UnityEngine.Vector3 get_TransformedDirection()
    // Offset: 0x8E0E08
    ::UnityEngine::Vector3 get_TransformedDirection();
    // public VROSC.InputDevice get_InputDevice()
    // Offset: 0x8E0E48
    ::VROSC::InputDevice* get_InputDevice();
    // private System.Void set_InputDevice(VROSC.InputDevice value)
    // Offset: 0x8E0E40
    void set_InputDevice(::VROSC::InputDevice* value);
    // public System.Void Setup(VROSC.InputDevice inputDevice, VROSC.DashboardSpawnPoint otherHand, System.Boolean isRightHand)
    // Offset: 0x8E0E50
    void Setup(::VROSC::InputDevice* inputDevice, ::VROSC::DashboardSpawnPoint* otherHand, bool isRightHand);
    // private System.Void Start()
    // Offset: 0x8E0F24
    void Start();
    // private System.Void ButtonPressEnd(VROSC.InputDevice device, VROSC.TriggerButton button)
    // Offset: 0x8E1078
    void ButtonPressEnd(::VROSC::InputDevice* device, ::VROSC::TriggerButton button);
    // private System.Void ButtonPressBegin(VROSC.InputDevice device, VROSC.TriggerButton button)
    // Offset: 0x8E10C4
    void ButtonPressBegin(::VROSC::InputDevice* device, ::VROSC::TriggerButton button);
    // public System.Void SetActivationAmount(System.Single value)
    // Offset: 0x8E0E98
    void SetActivationAmount(float value);
    // private System.Boolean CanOpenDashboard(System.Boolean dashboardIsAtHand)
    // Offset: 0x8E1118
    bool CanOpenDashboard(bool dashboardIsAtHand);
    // public System.Void UpdateTriggerCondition(VROSC.DashboardSpawnPoint/VROSC.TriggerCondition condition, System.Boolean dashboardIsAtHand)
    // Offset: 0x8E11E0
    void UpdateTriggerCondition(::VROSC::DashboardSpawnPoint::TriggerCondition condition, bool dashboardIsAtHand);
    // private System.Void UpdateIsAtHand(System.Boolean dashboardIsAtHand)
    // Offset: 0x8E1340
    void UpdateIsAtHand(bool dashboardIsAtHand);
    // private System.Boolean IsTriggerConditionMet(VROSC.DashboardSpawnPoint/VROSC.TriggerCondition condition, System.Boolean dashboardIsAtHand)
    // Offset: 0x8E13B4
    bool IsTriggerConditionMet(::VROSC::DashboardSpawnPoint::TriggerCondition condition, bool dashboardIsAtHand);
    // private System.Void OnDrawGizmos()
    // Offset: 0x8E15B0
    void OnDrawGizmos();
    // public System.Void .ctor()
    // Offset: 0x8E1660
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DashboardSpawnPoint* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::DashboardSpawnPoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DashboardSpawnPoint*, creationType>()));
    }
  }; // VROSC.DashboardSpawnPoint
  #pragma pack(pop)
  static check_size<sizeof(DashboardSpawnPoint), 104 + sizeof(::VROSC::TooltipData*)> __VROSC_DashboardSpawnPointSizeCheck;
  static_assert(sizeof(DashboardSpawnPoint) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::get_ActivationAmount
// Il2CppName: get_ActivationAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::DashboardSpawnPoint::*)()>(&VROSC::DashboardSpawnPoint::get_ActivationAmount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "get_ActivationAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::set_ActivationAmount
// Il2CppName: set_ActivationAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardSpawnPoint::*)(float)>(&VROSC::DashboardSpawnPoint::set_ActivationAmount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "set_ActivationAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::get_ShouldBeDropped
// Il2CppName: get_ShouldBeDropped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::DashboardSpawnPoint::*)()>(&VROSC::DashboardSpawnPoint::get_ShouldBeDropped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "get_ShouldBeDropped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::set_ShouldBeDropped
// Il2CppName: set_ShouldBeDropped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardSpawnPoint::*)(bool)>(&VROSC::DashboardSpawnPoint::set_ShouldBeDropped)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "set_ShouldBeDropped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::get_OtherHand
// Il2CppName: get_OtherHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::DashboardSpawnPoint* (VROSC::DashboardSpawnPoint::*)()>(&VROSC::DashboardSpawnPoint::get_OtherHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "get_OtherHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::set_OtherHand
// Il2CppName: set_OtherHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardSpawnPoint::*)(::VROSC::DashboardSpawnPoint*)>(&VROSC::DashboardSpawnPoint::set_OtherHand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "DashboardSpawnPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "set_OtherHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::get_IsRightHand
// Il2CppName: get_IsRightHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::DashboardSpawnPoint::*)()>(&VROSC::DashboardSpawnPoint::get_IsRightHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "get_IsRightHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::set_IsRightHand
// Il2CppName: set_IsRightHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardSpawnPoint::*)(bool)>(&VROSC::DashboardSpawnPoint::set_IsRightHand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "set_IsRightHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::get_DashboardIsAtHand
// Il2CppName: get_DashboardIsAtHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::DashboardSpawnPoint::*)()>(&VROSC::DashboardSpawnPoint::get_DashboardIsAtHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "get_DashboardIsAtHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::set_DashboardIsAtHand
// Il2CppName: set_DashboardIsAtHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardSpawnPoint::*)(bool)>(&VROSC::DashboardSpawnPoint::set_DashboardIsAtHand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "set_DashboardIsAtHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::get_TransformedDirection
// Il2CppName: get_TransformedDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::DashboardSpawnPoint::*)()>(&VROSC::DashboardSpawnPoint::get_TransformedDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "get_TransformedDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::get_InputDevice
// Il2CppName: get_InputDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::InputDevice* (VROSC::DashboardSpawnPoint::*)()>(&VROSC::DashboardSpawnPoint::get_InputDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "get_InputDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::set_InputDevice
// Il2CppName: set_InputDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardSpawnPoint::*)(::VROSC::InputDevice*)>(&VROSC::DashboardSpawnPoint::set_InputDevice)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "set_InputDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardSpawnPoint::*)(::VROSC::InputDevice*, ::VROSC::DashboardSpawnPoint*, bool)>(&VROSC::DashboardSpawnPoint::Setup)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* otherHand = &::il2cpp_utils::GetClassFromName("VROSC", "DashboardSpawnPoint")->byval_arg;
    static auto* isRightHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice, otherHand, isRightHand});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardSpawnPoint::*)()>(&VROSC::DashboardSpawnPoint::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::ButtonPressEnd
// Il2CppName: ButtonPressEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardSpawnPoint::*)(::VROSC::InputDevice*, ::VROSC::TriggerButton)>(&VROSC::DashboardSpawnPoint::ButtonPressEnd)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* button = &::il2cpp_utils::GetClassFromName("VROSC", "TriggerButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "ButtonPressEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, button});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::ButtonPressBegin
// Il2CppName: ButtonPressBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardSpawnPoint::*)(::VROSC::InputDevice*, ::VROSC::TriggerButton)>(&VROSC::DashboardSpawnPoint::ButtonPressBegin)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* button = &::il2cpp_utils::GetClassFromName("VROSC", "TriggerButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "ButtonPressBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, button});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::SetActivationAmount
// Il2CppName: SetActivationAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardSpawnPoint::*)(float)>(&VROSC::DashboardSpawnPoint::SetActivationAmount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "SetActivationAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::CanOpenDashboard
// Il2CppName: CanOpenDashboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::DashboardSpawnPoint::*)(bool)>(&VROSC::DashboardSpawnPoint::CanOpenDashboard)> {
  static const MethodInfo* get() {
    static auto* dashboardIsAtHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "CanOpenDashboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dashboardIsAtHand});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::UpdateTriggerCondition
// Il2CppName: UpdateTriggerCondition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardSpawnPoint::*)(::VROSC::DashboardSpawnPoint::TriggerCondition, bool)>(&VROSC::DashboardSpawnPoint::UpdateTriggerCondition)> {
  static const MethodInfo* get() {
    static auto* condition = &::il2cpp_utils::GetClassFromName("VROSC", "DashboardSpawnPoint/TriggerCondition")->byval_arg;
    static auto* dashboardIsAtHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "UpdateTriggerCondition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{condition, dashboardIsAtHand});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::UpdateIsAtHand
// Il2CppName: UpdateIsAtHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardSpawnPoint::*)(bool)>(&VROSC::DashboardSpawnPoint::UpdateIsAtHand)> {
  static const MethodInfo* get() {
    static auto* dashboardIsAtHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "UpdateIsAtHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dashboardIsAtHand});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::IsTriggerConditionMet
// Il2CppName: IsTriggerConditionMet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::DashboardSpawnPoint::*)(::VROSC::DashboardSpawnPoint::TriggerCondition, bool)>(&VROSC::DashboardSpawnPoint::IsTriggerConditionMet)> {
  static const MethodInfo* get() {
    static auto* condition = &::il2cpp_utils::GetClassFromName("VROSC", "DashboardSpawnPoint/TriggerCondition")->byval_arg;
    static auto* dashboardIsAtHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "IsTriggerConditionMet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{condition, dashboardIsAtHand});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::DashboardSpawnPoint::*)()>(&VROSC::DashboardSpawnPoint::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::DashboardSpawnPoint*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::DashboardSpawnPoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
