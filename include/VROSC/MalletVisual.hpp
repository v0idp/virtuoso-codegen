// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: PredictiveHitWisp
  class PredictiveHitWisp;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: MalletVisual
  class MalletVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::MalletVisual);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::MalletVisual*, "VROSC", "MalletVisual");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.MalletVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class MalletVisual : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Transform _stick
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* stick;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _head
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* head;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Renderer _tipRenderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Renderer* tipRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.Renderer _stickRenderer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Renderer* stickRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private VROSC.PredictiveHitWisp _wisp
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::PredictiveHitWisp* wisp;
    // Field size check
    static_assert(sizeof(::VROSC::PredictiveHitWisp*) == 0x8);
    // private UnityEngine.Material _material
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Vector3 _headStartPosition
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 headStartPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Transform _stick
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__stick();
    // Get instance field reference: private UnityEngine.Transform _head
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__head();
    // Get instance field reference: private UnityEngine.Renderer _tipRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__tipRenderer();
    // Get instance field reference: private UnityEngine.Renderer _stickRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__stickRenderer();
    // Get instance field reference: private VROSC.PredictiveHitWisp _wisp
    [[deprecated("Use field access instead!")]] ::VROSC::PredictiveHitWisp*& dyn__wisp();
    // Get instance field reference: private UnityEngine.Material _material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__material();
    // Get instance field reference: private UnityEngine.Vector3 _headStartPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__headStartPosition();
    // public System.Void .ctor()
    // Offset: 0xAC0908
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MalletVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::MalletVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MalletVisual*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0xAC0678
    void Awake();
    // public System.Void SetColor(UnityEngine.Color color)
    // Offset: 0xAC0744
    void SetColor(::UnityEngine::Color color);
    // public System.Void SetLength(System.Single length)
    // Offset: 0xAC07EC
    void SetLength(float length);
    // public System.Void SetAngle(System.Single angle)
    // Offset: 0xAC0898
    void SetAngle(float angle);
  }; // VROSC.MalletVisual
  #pragma pack(pop)
  static check_size<sizeof(MalletVisual), 72 + sizeof(::UnityEngine::Vector3)> __VROSC_MalletVisualSizeCheck;
  static_assert(sizeof(MalletVisual) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::MalletVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::MalletVisual::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MalletVisual::*)()>(&VROSC::MalletVisual::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletVisual*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::MalletVisual::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MalletVisual::*)(::UnityEngine::Color)>(&VROSC::MalletVisual::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletVisual*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::MalletVisual::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MalletVisual::*)(float)>(&VROSC::MalletVisual::SetLength)> {
  static const MethodInfo* get() {
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletVisual*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{length});
  }
};
// Writing MetadataGetter for method: VROSC::MalletVisual::SetAngle
// Il2CppName: SetAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::MalletVisual::*)(float)>(&VROSC::MalletVisual::SetAngle)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::MalletVisual*), "SetAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle});
  }
};
