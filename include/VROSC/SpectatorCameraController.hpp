// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: SpectatorCameraAnchor
  class SpectatorCameraAnchor;
  // Forward declaring type: RenderLIV
  class RenderLIV;
  // Forward declaring type: CopyCameraOutputToRenderTexture
  class CopyCameraOutputToRenderTexture;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: SpectatorCameraController
  class SpectatorCameraController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::SpectatorCameraController);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::SpectatorCameraController*, "VROSC", "SpectatorCameraController");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x4D
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.SpectatorCameraController
  // [TokenAttribute] Offset: FFFFFFFF
  class SpectatorCameraController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Camera _spectatorCamera
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Camera* spectatorCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private VROSC.SpectatorCameraAnchor[] _cameraAnchors
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::VROSC::SpectatorCameraAnchor*> cameraAnchors;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::SpectatorCameraAnchor*>) == 0x8);
    // private System.Single _followSmoothDuration
    // Size: 0x4
    // Offset: 0x28
    float followSmoothDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _moveSmoothDuration
    // Size: 0x4
    // Offset: 0x2C
    float moveSmoothDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _fovSmoothDuration
    // Size: 0x4
    // Offset: 0x30
    float fovSmoothDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: fovSmoothDuration and: renderLIV
    char __padding4[0x4] = {};
    // private VROSC.RenderLIV _renderLIV
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::RenderLIV* renderLIV;
    // Field size check
    static_assert(sizeof(::VROSC::RenderLIV*) == 0x8);
    // private VROSC.CopyCameraOutputToRenderTexture _renderTextureOutput
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::CopyCameraOutputToRenderTexture* renderTextureOutput;
    // Field size check
    static_assert(sizeof(::VROSC::CopyCameraOutputToRenderTexture*) == 0x8);
    // private System.Int32 _activeIndex
    // Size: 0x4
    // Offset: 0x48
    int activeIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _enabled
    // Size: 0x1
    // Offset: 0x4C
    bool enabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private UnityEngine.LayerMask <EnvironmentMask>k__BackingField
    static ::UnityEngine::LayerMask _get_$EnvironmentMask$k__BackingField();
    // Set static field: static private UnityEngine.LayerMask <EnvironmentMask>k__BackingField
    static void _set_$EnvironmentMask$k__BackingField(::UnityEngine::LayerMask value);
    // Get static field: static private UnityEngine.LayerMask <PlayerMask>k__BackingField
    static ::UnityEngine::LayerMask _get_$PlayerMask$k__BackingField();
    // Set static field: static private UnityEngine.LayerMask <PlayerMask>k__BackingField
    static void _set_$PlayerMask$k__BackingField(::UnityEngine::LayerMask value);
    // Get instance field reference: private UnityEngine.Camera _spectatorCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn__spectatorCamera();
    // Get instance field reference: private VROSC.SpectatorCameraAnchor[] _cameraAnchors
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::SpectatorCameraAnchor*>& dyn__cameraAnchors();
    // Get instance field reference: private System.Single _followSmoothDuration
    [[deprecated("Use field access instead!")]] float& dyn__followSmoothDuration();
    // Get instance field reference: private System.Single _moveSmoothDuration
    [[deprecated("Use field access instead!")]] float& dyn__moveSmoothDuration();
    // Get instance field reference: private System.Single _fovSmoothDuration
    [[deprecated("Use field access instead!")]] float& dyn__fovSmoothDuration();
    // Get instance field reference: private VROSC.RenderLIV _renderLIV
    [[deprecated("Use field access instead!")]] ::VROSC::RenderLIV*& dyn__renderLIV();
    // Get instance field reference: private VROSC.CopyCameraOutputToRenderTexture _renderTextureOutput
    [[deprecated("Use field access instead!")]] ::VROSC::CopyCameraOutputToRenderTexture*& dyn__renderTextureOutput();
    // Get instance field reference: private System.Int32 _activeIndex
    [[deprecated("Use field access instead!")]] int& dyn__activeIndex();
    // Get instance field reference: private System.Boolean _enabled
    [[deprecated("Use field access instead!")]] bool& dyn__enabled();
    // public UnityEngine.Camera get_Camera()
    // Offset: 0x192DDF4
    ::UnityEngine::Camera* get_Camera();
    // static public UnityEngine.LayerMask get_EnvironmentMask()
    // Offset: 0x192DDFC
    static ::UnityEngine::LayerMask get_EnvironmentMask();
    // static private System.Void set_EnvironmentMask(UnityEngine.LayerMask value)
    // Offset: 0x192DE48
    static void set_EnvironmentMask(::UnityEngine::LayerMask value);
    // static public UnityEngine.LayerMask get_PlayerMask()
    // Offset: 0x192DE98
    static ::UnityEngine::LayerMask get_PlayerMask();
    // static private System.Void set_PlayerMask(UnityEngine.LayerMask value)
    // Offset: 0x192DEE4
    static void set_PlayerMask(::UnityEngine::LayerMask value);
    // public System.Int32 get_ActiveIndex()
    // Offset: 0x192DF34
    int get_ActiveIndex();
    // public VROSC.SpectatorCameraAnchor get_ActiveAnchor()
    // Offset: 0x192DF3C
    ::VROSC::SpectatorCameraAnchor* get_ActiveAnchor();
    // public System.Void .ctor()
    // Offset: 0x192EB6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpectatorCameraController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SpectatorCameraController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpectatorCameraController*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x192DFA4
    void Awake();
    // public System.Void SetSpectatorRenderTextureActive(System.Boolean active, System.Object source)
    // Offset: 0x192E21C
    void SetSpectatorRenderTextureActive(bool active, ::Il2CppObject* source);
    // public System.Void ChangeCamera(System.Int32 index, System.Boolean hideBackground)
    // Offset: 0x192E23C
    void ChangeCamera(int index, bool hideBackground);
    // public System.Void ApplyAnchorDefaultLayerMask()
    // Offset: 0x192E240
    void ApplyAnchorDefaultLayerMask();
    // private System.Void SetEnabled(System.Boolean isEnabled)
    // Offset: 0x192E1C4
    void SetEnabled(bool isEnabled);
    // public System.Collections.Generic.List`1<System.String> GetAnchorDisplayNames()
    // Offset: 0x192E244
    ::System::Collections::Generic::List_1<::StringW>* GetAnchorDisplayNames();
    // private System.Void MainStateEntered()
    // Offset: 0x192E354
    void MainStateEntered();
    // public System.Void ResetGrabbableCameraPosition()
    // Offset: 0x192E48C
    void ResetGrabbableCameraPosition();
    // private System.Void LivActivated()
    // Offset: 0x192E548
    void LivActivated();
    // private System.Void LivDeactivated()
    // Offset: 0x192E58C
    void LivDeactivated();
    // private System.Void UpdateHideBackgroundState()
    // Offset: 0x192E424
    void UpdateHideBackgroundState();
    // public System.Void SpectatorHideBackgroundToggled(System.Boolean toggled)
    // Offset: 0x192E5CC
    void SpectatorHideBackgroundToggled(bool toggled);
    // public System.Void SetKeyboardVisible(System.Boolean visible)
    // Offset: 0x192E994
    void SetKeyboardVisible(bool visible);
  }; // VROSC.SpectatorCameraController
  #pragma pack(pop)
  static check_size<sizeof(SpectatorCameraController), 76 + sizeof(bool)> __VROSC_SpectatorCameraControllerSizeCheck;
  static_assert(sizeof(SpectatorCameraController) == 0x4D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::get_Camera
// Il2CppName: get_Camera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Camera* (VROSC::SpectatorCameraController::*)()>(&VROSC::SpectatorCameraController::get_Camera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "get_Camera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::get_EnvironmentMask
// Il2CppName: get_EnvironmentMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (*)()>(&VROSC::SpectatorCameraController::get_EnvironmentMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "get_EnvironmentMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::set_EnvironmentMask
// Il2CppName: set_EnvironmentMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::LayerMask)>(&VROSC::SpectatorCameraController::set_EnvironmentMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "set_EnvironmentMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::get_PlayerMask
// Il2CppName: get_PlayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (*)()>(&VROSC::SpectatorCameraController::get_PlayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "get_PlayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::set_PlayerMask
// Il2CppName: set_PlayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::LayerMask)>(&VROSC::SpectatorCameraController::set_PlayerMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "set_PlayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::get_ActiveIndex
// Il2CppName: get_ActiveIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::SpectatorCameraController::*)()>(&VROSC::SpectatorCameraController::get_ActiveIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "get_ActiveIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::get_ActiveAnchor
// Il2CppName: get_ActiveAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::SpectatorCameraAnchor* (VROSC::SpectatorCameraController::*)()>(&VROSC::SpectatorCameraController::get_ActiveAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "get_ActiveAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraController::*)()>(&VROSC::SpectatorCameraController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::SetSpectatorRenderTextureActive
// Il2CppName: SetSpectatorRenderTextureActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraController::*)(bool, ::Il2CppObject*)>(&VROSC::SpectatorCameraController::SetSpectatorRenderTextureActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "SetSpectatorRenderTextureActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active, source});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::ChangeCamera
// Il2CppName: ChangeCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraController::*)(int, bool)>(&VROSC::SpectatorCameraController::ChangeCamera)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hideBackground = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "ChangeCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, hideBackground});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::ApplyAnchorDefaultLayerMask
// Il2CppName: ApplyAnchorDefaultLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraController::*)()>(&VROSC::SpectatorCameraController::ApplyAnchorDefaultLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "ApplyAnchorDefaultLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::SetEnabled
// Il2CppName: SetEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraController::*)(bool)>(&VROSC::SpectatorCameraController::SetEnabled)> {
  static const MethodInfo* get() {
    static auto* isEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "SetEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isEnabled});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::GetAnchorDisplayNames
// Il2CppName: GetAnchorDisplayNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (VROSC::SpectatorCameraController::*)()>(&VROSC::SpectatorCameraController::GetAnchorDisplayNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "GetAnchorDisplayNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::MainStateEntered
// Il2CppName: MainStateEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraController::*)()>(&VROSC::SpectatorCameraController::MainStateEntered)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "MainStateEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::ResetGrabbableCameraPosition
// Il2CppName: ResetGrabbableCameraPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraController::*)()>(&VROSC::SpectatorCameraController::ResetGrabbableCameraPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "ResetGrabbableCameraPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::LivActivated
// Il2CppName: LivActivated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraController::*)()>(&VROSC::SpectatorCameraController::LivActivated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "LivActivated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::LivDeactivated
// Il2CppName: LivDeactivated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraController::*)()>(&VROSC::SpectatorCameraController::LivDeactivated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "LivDeactivated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::UpdateHideBackgroundState
// Il2CppName: UpdateHideBackgroundState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraController::*)()>(&VROSC::SpectatorCameraController::UpdateHideBackgroundState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "UpdateHideBackgroundState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::SpectatorHideBackgroundToggled
// Il2CppName: SpectatorHideBackgroundToggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraController::*)(bool)>(&VROSC::SpectatorCameraController::SpectatorHideBackgroundToggled)> {
  static const MethodInfo* get() {
    static auto* toggled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "SpectatorHideBackgroundToggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toggled});
  }
};
// Writing MetadataGetter for method: VROSC::SpectatorCameraController::SetKeyboardVisible
// Il2CppName: SetKeyboardVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SpectatorCameraController::*)(bool)>(&VROSC::SpectatorCameraController::SetKeyboardVisible)> {
  static const MethodInfo* get() {
    static auto* visible = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SpectatorCameraController*), "SetKeyboardVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{visible});
  }
};
