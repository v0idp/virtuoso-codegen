// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VROSC.NoteBoard/VROSC.PlayAxis
#include "VROSC/NoteBoard_PlayAxis.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: NoteBoardNoteController
  class NoteBoardNoteController;
  // Forward declaring type: NoteBoardNoteText
  class NoteBoardNoteText;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: NoteBoardTextDisplay
  class NoteBoardTextDisplay;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::NoteBoardTextDisplay);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::NoteBoardTextDisplay*, "VROSC", "NoteBoardTextDisplay");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.NoteBoardTextDisplay
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteBoardTextDisplay : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::NoteBoardTextDisplay::$Animate$d__7
    class $Animate$d__7;
    public:
    // private VROSC.NoteBoardNoteController _controller
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::NoteBoardNoteController* controller;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoardNoteController*) == 0x8);
    // private VROSC.NoteBoard/VROSC.PlayAxis[] _displayAxises
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::VROSC::NoteBoard::PlayAxis> displayAxises;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::NoteBoard::PlayAxis>) == 0x8);
    // private System.Single _showDuration
    // Size: 0x4
    // Offset: 0x28
    float showDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _colorize
    // Size: 0x1
    // Offset: 0x2C
    bool colorize;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: colorize and: noteTexts
    char __padding3[0x3] = {};
    // private VROSC.NoteBoardNoteText[] _noteTexts
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::VROSC::NoteBoardNoteText*> noteTexts;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::NoteBoardNoteText*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.NoteBoardNoteController _controller
    [[deprecated("Use field access instead!")]] ::VROSC::NoteBoardNoteController*& dyn__controller();
    // Get instance field reference: private VROSC.NoteBoard/VROSC.PlayAxis[] _displayAxises
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::NoteBoard::PlayAxis>& dyn__displayAxises();
    // Get instance field reference: private System.Single _showDuration
    [[deprecated("Use field access instead!")]] float& dyn__showDuration();
    // Get instance field reference: private System.Boolean _colorize
    [[deprecated("Use field access instead!")]] bool& dyn__colorize();
    // Get instance field reference: private VROSC.NoteBoardNoteText[] _noteTexts
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::NoteBoardNoteText*>& dyn__noteTexts();
    // public System.Void .ctor()
    // Offset: 0xC58848
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteBoardTextDisplay* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteBoardTextDisplay::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteBoardTextDisplay*, creationType>()));
    }
    // private System.Void OnEnable()
    // Offset: 0xC5868C
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0xC5883C
    void OnDisable();
    // private System.Collections.IEnumerator Animate()
    // Offset: 0xC58740
    ::System::Collections::IEnumerator* Animate();
    // private System.Void SetAllActive(System.Boolean active, VROSC.NoteBoard/VROSC.PlayAxis axis)
    // Offset: 0xC587AC
    void SetAllActive(bool active, ::VROSC::NoteBoard::PlayAxis axis);
  }; // VROSC.NoteBoardTextDisplay
  #pragma pack(pop)
  static check_size<sizeof(NoteBoardTextDisplay), 48 + sizeof(::ArrayW<::VROSC::NoteBoardNoteText*>)> __VROSC_NoteBoardTextDisplaySizeCheck;
  static_assert(sizeof(NoteBoardTextDisplay) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::NoteBoardTextDisplay::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::NoteBoardTextDisplay::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteBoardTextDisplay::*)()>(&VROSC::NoteBoardTextDisplay::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteBoardTextDisplay*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteBoardTextDisplay::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteBoardTextDisplay::*)()>(&VROSC::NoteBoardTextDisplay::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteBoardTextDisplay*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteBoardTextDisplay::Animate
// Il2CppName: Animate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (VROSC::NoteBoardTextDisplay::*)()>(&VROSC::NoteBoardTextDisplay::Animate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteBoardTextDisplay*), "Animate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteBoardTextDisplay::SetAllActive
// Il2CppName: SetAllActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteBoardTextDisplay::*)(bool, ::VROSC::NoteBoard::PlayAxis)>(&VROSC::NoteBoardTextDisplay::SetAllActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("VROSC", "NoteBoard/PlayAxis")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteBoardTextDisplay*), "SetAllActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active, axis});
  }
};
