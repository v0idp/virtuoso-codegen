// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: MalletVisual
  class MalletVisual;
  // Forward declaring type: PredictiveHittable
  class PredictiveHittable;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: TrailRenderer
  class TrailRenderer;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: PredictiveHitWisp
  class PredictiveHitWisp;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::PredictiveHitWisp);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::PredictiveHitWisp*, "VROSC", "PredictiveHitWisp");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.PredictiveHitWisp
  // [TokenAttribute] Offset: FFFFFFFF
  class PredictiveHitWisp : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::PredictiveHitWisp::ParticleEffect
    class ParticleEffect;
    // Nested type: ::VROSC::PredictiveHitWisp::$SetAtHitpoint$d__7
    struct $SetAtHitpoint$d__7;
    public:
    // private UnityEngine.Transform _wisp
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* wisp;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Int32 remainMs
    // Size: 0x4
    // Offset: 0x20
    int remainMs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: remainMs and: particleEffects
    char __padding1[0x4] = {};
    // private VROSC.PredictiveHitWisp/VROSC.ParticleEffect[] _particleEffects
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::VROSC::PredictiveHitWisp::ParticleEffect*> particleEffects;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::PredictiveHitWisp::ParticleEffect*>) == 0x8);
    // private UnityEngine.Transform _lookAtPoint
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* lookAtPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.TrailRenderer _trailRenderer
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::TrailRenderer* trailRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::TrailRenderer*) == 0x8);
    // private VROSC.MalletVisual _malletVisual
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::MalletVisual* malletVisual;
    // Field size check
    static_assert(sizeof(::VROSC::MalletVisual*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Transform _wisp
    [[deprecated]] ::UnityEngine::Transform*& dyn__wisp();
    // Get instance field reference: private System.Int32 remainMs
    [[deprecated]] int& dyn_remainMs();
    // Get instance field reference: private VROSC.PredictiveHitWisp/VROSC.ParticleEffect[] _particleEffects
    [[deprecated]] ::ArrayW<::VROSC::PredictiveHitWisp::ParticleEffect*>& dyn__particleEffects();
    // Get instance field reference: private UnityEngine.Transform _lookAtPoint
    [[deprecated]] ::UnityEngine::Transform*& dyn__lookAtPoint();
    // Get instance field reference: private UnityEngine.TrailRenderer _trailRenderer
    [[deprecated]] ::UnityEngine::TrailRenderer*& dyn__trailRenderer();
    // Get instance field reference: private VROSC.MalletVisual _malletVisual
    [[deprecated]] ::VROSC::MalletVisual*& dyn__malletVisual();
    // public System.Void SetAtHitpoint(System.Double dspTime, UnityEngine.Vector3 hitpoint, VROSC.PredictiveHittable predictiveHittable)
    // Offset: 0xAE2B84
    void SetAtHitpoint(double dspTime, ::UnityEngine::Vector3 hitpoint, ::VROSC::PredictiveHittable* predictiveHittable);
    // public System.Void SetTrailColor(UnityEngine.Color color)
    // Offset: 0xAE2C80
    void SetTrailColor(::UnityEngine::Color color);
    // public System.Void .ctor()
    // Offset: 0xAE2CFC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PredictiveHitWisp* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::PredictiveHitWisp::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PredictiveHitWisp*, creationType>()));
    }
  }; // VROSC.PredictiveHitWisp
  #pragma pack(pop)
  static check_size<sizeof(PredictiveHitWisp), 64 + sizeof(::VROSC::MalletVisual*)> __VROSC_PredictiveHitWispSizeCheck;
  static_assert(sizeof(PredictiveHitWisp) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::PredictiveHitWisp::SetAtHitpoint
// Il2CppName: SetAtHitpoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PredictiveHitWisp::*)(double, ::UnityEngine::Vector3, ::VROSC::PredictiveHittable*)>(&VROSC::PredictiveHitWisp::SetAtHitpoint)> {
  static const MethodInfo* get() {
    static auto* dspTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* hitpoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* predictiveHittable = &::il2cpp_utils::GetClassFromName("VROSC", "PredictiveHittable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PredictiveHitWisp*), "SetAtHitpoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspTime, hitpoint, predictiveHittable});
  }
};
// Writing MetadataGetter for method: VROSC::PredictiveHitWisp::SetTrailColor
// Il2CppName: SetTrailColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::PredictiveHitWisp::*)(::UnityEngine::Color)>(&VROSC::PredictiveHitWisp::SetTrailColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::PredictiveHitWisp*), "SetTrailColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::PredictiveHitWisp::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
