// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.PaginatedListItemData
#include "VROSC/PaginatedListItemData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: SessionUIData
  class SessionUIData;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: SessionItemData
  class SessionItemData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::SessionItemData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::SessionItemData*, "VROSC", "SessionItemData");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.SessionItemData
  // [TokenAttribute] Offset: FFFFFFFF
  class SessionItemData : public ::VROSC::PaginatedListItemData {
    public:
    public:
    // private System.String <ID>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW _ID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private VROSC.SessionUIData <Data>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::SessionUIData* Data;
    // Field size check
    static_assert(sizeof(::VROSC::SessionUIData*) == 0x8);
    public:
    // Get instance field reference: private System.String <ID>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$ID$k__BackingField();
    // Get instance field reference: private VROSC.SessionUIData <Data>k__BackingField
    [[deprecated("Use field access instead!")]] ::VROSC::SessionUIData*& dyn_$Data$k__BackingField();
    // public System.String get_ID()
    // Offset: 0x1986FD0
    ::StringW get_ID();
    // private System.Void set_ID(System.String value)
    // Offset: 0x1986FC8
    void set_ID(::StringW value);
    // public VROSC.SessionUIData get_Data()
    // Offset: 0x1986FE0
    ::VROSC::SessionUIData* get_Data();
    // private System.Void set_Data(VROSC.SessionUIData value)
    // Offset: 0x1986FD8
    void set_Data(::VROSC::SessionUIData* value);
    // public System.Void .ctor(System.String id, VROSC.SessionUIData data)
    // Offset: 0x1986FE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SessionItemData* New_ctor(::StringW id, ::VROSC::SessionUIData* data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SessionItemData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SessionItemData*, creationType>(id, data)));
    }
    // public System.Void Set(VROSC.SessionUIData data)
    // Offset: 0x1987020
    void Set(::VROSC::SessionUIData* data);
  }; // VROSC.SessionItemData
  #pragma pack(pop)
  static check_size<sizeof(SessionItemData), 24 + sizeof(::VROSC::SessionUIData*)> __VROSC_SessionItemDataSizeCheck;
  static_assert(sizeof(SessionItemData) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::SessionItemData::get_ID
// Il2CppName: get_ID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::SessionItemData::*)()>(&VROSC::SessionItemData::get_ID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SessionItemData*), "get_ID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SessionItemData::set_ID
// Il2CppName: set_ID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SessionItemData::*)(::StringW)>(&VROSC::SessionItemData::set_ID)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SessionItemData*), "set_ID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::SessionItemData::get_Data
// Il2CppName: get_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::SessionUIData* (VROSC::SessionItemData::*)()>(&VROSC::SessionItemData::get_Data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SessionItemData*), "get_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SessionItemData::set_Data
// Il2CppName: set_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SessionItemData::*)(::VROSC::SessionUIData*)>(&VROSC::SessionItemData::set_Data)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "SessionUIData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SessionItemData*), "set_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::SessionItemData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::SessionItemData::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SessionItemData::*)(::VROSC::SessionUIData*)>(&VROSC::SessionItemData::Set)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("VROSC", "SessionUIData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SessionItemData*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
