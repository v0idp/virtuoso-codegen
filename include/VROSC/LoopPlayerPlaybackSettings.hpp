// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Including type: VROSC.LoopPlaybackConfig
#include "VROSC/LoopPlaybackConfig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopPlaybackConfigOverride
  class LoopPlaybackConfigOverride;
  // Forward declaring type: Loop
  class Loop;
  // Forward declaring type: LoopPlayerPlaybackStoppedState
  class LoopPlayerPlaybackStoppedState;
  // Forward declaring type: LoopPlayerPlaybackWillStartState
  class LoopPlayerPlaybackWillStartState;
  // Forward declaring type: LoopPlayerPlaybackLoopingState
  class LoopPlayerPlaybackLoopingState;
  // Forward declaring type: LoopPlayerPlaybackWillStopState
  class LoopPlayerPlaybackWillStopState;
  // Forward declaring type: LoopPlayerPlaybackState
  class LoopPlayerPlaybackState;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopPlayerPlaybackSettings
  class LoopPlayerPlaybackSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::LoopPlayerPlaybackSettings);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LoopPlayerPlaybackSettings*, "VROSC", "LoopPlayerPlaybackSettings");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.LoopPlayerPlaybackSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class LoopPlayerPlaybackSettings : public ::Il2CppObject {
    public:
    public:
    // private VROSC.LoopPlaybackConfig <LocalPlaybackConfig>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::VROSC::LoopPlaybackConfig* LocalPlaybackConfig;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlaybackConfig*) == 0x8);
    // private VROSC.LoopPlaybackConfig <PlayingConfig>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::LoopPlaybackConfig* PlayingConfig;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlaybackConfig*) == 0x8);
    // private VROSC.Loop <Loop>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::Loop* Loop;
    // Field size check
    static_assert(sizeof(::VROSC::Loop*) == 0x8);
    // private VROSC.LoopPlayerPlaybackStoppedState <StoppedState>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::LoopPlayerPlaybackStoppedState* StoppedState;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlayerPlaybackStoppedState*) == 0x8);
    // private VROSC.LoopPlayerPlaybackWillStartState <WillStartState>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::LoopPlayerPlaybackWillStartState* WillStartState;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlayerPlaybackWillStartState*) == 0x8);
    // private VROSC.LoopPlayerPlaybackLoopingState <LoopingState>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::LoopPlayerPlaybackLoopingState* LoopingState;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlayerPlaybackLoopingState*) == 0x8);
    // private VROSC.LoopPlayerPlaybackWillStopState <WillStopState>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::LoopPlayerPlaybackWillStopState* WillStopState;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlayerPlaybackWillStopState*) == 0x8);
    // private VROSC.LoopPlayerPlaybackState <CurrentState>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::LoopPlayerPlaybackState* CurrentState;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlayerPlaybackState*) == 0x8);
    // private VROSC.LoopPlayerPlaybackState <NextState>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::VROSC::LoopPlayerPlaybackState* NextState;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlayerPlaybackState*) == 0x8);
    // private System.Boolean <Active>k__BackingField
    // Size: 0x1
    // Offset: 0x58
    bool Active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <Playing>k__BackingField
    // Size: 0x1
    // Offset: 0x59
    bool Playing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Playing and: FadeMultiplier
    char __padding10[0x2] = {};
    // private System.Single <FadeMultiplier>k__BackingField
    // Size: 0x4
    // Offset: 0x5C
    float FadeMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 <PlayFromStartOffset>k__BackingField
    // Size: 0x4
    // Offset: 0x60
    int PlayFromStartOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <StartOffsetBarRelative>k__BackingField
    // Size: 0x4
    // Offset: 0x64
    int StartOffsetBarRelative;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _wasPlaying
    // Size: 0x1
    // Offset: 0x68
    bool wasPlaying;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _startedWithPlayFromStart
    // Size: 0x1
    // Offset: 0x69
    bool startedWithPlayFromStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: startedWithPlayFromStart and: noTailLoops
    char __padding15[0x2] = {};
    // private System.Int32 _noTailLoops
    // Size: 0x4
    // Offset: 0x6C
    int noTailLoops;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _fadeWithNaturalTail
    // Size: 0x1
    // Offset: 0x70
    bool fadeWithNaturalTail;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fadeWithNaturalTail and: playedLength
    char __padding17[0x3] = {};
    // private System.Int32 _playedLength
    // Size: 0x4
    // Offset: 0x74
    int playedLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _allowedLeadupToNoTailLoop
    // Size: 0x4
    // Offset: 0x78
    int allowedLeadupToNoTailLoop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: allowedLeadupToNoTailLoop and: OnPlayingStart
    char __padding19[0x4] = {};
    // public System.Action OnPlayingStart
    // Size: 0x8
    // Offset: 0x80
    ::System::Action* OnPlayingStart;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Action OnPlayingEnd
    // Size: 0x8
    // Offset: 0x88
    ::System::Action* OnPlayingEnd;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Action`1<VROSC.LoopPlayerPlaybackState> OnStateChanged
    // Size: 0x8
    // Offset: 0x90
    ::System::Action_1<::VROSC::LoopPlayerPlaybackState*>* OnStateChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<::VROSC::LoopPlayerPlaybackState*>*) == 0x8);
    public:
    // static field const value: static private System.Single AllowedLeadupToNoTailLoopInSeconds
    static constexpr const float AllowedLeadupToNoTailLoopInSeconds = 0.1;
    // Get static field: static private System.Single AllowedLeadupToNoTailLoopInSeconds
    static float _get_AllowedLeadupToNoTailLoopInSeconds();
    // Set static field: static private System.Single AllowedLeadupToNoTailLoopInSeconds
    static void _set_AllowedLeadupToNoTailLoopInSeconds(float value);
    // Get instance field reference: private VROSC.LoopPlaybackConfig <LocalPlaybackConfig>k__BackingField
    [[deprecated("Use field access instead!")]] ::VROSC::LoopPlaybackConfig*& dyn_$LocalPlaybackConfig$k__BackingField();
    // Get instance field reference: private VROSC.LoopPlaybackConfig <PlayingConfig>k__BackingField
    [[deprecated("Use field access instead!")]] ::VROSC::LoopPlaybackConfig*& dyn_$PlayingConfig$k__BackingField();
    // Get instance field reference: private VROSC.Loop <Loop>k__BackingField
    [[deprecated("Use field access instead!")]] ::VROSC::Loop*& dyn_$Loop$k__BackingField();
    // Get instance field reference: private VROSC.LoopPlayerPlaybackStoppedState <StoppedState>k__BackingField
    [[deprecated("Use field access instead!")]] ::VROSC::LoopPlayerPlaybackStoppedState*& dyn_$StoppedState$k__BackingField();
    // Get instance field reference: private VROSC.LoopPlayerPlaybackWillStartState <WillStartState>k__BackingField
    [[deprecated("Use field access instead!")]] ::VROSC::LoopPlayerPlaybackWillStartState*& dyn_$WillStartState$k__BackingField();
    // Get instance field reference: private VROSC.LoopPlayerPlaybackLoopingState <LoopingState>k__BackingField
    [[deprecated("Use field access instead!")]] ::VROSC::LoopPlayerPlaybackLoopingState*& dyn_$LoopingState$k__BackingField();
    // Get instance field reference: private VROSC.LoopPlayerPlaybackWillStopState <WillStopState>k__BackingField
    [[deprecated("Use field access instead!")]] ::VROSC::LoopPlayerPlaybackWillStopState*& dyn_$WillStopState$k__BackingField();
    // Get instance field reference: private VROSC.LoopPlayerPlaybackState <CurrentState>k__BackingField
    [[deprecated("Use field access instead!")]] ::VROSC::LoopPlayerPlaybackState*& dyn_$CurrentState$k__BackingField();
    // Get instance field reference: private VROSC.LoopPlayerPlaybackState <NextState>k__BackingField
    [[deprecated("Use field access instead!")]] ::VROSC::LoopPlayerPlaybackState*& dyn_$NextState$k__BackingField();
    // Get instance field reference: private System.Boolean <Active>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Active$k__BackingField();
    // Get instance field reference: private System.Boolean <Playing>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Playing$k__BackingField();
    // Get instance field reference: private System.Single <FadeMultiplier>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$FadeMultiplier$k__BackingField();
    // Get instance field reference: private System.Int32 <PlayFromStartOffset>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$PlayFromStartOffset$k__BackingField();
    // Get instance field reference: private System.Int32 <StartOffsetBarRelative>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$StartOffsetBarRelative$k__BackingField();
    // Get instance field reference: private System.Boolean _wasPlaying
    [[deprecated("Use field access instead!")]] bool& dyn__wasPlaying();
    // Get instance field reference: private System.Boolean _startedWithPlayFromStart
    [[deprecated("Use field access instead!")]] bool& dyn__startedWithPlayFromStart();
    // Get instance field reference: private System.Int32 _noTailLoops
    [[deprecated("Use field access instead!")]] int& dyn__noTailLoops();
    // Get instance field reference: private System.Boolean _fadeWithNaturalTail
    [[deprecated("Use field access instead!")]] bool& dyn__fadeWithNaturalTail();
    // Get instance field reference: private System.Int32 _playedLength
    [[deprecated("Use field access instead!")]] int& dyn__playedLength();
    // Get instance field reference: private System.Int32 _allowedLeadupToNoTailLoop
    [[deprecated("Use field access instead!")]] int& dyn__allowedLeadupToNoTailLoop();
    // Get instance field reference: public System.Action OnPlayingStart
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnPlayingStart();
    // Get instance field reference: public System.Action OnPlayingEnd
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnPlayingEnd();
    // Get instance field reference: public System.Action`1<VROSC.LoopPlayerPlaybackState> OnStateChanged
    [[deprecated("Use field access instead!")]] ::System::Action_1<::VROSC::LoopPlayerPlaybackState*>*& dyn_OnStateChanged();
    // public VROSC.LoopPlaybackConfig get_LocalPlaybackConfig()
    // Offset: 0x19BD4A4
    ::VROSC::LoopPlaybackConfig* get_LocalPlaybackConfig();
    // private System.Void set_LocalPlaybackConfig(VROSC.LoopPlaybackConfig value)
    // Offset: 0x19BD49C
    void set_LocalPlaybackConfig(::VROSC::LoopPlaybackConfig* value);
    // public VROSC.LoopPlaybackConfig get_PlayingConfig()
    // Offset: 0x19BD4B4
    ::VROSC::LoopPlaybackConfig* get_PlayingConfig();
    // private System.Void set_PlayingConfig(VROSC.LoopPlaybackConfig value)
    // Offset: 0x19BD4AC
    void set_PlayingConfig(::VROSC::LoopPlaybackConfig* value);
    // public VROSC.Loop get_Loop()
    // Offset: 0x19BD4C4
    ::VROSC::Loop* get_Loop();
    // private System.Void set_Loop(VROSC.Loop value)
    // Offset: 0x19BD4BC
    void set_Loop(::VROSC::Loop* value);
    // public VROSC.LoopPlayerPlaybackStoppedState get_StoppedState()
    // Offset: 0x19BD4D4
    ::VROSC::LoopPlayerPlaybackStoppedState* get_StoppedState();
    // private System.Void set_StoppedState(VROSC.LoopPlayerPlaybackStoppedState value)
    // Offset: 0x19BD4CC
    void set_StoppedState(::VROSC::LoopPlayerPlaybackStoppedState* value);
    // public VROSC.LoopPlayerPlaybackWillStartState get_WillStartState()
    // Offset: 0x19BD4E4
    ::VROSC::LoopPlayerPlaybackWillStartState* get_WillStartState();
    // private System.Void set_WillStartState(VROSC.LoopPlayerPlaybackWillStartState value)
    // Offset: 0x19BD4DC
    void set_WillStartState(::VROSC::LoopPlayerPlaybackWillStartState* value);
    // public VROSC.LoopPlayerPlaybackLoopingState get_LoopingState()
    // Offset: 0x19BD4F4
    ::VROSC::LoopPlayerPlaybackLoopingState* get_LoopingState();
    // private System.Void set_LoopingState(VROSC.LoopPlayerPlaybackLoopingState value)
    // Offset: 0x19BD4EC
    void set_LoopingState(::VROSC::LoopPlayerPlaybackLoopingState* value);
    // public VROSC.LoopPlayerPlaybackWillStopState get_WillStopState()
    // Offset: 0x19BD504
    ::VROSC::LoopPlayerPlaybackWillStopState* get_WillStopState();
    // private System.Void set_WillStopState(VROSC.LoopPlayerPlaybackWillStopState value)
    // Offset: 0x19BD4FC
    void set_WillStopState(::VROSC::LoopPlayerPlaybackWillStopState* value);
    // public VROSC.LoopPlayerPlaybackState get_CurrentState()
    // Offset: 0x19BD514
    ::VROSC::LoopPlayerPlaybackState* get_CurrentState();
    // private System.Void set_CurrentState(VROSC.LoopPlayerPlaybackState value)
    // Offset: 0x19BD50C
    void set_CurrentState(::VROSC::LoopPlayerPlaybackState* value);
    // public VROSC.LoopPlayerPlaybackState get_NextState()
    // Offset: 0x19BD524
    ::VROSC::LoopPlayerPlaybackState* get_NextState();
    // private System.Void set_NextState(VROSC.LoopPlayerPlaybackState value)
    // Offset: 0x19BD51C
    void set_NextState(::VROSC::LoopPlayerPlaybackState* value);
    // public System.Boolean get_Active()
    // Offset: 0x19BD538
    bool get_Active();
    // private System.Void set_Active(System.Boolean value)
    // Offset: 0x19BD52C
    void set_Active(bool value);
    // public System.Boolean get_Playing()
    // Offset: 0x19BD54C
    bool get_Playing();
    // private System.Void set_Playing(System.Boolean value)
    // Offset: 0x19BD540
    void set_Playing(bool value);
    // public System.Boolean get_WaitingToStart()
    // Offset: 0x19BC724
    bool get_WaitingToStart();
    // public System.Single get_FadeMultiplier()
    // Offset: 0x19BD56C
    float get_FadeMultiplier();
    // private System.Void set_FadeMultiplier(System.Single value)
    // Offset: 0x19BD564
    void set_FadeMultiplier(float value);
    // public System.Int32 get_PlayFromStartOffset()
    // Offset: 0x19BD57C
    int get_PlayFromStartOffset();
    // private System.Void set_PlayFromStartOffset(System.Int32 value)
    // Offset: 0x19BD574
    void set_PlayFromStartOffset(int value);
    // public System.Int32 get_StartOffsetBarRelative()
    // Offset: 0x19BD58C
    int get_StartOffsetBarRelative();
    // private System.Void set_StartOffsetBarRelative(System.Int32 value)
    // Offset: 0x19BD584
    void set_StartOffsetBarRelative(int value);
    // public System.Void .ctor()
    // Offset: 0x19BBB00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoopPlayerPlaybackSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::LoopPlayerPlaybackSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoopPlayerPlaybackSettings*, creationType>()));
    }
    // public System.Void Setup(VROSC.Loop loop, VROSC.LoopPlaybackConfig config)
    // Offset: 0x19BBB18
    void Setup(::VROSC::Loop* loop, ::VROSC::LoopPlaybackConfig* config);
    // private System.Void SetStart(VROSC.LoopPlaybackConfig/VROSC.TriggerSync mode)
    // Offset: 0x19BD5D8
    void SetStart(::VROSC::LoopPlaybackConfig::TriggerSync mode);
    // private System.Void SetStop(VROSC.LoopPlaybackConfig/VROSC.TriggerSync mode)
    // Offset: 0x19BD5DC
    void SetStop(::VROSC::LoopPlaybackConfig::TriggerSync mode);
    // private System.Void SetFadeIn(VROSC.LoopPlaybackConfig/VROSC.FadeDuration mode)
    // Offset: 0x19BD5E0
    void SetFadeIn(::VROSC::LoopPlaybackConfig::FadeDuration mode);
    // private System.Void SetFadeOut(VROSC.LoopPlaybackConfig/VROSC.FadeDuration mode)
    // Offset: 0x19BD5E4
    void SetFadeOut(::VROSC::LoopPlaybackConfig::FadeDuration mode);
    // System.Void SetOneShot(System.Boolean oneShot)
    // Offset: 0x19BD8AC
    void SetOneShot(bool oneShot);
    // private System.Void SetRetrigger(System.Boolean retrigger)
    // Offset: 0x19BDA54
    void SetRetrigger(bool retrigger);
    // public System.Void StartRequested(VROSC.LoopPlaybackConfig config)
    // Offset: 0x19BC24C
    void StartRequested(::VROSC::LoopPlaybackConfig* config);
    // System.Boolean ShouldShowPlayIcon()
    // Offset: 0x19BC6AC
    bool ShouldShowPlayIcon();
    // System.Void UpdatePlayConfig(VROSC.LoopPlaybackConfigOverride newConfig)
    // Offset: 0x19BC634
    void UpdatePlayConfig(::VROSC::LoopPlaybackConfigOverride* newConfig);
    // public System.Void StopRequested(System.Int32 atSample, System.Boolean instant)
    // Offset: 0x19BC1AC
    void StopRequested(int atSample, bool instant);
    // private System.Void ProgressState(System.Int32 atSample)
    // Offset: 0x19BDB70
    void ProgressState(int atSample);
    // private System.Void SetState(VROSC.LoopPlayerPlaybackState currentState, System.Int32 atSample)
    // Offset: 0x19BDAC0
    void SetState(::VROSC::LoopPlayerPlaybackState* currentState, int atSample);
    // private System.Void PerformIsPlayingCheck()
    // Offset: 0x19BDBCC
    void PerformIsPlayingCheck();
    // public System.Boolean ShouldCheckActivityChangeBeforeSample(System.Int32 samples)
    // Offset: 0x19BDC58
    bool ShouldCheckActivityChangeBeforeSample(int samples);
    // public System.Boolean ShouldUpdateFading()
    // Offset: 0x19BDCB4
    bool ShouldUpdateFading();
    // public System.Boolean CheckForStateSwitchThisSample(System.Int32 atSample)
    // Offset: 0x19BDCD0
    bool CheckForStateSwitchThisSample(int atSample);
    // public System.Void UpdateFading(System.Int32 atSample)
    // Offset: 0x19BDDB4
    void UpdateFading(int atSample);
    // private System.Int32 GetNextLoopPointFromOffsetStart(System.Int32 startSample)
    // Offset: 0x19BD960
    int GetNextLoopPointFromOffsetStart(int startSample);
    // public System.Void RenderPlaybackData(System.Single[] data, System.Int32 channels)
    // Offset: 0x19BC84C
    void RenderPlaybackData(::ArrayW<float> data, int channels);
    // private System.Int32 GetLocalLoopSampleIndex(System.Int32 channels, System.Int32 atSample)
    // Offset: 0x19BDDF4
    int GetLocalLoopSampleIndex(int channels, int atSample);
  }; // VROSC.LoopPlayerPlaybackSettings
  #pragma pack(pop)
  static check_size<sizeof(LoopPlayerPlaybackSettings), 144 + sizeof(::System::Action_1<::VROSC::LoopPlayerPlaybackState*>*)> __VROSC_LoopPlayerPlaybackSettingsSizeCheck;
  static_assert(sizeof(LoopPlayerPlaybackSettings) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::get_LocalPlaybackConfig
// Il2CppName: get_LocalPlaybackConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlaybackConfig* (VROSC::LoopPlayerPlaybackSettings::*)()>(&VROSC::LoopPlayerPlaybackSettings::get_LocalPlaybackConfig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "get_LocalPlaybackConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::set_LocalPlaybackConfig
// Il2CppName: set_LocalPlaybackConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(::VROSC::LoopPlaybackConfig*)>(&VROSC::LoopPlayerPlaybackSettings::set_LocalPlaybackConfig)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlaybackConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "set_LocalPlaybackConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::get_PlayingConfig
// Il2CppName: get_PlayingConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlaybackConfig* (VROSC::LoopPlayerPlaybackSettings::*)()>(&VROSC::LoopPlayerPlaybackSettings::get_PlayingConfig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "get_PlayingConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::set_PlayingConfig
// Il2CppName: set_PlayingConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(::VROSC::LoopPlaybackConfig*)>(&VROSC::LoopPlayerPlaybackSettings::set_PlayingConfig)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlaybackConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "set_PlayingConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::get_Loop
// Il2CppName: get_Loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::Loop* (VROSC::LoopPlayerPlaybackSettings::*)()>(&VROSC::LoopPlayerPlaybackSettings::get_Loop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "get_Loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::set_Loop
// Il2CppName: set_Loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(::VROSC::Loop*)>(&VROSC::LoopPlayerPlaybackSettings::set_Loop)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "Loop")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "set_Loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::get_StoppedState
// Il2CppName: get_StoppedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlayerPlaybackStoppedState* (VROSC::LoopPlayerPlaybackSettings::*)()>(&VROSC::LoopPlayerPlaybackSettings::get_StoppedState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "get_StoppedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::set_StoppedState
// Il2CppName: set_StoppedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(::VROSC::LoopPlayerPlaybackStoppedState*)>(&VROSC::LoopPlayerPlaybackSettings::set_StoppedState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayerPlaybackStoppedState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "set_StoppedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::get_WillStartState
// Il2CppName: get_WillStartState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlayerPlaybackWillStartState* (VROSC::LoopPlayerPlaybackSettings::*)()>(&VROSC::LoopPlayerPlaybackSettings::get_WillStartState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "get_WillStartState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::set_WillStartState
// Il2CppName: set_WillStartState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(::VROSC::LoopPlayerPlaybackWillStartState*)>(&VROSC::LoopPlayerPlaybackSettings::set_WillStartState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayerPlaybackWillStartState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "set_WillStartState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::get_LoopingState
// Il2CppName: get_LoopingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlayerPlaybackLoopingState* (VROSC::LoopPlayerPlaybackSettings::*)()>(&VROSC::LoopPlayerPlaybackSettings::get_LoopingState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "get_LoopingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::set_LoopingState
// Il2CppName: set_LoopingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(::VROSC::LoopPlayerPlaybackLoopingState*)>(&VROSC::LoopPlayerPlaybackSettings::set_LoopingState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayerPlaybackLoopingState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "set_LoopingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::get_WillStopState
// Il2CppName: get_WillStopState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlayerPlaybackWillStopState* (VROSC::LoopPlayerPlaybackSettings::*)()>(&VROSC::LoopPlayerPlaybackSettings::get_WillStopState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "get_WillStopState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::set_WillStopState
// Il2CppName: set_WillStopState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(::VROSC::LoopPlayerPlaybackWillStopState*)>(&VROSC::LoopPlayerPlaybackSettings::set_WillStopState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayerPlaybackWillStopState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "set_WillStopState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::get_CurrentState
// Il2CppName: get_CurrentState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlayerPlaybackState* (VROSC::LoopPlayerPlaybackSettings::*)()>(&VROSC::LoopPlayerPlaybackSettings::get_CurrentState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "get_CurrentState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::set_CurrentState
// Il2CppName: set_CurrentState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(::VROSC::LoopPlayerPlaybackState*)>(&VROSC::LoopPlayerPlaybackSettings::set_CurrentState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayerPlaybackState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "set_CurrentState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::get_NextState
// Il2CppName: get_NextState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlayerPlaybackState* (VROSC::LoopPlayerPlaybackSettings::*)()>(&VROSC::LoopPlayerPlaybackSettings::get_NextState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "get_NextState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::set_NextState
// Il2CppName: set_NextState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(::VROSC::LoopPlayerPlaybackState*)>(&VROSC::LoopPlayerPlaybackSettings::set_NextState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayerPlaybackState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "set_NextState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopPlayerPlaybackSettings::*)()>(&VROSC::LoopPlayerPlaybackSettings::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::set_Active
// Il2CppName: set_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(bool)>(&VROSC::LoopPlayerPlaybackSettings::set_Active)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "set_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::get_Playing
// Il2CppName: get_Playing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopPlayerPlaybackSettings::*)()>(&VROSC::LoopPlayerPlaybackSettings::get_Playing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "get_Playing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::set_Playing
// Il2CppName: set_Playing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(bool)>(&VROSC::LoopPlayerPlaybackSettings::set_Playing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "set_Playing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::get_WaitingToStart
// Il2CppName: get_WaitingToStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopPlayerPlaybackSettings::*)()>(&VROSC::LoopPlayerPlaybackSettings::get_WaitingToStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "get_WaitingToStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::get_FadeMultiplier
// Il2CppName: get_FadeMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VROSC::LoopPlayerPlaybackSettings::*)()>(&VROSC::LoopPlayerPlaybackSettings::get_FadeMultiplier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "get_FadeMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::set_FadeMultiplier
// Il2CppName: set_FadeMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(float)>(&VROSC::LoopPlayerPlaybackSettings::set_FadeMultiplier)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "set_FadeMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::get_PlayFromStartOffset
// Il2CppName: get_PlayFromStartOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::LoopPlayerPlaybackSettings::*)()>(&VROSC::LoopPlayerPlaybackSettings::get_PlayFromStartOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "get_PlayFromStartOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::set_PlayFromStartOffset
// Il2CppName: set_PlayFromStartOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(int)>(&VROSC::LoopPlayerPlaybackSettings::set_PlayFromStartOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "set_PlayFromStartOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::get_StartOffsetBarRelative
// Il2CppName: get_StartOffsetBarRelative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::LoopPlayerPlaybackSettings::*)()>(&VROSC::LoopPlayerPlaybackSettings::get_StartOffsetBarRelative)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "get_StartOffsetBarRelative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::set_StartOffsetBarRelative
// Il2CppName: set_StartOffsetBarRelative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(int)>(&VROSC::LoopPlayerPlaybackSettings::set_StartOffsetBarRelative)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "set_StartOffsetBarRelative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(::VROSC::Loop*, ::VROSC::LoopPlaybackConfig*)>(&VROSC::LoopPlayerPlaybackSettings::Setup)> {
  static const MethodInfo* get() {
    static auto* loop = &::il2cpp_utils::GetClassFromName("VROSC", "Loop")->byval_arg;
    static auto* config = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlaybackConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loop, config});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::SetStart
// Il2CppName: SetStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(::VROSC::LoopPlaybackConfig::TriggerSync)>(&VROSC::LoopPlayerPlaybackSettings::SetStart)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlaybackConfig/TriggerSync")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "SetStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::SetStop
// Il2CppName: SetStop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(::VROSC::LoopPlaybackConfig::TriggerSync)>(&VROSC::LoopPlayerPlaybackSettings::SetStop)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlaybackConfig/TriggerSync")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "SetStop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::SetFadeIn
// Il2CppName: SetFadeIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(::VROSC::LoopPlaybackConfig::FadeDuration)>(&VROSC::LoopPlayerPlaybackSettings::SetFadeIn)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlaybackConfig/FadeDuration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "SetFadeIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::SetFadeOut
// Il2CppName: SetFadeOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(::VROSC::LoopPlaybackConfig::FadeDuration)>(&VROSC::LoopPlayerPlaybackSettings::SetFadeOut)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlaybackConfig/FadeDuration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "SetFadeOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::SetOneShot
// Il2CppName: SetOneShot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(bool)>(&VROSC::LoopPlayerPlaybackSettings::SetOneShot)> {
  static const MethodInfo* get() {
    static auto* oneShot = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "SetOneShot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oneShot});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::SetRetrigger
// Il2CppName: SetRetrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(bool)>(&VROSC::LoopPlayerPlaybackSettings::SetRetrigger)> {
  static const MethodInfo* get() {
    static auto* retrigger = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "SetRetrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{retrigger});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::StartRequested
// Il2CppName: StartRequested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(::VROSC::LoopPlaybackConfig*)>(&VROSC::LoopPlayerPlaybackSettings::StartRequested)> {
  static const MethodInfo* get() {
    static auto* config = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlaybackConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "StartRequested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{config});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::ShouldShowPlayIcon
// Il2CppName: ShouldShowPlayIcon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopPlayerPlaybackSettings::*)()>(&VROSC::LoopPlayerPlaybackSettings::ShouldShowPlayIcon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "ShouldShowPlayIcon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::UpdatePlayConfig
// Il2CppName: UpdatePlayConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(::VROSC::LoopPlaybackConfigOverride*)>(&VROSC::LoopPlayerPlaybackSettings::UpdatePlayConfig)> {
  static const MethodInfo* get() {
    static auto* newConfig = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlaybackConfigOverride")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "UpdatePlayConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newConfig});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::StopRequested
// Il2CppName: StopRequested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(int, bool)>(&VROSC::LoopPlayerPlaybackSettings::StopRequested)> {
  static const MethodInfo* get() {
    static auto* atSample = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* instant = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "StopRequested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{atSample, instant});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::ProgressState
// Il2CppName: ProgressState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(int)>(&VROSC::LoopPlayerPlaybackSettings::ProgressState)> {
  static const MethodInfo* get() {
    static auto* atSample = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "ProgressState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{atSample});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::SetState
// Il2CppName: SetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(::VROSC::LoopPlayerPlaybackState*, int)>(&VROSC::LoopPlayerPlaybackSettings::SetState)> {
  static const MethodInfo* get() {
    static auto* currentState = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayerPlaybackState")->byval_arg;
    static auto* atSample = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "SetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentState, atSample});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::PerformIsPlayingCheck
// Il2CppName: PerformIsPlayingCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)()>(&VROSC::LoopPlayerPlaybackSettings::PerformIsPlayingCheck)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "PerformIsPlayingCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::ShouldCheckActivityChangeBeforeSample
// Il2CppName: ShouldCheckActivityChangeBeforeSample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopPlayerPlaybackSettings::*)(int)>(&VROSC::LoopPlayerPlaybackSettings::ShouldCheckActivityChangeBeforeSample)> {
  static const MethodInfo* get() {
    static auto* samples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "ShouldCheckActivityChangeBeforeSample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{samples});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::ShouldUpdateFading
// Il2CppName: ShouldUpdateFading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopPlayerPlaybackSettings::*)()>(&VROSC::LoopPlayerPlaybackSettings::ShouldUpdateFading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "ShouldUpdateFading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::CheckForStateSwitchThisSample
// Il2CppName: CheckForStateSwitchThisSample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopPlayerPlaybackSettings::*)(int)>(&VROSC::LoopPlayerPlaybackSettings::CheckForStateSwitchThisSample)> {
  static const MethodInfo* get() {
    static auto* atSample = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "CheckForStateSwitchThisSample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{atSample});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::UpdateFading
// Il2CppName: UpdateFading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(int)>(&VROSC::LoopPlayerPlaybackSettings::UpdateFading)> {
  static const MethodInfo* get() {
    static auto* atSample = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "UpdateFading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{atSample});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::GetNextLoopPointFromOffsetStart
// Il2CppName: GetNextLoopPointFromOffsetStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::LoopPlayerPlaybackSettings::*)(int)>(&VROSC::LoopPlayerPlaybackSettings::GetNextLoopPointFromOffsetStart)> {
  static const MethodInfo* get() {
    static auto* startSample = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "GetNextLoopPointFromOffsetStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startSample});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::RenderPlaybackData
// Il2CppName: RenderPlaybackData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopPlayerPlaybackSettings::*)(::ArrayW<float>, int)>(&VROSC::LoopPlayerPlaybackSettings::RenderPlaybackData)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "RenderPlaybackData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, channels});
  }
};
// Writing MetadataGetter for method: VROSC::LoopPlayerPlaybackSettings::GetLocalLoopSampleIndex
// Il2CppName: GetLocalLoopSampleIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::LoopPlayerPlaybackSettings::*)(int, int)>(&VROSC::LoopPlayerPlaybackSettings::GetLocalLoopSampleIndex)> {
  static const MethodInfo* get() {
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* atSample = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopPlayerPlaybackSettings*), "GetLocalLoopSampleIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channels, atSample});
  }
};
