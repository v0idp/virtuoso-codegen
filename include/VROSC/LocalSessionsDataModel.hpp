// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.SessionsDataModel
#include "VROSC/SessionsDataModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: LocalSessionsDataModel
  class LocalSessionsDataModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::LocalSessionsDataModel);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LocalSessionsDataModel*, "VROSC", "LocalSessionsDataModel");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.LocalSessionsDataModel
  // [TokenAttribute] Offset: FFFFFFFF
  class LocalSessionsDataModel : public ::VROSC::SessionsDataModel {
    public:
    // public System.String get_OldKey()
    // Offset: 0x19AED0C
    ::StringW get_OldKey();
    // public override System.String get_Key()
    // Offset: 0x19AECC8
    // Implemented from: VROSC.BaseDataModel
    // Base method: System.String BaseDataModel::get_Key()
    ::StringW get_Key();
    // public override System.Int32 get_Version()
    // Offset: 0x19AED50
    // Implemented from: VROSC.BaseDataModel
    // Base method: System.Int32 BaseDataModel::get_Version()
    int get_Version();
    // public System.Void .ctor()
    // Offset: 0x19AE1EC
    // Implemented from: VROSC.SessionsDataModel
    // Base method: System.Void SessionsDataModel::.ctor()
    // Base method: System.Void BaseDataModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalSessionsDataModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::LocalSessionsDataModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalSessionsDataModel*, creationType>()));
    }
  }; // VROSC.LocalSessionsDataModel
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::LocalSessionsDataModel::get_OldKey
// Il2CppName: get_OldKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::LocalSessionsDataModel::*)()>(&VROSC::LocalSessionsDataModel::get_OldKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LocalSessionsDataModel*), "get_OldKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LocalSessionsDataModel::get_Key
// Il2CppName: get_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::LocalSessionsDataModel::*)()>(&VROSC::LocalSessionsDataModel::get_Key)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LocalSessionsDataModel*), "get_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LocalSessionsDataModel::get_Version
// Il2CppName: get_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::LocalSessionsDataModel::*)()>(&VROSC::LocalSessionsDataModel::get_Version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LocalSessionsDataModel*), "get_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LocalSessionsDataModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
