// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: UIToggle
  class UIToggle;
  // Forward declaring type: InstrumentController
  class InstrumentController;
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: InstrumentFrameDisplayUI
  class InstrumentFrameDisplayUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::InstrumentFrameDisplayUI);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::InstrumentFrameDisplayUI*, "VROSC", "InstrumentFrameDisplayUI");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.InstrumentFrameDisplayUI
  // [TokenAttribute] Offset: FFFFFFFF
  class InstrumentFrameDisplayUI : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VROSC.UIToggle _useFrame
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::UIToggle* useFrame;
    // Field size check
    static_assert(sizeof(::VROSC::UIToggle*) == 0x8);
    // private VROSC.InstrumentController _instrumentController
    // Size: 0x8
    // Offset: 0x20
    ::VROSC::InstrumentController* instrumentController;
    // Field size check
    static_assert(sizeof(::VROSC::InstrumentController*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.UIToggle _useFrame
    [[deprecated]] ::VROSC::UIToggle*& dyn__useFrame();
    // Get instance field reference: private VROSC.InstrumentController _instrumentController
    [[deprecated]] ::VROSC::InstrumentController*& dyn__instrumentController();
    // private System.Void Awake()
    // Offset: 0x194785C
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x1947930
    void OnDestroy();
    // public System.Void Setup(VROSC.InstrumentController instrumentController)
    // Offset: 0x1947A04
    void Setup(::VROSC::InstrumentController* instrumentController);
    // public System.Void UpdateIsVisibleStatus(System.Boolean frameIsOn)
    // Offset: 0x194630C
    void UpdateIsVisibleStatus(bool frameIsOn);
    // private System.Void FrameToggled(VROSC.InputDevice inputDevice, System.Boolean isOn)
    // Offset: 0x1947A0C
    void FrameToggled(::VROSC::InputDevice* inputDevice, bool isOn);
    // public System.Void .ctor()
    // Offset: 0x1947A34
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InstrumentFrameDisplayUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::InstrumentFrameDisplayUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InstrumentFrameDisplayUI*, creationType>()));
    }
  }; // VROSC.InstrumentFrameDisplayUI
  #pragma pack(pop)
  static check_size<sizeof(InstrumentFrameDisplayUI), 32 + sizeof(::VROSC::InstrumentController*)> __VROSC_InstrumentFrameDisplayUISizeCheck;
  static_assert(sizeof(InstrumentFrameDisplayUI) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::InstrumentFrameDisplayUI::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InstrumentFrameDisplayUI::*)()>(&VROSC::InstrumentFrameDisplayUI::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentFrameDisplayUI*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentFrameDisplayUI::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InstrumentFrameDisplayUI::*)()>(&VROSC::InstrumentFrameDisplayUI::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentFrameDisplayUI*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentFrameDisplayUI::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InstrumentFrameDisplayUI::*)(::VROSC::InstrumentController*)>(&VROSC::InstrumentFrameDisplayUI::Setup)> {
  static const MethodInfo* get() {
    static auto* instrumentController = &::il2cpp_utils::GetClassFromName("VROSC", "InstrumentController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentFrameDisplayUI*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instrumentController});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentFrameDisplayUI::UpdateIsVisibleStatus
// Il2CppName: UpdateIsVisibleStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InstrumentFrameDisplayUI::*)(bool)>(&VROSC::InstrumentFrameDisplayUI::UpdateIsVisibleStatus)> {
  static const MethodInfo* get() {
    static auto* frameIsOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentFrameDisplayUI*), "UpdateIsVisibleStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frameIsOn});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentFrameDisplayUI::FrameToggled
// Il2CppName: FrameToggled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::InstrumentFrameDisplayUI::*)(::VROSC::InputDevice*, bool)>(&VROSC::InstrumentFrameDisplayUI::FrameToggled)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    static auto* isOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::InstrumentFrameDisplayUI*), "FrameToggled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice, isOn});
  }
};
// Writing MetadataGetter for method: VROSC::InstrumentFrameDisplayUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
