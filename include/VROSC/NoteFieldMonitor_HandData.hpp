// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.NoteFieldMonitor
#include "VROSC/NoteFieldMonitor.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: NoteBoardPlayer
  class NoteBoardPlayer;
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::NoteFieldMonitor::HandData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::NoteFieldMonitor::HandData*, "VROSC", "NoteFieldMonitor/HandData");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.NoteFieldMonitor/VROSC.HandData
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteFieldMonitor::HandData : public ::Il2CppObject {
    public:
    public:
    // private VROSC.NoteBoardPlayer[] _notePlayers
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::VROSC::NoteBoardPlayer*> notePlayers;
    // Field size check
    static_assert(sizeof(::ArrayW<::VROSC::NoteBoardPlayer*>) == 0x8);
    // private UnityEngine.Color[] _playingColors
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Color> playingColors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // private System.Int32 _maxNotes
    // Size: 0x4
    // Offset: 0x20
    int maxNotes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: maxNotes and: HoveredNotes
    char __padding2[0x4] = {};
    // private System.Int32[] <HoveredNotes>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<int> HoveredNotes;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int32[] <PlayingNotes>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<int> PlayingNotes;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Action OnPlayingChanged
    // Size: 0x8
    // Offset: 0x38
    ::System::Action* OnPlayingChanged;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Action OnHoveringChanged
    // Size: 0x8
    // Offset: 0x40
    ::System::Action* OnHoveringChanged;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private VROSC.InputDevice _inputDevice
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::InputDevice* inputDevice;
    // Field size check
    static_assert(sizeof(::VROSC::InputDevice*) == 0x8);
    // private System.Boolean _handIsInsideInstrument
    // Size: 0x1
    // Offset: 0x50
    bool handIsInsideInstrument;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private VROSC.NoteBoardPlayer[] _notePlayers
    [[deprecated("Use field access instead!")]] ::ArrayW<::VROSC::NoteBoardPlayer*>& dyn__notePlayers();
    // Get instance field reference: private UnityEngine.Color[] _playingColors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn__playingColors();
    // Get instance field reference: private System.Int32 _maxNotes
    [[deprecated("Use field access instead!")]] int& dyn__maxNotes();
    // Get instance field reference: private System.Int32[] <HoveredNotes>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_$HoveredNotes$k__BackingField();
    // Get instance field reference: private System.Int32[] <PlayingNotes>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_$PlayingNotes$k__BackingField();
    // Get instance field reference: public System.Action OnPlayingChanged
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnPlayingChanged();
    // Get instance field reference: public System.Action OnHoveringChanged
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnHoveringChanged();
    // Get instance field reference: private VROSC.InputDevice _inputDevice
    [[deprecated("Use field access instead!")]] ::VROSC::InputDevice*& dyn__inputDevice();
    // Get instance field reference: private System.Boolean _handIsInsideInstrument
    [[deprecated("Use field access instead!")]] bool& dyn__handIsInsideInstrument();
    // public System.Int32 get_MaxNotes()
    // Offset: 0x1966984
    int get_MaxNotes();
    // public System.Int32[] get_HoveredNotes()
    // Offset: 0x1966994
    ::ArrayW<int> get_HoveredNotes();
    // private System.Void set_HoveredNotes(System.Int32[] value)
    // Offset: 0x196698C
    void set_HoveredNotes(::ArrayW<int> value);
    // public System.Int32[] get_PlayingNotes()
    // Offset: 0x19669A4
    ::ArrayW<int> get_PlayingNotes();
    // private System.Void set_PlayingNotes(System.Int32[] value)
    // Offset: 0x196699C
    void set_PlayingNotes(::ArrayW<int> value);
    // public UnityEngine.Color[] get_PlayingColors()
    // Offset: 0x19669AC
    ::ArrayW<::UnityEngine::Color> get_PlayingColors();
    // public System.Void .ctor()
    // Offset: 0x1966BBC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteFieldMonitor::HandData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::NoteFieldMonitor::HandData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteFieldMonitor::HandData*, creationType>()));
    }
    // public System.Void Setup(VROSC.InputDevice inputDevice)
    // Offset: 0x19669B4
    void Setup(::VROSC::InputDevice* inputDevice);
    // public System.Void SetHandInsideInstrument(System.Boolean isInside)
    // Offset: 0x1966A44
    void SetHandInsideInstrument(bool isInside);
    // System.Void CheckNotePlayers()
    // Offset: 0x1966AB4
    void CheckNotePlayers();
  }; // VROSC.NoteFieldMonitor/VROSC.HandData
  #pragma pack(pop)
  static check_size<sizeof(NoteFieldMonitor::HandData), 80 + sizeof(bool)> __VROSC_NoteFieldMonitor_HandDataSizeCheck;
  static_assert(sizeof(NoteFieldMonitor::HandData) == 0x51);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::HandData::get_MaxNotes
// Il2CppName: get_MaxNotes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::NoteFieldMonitor::HandData::*)()>(&VROSC::NoteFieldMonitor::HandData::get_MaxNotes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldMonitor::HandData*), "get_MaxNotes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::HandData::get_HoveredNotes
// Il2CppName: get_HoveredNotes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (VROSC::NoteFieldMonitor::HandData::*)()>(&VROSC::NoteFieldMonitor::HandData::get_HoveredNotes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldMonitor::HandData*), "get_HoveredNotes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::HandData::set_HoveredNotes
// Il2CppName: set_HoveredNotes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldMonitor::HandData::*)(::ArrayW<int>)>(&VROSC::NoteFieldMonitor::HandData::set_HoveredNotes)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldMonitor::HandData*), "set_HoveredNotes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::HandData::get_PlayingNotes
// Il2CppName: get_PlayingNotes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (VROSC::NoteFieldMonitor::HandData::*)()>(&VROSC::NoteFieldMonitor::HandData::get_PlayingNotes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldMonitor::HandData*), "get_PlayingNotes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::HandData::set_PlayingNotes
// Il2CppName: set_PlayingNotes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldMonitor::HandData::*)(::ArrayW<int>)>(&VROSC::NoteFieldMonitor::HandData::set_PlayingNotes)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldMonitor::HandData*), "set_PlayingNotes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::HandData::get_PlayingColors
// Il2CppName: get_PlayingColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Color> (VROSC::NoteFieldMonitor::HandData::*)()>(&VROSC::NoteFieldMonitor::HandData::get_PlayingColors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldMonitor::HandData*), "get_PlayingColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::HandData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::HandData::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldMonitor::HandData::*)(::VROSC::InputDevice*)>(&VROSC::NoteFieldMonitor::HandData::Setup)> {
  static const MethodInfo* get() {
    static auto* inputDevice = &::il2cpp_utils::GetClassFromName("VROSC", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldMonitor::HandData*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputDevice});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::HandData::SetHandInsideInstrument
// Il2CppName: SetHandInsideInstrument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldMonitor::HandData::*)(bool)>(&VROSC::NoteFieldMonitor::HandData::SetHandInsideInstrument)> {
  static const MethodInfo* get() {
    static auto* isInside = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldMonitor::HandData*), "SetHandInsideInstrument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isInside});
  }
};
// Writing MetadataGetter for method: VROSC::NoteFieldMonitor::HandData::CheckNotePlayers
// Il2CppName: CheckNotePlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::NoteFieldMonitor::HandData::*)()>(&VROSC::NoteFieldMonitor::HandData::CheckNotePlayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::NoteFieldMonitor::HandData*), "CheckNotePlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
