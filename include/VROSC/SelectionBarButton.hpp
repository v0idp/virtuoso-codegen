// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.UIScrollableItem
#include "VROSC/UIScrollableItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: UIInteractableColorSettings
  class UIInteractableColorSettings;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: SelectionBarButton
  class SelectionBarButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::SelectionBarButton);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::SelectionBarButton*, "VROSC", "SelectionBarButton");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.SelectionBarButton
  // [TokenAttribute] Offset: FFFFFFFF
  class SelectionBarButton : public ::VROSC::UIScrollableItem {
    public:
    // Writing base type padding for base size: 0x2B to desired offset: 0x30
    char ___base_padding[0x5] = {};
    public:
    // private UnityEngine.Renderer _buttonBackground
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Renderer* buttonBackground;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private VROSC.UIInteractableColorSettings _backgroundColors
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::UIInteractableColorSettings* backgroundColors;
    // Field size check
    static_assert(sizeof(::VROSC::UIInteractableColorSettings*) == 0x8);
    // private TMPro.TextMeshPro _text
    // Size: 0x8
    // Offset: 0x40
    ::TMPro::TextMeshPro* text;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private VROSC.UIInteractableColorSettings _textColors
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::UIInteractableColorSettings* textColors;
    // Field size check
    static_assert(sizeof(::VROSC::UIInteractableColorSettings*) == 0x8);
    // private UnityEngine.MaterialPropertyBlock _materialBlock
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::MaterialPropertyBlock* materialBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Renderer _buttonBackground
    [[deprecated]] ::UnityEngine::Renderer*& dyn__buttonBackground();
    // Get instance field reference: private VROSC.UIInteractableColorSettings _backgroundColors
    [[deprecated]] ::VROSC::UIInteractableColorSettings*& dyn__backgroundColors();
    // Get instance field reference: private TMPro.TextMeshPro _text
    [[deprecated]] ::TMPro::TextMeshPro*& dyn__text();
    // Get instance field reference: private VROSC.UIInteractableColorSettings _textColors
    [[deprecated]] ::VROSC::UIInteractableColorSettings*& dyn__textColors();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock _materialBlock
    [[deprecated]] ::UnityEngine::MaterialPropertyBlock*& dyn__materialBlock();
    // protected System.Void Awake()
    // Offset: 0x19819BC
    void Awake();
    // private System.Void SetBackground()
    // Offset: 0x1981B60
    void SetBackground();
    // private System.Void Colorize()
    // Offset: 0x1981BE0
    void Colorize();
    // private System.Void AutoFind()
    // Offset: 0x1981C60
    void AutoFind();
    // public System.Void .ctor()
    // Offset: 0x1981CB4
    // Implemented from: VROSC.UIScrollableItem
    // Base method: System.Void UIScrollableItem::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SelectionBarButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::SelectionBarButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SelectionBarButton*, creationType>()));
    }
    // public override System.Void Setup(System.Int32 index, System.String value)
    // Offset: 0x1981A2C
    // Implemented from: VROSC.UIScrollableItem
    // Base method: System.Void UIScrollableItem::Setup(System.Int32 index, System.String value)
    void Setup(int index, ::StringW value);
    // protected override System.Void UpdateColors()
    // Offset: 0x1981A74
    // Implemented from: VROSC.UIScrollableItem
    // Base method: System.Void UIScrollableItem::UpdateColors()
    void UpdateColors();
  }; // VROSC.SelectionBarButton
  #pragma pack(pop)
  static check_size<sizeof(SelectionBarButton), 80 + sizeof(::UnityEngine::MaterialPropertyBlock*)> __VROSC_SelectionBarButtonSizeCheck;
  static_assert(sizeof(SelectionBarButton) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::SelectionBarButton::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SelectionBarButton::*)()>(&VROSC::SelectionBarButton::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SelectionBarButton*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SelectionBarButton::SetBackground
// Il2CppName: SetBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SelectionBarButton::*)()>(&VROSC::SelectionBarButton::SetBackground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SelectionBarButton*), "SetBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SelectionBarButton::Colorize
// Il2CppName: Colorize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SelectionBarButton::*)()>(&VROSC::SelectionBarButton::Colorize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SelectionBarButton*), "Colorize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SelectionBarButton::AutoFind
// Il2CppName: AutoFind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SelectionBarButton::*)()>(&VROSC::SelectionBarButton::AutoFind)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SelectionBarButton*), "AutoFind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::SelectionBarButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::SelectionBarButton::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SelectionBarButton::*)(int, ::StringW)>(&VROSC::SelectionBarButton::Setup)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::SelectionBarButton*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: VROSC::SelectionBarButton::UpdateColors
// Il2CppName: UpdateColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::SelectionBarButton::*)()>(&VROSC::SelectionBarButton::UpdateColors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::SelectionBarButton*), "UpdateColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
