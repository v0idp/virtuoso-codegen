// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.PlayableBehaviour
#include "UnityEngine/Playables/PlayableBehaviour.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: GridNoteboard
  class GridNoteboard;
  // Forward declaring type: NoteBoardNote
  class NoteBoardNote;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: FrameData
  struct FrameData;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: GridNoteboardDestructionBehaviour
  class GridNoteboardDestructionBehaviour;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::GridNoteboardDestructionBehaviour);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::GridNoteboardDestructionBehaviour*, "VROSC", "GridNoteboardDestructionBehaviour");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.GridNoteboardDestructionBehaviour
  // [TokenAttribute] Offset: FFFFFFFF
  class GridNoteboardDestructionBehaviour : public ::UnityEngine::Playables::PlayableBehaviour {
    public:
    public:
    // private VROSC.GridNoteboard _gridNoteboard
    // Size: 0x8
    // Offset: 0x10
    ::VROSC::GridNoteboard* gridNoteboard;
    // Field size check
    static_assert(sizeof(::VROSC::GridNoteboard*) == 0x8);
    // private UnityEngine.Transform _toPoint
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* toPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.AnimationCurve _curve
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AnimationCurve* curve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.Vector3[] _positionOffset
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Vector3> positionOffset;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Quaternion[] _rotationOffset
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Quaternion> rotationOffset;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Quaternion>) == 0x8);
    // public System.Single StartPoint
    // Size: 0x4
    // Offset: 0x38
    float StartPoint;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single EndPoint
    // Size: 0x4
    // Offset: 0x3C
    float EndPoint;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean zPos
    // Size: 0x1
    // Offset: 0x40
    bool zPos;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private VROSC.GridNoteboard _gridNoteboard
    [[deprecated("Use field access instead!")]] ::VROSC::GridNoteboard*& dyn__gridNoteboard();
    // Get instance field reference: private UnityEngine.Transform _toPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__toPoint();
    // Get instance field reference: private UnityEngine.AnimationCurve _curve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__curve();
    // Get instance field reference: private UnityEngine.Vector3[] _positionOffset
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn__positionOffset();
    // Get instance field reference: private UnityEngine.Quaternion[] _rotationOffset
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& dyn__rotationOffset();
    // Get instance field reference: public System.Single StartPoint
    [[deprecated("Use field access instead!")]] float& dyn_StartPoint();
    // Get instance field reference: public System.Single EndPoint
    [[deprecated("Use field access instead!")]] float& dyn_EndPoint();
    // Get instance field reference: public System.Boolean zPos
    [[deprecated("Use field access instead!")]] bool& dyn_zPos();
    // public System.Void .ctor()
    // Offset: 0x19A9AD4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GridNoteboardDestructionBehaviour* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::GridNoteboardDestructionBehaviour::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GridNoteboardDestructionBehaviour*, creationType>()));
    }
    // public System.Void Setup(VROSC.GridNoteboard gridNoteboard, UnityEngine.Transform toPoint, UnityEngine.AnimationCurve curve)
    // Offset: 0x19A8EC4
    void Setup(::VROSC::GridNoteboard* gridNoteboard, ::UnityEngine::Transform* toPoint, ::UnityEngine::AnimationCurve* curve);
    // private System.Void X(VROSC.NoteBoardNote[,,] notes, System.Int32 xLength, System.Int32 yLength, System.Int32 zLength)
    // Offset: 0x19A9404
    void X(::ArrayW<::VROSC::NoteBoardNote*> notes, int xLength, int yLength, int zLength);
    // private System.Void Z(VROSC.NoteBoardNote[,,] notes, System.Int32 xLength, System.Int32 yLength, System.Int32 zLength)
    // Offset: 0x19A9238
    void Z(::ArrayW<::VROSC::NoteBoardNote*> notes, int xLength, int yLength, int zLength);
    // private System.Void SetNoteValues(VROSC.NoteBoardNote note, System.Single activationTime, System.Int32 index, System.Single x)
    // Offset: 0x19A95C4
    void SetNoteValues(::VROSC::NoteBoardNote* note, float activationTime, int index, float x);
    // private System.Void OnPlayableDestroy()
    // Offset: 0x19A9A2C
    void OnPlayableDestroy();
    // public override System.Void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    // Offset: 0x19A9118
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    void ProcessFrame(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info, ::Il2CppObject* playerData);
  }; // VROSC.GridNoteboardDestructionBehaviour
  #pragma pack(pop)
  static check_size<sizeof(GridNoteboardDestructionBehaviour), 64 + sizeof(bool)> __VROSC_GridNoteboardDestructionBehaviourSizeCheck;
  static_assert(sizeof(GridNoteboardDestructionBehaviour) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::GridNoteboardDestructionBehaviour::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::GridNoteboardDestructionBehaviour::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::GridNoteboardDestructionBehaviour::*)(::VROSC::GridNoteboard*, ::UnityEngine::Transform*, ::UnityEngine::AnimationCurve*)>(&VROSC::GridNoteboardDestructionBehaviour::Setup)> {
  static const MethodInfo* get() {
    static auto* gridNoteboard = &::il2cpp_utils::GetClassFromName("VROSC", "GridNoteboard")->byval_arg;
    static auto* toPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* curve = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::GridNoteboardDestructionBehaviour*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gridNoteboard, toPoint, curve});
  }
};
// Writing MetadataGetter for method: VROSC::GridNoteboardDestructionBehaviour::X
// Il2CppName: X
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::GridNoteboardDestructionBehaviour::*)(::ArrayW<::VROSC::NoteBoardNote*>, int, int, int)>(&VROSC::GridNoteboardDestructionBehaviour::X)> {
  static const MethodInfo* get() {
    static auto* notes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("VROSC", "NoteBoardNote"), 1)->byval_arg;
    static auto* xLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* yLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* zLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::GridNoteboardDestructionBehaviour*), "X", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{notes, xLength, yLength, zLength});
  }
};
// Writing MetadataGetter for method: VROSC::GridNoteboardDestructionBehaviour::Z
// Il2CppName: Z
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::GridNoteboardDestructionBehaviour::*)(::ArrayW<::VROSC::NoteBoardNote*>, int, int, int)>(&VROSC::GridNoteboardDestructionBehaviour::Z)> {
  static const MethodInfo* get() {
    static auto* notes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("VROSC", "NoteBoardNote"), 1)->byval_arg;
    static auto* xLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* yLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* zLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::GridNoteboardDestructionBehaviour*), "Z", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{notes, xLength, yLength, zLength});
  }
};
// Writing MetadataGetter for method: VROSC::GridNoteboardDestructionBehaviour::SetNoteValues
// Il2CppName: SetNoteValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::GridNoteboardDestructionBehaviour::*)(::VROSC::NoteBoardNote*, float, int, float)>(&VROSC::GridNoteboardDestructionBehaviour::SetNoteValues)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("VROSC", "NoteBoardNote")->byval_arg;
    static auto* activationTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::GridNoteboardDestructionBehaviour*), "SetNoteValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, activationTime, index, x});
  }
};
// Writing MetadataGetter for method: VROSC::GridNoteboardDestructionBehaviour::OnPlayableDestroy
// Il2CppName: OnPlayableDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::GridNoteboardDestructionBehaviour::*)()>(&VROSC::GridNoteboardDestructionBehaviour::OnPlayableDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::GridNoteboardDestructionBehaviour*), "OnPlayableDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::GridNoteboardDestructionBehaviour::ProcessFrame
// Il2CppName: ProcessFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::GridNoteboardDestructionBehaviour::*)(::UnityEngine::Playables::Playable, ::UnityEngine::Playables::FrameData, ::Il2CppObject*)>(&VROSC::GridNoteboardDestructionBehaviour::ProcessFrame)> {
  static const MethodInfo* get() {
    static auto* playable = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "Playable")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "FrameData")->byval_arg;
    static auto* playerData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::GridNoteboardDestructionBehaviour*), "ProcessFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playable, info, playerData});
  }
};
