// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: UdpClient
  class UdpClient;
}
// Forward declaring namespace: UnityOSC
namespace UnityOSC {
  // Forward declaring type: OSCPacket
  class OSCPacket;
}
// Completed forward declares
// Type namespace: UnityOSC
namespace UnityOSC {
  // Forward declaring type: OSCClient
  class OSCClient;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityOSC::OSCClient);
DEFINE_IL2CPP_ARG_TYPE(::UnityOSC::OSCClient*, "UnityOSC", "OSCClient");
// Type namespace: UnityOSC
namespace UnityOSC {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: UnityOSC.OSCClient
  // [TokenAttribute] Offset: FFFFFFFF
  class OSCClient : public ::Il2CppObject {
    public:
    public:
    // private System.Net.IPAddress _ipAddress
    // Size: 0x8
    // Offset: 0x10
    ::System::Net::IPAddress* ipAddress;
    // Field size check
    static_assert(sizeof(::System::Net::IPAddress*) == 0x8);
    // private System.Int32 _port
    // Size: 0x4
    // Offset: 0x18
    int port;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: port and: udpClient
    char __padding1[0x4] = {};
    // private System.Net.Sockets.UdpClient _udpClient
    // Size: 0x8
    // Offset: 0x20
    ::System::Net::Sockets::UdpClient* udpClient;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::UdpClient*) == 0x8);
    public:
    // Get instance field reference: private System.Net.IPAddress _ipAddress
    [[deprecated]] ::System::Net::IPAddress*& dyn__ipAddress();
    // Get instance field reference: private System.Int32 _port
    [[deprecated]] int& dyn__port();
    // Get instance field reference: private System.Net.Sockets.UdpClient _udpClient
    [[deprecated]] ::System::Net::Sockets::UdpClient*& dyn__udpClient();
    // public System.Net.IPAddress get_ClientIPAddress()
    // Offset: 0xC5BB08
    ::System::Net::IPAddress* get_ClientIPAddress();
    // public System.Int32 get_Port()
    // Offset: 0xC5BB10
    int get_Port();
    // public System.Void .ctor(System.Net.IPAddress address, System.Int32 port)
    // Offset: 0xC5B940
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OSCClient* New_ctor(::System::Net::IPAddress* address, int port) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityOSC::OSCClient::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OSCClient*, creationType>(address, port)));
    }
    // public System.Void Connect()
    // Offset: 0xC5B980
    void Connect();
    // public System.Void Close()
    // Offset: 0xC5BB18
    void Close();
    // public System.Void Send(UnityOSC.OSCPacket packet)
    // Offset: 0xC5BB4C
    void Send(::UnityOSC::OSCPacket* packet);
  }; // UnityOSC.OSCClient
  #pragma pack(pop)
  static check_size<sizeof(OSCClient), 32 + sizeof(::System::Net::Sockets::UdpClient*)> __UnityOSC_OSCClientSizeCheck;
  static_assert(sizeof(OSCClient) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityOSC::OSCClient::get_ClientIPAddress
// Il2CppName: get_ClientIPAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IPAddress* (UnityOSC::OSCClient::*)()>(&UnityOSC::OSCClient::get_ClientIPAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityOSC::OSCClient*), "get_ClientIPAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityOSC::OSCClient::get_Port
// Il2CppName: get_Port
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityOSC::OSCClient::*)()>(&UnityOSC::OSCClient::get_Port)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityOSC::OSCClient*), "get_Port", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityOSC::OSCClient::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityOSC::OSCClient::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityOSC::OSCClient::*)()>(&UnityOSC::OSCClient::Connect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityOSC::OSCClient*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityOSC::OSCClient::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityOSC::OSCClient::*)()>(&UnityOSC::OSCClient::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityOSC::OSCClient*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityOSC::OSCClient::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityOSC::OSCClient::*)(::UnityOSC::OSCPacket*)>(&UnityOSC::OSCClient::Send)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("UnityOSC", "OSCPacket")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityOSC::OSCClient*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet});
  }
};
