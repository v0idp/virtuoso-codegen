// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DG::Tweening
namespace DG::Tweening {
  // Forward declaring type: Tweener
  class Tweener;
  // Forward declaring type: TweenCallback`1<T>
  template<typename T>
  class TweenCallback_1;
  // Forward declaring type: Ease
  struct Ease;
  // Forward declaring type: Tween
  class Tween;
  // Forward declaring type: TweenCallback
  class TweenCallback;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: DG.Tweening
namespace DG::Tweening {
  // Forward declaring type: DOVirtual
  class DOVirtual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DG::Tweening::DOVirtual);
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::DOVirtual*, "DG.Tweening", "DOVirtual");
// Type namespace: DG.Tweening
namespace DG::Tweening {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: DG.Tweening.DOVirtual
  // [TokenAttribute] Offset: FFFFFFFF
  class DOVirtual : public ::Il2CppObject {
    public:
    // Nested type: ::DG::Tweening::DOVirtual::$$c__DisplayClass0_0
    class $$c__DisplayClass0_0;
    // static public DG.Tweening.Tweener Float(System.Single from, System.Single to, System.Single duration, DG.Tweening.TweenCallback`1<System.Single> onVirtualUpdate)
    // Offset: 0x15DCE3C
    static ::DG::Tweening::Tweener* Float(float from, float to, float duration, ::DG::Tweening::TweenCallback_1<float>* onVirtualUpdate);
    // static public System.Single EasedValue(System.Single from, System.Single to, System.Single lifetimePercentage, DG.Tweening.Ease easeType)
    // Offset: 0x15DD024
    static float EasedValue(float from, float to, float lifetimePercentage, ::DG::Tweening::Ease easeType);
    // static public System.Single EasedValue(System.Single from, System.Single to, System.Single lifetimePercentage, DG.Tweening.Ease easeType, System.Single overshoot)
    // Offset: 0x15DD0C8
    static float EasedValue(float from, float to, float lifetimePercentage, ::DG::Tweening::Ease easeType, float overshoot);
    // static public System.Single EasedValue(System.Single from, System.Single to, System.Single lifetimePercentage, DG.Tweening.Ease easeType, System.Single amplitude, System.Single period)
    // Offset: 0x15DD174
    static float EasedValue(float from, float to, float lifetimePercentage, ::DG::Tweening::Ease easeType, float amplitude, float period);
    // static public System.Single EasedValue(System.Single from, System.Single to, System.Single lifetimePercentage, UnityEngine.AnimationCurve easeCurve)
    // Offset: 0x15DD1B8
    static float EasedValue(float from, float to, float lifetimePercentage, ::UnityEngine::AnimationCurve* easeCurve);
    // static public DG.Tweening.Tween DelayedCall(System.Single delay, DG.Tweening.TweenCallback callback, System.Boolean ignoreTimeScale)
    // Offset: 0x15DD308
    static ::DG::Tweening::Tween* DelayedCall(float delay, ::DG::Tweening::TweenCallback* callback, bool ignoreTimeScale);
  }; // DG.Tweening.DOVirtual
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::DOVirtual::Float
// Il2CppName: Float
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (*)(float, float, float, ::DG::Tweening::TweenCallback_1<float>*)>(&DG::Tweening::DOVirtual::Float)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* onVirtualUpdate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening", "TweenCallback`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::DOVirtual*), "Float", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, duration, onVirtualUpdate});
  }
};
// Writing MetadataGetter for method: DG::Tweening::DOVirtual::EasedValue
// Il2CppName: EasedValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, ::DG::Tweening::Ease)>(&DG::Tweening::DOVirtual::EasedValue)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lifetimePercentage = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* easeType = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Ease")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::DOVirtual*), "EasedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, lifetimePercentage, easeType});
  }
};
// Writing MetadataGetter for method: DG::Tweening::DOVirtual::EasedValue
// Il2CppName: EasedValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, ::DG::Tweening::Ease, float)>(&DG::Tweening::DOVirtual::EasedValue)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lifetimePercentage = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* easeType = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Ease")->byval_arg;
    static auto* overshoot = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::DOVirtual*), "EasedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, lifetimePercentage, easeType, overshoot});
  }
};
// Writing MetadataGetter for method: DG::Tweening::DOVirtual::EasedValue
// Il2CppName: EasedValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, ::DG::Tweening::Ease, float, float)>(&DG::Tweening::DOVirtual::EasedValue)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lifetimePercentage = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* easeType = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Ease")->byval_arg;
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::DOVirtual*), "EasedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, lifetimePercentage, easeType, amplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::DOVirtual::EasedValue
// Il2CppName: EasedValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, ::UnityEngine::AnimationCurve*)>(&DG::Tweening::DOVirtual::EasedValue)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lifetimePercentage = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* easeCurve = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::DOVirtual*), "EasedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, lifetimePercentage, easeCurve});
  }
};
// Writing MetadataGetter for method: DG::Tweening::DOVirtual::DelayedCall
// Il2CppName: DelayedCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tween* (*)(float, ::DG::Tweening::TweenCallback*, bool)>(&DG::Tweening::DOVirtual::DelayedCall)> {
  static const MethodInfo* get() {
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("DG.Tweening", "TweenCallback")->byval_arg;
    static auto* ignoreTimeScale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::DOVirtual*), "DelayedCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delay, callback, ignoreTimeScale});
  }
};
