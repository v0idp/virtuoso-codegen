// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DG.Tweening.Tween
#include "DG/Tweening/Tween.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DG::Tweening::Plugins::Options
namespace DG::Tweening::Plugins::Options {
  // Forward declaring type: IPlugOptions
  class IPlugOptions;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ValueType because it is already included!
}
// Forward declaring namespace: DG::Tweening::Core
namespace DG::Tweening::Core {
  // Forward declaring type: TweenerCore`3<T1, T2, TPlugOptions>
  template<typename T1, typename T2, typename TPlugOptions>
  class TweenerCore_3;
  // Forward declaring type: DOGetter`1<T>
  template<typename T>
  class DOGetter_1;
  // Forward declaring type: DOSetter`1<T>
  template<typename T>
  class DOSetter_1;
}
// Forward declaring namespace: DG::Tweening::Plugins::Core
namespace DG::Tweening::Plugins::Core {
  // Forward declaring type: ABSTweenPlugin`3<T1, T2, TPlugOptions>
  template<typename T1, typename T2, typename TPlugOptions>
  class ABSTweenPlugin_3;
}
// Completed forward declares
// Type namespace: DG.Tweening
namespace DG::Tweening {
  // Forward declaring type: Tweener
  class Tweener;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DG::Tweening::Tweener);
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::Tweener*, "DG.Tweening", "Tweener");
// Type namespace: DG.Tweening
namespace DG::Tweening {
  // Size: 0x122
  #pragma pack(push, 1)
  // Autogenerated type: DG.Tweening.Tweener
  // [TokenAttribute] Offset: FFFFFFFF
  class Tweener : public ::DG::Tweening::Tween {
    public:
    public:
    // System.Boolean hasManuallySetStartValue
    // Size: 0x1
    // Offset: 0x120
    bool hasManuallySetStartValue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean isFromAllowed
    // Size: 0x1
    // Offset: 0x121
    bool isFromAllowed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: System.Boolean hasManuallySetStartValue
    [[deprecated]] bool& dyn_hasManuallySetStartValue();
    // Get instance field reference: System.Boolean isFromAllowed
    [[deprecated]] bool& dyn_isFromAllowed();
    // public DG.Tweening.Tweener ChangeStartValue(System.Object newStartValue, System.Single newDuration)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::DG::Tweening::Tweener* ChangeStartValue(::Il2CppObject* newStartValue, float newDuration);
    // public DG.Tweening.Tweener ChangeEndValue(System.Object newEndValue, System.Single newDuration, System.Boolean snapStartValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::DG::Tweening::Tweener* ChangeEndValue(::Il2CppObject* newEndValue, float newDuration, bool snapStartValue);
    // public DG.Tweening.Tweener ChangeEndValue(System.Object newEndValue, System.Boolean snapStartValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::DG::Tweening::Tweener* ChangeEndValue(::Il2CppObject* newEndValue, bool snapStartValue);
    // public DG.Tweening.Tweener ChangeValues(System.Object newStartValue, System.Object newEndValue, System.Single newDuration)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::DG::Tweening::Tweener* ChangeValues(::Il2CppObject* newStartValue, ::Il2CppObject* newEndValue, float newDuration);
    // DG.Tweening.Tweener SetFrom(System.Boolean relative)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::DG::Tweening::Tweener* SetFrom(bool relative);
    // static System.Boolean Setup(DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> t, DG.Tweening.Core.DOGetter`1<T1> getter, DG.Tweening.Core.DOSetter`1<T1> setter, T2 endValue, System.Single duration, DG.Tweening.Plugins.Core.ABSTweenPlugin`3<T1,T2,TPlugOptions> plugin)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class TPlugOptions>
    static bool Setup(::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* t, ::DG::Tweening::Core::DOGetter_1<T1>* getter, ::DG::Tweening::Core::DOSetter_1<T1>* setter, T2 endValue, float duration, ::DG::Tweening::Plugins::Core::ABSTweenPlugin_3<T1, T2, TPlugOptions>* plugin) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TPlugOptions>, ::DG::Tweening::Plugins::Options::IPlugOptions> && std::is_convertible_v<TPlugOptions, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Tweener::Setup");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "Tweener", "Setup", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(getter), ::il2cpp_utils::ExtractType(setter), ::il2cpp_utils::ExtractType(endValue), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(plugin)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, getter, setter, endValue, duration, plugin);
    }
    // static System.Single DoUpdateDelay(DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> t, System.Single elapsed)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class TPlugOptions>
    static float DoUpdateDelay(::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* t, float elapsed) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TPlugOptions>, ::DG::Tweening::Plugins::Options::IPlugOptions> && std::is_convertible_v<TPlugOptions, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Tweener::DoUpdateDelay");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "Tweener", "DoUpdateDelay", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(elapsed)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, elapsed);
    }
    // static System.Boolean DoStartup(DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class TPlugOptions>
    static bool DoStartup(::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* t) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TPlugOptions>, ::DG::Tweening::Plugins::Options::IPlugOptions> && std::is_convertible_v<TPlugOptions, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Tweener::DoStartup");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "Tweener", "DoStartup", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t);
    }
    // static DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> DoChangeStartValue(DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> t, T2 newStartValue, System.Single newDuration)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class TPlugOptions>
    static ::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* DoChangeStartValue(::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* t, T2 newStartValue, float newDuration) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TPlugOptions>, ::DG::Tweening::Plugins::Options::IPlugOptions> && std::is_convertible_v<TPlugOptions, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Tweener::DoChangeStartValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "Tweener", "DoChangeStartValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(newStartValue), ::il2cpp_utils::ExtractType(newDuration)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, newStartValue, newDuration);
    }
    // static DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> DoChangeEndValue(DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> t, T2 newEndValue, System.Single newDuration, System.Boolean snapStartValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class TPlugOptions>
    static ::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* DoChangeEndValue(::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* t, T2 newEndValue, float newDuration, bool snapStartValue) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TPlugOptions>, ::DG::Tweening::Plugins::Options::IPlugOptions> && std::is_convertible_v<TPlugOptions, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Tweener::DoChangeEndValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "Tweener", "DoChangeEndValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(newEndValue), ::il2cpp_utils::ExtractType(newDuration), ::il2cpp_utils::ExtractType(snapStartValue)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, newEndValue, newDuration, snapStartValue);
    }
    // static DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> DoChangeValues(DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> t, T2 newStartValue, T2 newEndValue, System.Single newDuration)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class TPlugOptions>
    static ::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* DoChangeValues(::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* t, T2 newStartValue, T2 newEndValue, float newDuration) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TPlugOptions>, ::DG::Tweening::Plugins::Options::IPlugOptions> && std::is_convertible_v<TPlugOptions, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Tweener::DoChangeValues");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "Tweener", "DoChangeValues", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(newStartValue), ::il2cpp_utils::ExtractType(newEndValue), ::il2cpp_utils::ExtractType(newDuration)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, newStartValue, newEndValue, newDuration);
    }
    // static private System.Boolean DOStartupSpecials(DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class TPlugOptions>
    static bool DOStartupSpecials(::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* t) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TPlugOptions>, ::DG::Tweening::Plugins::Options::IPlugOptions> && std::is_convertible_v<TPlugOptions, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Tweener::DOStartupSpecials");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "Tweener", "DOStartupSpecials", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t);
    }
    // static private System.Void DOStartupDurationBased(DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class TPlugOptions>
    static void DOStartupDurationBased(::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* t) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TPlugOptions>, ::DG::Tweening::Plugins::Options::IPlugOptions> && std::is_convertible_v<TPlugOptions, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Tweener::DOStartupDurationBased");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "Tweener", "DOStartupDurationBased", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t);
    }
    // System.Void .ctor()
    // Offset: 0x15B6440
    // Implemented from: DG.Tweening.Tween
    // Base method: System.Void Tween::.ctor()
    // Base method: System.Void ABSSequentiable::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Tweener* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Tweener::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Tweener*, creationType>()));
    }
  }; // DG.Tweening.Tweener
  #pragma pack(pop)
  static check_size<sizeof(Tweener), 289 + sizeof(bool)> __DG_Tweening_TweenerSizeCheck;
  static_assert(sizeof(Tweener) == 0x122);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::Tweener::ChangeStartValue
// Il2CppName: ChangeStartValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (DG::Tweening::Tweener::*)(::Il2CppObject*, float)>(&DG::Tweening::Tweener::ChangeStartValue)> {
  static const MethodInfo* get() {
    static auto* newStartValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* newDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tweener*), "ChangeStartValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newStartValue, newDuration});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tweener::ChangeEndValue
// Il2CppName: ChangeEndValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (DG::Tweening::Tweener::*)(::Il2CppObject*, float, bool)>(&DG::Tweening::Tweener::ChangeEndValue)> {
  static const MethodInfo* get() {
    static auto* newEndValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* newDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* snapStartValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tweener*), "ChangeEndValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newEndValue, newDuration, snapStartValue});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tweener::ChangeEndValue
// Il2CppName: ChangeEndValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (DG::Tweening::Tweener::*)(::Il2CppObject*, bool)>(&DG::Tweening::Tweener::ChangeEndValue)> {
  static const MethodInfo* get() {
    static auto* newEndValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* snapStartValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tweener*), "ChangeEndValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newEndValue, snapStartValue});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tweener::ChangeValues
// Il2CppName: ChangeValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (DG::Tweening::Tweener::*)(::Il2CppObject*, ::Il2CppObject*, float)>(&DG::Tweening::Tweener::ChangeValues)> {
  static const MethodInfo* get() {
    static auto* newStartValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* newEndValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* newDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tweener*), "ChangeValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newStartValue, newEndValue, newDuration});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tweener::SetFrom
// Il2CppName: SetFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (DG::Tweening::Tweener::*)(bool)>(&DG::Tweening::Tweener::SetFrom)> {
  static const MethodInfo* get() {
    static auto* relative = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tweener*), "SetFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relative});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tweener::Setup
// Il2CppName: Setup
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::Tweener::DoUpdateDelay
// Il2CppName: DoUpdateDelay
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::Tweener::DoStartup
// Il2CppName: DoStartup
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::Tweener::DoChangeStartValue
// Il2CppName: DoChangeStartValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::Tweener::DoChangeEndValue
// Il2CppName: DoChangeEndValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::Tweener::DoChangeValues
// Il2CppName: DoChangeValues
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::Tweener::DOStartupSpecials
// Il2CppName: DOStartupSpecials
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::Tweener::DOStartupDurationBased
// Il2CppName: DOStartupDurationBased
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::Tweener::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
