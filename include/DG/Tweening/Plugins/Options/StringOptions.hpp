// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: DG.Tweening.Plugins.Options.IPlugOptions
#include "DG/Tweening/Plugins/Options/IPlugOptions.hpp"
// Including type: DG.Tweening.ScrambleMode
#include "DG/Tweening/ScrambleMode.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: DG.Tweening.Plugins.Options
namespace DG::Tweening::Plugins::Options {
  // Forward declaring type: StringOptions
  struct StringOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::Plugins::Options::StringOptions, "DG.Tweening.Plugins.Options", "StringOptions");
// Type namespace: DG.Tweening.Plugins.Options
namespace DG::Tweening::Plugins::Options {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: DG.Tweening.Plugins.Options.StringOptions
  // [TokenAttribute] Offset: FFFFFFFF
  struct StringOptions/*, public ::System::ValueType, public ::DG::Tweening::Plugins::Options::IPlugOptions*/ {
    public:
    public:
    // public System.Boolean richTextEnabled
    // Size: 0x1
    // Offset: 0x0
    bool richTextEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: richTextEnabled and: scrambleMode
    char __padding0[0x3] = {};
    // public DG.Tweening.ScrambleMode scrambleMode
    // Size: 0x4
    // Offset: 0x4
    ::DG::Tweening::ScrambleMode scrambleMode;
    // Field size check
    static_assert(sizeof(::DG::Tweening::ScrambleMode) == 0x4);
    // public System.Char[] scrambledChars
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<::Il2CppChar> scrambledChars;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
    // System.Int32 startValueStrippedLength
    // Size: 0x4
    // Offset: 0x10
    int startValueStrippedLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 changeValueStrippedLength
    // Size: 0x4
    // Offset: 0x14
    int changeValueStrippedLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: StringOptions
    constexpr StringOptions(bool richTextEnabled_ = {}, ::DG::Tweening::ScrambleMode scrambleMode_ = {}, ::ArrayW<::Il2CppChar> scrambledChars_ = ::ArrayW<::Il2CppChar>(static_cast<void*>(nullptr)), int startValueStrippedLength_ = {}, int changeValueStrippedLength_ = {}) noexcept : richTextEnabled{richTextEnabled_}, scrambleMode{scrambleMode_}, scrambledChars{scrambledChars_}, startValueStrippedLength{startValueStrippedLength_}, changeValueStrippedLength{changeValueStrippedLength_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::DG::Tweening::Plugins::Options::IPlugOptions
    operator ::DG::Tweening::Plugins::Options::IPlugOptions() noexcept {
      return *reinterpret_cast<::DG::Tweening::Plugins::Options::IPlugOptions*>(this);
    }
    // Get instance field reference: public System.Boolean richTextEnabled
    [[deprecated]] bool& dyn_richTextEnabled();
    // Get instance field reference: public DG.Tweening.ScrambleMode scrambleMode
    [[deprecated]] ::DG::Tweening::ScrambleMode& dyn_scrambleMode();
    // Get instance field reference: public System.Char[] scrambledChars
    [[deprecated]] ::ArrayW<::Il2CppChar>& dyn_scrambledChars();
    // Get instance field reference: System.Int32 startValueStrippedLength
    [[deprecated]] int& dyn_startValueStrippedLength();
    // Get instance field reference: System.Int32 changeValueStrippedLength
    [[deprecated]] int& dyn_changeValueStrippedLength();
    // public System.Void Reset()
    // Offset: 0x15AC4DC
    void Reset();
  }; // DG.Tweening.Plugins.Options.StringOptions
  #pragma pack(pop)
  static check_size<sizeof(StringOptions), 20 + sizeof(int)> __DG_Tweening_Plugins_Options_StringOptionsSizeCheck;
  static_assert(sizeof(StringOptions) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::Plugins::Options::StringOptions::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Plugins::Options::StringOptions::*)()>(&DG::Tweening::Plugins::Options::StringOptions::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Plugins::Options::StringOptions), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
