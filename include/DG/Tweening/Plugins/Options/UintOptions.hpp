// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: DG.Tweening.Plugins.Options.IPlugOptions
#include "DG/Tweening/Plugins/Options/IPlugOptions.hpp"
// Completed includes
// Type namespace: DG.Tweening.Plugins.Options
namespace DG::Tweening::Plugins::Options {
  // Forward declaring type: UintOptions
  struct UintOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::Plugins::Options::UintOptions, "DG.Tweening.Plugins.Options", "UintOptions");
// Type namespace: DG.Tweening.Plugins.Options
namespace DG::Tweening::Plugins::Options {
  // Size: 0x1
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: DG.Tweening.Plugins.Options.UintOptions
  // [TokenAttribute] Offset: FFFFFFFF
  struct UintOptions/*, public ::System::ValueType, public ::DG::Tweening::Plugins::Options::IPlugOptions*/ {
    public:
    public:
    // public System.Boolean isNegativeChangeValue
    // Size: 0x1
    // Offset: 0x0
    bool isNegativeChangeValue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: UintOptions
    constexpr UintOptions(bool isNegativeChangeValue_ = {}) noexcept : isNegativeChangeValue{isNegativeChangeValue_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::DG::Tweening::Plugins::Options::IPlugOptions
    operator ::DG::Tweening::Plugins::Options::IPlugOptions() noexcept {
      return *reinterpret_cast<::DG::Tweening::Plugins::Options::IPlugOptions*>(this);
    }
    // Creating conversion operator: operator bool
    constexpr operator bool() const noexcept {
      return isNegativeChangeValue;
    }
    // Get instance field reference: public System.Boolean isNegativeChangeValue
    [[deprecated("Use field access instead!")]] bool& dyn_isNegativeChangeValue();
    // public System.Void Reset()
    // Offset: 0x185EC18
    void Reset();
  }; // DG.Tweening.Plugins.Options.UintOptions
  #pragma pack(pop)
  static check_size<sizeof(UintOptions), 0 + sizeof(bool)> __DG_Tweening_Plugins_Options_UintOptionsSizeCheck;
  static_assert(sizeof(UintOptions) == 0x1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::Plugins::Options::UintOptions::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Plugins::Options::UintOptions::*)()>(&DG::Tweening::Plugins::Options::UintOptions::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Plugins::Options::UintOptions), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
