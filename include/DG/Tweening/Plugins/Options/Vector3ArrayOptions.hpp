// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: DG.Tweening.Plugins.Options.IPlugOptions
#include "DG/Tweening/Plugins/Options/IPlugOptions.hpp"
// Including type: DG.Tweening.AxisConstraint
#include "DG/Tweening/AxisConstraint.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: DG.Tweening.Plugins.Options
namespace DG::Tweening::Plugins::Options {
  // Forward declaring type: Vector3ArrayOptions
  struct Vector3ArrayOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::Plugins::Options::Vector3ArrayOptions, "DG.Tweening.Plugins.Options", "Vector3ArrayOptions");
// Type namespace: DG.Tweening.Plugins.Options
namespace DG::Tweening::Plugins::Options {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: DG.Tweening.Plugins.Options.Vector3ArrayOptions
  // [TokenAttribute] Offset: FFFFFFFF
  struct Vector3ArrayOptions/*, public ::System::ValueType, public ::DG::Tweening::Plugins::Options::IPlugOptions*/ {
    public:
    public:
    // public DG.Tweening.AxisConstraint axisConstraint
    // Size: 0x4
    // Offset: 0x0
    ::DG::Tweening::AxisConstraint axisConstraint;
    // Field size check
    static_assert(sizeof(::DG::Tweening::AxisConstraint) == 0x4);
    // public System.Boolean snapping
    // Size: 0x1
    // Offset: 0x4
    bool snapping;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: snapping and: durations
    char __padding1[0x3] = {};
    // System.Single[] durations
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<float> durations;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Creating value type constructor for type: Vector3ArrayOptions
    constexpr Vector3ArrayOptions(::DG::Tweening::AxisConstraint axisConstraint_ = {}, bool snapping_ = {}, ::ArrayW<float> durations_ = ::ArrayW<float>(static_cast<void*>(nullptr))) noexcept : axisConstraint{axisConstraint_}, snapping{snapping_}, durations{durations_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::DG::Tweening::Plugins::Options::IPlugOptions
    operator ::DG::Tweening::Plugins::Options::IPlugOptions() noexcept {
      return *reinterpret_cast<::DG::Tweening::Plugins::Options::IPlugOptions*>(this);
    }
    // Get instance field reference: public DG.Tweening.AxisConstraint axisConstraint
    ::DG::Tweening::AxisConstraint& dyn_axisConstraint();
    // Get instance field reference: public System.Boolean snapping
    bool& dyn_snapping();
    // Get instance field reference: System.Single[] durations
    ::ArrayW<float>& dyn_durations();
    // public System.Void Reset()
    // Offset: 0x1268024
    void Reset();
  }; // DG.Tweening.Plugins.Options.Vector3ArrayOptions
  #pragma pack(pop)
  static check_size<sizeof(Vector3ArrayOptions), 8 + sizeof(::ArrayW<float>)> __DG_Tweening_Plugins_Options_Vector3ArrayOptionsSizeCheck;
  static_assert(sizeof(Vector3ArrayOptions) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::Plugins::Options::Vector3ArrayOptions::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Plugins::Options::Vector3ArrayOptions::*)()>(&DG::Tweening::Plugins::Options::Vector3ArrayOptions::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Plugins::Options::Vector3ArrayOptions), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
