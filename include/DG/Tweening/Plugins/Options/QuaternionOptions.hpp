// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: DG.Tweening.Plugins.Options.IPlugOptions
#include "DG/Tweening/Plugins/Options/IPlugOptions.hpp"
// Including type: DG.Tweening.RotateMode
#include "DG/Tweening/RotateMode.hpp"
// Including type: DG.Tweening.AxisConstraint
#include "DG/Tweening/AxisConstraint.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
// Type namespace: DG.Tweening.Plugins.Options
namespace DG::Tweening::Plugins::Options {
  // Forward declaring type: QuaternionOptions
  struct QuaternionOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::Plugins::Options::QuaternionOptions, "DG.Tweening.Plugins.Options", "QuaternionOptions");
// Type namespace: DG.Tweening.Plugins.Options
namespace DG::Tweening::Plugins::Options {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: DG.Tweening.Plugins.Options.QuaternionOptions
  // [TokenAttribute] Offset: FFFFFFFF
  struct QuaternionOptions/*, public ::System::ValueType, public ::DG::Tweening::Plugins::Options::IPlugOptions*/ {
    public:
    public:
    // public DG.Tweening.RotateMode rotateMode
    // Size: 0x4
    // Offset: 0x0
    ::DG::Tweening::RotateMode rotateMode;
    // Field size check
    static_assert(sizeof(::DG::Tweening::RotateMode) == 0x4);
    // public DG.Tweening.AxisConstraint axisConstraint
    // Size: 0x4
    // Offset: 0x4
    ::DG::Tweening::AxisConstraint axisConstraint;
    // Field size check
    static_assert(sizeof(::DG::Tweening::AxisConstraint) == 0x4);
    // public UnityEngine.Vector3 up
    // Size: 0xC
    // Offset: 0x8
    ::UnityEngine::Vector3 up;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Creating value type constructor for type: QuaternionOptions
    constexpr QuaternionOptions(::DG::Tweening::RotateMode rotateMode_ = {}, ::DG::Tweening::AxisConstraint axisConstraint_ = {}, ::UnityEngine::Vector3 up_ = {}) noexcept : rotateMode{rotateMode_}, axisConstraint{axisConstraint_}, up{up_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::DG::Tweening::Plugins::Options::IPlugOptions
    operator ::DG::Tweening::Plugins::Options::IPlugOptions() noexcept {
      return *reinterpret_cast<::DG::Tweening::Plugins::Options::IPlugOptions*>(this);
    }
    // Get instance field reference: public DG.Tweening.RotateMode rotateMode
    [[deprecated("Use field access instead!")]] ::DG::Tweening::RotateMode& dyn_rotateMode();
    // Get instance field reference: public DG.Tweening.AxisConstraint axisConstraint
    [[deprecated("Use field access instead!")]] ::DG::Tweening::AxisConstraint& dyn_axisConstraint();
    // Get instance field reference: public UnityEngine.Vector3 up
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_up();
    // public System.Void Reset()
    // Offset: 0x15E3144
    void Reset();
  }; // DG.Tweening.Plugins.Options.QuaternionOptions
  #pragma pack(pop)
  static check_size<sizeof(QuaternionOptions), 8 + sizeof(::UnityEngine::Vector3)> __DG_Tweening_Plugins_Options_QuaternionOptionsSizeCheck;
  static_assert(sizeof(QuaternionOptions) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::Plugins::Options::QuaternionOptions::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Plugins::Options::QuaternionOptions::*)()>(&DG::Tweening::Plugins::Options::QuaternionOptions::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Plugins::Options::QuaternionOptions), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
