// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DG.Tweening.PathType
#include "DG/Tweening/PathType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: DG.Tweening.Plugins.Core.PathCore.ControlPoint
#include "DG/Tweening/Plugins/Core/PathCore/ControlPoint.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DG::Tweening::Plugins::Core::PathCore
namespace DG::Tweening::Plugins::Core::PathCore {
  // Forward declaring type: ABSPathDecoder
  class ABSPathDecoder;
  // Forward declaring type: CatmullRomDecoder
  class CatmullRomDecoder;
  // Forward declaring type: LinearDecoder
  class LinearDecoder;
  // Forward declaring type: CubicBezierDecoder
  class CubicBezierDecoder;
}
// Forward declaring namespace: DG::Tweening
namespace DG::Tweening {
  // Forward declaring type: AxisConstraint
  struct AxisConstraint;
}
// Completed forward declares
// Type namespace: DG.Tweening.Plugins.Core.PathCore
namespace DG::Tweening::Plugins::Core::PathCore {
  // Forward declaring type: Path
  class Path;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DG::Tweening::Plugins::Core::PathCore::Path);
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::Plugins::Core::PathCore::Path*, "DG.Tweening.Plugins.Core.PathCore", "Path");
// Type namespace: DG.Tweening.Plugins.Core.PathCore
namespace DG::Tweening::Plugins::Core::PathCore {
  // WARNING Size may be invalid!
  // Autogenerated type: DG.Tweening.Plugins.Core.PathCore.Path
  // [TokenAttribute] Offset: FFFFFFFF
  class Path : public ::Il2CppObject {
    public:
    public:
    // public System.Single[] wpLengths
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<float> wpLengths;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // DG.Tweening.PathType type
    // Size: 0x4
    // Offset: 0x18
    ::DG::Tweening::PathType type;
    // Field size check
    static_assert(sizeof(::DG::Tweening::PathType) == 0x4);
    // System.Int32 subdivisionsXSegment
    // Size: 0x4
    // Offset: 0x1C
    int subdivisionsXSegment;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 subdivisions
    // Size: 0x4
    // Offset: 0x20
    int subdivisions;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // UnityEngine.Vector3[] wps
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Vector3> wps;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // DG.Tweening.Plugins.Core.PathCore.ControlPoint[] controlPoints
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::DG::Tweening::Plugins::Core::PathCore::ControlPoint> controlPoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::DG::Tweening::Plugins::Core::PathCore::ControlPoint>) == 0x8);
    // System.Single length
    // Size: 0x4
    // Offset: 0x38
    float length;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Boolean isFinalized
    // Size: 0x1
    // Offset: 0x3C
    bool isFinalized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Single[] timesTable
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<float> timesTable;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // System.Single[] lengthsTable
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<float> lengthsTable;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // System.Int32 linearWPIndex
    // Size: 0x4
    // Offset: 0x50
    int linearWPIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean addedExtraStartWp
    // Size: 0x1
    // Offset: 0x54
    bool addedExtraStartWp;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean addedExtraEndWp
    // Size: 0x1
    // Offset: 0x55
    bool addedExtraEndWp;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private DG.Tweening.Plugins.Core.PathCore.Path _incrementalClone
    // Size: 0x8
    // Offset: 0x58
    ::DG::Tweening::Plugins::Core::PathCore::Path* incrementalClone;
    // Field size check
    static_assert(sizeof(::DG::Tweening::Plugins::Core::PathCore::Path*) == 0x8);
    // private System.Int32 _incrementalIndex
    // Size: 0x4
    // Offset: 0x60
    int incrementalIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private DG.Tweening.Plugins.Core.PathCore.ABSPathDecoder _decoder
    // Size: 0x8
    // Offset: 0x68
    ::DG::Tweening::Plugins::Core::PathCore::ABSPathDecoder* decoder;
    // Field size check
    static_assert(sizeof(::DG::Tweening::Plugins::Core::PathCore::ABSPathDecoder*) == 0x8);
    // private System.Boolean _changed
    // Size: 0x1
    // Offset: 0x70
    bool changed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // UnityEngine.Vector3[] nonLinearDrawWps
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::UnityEngine::Vector3> nonLinearDrawWps;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // UnityEngine.Vector3 targetPosition
    // Size: 0xC
    // Offset: 0x80
    ::UnityEngine::Vector3 targetPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // System.Nullable`1<UnityEngine.Vector3> lookAtPosition
    // Size: 0xFFFFFFFF
    // Offset: 0x8C
    ::System::Nullable_1<::UnityEngine::Vector3> lookAtPosition;
    // UnityEngine.Color gizmoColor
    // Size: 0x10
    // Offset: 0x9C
    ::UnityEngine::Color gizmoColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Get static field: static private DG.Tweening.Plugins.Core.PathCore.CatmullRomDecoder _catmullRomDecoder
    static ::DG::Tweening::Plugins::Core::PathCore::CatmullRomDecoder* _get__catmullRomDecoder();
    // Set static field: static private DG.Tweening.Plugins.Core.PathCore.CatmullRomDecoder _catmullRomDecoder
    static void _set__catmullRomDecoder(::DG::Tweening::Plugins::Core::PathCore::CatmullRomDecoder* value);
    // Get static field: static private DG.Tweening.Plugins.Core.PathCore.LinearDecoder _linearDecoder
    static ::DG::Tweening::Plugins::Core::PathCore::LinearDecoder* _get__linearDecoder();
    // Set static field: static private DG.Tweening.Plugins.Core.PathCore.LinearDecoder _linearDecoder
    static void _set__linearDecoder(::DG::Tweening::Plugins::Core::PathCore::LinearDecoder* value);
    // Get static field: static private DG.Tweening.Plugins.Core.PathCore.CubicBezierDecoder _cubicBezierDecoder
    static ::DG::Tweening::Plugins::Core::PathCore::CubicBezierDecoder* _get__cubicBezierDecoder();
    // Set static field: static private DG.Tweening.Plugins.Core.PathCore.CubicBezierDecoder _cubicBezierDecoder
    static void _set__cubicBezierDecoder(::DG::Tweening::Plugins::Core::PathCore::CubicBezierDecoder* value);
    // Get instance field reference: public System.Single[] wpLengths
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_wpLengths();
    // Get instance field reference: DG.Tweening.PathType type
    [[deprecated("Use field access instead!")]] ::DG::Tweening::PathType& dyn_type();
    // Get instance field reference: System.Int32 subdivisionsXSegment
    [[deprecated("Use field access instead!")]] int& dyn_subdivisionsXSegment();
    // Get instance field reference: System.Int32 subdivisions
    [[deprecated("Use field access instead!")]] int& dyn_subdivisions();
    // Get instance field reference: UnityEngine.Vector3[] wps
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_wps();
    // Get instance field reference: DG.Tweening.Plugins.Core.PathCore.ControlPoint[] controlPoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::DG::Tweening::Plugins::Core::PathCore::ControlPoint>& dyn_controlPoints();
    // Get instance field reference: System.Single length
    [[deprecated("Use field access instead!")]] float& dyn_length();
    // Get instance field reference: System.Boolean isFinalized
    [[deprecated("Use field access instead!")]] bool& dyn_isFinalized();
    // Get instance field reference: System.Single[] timesTable
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_timesTable();
    // Get instance field reference: System.Single[] lengthsTable
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_lengthsTable();
    // Get instance field reference: System.Int32 linearWPIndex
    [[deprecated("Use field access instead!")]] int& dyn_linearWPIndex();
    // Get instance field reference: System.Boolean addedExtraStartWp
    [[deprecated("Use field access instead!")]] bool& dyn_addedExtraStartWp();
    // Get instance field reference: System.Boolean addedExtraEndWp
    [[deprecated("Use field access instead!")]] bool& dyn_addedExtraEndWp();
    // Get instance field reference: private DG.Tweening.Plugins.Core.PathCore.Path _incrementalClone
    [[deprecated("Use field access instead!")]] ::DG::Tweening::Plugins::Core::PathCore::Path*& dyn__incrementalClone();
    // Get instance field reference: private System.Int32 _incrementalIndex
    [[deprecated("Use field access instead!")]] int& dyn__incrementalIndex();
    // Get instance field reference: private DG.Tweening.Plugins.Core.PathCore.ABSPathDecoder _decoder
    [[deprecated("Use field access instead!")]] ::DG::Tweening::Plugins::Core::PathCore::ABSPathDecoder*& dyn__decoder();
    // Get instance field reference: private System.Boolean _changed
    [[deprecated("Use field access instead!")]] bool& dyn__changed();
    // Get instance field reference: UnityEngine.Vector3[] nonLinearDrawWps
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_nonLinearDrawWps();
    // Get instance field reference: UnityEngine.Vector3 targetPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_targetPosition();
    // Get instance field reference: System.Nullable`1<UnityEngine.Vector3> lookAtPosition
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::UnityEngine::Vector3>& dyn_lookAtPosition();
    // Get instance field reference: UnityEngine.Color gizmoColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_gizmoColor();
    // public System.Void .ctor(DG.Tweening.PathType type, UnityEngine.Vector3[] waypoints, System.Int32 subdivisionsXSegment, System.Nullable`1<UnityEngine.Color> gizmoColor)
    // Offset: 0x15E0A1C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Path* New_ctor(::DG::Tweening::PathType type, ::ArrayW<::UnityEngine::Vector3> waypoints, int subdivisionsXSegment, ::System::Nullable_1<::UnityEngine::Color> gizmoColor) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Plugins::Core::PathCore::Path::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Path*, creationType>(type, waypoints, subdivisionsXSegment, gizmoColor)));
    }
    // System.Void .ctor()
    // Offset: 0x15E0E28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Path* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Plugins::Core::PathCore::Path::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Path*, creationType>()));
    }
    // System.Void FinalizePath(System.Boolean isClosedPath, DG.Tweening.AxisConstraint lockPositionAxes, UnityEngine.Vector3 currTargetVal)
    // Offset: 0x15E0E8C
    void FinalizePath(bool isClosedPath, ::DG::Tweening::AxisConstraint lockPositionAxes, ::UnityEngine::Vector3 currTargetVal);
    // UnityEngine.Vector3 GetPoint(System.Single perc, System.Boolean convertToConstantPerc)
    // Offset: 0x15E0F44
    ::UnityEngine::Vector3 GetPoint(float perc, bool convertToConstantPerc);
    // System.Single ConvertToConstantPathPerc(System.Single perc)
    // Offset: 0x15E0F88
    float ConvertToConstantPathPerc(float perc);
    // System.Int32 GetWaypointIndexFromPerc(System.Single perc, System.Boolean isMovingForward)
    // Offset: 0x15E10A4
    int GetWaypointIndexFromPerc(float perc, bool isMovingForward);
    // static UnityEngine.Vector3[] GetDrawPoints(DG.Tweening.Plugins.Core.PathCore.Path p, System.Int32 drawSubdivisionsXSegment)
    // Offset: 0x15E1150
    static ::ArrayW<::UnityEngine::Vector3> GetDrawPoints(::DG::Tweening::Plugins::Core::PathCore::Path* p, int drawSubdivisionsXSegment);
    // static System.Void RefreshNonLinearDrawWps(DG.Tweening.Plugins.Core.PathCore.Path p)
    // Offset: 0x15E1240
    static void RefreshNonLinearDrawWps(::DG::Tweening::Plugins::Core::PathCore::Path* p);
    // System.Void Destroy()
    // Offset: 0x15E1344
    void Destroy();
    // DG.Tweening.Plugins.Core.PathCore.Path CloneIncremental(System.Int32 loopIncrement)
    // Offset: 0x15E1474
    ::DG::Tweening::Plugins::Core::PathCore::Path* CloneIncremental(int loopIncrement);
    // System.Void AssignWaypoints(UnityEngine.Vector3[] newWps, System.Boolean cloneWps)
    // Offset: 0x15E0BF4
    void AssignWaypoints(::ArrayW<::UnityEngine::Vector3> newWps, bool cloneWps);
    // System.Void AssignDecoder(DG.Tweening.PathType pathType)
    // Offset: 0x15E0CDC
    void AssignDecoder(::DG::Tweening::PathType pathType);
    // System.Void Draw()
    // Offset: 0x15E1914
    void Draw();
    // static private System.Void Draw(DG.Tweening.Plugins.Core.PathCore.Path p)
    // Offset: 0x15E1918
    static void Draw(::DG::Tweening::Plugins::Core::PathCore::Path* p);
  }; // DG.Tweening.Plugins.Core.PathCore.Path
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::Plugins::Core::PathCore::Path::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DG::Tweening::Plugins::Core::PathCore::Path::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DG::Tweening::Plugins::Core::PathCore::Path::FinalizePath
// Il2CppName: FinalizePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Plugins::Core::PathCore::Path::*)(bool, ::DG::Tweening::AxisConstraint, ::UnityEngine::Vector3)>(&DG::Tweening::Plugins::Core::PathCore::Path::FinalizePath)> {
  static const MethodInfo* get() {
    static auto* isClosedPath = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* lockPositionAxes = &::il2cpp_utils::GetClassFromName("DG.Tweening", "AxisConstraint")->byval_arg;
    static auto* currTargetVal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Plugins::Core::PathCore::Path*), "FinalizePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isClosedPath, lockPositionAxes, currTargetVal});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Plugins::Core::PathCore::Path::GetPoint
// Il2CppName: GetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (DG::Tweening::Plugins::Core::PathCore::Path::*)(float, bool)>(&DG::Tweening::Plugins::Core::PathCore::Path::GetPoint)> {
  static const MethodInfo* get() {
    static auto* perc = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* convertToConstantPerc = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Plugins::Core::PathCore::Path*), "GetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{perc, convertToConstantPerc});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Plugins::Core::PathCore::Path::ConvertToConstantPathPerc
// Il2CppName: ConvertToConstantPathPerc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Plugins::Core::PathCore::Path::*)(float)>(&DG::Tweening::Plugins::Core::PathCore::Path::ConvertToConstantPathPerc)> {
  static const MethodInfo* get() {
    static auto* perc = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Plugins::Core::PathCore::Path*), "ConvertToConstantPathPerc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{perc});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Plugins::Core::PathCore::Path::GetWaypointIndexFromPerc
// Il2CppName: GetWaypointIndexFromPerc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DG::Tweening::Plugins::Core::PathCore::Path::*)(float, bool)>(&DG::Tweening::Plugins::Core::PathCore::Path::GetWaypointIndexFromPerc)> {
  static const MethodInfo* get() {
    static auto* perc = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* isMovingForward = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Plugins::Core::PathCore::Path*), "GetWaypointIndexFromPerc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{perc, isMovingForward});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Plugins::Core::PathCore::Path::GetDrawPoints
// Il2CppName: GetDrawPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (*)(::DG::Tweening::Plugins::Core::PathCore::Path*, int)>(&DG::Tweening::Plugins::Core::PathCore::Path::GetDrawPoints)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Core.PathCore", "Path")->byval_arg;
    static auto* drawSubdivisionsXSegment = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Plugins::Core::PathCore::Path*), "GetDrawPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, drawSubdivisionsXSegment});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Plugins::Core::PathCore::Path::RefreshNonLinearDrawWps
// Il2CppName: RefreshNonLinearDrawWps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DG::Tweening::Plugins::Core::PathCore::Path*)>(&DG::Tweening::Plugins::Core::PathCore::Path::RefreshNonLinearDrawWps)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Core.PathCore", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Plugins::Core::PathCore::Path*), "RefreshNonLinearDrawWps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Plugins::Core::PathCore::Path::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Plugins::Core::PathCore::Path::*)()>(&DG::Tweening::Plugins::Core::PathCore::Path::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Plugins::Core::PathCore::Path*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Plugins::Core::PathCore::Path::CloneIncremental
// Il2CppName: CloneIncremental
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Plugins::Core::PathCore::Path* (DG::Tweening::Plugins::Core::PathCore::Path::*)(int)>(&DG::Tweening::Plugins::Core::PathCore::Path::CloneIncremental)> {
  static const MethodInfo* get() {
    static auto* loopIncrement = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Plugins::Core::PathCore::Path*), "CloneIncremental", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopIncrement});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Plugins::Core::PathCore::Path::AssignWaypoints
// Il2CppName: AssignWaypoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Plugins::Core::PathCore::Path::*)(::ArrayW<::UnityEngine::Vector3>, bool)>(&DG::Tweening::Plugins::Core::PathCore::Path::AssignWaypoints)> {
  static const MethodInfo* get() {
    static auto* newWps = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* cloneWps = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Plugins::Core::PathCore::Path*), "AssignWaypoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newWps, cloneWps});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Plugins::Core::PathCore::Path::AssignDecoder
// Il2CppName: AssignDecoder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Plugins::Core::PathCore::Path::*)(::DG::Tweening::PathType)>(&DG::Tweening::Plugins::Core::PathCore::Path::AssignDecoder)> {
  static const MethodInfo* get() {
    static auto* pathType = &::il2cpp_utils::GetClassFromName("DG.Tweening", "PathType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Plugins::Core::PathCore::Path*), "AssignDecoder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pathType});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Plugins::Core::PathCore::Path::Draw
// Il2CppName: Draw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Plugins::Core::PathCore::Path::*)()>(&DG::Tweening::Plugins::Core::PathCore::Path::Draw)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Plugins::Core::PathCore::Path*), "Draw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Plugins::Core::PathCore::Path::Draw
// Il2CppName: Draw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DG::Tweening::Plugins::Core::PathCore::Path*)>(&DG::Tweening::Plugins::Core::PathCore::Path::Draw)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Core.PathCore", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Plugins::Core::PathCore::Path*), "Draw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
