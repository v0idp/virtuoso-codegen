// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: DG.Tweening.Plugins.Core.PathCore
namespace DG::Tweening::Plugins::Core::PathCore {
  // Forward declaring type: ControlPoint
  struct ControlPoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::Plugins::Core::PathCore::ControlPoint, "DG.Tweening.Plugins.Core.PathCore", "ControlPoint");
// Type namespace: DG.Tweening.Plugins.Core.PathCore
namespace DG::Tweening::Plugins::Core::PathCore {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: DG.Tweening.Plugins.Core.PathCore.ControlPoint
  // [TokenAttribute] Offset: FFFFFFFF
  struct ControlPoint/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 a
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 a;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 b
    // Size: 0xC
    // Offset: 0xC
    ::UnityEngine::Vector3 b;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Creating value type constructor for type: ControlPoint
    constexpr ControlPoint(::UnityEngine::Vector3 a_ = {}, ::UnityEngine::Vector3 b_ = {}) noexcept : a{a_}, b{b_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 a
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_a();
    // Get instance field reference: public UnityEngine.Vector3 b
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_b();
    // public System.Void .ctor(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
    // Offset: 0x15D369C
    // ABORTED: conflicts with another method.  ControlPoint(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b);
    // public override System.String ToString()
    // Offset: 0x15D5B58
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // DG.Tweening.Plugins.Core.PathCore.ControlPoint
  #pragma pack(pop)
  static check_size<sizeof(ControlPoint), 12 + sizeof(::UnityEngine::Vector3)> __DG_Tweening_Plugins_Core_PathCore_ControlPointSizeCheck;
  static_assert(sizeof(ControlPoint) == 0x18);
  // static public DG.Tweening.Plugins.Core.PathCore.ControlPoint op_Addition(DG.Tweening.Plugins.Core.PathCore.ControlPoint cp, UnityEngine.Vector3 v)
  // Offset: 0x15D5B28
  ::DG::Tweening::Plugins::Core::PathCore::ControlPoint operator+(const ::DG::Tweening::Plugins::Core::PathCore::ControlPoint& cp, const ::UnityEngine::Vector3& v);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::Plugins::Core::PathCore::ControlPoint::ControlPoint
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DG::Tweening::Plugins::Core::PathCore::ControlPoint::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (DG::Tweening::Plugins::Core::PathCore::ControlPoint::*)()>(&DG::Tweening::Plugins::Core::PathCore::ControlPoint::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Plugins::Core::PathCore::ControlPoint), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Plugins::Core::PathCore::ControlPoint::operator+
// Il2CppName: op_Addition
// Cannot perform method pointer template specialization from operators!
