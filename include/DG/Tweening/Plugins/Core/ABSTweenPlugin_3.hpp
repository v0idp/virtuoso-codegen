// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DG.Tweening.Plugins.Core.ITweenPlugin
#include "DG/Tweening/Plugins/Core/ITweenPlugin.hpp"
// Including type: DG.Tweening.Core.Enums.UpdateNotice
#include "DG/Tweening/Core/Enums/UpdateNotice.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DG::Tweening::Plugins::Options
namespace DG::Tweening::Plugins::Options {
  // Forward declaring type: IPlugOptions
  class IPlugOptions;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ValueType because it is already included!
}
// Forward declaring namespace: DG::Tweening::Core
namespace DG::Tweening::Core {
  // Forward declaring type: TweenerCore`3<T1, T2, TPlugOptions>
  template<typename T1, typename T2, typename TPlugOptions>
  class TweenerCore_3;
  // Forward declaring type: DOGetter`1<T>
  template<typename T>
  class DOGetter_1;
  // Forward declaring type: DOSetter`1<T>
  template<typename T>
  class DOSetter_1;
}
// Forward declaring namespace: DG::Tweening
namespace DG::Tweening {
  // Forward declaring type: Tween
  class Tween;
}
// Completed forward declares
// Type namespace: DG.Tweening.Plugins.Core
namespace DG::Tweening::Plugins::Core {
  // Forward declaring type: ABSTweenPlugin`3<T1, T2, TPlugOptions>
  template<typename T1, typename T2, typename TPlugOptions>
  class ABSTweenPlugin_3;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::DG::Tweening::Plugins::Core::ABSTweenPlugin_3, "DG.Tweening.Plugins.Core", "ABSTweenPlugin`3");
// Type namespace: DG.Tweening.Plugins.Core
namespace DG::Tweening::Plugins::Core {
  // WARNING Size may be invalid!
  // Autogenerated type: DG.Tweening.Plugins.Core.ABSTweenPlugin`3
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T1, typename T2, typename TPlugOptions>
  class ABSTweenPlugin_3 : public ::Il2CppObject/*, public ::DG::Tweening::Plugins::Core::ITweenPlugin*/ {
    public:
    // Creating interface conversion operator: operator ::DG::Tweening::Plugins::Core::ITweenPlugin
    operator ::DG::Tweening::Plugins::Core::ITweenPlugin() noexcept {
      return *reinterpret_cast<::DG::Tweening::Plugins::Core::ITweenPlugin*>(this);
    }
    // public System.Void Reset(DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Reset(::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* t) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Plugins::Core::ABSTweenPlugin_3::Reset");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::DG::Tweening::Plugins::Core::ABSTweenPlugin_3<T1, T2, TPlugOptions>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
    }
    // public System.Void SetFrom(DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> t, System.Boolean isRelative)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetFrom(::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* t, bool isRelative) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Plugins::Core::ABSTweenPlugin_3::SetFrom");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::DG::Tweening::Plugins::Core::ABSTweenPlugin_3<T1, T2, TPlugOptions>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t, isRelative);
    }
    // public System.Void SetFrom(DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> t, T2 fromValue, System.Boolean setImmediately)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetFrom(::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* t, T2 fromValue, bool setImmediately) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Plugins::Core::ABSTweenPlugin_3::SetFrom");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::DG::Tweening::Plugins::Core::ABSTweenPlugin_3<T1, T2, TPlugOptions>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t, fromValue, setImmediately);
    }
    // public T2 ConvertToStartValue(DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> t, T1 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T2 ConvertToStartValue(::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* t, T1 value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Plugins::Core::ABSTweenPlugin_3::ConvertToStartValue");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::DG::Tweening::Plugins::Core::ABSTweenPlugin_3<T1, T2, TPlugOptions>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<T2, false>(this, ___internal__method, t, value);
    }
    // public System.Void SetRelativeEndValue(DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetRelativeEndValue(::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* t) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Plugins::Core::ABSTweenPlugin_3::SetRelativeEndValue");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::DG::Tweening::Plugins::Core::ABSTweenPlugin_3<T1, T2, TPlugOptions>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
    }
    // public System.Void SetChangeValue(DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetChangeValue(::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* t) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Plugins::Core::ABSTweenPlugin_3::SetChangeValue");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::DG::Tweening::Plugins::Core::ABSTweenPlugin_3<T1, T2, TPlugOptions>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
    }
    // public System.Single GetSpeedBasedDuration(TPlugOptions options, System.Single unitsXSecond, T2 changeValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    float GetSpeedBasedDuration(TPlugOptions options, float unitsXSecond, T2 changeValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Plugins::Core::ABSTweenPlugin_3::GetSpeedBasedDuration");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::DG::Tweening::Plugins::Core::ABSTweenPlugin_3<T1, T2, TPlugOptions>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, options, unitsXSecond, changeValue);
    }
    // public System.Void EvaluateAndApply(TPlugOptions options, DG.Tweening.Tween t, System.Boolean isRelative, DG.Tweening.Core.DOGetter`1<T1> getter, DG.Tweening.Core.DOSetter`1<T1> setter, System.Single elapsed, T2 startValue, T2 changeValue, System.Single duration, System.Boolean usingInversePosition, DG.Tweening.Core.Enums.UpdateNotice updateNotice)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void EvaluateAndApply(TPlugOptions options, ::DG::Tweening::Tween* t, bool isRelative, ::DG::Tweening::Core::DOGetter_1<T1>* getter, ::DG::Tweening::Core::DOSetter_1<T1>* setter, float elapsed, T2 startValue, T2 changeValue, float duration, bool usingInversePosition, ::DG::Tweening::Core::Enums::UpdateNotice updateNotice) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Plugins::Core::ABSTweenPlugin_3::EvaluateAndApply");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::DG::Tweening::Plugins::Core::ABSTweenPlugin_3<T1, T2, TPlugOptions>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, options, t, isRelative, getter, setter, elapsed, startValue, changeValue, duration, usingInversePosition, updateNotice);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ABSTweenPlugin_3<T1, T2, TPlugOptions>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Plugins::Core::ABSTweenPlugin_3::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ABSTweenPlugin_3<T1, T2, TPlugOptions>*, creationType>()));
    }
  }; // DG.Tweening.Plugins.Core.ABSTweenPlugin`3
  // Could not write size check! Type: DG.Tweening.Plugins.Core.ABSTweenPlugin`3 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
