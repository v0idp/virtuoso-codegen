// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Completed includes
// Type namespace: DG.Tweening
namespace DG::Tweening {
  // Forward declaring type: Color2
  struct Color2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::Color2, "DG.Tweening", "Color2");
// Type namespace: DG.Tweening
namespace DG::Tweening {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: DG.Tweening.Color2
  // [TokenAttribute] Offset: FFFFFFFF
  struct Color2/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Color ca
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::Color ca;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color cb
    // Size: 0x10
    // Offset: 0x10
    ::UnityEngine::Color cb;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Creating value type constructor for type: Color2
    constexpr Color2(::UnityEngine::Color ca_ = {}, ::UnityEngine::Color cb_ = {}) noexcept : ca{ca_}, cb{cb_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Color ca
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_ca();
    // Get instance field reference: public UnityEngine.Color cb
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_cb();
    // public System.Void .ctor(UnityEngine.Color ca, UnityEngine.Color cb)
    // Offset: 0x15D3F48
    // ABORTED: conflicts with another method.  Color2(::UnityEngine::Color ca, ::UnityEngine::Color cb);
  }; // DG.Tweening.Color2
  #pragma pack(pop)
  static check_size<sizeof(Color2), 16 + sizeof(::UnityEngine::Color)> __DG_Tweening_Color2SizeCheck;
  static_assert(sizeof(Color2) == 0x20);
  // static public DG.Tweening.Color2 op_Addition(DG.Tweening.Color2 c1, DG.Tweening.Color2 c2)
  // Offset: 0x15D3F5C
  ::DG::Tweening::Color2 operator+(const ::DG::Tweening::Color2& c1, const ::DG::Tweening::Color2& c2);
  // static public DG.Tweening.Color2 op_Subtraction(DG.Tweening.Color2 c1, DG.Tweening.Color2 c2)
  // Offset: 0x15D3FEC
  ::DG::Tweening::Color2 operator-(const ::DG::Tweening::Color2& c1, const ::DG::Tweening::Color2& c2);
  // static public DG.Tweening.Color2 op_Multiply(DG.Tweening.Color2 c1, System.Single f)
  // Offset: 0x15D407C
  ::DG::Tweening::Color2 operator*(const ::DG::Tweening::Color2& c1, const float& f);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::Color2::Color2
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DG::Tweening::Color2::operator+
// Il2CppName: op_Addition
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: DG::Tweening::Color2::operator-
// Il2CppName: op_Subtraction
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: DG::Tweening::Color2::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
