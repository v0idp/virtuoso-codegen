// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: DG.Tweening
namespace DG::Tweening {
  // Forward declaring type: AxisConstraint
  struct AxisConstraint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::AxisConstraint, "DG.Tweening", "AxisConstraint");
// Type namespace: DG.Tweening
namespace DG::Tweening {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: DG.Tweening.AxisConstraint
  // [TokenAttribute] Offset: FFFFFFFF
  // [FlagsAttribute] Offset: FFFFFFFF
  struct AxisConstraint/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: AxisConstraint
    constexpr AxisConstraint(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public DG.Tweening.AxisConstraint None
    static constexpr const int None = 0;
    // Get static field: static public DG.Tweening.AxisConstraint None
    static ::DG::Tweening::AxisConstraint _get_None();
    // Set static field: static public DG.Tweening.AxisConstraint None
    static void _set_None(::DG::Tweening::AxisConstraint value);
    // static field const value: static public DG.Tweening.AxisConstraint X
    static constexpr const int X = 2;
    // Get static field: static public DG.Tweening.AxisConstraint X
    static ::DG::Tweening::AxisConstraint _get_X();
    // Set static field: static public DG.Tweening.AxisConstraint X
    static void _set_X(::DG::Tweening::AxisConstraint value);
    // static field const value: static public DG.Tweening.AxisConstraint Y
    static constexpr const int Y = 4;
    // Get static field: static public DG.Tweening.AxisConstraint Y
    static ::DG::Tweening::AxisConstraint _get_Y();
    // Set static field: static public DG.Tweening.AxisConstraint Y
    static void _set_Y(::DG::Tweening::AxisConstraint value);
    // static field const value: static public DG.Tweening.AxisConstraint Z
    static constexpr const int Z = 8;
    // Get static field: static public DG.Tweening.AxisConstraint Z
    static ::DG::Tweening::AxisConstraint _get_Z();
    // Set static field: static public DG.Tweening.AxisConstraint Z
    static void _set_Z(::DG::Tweening::AxisConstraint value);
    // static field const value: static public DG.Tweening.AxisConstraint W
    static constexpr const int W = 16;
    // Get static field: static public DG.Tweening.AxisConstraint W
    static ::DG::Tweening::AxisConstraint _get_W();
    // Set static field: static public DG.Tweening.AxisConstraint W
    static void _set_W(::DG::Tweening::AxisConstraint value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated]] int& dyn_value__();
  }; // DG.Tweening.AxisConstraint
  #pragma pack(pop)
  static check_size<sizeof(AxisConstraint), 0 + sizeof(int)> __DG_Tweening_AxisConstraintSizeCheck;
  static_assert(sizeof(AxisConstraint) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
