// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DG.Tweening.Core.ABSSequentiable
#include "DG/Tweening/Core/ABSSequentiable.hpp"
// Including type: DG.Tweening.UpdateType
#include "DG/Tweening/UpdateType.hpp"
// Including type: DG.Tweening.LoopType
#include "DG/Tweening/LoopType.hpp"
// Including type: DG.Tweening.Ease
#include "DG/Tweening/Ease.hpp"
// Including type: DG.Tweening.Core.Enums.SpecialStartupMode
#include "DG/Tweening/Core/Enums/SpecialStartupMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DG::Tweening
namespace DG::Tweening {
  // Forward declaring type: TweenCallback
  class TweenCallback;
  // Forward declaring type: TweenCallback`1<T>
  template<typename T>
  class TweenCallback_1;
  // Forward declaring type: EaseFunction
  class EaseFunction;
  // Forward declaring type: Sequence
  class Sequence;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: DG::Tweening::Core::Enums
namespace DG::Tweening::Core::Enums {
  // Forward declaring type: UpdateMode
  struct UpdateMode;
  // Forward declaring type: UpdateNotice
  struct UpdateNotice;
}
// Completed forward declares
// Type namespace: DG.Tweening
namespace DG::Tweening {
  // Forward declaring type: Tween
  class Tween;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DG::Tweening::Tween);
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::Tween*, "DG.Tweening", "Tween");
// Type namespace: DG.Tweening
namespace DG::Tweening {
  // Size: 0x120
  #pragma pack(push, 1)
  // Autogenerated type: DG.Tweening.Tween
  // [TokenAttribute] Offset: FFFFFFFF
  class Tween : public ::DG::Tweening::Core::ABSSequentiable {
    public:
    public:
    // public System.Single timeScale
    // Size: 0x4
    // Offset: 0x28
    float timeScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean isBackwards
    // Size: 0x1
    // Offset: 0x2C
    bool isBackwards;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isBackwards and: id
    char __padding1[0x3] = {};
    // public System.Object id
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppObject* id;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public System.String stringId
    // Size: 0x8
    // Offset: 0x38
    ::StringW stringId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 intId
    // Size: 0x4
    // Offset: 0x40
    int intId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: intId and: target
    char __padding4[0x4] = {};
    // public System.Object target
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppObject* target;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // DG.Tweening.UpdateType updateType
    // Size: 0x4
    // Offset: 0x50
    ::DG::Tweening::UpdateType updateType;
    // Field size check
    static_assert(sizeof(::DG::Tweening::UpdateType) == 0x4);
    // System.Boolean isIndependentUpdate
    // Size: 0x1
    // Offset: 0x54
    bool isIndependentUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isIndependentUpdate and: onPlay
    char __padding7[0x3] = {};
    // public DG.Tweening.TweenCallback onPlay
    // Size: 0x8
    // Offset: 0x58
    ::DG::Tweening::TweenCallback* onPlay;
    // Field size check
    static_assert(sizeof(::DG::Tweening::TweenCallback*) == 0x8);
    // public DG.Tweening.TweenCallback onPause
    // Size: 0x8
    // Offset: 0x60
    ::DG::Tweening::TweenCallback* onPause;
    // Field size check
    static_assert(sizeof(::DG::Tweening::TweenCallback*) == 0x8);
    // public DG.Tweening.TweenCallback onRewind
    // Size: 0x8
    // Offset: 0x68
    ::DG::Tweening::TweenCallback* onRewind;
    // Field size check
    static_assert(sizeof(::DG::Tweening::TweenCallback*) == 0x8);
    // public DG.Tweening.TweenCallback onUpdate
    // Size: 0x8
    // Offset: 0x70
    ::DG::Tweening::TweenCallback* onUpdate;
    // Field size check
    static_assert(sizeof(::DG::Tweening::TweenCallback*) == 0x8);
    // public DG.Tweening.TweenCallback onStepComplete
    // Size: 0x8
    // Offset: 0x78
    ::DG::Tweening::TweenCallback* onStepComplete;
    // Field size check
    static_assert(sizeof(::DG::Tweening::TweenCallback*) == 0x8);
    // public DG.Tweening.TweenCallback onComplete
    // Size: 0x8
    // Offset: 0x80
    ::DG::Tweening::TweenCallback* onComplete;
    // Field size check
    static_assert(sizeof(::DG::Tweening::TweenCallback*) == 0x8);
    // public DG.Tweening.TweenCallback onKill
    // Size: 0x8
    // Offset: 0x88
    ::DG::Tweening::TweenCallback* onKill;
    // Field size check
    static_assert(sizeof(::DG::Tweening::TweenCallback*) == 0x8);
    // public DG.Tweening.TweenCallback`1<System.Int32> onWaypointChange
    // Size: 0x8
    // Offset: 0x90
    ::DG::Tweening::TweenCallback_1<int>* onWaypointChange;
    // Field size check
    static_assert(sizeof(::DG::Tweening::TweenCallback_1<int>*) == 0x8);
    // System.Boolean isFrom
    // Size: 0x1
    // Offset: 0x98
    bool isFrom;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean isBlendable
    // Size: 0x1
    // Offset: 0x99
    bool isBlendable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean isRecyclable
    // Size: 0x1
    // Offset: 0x9A
    bool isRecyclable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean isSpeedBased
    // Size: 0x1
    // Offset: 0x9B
    bool isSpeedBased;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean autoKill
    // Size: 0x1
    // Offset: 0x9C
    bool autoKill;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: autoKill and: duration
    char __padding20[0x3] = {};
    // System.Single duration
    // Size: 0x4
    // Offset: 0xA0
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Int32 loops
    // Size: 0x4
    // Offset: 0xA4
    int loops;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // DG.Tweening.LoopType loopType
    // Size: 0x4
    // Offset: 0xA8
    ::DG::Tweening::LoopType loopType;
    // Field size check
    static_assert(sizeof(::DG::Tweening::LoopType) == 0x4);
    // System.Single delay
    // Size: 0x4
    // Offset: 0xAC
    float delay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <isRelative>k__BackingField
    // Size: 0x1
    // Offset: 0xB0
    bool isRelative;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isRelative and: easeType
    char __padding25[0x3] = {};
    // DG.Tweening.Ease easeType
    // Size: 0x4
    // Offset: 0xB4
    ::DG::Tweening::Ease easeType;
    // Field size check
    static_assert(sizeof(::DG::Tweening::Ease) == 0x4);
    // DG.Tweening.EaseFunction customEase
    // Size: 0x8
    // Offset: 0xB8
    ::DG::Tweening::EaseFunction* customEase;
    // Field size check
    static_assert(sizeof(::DG::Tweening::EaseFunction*) == 0x8);
    // public System.Single easeOvershootOrAmplitude
    // Size: 0x4
    // Offset: 0xC0
    float easeOvershootOrAmplitude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single easePeriod
    // Size: 0x4
    // Offset: 0xC4
    float easePeriod;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.String debugTargetId
    // Size: 0x8
    // Offset: 0xC8
    ::StringW debugTargetId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Type typeofT1
    // Size: 0x8
    // Offset: 0xD0
    ::System::Type* typeofT1;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // System.Type typeofT2
    // Size: 0x8
    // Offset: 0xD8
    ::System::Type* typeofT2;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // System.Type typeofTPlugOptions
    // Size: 0x8
    // Offset: 0xE0
    ::System::Type* typeofTPlugOptions;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private System.Boolean <active>k__BackingField
    // Size: 0x1
    // Offset: 0xE8
    bool active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean isSequenced
    // Size: 0x1
    // Offset: 0xE9
    bool isSequenced;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isSequenced and: sequenceParent
    char __padding35[0x6] = {};
    // DG.Tweening.Sequence sequenceParent
    // Size: 0x8
    // Offset: 0xF0
    ::DG::Tweening::Sequence* sequenceParent;
    // Field size check
    static_assert(sizeof(::DG::Tweening::Sequence*) == 0x8);
    // System.Int32 activeId
    // Size: 0x4
    // Offset: 0xF8
    int activeId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // DG.Tweening.Core.Enums.SpecialStartupMode specialStartupMode
    // Size: 0x4
    // Offset: 0xFC
    ::DG::Tweening::Core::Enums::SpecialStartupMode specialStartupMode;
    // Field size check
    static_assert(sizeof(::DG::Tweening::Core::Enums::SpecialStartupMode) == 0x4);
    // System.Boolean creationLocked
    // Size: 0x1
    // Offset: 0x100
    bool creationLocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean startupDone
    // Size: 0x1
    // Offset: 0x101
    bool startupDone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <playedOnce>k__BackingField
    // Size: 0x1
    // Offset: 0x102
    bool playedOnce;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: playedOnce and: position
    char __padding41[0x1] = {};
    // private System.Single <position>k__BackingField
    // Size: 0x4
    // Offset: 0x104
    float position;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single fullDuration
    // Size: 0x4
    // Offset: 0x108
    float fullDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Int32 completedLoops
    // Size: 0x4
    // Offset: 0x10C
    int completedLoops;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean isPlaying
    // Size: 0x1
    // Offset: 0x110
    bool isPlaying;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean isComplete
    // Size: 0x1
    // Offset: 0x111
    bool isComplete;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isComplete and: elapsedDelay
    char __padding46[0x2] = {};
    // System.Single elapsedDelay
    // Size: 0x4
    // Offset: 0x114
    float elapsedDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Boolean delayComplete
    // Size: 0x1
    // Offset: 0x118
    bool delayComplete;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: delayComplete and: miscInt
    char __padding48[0x3] = {};
    // System.Int32 miscInt
    // Size: 0x4
    // Offset: 0x11C
    int miscInt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Single timeScale
    [[deprecated("Use field access instead!")]] float& dyn_timeScale();
    // Get instance field reference: public System.Boolean isBackwards
    [[deprecated("Use field access instead!")]] bool& dyn_isBackwards();
    // Get instance field reference: public System.Object id
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_id();
    // Get instance field reference: public System.String stringId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_stringId();
    // Get instance field reference: public System.Int32 intId
    [[deprecated("Use field access instead!")]] int& dyn_intId();
    // Get instance field reference: public System.Object target
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_target();
    // Get instance field reference: DG.Tweening.UpdateType updateType
    [[deprecated("Use field access instead!")]] ::DG::Tweening::UpdateType& dyn_updateType();
    // Get instance field reference: System.Boolean isIndependentUpdate
    [[deprecated("Use field access instead!")]] bool& dyn_isIndependentUpdate();
    // Get instance field reference: public DG.Tweening.TweenCallback onPlay
    [[deprecated("Use field access instead!")]] ::DG::Tweening::TweenCallback*& dyn_onPlay();
    // Get instance field reference: public DG.Tweening.TweenCallback onPause
    [[deprecated("Use field access instead!")]] ::DG::Tweening::TweenCallback*& dyn_onPause();
    // Get instance field reference: public DG.Tweening.TweenCallback onRewind
    [[deprecated("Use field access instead!")]] ::DG::Tweening::TweenCallback*& dyn_onRewind();
    // Get instance field reference: public DG.Tweening.TweenCallback onUpdate
    [[deprecated("Use field access instead!")]] ::DG::Tweening::TweenCallback*& dyn_onUpdate();
    // Get instance field reference: public DG.Tweening.TweenCallback onStepComplete
    [[deprecated("Use field access instead!")]] ::DG::Tweening::TweenCallback*& dyn_onStepComplete();
    // Get instance field reference: public DG.Tweening.TweenCallback onComplete
    [[deprecated("Use field access instead!")]] ::DG::Tweening::TweenCallback*& dyn_onComplete();
    // Get instance field reference: public DG.Tweening.TweenCallback onKill
    [[deprecated("Use field access instead!")]] ::DG::Tweening::TweenCallback*& dyn_onKill();
    // Get instance field reference: public DG.Tweening.TweenCallback`1<System.Int32> onWaypointChange
    [[deprecated("Use field access instead!")]] ::DG::Tweening::TweenCallback_1<int>*& dyn_onWaypointChange();
    // Get instance field reference: System.Boolean isFrom
    [[deprecated("Use field access instead!")]] bool& dyn_isFrom();
    // Get instance field reference: System.Boolean isBlendable
    [[deprecated("Use field access instead!")]] bool& dyn_isBlendable();
    // Get instance field reference: System.Boolean isRecyclable
    [[deprecated("Use field access instead!")]] bool& dyn_isRecyclable();
    // Get instance field reference: System.Boolean isSpeedBased
    [[deprecated("Use field access instead!")]] bool& dyn_isSpeedBased();
    // Get instance field reference: System.Boolean autoKill
    [[deprecated("Use field access instead!")]] bool& dyn_autoKill();
    // Get instance field reference: System.Single duration
    [[deprecated("Use field access instead!")]] float& dyn_duration();
    // Get instance field reference: System.Int32 loops
    [[deprecated("Use field access instead!")]] int& dyn_loops();
    // Get instance field reference: DG.Tweening.LoopType loopType
    [[deprecated("Use field access instead!")]] ::DG::Tweening::LoopType& dyn_loopType();
    // Get instance field reference: System.Single delay
    [[deprecated("Use field access instead!")]] float& dyn_delay();
    // Get instance field reference: private System.Boolean <isRelative>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isRelative$k__BackingField();
    // Get instance field reference: DG.Tweening.Ease easeType
    [[deprecated("Use field access instead!")]] ::DG::Tweening::Ease& dyn_easeType();
    // Get instance field reference: DG.Tweening.EaseFunction customEase
    [[deprecated("Use field access instead!")]] ::DG::Tweening::EaseFunction*& dyn_customEase();
    // Get instance field reference: public System.Single easeOvershootOrAmplitude
    [[deprecated("Use field access instead!")]] float& dyn_easeOvershootOrAmplitude();
    // Get instance field reference: public System.Single easePeriod
    [[deprecated("Use field access instead!")]] float& dyn_easePeriod();
    // Get instance field reference: public System.String debugTargetId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_debugTargetId();
    // Get instance field reference: System.Type typeofT1
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_typeofT1();
    // Get instance field reference: System.Type typeofT2
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_typeofT2();
    // Get instance field reference: System.Type typeofTPlugOptions
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_typeofTPlugOptions();
    // Get instance field reference: private System.Boolean <active>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$active$k__BackingField();
    // Get instance field reference: System.Boolean isSequenced
    [[deprecated("Use field access instead!")]] bool& dyn_isSequenced();
    // Get instance field reference: DG.Tweening.Sequence sequenceParent
    [[deprecated("Use field access instead!")]] ::DG::Tweening::Sequence*& dyn_sequenceParent();
    // Get instance field reference: System.Int32 activeId
    [[deprecated("Use field access instead!")]] int& dyn_activeId();
    // Get instance field reference: DG.Tweening.Core.Enums.SpecialStartupMode specialStartupMode
    [[deprecated("Use field access instead!")]] ::DG::Tweening::Core::Enums::SpecialStartupMode& dyn_specialStartupMode();
    // Get instance field reference: System.Boolean creationLocked
    [[deprecated("Use field access instead!")]] bool& dyn_creationLocked();
    // Get instance field reference: System.Boolean startupDone
    [[deprecated("Use field access instead!")]] bool& dyn_startupDone();
    // Get instance field reference: private System.Boolean <playedOnce>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$playedOnce$k__BackingField();
    // Get instance field reference: private System.Single <position>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$position$k__BackingField();
    // Get instance field reference: System.Single fullDuration
    [[deprecated("Use field access instead!")]] float& dyn_fullDuration();
    // Get instance field reference: System.Int32 completedLoops
    [[deprecated("Use field access instead!")]] int& dyn_completedLoops();
    // Get instance field reference: System.Boolean isPlaying
    [[deprecated("Use field access instead!")]] bool& dyn_isPlaying();
    // Get instance field reference: System.Boolean isComplete
    [[deprecated("Use field access instead!")]] bool& dyn_isComplete();
    // Get instance field reference: System.Single elapsedDelay
    [[deprecated("Use field access instead!")]] float& dyn_elapsedDelay();
    // Get instance field reference: System.Boolean delayComplete
    [[deprecated("Use field access instead!")]] bool& dyn_delayComplete();
    // Get instance field reference: System.Int32 miscInt
    [[deprecated("Use field access instead!")]] int& dyn_miscInt();
    // public System.Boolean get_isRelative()
    // Offset: 0x15AD944
    bool get_isRelative();
    // System.Void set_isRelative(System.Boolean value)
    // Offset: 0x15AD94C
    void set_isRelative(bool value);
    // public System.Boolean get_active()
    // Offset: 0x15AD958
    bool get_active();
    // System.Void set_active(System.Boolean value)
    // Offset: 0x15AD960
    void set_active(bool value);
    // public System.Single get_fullPosition()
    // Offset: 0x15AD96C
    float get_fullPosition();
    // public System.Void set_fullPosition(System.Single value)
    // Offset: 0x15ADA24
    void set_fullPosition(float value);
    // public System.Boolean get_playedOnce()
    // Offset: 0x15ADC1C
    bool get_playedOnce();
    // private System.Void set_playedOnce(System.Boolean value)
    // Offset: 0x15ADC24
    void set_playedOnce(bool value);
    // public System.Single get_position()
    // Offset: 0x15ADC30
    float get_position();
    // System.Void set_position(System.Single value)
    // Offset: 0x15ADC38
    void set_position(float value);
    // System.Void Reset()
    // Offset: 0x15ADC40
    void Reset();
    // System.Boolean Validate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Validate();
    // System.Single UpdateDelay(System.Single elapsed)
    // Offset: 0x15ADCCC
    float UpdateDelay(float elapsed);
    // System.Boolean Startup()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Startup();
    // System.Boolean ApplyTween(System.Single prevPosition, System.Int32 prevCompletedLoops, System.Int32 newCompletedSteps, System.Boolean useInversePosition, DG.Tweening.Core.Enums.UpdateMode updateMode, DG.Tweening.Core.Enums.UpdateNotice updateNotice)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ApplyTween(float prevPosition, int prevCompletedLoops, int newCompletedSteps, bool useInversePosition, ::DG::Tweening::Core::Enums::UpdateMode updateMode, ::DG::Tweening::Core::Enums::UpdateNotice updateNotice);
    // static System.Boolean DoGoto(DG.Tweening.Tween t, System.Single toPosition, System.Int32 toCompletedLoops, DG.Tweening.Core.Enums.UpdateMode updateMode)
    // Offset: 0x15ADCD4
    static bool DoGoto(::DG::Tweening::Tween* t, float toPosition, int toCompletedLoops, ::DG::Tweening::Core::Enums::UpdateMode updateMode);
    // static System.Boolean OnTweenCallback(DG.Tweening.TweenCallback callback, DG.Tweening.Tween t)
    // Offset: 0x15AE030
    static bool OnTweenCallback(::DG::Tweening::TweenCallback* callback, ::DG::Tweening::Tween* t);
    // static System.Boolean OnTweenCallback(DG.Tweening.TweenCallback`1<T> callback, DG.Tweening.Tween t, T param)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool OnTweenCallback(::DG::Tweening::TweenCallback_1<T>* callback, ::DG::Tweening::Tween* t, T param) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Tween::OnTweenCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "Tween", "OnTweenCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(param)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, callback, t, param);
    }
    // protected System.Void .ctor()
    // Offset: 0x15AE450
    // Implemented from: DG.Tweening.Core.ABSSequentiable
    // Base method: System.Void ABSSequentiable::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Tween* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Tween::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Tween*, creationType>()));
    }
  }; // DG.Tweening.Tween
  #pragma pack(pop)
  static check_size<sizeof(Tween), 284 + sizeof(int)> __DG_Tweening_TweenSizeCheck;
  static_assert(sizeof(Tween) == 0x120);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::Tween::get_isRelative
// Il2CppName: get_isRelative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DG::Tweening::Tween::*)()>(&DG::Tweening::Tween::get_isRelative)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tween*), "get_isRelative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tween::set_isRelative
// Il2CppName: set_isRelative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Tween::*)(bool)>(&DG::Tweening::Tween::set_isRelative)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tween*), "set_isRelative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tween::get_active
// Il2CppName: get_active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DG::Tweening::Tween::*)()>(&DG::Tweening::Tween::get_active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tween*), "get_active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tween::set_active
// Il2CppName: set_active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Tween::*)(bool)>(&DG::Tweening::Tween::set_active)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tween*), "set_active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tween::get_fullPosition
// Il2CppName: get_fullPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Tween::*)()>(&DG::Tweening::Tween::get_fullPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tween*), "get_fullPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tween::set_fullPosition
// Il2CppName: set_fullPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Tween::*)(float)>(&DG::Tweening::Tween::set_fullPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tween*), "set_fullPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tween::get_playedOnce
// Il2CppName: get_playedOnce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DG::Tweening::Tween::*)()>(&DG::Tweening::Tween::get_playedOnce)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tween*), "get_playedOnce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tween::set_playedOnce
// Il2CppName: set_playedOnce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Tween::*)(bool)>(&DG::Tweening::Tween::set_playedOnce)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tween*), "set_playedOnce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tween::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Tween::*)()>(&DG::Tweening::Tween::get_position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tween*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tween::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Tween::*)(float)>(&DG::Tweening::Tween::set_position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tween*), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tween::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Tween::*)()>(&DG::Tweening::Tween::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tween*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tween::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DG::Tweening::Tween::*)()>(&DG::Tweening::Tween::Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tween*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tween::UpdateDelay
// Il2CppName: UpdateDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Tween::*)(float)>(&DG::Tweening::Tween::UpdateDelay)> {
  static const MethodInfo* get() {
    static auto* elapsed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tween*), "UpdateDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elapsed});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tween::Startup
// Il2CppName: Startup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DG::Tweening::Tween::*)()>(&DG::Tweening::Tween::Startup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tween*), "Startup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tween::ApplyTween
// Il2CppName: ApplyTween
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DG::Tweening::Tween::*)(float, int, int, bool, ::DG::Tweening::Core::Enums::UpdateMode, ::DG::Tweening::Core::Enums::UpdateNotice)>(&DG::Tweening::Tween::ApplyTween)> {
  static const MethodInfo* get() {
    static auto* prevPosition = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* prevCompletedLoops = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newCompletedSteps = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* useInversePosition = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateMode = &::il2cpp_utils::GetClassFromName("DG.Tweening.Core.Enums", "UpdateMode")->byval_arg;
    static auto* updateNotice = &::il2cpp_utils::GetClassFromName("DG.Tweening.Core.Enums", "UpdateNotice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tween*), "ApplyTween", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prevPosition, prevCompletedLoops, newCompletedSteps, useInversePosition, updateMode, updateNotice});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tween::DoGoto
// Il2CppName: DoGoto
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DG::Tweening::Tween*, float, int, ::DG::Tweening::Core::Enums::UpdateMode)>(&DG::Tweening::Tween::DoGoto)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    static auto* toPosition = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* toCompletedLoops = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* updateMode = &::il2cpp_utils::GetClassFromName("DG.Tweening.Core.Enums", "UpdateMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tween*), "DoGoto", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, toPosition, toCompletedLoops, updateMode});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tween::OnTweenCallback
// Il2CppName: OnTweenCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DG::Tweening::TweenCallback*, ::DG::Tweening::Tween*)>(&DG::Tweening::Tween::OnTweenCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("DG.Tweening", "TweenCallback")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Tween*), "OnTweenCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Tween::OnTweenCallback
// Il2CppName: OnTweenCallback
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::Tween::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
