// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DG.Tweening.Core.Easing.EaseManager
#include "DG/Tweening/Core/Easing/EaseManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DG::Tweening
namespace DG::Tweening {
  // Forward declaring type: EaseFunction
  class EaseFunction;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DG::Tweening::Core::Easing::EaseManager::$$c);
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::Core::Easing::EaseManager::$$c*, "DG.Tweening.Core.Easing", "EaseManager/<>c");
// Type namespace: DG.Tweening.Core.Easing
namespace DG::Tweening::Core::Easing {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: DG.Tweening.Core.Easing.EaseManager/DG.Tweening.Core.Easing.<>c
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class EaseManager::$$c : public ::Il2CppObject {
    public:
    // Get static field: static public readonly DG.Tweening.Core.Easing.EaseManager/DG.Tweening.Core.Easing.<>c <>9
    static ::DG::Tweening::Core::Easing::EaseManager::$$c* _get_$$9();
    // Set static field: static public readonly DG.Tweening.Core.Easing.EaseManager/DG.Tweening.Core.Easing.<>c <>9
    static void _set_$$9(::DG::Tweening::Core::Easing::EaseManager::$$c* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_0
    static ::DG::Tweening::EaseFunction* _get_$$9__4_0();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_0
    static void _set_$$9__4_0(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_1
    static ::DG::Tweening::EaseFunction* _get_$$9__4_1();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_1
    static void _set_$$9__4_1(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_2
    static ::DG::Tweening::EaseFunction* _get_$$9__4_2();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_2
    static void _set_$$9__4_2(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_3
    static ::DG::Tweening::EaseFunction* _get_$$9__4_3();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_3
    static void _set_$$9__4_3(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_4
    static ::DG::Tweening::EaseFunction* _get_$$9__4_4();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_4
    static void _set_$$9__4_4(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_5
    static ::DG::Tweening::EaseFunction* _get_$$9__4_5();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_5
    static void _set_$$9__4_5(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_6
    static ::DG::Tweening::EaseFunction* _get_$$9__4_6();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_6
    static void _set_$$9__4_6(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_7
    static ::DG::Tweening::EaseFunction* _get_$$9__4_7();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_7
    static void _set_$$9__4_7(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_8
    static ::DG::Tweening::EaseFunction* _get_$$9__4_8();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_8
    static void _set_$$9__4_8(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_9
    static ::DG::Tweening::EaseFunction* _get_$$9__4_9();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_9
    static void _set_$$9__4_9(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_10
    static ::DG::Tweening::EaseFunction* _get_$$9__4_10();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_10
    static void _set_$$9__4_10(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_11
    static ::DG::Tweening::EaseFunction* _get_$$9__4_11();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_11
    static void _set_$$9__4_11(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_12
    static ::DG::Tweening::EaseFunction* _get_$$9__4_12();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_12
    static void _set_$$9__4_12(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_13
    static ::DG::Tweening::EaseFunction* _get_$$9__4_13();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_13
    static void _set_$$9__4_13(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_14
    static ::DG::Tweening::EaseFunction* _get_$$9__4_14();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_14
    static void _set_$$9__4_14(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_15
    static ::DG::Tweening::EaseFunction* _get_$$9__4_15();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_15
    static void _set_$$9__4_15(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_16
    static ::DG::Tweening::EaseFunction* _get_$$9__4_16();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_16
    static void _set_$$9__4_16(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_17
    static ::DG::Tweening::EaseFunction* _get_$$9__4_17();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_17
    static void _set_$$9__4_17(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_18
    static ::DG::Tweening::EaseFunction* _get_$$9__4_18();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_18
    static void _set_$$9__4_18(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_19
    static ::DG::Tweening::EaseFunction* _get_$$9__4_19();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_19
    static void _set_$$9__4_19(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_20
    static ::DG::Tweening::EaseFunction* _get_$$9__4_20();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_20
    static void _set_$$9__4_20(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_21
    static ::DG::Tweening::EaseFunction* _get_$$9__4_21();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_21
    static void _set_$$9__4_21(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_22
    static ::DG::Tweening::EaseFunction* _get_$$9__4_22();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_22
    static void _set_$$9__4_22(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_23
    static ::DG::Tweening::EaseFunction* _get_$$9__4_23();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_23
    static void _set_$$9__4_23(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_24
    static ::DG::Tweening::EaseFunction* _get_$$9__4_24();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_24
    static void _set_$$9__4_24(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_25
    static ::DG::Tweening::EaseFunction* _get_$$9__4_25();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_25
    static void _set_$$9__4_25(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_26
    static ::DG::Tweening::EaseFunction* _get_$$9__4_26();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_26
    static void _set_$$9__4_26(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_27
    static ::DG::Tweening::EaseFunction* _get_$$9__4_27();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_27
    static void _set_$$9__4_27(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_28
    static ::DG::Tweening::EaseFunction* _get_$$9__4_28();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_28
    static void _set_$$9__4_28(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_29
    static ::DG::Tweening::EaseFunction* _get_$$9__4_29();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_29
    static void _set_$$9__4_29(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_30
    static ::DG::Tweening::EaseFunction* _get_$$9__4_30();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_30
    static void _set_$$9__4_30(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_31
    static ::DG::Tweening::EaseFunction* _get_$$9__4_31();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_31
    static void _set_$$9__4_31(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_32
    static ::DG::Tweening::EaseFunction* _get_$$9__4_32();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_32
    static void _set_$$9__4_32(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_33
    static ::DG::Tweening::EaseFunction* _get_$$9__4_33();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_33
    static void _set_$$9__4_33(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_34
    static ::DG::Tweening::EaseFunction* _get_$$9__4_34();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_34
    static void _set_$$9__4_34(::DG::Tweening::EaseFunction* value);
    // Get static field: static public DG.Tweening.EaseFunction <>9__4_35
    static ::DG::Tweening::EaseFunction* _get_$$9__4_35();
    // Set static field: static public DG.Tweening.EaseFunction <>9__4_35
    static void _set_$$9__4_35(::DG::Tweening::EaseFunction* value);
    // static private System.Void .cctor()
    // Offset: 0x1863524
    static void _cctor();
    // System.Single <ToEaseFunction>b__4_0(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x186358C
    float $ToEaseFunction$b__4_0(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_1(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1863594
    float $ToEaseFunction$b__4_1(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_2(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1863620
    float $ToEaseFunction$b__4_2(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_3(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x18636A4
    float $ToEaseFunction$b__4_3(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_4(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1863738
    float $ToEaseFunction$b__4_4(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_5(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1863744
    float $ToEaseFunction$b__4_5(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_6(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1863758
    float $ToEaseFunction$b__4_6(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_7(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x186379C
    float $ToEaseFunction$b__4_7(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_8(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x18637AC
    float $ToEaseFunction$b__4_8(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_9(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x18637CC
    float $ToEaseFunction$b__4_9(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_10(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1863814
    float $ToEaseFunction$b__4_10(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_11(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1863828
    float $ToEaseFunction$b__4_11(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_12(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x186384C
    float $ToEaseFunction$b__4_12(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_13(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1863898
    float $ToEaseFunction$b__4_13(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_14(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x18638B0
    float $ToEaseFunction$b__4_14(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_15(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x18638D8
    float $ToEaseFunction$b__4_15(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_16(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1863930
    float $ToEaseFunction$b__4_16(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_17(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x18639D0
    float $ToEaseFunction$b__4_17(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_18(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1863A70
    float $ToEaseFunction$b__4_18(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_19(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1863B84
    float $ToEaseFunction$b__4_19(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_20(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1863C1C
    float $ToEaseFunction$b__4_20(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_21(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1863CBC
    float $ToEaseFunction$b__4_21(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_22(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1863D9C
    float $ToEaseFunction$b__4_22(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_23(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1863F08
    float $ToEaseFunction$b__4_23(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_24(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1864070
    float $ToEaseFunction$b__4_24(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_25(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1864264
    float $ToEaseFunction$b__4_25(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_26(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1864284
    float $ToEaseFunction$b__4_26(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_27(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x18642B0
    float $ToEaseFunction$b__4_27(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_28(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x186431C
    float $ToEaseFunction$b__4_28(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_29(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1864324
    float $ToEaseFunction$b__4_29(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_30(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x186432C
    float $ToEaseFunction$b__4_30(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_31(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1864334
    float $ToEaseFunction$b__4_31(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_32(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x186433C
    float $ToEaseFunction$b__4_32(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_33(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1864344
    float $ToEaseFunction$b__4_33(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_34(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x186434C
    float $ToEaseFunction$b__4_34(float time, float duration, float overshootOrAmplitude, float period);
    // System.Single <ToEaseFunction>b__4_35(System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x1864354
    float $ToEaseFunction$b__4_35(float time, float duration, float overshootOrAmplitude, float period);
    // public System.Void .ctor()
    // Offset: 0x1863584
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EaseManager::$$c* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::Easing::EaseManager::$$c::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EaseManager::$$c*, creationType>()));
    }
  }; // DG.Tweening.Core.Easing.EaseManager/DG.Tweening.Core.Easing.<>c
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DG::Tweening::Core::Easing::EaseManager::$$c::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_0
// Il2CppName: <ToEaseFunction>b__4_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_0)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_1
// Il2CppName: <ToEaseFunction>b__4_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_1)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_2
// Il2CppName: <ToEaseFunction>b__4_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_2)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_3
// Il2CppName: <ToEaseFunction>b__4_3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_3)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_4
// Il2CppName: <ToEaseFunction>b__4_4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_4)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_5
// Il2CppName: <ToEaseFunction>b__4_5
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_5)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_6
// Il2CppName: <ToEaseFunction>b__4_6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_6)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_7
// Il2CppName: <ToEaseFunction>b__4_7
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_7)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_7", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_8
// Il2CppName: <ToEaseFunction>b__4_8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_8)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_9
// Il2CppName: <ToEaseFunction>b__4_9
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_9)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_9", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_10
// Il2CppName: <ToEaseFunction>b__4_10
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_10)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_10", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_11
// Il2CppName: <ToEaseFunction>b__4_11
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_11)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_11", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_12
// Il2CppName: <ToEaseFunction>b__4_12
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_12)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_12", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_13
// Il2CppName: <ToEaseFunction>b__4_13
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_13)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_13", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_14
// Il2CppName: <ToEaseFunction>b__4_14
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_14)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_14", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_15
// Il2CppName: <ToEaseFunction>b__4_15
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_15)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_15", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_16
// Il2CppName: <ToEaseFunction>b__4_16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_16)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_17
// Il2CppName: <ToEaseFunction>b__4_17
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_17)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_17", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_18
// Il2CppName: <ToEaseFunction>b__4_18
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_18)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_18", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_19
// Il2CppName: <ToEaseFunction>b__4_19
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_19)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_19", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_20
// Il2CppName: <ToEaseFunction>b__4_20
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_20)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_20", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_21
// Il2CppName: <ToEaseFunction>b__4_21
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_21)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_21", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_22
// Il2CppName: <ToEaseFunction>b__4_22
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_22)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_22", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_23
// Il2CppName: <ToEaseFunction>b__4_23
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_23)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_23", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_24
// Il2CppName: <ToEaseFunction>b__4_24
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_24)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_24", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_25
// Il2CppName: <ToEaseFunction>b__4_25
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_25)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_25", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_26
// Il2CppName: <ToEaseFunction>b__4_26
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_26)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_26", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_27
// Il2CppName: <ToEaseFunction>b__4_27
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_27)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_27", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_28
// Il2CppName: <ToEaseFunction>b__4_28
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_28)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_28", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_29
// Il2CppName: <ToEaseFunction>b__4_29
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_29)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_29", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_30
// Il2CppName: <ToEaseFunction>b__4_30
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_30)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_30", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_31
// Il2CppName: <ToEaseFunction>b__4_31
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_31)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_31", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_32
// Il2CppName: <ToEaseFunction>b__4_32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_32)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_33
// Il2CppName: <ToEaseFunction>b__4_33
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_33)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_33", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_34
// Il2CppName: <ToEaseFunction>b__4_34
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_34)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_34", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_35
// Il2CppName: <ToEaseFunction>b__4_35
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DG::Tweening::Core::Easing::EaseManager::$$c::*)(float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::$$c::$ToEaseFunction$b__4_35)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager::$$c*), "<ToEaseFunction>b__4_35", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::$$c::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
