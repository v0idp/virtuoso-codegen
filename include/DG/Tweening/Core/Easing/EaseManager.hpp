// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DG::Tweening::Core::Easing
namespace DG::Tweening::Core::Easing {
}
// Forward declaring namespace: DG::Tweening
namespace DG::Tweening {
  // Forward declaring type: Tween
  class Tween;
  // Forward declaring type: Ease
  struct Ease;
  // Forward declaring type: EaseFunction
  class EaseFunction;
}
// Completed forward declares
// Type namespace: DG.Tweening.Core.Easing
namespace DG::Tweening::Core::Easing {
  // Forward declaring type: EaseManager
  class EaseManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DG::Tweening::Core::Easing::EaseManager);
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::Core::Easing::EaseManager*, "DG.Tweening.Core.Easing", "EaseManager");
// Type namespace: DG.Tweening.Core.Easing
namespace DG::Tweening::Core::Easing {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: DG.Tweening.Core.Easing.EaseManager
  // [TokenAttribute] Offset: FFFFFFFF
  class EaseManager : public ::Il2CppObject {
    public:
    // Nested type: ::DG::Tweening::Core::Easing::EaseManager::$$c
    class $$c;
    // static field const value: static private System.Single _PiOver2
    static constexpr const float _PiOver2 = 1.5707964;
    // Get static field: static private System.Single _PiOver2
    static float _get__PiOver2();
    // Set static field: static private System.Single _PiOver2
    static void _set__PiOver2(float value);
    // static field const value: static private System.Single _TwoPi
    static constexpr const float _TwoPi = 6.2831855;
    // Get static field: static private System.Single _TwoPi
    static float _get__TwoPi();
    // Set static field: static private System.Single _TwoPi
    static void _set__TwoPi(float value);
    // static public System.Single Evaluate(DG.Tweening.Tween t, System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x15DF6AC
    static float Evaluate(::DG::Tweening::Tween* t, float time, float duration, float overshootOrAmplitude, float period);
    // static public System.Single Evaluate(DG.Tweening.Ease easeType, DG.Tweening.EaseFunction customEase, System.Single time, System.Single duration, System.Single overshootOrAmplitude, System.Single period)
    // Offset: 0x15D4A08
    static float Evaluate(::DG::Tweening::Ease easeType, ::DG::Tweening::EaseFunction* customEase, float time, float duration, float overshootOrAmplitude, float period);
    // static public DG.Tweening.EaseFunction ToEaseFunction(DG.Tweening.Ease ease)
    // Offset: 0x15DDB74
    static ::DG::Tweening::EaseFunction* ToEaseFunction(::DG::Tweening::Ease ease);
    // static System.Boolean IsFlashEase(DG.Tweening.Ease ease)
    // Offset: 0x15DF904
    static bool IsFlashEase(::DG::Tweening::Ease ease);
  }; // DG.Tweening.Core.Easing.EaseManager
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::Evaluate
// Il2CppName: Evaluate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::DG::Tweening::Tween*, float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::Evaluate)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager*), "Evaluate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::Evaluate
// Il2CppName: Evaluate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::DG::Tweening::Ease, ::DG::Tweening::EaseFunction*, float, float, float, float)>(&DG::Tweening::Core::Easing::EaseManager::Evaluate)> {
  static const MethodInfo* get() {
    static auto* easeType = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Ease")->byval_arg;
    static auto* customEase = &::il2cpp_utils::GetClassFromName("DG.Tweening", "EaseFunction")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshootOrAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager*), "Evaluate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{easeType, customEase, time, duration, overshootOrAmplitude, period});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::ToEaseFunction
// Il2CppName: ToEaseFunction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::EaseFunction* (*)(::DG::Tweening::Ease)>(&DG::Tweening::Core::Easing::EaseManager::ToEaseFunction)> {
  static const MethodInfo* get() {
    static auto* ease = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Ease")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager*), "ToEaseFunction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ease});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Easing::EaseManager::IsFlashEase
// Il2CppName: IsFlashEase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DG::Tweening::Ease)>(&DG::Tweening::Core::Easing::EaseManager::IsFlashEase)> {
  static const MethodInfo* get() {
    static auto* ease = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Ease")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Easing::EaseManager*), "IsFlashEase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ease});
  }
};
