// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DG::Tweening::Core
namespace DG::Tweening::Core {
  // Forward declaring type: TweenLink
  class TweenLink;
  // Forward declaring type: TweenerCore`3<T1, T2, TPlugOptions>
  template<typename T1, typename T2, typename TPlugOptions>
  class TweenerCore_3;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Skipping declaration: ValueType because it is already included!
}
// Forward declaring namespace: DG::Tweening
namespace DG::Tweening {
  // Forward declaring type: Tween
  class Tween;
  // Forward declaring type: Sequence
  class Sequence;
  // Forward declaring type: UpdateType
  struct UpdateType;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: DG::Tweening::Plugins::Options
namespace DG::Tweening::Plugins::Options {
  // Forward declaring type: IPlugOptions
  class IPlugOptions;
}
// Forward declaring namespace: DG::Tweening::Core::Enums
namespace DG::Tweening::Core::Enums {
  // Forward declaring type: OperationType
  struct OperationType;
  // Forward declaring type: FilterType
  struct FilterType;
  // Forward declaring type: UpdateMode
  struct UpdateMode;
}
// Completed forward declares
// Type namespace: DG.Tweening.Core
namespace DG::Tweening::Core {
  // Forward declaring type: TweenManager
  class TweenManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DG::Tweening::Core::TweenManager);
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::Core::TweenManager*, "DG.Tweening.Core", "TweenManager");
// Type namespace: DG.Tweening.Core
namespace DG::Tweening::Core {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: DG.Tweening.Core.TweenManager
  // [TokenAttribute] Offset: FFFFFFFF
  class TweenManager : public ::Il2CppObject {
    public:
    // Nested type: ::DG::Tweening::Core::TweenManager::CapacityIncreaseMode
    struct CapacityIncreaseMode;
    // static field const value: static private System.Int32 _DefaultMaxTweeners
    static constexpr const int _DefaultMaxTweeners = 200;
    // Get static field: static private System.Int32 _DefaultMaxTweeners
    static int _get__DefaultMaxTweeners();
    // Set static field: static private System.Int32 _DefaultMaxTweeners
    static void _set__DefaultMaxTweeners(int value);
    // static field const value: static private System.Int32 _DefaultMaxSequences
    static constexpr const int _DefaultMaxSequences = 50;
    // Get static field: static private System.Int32 _DefaultMaxSequences
    static int _get__DefaultMaxSequences();
    // Set static field: static private System.Int32 _DefaultMaxSequences
    static void _set__DefaultMaxSequences(int value);
    // static field const value: static private System.String _MaxTweensReached
    static constexpr const char* _MaxTweensReached = "Max Tweens reached: capacity has automatically been increased from #0 to #1. Use DOTween.SetTweensCapacity to set it manually at startup";
    // Get static field: static private System.String _MaxTweensReached
    static ::StringW _get__MaxTweensReached();
    // Set static field: static private System.String _MaxTweensReached
    static void _set__MaxTweensReached(::StringW value);
    // static field const value: static private System.Single _EpsilonVsTimeCheck
    static constexpr const float _EpsilonVsTimeCheck = 1e-06;
    // Get static field: static private System.Single _EpsilonVsTimeCheck
    static float _get__EpsilonVsTimeCheck();
    // Set static field: static private System.Single _EpsilonVsTimeCheck
    static void _set__EpsilonVsTimeCheck(float value);
    // Get static field: static System.Boolean isUnityEditor
    static bool _get_isUnityEditor();
    // Set static field: static System.Boolean isUnityEditor
    static void _set_isUnityEditor(bool value);
    // Get static field: static System.Boolean isDebugBuild
    static bool _get_isDebugBuild();
    // Set static field: static System.Boolean isDebugBuild
    static void _set_isDebugBuild(bool value);
    // Get static field: static System.Int32 maxActive
    static int _get_maxActive();
    // Set static field: static System.Int32 maxActive
    static void _set_maxActive(int value);
    // Get static field: static System.Int32 maxTweeners
    static int _get_maxTweeners();
    // Set static field: static System.Int32 maxTweeners
    static void _set_maxTweeners(int value);
    // Get static field: static System.Int32 maxSequences
    static int _get_maxSequences();
    // Set static field: static System.Int32 maxSequences
    static void _set_maxSequences(int value);
    // Get static field: static System.Boolean hasActiveTweens
    static bool _get_hasActiveTweens();
    // Set static field: static System.Boolean hasActiveTweens
    static void _set_hasActiveTweens(bool value);
    // Get static field: static System.Boolean hasActiveDefaultTweens
    static bool _get_hasActiveDefaultTweens();
    // Set static field: static System.Boolean hasActiveDefaultTweens
    static void _set_hasActiveDefaultTweens(bool value);
    // Get static field: static System.Boolean hasActiveLateTweens
    static bool _get_hasActiveLateTweens();
    // Set static field: static System.Boolean hasActiveLateTweens
    static void _set_hasActiveLateTweens(bool value);
    // Get static field: static System.Boolean hasActiveFixedTweens
    static bool _get_hasActiveFixedTweens();
    // Set static field: static System.Boolean hasActiveFixedTweens
    static void _set_hasActiveFixedTweens(bool value);
    // Get static field: static System.Boolean hasActiveManualTweens
    static bool _get_hasActiveManualTweens();
    // Set static field: static System.Boolean hasActiveManualTweens
    static void _set_hasActiveManualTweens(bool value);
    // Get static field: static System.Int32 totActiveTweens
    static int _get_totActiveTweens();
    // Set static field: static System.Int32 totActiveTweens
    static void _set_totActiveTweens(int value);
    // Get static field: static System.Int32 totActiveDefaultTweens
    static int _get_totActiveDefaultTweens();
    // Set static field: static System.Int32 totActiveDefaultTweens
    static void _set_totActiveDefaultTweens(int value);
    // Get static field: static System.Int32 totActiveLateTweens
    static int _get_totActiveLateTweens();
    // Set static field: static System.Int32 totActiveLateTweens
    static void _set_totActiveLateTweens(int value);
    // Get static field: static System.Int32 totActiveFixedTweens
    static int _get_totActiveFixedTweens();
    // Set static field: static System.Int32 totActiveFixedTweens
    static void _set_totActiveFixedTweens(int value);
    // Get static field: static System.Int32 totActiveManualTweens
    static int _get_totActiveManualTweens();
    // Set static field: static System.Int32 totActiveManualTweens
    static void _set_totActiveManualTweens(int value);
    // Get static field: static System.Int32 totActiveTweeners
    static int _get_totActiveTweeners();
    // Set static field: static System.Int32 totActiveTweeners
    static void _set_totActiveTweeners(int value);
    // Get static field: static System.Int32 totActiveSequences
    static int _get_totActiveSequences();
    // Set static field: static System.Int32 totActiveSequences
    static void _set_totActiveSequences(int value);
    // Get static field: static System.Int32 totPooledTweeners
    static int _get_totPooledTweeners();
    // Set static field: static System.Int32 totPooledTweeners
    static void _set_totPooledTweeners(int value);
    // Get static field: static System.Int32 totPooledSequences
    static int _get_totPooledSequences();
    // Set static field: static System.Int32 totPooledSequences
    static void _set_totPooledSequences(int value);
    // Get static field: static System.Int32 totTweeners
    static int _get_totTweeners();
    // Set static field: static System.Int32 totTweeners
    static void _set_totTweeners(int value);
    // Get static field: static System.Int32 totSequences
    static int _get_totSequences();
    // Set static field: static System.Int32 totSequences
    static void _set_totSequences(int value);
    // Get static field: static System.Boolean isUpdateLoop
    static bool _get_isUpdateLoop();
    // Set static field: static System.Boolean isUpdateLoop
    static void _set_isUpdateLoop(bool value);
    // Get static field: static DG.Tweening.Tween[] _activeTweens
    static ::ArrayW<::DG::Tweening::Tween*> _get__activeTweens();
    // Set static field: static DG.Tweening.Tween[] _activeTweens
    static void _set__activeTweens(::ArrayW<::DG::Tweening::Tween*> value);
    // Get static field: static private DG.Tweening.Tween[] _pooledTweeners
    static ::ArrayW<::DG::Tweening::Tween*> _get__pooledTweeners();
    // Set static field: static private DG.Tweening.Tween[] _pooledTweeners
    static void _set__pooledTweeners(::ArrayW<::DG::Tweening::Tween*> value);
    // Get static field: static private readonly System.Collections.Generic.Stack`1<DG.Tweening.Tween> _PooledSequences
    static ::System::Collections::Generic::Stack_1<::DG::Tweening::Tween*>* _get__PooledSequences();
    // Set static field: static private readonly System.Collections.Generic.Stack`1<DG.Tweening.Tween> _PooledSequences
    static void _set__PooledSequences(::System::Collections::Generic::Stack_1<::DG::Tweening::Tween*>* value);
    // Get static field: static private readonly System.Collections.Generic.List`1<DG.Tweening.Tween> _KillList
    static ::System::Collections::Generic::List_1<::DG::Tweening::Tween*>* _get__KillList();
    // Set static field: static private readonly System.Collections.Generic.List`1<DG.Tweening.Tween> _KillList
    static void _set__KillList(::System::Collections::Generic::List_1<::DG::Tweening::Tween*>* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<DG.Tweening.Tween,DG.Tweening.Core.TweenLink> _TweenLinks
    static ::System::Collections::Generic::Dictionary_2<::DG::Tweening::Tween*, ::DG::Tweening::Core::TweenLink*>* _get__TweenLinks();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<DG.Tweening.Tween,DG.Tweening.Core.TweenLink> _TweenLinks
    static void _set__TweenLinks(::System::Collections::Generic::Dictionary_2<::DG::Tweening::Tween*, ::DG::Tweening::Core::TweenLink*>* value);
    // Get static field: static private System.Int32 _totTweenLinks
    static int _get__totTweenLinks();
    // Set static field: static private System.Int32 _totTweenLinks
    static void _set__totTweenLinks(int value);
    // Get static field: static private System.Int32 _maxActiveLookupId
    static int _get__maxActiveLookupId();
    // Set static field: static private System.Int32 _maxActiveLookupId
    static void _set__maxActiveLookupId(int value);
    // Get static field: static private System.Boolean _requiresActiveReorganization
    static bool _get__requiresActiveReorganization();
    // Set static field: static private System.Boolean _requiresActiveReorganization
    static void _set__requiresActiveReorganization(bool value);
    // Get static field: static private System.Int32 _reorganizeFromId
    static int _get__reorganizeFromId();
    // Set static field: static private System.Int32 _reorganizeFromId
    static void _set__reorganizeFromId(int value);
    // Get static field: static private System.Int32 _minPooledTweenerId
    static int _get__minPooledTweenerId();
    // Set static field: static private System.Int32 _minPooledTweenerId
    static void _set__minPooledTweenerId(int value);
    // Get static field: static private System.Int32 _maxPooledTweenerId
    static int _get__maxPooledTweenerId();
    // Set static field: static private System.Int32 _maxPooledTweenerId
    static void _set__maxPooledTweenerId(int value);
    // Get static field: static private System.Boolean _despawnAllCalledFromUpdateLoopCallback
    static bool _get__despawnAllCalledFromUpdateLoopCallback();
    // Set static field: static private System.Boolean _despawnAllCalledFromUpdateLoopCallback
    static void _set__despawnAllCalledFromUpdateLoopCallback(bool value);
    // static private System.Void .cctor()
    // Offset: 0x15B190C
    static void _cctor();
    // static DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> GetTweener()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class TPlugOptions>
    static ::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* GetTweener() {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TPlugOptions>, ::DG::Tweening::Plugins::Options::IPlugOptions> && std::is_convertible_v<TPlugOptions, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenManager::GetTweener");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening.Core", "TweenManager", "GetTweener", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static DG.Tweening.Sequence GetSequence()
    // Offset: 0x15B1AD8
    static ::DG::Tweening::Sequence* GetSequence();
    // static System.Void SetUpdateType(DG.Tweening.Tween t, DG.Tweening.UpdateType updateType, System.Boolean isIndependentUpdate)
    // Offset: 0x15B243C
    static void SetUpdateType(::DG::Tweening::Tween* t, ::DG::Tweening::UpdateType updateType, bool isIndependentUpdate);
    // static System.Void AddActiveTweenToSequence(DG.Tweening.Tween t)
    // Offset: 0x15B26F8
    static void AddActiveTweenToSequence(::DG::Tweening::Tween* t);
    // static System.Int32 DespawnAll()
    // Offset: 0x15B2CFC
    static int DespawnAll();
    // static System.Void Despawn(DG.Tweening.Tween t, System.Boolean modifyActiveLists)
    // Offset: 0x15AEE78
    static void Despawn(::DG::Tweening::Tween* t, bool modifyActiveLists);
    // static System.Void PurgeAll()
    // Offset: 0x15B2F7C
    static void PurgeAll();
    // static System.Void PurgePools()
    // Offset: 0x15B3120
    static void PurgePools();
    // static System.Void AddTweenLink(DG.Tweening.Tween t, DG.Tweening.Core.TweenLink tweenLink)
    // Offset: 0x15B3268
    static void AddTweenLink(::DG::Tweening::Tween* t, ::DG::Tweening::Core::TweenLink* tweenLink);
    // static private System.Void RemoveTweenLink(DG.Tweening.Tween t)
    // Offset: 0x15B34F4
    static void RemoveTweenLink(::DG::Tweening::Tween* t);
    // static System.Void ResetCapacities()
    // Offset: 0x15B3208
    static void ResetCapacities();
    // static System.Void SetCapacities(System.Int32 tweenersCapacity, System.Int32 sequencesCapacity)
    // Offset: 0x15B35E4
    static void SetCapacities(int tweenersCapacity, int sequencesCapacity);
    // static System.Int32 Validate()
    // Offset: 0x15B36E8
    static int Validate();
    // static System.Void Update(DG.Tweening.UpdateType updateType, System.Single deltaTime, System.Single independentTime)
    // Offset: 0x15B3CA0
    static void Update(::DG::Tweening::UpdateType updateType, float deltaTime, float independentTime);
    // static System.Int32 FilteredOperation(DG.Tweening.Core.Enums.OperationType operationType, DG.Tweening.Core.Enums.FilterType filterType, System.Object id, System.Boolean optionalBool, System.Single optionalFloat, System.Object optionalObj, System.Object[] optionalArray)
    // Offset: 0x15B4360
    static int FilteredOperation(::DG::Tweening::Core::Enums::OperationType operationType, ::DG::Tweening::Core::Enums::FilterType filterType, ::Il2CppObject* id, bool optionalBool, float optionalFloat, ::Il2CppObject* optionalObj, ::ArrayW<::Il2CppObject*> optionalArray);
    // static System.Boolean Complete(DG.Tweening.Tween t, System.Boolean modifyActiveLists, DG.Tweening.Core.Enums.UpdateMode updateMode)
    // Offset: 0x15AE688
    static bool Complete(::DG::Tweening::Tween* t, bool modifyActiveLists, ::DG::Tweening::Core::Enums::UpdateMode updateMode);
    // static System.Boolean Flip(DG.Tweening.Tween t)
    // Offset: 0x15AE8DC
    static bool Flip(::DG::Tweening::Tween* t);
    // static System.Void ForceInit(DG.Tweening.Tween t, System.Boolean isSequenced)
    // Offset: 0x15AEA78
    static void ForceInit(::DG::Tweening::Tween* t, bool isSequenced);
    // static System.Boolean Goto(DG.Tweening.Tween t, System.Single to, System.Boolean andPlay, DG.Tweening.Core.Enums.UpdateMode updateMode)
    // Offset: 0x15AEB48
    static bool Goto(::DG::Tweening::Tween* t, float to, bool andPlay, ::DG::Tweening::Core::Enums::UpdateMode updateMode);
    // static System.Boolean Pause(DG.Tweening.Tween t)
    // Offset: 0x15B34B4
    static bool Pause(::DG::Tweening::Tween* t);
    // static System.Boolean Play(DG.Tweening.Tween t)
    // Offset: 0x15B3434
    static bool Play(::DG::Tweening::Tween* t);
    // static System.Boolean PlayBackwards(DG.Tweening.Tween t)
    // Offset: 0x15AF594
    static bool PlayBackwards(::DG::Tweening::Tween* t);
    // static System.Boolean PlayForward(DG.Tweening.Tween t)
    // Offset: 0x15AF808
    static bool PlayForward(::DG::Tweening::Tween* t);
    // static System.Boolean Restart(DG.Tweening.Tween t, System.Boolean includeDelay, System.Single changeDelayTo)
    // Offset: 0x15AFA7C
    static bool Restart(::DG::Tweening::Tween* t, bool includeDelay, float changeDelayTo);
    // static System.Boolean Rewind(DG.Tweening.Tween t, System.Boolean includeDelay)
    // Offset: 0x15AFCE4
    static bool Rewind(::DG::Tweening::Tween* t, bool includeDelay);
    // static System.Boolean SmoothRewind(DG.Tweening.Tween t)
    // Offset: 0x15AFF78
    static bool SmoothRewind(::DG::Tweening::Tween* t);
    // static System.Boolean TogglePause(DG.Tweening.Tween t)
    // Offset: 0x15B01E4
    static bool TogglePause(::DG::Tweening::Tween* t);
    // static System.Int32 TotalPooledTweens()
    // Offset: 0x15B4E00
    static int TotalPooledTweens();
    // static System.Int32 TotalPlayingTweens()
    // Offset: 0x15B4E6C
    static int TotalPlayingTweens();
    // static System.Collections.Generic.List`1<DG.Tweening.Tween> GetActiveTweens(System.Boolean playing, System.Collections.Generic.List`1<DG.Tweening.Tween> fillableList)
    // Offset: 0x15B4FB8
    static ::System::Collections::Generic::List_1<::DG::Tweening::Tween*>* GetActiveTweens(bool playing, ::System::Collections::Generic::List_1<::DG::Tweening::Tween*>* fillableList);
    // static System.Collections.Generic.List`1<DG.Tweening.Tween> GetTweensById(System.Object id, System.Boolean playingOnly, System.Collections.Generic.List`1<DG.Tweening.Tween> fillableList)
    // Offset: 0x15B51AC
    static ::System::Collections::Generic::List_1<::DG::Tweening::Tween*>* GetTweensById(::Il2CppObject* id, bool playingOnly, ::System::Collections::Generic::List_1<::DG::Tweening::Tween*>* fillableList);
    // static System.Collections.Generic.List`1<DG.Tweening.Tween> GetTweensByTarget(System.Object target, System.Boolean playingOnly, System.Collections.Generic.List`1<DG.Tweening.Tween> fillableList)
    // Offset: 0x15B549C
    static ::System::Collections::Generic::List_1<::DG::Tweening::Tween*>* GetTweensByTarget(::Il2CppObject* target, bool playingOnly, ::System::Collections::Generic::List_1<::DG::Tweening::Tween*>* fillableList);
    // static private System.Void MarkForKilling(DG.Tweening.Tween t)
    // Offset: 0x15B3B30
    static void MarkForKilling(::DG::Tweening::Tween* t);
    // static private System.Void EvaluateTweenLink(DG.Tweening.Tween t)
    // Offset: 0x15B40FC
    static void EvaluateTweenLink(::DG::Tweening::Tween* t);
    // static private System.Void AddActiveTween(DG.Tweening.Tween t)
    // Offset: 0x15B1E08
    static void AddActiveTween(::DG::Tweening::Tween* t);
    // static private System.Void ReorganizeActiveTweens()
    // Offset: 0x15B3890
    static void ReorganizeActiveTweens();
    // static private System.Void DespawnActiveTweens(System.Collections.Generic.List`1<DG.Tweening.Tween> tweens)
    // Offset: 0x15B3BC4
    static void DespawnActiveTweens(::System::Collections::Generic::List_1<::DG::Tweening::Tween*>* tweens);
    // static private System.Void RemoveActiveTween(DG.Tweening.Tween t)
    // Offset: 0x15B2758
    static void RemoveActiveTween(::DG::Tweening::Tween* t);
    // static private System.Void ClearTweenArray(DG.Tweening.Tween[] tweens)
    // Offset: 0x15B2F24
    static void ClearTweenArray(::ArrayW<::DG::Tweening::Tween*> tweens);
    // static private System.Void IncreaseCapacities(DG.Tweening.Core.TweenManager/DG.Tweening.Core.CapacityIncreaseMode increaseMode)
    // Offset: 0x15B2184
    static void IncreaseCapacities(::DG::Tweening::Core::TweenManager::CapacityIncreaseMode increaseMode);
    // static private System.Void ManageOnRewindCallbackWhenAlreadyRewinded(DG.Tweening.Tween t, System.Boolean isPlayBackwardsOrSmoothRewind)
    // Offset: 0x15B4D38
    static void ManageOnRewindCallbackWhenAlreadyRewinded(::DG::Tweening::Tween* t, bool isPlayBackwardsOrSmoothRewind);
  }; // DG.Tweening.Core.TweenManager
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DG::Tweening::Core::TweenManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::GetTweener
// Il2CppName: GetTweener
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::GetSequence
// Il2CppName: GetSequence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Sequence* (*)()>(&DG::Tweening::Core::TweenManager::GetSequence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "GetSequence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::SetUpdateType
// Il2CppName: SetUpdateType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DG::Tweening::Tween*, ::DG::Tweening::UpdateType, bool)>(&DG::Tweening::Core::TweenManager::SetUpdateType)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    static auto* updateType = &::il2cpp_utils::GetClassFromName("DG.Tweening", "UpdateType")->byval_arg;
    static auto* isIndependentUpdate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "SetUpdateType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, updateType, isIndependentUpdate});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::AddActiveTweenToSequence
// Il2CppName: AddActiveTweenToSequence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DG::Tweening::Tween*)>(&DG::Tweening::Core::TweenManager::AddActiveTweenToSequence)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "AddActiveTweenToSequence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::DespawnAll
// Il2CppName: DespawnAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&DG::Tweening::Core::TweenManager::DespawnAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "DespawnAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::Despawn
// Il2CppName: Despawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DG::Tweening::Tween*, bool)>(&DG::Tweening::Core::TweenManager::Despawn)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    static auto* modifyActiveLists = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "Despawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, modifyActiveLists});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::PurgeAll
// Il2CppName: PurgeAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DG::Tweening::Core::TweenManager::PurgeAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "PurgeAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::PurgePools
// Il2CppName: PurgePools
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DG::Tweening::Core::TweenManager::PurgePools)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "PurgePools", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::AddTweenLink
// Il2CppName: AddTweenLink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DG::Tweening::Tween*, ::DG::Tweening::Core::TweenLink*)>(&DG::Tweening::Core::TweenManager::AddTweenLink)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    static auto* tweenLink = &::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenLink")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "AddTweenLink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, tweenLink});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::RemoveTweenLink
// Il2CppName: RemoveTweenLink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DG::Tweening::Tween*)>(&DG::Tweening::Core::TweenManager::RemoveTweenLink)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "RemoveTweenLink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::ResetCapacities
// Il2CppName: ResetCapacities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DG::Tweening::Core::TweenManager::ResetCapacities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "ResetCapacities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::SetCapacities
// Il2CppName: SetCapacities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int)>(&DG::Tweening::Core::TweenManager::SetCapacities)> {
  static const MethodInfo* get() {
    static auto* tweenersCapacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sequencesCapacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "SetCapacities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tweenersCapacity, sequencesCapacity});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&DG::Tweening::Core::TweenManager::Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DG::Tweening::UpdateType, float, float)>(&DG::Tweening::Core::TweenManager::Update)> {
  static const MethodInfo* get() {
    static auto* updateType = &::il2cpp_utils::GetClassFromName("DG.Tweening", "UpdateType")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* independentTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateType, deltaTime, independentTime});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::FilteredOperation
// Il2CppName: FilteredOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::DG::Tweening::Core::Enums::OperationType, ::DG::Tweening::Core::Enums::FilterType, ::Il2CppObject*, bool, float, ::Il2CppObject*, ::ArrayW<::Il2CppObject*>)>(&DG::Tweening::Core::TweenManager::FilteredOperation)> {
  static const MethodInfo* get() {
    static auto* operationType = &::il2cpp_utils::GetClassFromName("DG.Tweening.Core.Enums", "OperationType")->byval_arg;
    static auto* filterType = &::il2cpp_utils::GetClassFromName("DG.Tweening.Core.Enums", "FilterType")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* optionalBool = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* optionalFloat = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* optionalObj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* optionalArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "FilteredOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operationType, filterType, id, optionalBool, optionalFloat, optionalObj, optionalArray});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::Complete
// Il2CppName: Complete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DG::Tweening::Tween*, bool, ::DG::Tweening::Core::Enums::UpdateMode)>(&DG::Tweening::Core::TweenManager::Complete)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    static auto* modifyActiveLists = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateMode = &::il2cpp_utils::GetClassFromName("DG.Tweening.Core.Enums", "UpdateMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "Complete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, modifyActiveLists, updateMode});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::Flip
// Il2CppName: Flip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DG::Tweening::Tween*)>(&DG::Tweening::Core::TweenManager::Flip)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "Flip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::ForceInit
// Il2CppName: ForceInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DG::Tweening::Tween*, bool)>(&DG::Tweening::Core::TweenManager::ForceInit)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    static auto* isSequenced = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "ForceInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, isSequenced});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::Goto
// Il2CppName: Goto
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DG::Tweening::Tween*, float, bool, ::DG::Tweening::Core::Enums::UpdateMode)>(&DG::Tweening::Core::TweenManager::Goto)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* andPlay = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateMode = &::il2cpp_utils::GetClassFromName("DG.Tweening.Core.Enums", "UpdateMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "Goto", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, to, andPlay, updateMode});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DG::Tweening::Tween*)>(&DG::Tweening::Core::TweenManager::Pause)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DG::Tweening::Tween*)>(&DG::Tweening::Core::TweenManager::Play)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::PlayBackwards
// Il2CppName: PlayBackwards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DG::Tweening::Tween*)>(&DG::Tweening::Core::TweenManager::PlayBackwards)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "PlayBackwards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::PlayForward
// Il2CppName: PlayForward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DG::Tweening::Tween*)>(&DG::Tweening::Core::TweenManager::PlayForward)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "PlayForward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::Restart
// Il2CppName: Restart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DG::Tweening::Tween*, bool, float)>(&DG::Tweening::Core::TweenManager::Restart)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    static auto* includeDelay = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* changeDelayTo = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "Restart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, includeDelay, changeDelayTo});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::Rewind
// Il2CppName: Rewind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DG::Tweening::Tween*, bool)>(&DG::Tweening::Core::TweenManager::Rewind)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    static auto* includeDelay = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "Rewind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, includeDelay});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::SmoothRewind
// Il2CppName: SmoothRewind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DG::Tweening::Tween*)>(&DG::Tweening::Core::TweenManager::SmoothRewind)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "SmoothRewind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::TogglePause
// Il2CppName: TogglePause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DG::Tweening::Tween*)>(&DG::Tweening::Core::TweenManager::TogglePause)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "TogglePause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::TotalPooledTweens
// Il2CppName: TotalPooledTweens
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&DG::Tweening::Core::TweenManager::TotalPooledTweens)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "TotalPooledTweens", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::TotalPlayingTweens
// Il2CppName: TotalPlayingTweens
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&DG::Tweening::Core::TweenManager::TotalPlayingTweens)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "TotalPlayingTweens", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::GetActiveTweens
// Il2CppName: GetActiveTweens
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::DG::Tweening::Tween*>* (*)(bool, ::System::Collections::Generic::List_1<::DG::Tweening::Tween*>*)>(&DG::Tweening::Core::TweenManager::GetActiveTweens)> {
  static const MethodInfo* get() {
    static auto* playing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* fillableList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "GetActiveTweens", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playing, fillableList});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::GetTweensById
// Il2CppName: GetTweensById
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::DG::Tweening::Tween*>* (*)(::Il2CppObject*, bool, ::System::Collections::Generic::List_1<::DG::Tweening::Tween*>*)>(&DG::Tweening::Core::TweenManager::GetTweensById)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* playingOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* fillableList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "GetTweensById", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, playingOnly, fillableList});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::GetTweensByTarget
// Il2CppName: GetTweensByTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::DG::Tweening::Tween*>* (*)(::Il2CppObject*, bool, ::System::Collections::Generic::List_1<::DG::Tweening::Tween*>*)>(&DG::Tweening::Core::TweenManager::GetTweensByTarget)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* playingOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* fillableList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "GetTweensByTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, playingOnly, fillableList});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::MarkForKilling
// Il2CppName: MarkForKilling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DG::Tweening::Tween*)>(&DG::Tweening::Core::TweenManager::MarkForKilling)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "MarkForKilling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::EvaluateTweenLink
// Il2CppName: EvaluateTweenLink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DG::Tweening::Tween*)>(&DG::Tweening::Core::TweenManager::EvaluateTweenLink)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "EvaluateTweenLink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::AddActiveTween
// Il2CppName: AddActiveTween
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DG::Tweening::Tween*)>(&DG::Tweening::Core::TweenManager::AddActiveTween)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "AddActiveTween", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::ReorganizeActiveTweens
// Il2CppName: ReorganizeActiveTweens
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DG::Tweening::Core::TweenManager::ReorganizeActiveTweens)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "ReorganizeActiveTweens", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::DespawnActiveTweens
// Il2CppName: DespawnActiveTweens
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::DG::Tweening::Tween*>*)>(&DG::Tweening::Core::TweenManager::DespawnActiveTweens)> {
  static const MethodInfo* get() {
    static auto* tweens = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "DespawnActiveTweens", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tweens});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::RemoveActiveTween
// Il2CppName: RemoveActiveTween
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DG::Tweening::Tween*)>(&DG::Tweening::Core::TweenManager::RemoveActiveTween)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "RemoveActiveTween", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::ClearTweenArray
// Il2CppName: ClearTweenArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::DG::Tweening::Tween*>)>(&DG::Tweening::Core::TweenManager::ClearTweenArray)> {
  static const MethodInfo* get() {
    static auto* tweens = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "ClearTweenArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tweens});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::IncreaseCapacities
// Il2CppName: IncreaseCapacities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DG::Tweening::Core::TweenManager::CapacityIncreaseMode)>(&DG::Tweening::Core::TweenManager::IncreaseCapacities)> {
  static const MethodInfo* get() {
    static auto* increaseMode = &::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenManager/CapacityIncreaseMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "IncreaseCapacities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{increaseMode});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::TweenManager::ManageOnRewindCallbackWhenAlreadyRewinded
// Il2CppName: ManageOnRewindCallbackWhenAlreadyRewinded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DG::Tweening::Tween*, bool)>(&DG::Tweening::Core::TweenManager::ManageOnRewindCallbackWhenAlreadyRewinded)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    static auto* isPlayBackwardsOrSmoothRewind = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::TweenManager*), "ManageOnRewindCallbackWhenAlreadyRewinded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, isPlayBackwardsOrSmoothRewind});
  }
};
