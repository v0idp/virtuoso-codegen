// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DG.Tweening.Tweener
#include "DG/Tweening/Tweener.hpp"
// Including type: DG.Tweening.Core.Enums.UpdateMode
#include "DG/Tweening/Core/Enums/UpdateMode.hpp"
// Including type: DG.Tweening.Core.Enums.UpdateNotice
#include "DG/Tweening/Core/Enums/UpdateNotice.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DG::Tweening::Plugins::Options
namespace DG::Tweening::Plugins::Options {
  // Forward declaring type: IPlugOptions
  class IPlugOptions;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ValueType because it is already included!
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: DG::Tweening::Core
namespace DG::Tweening::Core {
  // Forward declaring type: DOGetter`1<T>
  template<typename T>
  class DOGetter_1;
  // Forward declaring type: DOSetter`1<T>
  template<typename T>
  class DOSetter_1;
}
// Forward declaring namespace: DG::Tweening::Plugins::Core
namespace DG::Tweening::Plugins::Core {
  // Forward declaring type: ABSTweenPlugin`3<T1, T2, TPlugOptions>
  template<typename T1, typename T2, typename TPlugOptions>
  class ABSTweenPlugin_3;
}
// Completed forward declares
// Type namespace: DG.Tweening.Core
namespace DG::Tweening::Core {
  // Forward declaring type: TweenerCore`3<T1, T2, TPlugOptions>
  template<typename T1, typename T2, typename TPlugOptions>
  class TweenerCore_3;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::DG::Tweening::Core::TweenerCore_3, "DG.Tweening.Core", "TweenerCore`3");
// Type namespace: DG.Tweening.Core
namespace DG::Tweening::Core {
  // WARNING Size may be invalid!
  // Autogenerated type: DG.Tweening.Core.TweenerCore`3
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T1, typename T2, typename TPlugOptions>
  class TweenerCore_3 : public ::DG::Tweening::Tweener {
    public:
    public:
    // public T2 startValue
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T2 startValue;
    // public T2 endValue
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T2 endValue;
    // public T2 changeValue
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T2 changeValue;
    // public TPlugOptions plugOptions
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    TPlugOptions plugOptions;
    // public DG.Tweening.Core.DOGetter`1<T1> getter
    // Size: 0x8
    // Offset: 0x0
    ::DG::Tweening::Core::DOGetter_1<T1>* getter;
    // Field size check
    static_assert(sizeof(::DG::Tweening::Core::DOGetter_1<T1>*) == 0x8);
    // public DG.Tweening.Core.DOSetter`1<T1> setter
    // Size: 0x8
    // Offset: 0x0
    ::DG::Tweening::Core::DOSetter_1<T1>* setter;
    // Field size check
    static_assert(sizeof(::DG::Tweening::Core::DOSetter_1<T1>*) == 0x8);
    // DG.Tweening.Plugins.Core.ABSTweenPlugin`3<T1,T2,TPlugOptions> tweenPlugin
    // Size: 0x8
    // Offset: 0x0
    ::DG::Tweening::Plugins::Core::ABSTweenPlugin_3<T1, T2, TPlugOptions>* tweenPlugin;
    // Field size check
    static_assert(sizeof(::DG::Tweening::Plugins::Core::ABSTweenPlugin_3<T1, T2, TPlugOptions>*) == 0x8);
    public:
    // Autogenerated static field getter
    // Get static field: static private System.String _TxtCantChangeSequencedValues
    static ::StringW _get__TxtCantChangeSequencedValues() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::_get__TxtCantChangeSequencedValues");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TweenerCore_3<T1, T2, TPlugOptions>*>::get(), "_TxtCantChangeSequencedValues")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String _TxtCantChangeSequencedValues
    static void _set__TxtCantChangeSequencedValues(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::_set__TxtCantChangeSequencedValues");
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TweenerCore_3<T1, T2, TPlugOptions>*>::get(), "_TxtCantChangeSequencedValues", value)));
    }
    // Autogenerated instance field getter
    // Get instance field: public T2 startValue
    [[deprecated("Use field access instead!")]] T2& dyn_startValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::dyn_startValue");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startValue"))->offset;
      return *reinterpret_cast<T2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public T2 endValue
    [[deprecated("Use field access instead!")]] T2& dyn_endValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::dyn_endValue");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endValue"))->offset;
      return *reinterpret_cast<T2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public T2 changeValue
    [[deprecated("Use field access instead!")]] T2& dyn_changeValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::dyn_changeValue");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "changeValue"))->offset;
      return *reinterpret_cast<T2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public TPlugOptions plugOptions
    [[deprecated("Use field access instead!")]] TPlugOptions& dyn_plugOptions() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::dyn_plugOptions");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "plugOptions"))->offset;
      return *reinterpret_cast<TPlugOptions*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public DG.Tweening.Core.DOGetter`1<T1> getter
    [[deprecated("Use field access instead!")]] ::DG::Tweening::Core::DOGetter_1<T1>*& dyn_getter() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::dyn_getter");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "getter"))->offset;
      return *reinterpret_cast<::DG::Tweening::Core::DOGetter_1<T1>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public DG.Tweening.Core.DOSetter`1<T1> setter
    [[deprecated("Use field access instead!")]] ::DG::Tweening::Core::DOSetter_1<T1>*& dyn_setter() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::dyn_setter");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "setter"))->offset;
      return *reinterpret_cast<::DG::Tweening::Core::DOSetter_1<T1>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: DG.Tweening.Plugins.Core.ABSTweenPlugin`3<T1,T2,TPlugOptions> tweenPlugin
    [[deprecated("Use field access instead!")]] ::DG::Tweening::Plugins::Core::ABSTweenPlugin_3<T1, T2, TPlugOptions>*& dyn_tweenPlugin() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::dyn_tweenPlugin");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tweenPlugin"))->offset;
      return *reinterpret_cast<::DG::Tweening::Plugins::Core::ABSTweenPlugin_3<T1, T2, TPlugOptions>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> ChangeStartValue(T2 newStartValue, System.Single newDuration)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* ChangeStartValue(T2 newStartValue, float newDuration) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::ChangeStartValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeStartValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newStartValue), ::il2cpp_utils::ExtractType(newDuration)})));
      return ::il2cpp_utils::RunMethodRethrow<::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>*, false>(this, ___internal__method, newStartValue, newDuration);
    }
    // public DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> ChangeEndValue(T2 newEndValue, System.Boolean snapStartValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* ChangeEndValue(T2 newEndValue, bool snapStartValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::ChangeEndValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeEndValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newEndValue), ::il2cpp_utils::ExtractType(snapStartValue)})));
      return ::il2cpp_utils::RunMethodRethrow<::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>*, false>(this, ___internal__method, newEndValue, snapStartValue);
    }
    // public DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> ChangeEndValue(T2 newEndValue, System.Single newDuration, System.Boolean snapStartValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* ChangeEndValue(T2 newEndValue, float newDuration, bool snapStartValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::ChangeEndValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeEndValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newEndValue), ::il2cpp_utils::ExtractType(newDuration), ::il2cpp_utils::ExtractType(snapStartValue)})));
      return ::il2cpp_utils::RunMethodRethrow<::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>*, false>(this, ___internal__method, newEndValue, newDuration, snapStartValue);
    }
    // public DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> ChangeValues(T2 newStartValue, T2 newEndValue, System.Single newDuration)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* ChangeValues(T2 newStartValue, T2 newEndValue, float newDuration) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::ChangeValues");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newStartValue), ::il2cpp_utils::ExtractType(newEndValue), ::il2cpp_utils::ExtractType(newDuration)})));
      return ::il2cpp_utils::RunMethodRethrow<::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>*, false>(this, ___internal__method, newStartValue, newEndValue, newDuration);
    }
    // DG.Tweening.Tweener SetFrom(T2 fromValue, System.Boolean setImmediately)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::DG::Tweening::Tweener* SetFrom(T2 fromValue, bool setImmediately) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::SetFrom");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromValue), ::il2cpp_utils::ExtractType(setImmediately)})));
      return ::il2cpp_utils::RunMethodRethrow<::DG::Tweening::Tweener*, false>(this, ___internal__method, fromValue, setImmediately);
    }
    // System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: DG.Tweening.Tweener
    // Base method: System.Void Tweener::.ctor()
    // Base method: System.Void Tween::.ctor()
    // Base method: System.Void ABSSequentiable::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TweenerCore_3<T1, T2, TPlugOptions>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TweenerCore_3<T1, T2, TPlugOptions>*, creationType>()));
    }
    // public override DG.Tweening.Tweener ChangeStartValue(System.Object newStartValue, System.Single newDuration)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: DG.Tweening.Tweener
    // Base method: DG.Tweening.Tweener Tweener::ChangeStartValue(System.Object newStartValue, System.Single newDuration)
    ::DG::Tweening::Tweener* ChangeStartValue(::Il2CppObject* newStartValue, float newDuration) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::ChangeStartValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::DG::Tweening::Tweener*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::DG::Tweening::Tweener*, false>(this, ___internal__method, newStartValue, newDuration);
    }
    // public override DG.Tweening.Tweener ChangeEndValue(System.Object newEndValue, System.Boolean snapStartValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: DG.Tweening.Tweener
    // Base method: DG.Tweening.Tweener Tweener::ChangeEndValue(System.Object newEndValue, System.Boolean snapStartValue)
    ::DG::Tweening::Tweener* ChangeEndValue(::Il2CppObject* newEndValue, bool snapStartValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::ChangeEndValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::DG::Tweening::Tweener*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::DG::Tweening::Tweener*, false>(this, ___internal__method, newEndValue, snapStartValue);
    }
    // public override DG.Tweening.Tweener ChangeEndValue(System.Object newEndValue, System.Single newDuration, System.Boolean snapStartValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: DG.Tweening.Tweener
    // Base method: DG.Tweening.Tweener Tweener::ChangeEndValue(System.Object newEndValue, System.Single newDuration, System.Boolean snapStartValue)
    ::DG::Tweening::Tweener* ChangeEndValue(::Il2CppObject* newEndValue, float newDuration, bool snapStartValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::ChangeEndValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::DG::Tweening::Tweener*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::DG::Tweening::Tweener*, false>(this, ___internal__method, newEndValue, newDuration, snapStartValue);
    }
    // public override DG.Tweening.Tweener ChangeValues(System.Object newStartValue, System.Object newEndValue, System.Single newDuration)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: DG.Tweening.Tweener
    // Base method: DG.Tweening.Tweener Tweener::ChangeValues(System.Object newStartValue, System.Object newEndValue, System.Single newDuration)
    ::DG::Tweening::Tweener* ChangeValues(::Il2CppObject* newStartValue, ::Il2CppObject* newEndValue, float newDuration) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::ChangeValues");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::DG::Tweening::Tweener*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::DG::Tweening::Tweener*, false>(this, ___internal__method, newStartValue, newEndValue, newDuration);
    }
    // override DG.Tweening.Tweener SetFrom(System.Boolean relative)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: DG.Tweening.Tweener
    // Base method: DG.Tweening.Tweener Tweener::SetFrom(System.Boolean relative)
    ::DG::Tweening::Tweener* SetFrom(bool relative) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::SetFrom");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::DG::Tweening::Tweener*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::DG::Tweening::Tweener*, false>(this, ___internal__method, relative);
    }
    // override System.Void Reset()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: DG.Tweening.Tween
    // Base method: System.Void Tween::Reset()
    void Reset() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::Reset");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::DG::Tweening::Tween*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // override System.Boolean Validate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: DG.Tweening.Tween
    // Base method: System.Boolean Tween::Validate()
    bool Validate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::Validate");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::DG::Tweening::Tween*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // override System.Single UpdateDelay(System.Single elapsed)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: DG.Tweening.Tween
    // Base method: System.Single Tween::UpdateDelay(System.Single elapsed)
    float UpdateDelay(float elapsed) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::UpdateDelay");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::DG::Tweening::Tween*), -1));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, elapsed);
    }
    // override System.Boolean Startup()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: DG.Tweening.Tween
    // Base method: System.Boolean Tween::Startup()
    bool Startup() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::Startup");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::DG::Tweening::Tween*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // override System.Boolean ApplyTween(System.Single prevPosition, System.Int32 prevCompletedLoops, System.Int32 newCompletedSteps, System.Boolean useInversePosition, DG.Tweening.Core.Enums.UpdateMode updateMode, DG.Tweening.Core.Enums.UpdateNotice updateNotice)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: DG.Tweening.Tween
    // Base method: System.Boolean Tween::ApplyTween(System.Single prevPosition, System.Int32 prevCompletedLoops, System.Int32 newCompletedSteps, System.Boolean useInversePosition, DG.Tweening.Core.Enums.UpdateMode updateMode, DG.Tweening.Core.Enums.UpdateNotice updateNotice)
    bool ApplyTween(float prevPosition, int prevCompletedLoops, int newCompletedSteps, bool useInversePosition, ::DG::Tweening::Core::Enums::UpdateMode updateMode, ::DG::Tweening::Core::Enums::UpdateNotice updateNotice) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::TweenerCore_3::ApplyTween");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::DG::Tweening::Tween*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, prevPosition, prevCompletedLoops, newCompletedSteps, useInversePosition, updateMode, updateNotice);
    }
  }; // DG.Tweening.Core.TweenerCore`3
  // Could not write size check! Type: DG.Tweening.Core.TweenerCore`3 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
