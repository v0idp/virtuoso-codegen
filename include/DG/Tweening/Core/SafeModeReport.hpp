// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DG::Tweening::Core
namespace DG::Tweening::Core {
}
// Completed forward declares
// Type namespace: DG.Tweening.Core
namespace DG::Tweening::Core {
  // Forward declaring type: SafeModeReport
  struct SafeModeReport;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::Core::SafeModeReport, "DG.Tweening.Core", "SafeModeReport");
// Type namespace: DG.Tweening.Core
namespace DG::Tweening::Core {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: DG.Tweening.Core.SafeModeReport
  // [TokenAttribute] Offset: FFFFFFFF
  struct SafeModeReport/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::DG::Tweening::Core::SafeModeReport::SafeModeReportType
    struct SafeModeReportType;
    public:
    // private System.Int32 <totMissingTargetOrFieldErrors>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int totMissingTargetOrFieldErrors;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <totCallbackErrors>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    int totCallbackErrors;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <totStartupErrors>k__BackingField
    // Size: 0x4
    // Offset: 0x8
    int totStartupErrors;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <totUnsetErrors>k__BackingField
    // Size: 0x4
    // Offset: 0xC
    int totUnsetErrors;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: SafeModeReport
    constexpr SafeModeReport(int totMissingTargetOrFieldErrors_ = {}, int totCallbackErrors_ = {}, int totStartupErrors_ = {}, int totUnsetErrors_ = {}) noexcept : totMissingTargetOrFieldErrors{totMissingTargetOrFieldErrors_}, totCallbackErrors{totCallbackErrors_}, totStartupErrors{totStartupErrors_}, totUnsetErrors{totUnsetErrors_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Int32 <totMissingTargetOrFieldErrors>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$totMissingTargetOrFieldErrors$k__BackingField();
    // Get instance field reference: private System.Int32 <totCallbackErrors>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$totCallbackErrors$k__BackingField();
    // Get instance field reference: private System.Int32 <totStartupErrors>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$totStartupErrors$k__BackingField();
    // Get instance field reference: private System.Int32 <totUnsetErrors>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$totUnsetErrors$k__BackingField();
    // public System.Int32 get_totMissingTargetOrFieldErrors()
    // Offset: 0x15E589C
    int get_totMissingTargetOrFieldErrors();
    // private System.Void set_totMissingTargetOrFieldErrors(System.Int32 value)
    // Offset: 0x15E58A4
    void set_totMissingTargetOrFieldErrors(int value);
    // public System.Int32 get_totCallbackErrors()
    // Offset: 0x15E58AC
    int get_totCallbackErrors();
    // private System.Void set_totCallbackErrors(System.Int32 value)
    // Offset: 0x15E58B4
    void set_totCallbackErrors(int value);
    // public System.Int32 get_totStartupErrors()
    // Offset: 0x15E58BC
    int get_totStartupErrors();
    // private System.Void set_totStartupErrors(System.Int32 value)
    // Offset: 0x15E58C4
    void set_totStartupErrors(int value);
    // public System.Int32 get_totUnsetErrors()
    // Offset: 0x15E58CC
    int get_totUnsetErrors();
    // private System.Void set_totUnsetErrors(System.Int32 value)
    // Offset: 0x15E58D4
    void set_totUnsetErrors(int value);
    // public System.Void Add(DG.Tweening.Core.SafeModeReport/DG.Tweening.Core.SafeModeReportType type)
    // Offset: 0x15E58DC
    void Add(::DG::Tweening::Core::SafeModeReport::SafeModeReportType type);
    // public System.Int32 GetTotErrors()
    // Offset: 0x15DC60C
    int GetTotErrors();
  }; // DG.Tweening.Core.SafeModeReport
  #pragma pack(pop)
  static check_size<sizeof(SafeModeReport), 12 + sizeof(int)> __DG_Tweening_Core_SafeModeReportSizeCheck;
  static_assert(sizeof(SafeModeReport) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::Core::SafeModeReport::get_totMissingTargetOrFieldErrors
// Il2CppName: get_totMissingTargetOrFieldErrors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DG::Tweening::Core::SafeModeReport::*)()>(&DG::Tweening::Core::SafeModeReport::get_totMissingTargetOrFieldErrors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::SafeModeReport), "get_totMissingTargetOrFieldErrors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::SafeModeReport::set_totMissingTargetOrFieldErrors
// Il2CppName: set_totMissingTargetOrFieldErrors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Core::SafeModeReport::*)(int)>(&DG::Tweening::Core::SafeModeReport::set_totMissingTargetOrFieldErrors)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::SafeModeReport), "set_totMissingTargetOrFieldErrors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::SafeModeReport::get_totCallbackErrors
// Il2CppName: get_totCallbackErrors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DG::Tweening::Core::SafeModeReport::*)()>(&DG::Tweening::Core::SafeModeReport::get_totCallbackErrors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::SafeModeReport), "get_totCallbackErrors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::SafeModeReport::set_totCallbackErrors
// Il2CppName: set_totCallbackErrors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Core::SafeModeReport::*)(int)>(&DG::Tweening::Core::SafeModeReport::set_totCallbackErrors)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::SafeModeReport), "set_totCallbackErrors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::SafeModeReport::get_totStartupErrors
// Il2CppName: get_totStartupErrors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DG::Tweening::Core::SafeModeReport::*)()>(&DG::Tweening::Core::SafeModeReport::get_totStartupErrors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::SafeModeReport), "get_totStartupErrors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::SafeModeReport::set_totStartupErrors
// Il2CppName: set_totStartupErrors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Core::SafeModeReport::*)(int)>(&DG::Tweening::Core::SafeModeReport::set_totStartupErrors)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::SafeModeReport), "set_totStartupErrors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::SafeModeReport::get_totUnsetErrors
// Il2CppName: get_totUnsetErrors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DG::Tweening::Core::SafeModeReport::*)()>(&DG::Tweening::Core::SafeModeReport::get_totUnsetErrors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::SafeModeReport), "get_totUnsetErrors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::SafeModeReport::set_totUnsetErrors
// Il2CppName: set_totUnsetErrors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Core::SafeModeReport::*)(int)>(&DG::Tweening::Core::SafeModeReport::set_totUnsetErrors)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::SafeModeReport), "set_totUnsetErrors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::SafeModeReport::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Core::SafeModeReport::*)(::DG::Tweening::Core::SafeModeReport::SafeModeReportType)>(&DG::Tweening::Core::SafeModeReport::Add)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "SafeModeReport/SafeModeReportType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::SafeModeReport), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::SafeModeReport::GetTotErrors
// Il2CppName: GetTotErrors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DG::Tweening::Core::SafeModeReport::*)()>(&DG::Tweening::Core::SafeModeReport::GetTotErrors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::SafeModeReport), "GetTotErrors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
