// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: DG.Tweening.Core.Enums.RewindCallbackMode
#include "DG/Tweening/Core/Enums/RewindCallbackMode.hpp"
// Including type: DG.Tweening.LogBehaviour
#include "DG/Tweening/LogBehaviour.hpp"
// Including type: DG.Tweening.AutoPlay
#include "DG/Tweening/AutoPlay.hpp"
// Including type: DG.Tweening.UpdateType
#include "DG/Tweening/UpdateType.hpp"
// Including type: DG.Tweening.Ease
#include "DG/Tweening/Ease.hpp"
// Including type: DG.Tweening.LoopType
#include "DG/Tweening/LoopType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: DG::Tweening::Core
namespace DG::Tweening::Core {
}
// Completed forward declares
// Type namespace: DG.Tweening.Core
namespace DG::Tweening::Core {
  // Forward declaring type: DOTweenSettings
  class DOTweenSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DG::Tweening::Core::DOTweenSettings);
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::Core::DOTweenSettings*, "DG.Tweening.Core", "DOTweenSettings");
// Type namespace: DG.Tweening.Core
namespace DG::Tweening::Core {
  // Size: 0x7A
  #pragma pack(push, 1)
  // Autogenerated type: DG.Tweening.Core.DOTweenSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class DOTweenSettings : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::DG::Tweening::Core::DOTweenSettings::SettingsLocation
    struct SettingsLocation;
    // Nested type: ::DG::Tweening::Core::DOTweenSettings::SafeModeOptions
    class SafeModeOptions;
    // Nested type: ::DG::Tweening::Core::DOTweenSettings::ModulesSetup
    class ModulesSetup;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: DG.Tweening.Core.DOTweenSettings/DG.Tweening.Core.SettingsLocation
    // [TokenAttribute] Offset: FFFFFFFF
    struct SettingsLocation/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SettingsLocation
      constexpr SettingsLocation(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public DG.Tweening.Core.DOTweenSettings/DG.Tweening.Core.SettingsLocation AssetsDirectory
      static constexpr const int AssetsDirectory = 0;
      // Get static field: static public DG.Tweening.Core.DOTweenSettings/DG.Tweening.Core.SettingsLocation AssetsDirectory
      static ::DG::Tweening::Core::DOTweenSettings::SettingsLocation _get_AssetsDirectory();
      // Set static field: static public DG.Tweening.Core.DOTweenSettings/DG.Tweening.Core.SettingsLocation AssetsDirectory
      static void _set_AssetsDirectory(::DG::Tweening::Core::DOTweenSettings::SettingsLocation value);
      // static field const value: static public DG.Tweening.Core.DOTweenSettings/DG.Tweening.Core.SettingsLocation DOTweenDirectory
      static constexpr const int DOTweenDirectory = 1;
      // Get static field: static public DG.Tweening.Core.DOTweenSettings/DG.Tweening.Core.SettingsLocation DOTweenDirectory
      static ::DG::Tweening::Core::DOTweenSettings::SettingsLocation _get_DOTweenDirectory();
      // Set static field: static public DG.Tweening.Core.DOTweenSettings/DG.Tweening.Core.SettingsLocation DOTweenDirectory
      static void _set_DOTweenDirectory(::DG::Tweening::Core::DOTweenSettings::SettingsLocation value);
      // static field const value: static public DG.Tweening.Core.DOTweenSettings/DG.Tweening.Core.SettingsLocation DemigiantDirectory
      static constexpr const int DemigiantDirectory = 2;
      // Get static field: static public DG.Tweening.Core.DOTweenSettings/DG.Tweening.Core.SettingsLocation DemigiantDirectory
      static ::DG::Tweening::Core::DOTweenSettings::SettingsLocation _get_DemigiantDirectory();
      // Set static field: static public DG.Tweening.Core.DOTweenSettings/DG.Tweening.Core.SettingsLocation DemigiantDirectory
      static void _set_DemigiantDirectory(::DG::Tweening::Core::DOTweenSettings::SettingsLocation value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // DG.Tweening.Core.DOTweenSettings/DG.Tweening.Core.SettingsLocation
    #pragma pack(pop)
    static check_size<sizeof(DOTweenSettings::SettingsLocation), 0 + sizeof(int)> __DG_Tweening_Core_DOTweenSettings_SettingsLocationSizeCheck;
    static_assert(sizeof(DOTweenSettings::SettingsLocation) == 0x4);
    public:
    // public System.Boolean useSafeMode
    // Size: 0x1
    // Offset: 0x18
    bool useSafeMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useSafeMode and: safeModeOptions
    char __padding0[0x7] = {};
    // public DG.Tweening.Core.DOTweenSettings/DG.Tweening.Core.SafeModeOptions safeModeOptions
    // Size: 0x8
    // Offset: 0x20
    ::DG::Tweening::Core::DOTweenSettings::SafeModeOptions* safeModeOptions;
    // Field size check
    static_assert(sizeof(::DG::Tweening::Core::DOTweenSettings::SafeModeOptions*) == 0x8);
    // public System.Single timeScale
    // Size: 0x4
    // Offset: 0x28
    float timeScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean useSmoothDeltaTime
    // Size: 0x1
    // Offset: 0x2C
    bool useSmoothDeltaTime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useSmoothDeltaTime and: maxSmoothUnscaledTime
    char __padding3[0x3] = {};
    // public System.Single maxSmoothUnscaledTime
    // Size: 0x4
    // Offset: 0x30
    float maxSmoothUnscaledTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public DG.Tweening.Core.Enums.RewindCallbackMode rewindCallbackMode
    // Size: 0x4
    // Offset: 0x34
    ::DG::Tweening::Core::Enums::RewindCallbackMode rewindCallbackMode;
    // Field size check
    static_assert(sizeof(::DG::Tweening::Core::Enums::RewindCallbackMode) == 0x4);
    // public System.Boolean showUnityEditorReport
    // Size: 0x1
    // Offset: 0x38
    bool showUnityEditorReport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showUnityEditorReport and: logBehaviour
    char __padding6[0x3] = {};
    // public DG.Tweening.LogBehaviour logBehaviour
    // Size: 0x4
    // Offset: 0x3C
    ::DG::Tweening::LogBehaviour logBehaviour;
    // Field size check
    static_assert(sizeof(::DG::Tweening::LogBehaviour) == 0x4);
    // public System.Boolean drawGizmos
    // Size: 0x1
    // Offset: 0x40
    bool drawGizmos;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean defaultRecyclable
    // Size: 0x1
    // Offset: 0x41
    bool defaultRecyclable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: defaultRecyclable and: defaultAutoPlay
    char __padding9[0x2] = {};
    // public DG.Tweening.AutoPlay defaultAutoPlay
    // Size: 0x4
    // Offset: 0x44
    ::DG::Tweening::AutoPlay defaultAutoPlay;
    // Field size check
    static_assert(sizeof(::DG::Tweening::AutoPlay) == 0x4);
    // public DG.Tweening.UpdateType defaultUpdateType
    // Size: 0x4
    // Offset: 0x48
    ::DG::Tweening::UpdateType defaultUpdateType;
    // Field size check
    static_assert(sizeof(::DG::Tweening::UpdateType) == 0x4);
    // public System.Boolean defaultTimeScaleIndependent
    // Size: 0x1
    // Offset: 0x4C
    bool defaultTimeScaleIndependent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: defaultTimeScaleIndependent and: defaultEaseType
    char __padding12[0x3] = {};
    // public DG.Tweening.Ease defaultEaseType
    // Size: 0x4
    // Offset: 0x50
    ::DG::Tweening::Ease defaultEaseType;
    // Field size check
    static_assert(sizeof(::DG::Tweening::Ease) == 0x4);
    // public System.Single defaultEaseOvershootOrAmplitude
    // Size: 0x4
    // Offset: 0x54
    float defaultEaseOvershootOrAmplitude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single defaultEasePeriod
    // Size: 0x4
    // Offset: 0x58
    float defaultEasePeriod;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean defaultAutoKill
    // Size: 0x1
    // Offset: 0x5C
    bool defaultAutoKill;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: defaultAutoKill and: defaultLoopType
    char __padding16[0x3] = {};
    // public DG.Tweening.LoopType defaultLoopType
    // Size: 0x4
    // Offset: 0x60
    ::DG::Tweening::LoopType defaultLoopType;
    // Field size check
    static_assert(sizeof(::DG::Tweening::LoopType) == 0x4);
    // public System.Boolean debugMode
    // Size: 0x1
    // Offset: 0x64
    bool debugMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean debugStoreTargetId
    // Size: 0x1
    // Offset: 0x65
    bool debugStoreTargetId;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showPreviewPanel
    // Size: 0x1
    // Offset: 0x66
    bool showPreviewPanel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showPreviewPanel and: storeSettingsLocation
    char __padding20[0x1] = {};
    // public DG.Tweening.Core.DOTweenSettings/DG.Tweening.Core.SettingsLocation storeSettingsLocation
    // Size: 0x4
    // Offset: 0x68
    ::DG::Tweening::Core::DOTweenSettings::SettingsLocation storeSettingsLocation;
    // Field size check
    static_assert(sizeof(::DG::Tweening::Core::DOTweenSettings::SettingsLocation) == 0x4);
    // Padding between fields: storeSettingsLocation and: modules
    char __padding21[0x4] = {};
    // public DG.Tweening.Core.DOTweenSettings/DG.Tweening.Core.ModulesSetup modules
    // Size: 0x8
    // Offset: 0x70
    ::DG::Tweening::Core::DOTweenSettings::ModulesSetup* modules;
    // Field size check
    static_assert(sizeof(::DG::Tweening::Core::DOTweenSettings::ModulesSetup*) == 0x8);
    // public System.Boolean showPlayingTweens
    // Size: 0x1
    // Offset: 0x78
    bool showPlayingTweens;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showPausedTweens
    // Size: 0x1
    // Offset: 0x79
    bool showPausedTweens;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.String AssetName
    static constexpr const char* AssetName = "DOTweenSettings";
    // Get static field: static public System.String AssetName
    static ::StringW _get_AssetName();
    // Set static field: static public System.String AssetName
    static void _set_AssetName(::StringW value);
    // static field const value: static public System.String AssetFullFilename
    static constexpr const char* AssetFullFilename = "DOTweenSettings.asset";
    // Get static field: static public System.String AssetFullFilename
    static ::StringW _get_AssetFullFilename();
    // Set static field: static public System.String AssetFullFilename
    static void _set_AssetFullFilename(::StringW value);
    // Get instance field reference: public System.Boolean useSafeMode
    [[deprecated("Use field access instead!")]] bool& dyn_useSafeMode();
    // Get instance field reference: public DG.Tweening.Core.DOTweenSettings/DG.Tweening.Core.SafeModeOptions safeModeOptions
    [[deprecated("Use field access instead!")]] ::DG::Tweening::Core::DOTweenSettings::SafeModeOptions*& dyn_safeModeOptions();
    // Get instance field reference: public System.Single timeScale
    [[deprecated("Use field access instead!")]] float& dyn_timeScale();
    // Get instance field reference: public System.Boolean useSmoothDeltaTime
    [[deprecated("Use field access instead!")]] bool& dyn_useSmoothDeltaTime();
    // Get instance field reference: public System.Single maxSmoothUnscaledTime
    [[deprecated("Use field access instead!")]] float& dyn_maxSmoothUnscaledTime();
    // Get instance field reference: public DG.Tweening.Core.Enums.RewindCallbackMode rewindCallbackMode
    [[deprecated("Use field access instead!")]] ::DG::Tweening::Core::Enums::RewindCallbackMode& dyn_rewindCallbackMode();
    // Get instance field reference: public System.Boolean showUnityEditorReport
    [[deprecated("Use field access instead!")]] bool& dyn_showUnityEditorReport();
    // Get instance field reference: public DG.Tweening.LogBehaviour logBehaviour
    [[deprecated("Use field access instead!")]] ::DG::Tweening::LogBehaviour& dyn_logBehaviour();
    // Get instance field reference: public System.Boolean drawGizmos
    [[deprecated("Use field access instead!")]] bool& dyn_drawGizmos();
    // Get instance field reference: public System.Boolean defaultRecyclable
    [[deprecated("Use field access instead!")]] bool& dyn_defaultRecyclable();
    // Get instance field reference: public DG.Tweening.AutoPlay defaultAutoPlay
    [[deprecated("Use field access instead!")]] ::DG::Tweening::AutoPlay& dyn_defaultAutoPlay();
    // Get instance field reference: public DG.Tweening.UpdateType defaultUpdateType
    [[deprecated("Use field access instead!")]] ::DG::Tweening::UpdateType& dyn_defaultUpdateType();
    // Get instance field reference: public System.Boolean defaultTimeScaleIndependent
    [[deprecated("Use field access instead!")]] bool& dyn_defaultTimeScaleIndependent();
    // Get instance field reference: public DG.Tweening.Ease defaultEaseType
    [[deprecated("Use field access instead!")]] ::DG::Tweening::Ease& dyn_defaultEaseType();
    // Get instance field reference: public System.Single defaultEaseOvershootOrAmplitude
    [[deprecated("Use field access instead!")]] float& dyn_defaultEaseOvershootOrAmplitude();
    // Get instance field reference: public System.Single defaultEasePeriod
    [[deprecated("Use field access instead!")]] float& dyn_defaultEasePeriod();
    // Get instance field reference: public System.Boolean defaultAutoKill
    [[deprecated("Use field access instead!")]] bool& dyn_defaultAutoKill();
    // Get instance field reference: public DG.Tweening.LoopType defaultLoopType
    [[deprecated("Use field access instead!")]] ::DG::Tweening::LoopType& dyn_defaultLoopType();
    // Get instance field reference: public System.Boolean debugMode
    [[deprecated("Use field access instead!")]] bool& dyn_debugMode();
    // Get instance field reference: public System.Boolean debugStoreTargetId
    [[deprecated("Use field access instead!")]] bool& dyn_debugStoreTargetId();
    // Get instance field reference: public System.Boolean showPreviewPanel
    [[deprecated("Use field access instead!")]] bool& dyn_showPreviewPanel();
    // Get instance field reference: public DG.Tweening.Core.DOTweenSettings/DG.Tweening.Core.SettingsLocation storeSettingsLocation
    [[deprecated("Use field access instead!")]] ::DG::Tweening::Core::DOTweenSettings::SettingsLocation& dyn_storeSettingsLocation();
    // Get instance field reference: public DG.Tweening.Core.DOTweenSettings/DG.Tweening.Core.ModulesSetup modules
    [[deprecated("Use field access instead!")]] ::DG::Tweening::Core::DOTweenSettings::ModulesSetup*& dyn_modules();
    // Get instance field reference: public System.Boolean showPlayingTweens
    [[deprecated("Use field access instead!")]] bool& dyn_showPlayingTweens();
    // Get instance field reference: public System.Boolean showPausedTweens
    [[deprecated("Use field access instead!")]] bool& dyn_showPausedTweens();
    // public System.Void .ctor()
    // Offset: 0x15DCD64
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DOTweenSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::DOTweenSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DOTweenSettings*, creationType>()));
    }
  }; // DG.Tweening.Core.DOTweenSettings
  #pragma pack(pop)
  static check_size<sizeof(DOTweenSettings), 121 + sizeof(bool)> __DG_Tweening_Core_DOTweenSettingsSizeCheck;
  static_assert(sizeof(DOTweenSettings) == 0x7A);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::Core::DOTweenSettings::SettingsLocation, "DG.Tweening.Core", "DOTweenSettings/SettingsLocation");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::Core::DOTweenSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
