// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DG.Tweening.TweenType
#include "DG/Tweening/TweenType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DG::Tweening
namespace DG::Tweening {
  // Forward declaring type: TweenCallback
  class TweenCallback;
}
// Completed forward declares
// Type namespace: DG.Tweening.Core
namespace DG::Tweening::Core {
  // Forward declaring type: ABSSequentiable
  class ABSSequentiable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DG::Tweening::Core::ABSSequentiable);
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::Core::ABSSequentiable*, "DG.Tweening.Core", "ABSSequentiable");
// Type namespace: DG.Tweening.Core
namespace DG::Tweening::Core {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: DG.Tweening.Core.ABSSequentiable
  // [TokenAttribute] Offset: FFFFFFFF
  class ABSSequentiable : public ::Il2CppObject {
    public:
    public:
    // DG.Tweening.TweenType tweenType
    // Size: 0x4
    // Offset: 0x10
    ::DG::Tweening::TweenType tweenType;
    // Field size check
    static_assert(sizeof(::DG::Tweening::TweenType) == 0x4);
    // System.Single sequencedPosition
    // Size: 0x4
    // Offset: 0x14
    float sequencedPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single sequencedEndPosition
    // Size: 0x4
    // Offset: 0x18
    float sequencedEndPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: sequencedEndPosition and: onStart
    char __padding2[0x4] = {};
    // DG.Tweening.TweenCallback onStart
    // Size: 0x8
    // Offset: 0x20
    ::DG::Tweening::TweenCallback* onStart;
    // Field size check
    static_assert(sizeof(::DG::Tweening::TweenCallback*) == 0x8);
    public:
    // Get instance field reference: DG.Tweening.TweenType tweenType
    [[deprecated("Use field access instead!")]] ::DG::Tweening::TweenType& dyn_tweenType();
    // Get instance field reference: System.Single sequencedPosition
    [[deprecated("Use field access instead!")]] float& dyn_sequencedPosition();
    // Get instance field reference: System.Single sequencedEndPosition
    [[deprecated("Use field access instead!")]] float& dyn_sequencedEndPosition();
    // Get instance field reference: DG.Tweening.TweenCallback onStart
    [[deprecated("Use field access instead!")]] ::DG::Tweening::TweenCallback*& dyn_onStart();
    // protected System.Void .ctor()
    // Offset: 0x15D333C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ABSSequentiable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Core::ABSSequentiable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ABSSequentiable*, creationType>()));
    }
  }; // DG.Tweening.Core.ABSSequentiable
  #pragma pack(pop)
  static check_size<sizeof(ABSSequentiable), 32 + sizeof(::DG::Tweening::TweenCallback*)> __DG_Tweening_Core_ABSSequentiableSizeCheck;
  static_assert(sizeof(ABSSequentiable) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::Core::ABSSequentiable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
