// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: Assembly
  class Assembly;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: DG.Tweening.Core
namespace DG::Tweening::Core {
  // Forward declaring type: Utils
  class Utils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DG::Tweening::Core::Utils);
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::Core::Utils*, "DG.Tweening.Core", "Utils");
// Type namespace: DG.Tweening.Core
namespace DG::Tweening::Core {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: DG.Tweening.Core.Utils
  // [TokenAttribute] Offset: FFFFFFFF
  class Utils : public ::Il2CppObject {
    public:
    // Get static field: static private System.Reflection.Assembly[] _loadedAssemblies
    static ::ArrayW<::System::Reflection::Assembly*> _get__loadedAssemblies();
    // Set static field: static private System.Reflection.Assembly[] _loadedAssemblies
    static void _set__loadedAssemblies(::ArrayW<::System::Reflection::Assembly*> value);
    // Get static field: static private readonly System.String[] _defAssembliesToQuery
    static ::ArrayW<::StringW> _get__defAssembliesToQuery();
    // Set static field: static private readonly System.String[] _defAssembliesToQuery
    static void _set__defAssembliesToQuery(::ArrayW<::StringW> value);
    // static private System.Void .cctor()
    // Offset: 0x185F914
    static void _cctor();
    // static UnityEngine.Vector3 Vector3FromAngle(System.Single degrees, System.Single magnitude)
    // Offset: 0x185F39C
    static ::UnityEngine::Vector3 Vector3FromAngle(float degrees, float magnitude);
    // static System.Single Angle2D(UnityEngine.Vector3 from, UnityEngine.Vector3 to)
    // Offset: 0x185F3F0
    static float Angle2D(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to);
    // static UnityEngine.Vector3 RotateAroundPivot(UnityEngine.Vector3 point, UnityEngine.Vector3 pivot, UnityEngine.Quaternion rotation)
    // Offset: 0x185F58C
    static ::UnityEngine::Vector3 RotateAroundPivot(::UnityEngine::Vector3 point, ::UnityEngine::Vector3 pivot, ::UnityEngine::Quaternion rotation);
    // static System.Boolean Vector3AreApproximatelyEqual(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
    // Offset: 0x185F5EC
    static bool Vector3AreApproximatelyEqual(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b);
    // static System.Type GetLooseScriptType(System.String typeName)
    // Offset: 0x185F660
    static ::System::Type* GetLooseScriptType(::StringW typeName);
  }; // DG.Tweening.Core.Utils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::Core::Utils::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DG::Tweening::Core::Utils::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Utils*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Utils::Vector3FromAngle
// Il2CppName: Vector3FromAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(float, float)>(&DG::Tweening::Core::Utils::Vector3FromAngle)> {
  static const MethodInfo* get() {
    static auto* degrees = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* magnitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Utils*), "Vector3FromAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{degrees, magnitude});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Utils::Angle2D
// Il2CppName: Angle2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&DG::Tweening::Core::Utils::Angle2D)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Utils*), "Angle2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Utils::RotateAroundPivot
// Il2CppName: RotateAroundPivot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&DG::Tweening::Core::Utils::RotateAroundPivot)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* pivot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Utils*), "RotateAroundPivot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, pivot, rotation});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Utils::Vector3AreApproximatelyEqual
// Il2CppName: Vector3AreApproximatelyEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&DG::Tweening::Core::Utils::Vector3AreApproximatelyEqual)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Utils*), "Vector3AreApproximatelyEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Core::Utils::GetLooseScriptType
// Il2CppName: GetLooseScriptType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::StringW)>(&DG::Tweening::Core::Utils::GetLooseScriptType)> {
  static const MethodInfo* get() {
    static auto* typeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Core::Utils*), "GetLooseScriptType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeName});
  }
};
