// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: DG.Tweening
namespace DG::Tweening {
  // Forward declaring type: ScrambleMode
  struct ScrambleMode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::ScrambleMode, "DG.Tweening", "ScrambleMode");
// Type namespace: DG.Tweening
namespace DG::Tweening {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: DG.Tweening.ScrambleMode
  // [TokenAttribute] Offset: FFFFFFFF
  struct ScrambleMode/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ScrambleMode
    constexpr ScrambleMode(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public DG.Tweening.ScrambleMode None
    static constexpr const int None = 0;
    // Get static field: static public DG.Tweening.ScrambleMode None
    static ::DG::Tweening::ScrambleMode _get_None();
    // Set static field: static public DG.Tweening.ScrambleMode None
    static void _set_None(::DG::Tweening::ScrambleMode value);
    // static field const value: static public DG.Tweening.ScrambleMode All
    static constexpr const int All = 1;
    // Get static field: static public DG.Tweening.ScrambleMode All
    static ::DG::Tweening::ScrambleMode _get_All();
    // Set static field: static public DG.Tweening.ScrambleMode All
    static void _set_All(::DG::Tweening::ScrambleMode value);
    // static field const value: static public DG.Tweening.ScrambleMode Uppercase
    static constexpr const int Uppercase = 2;
    // Get static field: static public DG.Tweening.ScrambleMode Uppercase
    static ::DG::Tweening::ScrambleMode _get_Uppercase();
    // Set static field: static public DG.Tweening.ScrambleMode Uppercase
    static void _set_Uppercase(::DG::Tweening::ScrambleMode value);
    // static field const value: static public DG.Tweening.ScrambleMode Lowercase
    static constexpr const int Lowercase = 3;
    // Get static field: static public DG.Tweening.ScrambleMode Lowercase
    static ::DG::Tweening::ScrambleMode _get_Lowercase();
    // Set static field: static public DG.Tweening.ScrambleMode Lowercase
    static void _set_Lowercase(::DG::Tweening::ScrambleMode value);
    // static field const value: static public DG.Tweening.ScrambleMode Numerals
    static constexpr const int Numerals = 4;
    // Get static field: static public DG.Tweening.ScrambleMode Numerals
    static ::DG::Tweening::ScrambleMode _get_Numerals();
    // Set static field: static public DG.Tweening.ScrambleMode Numerals
    static void _set_Numerals(::DG::Tweening::ScrambleMode value);
    // static field const value: static public DG.Tweening.ScrambleMode Custom
    static constexpr const int Custom = 5;
    // Get static field: static public DG.Tweening.ScrambleMode Custom
    static ::DG::Tweening::ScrambleMode _get_Custom();
    // Set static field: static public DG.Tweening.ScrambleMode Custom
    static void _set_Custom(::DG::Tweening::ScrambleMode value);
    // Get instance field reference: public System.Int32 value__
    int& dyn_value__();
  }; // DG.Tweening.ScrambleMode
  #pragma pack(pop)
  static check_size<sizeof(ScrambleMode), 0 + sizeof(int)> __DG_Tweening_ScrambleModeSizeCheck;
  static_assert(sizeof(ScrambleMode) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
