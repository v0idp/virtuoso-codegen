// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DG.Tweening.Tween
#include "DG/Tweening/Tween.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: DG::Tweening::Core
namespace DG::Tweening::Core {
  // Skipping declaration: ABSSequentiable because it is already included!
}
// Forward declaring namespace: DG::Tweening
namespace DG::Tweening {
  // Forward declaring type: TweenCallback
  class TweenCallback;
}
// Forward declaring namespace: DG::Tweening::Core::Enums
namespace DG::Tweening::Core::Enums {
  // Forward declaring type: UpdateMode
  struct UpdateMode;
  // Forward declaring type: UpdateNotice
  struct UpdateNotice;
}
// Completed forward declares
// Type namespace: DG.Tweening
namespace DG::Tweening {
  // Forward declaring type: Sequence
  class Sequence;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DG::Tweening::Sequence);
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::Sequence*, "DG.Tweening", "Sequence");
// Type namespace: DG.Tweening
namespace DG::Tweening {
  // Size: 0x134
  #pragma pack(push, 1)
  // Autogenerated type: DG.Tweening.Sequence
  // [TokenAttribute] Offset: FFFFFFFF
  class Sequence : public ::DG::Tweening::Tween {
    public:
    public:
    // readonly System.Collections.Generic.List`1<DG.Tweening.Tween> sequencedTweens
    // Size: 0x8
    // Offset: 0x120
    ::System::Collections::Generic::List_1<::DG::Tweening::Tween*>* sequencedTweens;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::DG::Tweening::Tween*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<DG.Tweening.Core.ABSSequentiable> _sequencedObjs
    // Size: 0x8
    // Offset: 0x128
    ::System::Collections::Generic::List_1<::DG::Tweening::Core::ABSSequentiable*>* sequencedObjs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::DG::Tweening::Core::ABSSequentiable*>*) == 0x8);
    // System.Single lastTweenInsertTime
    // Size: 0x4
    // Offset: 0x130
    float lastTweenInsertTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: readonly System.Collections.Generic.List`1<DG.Tweening.Tween> sequencedTweens
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::DG::Tweening::Tween*>*& dyn_sequencedTweens();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<DG.Tweening.Core.ABSSequentiable> _sequencedObjs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::DG::Tweening::Core::ABSSequentiable*>*& dyn__sequencedObjs();
    // Get instance field reference: System.Single lastTweenInsertTime
    [[deprecated("Use field access instead!")]] float& dyn_lastTweenInsertTime();
    // static DG.Tweening.Sequence DoPrepend(DG.Tweening.Sequence inSequence, DG.Tweening.Tween t)
    // Offset: 0x15E59E8
    static ::DG::Tweening::Sequence* DoPrepend(::DG::Tweening::Sequence* inSequence, ::DG::Tweening::Tween* t);
    // static DG.Tweening.Sequence DoInsert(DG.Tweening.Sequence inSequence, DG.Tweening.Tween t, System.Single atPosition)
    // Offset: 0x15E5AF8
    static ::DG::Tweening::Sequence* DoInsert(::DG::Tweening::Sequence* inSequence, ::DG::Tweening::Tween* t, float atPosition);
    // static DG.Tweening.Sequence DoAppendInterval(DG.Tweening.Sequence inSequence, System.Single interval)
    // Offset: 0x15E5C3C
    static ::DG::Tweening::Sequence* DoAppendInterval(::DG::Tweening::Sequence* inSequence, float interval);
    // static DG.Tweening.Sequence DoPrependInterval(DG.Tweening.Sequence inSequence, System.Single interval)
    // Offset: 0x15E5C60
    static ::DG::Tweening::Sequence* DoPrependInterval(::DG::Tweening::Sequence* inSequence, float interval);
    // static DG.Tweening.Sequence DoInsertCallback(DG.Tweening.Sequence inSequence, DG.Tweening.TweenCallback callback, System.Single atPosition)
    // Offset: 0x15E5D44
    static ::DG::Tweening::Sequence* DoInsertCallback(::DG::Tweening::Sequence* inSequence, ::DG::Tweening::TweenCallback* callback, float atPosition);
    // static System.Void Setup(DG.Tweening.Sequence s)
    // Offset: 0x15D98F8
    static void Setup(::DG::Tweening::Sequence* s);
    // static System.Boolean DoStartup(DG.Tweening.Sequence s)
    // Offset: 0x15E5F5C
    static bool DoStartup(::DG::Tweening::Sequence* s);
    // static System.Boolean DoApplyTween(DG.Tweening.Sequence s, System.Single prevPosition, System.Int32 prevCompletedLoops, System.Int32 newCompletedSteps, System.Boolean useInversePosition, DG.Tweening.Core.Enums.UpdateMode updateMode)
    // Offset: 0x15E60C4
    static bool DoApplyTween(::DG::Tweening::Sequence* s, float prevPosition, int prevCompletedLoops, int newCompletedSteps, bool useInversePosition, ::DG::Tweening::Core::Enums::UpdateMode updateMode);
    // static private System.Boolean ApplyInternalCycle(DG.Tweening.Sequence s, System.Single fromPos, System.Single toPos, DG.Tweening.Core.Enums.UpdateMode updateMode, System.Boolean useInverse, System.Boolean prevPosIsInverse, System.Boolean multiCycleStep)
    // Offset: 0x15E6590
    static bool ApplyInternalCycle(::DG::Tweening::Sequence* s, float fromPos, float toPos, ::DG::Tweening::Core::Enums::UpdateMode updateMode, bool useInverse, bool prevPosIsInverse, bool multiCycleStep);
    // static private System.Void StableSortSequencedObjs(System.Collections.Generic.List`1<DG.Tweening.Core.ABSSequentiable> list)
    // Offset: 0x15E6400
    static void StableSortSequencedObjs(::System::Collections::Generic::List_1<::DG::Tweening::Core::ABSSequentiable*>* list);
    // static private System.Boolean IsAnyCallbackSet(DG.Tweening.Sequence s)
    // Offset: 0x15E63A0
    static bool IsAnyCallbackSet(::DG::Tweening::Sequence* s);
    // System.Void .ctor()
    // Offset: 0x15E5918
    // Implemented from: DG.Tweening.Tween
    // Base method: System.Void Tween::.ctor()
    // Base method: System.Void ABSSequentiable::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Sequence* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::Sequence::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Sequence*, creationType>()));
    }
    // override System.Void Reset()
    // Offset: 0x15E5E0C
    // Implemented from: DG.Tweening.Tween
    // Base method: System.Void Tween::Reset()
    void Reset();
    // override System.Boolean Validate()
    // Offset: 0x15E5E98
    // Implemented from: DG.Tweening.Tween
    // Base method: System.Boolean Tween::Validate()
    bool Validate();
    // override System.Boolean Startup()
    // Offset: 0x15E5F58
    // Implemented from: DG.Tweening.Tween
    // Base method: System.Boolean Tween::Startup()
    bool Startup();
    // override System.Boolean ApplyTween(System.Single prevPosition, System.Int32 prevCompletedLoops, System.Int32 newCompletedSteps, System.Boolean useInversePosition, DG.Tweening.Core.Enums.UpdateMode updateMode, DG.Tweening.Core.Enums.UpdateNotice updateNotice)
    // Offset: 0x15E60BC
    // Implemented from: DG.Tweening.Tween
    // Base method: System.Boolean Tween::ApplyTween(System.Single prevPosition, System.Int32 prevCompletedLoops, System.Int32 newCompletedSteps, System.Boolean useInversePosition, DG.Tweening.Core.Enums.UpdateMode updateMode, DG.Tweening.Core.Enums.UpdateNotice updateNotice)
    bool ApplyTween(float prevPosition, int prevCompletedLoops, int newCompletedSteps, bool useInversePosition, ::DG::Tweening::Core::Enums::UpdateMode updateMode, ::DG::Tweening::Core::Enums::UpdateNotice updateNotice);
  }; // DG.Tweening.Sequence
  #pragma pack(pop)
  static check_size<sizeof(Sequence), 304 + sizeof(float)> __DG_Tweening_SequenceSizeCheck;
  static_assert(sizeof(Sequence) == 0x134);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::Sequence::DoPrepend
// Il2CppName: DoPrepend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Sequence* (*)(::DG::Tweening::Sequence*, ::DG::Tweening::Tween*)>(&DG::Tweening::Sequence::DoPrepend)> {
  static const MethodInfo* get() {
    static auto* inSequence = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Sequence*), "DoPrepend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inSequence, t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Sequence::DoInsert
// Il2CppName: DoInsert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Sequence* (*)(::DG::Tweening::Sequence*, ::DG::Tweening::Tween*, float)>(&DG::Tweening::Sequence::DoInsert)> {
  static const MethodInfo* get() {
    static auto* inSequence = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    static auto* atPosition = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Sequence*), "DoInsert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inSequence, t, atPosition});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Sequence::DoAppendInterval
// Il2CppName: DoAppendInterval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Sequence* (*)(::DG::Tweening::Sequence*, float)>(&DG::Tweening::Sequence::DoAppendInterval)> {
  static const MethodInfo* get() {
    static auto* inSequence = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    static auto* interval = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Sequence*), "DoAppendInterval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inSequence, interval});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Sequence::DoPrependInterval
// Il2CppName: DoPrependInterval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Sequence* (*)(::DG::Tweening::Sequence*, float)>(&DG::Tweening::Sequence::DoPrependInterval)> {
  static const MethodInfo* get() {
    static auto* inSequence = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    static auto* interval = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Sequence*), "DoPrependInterval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inSequence, interval});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Sequence::DoInsertCallback
// Il2CppName: DoInsertCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Sequence* (*)(::DG::Tweening::Sequence*, ::DG::Tweening::TweenCallback*, float)>(&DG::Tweening::Sequence::DoInsertCallback)> {
  static const MethodInfo* get() {
    static auto* inSequence = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("DG.Tweening", "TweenCallback")->byval_arg;
    static auto* atPosition = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Sequence*), "DoInsertCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inSequence, callback, atPosition});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Sequence::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DG::Tweening::Sequence*)>(&DG::Tweening::Sequence::Setup)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Sequence*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Sequence::DoStartup
// Il2CppName: DoStartup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DG::Tweening::Sequence*)>(&DG::Tweening::Sequence::DoStartup)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Sequence*), "DoStartup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Sequence::DoApplyTween
// Il2CppName: DoApplyTween
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DG::Tweening::Sequence*, float, int, int, bool, ::DG::Tweening::Core::Enums::UpdateMode)>(&DG::Tweening::Sequence::DoApplyTween)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    static auto* prevPosition = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* prevCompletedLoops = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newCompletedSteps = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* useInversePosition = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateMode = &::il2cpp_utils::GetClassFromName("DG.Tweening.Core.Enums", "UpdateMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Sequence*), "DoApplyTween", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, prevPosition, prevCompletedLoops, newCompletedSteps, useInversePosition, updateMode});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Sequence::ApplyInternalCycle
// Il2CppName: ApplyInternalCycle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DG::Tweening::Sequence*, float, float, ::DG::Tweening::Core::Enums::UpdateMode, bool, bool, bool)>(&DG::Tweening::Sequence::ApplyInternalCycle)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    static auto* fromPos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* toPos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* updateMode = &::il2cpp_utils::GetClassFromName("DG.Tweening.Core.Enums", "UpdateMode")->byval_arg;
    static auto* useInverse = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* prevPosIsInverse = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* multiCycleStep = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Sequence*), "ApplyInternalCycle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, fromPos, toPos, updateMode, useInverse, prevPosIsInverse, multiCycleStep});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Sequence::StableSortSequencedObjs
// Il2CppName: StableSortSequencedObjs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::DG::Tweening::Core::ABSSequentiable*>*)>(&DG::Tweening::Sequence::StableSortSequencedObjs)> {
  static const MethodInfo* get() {
    static auto* list = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "ABSSequentiable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Sequence*), "StableSortSequencedObjs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{list});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Sequence::IsAnyCallbackSet
// Il2CppName: IsAnyCallbackSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DG::Tweening::Sequence*)>(&DG::Tweening::Sequence::IsAnyCallbackSet)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Sequence*), "IsAnyCallbackSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Sequence::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DG::Tweening::Sequence::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DG::Tweening::Sequence::*)()>(&DG::Tweening::Sequence::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Sequence*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Sequence::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DG::Tweening::Sequence::*)()>(&DG::Tweening::Sequence::Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Sequence*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Sequence::Startup
// Il2CppName: Startup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DG::Tweening::Sequence::*)()>(&DG::Tweening::Sequence::Startup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Sequence*), "Startup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DG::Tweening::Sequence::ApplyTween
// Il2CppName: ApplyTween
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DG::Tweening::Sequence::*)(float, int, int, bool, ::DG::Tweening::Core::Enums::UpdateMode, ::DG::Tweening::Core::Enums::UpdateNotice)>(&DG::Tweening::Sequence::ApplyTween)> {
  static const MethodInfo* get() {
    static auto* prevPosition = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* prevCompletedLoops = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newCompletedSteps = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* useInversePosition = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateMode = &::il2cpp_utils::GetClassFromName("DG.Tweening.Core.Enums", "UpdateMode")->byval_arg;
    static auto* updateNotice = &::il2cpp_utils::GetClassFromName("DG.Tweening.Core.Enums", "UpdateNotice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::Sequence*), "ApplyTween", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prevPosition, prevCompletedLoops, newCompletedSteps, useInversePosition, updateMode, updateNotice});
  }
};
