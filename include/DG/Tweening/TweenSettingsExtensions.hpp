// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DG.Tweening.LinkBehaviour
#include "DG/Tweening/LinkBehaviour.hpp"
// Including type: DG.Tweening.LoopType
#include "DG/Tweening/LoopType.hpp"
// Including type: DG.Tweening.Ease
#include "DG/Tweening/Ease.hpp"
// Including type: DG.Tweening.UpdateType
#include "DG/Tweening/UpdateType.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: DG.Tweening.Plugins.Options.ColorOptions
#include "DG/Tweening/Plugins/Options/ColorOptions.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: DG.Tweening.Plugins.Options.VectorOptions
#include "DG/Tweening/Plugins/Options/VectorOptions.hpp"
// Including type: DG.Tweening.Plugins.Options.FloatOptions
#include "DG/Tweening/Plugins/Options/FloatOptions.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: DG.Tweening.Plugins.Options.QuaternionOptions
#include "DG/Tweening/Plugins/Options/QuaternionOptions.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: DG.Tweening.Plugins.Options.RectOptions
#include "DG/Tweening/Plugins/Options/RectOptions.hpp"
// Including type: DG.Tweening.Plugins.Options.StringOptions
#include "DG/Tweening/Plugins/Options/StringOptions.hpp"
// Including type: DG.Tweening.Plugins.Options.Vector3ArrayOptions
#include "DG/Tweening/Plugins/Options/Vector3ArrayOptions.hpp"
// Including type: DG.Tweening.Plugins.Options.PathOptions
#include "DG/Tweening/Plugins/Options/PathOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DG::Tweening
namespace DG::Tweening {
  // Forward declaring type: Tween
  class Tween;
  // Forward declaring type: EaseFunction
  class EaseFunction;
  // Forward declaring type: TweenCallback
  class TweenCallback;
  // Forward declaring type: TweenCallback`1<T>
  template<typename T>
  class TweenCallback_1;
  // Forward declaring type: TweenParams
  class TweenParams;
  // Forward declaring type: Sequence
  class Sequence;
  // Forward declaring type: Tweener
  class Tweener;
  // Skipping declaration: AxisConstraint because it is already included!
  // Skipping declaration: ScrambleMode because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: DG::Tweening::Plugins::Options
namespace DG::Tweening::Plugins::Options {
  // Skipping declaration: IPlugOptions because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ValueType because it is already included!
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: DG::Tweening::Core
namespace DG::Tweening::Core {
  // Forward declaring type: TweenerCore`3<T1, T2, TPlugOptions>
  template<typename T1, typename T2, typename TPlugOptions>
  class TweenerCore_3;
}
// Forward declaring namespace: DG::Tweening::Plugins::Core::PathCore
namespace DG::Tweening::Plugins::Core::PathCore {
  // Forward declaring type: Path
  class Path;
}
// Completed forward declares
// Type namespace: DG.Tweening
namespace DG::Tweening {
  // Forward declaring type: TweenSettingsExtensions
  class TweenSettingsExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DG::Tweening::TweenSettingsExtensions);
DEFINE_IL2CPP_ARG_TYPE(::DG::Tweening::TweenSettingsExtensions*, "DG.Tweening", "TweenSettingsExtensions");
// Type namespace: DG.Tweening
namespace DG::Tweening {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: DG.Tweening.TweenSettingsExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class TweenSettingsExtensions : public ::Il2CppObject {
    public:
    // static public T SetAutoKill(T t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetAutoKill(T t) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetAutoKill");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetAutoKill", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t);
    }
    // static public T SetAutoKill(T t, System.Boolean autoKillOnCompletion)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetAutoKill(T t, bool autoKillOnCompletion) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetAutoKill");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetAutoKill", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(autoKillOnCompletion)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, autoKillOnCompletion);
    }
    // static public T SetId(T t, System.Object objectId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetId(T t, ::Il2CppObject* objectId) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetId");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetId", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(objectId)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, objectId);
    }
    // static public T SetId(T t, System.String stringId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetId(T t, ::StringW stringId) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetId");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetId", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(stringId)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, stringId);
    }
    // static public T SetId(T t, System.Int32 intId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetId(T t, int intId) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetId");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetId", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(intId)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, intId);
    }
    // static public T SetLink(T t, UnityEngine.GameObject gameObject)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetLink(T t, ::UnityEngine::GameObject* gameObject) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetLink");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetLink", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(gameObject)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, gameObject);
    }
    // static public T SetLink(T t, UnityEngine.GameObject gameObject, DG.Tweening.LinkBehaviour behaviour)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetLink(T t, ::UnityEngine::GameObject* gameObject, ::DG::Tweening::LinkBehaviour behaviour) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetLink");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetLink", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(behaviour)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, gameObject, behaviour);
    }
    // static public T SetTarget(T t, System.Object target)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetTarget(T t, ::Il2CppObject* target) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetTarget");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetTarget", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(target)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, target);
    }
    // static public T SetLoops(T t, System.Int32 loops)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetLoops(T t, int loops) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetLoops");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetLoops", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(loops)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, loops);
    }
    // static public T SetLoops(T t, System.Int32 loops, DG.Tweening.LoopType loopType)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetLoops(T t, int loops, ::DG::Tweening::LoopType loopType) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetLoops");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetLoops", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(loops), ::il2cpp_utils::ExtractType(loopType)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, loops, loopType);
    }
    // static public T SetEase(T t, DG.Tweening.Ease ease)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetEase(T t, ::DG::Tweening::Ease ease) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetEase");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetEase", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(ease)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, ease);
    }
    // static public T SetEase(T t, DG.Tweening.Ease ease, System.Single overshoot)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetEase(T t, ::DG::Tweening::Ease ease, float overshoot) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetEase");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetEase", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(ease), ::il2cpp_utils::ExtractType(overshoot)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, ease, overshoot);
    }
    // static public T SetEase(T t, DG.Tweening.Ease ease, System.Single amplitude, System.Single period)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetEase(T t, ::DG::Tweening::Ease ease, float amplitude, float period) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetEase");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetEase", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(ease), ::il2cpp_utils::ExtractType(amplitude), ::il2cpp_utils::ExtractType(period)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, ease, amplitude, period);
    }
    // static public T SetEase(T t, UnityEngine.AnimationCurve animCurve)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetEase(T t, ::UnityEngine::AnimationCurve* animCurve) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetEase");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetEase", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(animCurve)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, animCurve);
    }
    // static public T SetEase(T t, DG.Tweening.EaseFunction customEase)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetEase(T t, ::DG::Tweening::EaseFunction* customEase) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetEase");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetEase", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(customEase)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, customEase);
    }
    // static public T SetRecyclable(T t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetRecyclable(T t) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetRecyclable");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetRecyclable", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t);
    }
    // static public T SetRecyclable(T t, System.Boolean recyclable)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetRecyclable(T t, bool recyclable) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetRecyclable");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetRecyclable", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(recyclable)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, recyclable);
    }
    // static public T SetUpdate(T t, System.Boolean isIndependentUpdate)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetUpdate(T t, bool isIndependentUpdate) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetUpdate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetUpdate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(isIndependentUpdate)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, isIndependentUpdate);
    }
    // static public T SetUpdate(T t, DG.Tweening.UpdateType updateType)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetUpdate(T t, ::DG::Tweening::UpdateType updateType) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetUpdate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetUpdate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(updateType)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, updateType);
    }
    // static public T SetUpdate(T t, DG.Tweening.UpdateType updateType, System.Boolean isIndependentUpdate)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetUpdate(T t, ::DG::Tweening::UpdateType updateType, bool isIndependentUpdate) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetUpdate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetUpdate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(updateType), ::il2cpp_utils::ExtractType(isIndependentUpdate)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, updateType, isIndependentUpdate);
    }
    // static public T OnStart(T t, DG.Tweening.TweenCallback action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T OnStart(T t, ::DG::Tweening::TweenCallback* action) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::OnStart");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "OnStart", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(action)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, action);
    }
    // static public T OnPlay(T t, DG.Tweening.TweenCallback action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T OnPlay(T t, ::DG::Tweening::TweenCallback* action) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::OnPlay");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "OnPlay", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(action)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, action);
    }
    // static public T OnPause(T t, DG.Tweening.TweenCallback action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T OnPause(T t, ::DG::Tweening::TweenCallback* action) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::OnPause");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "OnPause", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(action)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, action);
    }
    // static public T OnRewind(T t, DG.Tweening.TweenCallback action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T OnRewind(T t, ::DG::Tweening::TweenCallback* action) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::OnRewind");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "OnRewind", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(action)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, action);
    }
    // static public T OnUpdate(T t, DG.Tweening.TweenCallback action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T OnUpdate(T t, ::DG::Tweening::TweenCallback* action) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::OnUpdate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "OnUpdate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(action)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, action);
    }
    // static public T OnStepComplete(T t, DG.Tweening.TweenCallback action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T OnStepComplete(T t, ::DG::Tweening::TweenCallback* action) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::OnStepComplete");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "OnStepComplete", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(action)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, action);
    }
    // static public T OnComplete(T t, DG.Tweening.TweenCallback action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T OnComplete(T t, ::DG::Tweening::TweenCallback* action) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::OnComplete");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "OnComplete", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(action)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, action);
    }
    // static public T OnKill(T t, DG.Tweening.TweenCallback action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T OnKill(T t, ::DG::Tweening::TweenCallback* action) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::OnKill");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "OnKill", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(action)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, action);
    }
    // static public T OnWaypointChange(T t, DG.Tweening.TweenCallback`1<System.Int32> action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T OnWaypointChange(T t, ::DG::Tweening::TweenCallback_1<int>* action) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::OnWaypointChange");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "OnWaypointChange", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(action)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, action);
    }
    // static public T SetAs(T t, DG.Tweening.Tween asTween)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetAs(T t, ::DG::Tweening::Tween* asTween) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetAs");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetAs", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(asTween)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, asTween);
    }
    // static public T SetAs(T t, DG.Tweening.TweenParams tweenParams)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetAs(T t, ::DG::Tweening::TweenParams* tweenParams) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetAs");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetAs", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(tweenParams)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, tweenParams);
    }
    // static public DG.Tweening.Sequence Append(DG.Tweening.Sequence s, DG.Tweening.Tween t)
    // Offset: 0x15A90F8
    static ::DG::Tweening::Sequence* Append(::DG::Tweening::Sequence* s, ::DG::Tweening::Tween* t);
    // static public DG.Tweening.Sequence Prepend(DG.Tweening.Sequence s, DG.Tweening.Tween t)
    // Offset: 0x15B5BB4
    static ::DG::Tweening::Sequence* Prepend(::DG::Tweening::Sequence* s, ::DG::Tweening::Tween* t);
    // static public DG.Tweening.Sequence Join(DG.Tweening.Sequence s, DG.Tweening.Tween t)
    // Offset: 0x15A9150
    static ::DG::Tweening::Sequence* Join(::DG::Tweening::Sequence* s, ::DG::Tweening::Tween* t);
    // static public DG.Tweening.Sequence Insert(DG.Tweening.Sequence s, System.Single atPosition, DG.Tweening.Tween t)
    // Offset: 0x15B5C08
    static ::DG::Tweening::Sequence* Insert(::DG::Tweening::Sequence* s, float atPosition, ::DG::Tweening::Tween* t);
    // static public DG.Tweening.Sequence AppendInterval(DG.Tweening.Sequence s, System.Single interval)
    // Offset: 0x15B5C5C
    static ::DG::Tweening::Sequence* AppendInterval(::DG::Tweening::Sequence* s, float interval);
    // static public DG.Tweening.Sequence PrependInterval(DG.Tweening.Sequence s, System.Single interval)
    // Offset: 0x15B5C9C
    static ::DG::Tweening::Sequence* PrependInterval(::DG::Tweening::Sequence* s, float interval);
    // static public DG.Tweening.Sequence AppendCallback(DG.Tweening.Sequence s, DG.Tweening.TweenCallback callback)
    // Offset: 0x15B5CDC
    static ::DG::Tweening::Sequence* AppendCallback(::DG::Tweening::Sequence* s, ::DG::Tweening::TweenCallback* callback);
    // static public DG.Tweening.Sequence PrependCallback(DG.Tweening.Sequence s, DG.Tweening.TweenCallback callback)
    // Offset: 0x15B5D24
    static ::DG::Tweening::Sequence* PrependCallback(::DG::Tweening::Sequence* s, ::DG::Tweening::TweenCallback* callback);
    // static public DG.Tweening.Sequence InsertCallback(DG.Tweening.Sequence s, System.Single atPosition, DG.Tweening.TweenCallback callback)
    // Offset: 0x15B5D6C
    static ::DG::Tweening::Sequence* InsertCallback(::DG::Tweening::Sequence* s, float atPosition, ::DG::Tweening::TweenCallback* callback);
    // static public T From(T t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T From(T t) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tweener*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::From");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "From", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t);
    }
    // static public T From(T t, System.Boolean isRelative)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T From(T t, bool isRelative) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tweener*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::From");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "From", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(isRelative)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, isRelative);
    }
    // static public DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> From(DG.Tweening.Core.TweenerCore`3<T1,T2,TPlugOptions> t, T2 fromValue, System.Boolean setImmediately)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class TPlugOptions>
    static ::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* From(::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>* t, T2 fromValue, bool setImmediately) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TPlugOptions>, ::DG::Tweening::Plugins::Options::IPlugOptions> && std::is_convertible_v<TPlugOptions, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::From");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "From", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(fromValue), ::il2cpp_utils::ExtractType(setImmediately)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPlugOptions>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::DG::Tweening::Core::TweenerCore_3<T1, T2, TPlugOptions>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, fromValue, setImmediately);
    }
    // static public DG.Tweening.Core.TweenerCore`3<UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions> From(DG.Tweening.Core.TweenerCore`3<UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions> t, System.Single fromAlphaValue, System.Boolean setImmediately)
    // Offset: 0x15B5DB0
    static ::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Color, ::UnityEngine::Color, ::DG::Tweening::Plugins::Options::ColorOptions>* From(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Color, ::UnityEngine::Color, ::DG::Tweening::Plugins::Options::ColorOptions>* t, float fromAlphaValue, bool setImmediately);
    // static public DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions> From(DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions> t, System.Single fromValue, System.Boolean setImmediately)
    // Offset: 0x15B5E74
    static ::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::UnityEngine::Vector3, ::DG::Tweening::Plugins::Options::VectorOptions>* From(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::UnityEngine::Vector3, ::DG::Tweening::Plugins::Options::VectorOptions>* t, float fromValue, bool setImmediately);
    // static public T SetDelay(T t, System.Single delay)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetDelay(T t, float delay) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetDelay");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetDelay", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(delay)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, delay);
    }
    // static public T SetRelative(T t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetRelative(T t) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetRelative");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetRelative", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t);
    }
    // static public T SetRelative(T t, System.Boolean isRelative)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetRelative(T t, bool isRelative) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetRelative");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetRelative", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(isRelative)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, isRelative);
    }
    // static public T SetSpeedBased(T t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetSpeedBased(T t) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetSpeedBased");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetSpeedBased", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t);
    }
    // static public T SetSpeedBased(T t, System.Boolean isSpeedBased)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T SetSpeedBased(T t, bool isSpeedBased) {
      static_assert(std::is_convertible_v<T, ::DG::Tweening::Tween*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::DG::Tweening::TweenSettingsExtensions::SetSpeedBased");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("DG.Tweening", "TweenSettingsExtensions", "SetSpeedBased", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(isSpeedBased)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, t, isSpeedBased);
    }
    // static public DG.Tweening.Tweener SetOptions(DG.Tweening.Core.TweenerCore`3<System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions> t, System.Boolean snapping)
    // Offset: 0x15B5F14
    static ::DG::Tweening::Tweener* SetOptions(::DG::Tweening::Core::TweenerCore_3<float, float, ::DG::Tweening::Plugins::Options::FloatOptions>* t, bool snapping);
    // static public DG.Tweening.Tweener SetOptions(DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions> t, System.Boolean snapping)
    // Offset: 0x15B5F2C
    static ::DG::Tweening::Tweener* SetOptions(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector2, ::UnityEngine::Vector2, ::DG::Tweening::Plugins::Options::VectorOptions>* t, bool snapping);
    // static public DG.Tweening.Tweener SetOptions(DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions> t, DG.Tweening.AxisConstraint axisConstraint, System.Boolean snapping)
    // Offset: 0x15B5F44
    static ::DG::Tweening::Tweener* SetOptions(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector2, ::UnityEngine::Vector2, ::DG::Tweening::Plugins::Options::VectorOptions>* t, ::DG::Tweening::AxisConstraint axisConstraint, bool snapping);
    // static public DG.Tweening.Tweener SetOptions(DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions> t, System.Boolean snapping)
    // Offset: 0x15A5668
    static ::DG::Tweening::Tweener* SetOptions(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::UnityEngine::Vector3, ::DG::Tweening::Plugins::Options::VectorOptions>* t, bool snapping);
    // static public DG.Tweening.Tweener SetOptions(DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions> t, DG.Tweening.AxisConstraint axisConstraint, System.Boolean snapping)
    // Offset: 0x15A5844
    static ::DG::Tweening::Tweener* SetOptions(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::UnityEngine::Vector3, ::DG::Tweening::Plugins::Options::VectorOptions>* t, ::DG::Tweening::AxisConstraint axisConstraint, bool snapping);
    // static public DG.Tweening.Tweener SetOptions(DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector4,UnityEngine.Vector4,DG.Tweening.Plugins.Options.VectorOptions> t, System.Boolean snapping)
    // Offset: 0x15B5F60
    static ::DG::Tweening::Tweener* SetOptions(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector4, ::UnityEngine::Vector4, ::DG::Tweening::Plugins::Options::VectorOptions>* t, bool snapping);
    // static public DG.Tweening.Tweener SetOptions(DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector4,UnityEngine.Vector4,DG.Tweening.Plugins.Options.VectorOptions> t, DG.Tweening.AxisConstraint axisConstraint, System.Boolean snapping)
    // Offset: 0x15B5F78
    static ::DG::Tweening::Tweener* SetOptions(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector4, ::UnityEngine::Vector4, ::DG::Tweening::Plugins::Options::VectorOptions>* t, ::DG::Tweening::AxisConstraint axisConstraint, bool snapping);
    // static public DG.Tweening.Tweener SetOptions(DG.Tweening.Core.TweenerCore`3<UnityEngine.Quaternion,UnityEngine.Vector3,DG.Tweening.Plugins.Options.QuaternionOptions> t, System.Boolean useShortest360Route)
    // Offset: 0x15B5F94
    static ::DG::Tweening::Tweener* SetOptions(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Quaternion, ::UnityEngine::Vector3, ::DG::Tweening::Plugins::Options::QuaternionOptions>* t, bool useShortest360Route);
    // static public DG.Tweening.Tweener SetOptions(DG.Tweening.Core.TweenerCore`3<UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions> t, System.Boolean alphaOnly)
    // Offset: 0x15B5FB0
    static ::DG::Tweening::Tweener* SetOptions(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Color, ::UnityEngine::Color, ::DG::Tweening::Plugins::Options::ColorOptions>* t, bool alphaOnly);
    // static public DG.Tweening.Tweener SetOptions(DG.Tweening.Core.TweenerCore`3<UnityEngine.Rect,UnityEngine.Rect,DG.Tweening.Plugins.Options.RectOptions> t, System.Boolean snapping)
    // Offset: 0x15B5FC8
    static ::DG::Tweening::Tweener* SetOptions(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Rect, ::UnityEngine::Rect, ::DG::Tweening::Plugins::Options::RectOptions>* t, bool snapping);
    // static public DG.Tweening.Tweener SetOptions(DG.Tweening.Core.TweenerCore`3<System.String,System.String,DG.Tweening.Plugins.Options.StringOptions> t, System.Boolean richTextEnabled, DG.Tweening.ScrambleMode scrambleMode, System.String scrambleChars)
    // Offset: 0x15B5FE0
    static ::DG::Tweening::Tweener* SetOptions(::DG::Tweening::Core::TweenerCore_3<::StringW, ::StringW, ::DG::Tweening::Plugins::Options::StringOptions>* t, bool richTextEnabled, ::DG::Tweening::ScrambleMode scrambleMode, ::StringW scrambleChars);
    // static public DG.Tweening.Tweener SetOptions(DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector3,UnityEngine.Vector3[],DG.Tweening.Plugins.Options.Vector3ArrayOptions> t, System.Boolean snapping)
    // Offset: 0x15A7784
    static ::DG::Tweening::Tweener* SetOptions(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::ArrayW<::UnityEngine::Vector3>, ::DG::Tweening::Plugins::Options::Vector3ArrayOptions>* t, bool snapping);
    // static public DG.Tweening.Tweener SetOptions(DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector3,UnityEngine.Vector3[],DG.Tweening.Plugins.Options.Vector3ArrayOptions> t, DG.Tweening.AxisConstraint axisConstraint, System.Boolean snapping)
    // Offset: 0x15B60CC
    static ::DG::Tweening::Tweener* SetOptions(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::ArrayW<::UnityEngine::Vector3>, ::DG::Tweening::Plugins::Options::Vector3ArrayOptions>* t, ::DG::Tweening::AxisConstraint axisConstraint, bool snapping);
    // static public DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions> SetOptions(DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions> t, DG.Tweening.AxisConstraint lockPosition, DG.Tweening.AxisConstraint lockRotation)
    // Offset: 0x15B60E8
    static ::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>* SetOptions(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>* t, ::DG::Tweening::AxisConstraint lockPosition, ::DG::Tweening::AxisConstraint lockRotation);
    // static public DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions> SetOptions(DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions> t, System.Boolean closePath, DG.Tweening.AxisConstraint lockPosition, DG.Tweening.AxisConstraint lockRotation)
    // Offset: 0x15B6104
    static ::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>* SetOptions(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>* t, bool closePath, ::DG::Tweening::AxisConstraint lockPosition, ::DG::Tweening::AxisConstraint lockRotation);
    // static public DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions> SetLookAt(DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions> t, UnityEngine.Vector3 lookAtPosition, System.Nullable`1<UnityEngine.Vector3> forwardDirection, System.Nullable`1<UnityEngine.Vector3> up)
    // Offset: 0x15B6124
    static ::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>* SetLookAt(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>* t, ::UnityEngine::Vector3 lookAtPosition, ::System::Nullable_1<::UnityEngine::Vector3> forwardDirection, ::System::Nullable_1<::UnityEngine::Vector3> up);
    // static public DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions> SetLookAt(DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions> t, UnityEngine.Transform lookAtTransform, System.Nullable`1<UnityEngine.Vector3> forwardDirection, System.Nullable`1<UnityEngine.Vector3> up)
    // Offset: 0x15B63A4
    static ::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>* SetLookAt(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>* t, ::UnityEngine::Transform* lookAtTransform, ::System::Nullable_1<::UnityEngine::Vector3> forwardDirection, ::System::Nullable_1<::UnityEngine::Vector3> up);
    // static public DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions> SetLookAt(DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions> t, System.Single lookAhead, System.Nullable`1<UnityEngine.Vector3> forwardDirection, System.Nullable`1<UnityEngine.Vector3> up)
    // Offset: 0x15B63F4
    static ::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>* SetLookAt(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>* t, float lookAhead, ::System::Nullable_1<::UnityEngine::Vector3> forwardDirection, ::System::Nullable_1<::UnityEngine::Vector3> up);
    // static private System.Void SetPathForwardDirection(DG.Tweening.Core.TweenerCore`3<UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions> t, System.Nullable`1<UnityEngine.Vector3> forwardDirection, System.Nullable`1<UnityEngine.Vector3> up)
    // Offset: 0x15B616C
    static void SetPathForwardDirection(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>* t, ::System::Nullable_1<::UnityEngine::Vector3> forwardDirection, ::System::Nullable_1<::UnityEngine::Vector3> up);
  }; // DG.Tweening.TweenSettingsExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetAutoKill
// Il2CppName: SetAutoKill
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetAutoKill
// Il2CppName: SetAutoKill
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetId
// Il2CppName: SetId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetId
// Il2CppName: SetId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetId
// Il2CppName: SetId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetLink
// Il2CppName: SetLink
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetLink
// Il2CppName: SetLink
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetTarget
// Il2CppName: SetTarget
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetLoops
// Il2CppName: SetLoops
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetLoops
// Il2CppName: SetLoops
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetEase
// Il2CppName: SetEase
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetEase
// Il2CppName: SetEase
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetEase
// Il2CppName: SetEase
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetEase
// Il2CppName: SetEase
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetEase
// Il2CppName: SetEase
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetRecyclable
// Il2CppName: SetRecyclable
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetRecyclable
// Il2CppName: SetRecyclable
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetUpdate
// Il2CppName: SetUpdate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetUpdate
// Il2CppName: SetUpdate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetUpdate
// Il2CppName: SetUpdate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::OnStart
// Il2CppName: OnStart
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::OnPlay
// Il2CppName: OnPlay
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::OnPause
// Il2CppName: OnPause
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::OnRewind
// Il2CppName: OnRewind
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::OnUpdate
// Il2CppName: OnUpdate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::OnStepComplete
// Il2CppName: OnStepComplete
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::OnComplete
// Il2CppName: OnComplete
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::OnKill
// Il2CppName: OnKill
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::OnWaypointChange
// Il2CppName: OnWaypointChange
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetAs
// Il2CppName: SetAs
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetAs
// Il2CppName: SetAs
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Sequence* (*)(::DG::Tweening::Sequence*, ::DG::Tweening::Tween*)>(&DG::Tweening::TweenSettingsExtensions::Append)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::Prepend
// Il2CppName: Prepend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Sequence* (*)(::DG::Tweening::Sequence*, ::DG::Tweening::Tween*)>(&DG::Tweening::TweenSettingsExtensions::Prepend)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "Prepend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Sequence* (*)(::DG::Tweening::Sequence*, ::DG::Tweening::Tween*)>(&DG::Tweening::TweenSettingsExtensions::Join)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Sequence* (*)(::DG::Tweening::Sequence*, float, ::DG::Tweening::Tween*)>(&DG::Tweening::TweenSettingsExtensions::Insert)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    static auto* atPosition = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Tween")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, atPosition, t});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::AppendInterval
// Il2CppName: AppendInterval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Sequence* (*)(::DG::Tweening::Sequence*, float)>(&DG::Tweening::TweenSettingsExtensions::AppendInterval)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    static auto* interval = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "AppendInterval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, interval});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::PrependInterval
// Il2CppName: PrependInterval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Sequence* (*)(::DG::Tweening::Sequence*, float)>(&DG::Tweening::TweenSettingsExtensions::PrependInterval)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    static auto* interval = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "PrependInterval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, interval});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::AppendCallback
// Il2CppName: AppendCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Sequence* (*)(::DG::Tweening::Sequence*, ::DG::Tweening::TweenCallback*)>(&DG::Tweening::TweenSettingsExtensions::AppendCallback)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("DG.Tweening", "TweenCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "AppendCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, callback});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::PrependCallback
// Il2CppName: PrependCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Sequence* (*)(::DG::Tweening::Sequence*, ::DG::Tweening::TweenCallback*)>(&DG::Tweening::TweenSettingsExtensions::PrependCallback)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("DG.Tweening", "TweenCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "PrependCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, callback});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::InsertCallback
// Il2CppName: InsertCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Sequence* (*)(::DG::Tweening::Sequence*, float, ::DG::Tweening::TweenCallback*)>(&DG::Tweening::TweenSettingsExtensions::InsertCallback)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("DG.Tweening", "Sequence")->byval_arg;
    static auto* atPosition = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("DG.Tweening", "TweenCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "InsertCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, atPosition, callback});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::From
// Il2CppName: From
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::From
// Il2CppName: From
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::From
// Il2CppName: From
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::From
// Il2CppName: From
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Color, ::UnityEngine::Color, ::DG::Tweening::Plugins::Options::ColorOptions>* (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Color, ::UnityEngine::Color, ::DG::Tweening::Plugins::Options::ColorOptions>*, float, bool)>(&DG::Tweening::TweenSettingsExtensions::From)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "ColorOptions")})->byval_arg;
    static auto* fromAlphaValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* setImmediately = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "From", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, fromAlphaValue, setImmediately});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::From
// Il2CppName: From
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::UnityEngine::Vector3, ::DG::Tweening::Plugins::Options::VectorOptions>* (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::UnityEngine::Vector3, ::DG::Tweening::Plugins::Options::VectorOptions>*, float, bool)>(&DG::Tweening::TweenSettingsExtensions::From)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "VectorOptions")})->byval_arg;
    static auto* fromValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* setImmediately = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "From", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, fromValue, setImmediately});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetDelay
// Il2CppName: SetDelay
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetRelative
// Il2CppName: SetRelative
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetRelative
// Il2CppName: SetRelative
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetSpeedBased
// Il2CppName: SetSpeedBased
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetSpeedBased
// Il2CppName: SetSpeedBased
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetOptions
// Il2CppName: SetOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (*)(::DG::Tweening::Core::TweenerCore_3<float, float, ::DG::Tweening::Plugins::Options::FloatOptions>*, bool)>(&DG::Tweening::TweenSettingsExtensions::SetOptions)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single"), ::il2cpp_utils::GetClassFromName("System", "Single"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "FloatOptions")})->byval_arg;
    static auto* snapping = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, snapping});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetOptions
// Il2CppName: SetOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector2, ::UnityEngine::Vector2, ::DG::Tweening::Plugins::Options::VectorOptions>*, bool)>(&DG::Tweening::TweenSettingsExtensions::SetOptions)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "VectorOptions")})->byval_arg;
    static auto* snapping = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, snapping});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetOptions
// Il2CppName: SetOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector2, ::UnityEngine::Vector2, ::DG::Tweening::Plugins::Options::VectorOptions>*, ::DG::Tweening::AxisConstraint, bool)>(&DG::Tweening::TweenSettingsExtensions::SetOptions)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "VectorOptions")})->byval_arg;
    static auto* axisConstraint = &::il2cpp_utils::GetClassFromName("DG.Tweening", "AxisConstraint")->byval_arg;
    static auto* snapping = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, axisConstraint, snapping});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetOptions
// Il2CppName: SetOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::UnityEngine::Vector3, ::DG::Tweening::Plugins::Options::VectorOptions>*, bool)>(&DG::Tweening::TweenSettingsExtensions::SetOptions)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "VectorOptions")})->byval_arg;
    static auto* snapping = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, snapping});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetOptions
// Il2CppName: SetOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::UnityEngine::Vector3, ::DG::Tweening::Plugins::Options::VectorOptions>*, ::DG::Tweening::AxisConstraint, bool)>(&DG::Tweening::TweenSettingsExtensions::SetOptions)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "VectorOptions")})->byval_arg;
    static auto* axisConstraint = &::il2cpp_utils::GetClassFromName("DG.Tweening", "AxisConstraint")->byval_arg;
    static auto* snapping = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, axisConstraint, snapping});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetOptions
// Il2CppName: SetOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector4, ::UnityEngine::Vector4, ::DG::Tweening::Plugins::Options::VectorOptions>*, bool)>(&DG::Tweening::TweenSettingsExtensions::SetOptions)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "VectorOptions")})->byval_arg;
    static auto* snapping = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, snapping});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetOptions
// Il2CppName: SetOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector4, ::UnityEngine::Vector4, ::DG::Tweening::Plugins::Options::VectorOptions>*, ::DG::Tweening::AxisConstraint, bool)>(&DG::Tweening::TweenSettingsExtensions::SetOptions)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "VectorOptions")})->byval_arg;
    static auto* axisConstraint = &::il2cpp_utils::GetClassFromName("DG.Tweening", "AxisConstraint")->byval_arg;
    static auto* snapping = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, axisConstraint, snapping});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetOptions
// Il2CppName: SetOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Quaternion, ::UnityEngine::Vector3, ::DG::Tweening::Plugins::Options::QuaternionOptions>*, bool)>(&DG::Tweening::TweenSettingsExtensions::SetOptions)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "QuaternionOptions")})->byval_arg;
    static auto* useShortest360Route = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, useShortest360Route});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetOptions
// Il2CppName: SetOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Color, ::UnityEngine::Color, ::DG::Tweening::Plugins::Options::ColorOptions>*, bool)>(&DG::Tweening::TweenSettingsExtensions::SetOptions)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "ColorOptions")})->byval_arg;
    static auto* alphaOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, alphaOnly});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetOptions
// Il2CppName: SetOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Rect, ::UnityEngine::Rect, ::DG::Tweening::Plugins::Options::RectOptions>*, bool)>(&DG::Tweening::TweenSettingsExtensions::SetOptions)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Rect"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Rect"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "RectOptions")})->byval_arg;
    static auto* snapping = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, snapping});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetOptions
// Il2CppName: SetOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (*)(::DG::Tweening::Core::TweenerCore_3<::StringW, ::StringW, ::DG::Tweening::Plugins::Options::StringOptions>*, bool, ::DG::Tweening::ScrambleMode, ::StringW)>(&DG::Tweening::TweenSettingsExtensions::SetOptions)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "StringOptions")})->byval_arg;
    static auto* richTextEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* scrambleMode = &::il2cpp_utils::GetClassFromName("DG.Tweening", "ScrambleMode")->byval_arg;
    static auto* scrambleChars = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, richTextEnabled, scrambleMode, scrambleChars});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetOptions
// Il2CppName: SetOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::ArrayW<::UnityEngine::Vector3>, ::DG::Tweening::Plugins::Options::Vector3ArrayOptions>*, bool)>(&DG::Tweening::TweenSettingsExtensions::SetOptions)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "Vector3ArrayOptions")})->byval_arg;
    static auto* snapping = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, snapping});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetOptions
// Il2CppName: SetOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Tweener* (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::ArrayW<::UnityEngine::Vector3>, ::DG::Tweening::Plugins::Options::Vector3ArrayOptions>*, ::DG::Tweening::AxisConstraint, bool)>(&DG::Tweening::TweenSettingsExtensions::SetOptions)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "Vector3ArrayOptions")})->byval_arg;
    static auto* axisConstraint = &::il2cpp_utils::GetClassFromName("DG.Tweening", "AxisConstraint")->byval_arg;
    static auto* snapping = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, axisConstraint, snapping});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetOptions
// Il2CppName: SetOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>* (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>*, ::DG::Tweening::AxisConstraint, ::DG::Tweening::AxisConstraint)>(&DG::Tweening::TweenSettingsExtensions::SetOptions)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Core.PathCore", "Path"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "PathOptions")})->byval_arg;
    static auto* lockPosition = &::il2cpp_utils::GetClassFromName("DG.Tweening", "AxisConstraint")->byval_arg;
    static auto* lockRotation = &::il2cpp_utils::GetClassFromName("DG.Tweening", "AxisConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, lockPosition, lockRotation});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetOptions
// Il2CppName: SetOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>* (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>*, bool, ::DG::Tweening::AxisConstraint, ::DG::Tweening::AxisConstraint)>(&DG::Tweening::TweenSettingsExtensions::SetOptions)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Core.PathCore", "Path"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "PathOptions")})->byval_arg;
    static auto* closePath = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* lockPosition = &::il2cpp_utils::GetClassFromName("DG.Tweening", "AxisConstraint")->byval_arg;
    static auto* lockRotation = &::il2cpp_utils::GetClassFromName("DG.Tweening", "AxisConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, closePath, lockPosition, lockRotation});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetLookAt
// Il2CppName: SetLookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>* (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>*, ::UnityEngine::Vector3, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Vector3>)>(&DG::Tweening::TweenSettingsExtensions::SetLookAt)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Core.PathCore", "Path"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "PathOptions")})->byval_arg;
    static auto* lookAtPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* forwardDirection = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* up = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetLookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, lookAtPosition, forwardDirection, up});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetLookAt
// Il2CppName: SetLookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>* (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>*, ::UnityEngine::Transform*, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Vector3>)>(&DG::Tweening::TweenSettingsExtensions::SetLookAt)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Core.PathCore", "Path"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "PathOptions")})->byval_arg;
    static auto* lookAtTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* forwardDirection = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* up = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetLookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, lookAtTransform, forwardDirection, up});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetLookAt
// Il2CppName: SetLookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>* (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>*, float, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Vector3>)>(&DG::Tweening::TweenSettingsExtensions::SetLookAt)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Core.PathCore", "Path"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "PathOptions")})->byval_arg;
    static auto* lookAhead = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* forwardDirection = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* up = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetLookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, lookAhead, forwardDirection, up});
  }
};
// Writing MetadataGetter for method: DG::Tweening::TweenSettingsExtensions::SetPathForwardDirection
// Il2CppName: SetPathForwardDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DG::Tweening::Core::TweenerCore_3<::UnityEngine::Vector3, ::DG::Tweening::Plugins::Core::PathCore::Path*, ::DG::Tweening::Plugins::Options::PathOptions>*, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Vector3>)>(&DG::Tweening::TweenSettingsExtensions::SetPathForwardDirection)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("DG.Tweening.Core", "TweenerCore`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Core.PathCore", "Path"), ::il2cpp_utils::GetClassFromName("DG.Tweening.Plugins.Options", "PathOptions")})->byval_arg;
    static auto* forwardDirection = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* up = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DG::Tweening::TweenSettingsExtensions*), "SetPathForwardDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, forwardDirection, up});
  }
};
