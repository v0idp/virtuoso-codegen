// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: OggVorbis.NativeErrorCode
#include "OggVorbis/NativeErrorCode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: OggVorbis
namespace OggVorbis {
  // Forward declaring type: NativeErrorException
  class NativeErrorException;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbis::NativeErrorException);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbis::NativeErrorException*, "OggVorbis", "NativeErrorException");
// Type namespace: OggVorbis
namespace OggVorbis {
  // Size: 0x8C
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbis.NativeErrorException
  // [TokenAttribute] Offset: FFFFFFFF
  class NativeErrorException : public ::System::Exception {
    public:
    public:
    // private readonly OggVorbis.NativeErrorCode <NativeErrorCode>k__BackingField
    // Size: 0x4
    // Offset: 0x88
    ::OggVorbis::NativeErrorCode NativeErrorCode;
    // Field size check
    static_assert(sizeof(::OggVorbis::NativeErrorCode) == 0x4);
    public:
    // Creating conversion operator: operator ::OggVorbis::NativeErrorCode
    constexpr operator ::OggVorbis::NativeErrorCode() const noexcept {
      return NativeErrorCode;
    }
    // Get instance field reference: private readonly OggVorbis.NativeErrorCode <NativeErrorCode>k__BackingField
    [[deprecated("Use field access instead!")]] ::OggVorbis::NativeErrorCode& dyn_$NativeErrorCode$k__BackingField();
    // public OggVorbis.NativeErrorCode get_NativeErrorCode()
    // Offset: 0x1909308
    ::OggVorbis::NativeErrorCode get_NativeErrorCode();
    // private System.Void .ctor(OggVorbis.NativeErrorCode nativeErrorCode)
    // Offset: 0x1909310
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NativeErrorException* New_ctor(::OggVorbis::NativeErrorCode nativeErrorCode) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbis::NativeErrorException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NativeErrorException*, creationType>(nativeErrorCode)));
    }
    // static System.Void ThrowExceptionIfNecessary(System.Int32 returnValue)
    // Offset: 0x1909444
    static void ThrowExceptionIfNecessary(int returnValue);
    // public override System.String ToString()
    // Offset: 0x19093E0
    // Implemented from: System.Exception
    // Base method: System.String Exception::ToString()
    ::StringW ToString();
  }; // OggVorbis.NativeErrorException
  #pragma pack(pop)
  static check_size<sizeof(NativeErrorException), 136 + sizeof(::OggVorbis::NativeErrorCode)> __OggVorbis_NativeErrorExceptionSizeCheck;
  static_assert(sizeof(NativeErrorException) == 0x8C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbis::NativeErrorException::get_NativeErrorCode
// Il2CppName: get_NativeErrorCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OggVorbis::NativeErrorCode (OggVorbis::NativeErrorException::*)()>(&OggVorbis::NativeErrorException::get_NativeErrorCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbis::NativeErrorException*), "get_NativeErrorCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbis::NativeErrorException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OggVorbis::NativeErrorException::ThrowExceptionIfNecessary
// Il2CppName: ThrowExceptionIfNecessary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&OggVorbis::NativeErrorException::ThrowExceptionIfNecessary)> {
  static const MethodInfo* get() {
    static auto* returnValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbis::NativeErrorException*), "ThrowExceptionIfNecessary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{returnValue});
  }
};
// Writing MetadataGetter for method: OggVorbis::NativeErrorException::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (OggVorbis::NativeErrorException::*)()>(&OggVorbis::NativeErrorException::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbis::NativeErrorException*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
