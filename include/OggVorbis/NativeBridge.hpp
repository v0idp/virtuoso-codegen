// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: OggVorbis
namespace OggVorbis {
  // Forward declaring type: NativeBridge
  class NativeBridge;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbis::NativeBridge);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbis::NativeBridge*, "OggVorbis", "NativeBridge");
// Type namespace: OggVorbis
namespace OggVorbis {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbis.NativeBridge
  // [TokenAttribute] Offset: FFFFFFFF
  class NativeBridge : public ::Il2CppObject {
    public:
    // static field const value: static private System.String PLUGIN_NAME
    static constexpr const char* PLUGIN_NAME = "VorbisPlugin";
    // Get static field: static private System.String PLUGIN_NAME
    static ::StringW _get_PLUGIN_NAME();
    // Set static field: static private System.String PLUGIN_NAME
    static void _set_PLUGIN_NAME(::StringW value);
    // static System.Int32 WriteAllPcmDataToFile(System.String filePath, System.Single[] samples, System.Int32 samplesLength, System.Int16 channels, System.Int32 frequency, System.Single base_quality, System.Int32 samplesToRead)
    // Offset: 0x1908CC0
    static int WriteAllPcmDataToFile(::StringW filePath, ::ArrayW<float> samples, int samplesLength, int16_t channels, int frequency, float base_quality, int samplesToRead);
    // static System.Int32 WriteAllPcmDataToMemory(out System.IntPtr bytesPtr, out System.Int32 bytesLength, System.Single[] samples, System.Int32 samplesLength, System.Int16 channels, System.Int32 frequency, System.Single base_quality, System.Int32 samplesToRead)
    // Offset: 0x1908DB0
    static int WriteAllPcmDataToMemory(ByRef<::System::IntPtr> bytesPtr, ByRef<int> bytesLength, ::ArrayW<float> samples, int samplesLength, int16_t channels, int frequency, float base_quality, int samplesToRead);
    // static System.Int32 FreeMemoryArrayForWriteAllPcmData(System.IntPtr bytesNativeArray)
    // Offset: 0x1908E90
    static int FreeMemoryArrayForWriteAllPcmData(::System::IntPtr bytesNativeArray);
    // static System.Int32 ReadAllPcmDataFromFile(System.String filePath, out System.IntPtr samples, out System.Int32 samplesLength, out System.Int16 channels, out System.Int32 frequency, System.Int32 maxSamplesToRead)
    // Offset: 0x1908F10
    static int ReadAllPcmDataFromFile(::StringW filePath, ByRef<::System::IntPtr> samples, ByRef<int> samplesLength, ByRef<int16_t> channels, ByRef<int> frequency, int maxSamplesToRead);
    // static System.Int32 ReadAllPcmDataFromMemory(System.Byte[] memoryArray, System.Int32 memoryArrayLength, out System.IntPtr samples, out System.Int32 samplesLength, out System.Int16 channels, out System.Int32 frequency, System.Int32 maxSamplesToRead)
    // Offset: 0x1908FE8
    static int ReadAllPcmDataFromMemory(::ArrayW<uint8_t> memoryArray, int memoryArrayLength, ByRef<::System::IntPtr> samples, ByRef<int> samplesLength, ByRef<int16_t> channels, ByRef<int> frequency, int maxSamplesToRead);
    // static System.Int32 FreeSamplesArrayNativeMemory(ref System.IntPtr samples)
    // Offset: 0x19090B8
    static int FreeSamplesArrayNativeMemory(ByRef<::System::IntPtr> samples);
    // static System.IntPtr OpenReadFileStream(System.String filePath, out System.Int16 channels, out System.Int32 frequency)
    // Offset: 0x1909138
    static ::System::IntPtr OpenReadFileStream(::StringW filePath, ByRef<int16_t> channels, ByRef<int> frequency);
    // static System.Int32 ReadFromFileStream(System.IntPtr state, System.Single[] samplesToFill, System.Int32 maxSamplesToRead)
    // Offset: 0x19091E8
    static int ReadFromFileStream(::System::IntPtr state, ::ArrayW<float> samplesToFill, int maxSamplesToRead);
    // static System.Int32 CloseFileStream(System.IntPtr state)
    // Offset: 0x1909288
    static int CloseFileStream(::System::IntPtr state);
  }; // OggVorbis.NativeBridge
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbis::NativeBridge::WriteAllPcmDataToFile
// Il2CppName: WriteAllPcmDataToFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::StringW, ::ArrayW<float>, int, int16_t, int, float, int)>(&OggVorbis::NativeBridge::WriteAllPcmDataToFile)> {
  static const MethodInfo* get() {
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* samples = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* samplesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* base_quality = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* samplesToRead = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbis::NativeBridge*), "WriteAllPcmDataToFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filePath, samples, samplesLength, channels, frequency, base_quality, samplesToRead});
  }
};
// Writing MetadataGetter for method: OggVorbis::NativeBridge::WriteAllPcmDataToMemory
// Il2CppName: WriteAllPcmDataToMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::System::IntPtr>, ByRef<int>, ::ArrayW<float>, int, int16_t, int, float, int)>(&OggVorbis::NativeBridge::WriteAllPcmDataToMemory)> {
  static const MethodInfo* get() {
    static auto* bytesPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* bytesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* samples = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* samplesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* base_quality = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* samplesToRead = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbis::NativeBridge*), "WriteAllPcmDataToMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytesPtr, bytesLength, samples, samplesLength, channels, frequency, base_quality, samplesToRead});
  }
};
// Writing MetadataGetter for method: OggVorbis::NativeBridge::FreeMemoryArrayForWriteAllPcmData
// Il2CppName: FreeMemoryArrayForWriteAllPcmData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr)>(&OggVorbis::NativeBridge::FreeMemoryArrayForWriteAllPcmData)> {
  static const MethodInfo* get() {
    static auto* bytesNativeArray = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbis::NativeBridge*), "FreeMemoryArrayForWriteAllPcmData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytesNativeArray});
  }
};
// Writing MetadataGetter for method: OggVorbis::NativeBridge::ReadAllPcmDataFromFile
// Il2CppName: ReadAllPcmDataFromFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::StringW, ByRef<::System::IntPtr>, ByRef<int>, ByRef<int16_t>, ByRef<int>, int)>(&OggVorbis::NativeBridge::ReadAllPcmDataFromFile)> {
  static const MethodInfo* get() {
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* samples = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* samplesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int16")->this_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* maxSamplesToRead = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbis::NativeBridge*), "ReadAllPcmDataFromFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filePath, samples, samplesLength, channels, frequency, maxSamplesToRead});
  }
};
// Writing MetadataGetter for method: OggVorbis::NativeBridge::ReadAllPcmDataFromMemory
// Il2CppName: ReadAllPcmDataFromMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<uint8_t>, int, ByRef<::System::IntPtr>, ByRef<int>, ByRef<int16_t>, ByRef<int>, int)>(&OggVorbis::NativeBridge::ReadAllPcmDataFromMemory)> {
  static const MethodInfo* get() {
    static auto* memoryArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* memoryArrayLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* samples = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* samplesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int16")->this_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* maxSamplesToRead = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbis::NativeBridge*), "ReadAllPcmDataFromMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{memoryArray, memoryArrayLength, samples, samplesLength, channels, frequency, maxSamplesToRead});
  }
};
// Writing MetadataGetter for method: OggVorbis::NativeBridge::FreeSamplesArrayNativeMemory
// Il2CppName: FreeSamplesArrayNativeMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::System::IntPtr>)>(&OggVorbis::NativeBridge::FreeSamplesArrayNativeMemory)> {
  static const MethodInfo* get() {
    static auto* samples = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbis::NativeBridge*), "FreeSamplesArrayNativeMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{samples});
  }
};
// Writing MetadataGetter for method: OggVorbis::NativeBridge::OpenReadFileStream
// Il2CppName: OpenReadFileStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::StringW, ByRef<int16_t>, ByRef<int>)>(&OggVorbis::NativeBridge::OpenReadFileStream)> {
  static const MethodInfo* get() {
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int16")->this_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbis::NativeBridge*), "OpenReadFileStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filePath, channels, frequency});
  }
};
// Writing MetadataGetter for method: OggVorbis::NativeBridge::ReadFromFileStream
// Il2CppName: ReadFromFileStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::ArrayW<float>, int)>(&OggVorbis::NativeBridge::ReadFromFileStream)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* samplesToFill = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* maxSamplesToRead = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbis::NativeBridge*), "ReadFromFileStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, samplesToFill, maxSamplesToRead});
  }
};
// Writing MetadataGetter for method: OggVorbis::NativeBridge::CloseFileStream
// Il2CppName: CloseFileStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr)>(&OggVorbis::NativeBridge::CloseFileStream)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbis::NativeBridge*), "CloseFileStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
