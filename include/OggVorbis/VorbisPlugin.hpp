// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: OggVorbis
namespace OggVorbis {
  // Forward declaring type: VorbisPlugin
  class VorbisPlugin;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbis::VorbisPlugin);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbis::VorbisPlugin*, "OggVorbis", "VorbisPlugin");
// Type namespace: OggVorbis
namespace OggVorbis {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbis.VorbisPlugin
  // [TokenAttribute] Offset: FFFFFFFF
  class VorbisPlugin : public ::Il2CppObject {
    public:
    // static public System.Void Save(System.String filePath, UnityEngine.AudioClip audioClip, System.Single quality, System.Int32 samplesToRead)
    // Offset: 0x1909494
    static void Save(::StringW filePath, ::UnityEngine::AudioClip* audioClip, float quality, int samplesToRead);
    // static public System.Void Save(System.String filePath, System.Single[] samples, System.Int32 channels, System.Int32 frequency, System.Single quality, System.Int32 samplesToRead)
    // Offset: 0x190975C
    static void Save(::StringW filePath, ::ArrayW<float> samples, int channels, int frequency, float quality, int samplesToRead);
    // static public System.Byte[] GetOggVorbis(UnityEngine.AudioClip audioClip, System.Single quality, System.Int32 samplesToRead)
    // Offset: 0x1909964
    static ::ArrayW<uint8_t> GetOggVorbis(::UnityEngine::AudioClip* audioClip, float quality, int samplesToRead);
    // static public UnityEngine.AudioClip Load(System.String filePath, System.Int32 maxSamplesToRead)
    // Offset: 0x1909CC8
    static ::UnityEngine::AudioClip* Load(::StringW filePath, int maxSamplesToRead);
    // static public UnityEngine.AudioClip ToAudioClip(System.Byte[] bytes, System.String audioClipName, System.Int32 maxSamplesToRead)
    // Offset: 0x1909F88
    static ::UnityEngine::AudioClip* ToAudioClip(::ArrayW<uint8_t> bytes, ::StringW audioClipName, int maxSamplesToRead);
  }; // OggVorbis.VorbisPlugin
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbis::VorbisPlugin::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::UnityEngine::AudioClip*, float, int)>(&OggVorbis::VorbisPlugin::Save)> {
  static const MethodInfo* get() {
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* audioClip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* quality = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* samplesToRead = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbis::VorbisPlugin*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filePath, audioClip, quality, samplesToRead});
  }
};
// Writing MetadataGetter for method: OggVorbis::VorbisPlugin::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::ArrayW<float>, int, int, float, int)>(&OggVorbis::VorbisPlugin::Save)> {
  static const MethodInfo* get() {
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* samples = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* quality = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* samplesToRead = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbis::VorbisPlugin*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filePath, samples, channels, frequency, quality, samplesToRead});
  }
};
// Writing MetadataGetter for method: OggVorbis::VorbisPlugin::GetOggVorbis
// Il2CppName: GetOggVorbis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::UnityEngine::AudioClip*, float, int)>(&OggVorbis::VorbisPlugin::GetOggVorbis)> {
  static const MethodInfo* get() {
    static auto* audioClip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* quality = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* samplesToRead = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbis::VorbisPlugin*), "GetOggVorbis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioClip, quality, samplesToRead});
  }
};
// Writing MetadataGetter for method: OggVorbis::VorbisPlugin::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (*)(::StringW, int)>(&OggVorbis::VorbisPlugin::Load)> {
  static const MethodInfo* get() {
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* maxSamplesToRead = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbis::VorbisPlugin*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filePath, maxSamplesToRead});
  }
};
// Writing MetadataGetter for method: OggVorbis::VorbisPlugin::ToAudioClip
// Il2CppName: ToAudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (*)(::ArrayW<uint8_t>, ::StringW, int)>(&OggVorbis::VorbisPlugin::ToAudioClip)> {
  static const MethodInfo* get() {
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* audioClipName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* maxSamplesToRead = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbis::VorbisPlugin*), "ToAudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes, audioClipName, maxSamplesToRead});
  }
};
