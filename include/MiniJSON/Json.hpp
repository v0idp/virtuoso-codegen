// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MiniJSON
namespace MiniJSON {
}
// Completed forward declares
// Type namespace: MiniJSON
namespace MiniJSON {
  // Forward declaring type: Json
  class Json;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MiniJSON::Json);
DEFINE_IL2CPP_ARG_TYPE(::MiniJSON::Json*, "MiniJSON", "Json");
// Type namespace: MiniJSON
namespace MiniJSON {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: MiniJSON.Json
  // [TokenAttribute] Offset: FFFFFFFF
  class Json : public ::Il2CppObject {
    public:
    // Nested type: ::MiniJSON::Json::Parser
    class Parser;
    // Nested type: ::MiniJSON::Json::Serializer
    class Serializer;
    // static public System.Object Deserialize(System.String json)
    // Offset: 0x194B390
    static ::Il2CppObject* Deserialize(::StringW json);
    // static public System.String Serialize(System.Object obj)
    // Offset: 0x194B3A0
    static ::StringW Serialize(::Il2CppObject* obj);
  }; // MiniJSON.Json
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MiniJSON::Json::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::StringW)>(&MiniJSON::Json::Deserialize)> {
  static const MethodInfo* get() {
    static auto* json = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MiniJSON::Json*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{json});
  }
};
// Writing MetadataGetter for method: MiniJSON::Json::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Il2CppObject*)>(&MiniJSON::Json::Serialize)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MiniJSON::Json*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
