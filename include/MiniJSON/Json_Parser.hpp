// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MiniJSON.Json
#include "MiniJSON/Json.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MiniJSON
namespace MiniJSON {
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: StringReader
  class StringReader;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MiniJSON::Json::Parser);
DEFINE_IL2CPP_ARG_TYPE(::MiniJSON::Json::Parser*, "MiniJSON", "Json/Parser");
// Type namespace: MiniJSON
namespace MiniJSON {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: MiniJSON.Json/MiniJSON.Parser
  // [TokenAttribute] Offset: FFFFFFFF
  class Json::Parser : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::MiniJSON::Json::Parser::TOKEN
    struct TOKEN;
    public:
    // private System.IO.StringReader json
    // Size: 0x8
    // Offset: 0x10
    ::System::IO::StringReader* json;
    // Field size check
    static_assert(sizeof(::System::IO::StringReader*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator ::System::IO::StringReader*
    constexpr operator ::System::IO::StringReader*() const noexcept {
      return json;
    }
    // static field const value: static private System.String WORD_BREAK
    static constexpr const char* WORD_BREAK = "{}[],:\"";
    // Get static field: static private System.String WORD_BREAK
    static ::StringW _get_WORD_BREAK();
    // Set static field: static private System.String WORD_BREAK
    static void _set_WORD_BREAK(::StringW value);
    // Get instance field reference: private System.IO.StringReader json
    [[deprecated]] ::System::IO::StringReader*& dyn_json();
    // private System.Char get_PeekChar()
    // Offset: 0x195A6BC
    ::Il2CppChar get_PeekChar();
    // private System.Char get_NextChar()
    // Offset: 0x195A4D0
    ::Il2CppChar get_NextChar();
    // private System.String get_NextWord()
    // Offset: 0x195A554
    ::StringW get_NextWord();
    // private MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN get_NextToken()
    // Offset: 0x1959DD4
    ::MiniJSON::Json::Parser::TOKEN get_NextToken();
    // private System.Void .ctor(System.String jsonString)
    // Offset: 0x1959A68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Json::Parser* New_ctor(::StringW jsonString) {
      static auto ___internal__logger = ::Logger::get().WithContext("::MiniJSON::Json::Parser::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Json::Parser*, creationType>(jsonString)));
    }
    // static public System.Boolean IsWordBreak(System.Char c)
    // Offset: 0x19599C0
    static bool IsWordBreak(::Il2CppChar c);
    // static public System.Object Parse(System.String jsonString)
    // Offset: 0x1959AE0
    static ::Il2CppObject* Parse(::StringW jsonString);
    // public System.Void Dispose()
    // Offset: 0x1959C78
    void Dispose();
    // private System.Collections.Generic.Dictionary`2<System.String,System.Object> ParseObject()
    // Offset: 0x1959CAC
    ::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>* ParseObject();
    // private System.Collections.Generic.List`1<System.Object> ParseArray()
    // Offset: 0x195A22C
    ::System::Collections::Generic::List_1<::Il2CppObject*>* ParseArray();
    // private System.Object ParseValue()
    // Offset: 0x1959C50
    ::Il2CppObject* ParseValue();
    // private System.Object ParseByToken(MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN token)
    // Offset: 0x195A314
    ::Il2CppObject* ParseByToken(::MiniJSON::Json::Parser::TOKEN token);
    // private System.String ParseString()
    // Offset: 0x1959F98
    ::StringW ParseString();
    // private System.Object ParseNumber()
    // Offset: 0x195A3EC
    ::Il2CppObject* ParseNumber();
    // private System.Void EatWhitespace()
    // Offset: 0x195A60C
    void EatWhitespace();
  }; // MiniJSON.Json/MiniJSON.Parser
  #pragma pack(pop)
  static check_size<sizeof(Json::Parser), 16 + sizeof(::System::IO::StringReader*)> __MiniJSON_Json_ParserSizeCheck;
  static_assert(sizeof(Json::Parser) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MiniJSON::Json::Parser::get_PeekChar
// Il2CppName: get_PeekChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (MiniJSON::Json::Parser::*)()>(&MiniJSON::Json::Parser::get_PeekChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MiniJSON::Json::Parser*), "get_PeekChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MiniJSON::Json::Parser::get_NextChar
// Il2CppName: get_NextChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (MiniJSON::Json::Parser::*)()>(&MiniJSON::Json::Parser::get_NextChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MiniJSON::Json::Parser*), "get_NextChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MiniJSON::Json::Parser::get_NextWord
// Il2CppName: get_NextWord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (MiniJSON::Json::Parser::*)()>(&MiniJSON::Json::Parser::get_NextWord)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MiniJSON::Json::Parser*), "get_NextWord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MiniJSON::Json::Parser::get_NextToken
// Il2CppName: get_NextToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MiniJSON::Json::Parser::TOKEN (MiniJSON::Json::Parser::*)()>(&MiniJSON::Json::Parser::get_NextToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MiniJSON::Json::Parser*), "get_NextToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MiniJSON::Json::Parser::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MiniJSON::Json::Parser::IsWordBreak
// Il2CppName: IsWordBreak
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&MiniJSON::Json::Parser::IsWordBreak)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MiniJSON::Json::Parser*), "IsWordBreak", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: MiniJSON::Json::Parser::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::StringW)>(&MiniJSON::Json::Parser::Parse)> {
  static const MethodInfo* get() {
    static auto* jsonString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MiniJSON::Json::Parser*), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jsonString});
  }
};
// Writing MetadataGetter for method: MiniJSON::Json::Parser::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MiniJSON::Json::Parser::*)()>(&MiniJSON::Json::Parser::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MiniJSON::Json::Parser*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MiniJSON::Json::Parser::ParseObject
// Il2CppName: ParseObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>* (MiniJSON::Json::Parser::*)()>(&MiniJSON::Json::Parser::ParseObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MiniJSON::Json::Parser*), "ParseObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MiniJSON::Json::Parser::ParseArray
// Il2CppName: ParseArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Il2CppObject*>* (MiniJSON::Json::Parser::*)()>(&MiniJSON::Json::Parser::ParseArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MiniJSON::Json::Parser*), "ParseArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MiniJSON::Json::Parser::ParseValue
// Il2CppName: ParseValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MiniJSON::Json::Parser::*)()>(&MiniJSON::Json::Parser::ParseValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MiniJSON::Json::Parser*), "ParseValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MiniJSON::Json::Parser::ParseByToken
// Il2CppName: ParseByToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MiniJSON::Json::Parser::*)(::MiniJSON::Json::Parser::TOKEN)>(&MiniJSON::Json::Parser::ParseByToken)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("MiniJSON", "Json/Parser/TOKEN")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MiniJSON::Json::Parser*), "ParseByToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: MiniJSON::Json::Parser::ParseString
// Il2CppName: ParseString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (MiniJSON::Json::Parser::*)()>(&MiniJSON::Json::Parser::ParseString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MiniJSON::Json::Parser*), "ParseString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MiniJSON::Json::Parser::ParseNumber
// Il2CppName: ParseNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MiniJSON::Json::Parser::*)()>(&MiniJSON::Json::Parser::ParseNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MiniJSON::Json::Parser*), "ParseNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MiniJSON::Json::Parser::EatWhitespace
// Il2CppName: EatWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MiniJSON::Json::Parser::*)()>(&MiniJSON::Json::Parser::EatWhitespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MiniJSON::Json::Parser*), "EatWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
