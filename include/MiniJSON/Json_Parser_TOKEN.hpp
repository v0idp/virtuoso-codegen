// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MiniJSON.Json/MiniJSON.Parser
#include "MiniJSON/Json_Parser.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::MiniJSON::Json::Parser::TOKEN, "MiniJSON", "Json/Parser/TOKEN");
// Type namespace: MiniJSON
namespace MiniJSON {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN
  // [TokenAttribute] Offset: FFFFFFFF
  struct Json::Parser::TOKEN/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: TOKEN
    constexpr TOKEN(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN NONE
    static constexpr const int NONE = 0;
    // Get static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN NONE
    static ::MiniJSON::Json::Parser::TOKEN _get_NONE();
    // Set static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN NONE
    static void _set_NONE(::MiniJSON::Json::Parser::TOKEN value);
    // static field const value: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN CURLY_OPEN
    static constexpr const int CURLY_OPEN = 1;
    // Get static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN CURLY_OPEN
    static ::MiniJSON::Json::Parser::TOKEN _get_CURLY_OPEN();
    // Set static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN CURLY_OPEN
    static void _set_CURLY_OPEN(::MiniJSON::Json::Parser::TOKEN value);
    // static field const value: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN CURLY_CLOSE
    static constexpr const int CURLY_CLOSE = 2;
    // Get static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN CURLY_CLOSE
    static ::MiniJSON::Json::Parser::TOKEN _get_CURLY_CLOSE();
    // Set static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN CURLY_CLOSE
    static void _set_CURLY_CLOSE(::MiniJSON::Json::Parser::TOKEN value);
    // static field const value: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN SQUARED_OPEN
    static constexpr const int SQUARED_OPEN = 3;
    // Get static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN SQUARED_OPEN
    static ::MiniJSON::Json::Parser::TOKEN _get_SQUARED_OPEN();
    // Set static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN SQUARED_OPEN
    static void _set_SQUARED_OPEN(::MiniJSON::Json::Parser::TOKEN value);
    // static field const value: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN SQUARED_CLOSE
    static constexpr const int SQUARED_CLOSE = 4;
    // Get static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN SQUARED_CLOSE
    static ::MiniJSON::Json::Parser::TOKEN _get_SQUARED_CLOSE();
    // Set static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN SQUARED_CLOSE
    static void _set_SQUARED_CLOSE(::MiniJSON::Json::Parser::TOKEN value);
    // static field const value: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN COLON
    static constexpr const int COLON = 5;
    // Get static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN COLON
    static ::MiniJSON::Json::Parser::TOKEN _get_COLON();
    // Set static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN COLON
    static void _set_COLON(::MiniJSON::Json::Parser::TOKEN value);
    // static field const value: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN COMMA
    static constexpr const int COMMA = 6;
    // Get static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN COMMA
    static ::MiniJSON::Json::Parser::TOKEN _get_COMMA();
    // Set static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN COMMA
    static void _set_COMMA(::MiniJSON::Json::Parser::TOKEN value);
    // static field const value: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN STRING
    static constexpr const int STRING = 7;
    // Get static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN STRING
    static ::MiniJSON::Json::Parser::TOKEN _get_STRING();
    // Set static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN STRING
    static void _set_STRING(::MiniJSON::Json::Parser::TOKEN value);
    // static field const value: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN NUMBER
    static constexpr const int NUMBER = 8;
    // Get static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN NUMBER
    static ::MiniJSON::Json::Parser::TOKEN _get_NUMBER();
    // Set static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN NUMBER
    static void _set_NUMBER(::MiniJSON::Json::Parser::TOKEN value);
    // static field const value: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN TRUE
    static constexpr const int TRUE = 9;
    // Get static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN TRUE
    static ::MiniJSON::Json::Parser::TOKEN _get_TRUE();
    // Set static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN TRUE
    static void _set_TRUE(::MiniJSON::Json::Parser::TOKEN value);
    // static field const value: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN FALSE
    static constexpr const int FALSE = 10;
    // Get static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN FALSE
    static ::MiniJSON::Json::Parser::TOKEN _get_FALSE();
    // Set static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN FALSE
    static void _set_FALSE(::MiniJSON::Json::Parser::TOKEN value);
    // static field const value: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN NULL
    static constexpr const int _NULL = 11;
    // Get static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN NULL
    static ::MiniJSON::Json::Parser::TOKEN _get_NULL();
    // Set static field: static public MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN NULL
    static void _set_NULL(::MiniJSON::Json::Parser::TOKEN value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated]] int& dyn_value__();
  }; // MiniJSON.Json/MiniJSON.Parser/MiniJSON.TOKEN
  #pragma pack(pop)
  static check_size<sizeof(Json::Parser::TOKEN), 0 + sizeof(int)> __MiniJSON_Json_Parser_TOKENSizeCheck;
  static_assert(sizeof(Json::Parser::TOKEN) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
