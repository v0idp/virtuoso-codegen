// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RSG.TimeData
#include "RSG/TimeData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: RSG
namespace RSG {
  // Forward declaring type: IPendingPromise
  class IPendingPromise;
}
// Completed forward declares
// Type namespace: RSG
namespace RSG {
  // Forward declaring type: PredicateWait
  class PredicateWait;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RSG::PredicateWait);
DEFINE_IL2CPP_ARG_TYPE(::RSG::PredicateWait*, "RSG", "PredicateWait");
// Type namespace: RSG
namespace RSG {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: RSG.PredicateWait
  // [TokenAttribute] Offset: FFFFFFFF
  class PredicateWait : public ::Il2CppObject {
    public:
    public:
    // public System.Func`2<RSG.TimeData,System.Boolean> predicate
    // Size: 0x8
    // Offset: 0x10
    ::System::Func_2<::RSG::TimeData, bool>* predicate;
    // Field size check
    static_assert(sizeof(::System::Func_2<::RSG::TimeData, bool>*) == 0x8);
    // public System.Single timeStarted
    // Size: 0x4
    // Offset: 0x18
    float timeStarted;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: timeStarted and: pendingPromise
    char __padding1[0x4] = {};
    // public RSG.IPendingPromise pendingPromise
    // Size: 0x8
    // Offset: 0x20
    ::RSG::IPendingPromise* pendingPromise;
    // Field size check
    static_assert(sizeof(::RSG::IPendingPromise*) == 0x8);
    // public RSG.TimeData timeData
    // Size: 0xC
    // Offset: 0x28
    ::RSG::TimeData timeData;
    // Field size check
    static_assert(sizeof(::RSG::TimeData) == 0xC);
    // public System.Int32 frameStarted
    // Size: 0x4
    // Offset: 0x34
    int frameStarted;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Func`2<RSG.TimeData,System.Boolean> predicate
    [[deprecated]] ::System::Func_2<::RSG::TimeData, bool>*& dyn_predicate();
    // Get instance field reference: public System.Single timeStarted
    [[deprecated]] float& dyn_timeStarted();
    // Get instance field reference: public RSG.IPendingPromise pendingPromise
    [[deprecated]] ::RSG::IPendingPromise*& dyn_pendingPromise();
    // Get instance field reference: public RSG.TimeData timeData
    [[deprecated]] ::RSG::TimeData& dyn_timeData();
    // Get instance field reference: public System.Int32 frameStarted
    [[deprecated]] int& dyn_frameStarted();
    // public System.Void .ctor()
    // Offset: 0xAE2B7C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PredicateWait* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::RSG::PredicateWait::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PredicateWait*, creationType>()));
    }
  }; // RSG.PredicateWait
  #pragma pack(pop)
  static check_size<sizeof(PredicateWait), 52 + sizeof(int)> __RSG_PredicateWaitSizeCheck;
  static_assert(sizeof(PredicateWait) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RSG::PredicateWait::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
