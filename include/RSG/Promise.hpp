// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RSG.IPromise
#include "RSG/IPromise.hpp"
// Including type: RSG.IPromiseInfo
#include "RSG/IPromiseInfo.hpp"
// Including type: RSG.IPendingPromise
#include "RSG/IPendingPromise.hpp"
// Including type: RSG.RejectHandler
#include "RSG/RejectHandler.hpp"
// Including type: RSG.ProgressHandler
#include "RSG/ProgressHandler.hpp"
// Including type: RSG.PromiseState
#include "RSG/PromiseState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: RSG
namespace RSG {
  // Forward declaring type: ExceptionEventArgs
  class ExceptionEventArgs;
  // Skipping declaration: IRejectable because it is already included!
  // Forward declaring type: IPromise`1<PromisedT>
  template<typename PromisedT>
  class IPromise_1;
  // Skipping declaration: ResolveHandler because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: RSG
namespace RSG {
  // Forward declaring type: Promise
  class Promise;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RSG::Promise);
DEFINE_IL2CPP_ARG_TYPE(::RSG::Promise*, "RSG", "Promise");
// Type namespace: RSG
namespace RSG {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: RSG.Promise
  // [TokenAttribute] Offset: FFFFFFFF
  class Promise : public ::Il2CppObject/*, public ::RSG::IPromise, public ::RSG::IPromiseInfo, public ::RSG::IPendingPromise*/ {
    public:
    // Nested type: ::RSG::Promise::ResolveHandler
    struct ResolveHandler;
    // Nested type: ::RSG::Promise::$$c__DisplayClass34_0
    class $$c__DisplayClass34_0;
    // Nested type: ::RSG::Promise::$$c__DisplayClass36_0
    class $$c__DisplayClass36_0;
    // Nested type: ::RSG::Promise::$$c__DisplayClass44_0
    class $$c__DisplayClass44_0;
    // Nested type: ::RSG::Promise::$$c__DisplayClass51_0_1<ConvertedT>
    template<typename ConvertedT>
    class $$c__DisplayClass51_0_1;
    // Nested type: ::RSG::Promise::$$c__DisplayClass52_0
    class $$c__DisplayClass52_0;
    // Nested type: ::RSG::Promise::$$c__DisplayClass53_0
    class $$c__DisplayClass53_0;
    // Nested type: ::RSG::Promise::$$c__DisplayClass56_0
    class $$c__DisplayClass56_0;
    // Nested type: ::RSG::Promise::$$c__DisplayClass57_0_1<ConvertedT>
    template<typename ConvertedT>
    class $$c__DisplayClass57_0_1;
    // Nested type: ::RSG::Promise::$$c__DisplayClass59_0
    class $$c__DisplayClass59_0;
    // Nested type: ::RSG::Promise::$$c__DisplayClass59_1
    class $$c__DisplayClass59_1;
    // Nested type: ::RSG::Promise::$$c__DisplayClass60_0
    class $$c__DisplayClass60_0;
    // Nested type: ::RSG::Promise::$$c__DisplayClass62_0
    class $$c__DisplayClass62_0;
    // Nested type: ::RSG::Promise::$$c__DisplayClass62_1
    class $$c__DisplayClass62_1;
    // Nested type: ::RSG::Promise::$$c__DisplayClass63_0
    class $$c__DisplayClass63_0;
    // Nested type: ::RSG::Promise::$$c__DisplayClass64_0_1<ConvertedT>
    template<typename ConvertedT>
    class $$c__DisplayClass64_0_1;
    // Nested type: ::RSG::Promise::$$c__DisplayClass66_0
    class $$c__DisplayClass66_0;
    // Nested type: ::RSG::Promise::$$c__DisplayClass66_1
    class $$c__DisplayClass66_1;
    // Nested type: ::RSG::Promise::$$c__DisplayClass69_0
    class $$c__DisplayClass69_0;
    // Nested type: ::RSG::Promise::$$c__DisplayClass70_0
    class $$c__DisplayClass70_0;
    // Nested type: ::RSG::Promise::$$c__DisplayClass71_0_1<ConvertedT>
    template<typename ConvertedT>
    class $$c__DisplayClass71_0_1;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: RSG.Promise/RSG.ResolveHandler
    // [TokenAttribute] Offset: FFFFFFFF
    struct ResolveHandler/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Action callback
      // Size: 0x8
      // Offset: 0x0
      ::System::Action* callback;
      // Field size check
      static_assert(sizeof(::System::Action*) == 0x8);
      // public RSG.IRejectable rejectable
      // Size: 0x8
      // Offset: 0x8
      ::RSG::IRejectable* rejectable;
      // Field size check
      static_assert(sizeof(::RSG::IRejectable*) == 0x8);
      public:
      // Creating value type constructor for type: ResolveHandler
      constexpr ResolveHandler(::System::Action* callback_ = {}, ::RSG::IRejectable* rejectable_ = {}) noexcept : callback{callback_}, rejectable{rejectable_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Action callback
      [[deprecated("Use field access instead!")]] ::System::Action*& dyn_callback();
      // Get instance field reference: public RSG.IRejectable rejectable
      [[deprecated("Use field access instead!")]] ::RSG::IRejectable*& dyn_rejectable();
    }; // RSG.Promise/RSG.ResolveHandler
    #pragma pack(pop)
    static check_size<sizeof(Promise::ResolveHandler), 8 + sizeof(::RSG::IRejectable*)> __RSG_Promise_ResolveHandlerSizeCheck;
    static_assert(sizeof(Promise::ResolveHandler) == 0x10);
    public:
    // private System.Exception rejectionException
    // Size: 0x8
    // Offset: 0x10
    ::System::Exception* rejectionException;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    // private System.Collections.Generic.List`1<RSG.RejectHandler> rejectHandlers
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::RSG::RejectHandler>* rejectHandlers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::RSG::RejectHandler>*) == 0x8);
    // private System.Collections.Generic.List`1<RSG.Promise/RSG.ResolveHandler> resolveHandlers
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::RSG::Promise::ResolveHandler>* resolveHandlers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::RSG::Promise::ResolveHandler>*) == 0x8);
    // private System.Collections.Generic.List`1<RSG.ProgressHandler> progressHandlers
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::RSG::ProgressHandler>* progressHandlers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::RSG::ProgressHandler>*) == 0x8);
    // private readonly System.Int32 id
    // Size: 0x4
    // Offset: 0x30
    int id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: id and: Name
    char __padding4[0x4] = {};
    // private System.String <Name>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private RSG.PromiseState <CurState>k__BackingField
    // Size: 0x4
    // Offset: 0x40
    ::RSG::PromiseState CurState;
    // Field size check
    static_assert(sizeof(::RSG::PromiseState) == 0x4);
    public:
    // Creating interface conversion operator: operator ::RSG::IPromise
    operator ::RSG::IPromise() noexcept {
      return *reinterpret_cast<::RSG::IPromise*>(this);
    }
    // Creating interface conversion operator: operator ::RSG::IPromiseInfo
    operator ::RSG::IPromiseInfo() noexcept {
      return *reinterpret_cast<::RSG::IPromiseInfo*>(this);
    }
    // Creating interface conversion operator: operator ::RSG::IPendingPromise
    operator ::RSG::IPendingPromise() noexcept {
      return *reinterpret_cast<::RSG::IPendingPromise*>(this);
    }
    // Get static field: static public System.Boolean EnablePromiseTracking
    static bool _get_EnablePromiseTracking();
    // Set static field: static public System.Boolean EnablePromiseTracking
    static void _set_EnablePromiseTracking(bool value);
    // Get static field: static private System.EventHandler`1<RSG.ExceptionEventArgs> unhandlerException
    static ::System::EventHandler_1<::RSG::ExceptionEventArgs*>* _get_unhandlerException();
    // Set static field: static private System.EventHandler`1<RSG.ExceptionEventArgs> unhandlerException
    static void _set_unhandlerException(::System::EventHandler_1<::RSG::ExceptionEventArgs*>* value);
    // Get static field: static private System.Int32 nextPromiseId
    static int _get_nextPromiseId();
    // Set static field: static private System.Int32 nextPromiseId
    static void _set_nextPromiseId(int value);
    // Get static field: static readonly System.Collections.Generic.HashSet`1<RSG.IPromiseInfo> PendingPromises
    static ::System::Collections::Generic::HashSet_1<::RSG::IPromiseInfo*>* _get_PendingPromises();
    // Set static field: static readonly System.Collections.Generic.HashSet`1<RSG.IPromiseInfo> PendingPromises
    static void _set_PendingPromises(::System::Collections::Generic::HashSet_1<::RSG::IPromiseInfo*>* value);
    // Get instance field reference: private System.Exception rejectionException
    [[deprecated("Use field access instead!")]] ::System::Exception*& dyn_rejectionException();
    // Get instance field reference: private System.Collections.Generic.List`1<RSG.RejectHandler> rejectHandlers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::RSG::RejectHandler>*& dyn_rejectHandlers();
    // Get instance field reference: private System.Collections.Generic.List`1<RSG.Promise/RSG.ResolveHandler> resolveHandlers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::RSG::Promise::ResolveHandler>*& dyn_resolveHandlers();
    // Get instance field reference: private System.Collections.Generic.List`1<RSG.ProgressHandler> progressHandlers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::RSG::ProgressHandler>*& dyn_progressHandlers();
    // Get instance field reference: private readonly System.Int32 id
    [[deprecated("Use field access instead!")]] int& dyn_id();
    // Get instance field reference: private System.String <Name>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Name$k__BackingField();
    // Get instance field reference: private RSG.PromiseState <CurState>k__BackingField
    [[deprecated("Use field access instead!")]] ::RSG::PromiseState& dyn_$CurState$k__BackingField();
    // public System.Int32 get_Id()
    // Offset: 0xB27068
    int get_Id();
    // public System.String get_Name()
    // Offset: 0xB27070
    ::StringW get_Name();
    // private System.Void set_Name(System.String value)
    // Offset: 0xB27078
    void set_Name(::StringW value);
    // public RSG.PromiseState get_CurState()
    // Offset: 0xB27080
    ::RSG::PromiseState get_CurState();
    // private System.Void set_CurState(RSG.PromiseState value)
    // Offset: 0xB27088
    void set_CurState(::RSG::PromiseState value);
    // static public System.Void add_UnhandledException(System.EventHandler`1<RSG.ExceptionEventArgs> value)
    // Offset: 0xB26EAC
    static void add_UnhandledException(::System::EventHandler_1<::RSG::ExceptionEventArgs*>* value);
    // static public System.Void remove_UnhandledException(System.EventHandler`1<RSG.ExceptionEventArgs> value)
    // Offset: 0xB26F58
    static void remove_UnhandledException(::System::EventHandler_1<::RSG::ExceptionEventArgs*>* value);
    // public System.Void .ctor()
    // Offset: 0xB27090
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Promise* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::RSG::Promise::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Promise*, creationType>()));
    }
    // public System.Void .ctor(System.Action`2<System.Action,System.Action`1<System.Exception>> resolver)
    // Offset: 0xB271D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Promise* New_ctor(::System::Action_2<::System::Action*, ::System::Action_1<::System::Exception*>*>* resolver) {
      static auto ___internal__logger = ::Logger::get().WithContext("::RSG::Promise::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Promise*, creationType>(resolver)));
    }
    // static private System.Void .cctor()
    // Offset: 0xB29910
    static void _cctor();
    // static public System.Collections.Generic.IEnumerable`1<RSG.IPromiseInfo> GetPendingPromises()
    // Offset: 0xB27004
    static ::System::Collections::Generic::IEnumerable_1<::RSG::IPromiseInfo*>* GetPendingPromises();
    // static System.Int32 NextId()
    // Offset: 0xB27164
    static int NextId();
    // private System.Void AddRejectHandler(System.Action`1<System.Exception> onRejected, RSG.IRejectable rejectable)
    // Offset: 0xB275B0
    void AddRejectHandler(::System::Action_1<::System::Exception*>* onRejected, ::RSG::IRejectable* rejectable);
    // private System.Void AddResolveHandler(System.Action onResolved, RSG.IRejectable rejectable)
    // Offset: 0xB27664
    void AddResolveHandler(::System::Action* onResolved, ::RSG::IRejectable* rejectable);
    // private System.Void AddProgressHandler(System.Action`1<System.Single> onProgress, RSG.IRejectable rejectable)
    // Offset: 0xB27718
    void AddProgressHandler(::System::Action_1<float>* onProgress, ::RSG::IRejectable* rejectable);
    // private System.Void InvokeRejectHandler(System.Action`1<System.Exception> callback, RSG.IRejectable rejectable, System.Exception value)
    // Offset: 0xB277CC
    void InvokeRejectHandler(::System::Action_1<::System::Exception*>* callback, ::RSG::IRejectable* rejectable, ::System::Exception* value);
    // private System.Void InvokeResolveHandler(System.Action callback, RSG.IRejectable rejectable)
    // Offset: 0xB2792C
    void InvokeResolveHandler(::System::Action* callback, ::RSG::IRejectable* rejectable);
    // private System.Void InvokeProgressHandler(System.Action`1<System.Single> callback, RSG.IRejectable rejectable, System.Single progress)
    // Offset: 0xB27A4C
    void InvokeProgressHandler(::System::Action_1<float>* callback, ::RSG::IRejectable* rejectable, float progress);
    // private System.Void ClearHandlers()
    // Offset: 0xB27BB8
    void ClearHandlers();
    // private System.Void InvokeRejectHandlers(System.Exception ex)
    // Offset: 0xB27BC4
    void InvokeRejectHandlers(::System::Exception* ex);
    // private System.Void InvokeResolveHandlers()
    // Offset: 0xB27CC0
    void InvokeResolveHandlers();
    // private System.Void InvokeProgressHandlers(System.Single progress)
    // Offset: 0xB27D84
    void InvokeProgressHandlers(float progress);
    // public System.Void Reject(System.Exception ex)
    // Offset: 0xB273E0
    void Reject(::System::Exception* ex);
    // public System.Void Resolve()
    // Offset: 0xB27E98
    void Resolve();
    // public System.Void ReportProgress(System.Single progress)
    // Offset: 0xB2805C
    void ReportProgress(float progress);
    // public System.Void Done(System.Action onResolved, System.Action`1<System.Exception> onRejected)
    // Offset: 0xB28178
    void Done(::System::Action* onResolved, ::System::Action_1<::System::Exception*>* onRejected);
    // public System.Void Done(System.Action onResolved)
    // Offset: 0xB282B4
    void Done(::System::Action* onResolved);
    // public System.Void Done()
    // Offset: 0xB283F0
    void Done();
    // public RSG.IPromise WithName(System.String name)
    // Offset: 0xB2864C
    ::RSG::IPromise* WithName(::StringW name);
    // public RSG.IPromise Catch(System.Action`1<System.Exception> onRejected)
    // Offset: 0xB28480
    ::RSG::IPromise* Catch(::System::Action_1<::System::Exception*>* onRejected);
    // public RSG.IPromise`1<ConvertedT> Then(System.Func`1<RSG.IPromise`1<ConvertedT>> onResolved)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class ConvertedT>
    ::RSG::IPromise_1<ConvertedT>* Then(::System::Func_1<::RSG::IPromise_1<ConvertedT>*>* onResolved) {
      static auto ___internal__logger = ::Logger::get().WithContext("::RSG::Promise::Then");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::RSG::Promise*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConvertedT>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<ConvertedT>*, false>(this, ___generic__method, onResolved);
    }
    // public RSG.IPromise Then(System.Func`1<RSG.IPromise> onResolved)
    // Offset: 0xB28700
    ::RSG::IPromise* Then(::System::Func_1<::RSG::IPromise*>* onResolved);
    // public RSG.IPromise Then(System.Action onResolved)
    // Offset: 0xB283E4
    ::RSG::IPromise* Then(::System::Action* onResolved);
    // public RSG.IPromise`1<ConvertedT> Then(System.Func`1<RSG.IPromise`1<ConvertedT>> onResolved, System.Func`2<System.Exception,RSG.IPromise`1<ConvertedT>> onRejected)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class ConvertedT>
    ::RSG::IPromise_1<ConvertedT>* Then(::System::Func_1<::RSG::IPromise_1<ConvertedT>*>* onResolved, ::System::Func_2<::System::Exception*, ::RSG::IPromise_1<ConvertedT>*>* onRejected) {
      static auto ___internal__logger = ::Logger::get().WithContext("::RSG::Promise::Then");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::RSG::Promise*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConvertedT>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<ConvertedT>*, false>(this, ___generic__method, onResolved, onRejected);
    }
    // public RSG.IPromise Then(System.Func`1<RSG.IPromise> onResolved, System.Action`1<System.Exception> onRejected)
    // Offset: 0xB28A1C
    ::RSG::IPromise* Then(::System::Func_1<::RSG::IPromise*>* onResolved, ::System::Action_1<::System::Exception*>* onRejected);
    // public RSG.IPromise Then(System.Action onResolved, System.Action`1<System.Exception> onRejected)
    // Offset: 0xB282AC
    ::RSG::IPromise* Then(::System::Action* onResolved, ::System::Action_1<::System::Exception*>* onRejected);
    // public RSG.IPromise`1<ConvertedT> Then(System.Func`1<RSG.IPromise`1<ConvertedT>> onResolved, System.Func`2<System.Exception,RSG.IPromise`1<ConvertedT>> onRejected, System.Action`1<System.Single> onProgress)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class ConvertedT>
    ::RSG::IPromise_1<ConvertedT>* Then(::System::Func_1<::RSG::IPromise_1<ConvertedT>*>* onResolved, ::System::Func_2<::System::Exception*, ::RSG::IPromise_1<ConvertedT>*>* onRejected, ::System::Action_1<float>* onProgress) {
      static auto ___internal__logger = ::Logger::get().WithContext("::RSG::Promise::Then");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::RSG::Promise*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConvertedT>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<ConvertedT>*, false>(this, ___generic__method, onResolved, onRejected, onProgress);
    }
    // public RSG.IPromise Then(System.Func`1<RSG.IPromise> onResolved, System.Action`1<System.Exception> onRejected, System.Action`1<System.Single> onProgress)
    // Offset: 0xB2870C
    ::RSG::IPromise* Then(::System::Func_1<::RSG::IPromise*>* onResolved, ::System::Action_1<::System::Exception*>* onRejected, ::System::Action_1<float>* onProgress);
    // public RSG.IPromise Then(System.Action onResolved, System.Action`1<System.Exception> onRejected, System.Action`1<System.Single> onProgress)
    // Offset: 0xB28894
    ::RSG::IPromise* Then(::System::Action* onResolved, ::System::Action_1<::System::Exception*>* onRejected, ::System::Action_1<float>* onProgress);
    // private System.Void ActionHandlers(RSG.IRejectable resultPromise, System.Action resolveHandler, System.Action`1<System.Exception> rejectHandler)
    // Offset: 0xB28654
    void ActionHandlers(::RSG::IRejectable* resultPromise, ::System::Action* resolveHandler, ::System::Action_1<::System::Exception*>* rejectHandler);
    // private System.Void ProgressHandlers(RSG.IRejectable resultPromise, System.Action`1<System.Single> progressHandler)
    // Offset: 0xB286E4
    void ProgressHandlers(::RSG::IRejectable* resultPromise, ::System::Action_1<float>* progressHandler);
    // public RSG.IPromise ThenAll(System.Func`1<System.Collections.Generic.IEnumerable`1<RSG.IPromise>> chain)
    // Offset: 0xB28A24
    ::RSG::IPromise* ThenAll(::System::Func_1<::System::Collections::Generic::IEnumerable_1<::RSG::IPromise*>*>* chain);
    // public RSG.IPromise`1<System.Collections.Generic.IEnumerable`1<ConvertedT>> ThenAll(System.Func`1<System.Collections.Generic.IEnumerable`1<RSG.IPromise`1<ConvertedT>>> chain)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class ConvertedT>
    ::RSG::IPromise_1<::System::Collections::Generic::IEnumerable_1<ConvertedT>*>* ThenAll(::System::Func_1<::System::Collections::Generic::IEnumerable_1<::RSG::IPromise_1<ConvertedT>*>*>* chain) {
      static auto ___internal__logger = ::Logger::get().WithContext("::RSG::Promise::ThenAll");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::RSG::Promise*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConvertedT>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<::System::Collections::Generic::IEnumerable_1<ConvertedT>*>*, false>(this, ___generic__method, chain);
    }
    // static public RSG.IPromise All(params RSG.IPromise[] promises)
    // Offset: 0xB28AFC
    static ::RSG::IPromise* All(::ArrayW<::RSG::IPromise*> promises);
    // static public RSG.IPromise All(System.Collections.Generic.IEnumerable`1<RSG.IPromise> promises)
    // Offset: 0xB28B5C
    static ::RSG::IPromise* All(::System::Collections::Generic::IEnumerable_1<::RSG::IPromise*>* promises);
    // public RSG.IPromise ThenSequence(System.Func`1<System.Collections.Generic.IEnumerable`1<System.Func`1<RSG.IPromise>>> chain)
    // Offset: 0xB28D78
    ::RSG::IPromise* ThenSequence(::System::Func_1<::System::Collections::Generic::IEnumerable_1<::System::Func_1<::RSG::IPromise*>*>*>* chain);
    // static public RSG.IPromise Sequence(params System.Func`1<RSG.IPromise>[] fns)
    // Offset: 0xB28E50
    static ::RSG::IPromise* Sequence(::ArrayW<::System::Func_1<::RSG::IPromise*>*> fns);
    // static public RSG.IPromise Sequence(System.Collections.Generic.IEnumerable`1<System.Func`1<RSG.IPromise>> fns)
    // Offset: 0xB28EB0
    static ::RSG::IPromise* Sequence(::System::Collections::Generic::IEnumerable_1<::System::Func_1<::RSG::IPromise*>*>* fns);
    // public RSG.IPromise ThenRace(System.Func`1<System.Collections.Generic.IEnumerable`1<RSG.IPromise>> chain)
    // Offset: 0xB29184
    ::RSG::IPromise* ThenRace(::System::Func_1<::System::Collections::Generic::IEnumerable_1<::RSG::IPromise*>*>* chain);
    // public RSG.IPromise`1<ConvertedT> ThenRace(System.Func`1<System.Collections.Generic.IEnumerable`1<RSG.IPromise`1<ConvertedT>>> chain)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class ConvertedT>
    ::RSG::IPromise_1<ConvertedT>* ThenRace(::System::Func_1<::System::Collections::Generic::IEnumerable_1<::RSG::IPromise_1<ConvertedT>*>*>* chain) {
      static auto ___internal__logger = ::Logger::get().WithContext("::RSG::Promise::ThenRace");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::RSG::Promise*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConvertedT>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<ConvertedT>*, false>(this, ___generic__method, chain);
    }
    // static public RSG.IPromise Race(params RSG.IPromise[] promises)
    // Offset: 0xB2925C
    static ::RSG::IPromise* Race(::ArrayW<::RSG::IPromise*> promises);
    // static public RSG.IPromise Race(System.Collections.Generic.IEnumerable`1<RSG.IPromise> promises)
    // Offset: 0xB292BC
    static ::RSG::IPromise* Race(::System::Collections::Generic::IEnumerable_1<::RSG::IPromise*>* promises);
    // static public RSG.IPromise Resolved()
    // Offset: 0xB28D14
    static ::RSG::IPromise* Resolved();
    // static public RSG.IPromise Rejected(System.Exception ex)
    // Offset: 0xB29488
    static ::RSG::IPromise* Rejected(::System::Exception* ex);
    // public RSG.IPromise Finally(System.Action onComplete)
    // Offset: 0xB294F4
    ::RSG::IPromise* Finally(::System::Action* onComplete);
    // public RSG.IPromise ContinueWith(System.Func`1<RSG.IPromise> onComplete)
    // Offset: 0xB29668
    ::RSG::IPromise* ContinueWith(::System::Func_1<::RSG::IPromise*>* onComplete);
    // public RSG.IPromise`1<ConvertedT> ContinueWith(System.Func`1<RSG.IPromise`1<ConvertedT>> onComplete)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class ConvertedT>
    ::RSG::IPromise_1<ConvertedT>* ContinueWith(::System::Func_1<::RSG::IPromise_1<ConvertedT>*>* onComplete) {
      static auto ___internal__logger = ::Logger::get().WithContext("::RSG::Promise::ContinueWith");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::RSG::Promise*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConvertedT>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<ConvertedT>*, false>(this, ___generic__method, onComplete);
    }
    // public RSG.IPromise Progress(System.Action`1<System.Single> onProgress)
    // Offset: 0xB297D8
    ::RSG::IPromise* Progress(::System::Action_1<float>* onProgress);
    // static System.Void PropagateUnhandledException(System.Object sender, System.Exception ex)
    // Offset: 0xB29810
    static void PropagateUnhandledException(::Il2CppObject* sender, ::System::Exception* ex);
    // private System.Void <InvokeResolveHandlers>b__35_0(RSG.Promise/RSG.ResolveHandler handler)
    // Offset: 0xB299A4
    void $InvokeResolveHandlers$b__35_0(::RSG::Promise::ResolveHandler handler);
    // private System.Void <Done>b__40_0(System.Exception ex)
    // Offset: 0xB299A8
    void $Done$b__40_0(::System::Exception* ex);
    // private System.Void <Done>b__41_0(System.Exception ex)
    // Offset: 0xB29A18
    void $Done$b__41_0(::System::Exception* ex);
    // private System.Void <Done>b__42_0(System.Exception ex)
    // Offset: 0xB29A88
    void $Done$b__42_0(::System::Exception* ex);
  }; // RSG.Promise
  #pragma pack(pop)
  static check_size<sizeof(Promise), 64 + sizeof(::RSG::PromiseState)> __RSG_PromiseSizeCheck;
  static_assert(sizeof(Promise) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::RSG::Promise::ResolveHandler, "RSG", "Promise/ResolveHandler");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RSG::Promise::get_Id
// Il2CppName: get_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (RSG::Promise::*)()>(&RSG::Promise::get_Id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "get_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RSG::Promise::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (RSG::Promise::*)()>(&RSG::Promise::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RSG::Promise::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::StringW)>(&RSG::Promise::set_Name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: RSG::Promise::get_CurState
// Il2CppName: get_CurState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::PromiseState (RSG::Promise::*)()>(&RSG::Promise::get_CurState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "get_CurState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RSG::Promise::set_CurState
// Il2CppName: set_CurState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::RSG::PromiseState)>(&RSG::Promise::set_CurState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("RSG", "PromiseState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "set_CurState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: RSG::Promise::add_UnhandledException
// Il2CppName: add_UnhandledException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::EventHandler_1<::RSG::ExceptionEventArgs*>*)>(&RSG::Promise::add_UnhandledException)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "EventHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("RSG", "ExceptionEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "add_UnhandledException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: RSG::Promise::remove_UnhandledException
// Il2CppName: remove_UnhandledException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::EventHandler_1<::RSG::ExceptionEventArgs*>*)>(&RSG::Promise::remove_UnhandledException)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "EventHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("RSG", "ExceptionEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "remove_UnhandledException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: RSG::Promise::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: RSG::Promise::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: RSG::Promise::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&RSG::Promise::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RSG::Promise::GetPendingPromises
// Il2CppName: GetPendingPromises
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::RSG::IPromiseInfo*>* (*)()>(&RSG::Promise::GetPendingPromises)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "GetPendingPromises", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RSG::Promise::NextId
// Il2CppName: NextId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&RSG::Promise::NextId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "NextId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RSG::Promise::AddRejectHandler
// Il2CppName: AddRejectHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::System::Action_1<::System::Exception*>*, ::RSG::IRejectable*)>(&RSG::Promise::AddRejectHandler)> {
  static const MethodInfo* get() {
    static auto* onRejected = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Exception")})->byval_arg;
    static auto* rejectable = &::il2cpp_utils::GetClassFromName("RSG", "IRejectable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "AddRejectHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onRejected, rejectable});
  }
};
// Writing MetadataGetter for method: RSG::Promise::AddResolveHandler
// Il2CppName: AddResolveHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::System::Action*, ::RSG::IRejectable*)>(&RSG::Promise::AddResolveHandler)> {
  static const MethodInfo* get() {
    static auto* onResolved = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* rejectable = &::il2cpp_utils::GetClassFromName("RSG", "IRejectable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "AddResolveHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onResolved, rejectable});
  }
};
// Writing MetadataGetter for method: RSG::Promise::AddProgressHandler
// Il2CppName: AddProgressHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::System::Action_1<float>*, ::RSG::IRejectable*)>(&RSG::Promise::AddProgressHandler)> {
  static const MethodInfo* get() {
    static auto* onProgress = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* rejectable = &::il2cpp_utils::GetClassFromName("RSG", "IRejectable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "AddProgressHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onProgress, rejectable});
  }
};
// Writing MetadataGetter for method: RSG::Promise::InvokeRejectHandler
// Il2CppName: InvokeRejectHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::System::Action_1<::System::Exception*>*, ::RSG::IRejectable*, ::System::Exception*)>(&RSG::Promise::InvokeRejectHandler)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Exception")})->byval_arg;
    static auto* rejectable = &::il2cpp_utils::GetClassFromName("RSG", "IRejectable")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "InvokeRejectHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, rejectable, value});
  }
};
// Writing MetadataGetter for method: RSG::Promise::InvokeResolveHandler
// Il2CppName: InvokeResolveHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::System::Action*, ::RSG::IRejectable*)>(&RSG::Promise::InvokeResolveHandler)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* rejectable = &::il2cpp_utils::GetClassFromName("RSG", "IRejectable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "InvokeResolveHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, rejectable});
  }
};
// Writing MetadataGetter for method: RSG::Promise::InvokeProgressHandler
// Il2CppName: InvokeProgressHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::System::Action_1<float>*, ::RSG::IRejectable*, float)>(&RSG::Promise::InvokeProgressHandler)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* rejectable = &::il2cpp_utils::GetClassFromName("RSG", "IRejectable")->byval_arg;
    static auto* progress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "InvokeProgressHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, rejectable, progress});
  }
};
// Writing MetadataGetter for method: RSG::Promise::ClearHandlers
// Il2CppName: ClearHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)()>(&RSG::Promise::ClearHandlers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "ClearHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RSG::Promise::InvokeRejectHandlers
// Il2CppName: InvokeRejectHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::System::Exception*)>(&RSG::Promise::InvokeRejectHandlers)> {
  static const MethodInfo* get() {
    static auto* ex = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "InvokeRejectHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ex});
  }
};
// Writing MetadataGetter for method: RSG::Promise::InvokeResolveHandlers
// Il2CppName: InvokeResolveHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)()>(&RSG::Promise::InvokeResolveHandlers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "InvokeResolveHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RSG::Promise::InvokeProgressHandlers
// Il2CppName: InvokeProgressHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(float)>(&RSG::Promise::InvokeProgressHandlers)> {
  static const MethodInfo* get() {
    static auto* progress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "InvokeProgressHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{progress});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Reject
// Il2CppName: Reject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::System::Exception*)>(&RSG::Promise::Reject)> {
  static const MethodInfo* get() {
    static auto* ex = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Reject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ex});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Resolve
// Il2CppName: Resolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)()>(&RSG::Promise::Resolve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Resolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RSG::Promise::ReportProgress
// Il2CppName: ReportProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(float)>(&RSG::Promise::ReportProgress)> {
  static const MethodInfo* get() {
    static auto* progress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "ReportProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{progress});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Done
// Il2CppName: Done
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::System::Action*, ::System::Action_1<::System::Exception*>*)>(&RSG::Promise::Done)> {
  static const MethodInfo* get() {
    static auto* onResolved = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* onRejected = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Exception")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Done", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onResolved, onRejected});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Done
// Il2CppName: Done
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::System::Action*)>(&RSG::Promise::Done)> {
  static const MethodInfo* get() {
    static auto* onResolved = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Done", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onResolved});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Done
// Il2CppName: Done
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)()>(&RSG::Promise::Done)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Done", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RSG::Promise::WithName
// Il2CppName: WithName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (RSG::Promise::*)(::StringW)>(&RSG::Promise::WithName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "WithName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Catch
// Il2CppName: Catch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (RSG::Promise::*)(::System::Action_1<::System::Exception*>*)>(&RSG::Promise::Catch)> {
  static const MethodInfo* get() {
    static auto* onRejected = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Exception")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Catch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onRejected});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Then
// Il2CppName: Then
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: RSG::Promise::Then
// Il2CppName: Then
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (RSG::Promise::*)(::System::Func_1<::RSG::IPromise*>*)>(&RSG::Promise::Then)> {
  static const MethodInfo* get() {
    static auto* onResolved = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("RSG", "IPromise")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Then", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onResolved});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Then
// Il2CppName: Then
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (RSG::Promise::*)(::System::Action*)>(&RSG::Promise::Then)> {
  static const MethodInfo* get() {
    static auto* onResolved = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Then", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onResolved});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Then
// Il2CppName: Then
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: RSG::Promise::Then
// Il2CppName: Then
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (RSG::Promise::*)(::System::Func_1<::RSG::IPromise*>*, ::System::Action_1<::System::Exception*>*)>(&RSG::Promise::Then)> {
  static const MethodInfo* get() {
    static auto* onResolved = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("RSG", "IPromise")})->byval_arg;
    static auto* onRejected = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Exception")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Then", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onResolved, onRejected});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Then
// Il2CppName: Then
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (RSG::Promise::*)(::System::Action*, ::System::Action_1<::System::Exception*>*)>(&RSG::Promise::Then)> {
  static const MethodInfo* get() {
    static auto* onResolved = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* onRejected = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Exception")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Then", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onResolved, onRejected});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Then
// Il2CppName: Then
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: RSG::Promise::Then
// Il2CppName: Then
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (RSG::Promise::*)(::System::Func_1<::RSG::IPromise*>*, ::System::Action_1<::System::Exception*>*, ::System::Action_1<float>*)>(&RSG::Promise::Then)> {
  static const MethodInfo* get() {
    static auto* onResolved = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("RSG", "IPromise")})->byval_arg;
    static auto* onRejected = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Exception")})->byval_arg;
    static auto* onProgress = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Then", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onResolved, onRejected, onProgress});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Then
// Il2CppName: Then
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (RSG::Promise::*)(::System::Action*, ::System::Action_1<::System::Exception*>*, ::System::Action_1<float>*)>(&RSG::Promise::Then)> {
  static const MethodInfo* get() {
    static auto* onResolved = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* onRejected = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Exception")})->byval_arg;
    static auto* onProgress = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Then", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onResolved, onRejected, onProgress});
  }
};
// Writing MetadataGetter for method: RSG::Promise::ActionHandlers
// Il2CppName: ActionHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::RSG::IRejectable*, ::System::Action*, ::System::Action_1<::System::Exception*>*)>(&RSG::Promise::ActionHandlers)> {
  static const MethodInfo* get() {
    static auto* resultPromise = &::il2cpp_utils::GetClassFromName("RSG", "IRejectable")->byval_arg;
    static auto* resolveHandler = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* rejectHandler = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Exception")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "ActionHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resultPromise, resolveHandler, rejectHandler});
  }
};
// Writing MetadataGetter for method: RSG::Promise::ProgressHandlers
// Il2CppName: ProgressHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::RSG::IRejectable*, ::System::Action_1<float>*)>(&RSG::Promise::ProgressHandlers)> {
  static const MethodInfo* get() {
    static auto* resultPromise = &::il2cpp_utils::GetClassFromName("RSG", "IRejectable")->byval_arg;
    static auto* progressHandler = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "ProgressHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resultPromise, progressHandler});
  }
};
// Writing MetadataGetter for method: RSG::Promise::ThenAll
// Il2CppName: ThenAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (RSG::Promise::*)(::System::Func_1<::System::Collections::Generic::IEnumerable_1<::RSG::IPromise*>*>*)>(&RSG::Promise::ThenAll)> {
  static const MethodInfo* get() {
    static auto* chain = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("RSG", "IPromise")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "ThenAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chain});
  }
};
// Writing MetadataGetter for method: RSG::Promise::ThenAll
// Il2CppName: ThenAll
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: RSG::Promise::All
// Il2CppName: All
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (*)(::ArrayW<::RSG::IPromise*>)>(&RSG::Promise::All)> {
  static const MethodInfo* get() {
    static auto* promises = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("RSG", "IPromise"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "All", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{promises});
  }
};
// Writing MetadataGetter for method: RSG::Promise::All
// Il2CppName: All
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (*)(::System::Collections::Generic::IEnumerable_1<::RSG::IPromise*>*)>(&RSG::Promise::All)> {
  static const MethodInfo* get() {
    static auto* promises = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("RSG", "IPromise")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "All", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{promises});
  }
};
// Writing MetadataGetter for method: RSG::Promise::ThenSequence
// Il2CppName: ThenSequence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (RSG::Promise::*)(::System::Func_1<::System::Collections::Generic::IEnumerable_1<::System::Func_1<::RSG::IPromise*>*>*>*)>(&RSG::Promise::ThenSequence)> {
  static const MethodInfo* get() {
    static auto* chain = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("RSG", "IPromise")})})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "ThenSequence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chain});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Sequence
// Il2CppName: Sequence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (*)(::ArrayW<::System::Func_1<::RSG::IPromise*>*>)>(&RSG::Promise::Sequence)> {
  static const MethodInfo* get() {
    static auto* fns = &il2cpp_functions::array_class_get(::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("RSG", "IPromise")}), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Sequence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fns});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Sequence
// Il2CppName: Sequence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (*)(::System::Collections::Generic::IEnumerable_1<::System::Func_1<::RSG::IPromise*>*>*)>(&RSG::Promise::Sequence)> {
  static const MethodInfo* get() {
    static auto* fns = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("RSG", "IPromise")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Sequence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fns});
  }
};
// Writing MetadataGetter for method: RSG::Promise::ThenRace
// Il2CppName: ThenRace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (RSG::Promise::*)(::System::Func_1<::System::Collections::Generic::IEnumerable_1<::RSG::IPromise*>*>*)>(&RSG::Promise::ThenRace)> {
  static const MethodInfo* get() {
    static auto* chain = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("RSG", "IPromise")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "ThenRace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chain});
  }
};
// Writing MetadataGetter for method: RSG::Promise::ThenRace
// Il2CppName: ThenRace
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: RSG::Promise::Race
// Il2CppName: Race
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (*)(::ArrayW<::RSG::IPromise*>)>(&RSG::Promise::Race)> {
  static const MethodInfo* get() {
    static auto* promises = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("RSG", "IPromise"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Race", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{promises});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Race
// Il2CppName: Race
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (*)(::System::Collections::Generic::IEnumerable_1<::RSG::IPromise*>*)>(&RSG::Promise::Race)> {
  static const MethodInfo* get() {
    static auto* promises = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("RSG", "IPromise")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Race", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{promises});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Resolved
// Il2CppName: Resolved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (*)()>(&RSG::Promise::Resolved)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Resolved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Rejected
// Il2CppName: Rejected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (*)(::System::Exception*)>(&RSG::Promise::Rejected)> {
  static const MethodInfo* get() {
    static auto* ex = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Rejected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ex});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Finally
// Il2CppName: Finally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (RSG::Promise::*)(::System::Action*)>(&RSG::Promise::Finally)> {
  static const MethodInfo* get() {
    static auto* onComplete = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Finally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onComplete});
  }
};
// Writing MetadataGetter for method: RSG::Promise::ContinueWith
// Il2CppName: ContinueWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (RSG::Promise::*)(::System::Func_1<::RSG::IPromise*>*)>(&RSG::Promise::ContinueWith)> {
  static const MethodInfo* get() {
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("RSG", "IPromise")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "ContinueWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onComplete});
  }
};
// Writing MetadataGetter for method: RSG::Promise::ContinueWith
// Il2CppName: ContinueWith
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: RSG::Promise::Progress
// Il2CppName: Progress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (RSG::Promise::*)(::System::Action_1<float>*)>(&RSG::Promise::Progress)> {
  static const MethodInfo* get() {
    static auto* onProgress = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Progress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onProgress});
  }
};
// Writing MetadataGetter for method: RSG::Promise::PropagateUnhandledException
// Il2CppName: PropagateUnhandledException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::System::Exception*)>(&RSG::Promise::PropagateUnhandledException)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* ex = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "PropagateUnhandledException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, ex});
  }
};
// Writing MetadataGetter for method: RSG::Promise::$InvokeResolveHandlers$b__35_0
// Il2CppName: <InvokeResolveHandlers>b__35_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::RSG::Promise::ResolveHandler)>(&RSG::Promise::$InvokeResolveHandlers$b__35_0)> {
  static const MethodInfo* get() {
    static auto* handler = &::il2cpp_utils::GetClassFromName("RSG", "Promise/ResolveHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "<InvokeResolveHandlers>b__35_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handler});
  }
};
// Writing MetadataGetter for method: RSG::Promise::$Done$b__40_0
// Il2CppName: <Done>b__40_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::System::Exception*)>(&RSG::Promise::$Done$b__40_0)> {
  static const MethodInfo* get() {
    static auto* ex = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "<Done>b__40_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ex});
  }
};
// Writing MetadataGetter for method: RSG::Promise::$Done$b__41_0
// Il2CppName: <Done>b__41_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::System::Exception*)>(&RSG::Promise::$Done$b__41_0)> {
  static const MethodInfo* get() {
    static auto* ex = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "<Done>b__41_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ex});
  }
};
// Writing MetadataGetter for method: RSG::Promise::$Done$b__42_0
// Il2CppName: <Done>b__42_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::System::Exception*)>(&RSG::Promise::$Done$b__42_0)> {
  static const MethodInfo* get() {
    static auto* ex = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "<Done>b__42_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ex});
  }
};
