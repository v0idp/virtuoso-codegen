// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RSG.IPromiseTimer
#include "RSG/IPromiseTimer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RSG
namespace RSG {
  // Forward declaring type: PredicateWait
  class PredicateWait;
  // Forward declaring type: IPromise
  class IPromise;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: LinkedList`1<T>
  template<typename T>
  class LinkedList_1;
  // Forward declaring type: LinkedListNode`1<T>
  template<typename T>
  class LinkedListNode_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Completed forward declares
// Type namespace: RSG
namespace RSG {
  // Forward declaring type: PromiseTimer
  class PromiseTimer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RSG::PromiseTimer);
DEFINE_IL2CPP_ARG_TYPE(::RSG::PromiseTimer*, "RSG", "PromiseTimer");
// Type namespace: RSG
namespace RSG {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: RSG.PromiseTimer
  // [TokenAttribute] Offset: FFFFFFFF
  class PromiseTimer : public ::Il2CppObject/*, public ::RSG::IPromiseTimer*/ {
    public:
    // Nested type: ::RSG::PromiseTimer::$$c__DisplayClass3_0
    class $$c__DisplayClass3_0;
    // Nested type: ::RSG::PromiseTimer::$$c__DisplayClass4_0
    class $$c__DisplayClass4_0;
    public:
    // private System.Single curTime
    // Size: 0x4
    // Offset: 0x10
    float curTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 curFrame
    // Size: 0x4
    // Offset: 0x14
    int curFrame;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Collections.Generic.LinkedList`1<RSG.PredicateWait> waiting
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::LinkedList_1<::RSG::PredicateWait*>* waiting;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::LinkedList_1<::RSG::PredicateWait*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::RSG::IPromiseTimer
    operator ::RSG::IPromiseTimer() noexcept {
      return *reinterpret_cast<::RSG::IPromiseTimer*>(this);
    }
    // Get instance field reference: private System.Single curTime
    [[deprecated]] float& dyn_curTime();
    // Get instance field reference: private System.Int32 curFrame
    [[deprecated]] int& dyn_curFrame();
    // Get instance field reference: private readonly System.Collections.Generic.LinkedList`1<RSG.PredicateWait> waiting
    [[deprecated]] ::System::Collections::Generic::LinkedList_1<::RSG::PredicateWait*>*& dyn_waiting();
    // public RSG.IPromise WaitFor(System.Single seconds)
    // Offset: 0xB29D2C
    ::RSG::IPromise* WaitFor(float seconds);
    // public RSG.IPromise WaitWhile(System.Func`2<RSG.TimeData,System.Boolean> predicate)
    // Offset: 0xB29EDC
    ::RSG::IPromise* WaitWhile(::System::Func_2<::RSG::TimeData, bool>* predicate);
    // public RSG.IPromise WaitUntil(System.Func`2<RSG.TimeData,System.Boolean> predicate)
    // Offset: 0xB29E04
    ::RSG::IPromise* WaitUntil(::System::Func_2<::RSG::TimeData, bool>* predicate);
    // public System.Boolean Cancel(RSG.IPromise promise)
    // Offset: 0xB29FAC
    bool Cancel(::RSG::IPromise* promise);
    // private System.Collections.Generic.LinkedListNode`1<RSG.PredicateWait> FindInWaiting(RSG.IPromise promise)
    // Offset: 0xB2A0FC
    ::System::Collections::Generic::LinkedListNode_1<::RSG::PredicateWait*>* FindInWaiting(::RSG::IPromise* promise);
    // public System.Void Update(System.Single deltaTime)
    // Offset: 0xB2A2B8
    void Update(float deltaTime);
    // private System.Collections.Generic.LinkedListNode`1<RSG.PredicateWait> RemoveNode(System.Collections.Generic.LinkedListNode`1<RSG.PredicateWait> node)
    // Offset: 0xB2A5E0
    ::System::Collections::Generic::LinkedListNode_1<::RSG::PredicateWait*>* RemoveNode(::System::Collections::Generic::LinkedListNode_1<::RSG::PredicateWait*>* node);
    // public System.Void .ctor()
    // Offset: 0xB2A678
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PromiseTimer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::RSG::PromiseTimer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PromiseTimer*, creationType>()));
    }
  }; // RSG.PromiseTimer
  #pragma pack(pop)
  static check_size<sizeof(PromiseTimer), 24 + sizeof(::System::Collections::Generic::LinkedList_1<::RSG::PredicateWait*>*)> __RSG_PromiseTimerSizeCheck;
  static_assert(sizeof(PromiseTimer) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RSG::PromiseTimer::WaitFor
// Il2CppName: WaitFor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (RSG::PromiseTimer::*)(float)>(&RSG::PromiseTimer::WaitFor)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::PromiseTimer*), "WaitFor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds});
  }
};
// Writing MetadataGetter for method: RSG::PromiseTimer::WaitWhile
// Il2CppName: WaitWhile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (RSG::PromiseTimer::*)(::System::Func_2<::RSG::TimeData, bool>*)>(&RSG::PromiseTimer::WaitWhile)> {
  static const MethodInfo* get() {
    static auto* predicate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("RSG", "TimeData"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::PromiseTimer*), "WaitWhile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{predicate});
  }
};
// Writing MetadataGetter for method: RSG::PromiseTimer::WaitUntil
// Il2CppName: WaitUntil
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::IPromise* (RSG::PromiseTimer::*)(::System::Func_2<::RSG::TimeData, bool>*)>(&RSG::PromiseTimer::WaitUntil)> {
  static const MethodInfo* get() {
    static auto* predicate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("RSG", "TimeData"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::PromiseTimer*), "WaitUntil", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{predicate});
  }
};
// Writing MetadataGetter for method: RSG::PromiseTimer::Cancel
// Il2CppName: Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RSG::PromiseTimer::*)(::RSG::IPromise*)>(&RSG::PromiseTimer::Cancel)> {
  static const MethodInfo* get() {
    static auto* promise = &::il2cpp_utils::GetClassFromName("RSG", "IPromise")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::PromiseTimer*), "Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{promise});
  }
};
// Writing MetadataGetter for method: RSG::PromiseTimer::FindInWaiting
// Il2CppName: FindInWaiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::LinkedListNode_1<::RSG::PredicateWait*>* (RSG::PromiseTimer::*)(::RSG::IPromise*)>(&RSG::PromiseTimer::FindInWaiting)> {
  static const MethodInfo* get() {
    static auto* promise = &::il2cpp_utils::GetClassFromName("RSG", "IPromise")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::PromiseTimer*), "FindInWaiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{promise});
  }
};
// Writing MetadataGetter for method: RSG::PromiseTimer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::PromiseTimer::*)(float)>(&RSG::PromiseTimer::Update)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::PromiseTimer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime});
  }
};
// Writing MetadataGetter for method: RSG::PromiseTimer::RemoveNode
// Il2CppName: RemoveNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::LinkedListNode_1<::RSG::PredicateWait*>* (RSG::PromiseTimer::*)(::System::Collections::Generic::LinkedListNode_1<::RSG::PredicateWait*>*)>(&RSG::PromiseTimer::RemoveNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "LinkedListNode`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("RSG", "PredicateWait")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::PromiseTimer*), "RemoveNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: RSG::PromiseTimer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
