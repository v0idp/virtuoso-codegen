// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RSG.PromiseTimer
#include "RSG/PromiseTimer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RSG
namespace RSG {
  // Forward declaring type: TimeData
  struct TimeData;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RSG::PromiseTimer::$$c__DisplayClass3_0);
DEFINE_IL2CPP_ARG_TYPE(::RSG::PromiseTimer::$$c__DisplayClass3_0*, "RSG", "PromiseTimer/<>c__DisplayClass3_0");
// Type namespace: RSG
namespace RSG {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: RSG.PromiseTimer/RSG.<>c__DisplayClass3_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class PromiseTimer::$$c__DisplayClass3_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Single seconds
    // Size: 0x4
    // Offset: 0x10
    float seconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating conversion operator: operator float
    constexpr operator float() const noexcept {
      return seconds;
    }
    // Get instance field reference: public System.Single seconds
    [[deprecated("Use field access instead!")]] float& dyn_seconds();
    // public System.Void .ctor()
    // Offset: 0x8CF7B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PromiseTimer::$$c__DisplayClass3_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::RSG::PromiseTimer::$$c__DisplayClass3_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PromiseTimer::$$c__DisplayClass3_0*, creationType>()));
    }
    // System.Boolean <WaitFor>b__0(RSG.TimeData t)
    // Offset: 0x8CF7BC
    bool $WaitFor$b__0(::RSG::TimeData t);
  }; // RSG.PromiseTimer/RSG.<>c__DisplayClass3_0
  #pragma pack(pop)
  static check_size<sizeof(PromiseTimer::$$c__DisplayClass3_0), 16 + sizeof(float)> __RSG_PromiseTimer_$$c__DisplayClass3_0SizeCheck;
  static_assert(sizeof(PromiseTimer::$$c__DisplayClass3_0) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RSG::PromiseTimer::$$c__DisplayClass3_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: RSG::PromiseTimer::$$c__DisplayClass3_0::$WaitFor$b__0
// Il2CppName: <WaitFor>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RSG::PromiseTimer::$$c__DisplayClass3_0::*)(::RSG::TimeData)>(&RSG::PromiseTimer::$$c__DisplayClass3_0::$WaitFor$b__0)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("RSG", "TimeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::PromiseTimer::$$c__DisplayClass3_0*), "<WaitFor>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
