// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.EventArgs
#include "System/EventArgs.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: RSG
namespace RSG {
  // Forward declaring type: ExceptionEventArgs
  class ExceptionEventArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RSG::ExceptionEventArgs);
DEFINE_IL2CPP_ARG_TYPE(::RSG::ExceptionEventArgs*, "RSG", "ExceptionEventArgs");
// Type namespace: RSG
namespace RSG {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: RSG.ExceptionEventArgs
  // [TokenAttribute] Offset: FFFFFFFF
  class ExceptionEventArgs : public ::System::EventArgs {
    public:
    public:
    // private System.Exception <Exception>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Exception* Exception;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Exception*
    constexpr operator ::System::Exception*() const noexcept {
      return Exception;
    }
    // Get instance field reference: private System.Exception <Exception>k__BackingField
    [[deprecated]] ::System::Exception*& dyn_$Exception$k__BackingField();
    // public System.Exception get_Exception()
    // Offset: 0x8F03B0
    ::System::Exception* get_Exception();
    // private System.Void set_Exception(System.Exception value)
    // Offset: 0x8F03B8
    void set_Exception(::System::Exception* value);
    // System.Void .ctor(System.Exception exception)
    // Offset: 0x8F0338
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ExceptionEventArgs* New_ctor(::System::Exception* exception) {
      static auto ___internal__logger = ::Logger::get().WithContext("::RSG::ExceptionEventArgs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ExceptionEventArgs*, creationType>(exception)));
    }
  }; // RSG.ExceptionEventArgs
  #pragma pack(pop)
  static check_size<sizeof(ExceptionEventArgs), 16 + sizeof(::System::Exception*)> __RSG_ExceptionEventArgsSizeCheck;
  static_assert(sizeof(ExceptionEventArgs) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RSG::ExceptionEventArgs::get_Exception
// Il2CppName: get_Exception
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (RSG::ExceptionEventArgs::*)()>(&RSG::ExceptionEventArgs::get_Exception)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RSG::ExceptionEventArgs*), "get_Exception", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RSG::ExceptionEventArgs::set_Exception
// Il2CppName: set_Exception
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::ExceptionEventArgs::*)(::System::Exception*)>(&RSG::ExceptionEventArgs::set_Exception)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::ExceptionEventArgs*), "set_Exception", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: RSG::ExceptionEventArgs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
