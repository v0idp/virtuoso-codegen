// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RSG.Promise
#include "RSG/Promise.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::RSG::Promise::$$c__DisplayClass71_0_1, "RSG", "Promise/<>c__DisplayClass71_0`1");
// Type namespace: RSG
namespace RSG {
  // WARNING Size may be invalid!
  // Autogenerated type: RSG.Promise/RSG.<>c__DisplayClass71_0`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  template<typename ConvertedT>
  class Promise::$$c__DisplayClass71_0_1 : public ::Il2CppObject {
    public:
    public:
    // public RSG.Promise promise
    // Size: 0x8
    // Offset: 0x0
    ::RSG::Promise* promise;
    // Field size check
    static_assert(sizeof(::RSG::Promise*) == 0x8);
    public:
    // Creating conversion operator: operator ::RSG::Promise*
    constexpr operator ::RSG::Promise*() const noexcept {
      return promise;
    }
    // Autogenerated instance field getter
    // Get instance field: public RSG.Promise promise
    [[deprecated]] ::RSG::Promise*& dyn_promise() {
      static auto ___internal__logger = ::Logger::get().WithContext("::RSG::Promise::$$c__DisplayClass71_0_1::dyn_promise");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "promise"))->offset;
      return *reinterpret_cast<::RSG::Promise**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // System.Void <ContinueWith>b__0()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void $ContinueWith$b__0() {
      static auto ___internal__logger = ::Logger::get().WithContext("::RSG::Promise::$$c__DisplayClass71_0_1::<ContinueWith>b__0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ContinueWith>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // System.Void <ContinueWith>b__1(System.Exception e)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void $ContinueWith$b__1(::System::Exception* e) {
      static auto ___internal__logger = ::Logger::get().WithContext("::RSG::Promise::$$c__DisplayClass71_0_1::<ContinueWith>b__1");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ContinueWith>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Promise::$$c__DisplayClass71_0_1<ConvertedT>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::RSG::Promise::$$c__DisplayClass71_0_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Promise::$$c__DisplayClass71_0_1<ConvertedT>*, creationType>()));
    }
  }; // RSG.Promise/RSG.<>c__DisplayClass71_0`1
  // Could not write size check! Type: RSG.Promise/RSG.<>c__DisplayClass71_0`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
