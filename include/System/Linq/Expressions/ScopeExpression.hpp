// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Linq.Expressions.BlockExpression
#include "System/Linq/Expressions/BlockExpression.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: System::Linq::Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: ParameterExpression
  class ParameterExpression;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Completed forward declares
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: ScopeExpression
  class ScopeExpression;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::ScopeExpression);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::ScopeExpression*, "System.Linq.Expressions", "ScopeExpression");
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.ScopeExpression
  // [TokenAttribute] Offset: FFFFFFFF
  class ScopeExpression : public ::System::Linq::Expressions::BlockExpression {
    public:
    public:
    // private System.Collections.Generic.IReadOnlyList`1<System.Linq.Expressions.ParameterExpression> _variables
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::IReadOnlyList_1<::System::Linq::Expressions::ParameterExpression*>* variables;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IReadOnlyList_1<::System::Linq::Expressions::ParameterExpression*>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::IReadOnlyList_1<::System::Linq::Expressions::ParameterExpression*>*
    constexpr operator ::System::Collections::Generic::IReadOnlyList_1<::System::Linq::Expressions::ParameterExpression*>*() const noexcept {
      return variables;
    }
    // Get instance field reference: private System.Collections.Generic.IReadOnlyList`1<System.Linq.Expressions.ParameterExpression> _variables
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::System::Linq::Expressions::ParameterExpression*>*& dyn__variables();
    // protected System.Collections.Generic.IReadOnlyList`1<System.Linq.Expressions.ParameterExpression> get_VariablesList()
    // Offset: 0xE99DD4
    ::System::Collections::Generic::IReadOnlyList_1<::System::Linq::Expressions::ParameterExpression*>* get_VariablesList();
    // System.Void .ctor(System.Collections.Generic.IReadOnlyList`1<System.Linq.Expressions.ParameterExpression> variables)
    // Offset: 0xE99B28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScopeExpression* New_ctor(::System::Collections::Generic::IReadOnlyList_1<::System::Linq::Expressions::ParameterExpression*>* variables) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::ScopeExpression::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScopeExpression*, creationType>(variables)));
    }
    // System.Collections.Generic.IReadOnlyList`1<System.Linq.Expressions.ParameterExpression> ReuseOrValidateVariables(System.Collections.ObjectModel.ReadOnlyCollection`1<System.Linq.Expressions.ParameterExpression> variables)
    // Offset: 0xE99CE8
    ::System::Collections::Generic::IReadOnlyList_1<::System::Linq::Expressions::ParameterExpression*>* ReuseOrValidateVariables(::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Linq::Expressions::ParameterExpression*>* variables);
    // override System.Collections.ObjectModel.ReadOnlyCollection`1<System.Linq.Expressions.ParameterExpression> GetOrMakeVariables()
    // Offset: 0xE99D88
    // Implemented from: System.Linq.Expressions.BlockExpression
    // Base method: System.Collections.ObjectModel.ReadOnlyCollection`1<System.Linq.Expressions.ParameterExpression> BlockExpression::GetOrMakeVariables()
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Linq::Expressions::ParameterExpression*>* GetOrMakeVariables();
  }; // System.Linq.Expressions.ScopeExpression
  #pragma pack(pop)
  static check_size<sizeof(ScopeExpression), 16 + sizeof(::System::Collections::Generic::IReadOnlyList_1<::System::Linq::Expressions::ParameterExpression*>*)> __System_Linq_Expressions_ScopeExpressionSizeCheck;
  static_assert(sizeof(ScopeExpression) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::ScopeExpression::get_VariablesList
// Il2CppName: get_VariablesList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyList_1<::System::Linq::Expressions::ParameterExpression*>* (System::Linq::Expressions::ScopeExpression::*)()>(&System::Linq::Expressions::ScopeExpression::get_VariablesList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ScopeExpression*), "get_VariablesList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ScopeExpression::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::ScopeExpression::ReuseOrValidateVariables
// Il2CppName: ReuseOrValidateVariables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyList_1<::System::Linq::Expressions::ParameterExpression*>* (System::Linq::Expressions::ScopeExpression::*)(::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Linq::Expressions::ParameterExpression*>*)>(&System::Linq::Expressions::ScopeExpression::ReuseOrValidateVariables)> {
  static const MethodInfo* get() {
    static auto* variables = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.ObjectModel", "ReadOnlyCollection`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "ParameterExpression")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ScopeExpression*), "ReuseOrValidateVariables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{variables});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ScopeExpression::GetOrMakeVariables
// Il2CppName: GetOrMakeVariables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Linq::Expressions::ParameterExpression*>* (System::Linq::Expressions::ScopeExpression::*)()>(&System::Linq::Expressions::ScopeExpression::GetOrMakeVariables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ScopeExpression*), "GetOrMakeVariables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
