// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Linq.Expressions.Expression
#include "System/Linq/Expressions/Expression.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Linq::Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: LabelTarget
  class LabelTarget;
  // Forward declaring type: ExpressionType
  struct ExpressionType;
  // Forward declaring type: ExpressionVisitor
  class ExpressionVisitor;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: LoopExpression
  class LoopExpression;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::LoopExpression);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::LoopExpression*, "System.Linq.Expressions", "LoopExpression");
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.LoopExpression
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: 6A1134
  class LoopExpression : public ::System::Linq::Expressions::Expression {
    public:
    public:
    // private readonly System.Linq.Expressions.Expression <Body>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Linq::Expressions::Expression* Body;
    // Field size check
    static_assert(sizeof(::System::Linq::Expressions::Expression*) == 0x8);
    // private readonly System.Linq.Expressions.LabelTarget <BreakLabel>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Linq::Expressions::LabelTarget* BreakLabel;
    // Field size check
    static_assert(sizeof(::System::Linq::Expressions::LabelTarget*) == 0x8);
    // private readonly System.Linq.Expressions.LabelTarget <ContinueLabel>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::System::Linq::Expressions::LabelTarget* ContinueLabel;
    // Field size check
    static_assert(sizeof(::System::Linq::Expressions::LabelTarget*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Linq.Expressions.Expression <Body>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Linq::Expressions::Expression*& dyn_$Body$k__BackingField();
    // Get instance field reference: private readonly System.Linq.Expressions.LabelTarget <BreakLabel>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Linq::Expressions::LabelTarget*& dyn_$BreakLabel$k__BackingField();
    // Get instance field reference: private readonly System.Linq.Expressions.LabelTarget <ContinueLabel>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Linq::Expressions::LabelTarget*& dyn_$ContinueLabel$k__BackingField();
    // public System.Linq.Expressions.Expression get_Body()
    // Offset: 0xE90DEC
    ::System::Linq::Expressions::Expression* get_Body();
    // public System.Linq.Expressions.LabelTarget get_BreakLabel()
    // Offset: 0xE90DF4
    ::System::Linq::Expressions::LabelTarget* get_BreakLabel();
    // public System.Linq.Expressions.LabelTarget get_ContinueLabel()
    // Offset: 0xE90DFC
    ::System::Linq::Expressions::LabelTarget* get_ContinueLabel();
    // System.Void .ctor(System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break, System.Linq.Expressions.LabelTarget continue)
    // Offset: 0xE90CC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoopExpression* New_ctor(::System::Linq::Expressions::Expression* body, ::System::Linq::Expressions::LabelTarget* _break, ::System::Linq::Expressions::LabelTarget* _continue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::LoopExpression::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoopExpression*, creationType>(body, _break, _continue)));
    }
    // public System.Linq.Expressions.LoopExpression Update(System.Linq.Expressions.LabelTarget breakLabel, System.Linq.Expressions.LabelTarget continueLabel, System.Linq.Expressions.Expression body)
    // Offset: 0xE90E30
    ::System::Linq::Expressions::LoopExpression* Update(::System::Linq::Expressions::LabelTarget* breakLabel, ::System::Linq::Expressions::LabelTarget* continueLabel, ::System::Linq::Expressions::Expression* body);
    // public override System.Type get_Type()
    // Offset: 0xE90D50
    // Implemented from: System.Linq.Expressions.Expression
    // Base method: System.Type Expression::get_Type()
    ::System::Type* get_Type();
    // public override System.Linq.Expressions.ExpressionType get_NodeType()
    // Offset: 0xE90DE4
    // Implemented from: System.Linq.Expressions.Expression
    // Base method: System.Linq.Expressions.ExpressionType Expression::get_NodeType()
    ::System::Linq::Expressions::ExpressionType get_NodeType();
    // protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor)
    // Offset: 0xE90E04
    // Implemented from: System.Linq.Expressions.Expression
    // Base method: System.Linq.Expressions.Expression Expression::Accept(System.Linq.Expressions.ExpressionVisitor visitor)
    ::System::Linq::Expressions::Expression* Accept(::System::Linq::Expressions::ExpressionVisitor* visitor);
  }; // System.Linq.Expressions.LoopExpression
  #pragma pack(pop)
  static check_size<sizeof(LoopExpression), 32 + sizeof(::System::Linq::Expressions::LabelTarget*)> __System_Linq_Expressions_LoopExpressionSizeCheck;
  static_assert(sizeof(LoopExpression) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::LoopExpression::get_Body
// Il2CppName: get_Body
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::LoopExpression::*)()>(&System::Linq::Expressions::LoopExpression::get_Body)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LoopExpression*), "get_Body", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LoopExpression::get_BreakLabel
// Il2CppName: get_BreakLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::LabelTarget* (System::Linq::Expressions::LoopExpression::*)()>(&System::Linq::Expressions::LoopExpression::get_BreakLabel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LoopExpression*), "get_BreakLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LoopExpression::get_ContinueLabel
// Il2CppName: get_ContinueLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::LabelTarget* (System::Linq::Expressions::LoopExpression::*)()>(&System::Linq::Expressions::LoopExpression::get_ContinueLabel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LoopExpression*), "get_ContinueLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LoopExpression::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::LoopExpression::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::LoopExpression* (System::Linq::Expressions::LoopExpression::*)(::System::Linq::Expressions::LabelTarget*, ::System::Linq::Expressions::LabelTarget*, ::System::Linq::Expressions::Expression*)>(&System::Linq::Expressions::LoopExpression::Update)> {
  static const MethodInfo* get() {
    static auto* breakLabel = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "LabelTarget")->byval_arg;
    static auto* continueLabel = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "LabelTarget")->byval_arg;
    static auto* body = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "Expression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LoopExpression*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{breakLabel, continueLabel, body});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LoopExpression::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Linq::Expressions::LoopExpression::*)()>(&System::Linq::Expressions::LoopExpression::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LoopExpression*), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LoopExpression::get_NodeType
// Il2CppName: get_NodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::ExpressionType (System::Linq::Expressions::LoopExpression::*)()>(&System::Linq::Expressions::LoopExpression::get_NodeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LoopExpression*), "get_NodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LoopExpression::Accept
// Il2CppName: Accept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::LoopExpression::*)(::System::Linq::Expressions::ExpressionVisitor*)>(&System::Linq::Expressions::LoopExpression::Accept)> {
  static const MethodInfo* get() {
    static auto* visitor = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "ExpressionVisitor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LoopExpression*), "Accept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{visitor});
  }
};
