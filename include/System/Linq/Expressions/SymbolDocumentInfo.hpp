// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: SymbolDocumentInfo
  class SymbolDocumentInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::SymbolDocumentInfo);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::SymbolDocumentInfo*, "System.Linq.Expressions", "SymbolDocumentInfo");
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.SymbolDocumentInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class SymbolDocumentInfo : public ::Il2CppObject {
    public:
    public:
    // private readonly System.String <FileName>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW FileName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return FileName;
    }
    // Get static field: static readonly System.Guid DocumentType_Text
    static ::System::Guid _get_DocumentType_Text();
    // Set static field: static readonly System.Guid DocumentType_Text
    static void _set_DocumentType_Text(::System::Guid value);
    // Get instance field reference: private readonly System.String <FileName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$FileName$k__BackingField();
    // public System.String get_FileName()
    // Offset: 0xE9DD54
    ::StringW get_FileName();
    // static private System.Void .cctor()
    // Offset: 0xE9DD5C
    static void _cctor();
  }; // System.Linq.Expressions.SymbolDocumentInfo
  #pragma pack(pop)
  static check_size<sizeof(SymbolDocumentInfo), 16 + sizeof(::StringW)> __System_Linq_Expressions_SymbolDocumentInfoSizeCheck;
  static_assert(sizeof(SymbolDocumentInfo) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::SymbolDocumentInfo::get_FileName
// Il2CppName: get_FileName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Linq::Expressions::SymbolDocumentInfo::*)()>(&System::Linq::Expressions::SymbolDocumentInfo::get_FileName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::SymbolDocumentInfo*), "get_FileName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::SymbolDocumentInfo::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Linq::Expressions::SymbolDocumentInfo::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::SymbolDocumentInfo*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
