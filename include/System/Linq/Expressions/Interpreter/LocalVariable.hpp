// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: LocalVariable
  class LocalVariable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::Interpreter::LocalVariable);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::Interpreter::LocalVariable*, "System.Linq.Expressions.Interpreter", "LocalVariable");
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.Interpreter.LocalVariable
  // [TokenAttribute] Offset: FFFFFFFF
  class LocalVariable : public ::Il2CppObject {
    public:
    public:
    // public readonly System.Int32 Index
    // Size: 0x4
    // Offset: 0x10
    int Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _flags
    // Size: 0x4
    // Offset: 0x14
    int flags;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public readonly System.Int32 Index
    [[deprecated("Use field access instead!")]] int& dyn_Index();
    // Get instance field reference: private System.Int32 _flags
    [[deprecated("Use field access instead!")]] int& dyn__flags();
    // public System.Boolean get_IsBoxed()
    // Offset: 0xE90394
    bool get_IsBoxed();
    // public System.Void set_IsBoxed(System.Boolean value)
    // Offset: 0xE903A0
    void set_IsBoxed(bool value);
    // public System.Boolean get_InClosure()
    // Offset: 0xE903BC
    bool get_InClosure();
    // System.Void .ctor(System.Int32 index, System.Boolean closure)
    // Offset: 0xE903C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalVariable* New_ctor(int index, bool closure) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::Interpreter::LocalVariable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalVariable*, creationType>(index, closure)));
    }
    // public override System.String ToString()
    // Offset: 0xE90418
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // System.Linq.Expressions.Interpreter.LocalVariable
  #pragma pack(pop)
  static check_size<sizeof(LocalVariable), 20 + sizeof(int)> __System_Linq_Expressions_Interpreter_LocalVariableSizeCheck;
  static_assert(sizeof(LocalVariable) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LocalVariable::get_IsBoxed
// Il2CppName: get_IsBoxed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Linq::Expressions::Interpreter::LocalVariable::*)()>(&System::Linq::Expressions::Interpreter::LocalVariable::get_IsBoxed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LocalVariable*), "get_IsBoxed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LocalVariable::set_IsBoxed
// Il2CppName: set_IsBoxed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::LocalVariable::*)(bool)>(&System::Linq::Expressions::Interpreter::LocalVariable::set_IsBoxed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LocalVariable*), "set_IsBoxed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LocalVariable::get_InClosure
// Il2CppName: get_InClosure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Linq::Expressions::Interpreter::LocalVariable::*)()>(&System::Linq::Expressions::Interpreter::LocalVariable::get_InClosure)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LocalVariable*), "get_InClosure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LocalVariable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LocalVariable::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Linq::Expressions::Interpreter::LocalVariable::*)()>(&System::Linq::Expressions::Interpreter::LocalVariable::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LocalVariable*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
