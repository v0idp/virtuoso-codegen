// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Linq.Expressions.Interpreter.Instruction
#include "System/Linq/Expressions/Interpreter/Instruction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: FieldInfo
  class FieldInfo;
}
// Completed forward declares
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: FieldInstruction
  class FieldInstruction;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::Interpreter::FieldInstruction);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::Interpreter::FieldInstruction*, "System.Linq.Expressions.Interpreter", "FieldInstruction");
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.Interpreter.FieldInstruction
  // [TokenAttribute] Offset: FFFFFFFF
  class FieldInstruction : public ::System::Linq::Expressions::Interpreter::Instruction {
    public:
    public:
    // protected readonly System.Reflection.FieldInfo _field
    // Size: 0x8
    // Offset: 0x10
    ::System::Reflection::FieldInfo* field;
    // Field size check
    static_assert(sizeof(::System::Reflection::FieldInfo*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Reflection::FieldInfo*
    constexpr operator ::System::Reflection::FieldInfo*() const noexcept {
      return field;
    }
    // Get instance field reference: protected readonly System.Reflection.FieldInfo _field
    [[deprecated("Use field access instead!")]] ::System::Reflection::FieldInfo*& dyn__field();
    // public System.Void .ctor(System.Reflection.FieldInfo field)
    // Offset: 0xF14714
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FieldInstruction* New_ctor(::System::Reflection::FieldInfo* field) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::Interpreter::FieldInstruction::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FieldInstruction*, creationType>(field)));
    }
    // public override System.String ToString()
    // Offset: 0xF14748
    // Implemented from: System.Linq.Expressions.Interpreter.Instruction
    // Base method: System.String Instruction::ToString()
    ::StringW ToString();
  }; // System.Linq.Expressions.Interpreter.FieldInstruction
  #pragma pack(pop)
  static check_size<sizeof(FieldInstruction), 16 + sizeof(::System::Reflection::FieldInfo*)> __System_Linq_Expressions_Interpreter_FieldInstructionSizeCheck;
  static_assert(sizeof(FieldInstruction) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::FieldInstruction::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::FieldInstruction::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Linq::Expressions::Interpreter::FieldInstruction::*)()>(&System::Linq::Expressions::Interpreter::FieldInstruction::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::FieldInstruction*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
