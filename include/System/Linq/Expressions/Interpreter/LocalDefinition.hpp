// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Linq::Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: ParameterExpression
  class ParameterExpression;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: LocalDefinition
  struct LocalDefinition;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::Interpreter::LocalDefinition, "System.Linq.Expressions.Interpreter", "LocalDefinition");
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Linq.Expressions.Interpreter.LocalDefinition
  // [TokenAttribute] Offset: FFFFFFFF
  struct LocalDefinition/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.Int32 <Index>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Index and: Parameter
    char __padding0[0x4] = {};
    // private readonly System.Linq.Expressions.ParameterExpression <Parameter>k__BackingField
    // Size: 0x8
    // Offset: 0x8
    ::System::Linq::Expressions::ParameterExpression* Parameter;
    // Field size check
    static_assert(sizeof(::System::Linq::Expressions::ParameterExpression*) == 0x8);
    public:
    // Creating value type constructor for type: LocalDefinition
    constexpr LocalDefinition(int Index_ = {}, ::System::Linq::Expressions::ParameterExpression* Parameter_ = {}) noexcept : Index{Index_}, Parameter{Parameter_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly System.Int32 <Index>k__BackingField
    [[deprecated]] int& dyn_$Index$k__BackingField();
    // Get instance field reference: private readonly System.Linq.Expressions.ParameterExpression <Parameter>k__BackingField
    [[deprecated]] ::System::Linq::Expressions::ParameterExpression*& dyn_$Parameter$k__BackingField();
    // public System.Int32 get_Index()
    // Offset: 0xE90298
    int get_Index();
    // public System.Linq.Expressions.ParameterExpression get_Parameter()
    // Offset: 0xE902A0
    ::System::Linq::Expressions::ParameterExpression* get_Parameter();
    // System.Void .ctor(System.Int32 localIndex, System.Linq.Expressions.ParameterExpression parameter)
    // Offset: 0xE9028C
    // ABORTED: conflicts with another method.  LocalDefinition(int localIndex, ::System::Linq::Expressions::ParameterExpression* parameter);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xE902A8
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xE9033C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // System.Linq.Expressions.Interpreter.LocalDefinition
  #pragma pack(pop)
  static check_size<sizeof(LocalDefinition), 8 + sizeof(::System::Linq::Expressions::ParameterExpression*)> __System_Linq_Expressions_Interpreter_LocalDefinitionSizeCheck;
  static_assert(sizeof(LocalDefinition) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LocalDefinition::get_Index
// Il2CppName: get_Index
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::Interpreter::LocalDefinition::*)()>(&System::Linq::Expressions::Interpreter::LocalDefinition::get_Index)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LocalDefinition), "get_Index", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LocalDefinition::get_Parameter
// Il2CppName: get_Parameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::ParameterExpression* (System::Linq::Expressions::Interpreter::LocalDefinition::*)()>(&System::Linq::Expressions::Interpreter::LocalDefinition::get_Parameter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LocalDefinition), "get_Parameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LocalDefinition::LocalDefinition
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LocalDefinition::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Linq::Expressions::Interpreter::LocalDefinition::*)(::Il2CppObject*)>(&System::Linq::Expressions::Interpreter::LocalDefinition::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LocalDefinition), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LocalDefinition::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::Interpreter::LocalDefinition::*)()>(&System::Linq::Expressions::Interpreter::LocalDefinition::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LocalDefinition), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
