// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Linq::Expressions::Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: RuntimeLabel
  struct RuntimeLabel;
  // Forward declaring type: InstructionList
  class InstructionList;
}
// Completed forward declares
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: BranchLabel
  class BranchLabel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::Interpreter::BranchLabel);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::Interpreter::BranchLabel*, "System.Linq.Expressions.Interpreter", "BranchLabel");
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.Interpreter.BranchLabel
  // [TokenAttribute] Offset: FFFFFFFF
  class BranchLabel : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 _targetIndex
    // Size: 0x4
    // Offset: 0x10
    int targetIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _stackDepth
    // Size: 0x4
    // Offset: 0x14
    int stackDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _continuationStackDepth
    // Size: 0x4
    // Offset: 0x18
    int continuationStackDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: continuationStackDepth and: forwardBranchFixups
    char __padding2[0x4] = {};
    // private System.Collections.Generic.List`1<System.Int32> _forwardBranchFixups
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<int>* forwardBranchFixups;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Int32 <LabelIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    int LabelIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Int32 _targetIndex
    [[deprecated("Use field access instead!")]] int& dyn__targetIndex();
    // Get instance field reference: private System.Int32 _stackDepth
    [[deprecated("Use field access instead!")]] int& dyn__stackDepth();
    // Get instance field reference: private System.Int32 _continuationStackDepth
    [[deprecated("Use field access instead!")]] int& dyn__continuationStackDepth();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> _forwardBranchFixups
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn__forwardBranchFixups();
    // Get instance field reference: private System.Int32 <LabelIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$LabelIndex$k__BackingField();
    // System.Int32 get_LabelIndex()
    // Offset: 0x11F5990
    int get_LabelIndex();
    // System.Void set_LabelIndex(System.Int32 value)
    // Offset: 0x11F5998
    void set_LabelIndex(int value);
    // System.Boolean get_HasRuntimeLabel()
    // Offset: 0x11F59A0
    bool get_HasRuntimeLabel();
    // System.Int32 get_TargetIndex()
    // Offset: 0x11F59B4
    int get_TargetIndex();
    // public System.Void .ctor()
    // Offset: 0x11F5C58
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BranchLabel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::Interpreter::BranchLabel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BranchLabel*, creationType>()));
    }
    // System.Linq.Expressions.Interpreter.RuntimeLabel ToRuntimeLabel()
    // Offset: 0x11F59BC
    ::System::Linq::Expressions::Interpreter::RuntimeLabel ToRuntimeLabel();
    // System.Void Mark(System.Linq.Expressions.Interpreter.InstructionList instructions)
    // Offset: 0x11F59F8
    void Mark(::System::Linq::Expressions::Interpreter::InstructionList* instructions);
    // System.Void AddBranch(System.Linq.Expressions.Interpreter.InstructionList instructions, System.Int32 branchIndex)
    // Offset: 0x11F5B7C
    void AddBranch(::System::Linq::Expressions::Interpreter::InstructionList* instructions, int branchIndex);
    // System.Void FixupBranch(System.Linq.Expressions.Interpreter.InstructionList instructions, System.Int32 branchIndex)
    // Offset: 0x11F5B50
    void FixupBranch(::System::Linq::Expressions::Interpreter::InstructionList* instructions, int branchIndex);
  }; // System.Linq.Expressions.Interpreter.BranchLabel
  #pragma pack(pop)
  static check_size<sizeof(BranchLabel), 40 + sizeof(int)> __System_Linq_Expressions_Interpreter_BranchLabelSizeCheck;
  static_assert(sizeof(BranchLabel) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::BranchLabel::get_LabelIndex
// Il2CppName: get_LabelIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::Interpreter::BranchLabel::*)()>(&System::Linq::Expressions::Interpreter::BranchLabel::get_LabelIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::BranchLabel*), "get_LabelIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::BranchLabel::set_LabelIndex
// Il2CppName: set_LabelIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::BranchLabel::*)(int)>(&System::Linq::Expressions::Interpreter::BranchLabel::set_LabelIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::BranchLabel*), "set_LabelIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::BranchLabel::get_HasRuntimeLabel
// Il2CppName: get_HasRuntimeLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Linq::Expressions::Interpreter::BranchLabel::*)()>(&System::Linq::Expressions::Interpreter::BranchLabel::get_HasRuntimeLabel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::BranchLabel*), "get_HasRuntimeLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::BranchLabel::get_TargetIndex
// Il2CppName: get_TargetIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::Interpreter::BranchLabel::*)()>(&System::Linq::Expressions::Interpreter::BranchLabel::get_TargetIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::BranchLabel*), "get_TargetIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::BranchLabel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::BranchLabel::ToRuntimeLabel
// Il2CppName: ToRuntimeLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Interpreter::RuntimeLabel (System::Linq::Expressions::Interpreter::BranchLabel::*)()>(&System::Linq::Expressions::Interpreter::BranchLabel::ToRuntimeLabel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::BranchLabel*), "ToRuntimeLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::BranchLabel::Mark
// Il2CppName: Mark
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::BranchLabel::*)(::System::Linq::Expressions::Interpreter::InstructionList*)>(&System::Linq::Expressions::Interpreter::BranchLabel::Mark)> {
  static const MethodInfo* get() {
    static auto* instructions = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "InstructionList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::BranchLabel*), "Mark", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instructions});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::BranchLabel::AddBranch
// Il2CppName: AddBranch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::BranchLabel::*)(::System::Linq::Expressions::Interpreter::InstructionList*, int)>(&System::Linq::Expressions::Interpreter::BranchLabel::AddBranch)> {
  static const MethodInfo* get() {
    static auto* instructions = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "InstructionList")->byval_arg;
    static auto* branchIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::BranchLabel*), "AddBranch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instructions, branchIndex});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::BranchLabel::FixupBranch
// Il2CppName: FixupBranch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::BranchLabel::*)(::System::Linq::Expressions::Interpreter::InstructionList*, int)>(&System::Linq::Expressions::Interpreter::BranchLabel::FixupBranch)> {
  static const MethodInfo* get() {
    static auto* instructions = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "InstructionList")->byval_arg;
    static auto* branchIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::BranchLabel*), "FixupBranch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instructions, branchIndex});
  }
};
