// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Linq.Expressions.Interpreter.QuoteInstruction
#include "System/Linq/Expressions/Interpreter/QuoteInstruction.hpp"
// Including type: System.Linq.Expressions.ExpressionVisitor
#include "System/Linq/Expressions/ExpressionVisitor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: System::Linq::Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: ParameterExpression
  class ParameterExpression;
  // Forward declaring type: Expression
  class Expression;
  // Forward declaring type: Expression`1<TDelegate>
  template<typename TDelegate>
  class Expression_1;
  // Forward declaring type: BlockExpression
  class BlockExpression;
  // Forward declaring type: CatchBlock
  class CatchBlock;
}
// Forward declaring namespace: System::Linq::Expressions::Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: LocalVariable
  class LocalVariable;
  // Forward declaring type: InterpretedFrame
  class InterpretedFrame;
}
// Forward declaring namespace: System::Runtime::CompilerServices
namespace System::Runtime::CompilerServices {
  // Forward declaring type: IStrongBox
  class IStrongBox;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter*, "System.Linq.Expressions.Interpreter", "QuoteInstruction/ExpressionQuoter");
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.Interpreter.QuoteInstruction/System.Linq.Expressions.Interpreter.ExpressionQuoter
  // [TokenAttribute] Offset: FFFFFFFF
  class QuoteInstruction::ExpressionQuoter : public ::System::Linq::Expressions::ExpressionVisitor {
    public:
    public:
    // private readonly System.Collections.Generic.Dictionary`2<System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Interpreter.LocalVariable> _variables
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<::System::Linq::Expressions::ParameterExpression*, ::System::Linq::Expressions::Interpreter::LocalVariable*>* variables;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Linq::Expressions::ParameterExpression*, ::System::Linq::Expressions::Interpreter::LocalVariable*>*) == 0x8);
    // private readonly System.Linq.Expressions.Interpreter.InterpretedFrame _frame
    // Size: 0x8
    // Offset: 0x18
    ::System::Linq::Expressions::Interpreter::InterpretedFrame* frame;
    // Field size check
    static_assert(sizeof(::System::Linq::Expressions::Interpreter::InterpretedFrame*) == 0x8);
    // private readonly System.Collections.Generic.Stack`1<System.Collections.Generic.HashSet`1<System.Linq.Expressions.ParameterExpression>> _shadowedVars
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Stack_1<::System::Collections::Generic::HashSet_1<::System::Linq::Expressions::ParameterExpression*>*>* shadowedVars;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<::System::Collections::Generic::HashSet_1<::System::Linq::Expressions::ParameterExpression*>*>*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Interpreter.LocalVariable> _variables
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Linq::Expressions::ParameterExpression*, ::System::Linq::Expressions::Interpreter::LocalVariable*>*& dyn__variables();
    // Get instance field reference: private readonly System.Linq.Expressions.Interpreter.InterpretedFrame _frame
    [[deprecated("Use field access instead!")]] ::System::Linq::Expressions::Interpreter::InterpretedFrame*& dyn__frame();
    // Get instance field reference: private readonly System.Collections.Generic.Stack`1<System.Collections.Generic.HashSet`1<System.Linq.Expressions.ParameterExpression>> _shadowedVars
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<::System::Collections::Generic::HashSet_1<::System::Linq::Expressions::ParameterExpression*>*>*& dyn__shadowedVars();
    // System.Void .ctor(System.Collections.Generic.Dictionary`2<System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Interpreter.LocalVariable> hoistedVariables, System.Linq.Expressions.Interpreter.InterpretedFrame frame)
    // Offset: 0x16B1664
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static QuoteInstruction::ExpressionQuoter* New_ctor(::System::Collections::Generic::Dictionary_2<::System::Linq::Expressions::ParameterExpression*, ::System::Linq::Expressions::Interpreter::LocalVariable*>* hoistedVariables, ::System::Linq::Expressions::Interpreter::InterpretedFrame* frame) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<QuoteInstruction::ExpressionQuoter*, creationType>(hoistedVariables, frame)));
    }
    // private System.Runtime.CompilerServices.IStrongBox GetBox(System.Linq.Expressions.ParameterExpression variable)
    // Offset: 0x16B1B10
    ::System::Runtime::CompilerServices::IStrongBox* GetBox(::System::Linq::Expressions::ParameterExpression* variable);
    // protected internal override System.Linq.Expressions.Expression VisitLambda(System.Linq.Expressions.Expression`1<T> node)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitLambda(System.Linq.Expressions.Expression`1<T> node)
    template<class T>
    ::System::Linq::Expressions::Expression* VisitLambda(::System::Linq::Expressions::Expression_1<T>* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter::VisitLambda");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Linq::Expressions::ExpressionVisitor*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Linq::Expressions::Expression*, false>(this, ___generic__method, node);
    }
    // protected internal override System.Linq.Expressions.Expression VisitBlock(System.Linq.Expressions.BlockExpression node)
    // Offset: 0x16B16F4
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitBlock(System.Linq.Expressions.BlockExpression node)
    ::System::Linq::Expressions::Expression* VisitBlock(::System::Linq::Expressions::BlockExpression* node);
    // protected override System.Linq.Expressions.CatchBlock VisitCatchBlock(System.Linq.Expressions.CatchBlock node)
    // Offset: 0x16B188C
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.CatchBlock ExpressionVisitor::VisitCatchBlock(System.Linq.Expressions.CatchBlock node)
    ::System::Linq::Expressions::CatchBlock* VisitCatchBlock(::System::Linq::Expressions::CatchBlock* node);
    // protected internal override System.Linq.Expressions.Expression VisitParameter(System.Linq.Expressions.ParameterExpression node)
    // Offset: 0x16B1A34
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitParameter(System.Linq.Expressions.ParameterExpression node)
    ::System::Linq::Expressions::Expression* VisitParameter(::System::Linq::Expressions::ParameterExpression* node);
  }; // System.Linq.Expressions.Interpreter.QuoteInstruction/System.Linq.Expressions.Interpreter.ExpressionQuoter
  #pragma pack(pop)
  static check_size<sizeof(QuoteInstruction::ExpressionQuoter), 32 + sizeof(::System::Collections::Generic::Stack_1<::System::Collections::Generic::HashSet_1<::System::Linq::Expressions::ParameterExpression*>*>*)> __System_Linq_Expressions_Interpreter_QuoteInstruction_ExpressionQuoterSizeCheck;
  static_assert(sizeof(QuoteInstruction::ExpressionQuoter) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter::GetBox
// Il2CppName: GetBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::CompilerServices::IStrongBox* (System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter::*)(::System::Linq::Expressions::ParameterExpression*)>(&System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter::GetBox)> {
  static const MethodInfo* get() {
    static auto* variable = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "ParameterExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter*), "GetBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{variable});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter::VisitLambda
// Il2CppName: VisitLambda
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter::VisitBlock
// Il2CppName: VisitBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter::*)(::System::Linq::Expressions::BlockExpression*)>(&System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter::VisitBlock)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "BlockExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter*), "VisitBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter::VisitCatchBlock
// Il2CppName: VisitCatchBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::CatchBlock* (System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter::*)(::System::Linq::Expressions::CatchBlock*)>(&System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter::VisitCatchBlock)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "CatchBlock")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter*), "VisitCatchBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter::VisitParameter
// Il2CppName: VisitParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter::*)(::System::Linq::Expressions::ParameterExpression*)>(&System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter::VisitParameter)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "ParameterExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::QuoteInstruction::ExpressionQuoter*), "VisitParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
