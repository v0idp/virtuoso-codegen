// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.KeyValuePair`2
#include "System/Collections/Generic/KeyValuePair_2.hpp"
// Including type: System.Linq.Expressions.Interpreter.RuntimeLabel
#include "System/Linq/Expressions/Interpreter/RuntimeLabel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Linq::Expressions::Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: Instruction
  class Instruction;
  // Forward declaring type: BranchLabel
  class BranchLabel;
  // Forward declaring type: InstructionArray
  struct InstructionArray;
  // Forward declaring type: ByRefUpdater
  class ByRefUpdater;
  // Forward declaring type: LightDelegateCreator
  class LightDelegateCreator;
  // Forward declaring type: OffsetInstruction
  class OffsetInstruction;
  // Forward declaring type: EnterTryFaultInstruction
  class EnterTryFaultInstruction;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: FieldInfo
  class FieldInfo;
  // Forward declaring type: ConstructorInfo
  class ConstructorInfo;
  // Forward declaring type: ParameterInfo
  class ParameterInfo;
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: TypeCode
  struct TypeCode;
}
// Forward declaring namespace: System::Runtime::CompilerServices
namespace System::Runtime::CompilerServices {
  // Forward declaring type: StrongBox`1<T>
  template<typename T>
  class StrongBox_1;
}
// Completed forward declares
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: InstructionList
  class InstructionList;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::Interpreter::InstructionList);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::Interpreter::InstructionList*, "System.Linq.Expressions.Interpreter", "InstructionList");
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.Interpreter.InstructionList
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: 6A1684
  class InstructionList : public ::Il2CppObject {
    public:
    // Nested type: ::System::Linq::Expressions::Interpreter::InstructionList::DebugView
    class DebugView;
    public:
    // private readonly System.Collections.Generic.List`1<System.Linq.Expressions.Interpreter.Instruction> _instructions
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::System::Linq::Expressions::Interpreter::Instruction*>* instructions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Linq::Expressions::Interpreter::Instruction*>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Object> _objects
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Il2CppObject*>* objects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Il2CppObject*>*) == 0x8);
    // private System.Int32 _currentStackDepth
    // Size: 0x4
    // Offset: 0x20
    int currentStackDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _maxStackDepth
    // Size: 0x4
    // Offset: 0x24
    int maxStackDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _currentContinuationsDepth
    // Size: 0x4
    // Offset: 0x28
    int currentContinuationsDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _maxContinuationDepth
    // Size: 0x4
    // Offset: 0x2C
    int maxContinuationDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _runtimeLabelCount
    // Size: 0x4
    // Offset: 0x30
    int runtimeLabelCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: runtimeLabelCount and: labels
    char __padding6[0x4] = {};
    // private System.Collections.Generic.List`1<System.Linq.Expressions.Interpreter.BranchLabel> _labels
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::System::Linq::Expressions::Interpreter::BranchLabel*>* labels;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Linq::Expressions::Interpreter::BranchLabel*>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Collections.Generic.KeyValuePair`2<System.Int32,System.Object>> _debugCookies
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::System::Collections::Generic::KeyValuePair_2<int, ::Il2CppObject*>>* debugCookies;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::KeyValuePair_2<int, ::Il2CppObject*>>*) == 0x8);
    public:
    // Get static field: static private System.Linq.Expressions.Interpreter.Instruction s_null
    static ::System::Linq::Expressions::Interpreter::Instruction* _get_s_null();
    // Set static field: static private System.Linq.Expressions.Interpreter.Instruction s_null
    static void _set_s_null(::System::Linq::Expressions::Interpreter::Instruction* value);
    // Get static field: static private System.Linq.Expressions.Interpreter.Instruction s_true
    static ::System::Linq::Expressions::Interpreter::Instruction* _get_s_true();
    // Set static field: static private System.Linq.Expressions.Interpreter.Instruction s_true
    static void _set_s_true(::System::Linq::Expressions::Interpreter::Instruction* value);
    // Get static field: static private System.Linq.Expressions.Interpreter.Instruction s_false
    static ::System::Linq::Expressions::Interpreter::Instruction* _get_s_false();
    // Set static field: static private System.Linq.Expressions.Interpreter.Instruction s_false
    static void _set_s_false(::System::Linq::Expressions::Interpreter::Instruction* value);
    // Get static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_Ints
    static ::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> _get_s_Ints();
    // Set static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_Ints
    static void _set_s_Ints(::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> value);
    // Get static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_loadObjectCached
    static ::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> _get_s_loadObjectCached();
    // Set static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_loadObjectCached
    static void _set_s_loadObjectCached(::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> value);
    // Get static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_loadLocal
    static ::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> _get_s_loadLocal();
    // Set static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_loadLocal
    static void _set_s_loadLocal(::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> value);
    // Get static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_loadLocalBoxed
    static ::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> _get_s_loadLocalBoxed();
    // Set static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_loadLocalBoxed
    static void _set_s_loadLocalBoxed(::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> value);
    // Get static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_loadLocalFromClosure
    static ::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> _get_s_loadLocalFromClosure();
    // Set static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_loadLocalFromClosure
    static void _set_s_loadLocalFromClosure(::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> value);
    // Get static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_loadLocalFromClosureBoxed
    static ::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> _get_s_loadLocalFromClosureBoxed();
    // Set static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_loadLocalFromClosureBoxed
    static void _set_s_loadLocalFromClosureBoxed(::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> value);
    // Get static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_assignLocal
    static ::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> _get_s_assignLocal();
    // Set static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_assignLocal
    static void _set_s_assignLocal(::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> value);
    // Get static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_storeLocal
    static ::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> _get_s_storeLocal();
    // Set static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_storeLocal
    static void _set_s_storeLocal(::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> value);
    // Get static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_assignLocalBoxed
    static ::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> _get_s_assignLocalBoxed();
    // Set static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_assignLocalBoxed
    static void _set_s_assignLocalBoxed(::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> value);
    // Get static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_storeLocalBoxed
    static ::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> _get_s_storeLocalBoxed();
    // Set static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_storeLocalBoxed
    static void _set_s_storeLocalBoxed(::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> value);
    // Get static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_assignLocalToClosure
    static ::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> _get_s_assignLocalToClosure();
    // Set static field: static private System.Linq.Expressions.Interpreter.Instruction[] s_assignLocalToClosure
    static void _set_s_assignLocalToClosure(::ArrayW<::System::Linq::Expressions::Interpreter::Instruction*> value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Reflection.FieldInfo,System.Linq.Expressions.Interpreter.Instruction> s_loadFields
    static ::System::Collections::Generic::Dictionary_2<::System::Reflection::FieldInfo*, ::System::Linq::Expressions::Interpreter::Instruction*>* _get_s_loadFields();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Reflection.FieldInfo,System.Linq.Expressions.Interpreter.Instruction> s_loadFields
    static void _set_s_loadFields(::System::Collections::Generic::Dictionary_2<::System::Reflection::FieldInfo*, ::System::Linq::Expressions::Interpreter::Instruction*>* value);
    // Get static field: static private readonly System.Linq.Expressions.Interpreter.RuntimeLabel[] s_emptyRuntimeLabels
    static ::ArrayW<::System::Linq::Expressions::Interpreter::RuntimeLabel> _get_s_emptyRuntimeLabels();
    // Set static field: static private readonly System.Linq.Expressions.Interpreter.RuntimeLabel[] s_emptyRuntimeLabels
    static void _set_s_emptyRuntimeLabels(::ArrayW<::System::Linq::Expressions::Interpreter::RuntimeLabel> value);
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.Linq.Expressions.Interpreter.Instruction> _instructions
    [[deprecated]] ::System::Collections::Generic::List_1<::System::Linq::Expressions::Interpreter::Instruction*>*& dyn__instructions();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Object> _objects
    [[deprecated]] ::System::Collections::Generic::List_1<::Il2CppObject*>*& dyn__objects();
    // Get instance field reference: private System.Int32 _currentStackDepth
    [[deprecated]] int& dyn__currentStackDepth();
    // Get instance field reference: private System.Int32 _maxStackDepth
    [[deprecated]] int& dyn__maxStackDepth();
    // Get instance field reference: private System.Int32 _currentContinuationsDepth
    [[deprecated]] int& dyn__currentContinuationsDepth();
    // Get instance field reference: private System.Int32 _maxContinuationDepth
    [[deprecated]] int& dyn__maxContinuationDepth();
    // Get instance field reference: private System.Int32 _runtimeLabelCount
    [[deprecated]] int& dyn__runtimeLabelCount();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Linq.Expressions.Interpreter.BranchLabel> _labels
    [[deprecated]] ::System::Collections::Generic::List_1<::System::Linq::Expressions::Interpreter::BranchLabel*>*& dyn__labels();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Collections.Generic.KeyValuePair`2<System.Int32,System.Object>> _debugCookies
    [[deprecated]] ::System::Collections::Generic::List_1<::System::Collections::Generic::KeyValuePair_2<int, ::Il2CppObject*>>*& dyn__debugCookies();
    // public System.Int32 get_Count()
    // Offset: 0xF14670
    int get_Count();
    // public System.Int32 get_CurrentStackDepth()
    // Offset: 0xF1836C
    int get_CurrentStackDepth();
    // public System.Int32 get_CurrentContinuationsDepth()
    // Offset: 0xF18374
    int get_CurrentContinuationsDepth();
    // static private System.Void .cctor()
    // Offset: 0xF1DF20
    static void _cctor();
    // public System.Void Emit(System.Linq.Expressions.Interpreter.Instruction instruction)
    // Offset: 0xF18118
    void Emit(::System::Linq::Expressions::Interpreter::Instruction* instruction);
    // private System.Void UpdateStackDepth(System.Linq.Expressions.Interpreter.Instruction instruction)
    // Offset: 0xF18188
    void UpdateStackDepth(::System::Linq::Expressions::Interpreter::Instruction* instruction);
    // public System.Void UnEmit()
    // Offset: 0xF18240
    void UnEmit();
    // System.Linq.Expressions.Interpreter.Instruction GetInstruction(System.Int32 index)
    // Offset: 0xF1837C
    ::System::Linq::Expressions::Interpreter::Instruction* GetInstruction(int index);
    // public System.Linq.Expressions.Interpreter.InstructionArray ToArray()
    // Offset: 0xF183F0
    ::System::Linq::Expressions::Interpreter::InstructionArray ToArray();
    // public System.Void EmitLoad(System.Object value)
    // Offset: 0xF18708
    void EmitLoad(::Il2CppObject* value);
    // public System.Void EmitLoad(System.Boolean value)
    // Offset: 0xF18C54
    void EmitLoad(bool value);
    // public System.Void EmitLoad(System.Object value, System.Type type)
    // Offset: 0xF18710
    void EmitLoad(::Il2CppObject* value, ::System::Type* type);
    // public System.Void EmitDup()
    // Offset: 0xF18DFC
    void EmitDup();
    // public System.Void EmitPop()
    // Offset: 0xF18E68
    void EmitPop();
    // System.Void SwitchToBoxed(System.Int32 index, System.Int32 instructionIndex)
    // Offset: 0xF18ED4
    void SwitchToBoxed(int index, int instructionIndex);
    // public System.Void EmitLoadLocal(System.Int32 index)
    // Offset: 0xF1901C
    void EmitLoadLocal(int index);
    // public System.Void EmitLoadLocalBoxed(System.Int32 index)
    // Offset: 0xF1922C
    void EmitLoadLocalBoxed(int index);
    // static System.Linq.Expressions.Interpreter.Instruction LoadLocalBoxed(System.Int32 index)
    // Offset: 0xF192A4
    static ::System::Linq::Expressions::Interpreter::Instruction* LoadLocalBoxed(int index);
    // public System.Void EmitLoadLocalFromClosure(System.Int32 index)
    // Offset: 0xF194AC
    void EmitLoadLocalFromClosure(int index);
    // public System.Void EmitLoadLocalFromClosureBoxed(System.Int32 index)
    // Offset: 0xF196BC
    void EmitLoadLocalFromClosureBoxed(int index);
    // public System.Void EmitAssignLocal(System.Int32 index)
    // Offset: 0xF198CC
    void EmitAssignLocal(int index);
    // public System.Void EmitStoreLocal(System.Int32 index)
    // Offset: 0xF19ADC
    void EmitStoreLocal(int index);
    // public System.Void EmitAssignLocalBoxed(System.Int32 index)
    // Offset: 0xF19CEC
    void EmitAssignLocalBoxed(int index);
    // static System.Linq.Expressions.Interpreter.Instruction AssignLocalBoxed(System.Int32 index)
    // Offset: 0xF19D64
    static ::System::Linq::Expressions::Interpreter::Instruction* AssignLocalBoxed(int index);
    // public System.Void EmitStoreLocalBoxed(System.Int32 index)
    // Offset: 0xF19F6C
    void EmitStoreLocalBoxed(int index);
    // static System.Linq.Expressions.Interpreter.Instruction StoreLocalBoxed(System.Int32 index)
    // Offset: 0xF19FE4
    static ::System::Linq::Expressions::Interpreter::Instruction* StoreLocalBoxed(int index);
    // public System.Void EmitAssignLocalToClosure(System.Int32 index)
    // Offset: 0xF1A1EC
    void EmitAssignLocalToClosure(int index);
    // public System.Void EmitStoreLocalToClosure(System.Int32 index)
    // Offset: 0xF1A3FC
    void EmitStoreLocalToClosure(int index);
    // public System.Void EmitInitializeLocal(System.Int32 index, System.Type type)
    // Offset: 0xF1A420
    void EmitInitializeLocal(int index, ::System::Type* type);
    // System.Void EmitInitializeParameter(System.Int32 index)
    // Offset: 0xF1A5A0
    void EmitInitializeParameter(int index);
    // static System.Linq.Expressions.Interpreter.Instruction Parameter(System.Int32 index)
    // Offset: 0xF1A618
    static ::System::Linq::Expressions::Interpreter::Instruction* Parameter(int index);
    // static System.Linq.Expressions.Interpreter.Instruction ParameterBox(System.Int32 index)
    // Offset: 0xF1A678
    static ::System::Linq::Expressions::Interpreter::Instruction* ParameterBox(int index);
    // static System.Linq.Expressions.Interpreter.Instruction InitReference(System.Int32 index)
    // Offset: 0xF1A540
    static ::System::Linq::Expressions::Interpreter::Instruction* InitReference(int index);
    // static System.Linq.Expressions.Interpreter.Instruction InitImmutableRefBox(System.Int32 index)
    // Offset: 0xF1A6D8
    static ::System::Linq::Expressions::Interpreter::Instruction* InitImmutableRefBox(int index);
    // public System.Void EmitNewRuntimeVariables(System.Int32 count)
    // Offset: 0xF1A738
    void EmitNewRuntimeVariables(int count);
    // public System.Void EmitGetArrayItem()
    // Offset: 0xF1A7A8
    void EmitGetArrayItem();
    // public System.Void EmitSetArrayItem()
    // Offset: 0xF1A814
    void EmitSetArrayItem();
    // public System.Void EmitNewArray(System.Type elementType)
    // Offset: 0xF1A880
    void EmitNewArray(::System::Type* elementType);
    // public System.Void EmitNewArrayBounds(System.Type elementType, System.Int32 rank)
    // Offset: 0xF1A8F0
    void EmitNewArrayBounds(::System::Type* elementType, int rank);
    // public System.Void EmitNewArrayInit(System.Type elementType, System.Int32 elementCount)
    // Offset: 0xF1A968
    void EmitNewArrayInit(::System::Type* elementType, int elementCount);
    // public System.Void EmitAdd(System.Type type, System.Boolean checked)
    // Offset: 0xF1A9E0
    void EmitAdd(::System::Type* type, bool checked);
    // public System.Void EmitSub(System.Type type, System.Boolean checked)
    // Offset: 0xF1AA24
    void EmitSub(::System::Type* type, bool checked);
    // public System.Void EmitMul(System.Type type, System.Boolean checked)
    // Offset: 0xF1AA68
    void EmitMul(::System::Type* type, bool checked);
    // public System.Void EmitDiv(System.Type type)
    // Offset: 0xF1AAAC
    void EmitDiv(::System::Type* type);
    // public System.Void EmitModulo(System.Type type)
    // Offset: 0xF1AADC
    void EmitModulo(::System::Type* type);
    // public System.Void EmitExclusiveOr(System.Type type)
    // Offset: 0xF1AB0C
    void EmitExclusiveOr(::System::Type* type);
    // public System.Void EmitAnd(System.Type type)
    // Offset: 0xF1AB3C
    void EmitAnd(::System::Type* type);
    // public System.Void EmitOr(System.Type type)
    // Offset: 0xF1AB6C
    void EmitOr(::System::Type* type);
    // public System.Void EmitLeftShift(System.Type type)
    // Offset: 0xF1AB9C
    void EmitLeftShift(::System::Type* type);
    // public System.Void EmitRightShift(System.Type type)
    // Offset: 0xF1AF14
    void EmitRightShift(::System::Type* type);
    // public System.Void EmitEqual(System.Type type, System.Boolean liftedToNull)
    // Offset: 0xF1AF44
    void EmitEqual(::System::Type* type, bool liftedToNull);
    // public System.Void EmitNotEqual(System.Type type, System.Boolean liftedToNull)
    // Offset: 0xF1AF7C
    void EmitNotEqual(::System::Type* type, bool liftedToNull);
    // public System.Void EmitLessThan(System.Type type, System.Boolean liftedToNull)
    // Offset: 0xF1AFB4
    void EmitLessThan(::System::Type* type, bool liftedToNull);
    // public System.Void EmitLessThanOrEqual(System.Type type, System.Boolean liftedToNull)
    // Offset: 0xF1B9A8
    void EmitLessThanOrEqual(::System::Type* type, bool liftedToNull);
    // public System.Void EmitGreaterThan(System.Type type, System.Boolean liftedToNull)
    // Offset: 0xF1C39C
    void EmitGreaterThan(::System::Type* type, bool liftedToNull);
    // public System.Void EmitGreaterThanOrEqual(System.Type type, System.Boolean liftedToNull)
    // Offset: 0xF1C3D0
    void EmitGreaterThanOrEqual(::System::Type* type, bool liftedToNull);
    // public System.Void EmitNumericConvertChecked(System.TypeCode from, System.TypeCode to, System.Boolean isLiftedToNull)
    // Offset: 0xF1C404
    void EmitNumericConvertChecked(::System::TypeCode from, ::System::TypeCode to, bool isLiftedToNull);
    // public System.Void EmitNumericConvertUnchecked(System.TypeCode from, System.TypeCode to, System.Boolean isLiftedToNull)
    // Offset: 0xF1C48C
    void EmitNumericConvertUnchecked(::System::TypeCode from, ::System::TypeCode to, bool isLiftedToNull);
    // public System.Void EmitConvertToUnderlying(System.TypeCode to, System.Boolean isLiftedToNull)
    // Offset: 0xF1C514
    void EmitConvertToUnderlying(::System::TypeCode to, bool isLiftedToNull);
    // public System.Void EmitCast(System.Type toType)
    // Offset: 0xF1C58C
    void EmitCast(::System::Type* toType);
    // public System.Void EmitCastToEnum(System.Type toType)
    // Offset: 0xF1C5BC
    void EmitCastToEnum(::System::Type* toType);
    // public System.Void EmitCastReferenceToEnum(System.Type toType)
    // Offset: 0xF1C62C
    void EmitCastReferenceToEnum(::System::Type* toType);
    // public System.Void EmitNot(System.Type type)
    // Offset: 0xF1C69C
    void EmitNot(::System::Type* type);
    // public System.Void EmitDefaultValue(System.Type type)
    // Offset: 0xF1C6CC
    void EmitDefaultValue(::System::Type* type);
    // public System.Void EmitNew(System.Reflection.ConstructorInfo constructorInfo, System.Reflection.ParameterInfo[] parameters)
    // Offset: 0xF1C73C
    void EmitNew(::System::Reflection::ConstructorInfo* constructorInfo, ::ArrayW<::System::Reflection::ParameterInfo*> parameters);
    // public System.Void EmitByRefNew(System.Reflection.ConstructorInfo constructorInfo, System.Reflection.ParameterInfo[] parameters, System.Linq.Expressions.Interpreter.ByRefUpdater[] updaters)
    // Offset: 0xF1C7BC
    void EmitByRefNew(::System::Reflection::ConstructorInfo* constructorInfo, ::ArrayW<::System::Reflection::ParameterInfo*> parameters, ::ArrayW<::System::Linq::Expressions::Interpreter::ByRefUpdater*> updaters);
    // System.Void EmitCreateDelegate(System.Linq.Expressions.Interpreter.LightDelegateCreator creator)
    // Offset: 0xF1C84C
    void EmitCreateDelegate(::System::Linq::Expressions::Interpreter::LightDelegateCreator* creator);
    // public System.Void EmitTypeEquals()
    // Offset: 0xF1C8BC
    void EmitTypeEquals();
    // public System.Void EmitArrayLength()
    // Offset: 0xF1C928
    void EmitArrayLength();
    // public System.Void EmitNegate(System.Type type)
    // Offset: 0xF1C994
    void EmitNegate(::System::Type* type);
    // public System.Void EmitNegateChecked(System.Type type)
    // Offset: 0xF1C9C4
    void EmitNegateChecked(::System::Type* type);
    // public System.Void EmitIncrement(System.Type type)
    // Offset: 0xF1C9F4
    void EmitIncrement(::System::Type* type);
    // public System.Void EmitDecrement(System.Type type)
    // Offset: 0xF1CA20
    void EmitDecrement(::System::Type* type);
    // public System.Void EmitTypeIs(System.Type type)
    // Offset: 0xF1CA50
    void EmitTypeIs(::System::Type* type);
    // public System.Void EmitTypeAs(System.Type type)
    // Offset: 0xF1CAC0
    void EmitTypeAs(::System::Type* type);
    // public System.Void EmitLoadField(System.Reflection.FieldInfo field)
    // Offset: 0xF1CB30
    void EmitLoadField(::System::Reflection::FieldInfo* field);
    // private System.Linq.Expressions.Interpreter.Instruction GetLoadField(System.Reflection.FieldInfo field)
    // Offset: 0xF1CB58
    ::System::Linq::Expressions::Interpreter::Instruction* GetLoadField(::System::Reflection::FieldInfo* field);
    // public System.Void EmitStoreField(System.Reflection.FieldInfo field)
    // Offset: 0xF1CDAC
    void EmitStoreField(::System::Reflection::FieldInfo* field);
    // public System.Void EmitCall(System.Reflection.MethodInfo method)
    // Offset: 0xF1CE64
    void EmitCall(::System::Reflection::MethodInfo* method);
    // public System.Void EmitCall(System.Reflection.MethodInfo method, System.Reflection.ParameterInfo[] parameters)
    // Offset: 0xF1CEF0
    void EmitCall(::System::Reflection::MethodInfo* method, ::ArrayW<::System::Reflection::ParameterInfo*> parameters);
    // public System.Void EmitByRefCall(System.Reflection.MethodInfo method, System.Reflection.ParameterInfo[] parameters, System.Linq.Expressions.Interpreter.ByRefUpdater[] byrefArgs)
    // Offset: 0xF1CF24
    void EmitByRefCall(::System::Reflection::MethodInfo* method, ::ArrayW<::System::Reflection::ParameterInfo*> parameters, ::ArrayW<::System::Linq::Expressions::Interpreter::ByRefUpdater*> byrefArgs);
    // public System.Void EmitNullableCall(System.Reflection.MethodInfo method, System.Reflection.ParameterInfo[] parameters)
    // Offset: 0xF1CFDC
    void EmitNullableCall(::System::Reflection::MethodInfo* method, ::ArrayW<::System::Reflection::ParameterInfo*> parameters);
    // private System.Linq.Expressions.Interpreter.RuntimeLabel[] BuildRuntimeLabels()
    // Offset: 0xF184B4
    ::ArrayW<::System::Linq::Expressions::Interpreter::RuntimeLabel> BuildRuntimeLabels();
    // public System.Linq.Expressions.Interpreter.BranchLabel MakeLabel()
    // Offset: 0xF1D03C
    ::System::Linq::Expressions::Interpreter::BranchLabel* MakeLabel();
    // System.Void FixupBranch(System.Int32 branchIndex, System.Int32 offset)
    // Offset: 0xF1D10C
    void FixupBranch(int branchIndex, int offset);
    // private System.Int32 EnsureLabelIndex(System.Linq.Expressions.Interpreter.BranchLabel label)
    // Offset: 0xF1D1FC
    int EnsureLabelIndex(::System::Linq::Expressions::Interpreter::BranchLabel* label);
    // public System.Int32 MarkRuntimeLabel()
    // Offset: 0xF1D254
    int MarkRuntimeLabel();
    // public System.Void MarkLabel(System.Linq.Expressions.Interpreter.BranchLabel label)
    // Offset: 0xF1D294
    void MarkLabel(::System::Linq::Expressions::Interpreter::BranchLabel* label);
    // public System.Void EmitGoto(System.Linq.Expressions.Interpreter.BranchLabel label, System.Boolean hasResult, System.Boolean hasValue, System.Boolean labelTargetGetsValue)
    // Offset: 0xF1D2B8
    void EmitGoto(::System::Linq::Expressions::Interpreter::BranchLabel* label, bool hasResult, bool hasValue, bool labelTargetGetsValue);
    // private System.Void EmitBranch(System.Linq.Expressions.Interpreter.OffsetInstruction instruction, System.Linq.Expressions.Interpreter.BranchLabel label)
    // Offset: 0xF1D364
    void EmitBranch(::System::Linq::Expressions::Interpreter::OffsetInstruction* instruction, ::System::Linq::Expressions::Interpreter::BranchLabel* label);
    // public System.Void EmitBranch(System.Linq.Expressions.Interpreter.BranchLabel label)
    // Offset: 0xF1D3A8
    void EmitBranch(::System::Linq::Expressions::Interpreter::BranchLabel* label);
    // public System.Void EmitBranch(System.Linq.Expressions.Interpreter.BranchLabel label, System.Boolean hasResult, System.Boolean hasValue)
    // Offset: 0xF1D418
    void EmitBranch(::System::Linq::Expressions::Interpreter::BranchLabel* label, bool hasResult, bool hasValue);
    // public System.Void EmitCoalescingBranch(System.Linq.Expressions.Interpreter.BranchLabel leftNotNull)
    // Offset: 0xF1D4A0
    void EmitCoalescingBranch(::System::Linq::Expressions::Interpreter::BranchLabel* leftNotNull);
    // public System.Void EmitBranchTrue(System.Linq.Expressions.Interpreter.BranchLabel elseLabel)
    // Offset: 0xF1D510
    void EmitBranchTrue(::System::Linq::Expressions::Interpreter::BranchLabel* elseLabel);
    // public System.Void EmitBranchFalse(System.Linq.Expressions.Interpreter.BranchLabel elseLabel)
    // Offset: 0xF1D580
    void EmitBranchFalse(::System::Linq::Expressions::Interpreter::BranchLabel* elseLabel);
    // public System.Void EmitThrow()
    // Offset: 0xF1D5F0
    void EmitThrow();
    // public System.Void EmitThrowVoid()
    // Offset: 0xF1D65C
    void EmitThrowVoid();
    // public System.Void EmitRethrow()
    // Offset: 0xF1D6C8
    void EmitRethrow();
    // public System.Void EmitRethrowVoid()
    // Offset: 0xF1D734
    void EmitRethrowVoid();
    // public System.Void EmitEnterTryFinally(System.Linq.Expressions.Interpreter.BranchLabel finallyStartLabel)
    // Offset: 0xF1D7A0
    void EmitEnterTryFinally(::System::Linq::Expressions::Interpreter::BranchLabel* finallyStartLabel);
    // public System.Void EmitEnterTryCatch()
    // Offset: 0xF1D7D0
    void EmitEnterTryCatch();
    // public System.Linq.Expressions.Interpreter.EnterTryFaultInstruction EmitEnterTryFault(System.Linq.Expressions.Interpreter.BranchLabel tryEnd)
    // Offset: 0xF1D7FC
    ::System::Linq::Expressions::Interpreter::EnterTryFaultInstruction* EmitEnterTryFault(::System::Linq::Expressions::Interpreter::BranchLabel* tryEnd);
    // public System.Void EmitEnterFinally(System.Linq.Expressions.Interpreter.BranchLabel finallyStartLabel)
    // Offset: 0xF1D888
    void EmitEnterFinally(::System::Linq::Expressions::Interpreter::BranchLabel* finallyStartLabel);
    // public System.Void EmitLeaveFinally()
    // Offset: 0xF1D918
    void EmitLeaveFinally();
    // public System.Void EmitEnterFault(System.Linq.Expressions.Interpreter.BranchLabel faultStartLabel)
    // Offset: 0xF1D984
    void EmitEnterFault(::System::Linq::Expressions::Interpreter::BranchLabel* faultStartLabel);
    // public System.Void EmitLeaveFault()
    // Offset: 0xF1DA14
    void EmitLeaveFault();
    // public System.Void EmitEnterExceptionFilter()
    // Offset: 0xF1DA80
    void EmitEnterExceptionFilter();
    // public System.Void EmitLeaveExceptionFilter()
    // Offset: 0xF1DAEC
    void EmitLeaveExceptionFilter();
    // public System.Void EmitEnterExceptionHandlerNonVoid()
    // Offset: 0xF1DB58
    void EmitEnterExceptionHandlerNonVoid();
    // public System.Void EmitEnterExceptionHandlerVoid()
    // Offset: 0xF1DBC4
    void EmitEnterExceptionHandlerVoid();
    // public System.Void EmitLeaveExceptionHandler(System.Boolean hasValue, System.Linq.Expressions.Interpreter.BranchLabel tryExpressionEndLabel)
    // Offset: 0xF1DC30
    void EmitLeaveExceptionHandler(bool hasValue, ::System::Linq::Expressions::Interpreter::BranchLabel* tryExpressionEndLabel);
    // public System.Void EmitIntSwitch(System.Collections.Generic.Dictionary`2<T,System.Int32> cases)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void EmitIntSwitch(::System::Collections::Generic::Dictionary_2<T, int>* cases) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::Interpreter::InstructionList::EmitIntSwitch");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EmitIntSwitch", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cases)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, cases);
    }
    // public System.Void EmitStringSwitch(System.Collections.Generic.Dictionary`2<System.String,System.Int32> cases, System.Runtime.CompilerServices.StrongBox`1<System.Int32> nullCase)
    // Offset: 0xF1DE30
    void EmitStringSwitch(::System::Collections::Generic::Dictionary_2<::StringW, int>* cases, ::System::Runtime::CompilerServices::StrongBox_1<int>* nullCase);
    // public System.Void .ctor()
    // Offset: 0xF1DEA8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InstructionList* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::Interpreter::InstructionList::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InstructionList*, creationType>()));
    }
  }; // System.Linq.Expressions.Interpreter.InstructionList
  #pragma pack(pop)
  static check_size<sizeof(InstructionList), 64 + sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::KeyValuePair_2<int, ::Il2CppObject*>>*)> __System_Linq_Expressions_Interpreter_InstructionListSizeCheck;
  static_assert(sizeof(InstructionList) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::get_CurrentStackDepth
// Il2CppName: get_CurrentStackDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::get_CurrentStackDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "get_CurrentStackDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::get_CurrentContinuationsDepth
// Il2CppName: get_CurrentContinuationsDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::get_CurrentContinuationsDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "get_CurrentContinuationsDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Linq::Expressions::Interpreter::InstructionList::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Linq::Expressions::Interpreter::Instruction*)>(&System::Linq::Expressions::Interpreter::InstructionList::Emit)> {
  static const MethodInfo* get() {
    static auto* instruction = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "Instruction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instruction});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::UpdateStackDepth
// Il2CppName: UpdateStackDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Linq::Expressions::Interpreter::Instruction*)>(&System::Linq::Expressions::Interpreter::InstructionList::UpdateStackDepth)> {
  static const MethodInfo* get() {
    static auto* instruction = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "Instruction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "UpdateStackDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instruction});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::UnEmit
// Il2CppName: UnEmit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::UnEmit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "UnEmit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::GetInstruction
// Il2CppName: GetInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Interpreter::Instruction* (System::Linq::Expressions::Interpreter::InstructionList::*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::GetInstruction)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "GetInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::ToArray
// Il2CppName: ToArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Interpreter::InstructionArray (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::ToArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "ToArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitLoad
// Il2CppName: EmitLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::Il2CppObject*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitLoad)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitLoad
// Il2CppName: EmitLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(bool)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitLoad)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitLoad
// Il2CppName: EmitLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::Il2CppObject*, ::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitLoad)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, type});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitDup
// Il2CppName: EmitDup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::EmitDup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitDup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitPop
// Il2CppName: EmitPop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::EmitPop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitPop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::SwitchToBoxed
// Il2CppName: SwitchToBoxed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(int, int)>(&System::Linq::Expressions::Interpreter::InstructionList::SwitchToBoxed)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* instructionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "SwitchToBoxed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, instructionIndex});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitLoadLocal
// Il2CppName: EmitLoadLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitLoadLocal)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitLoadLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitLoadLocalBoxed
// Il2CppName: EmitLoadLocalBoxed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitLoadLocalBoxed)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitLoadLocalBoxed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::LoadLocalBoxed
// Il2CppName: LoadLocalBoxed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Interpreter::Instruction* (*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::LoadLocalBoxed)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "LoadLocalBoxed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitLoadLocalFromClosure
// Il2CppName: EmitLoadLocalFromClosure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitLoadLocalFromClosure)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitLoadLocalFromClosure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitLoadLocalFromClosureBoxed
// Il2CppName: EmitLoadLocalFromClosureBoxed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitLoadLocalFromClosureBoxed)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitLoadLocalFromClosureBoxed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitAssignLocal
// Il2CppName: EmitAssignLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitAssignLocal)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitAssignLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitStoreLocal
// Il2CppName: EmitStoreLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitStoreLocal)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitStoreLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitAssignLocalBoxed
// Il2CppName: EmitAssignLocalBoxed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitAssignLocalBoxed)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitAssignLocalBoxed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::AssignLocalBoxed
// Il2CppName: AssignLocalBoxed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Interpreter::Instruction* (*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::AssignLocalBoxed)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "AssignLocalBoxed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitStoreLocalBoxed
// Il2CppName: EmitStoreLocalBoxed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitStoreLocalBoxed)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitStoreLocalBoxed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::StoreLocalBoxed
// Il2CppName: StoreLocalBoxed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Interpreter::Instruction* (*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::StoreLocalBoxed)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "StoreLocalBoxed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitAssignLocalToClosure
// Il2CppName: EmitAssignLocalToClosure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitAssignLocalToClosure)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitAssignLocalToClosure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitStoreLocalToClosure
// Il2CppName: EmitStoreLocalToClosure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitStoreLocalToClosure)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitStoreLocalToClosure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitInitializeLocal
// Il2CppName: EmitInitializeLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(int, ::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitInitializeLocal)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitInitializeLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, type});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitInitializeParameter
// Il2CppName: EmitInitializeParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitInitializeParameter)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitInitializeParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::Parameter
// Il2CppName: Parameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Interpreter::Instruction* (*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::Parameter)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "Parameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::ParameterBox
// Il2CppName: ParameterBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Interpreter::Instruction* (*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::ParameterBox)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "ParameterBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::InitReference
// Il2CppName: InitReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Interpreter::Instruction* (*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::InitReference)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "InitReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::InitImmutableRefBox
// Il2CppName: InitImmutableRefBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Interpreter::Instruction* (*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::InitImmutableRefBox)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "InitImmutableRefBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitNewRuntimeVariables
// Il2CppName: EmitNewRuntimeVariables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(int)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitNewRuntimeVariables)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitNewRuntimeVariables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitGetArrayItem
// Il2CppName: EmitGetArrayItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::EmitGetArrayItem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitGetArrayItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitSetArrayItem
// Il2CppName: EmitSetArrayItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::EmitSetArrayItem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitSetArrayItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitNewArray
// Il2CppName: EmitNewArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitNewArray)> {
  static const MethodInfo* get() {
    static auto* elementType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitNewArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementType});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitNewArrayBounds
// Il2CppName: EmitNewArrayBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*, int)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitNewArrayBounds)> {
  static const MethodInfo* get() {
    static auto* elementType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* rank = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitNewArrayBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementType, rank});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitNewArrayInit
// Il2CppName: EmitNewArrayInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*, int)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitNewArrayInit)> {
  static const MethodInfo* get() {
    static auto* elementType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* elementCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitNewArrayInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementType, elementCount});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitAdd
// Il2CppName: EmitAdd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*, bool)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitAdd)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* checked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitAdd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, checked});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitSub
// Il2CppName: EmitSub
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*, bool)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitSub)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* checked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitSub", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, checked});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitMul
// Il2CppName: EmitMul
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*, bool)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitMul)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* checked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitMul", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, checked});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitDiv
// Il2CppName: EmitDiv
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitDiv)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitDiv", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitModulo
// Il2CppName: EmitModulo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitModulo)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitModulo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitExclusiveOr
// Il2CppName: EmitExclusiveOr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitExclusiveOr)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitExclusiveOr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitAnd
// Il2CppName: EmitAnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitAnd)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitAnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitOr
// Il2CppName: EmitOr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitOr)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitOr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitLeftShift
// Il2CppName: EmitLeftShift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitLeftShift)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitLeftShift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitRightShift
// Il2CppName: EmitRightShift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitRightShift)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitRightShift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitEqual
// Il2CppName: EmitEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*, bool)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitEqual)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* liftedToNull = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, liftedToNull});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitNotEqual
// Il2CppName: EmitNotEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*, bool)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitNotEqual)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* liftedToNull = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitNotEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, liftedToNull});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitLessThan
// Il2CppName: EmitLessThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*, bool)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitLessThan)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* liftedToNull = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitLessThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, liftedToNull});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitLessThanOrEqual
// Il2CppName: EmitLessThanOrEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*, bool)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitLessThanOrEqual)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* liftedToNull = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitLessThanOrEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, liftedToNull});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitGreaterThan
// Il2CppName: EmitGreaterThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*, bool)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitGreaterThan)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* liftedToNull = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitGreaterThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, liftedToNull});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitGreaterThanOrEqual
// Il2CppName: EmitGreaterThanOrEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*, bool)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitGreaterThanOrEqual)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* liftedToNull = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitGreaterThanOrEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, liftedToNull});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitNumericConvertChecked
// Il2CppName: EmitNumericConvertChecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::TypeCode, ::System::TypeCode, bool)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitNumericConvertChecked)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "TypeCode")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "TypeCode")->byval_arg;
    static auto* isLiftedToNull = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitNumericConvertChecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, isLiftedToNull});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitNumericConvertUnchecked
// Il2CppName: EmitNumericConvertUnchecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::TypeCode, ::System::TypeCode, bool)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitNumericConvertUnchecked)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "TypeCode")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "TypeCode")->byval_arg;
    static auto* isLiftedToNull = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitNumericConvertUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, isLiftedToNull});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitConvertToUnderlying
// Il2CppName: EmitConvertToUnderlying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::TypeCode, bool)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitConvertToUnderlying)> {
  static const MethodInfo* get() {
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "TypeCode")->byval_arg;
    static auto* isLiftedToNull = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitConvertToUnderlying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{to, isLiftedToNull});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitCast
// Il2CppName: EmitCast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitCast)> {
  static const MethodInfo* get() {
    static auto* toType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitCast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toType});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitCastToEnum
// Il2CppName: EmitCastToEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitCastToEnum)> {
  static const MethodInfo* get() {
    static auto* toType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitCastToEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toType});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitCastReferenceToEnum
// Il2CppName: EmitCastReferenceToEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitCastReferenceToEnum)> {
  static const MethodInfo* get() {
    static auto* toType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitCastReferenceToEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toType});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitNot
// Il2CppName: EmitNot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitNot)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitNot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitDefaultValue
// Il2CppName: EmitDefaultValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitDefaultValue)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitDefaultValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitNew
// Il2CppName: EmitNew
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Reflection::ConstructorInfo*, ::ArrayW<::System::Reflection::ParameterInfo*>)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitNew)> {
  static const MethodInfo* get() {
    static auto* constructorInfo = &::il2cpp_utils::GetClassFromName("System.Reflection", "ConstructorInfo")->byval_arg;
    static auto* parameters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitNew", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{constructorInfo, parameters});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitByRefNew
// Il2CppName: EmitByRefNew
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Reflection::ConstructorInfo*, ::ArrayW<::System::Reflection::ParameterInfo*>, ::ArrayW<::System::Linq::Expressions::Interpreter::ByRefUpdater*>)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitByRefNew)> {
  static const MethodInfo* get() {
    static auto* constructorInfo = &::il2cpp_utils::GetClassFromName("System.Reflection", "ConstructorInfo")->byval_arg;
    static auto* parameters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo"), 1)->byval_arg;
    static auto* updaters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "ByRefUpdater"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitByRefNew", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{constructorInfo, parameters, updaters});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitCreateDelegate
// Il2CppName: EmitCreateDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Linq::Expressions::Interpreter::LightDelegateCreator*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitCreateDelegate)> {
  static const MethodInfo* get() {
    static auto* creator = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "LightDelegateCreator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitCreateDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{creator});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitTypeEquals
// Il2CppName: EmitTypeEquals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::EmitTypeEquals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitTypeEquals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitArrayLength
// Il2CppName: EmitArrayLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::EmitArrayLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitArrayLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitNegate
// Il2CppName: EmitNegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitNegate)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitNegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitNegateChecked
// Il2CppName: EmitNegateChecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitNegateChecked)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitNegateChecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitIncrement
// Il2CppName: EmitIncrement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitIncrement)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitIncrement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitDecrement
// Il2CppName: EmitDecrement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitDecrement)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitDecrement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitTypeIs
// Il2CppName: EmitTypeIs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitTypeIs)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitTypeIs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitTypeAs
// Il2CppName: EmitTypeAs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Type*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitTypeAs)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitTypeAs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitLoadField
// Il2CppName: EmitLoadField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Reflection::FieldInfo*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitLoadField)> {
  static const MethodInfo* get() {
    static auto* field = &::il2cpp_utils::GetClassFromName("System.Reflection", "FieldInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitLoadField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{field});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::GetLoadField
// Il2CppName: GetLoadField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Interpreter::Instruction* (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Reflection::FieldInfo*)>(&System::Linq::Expressions::Interpreter::InstructionList::GetLoadField)> {
  static const MethodInfo* get() {
    static auto* field = &::il2cpp_utils::GetClassFromName("System.Reflection", "FieldInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "GetLoadField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{field});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitStoreField
// Il2CppName: EmitStoreField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Reflection::FieldInfo*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitStoreField)> {
  static const MethodInfo* get() {
    static auto* field = &::il2cpp_utils::GetClassFromName("System.Reflection", "FieldInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitStoreField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{field});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitCall
// Il2CppName: EmitCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Reflection::MethodInfo*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitCall)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("System.Reflection", "MethodInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitCall
// Il2CppName: EmitCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Reflection::MethodInfo*, ::ArrayW<::System::Reflection::ParameterInfo*>)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitCall)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("System.Reflection", "MethodInfo")->byval_arg;
    static auto* parameters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method, parameters});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitByRefCall
// Il2CppName: EmitByRefCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Reflection::MethodInfo*, ::ArrayW<::System::Reflection::ParameterInfo*>, ::ArrayW<::System::Linq::Expressions::Interpreter::ByRefUpdater*>)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitByRefCall)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("System.Reflection", "MethodInfo")->byval_arg;
    static auto* parameters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo"), 1)->byval_arg;
    static auto* byrefArgs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "ByRefUpdater"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitByRefCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method, parameters, byrefArgs});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitNullableCall
// Il2CppName: EmitNullableCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Reflection::MethodInfo*, ::ArrayW<::System::Reflection::ParameterInfo*>)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitNullableCall)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("System.Reflection", "MethodInfo")->byval_arg;
    static auto* parameters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitNullableCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method, parameters});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::BuildRuntimeLabels
// Il2CppName: BuildRuntimeLabels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Linq::Expressions::Interpreter::RuntimeLabel> (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::BuildRuntimeLabels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "BuildRuntimeLabels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::MakeLabel
// Il2CppName: MakeLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Interpreter::BranchLabel* (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::MakeLabel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "MakeLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::FixupBranch
// Il2CppName: FixupBranch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(int, int)>(&System::Linq::Expressions::Interpreter::InstructionList::FixupBranch)> {
  static const MethodInfo* get() {
    static auto* branchIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "FixupBranch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{branchIndex, offset});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EnsureLabelIndex
// Il2CppName: EnsureLabelIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Linq::Expressions::Interpreter::BranchLabel*)>(&System::Linq::Expressions::Interpreter::InstructionList::EnsureLabelIndex)> {
  static const MethodInfo* get() {
    static auto* label = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "BranchLabel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EnsureLabelIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{label});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::MarkRuntimeLabel
// Il2CppName: MarkRuntimeLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::MarkRuntimeLabel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "MarkRuntimeLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::MarkLabel
// Il2CppName: MarkLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Linq::Expressions::Interpreter::BranchLabel*)>(&System::Linq::Expressions::Interpreter::InstructionList::MarkLabel)> {
  static const MethodInfo* get() {
    static auto* label = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "BranchLabel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "MarkLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{label});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitGoto
// Il2CppName: EmitGoto
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Linq::Expressions::Interpreter::BranchLabel*, bool, bool, bool)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitGoto)> {
  static const MethodInfo* get() {
    static auto* label = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "BranchLabel")->byval_arg;
    static auto* hasResult = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* labelTargetGetsValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitGoto", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{label, hasResult, hasValue, labelTargetGetsValue});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitBranch
// Il2CppName: EmitBranch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Linq::Expressions::Interpreter::OffsetInstruction*, ::System::Linq::Expressions::Interpreter::BranchLabel*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitBranch)> {
  static const MethodInfo* get() {
    static auto* instruction = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "OffsetInstruction")->byval_arg;
    static auto* label = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "BranchLabel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitBranch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instruction, label});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitBranch
// Il2CppName: EmitBranch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Linq::Expressions::Interpreter::BranchLabel*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitBranch)> {
  static const MethodInfo* get() {
    static auto* label = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "BranchLabel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitBranch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{label});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitBranch
// Il2CppName: EmitBranch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Linq::Expressions::Interpreter::BranchLabel*, bool, bool)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitBranch)> {
  static const MethodInfo* get() {
    static auto* label = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "BranchLabel")->byval_arg;
    static auto* hasResult = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitBranch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{label, hasResult, hasValue});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitCoalescingBranch
// Il2CppName: EmitCoalescingBranch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Linq::Expressions::Interpreter::BranchLabel*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitCoalescingBranch)> {
  static const MethodInfo* get() {
    static auto* leftNotNull = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "BranchLabel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitCoalescingBranch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leftNotNull});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitBranchTrue
// Il2CppName: EmitBranchTrue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Linq::Expressions::Interpreter::BranchLabel*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitBranchTrue)> {
  static const MethodInfo* get() {
    static auto* elseLabel = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "BranchLabel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitBranchTrue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elseLabel});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitBranchFalse
// Il2CppName: EmitBranchFalse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Linq::Expressions::Interpreter::BranchLabel*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitBranchFalse)> {
  static const MethodInfo* get() {
    static auto* elseLabel = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "BranchLabel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitBranchFalse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elseLabel});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitThrow
// Il2CppName: EmitThrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::EmitThrow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitThrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitThrowVoid
// Il2CppName: EmitThrowVoid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::EmitThrowVoid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitThrowVoid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitRethrow
// Il2CppName: EmitRethrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::EmitRethrow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitRethrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitRethrowVoid
// Il2CppName: EmitRethrowVoid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::EmitRethrowVoid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitRethrowVoid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitEnterTryFinally
// Il2CppName: EmitEnterTryFinally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Linq::Expressions::Interpreter::BranchLabel*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitEnterTryFinally)> {
  static const MethodInfo* get() {
    static auto* finallyStartLabel = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "BranchLabel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitEnterTryFinally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finallyStartLabel});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitEnterTryCatch
// Il2CppName: EmitEnterTryCatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::EmitEnterTryCatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitEnterTryCatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitEnterTryFault
// Il2CppName: EmitEnterTryFault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Interpreter::EnterTryFaultInstruction* (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Linq::Expressions::Interpreter::BranchLabel*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitEnterTryFault)> {
  static const MethodInfo* get() {
    static auto* tryEnd = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "BranchLabel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitEnterTryFault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tryEnd});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitEnterFinally
// Il2CppName: EmitEnterFinally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Linq::Expressions::Interpreter::BranchLabel*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitEnterFinally)> {
  static const MethodInfo* get() {
    static auto* finallyStartLabel = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "BranchLabel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitEnterFinally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finallyStartLabel});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitLeaveFinally
// Il2CppName: EmitLeaveFinally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::EmitLeaveFinally)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitLeaveFinally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitEnterFault
// Il2CppName: EmitEnterFault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Linq::Expressions::Interpreter::BranchLabel*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitEnterFault)> {
  static const MethodInfo* get() {
    static auto* faultStartLabel = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "BranchLabel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitEnterFault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{faultStartLabel});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitLeaveFault
// Il2CppName: EmitLeaveFault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::EmitLeaveFault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitLeaveFault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitEnterExceptionFilter
// Il2CppName: EmitEnterExceptionFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::EmitEnterExceptionFilter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitEnterExceptionFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitLeaveExceptionFilter
// Il2CppName: EmitLeaveExceptionFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::EmitLeaveExceptionFilter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitLeaveExceptionFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitEnterExceptionHandlerNonVoid
// Il2CppName: EmitEnterExceptionHandlerNonVoid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::EmitEnterExceptionHandlerNonVoid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitEnterExceptionHandlerNonVoid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitEnterExceptionHandlerVoid
// Il2CppName: EmitEnterExceptionHandlerVoid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)()>(&System::Linq::Expressions::Interpreter::InstructionList::EmitEnterExceptionHandlerVoid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitEnterExceptionHandlerVoid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitLeaveExceptionHandler
// Il2CppName: EmitLeaveExceptionHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(bool, ::System::Linq::Expressions::Interpreter::BranchLabel*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitLeaveExceptionHandler)> {
  static const MethodInfo* get() {
    static auto* hasValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tryExpressionEndLabel = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "BranchLabel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitLeaveExceptionHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hasValue, tryExpressionEndLabel});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitIntSwitch
// Il2CppName: EmitIntSwitch
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::EmitStringSwitch
// Il2CppName: EmitStringSwitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::InstructionList::*)(::System::Collections::Generic::Dictionary_2<::StringW, int>*, ::System::Runtime::CompilerServices::StrongBox_1<int>*)>(&System::Linq::Expressions::Interpreter::InstructionList::EmitStringSwitch)> {
  static const MethodInfo* get() {
    static auto* cases = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* nullCase = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Runtime.CompilerServices", "StrongBox`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList*), "EmitStringSwitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cases, nullCase});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
