// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Linq.Expressions.Interpreter.LightCompiler
#include "System/Linq/Expressions/Interpreter/LightCompiler.hpp"
// Including type: System.Linq.Expressions.ExpressionVisitor
#include "System/Linq/Expressions/ExpressionVisitor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System::Linq::Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: ParameterExpression
  class ParameterExpression;
  // Forward declaring type: Expression
  class Expression;
  // Forward declaring type: BlockExpression
  class BlockExpression;
  // Forward declaring type: CatchBlock
  class CatchBlock;
  // Forward declaring type: Expression`1<TDelegate>
  template<typename TDelegate>
  class Expression_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor*, "System.Linq.Expressions.Interpreter", "LightCompiler/QuoteVisitor");
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.Interpreter.LightCompiler/System.Linq.Expressions.Interpreter.QuoteVisitor
  // [TokenAttribute] Offset: FFFFFFFF
  class LightCompiler::QuoteVisitor : public ::System::Linq::Expressions::ExpressionVisitor {
    public:
    public:
    // private readonly System.Collections.Generic.Dictionary`2<System.Linq.Expressions.ParameterExpression,System.Int32> _definedParameters
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<::System::Linq::Expressions::ParameterExpression*, int>* definedParameters;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Linq::Expressions::ParameterExpression*, int>*) == 0x8);
    // public readonly System.Collections.Generic.HashSet`1<System.Linq.Expressions.ParameterExpression> _hoistedParameters
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::HashSet_1<::System::Linq::Expressions::ParameterExpression*>* hoistedParameters;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::System::Linq::Expressions::ParameterExpression*>*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Linq.Expressions.ParameterExpression,System.Int32> _definedParameters
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Linq::Expressions::ParameterExpression*, int>*& dyn__definedParameters();
    // Get instance field reference: public readonly System.Collections.Generic.HashSet`1<System.Linq.Expressions.ParameterExpression> _hoistedParameters
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::System::Linq::Expressions::ParameterExpression*>*& dyn__hoistedParameters();
    // private System.Void PushParameters(System.Collections.Generic.IEnumerable`1<System.Linq.Expressions.ParameterExpression> parameters)
    // Offset: 0x16A9950
    void PushParameters(::System::Collections::Generic::IEnumerable_1<::System::Linq::Expressions::ParameterExpression*>* parameters);
    // private System.Void PopParameters(System.Collections.Generic.IEnumerable`1<System.Linq.Expressions.ParameterExpression> parameters)
    // Offset: 0x16A9CAC
    void PopParameters(::System::Collections::Generic::IEnumerable_1<::System::Linq::Expressions::ParameterExpression*>* parameters);
    // public System.Void .ctor()
    // Offset: 0x16AA150
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Void ExpressionVisitor::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightCompiler::QuoteVisitor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightCompiler::QuoteVisitor*, creationType>()));
    }
    // protected internal override System.Linq.Expressions.Expression VisitParameter(System.Linq.Expressions.ParameterExpression node)
    // Offset: 0x16A984C
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitParameter(System.Linq.Expressions.ParameterExpression node)
    ::System::Linq::Expressions::Expression* VisitParameter(::System::Linq::Expressions::ParameterExpression* node);
    // protected internal override System.Linq.Expressions.Expression VisitBlock(System.Linq.Expressions.BlockExpression node)
    // Offset: 0x16A98E4
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitBlock(System.Linq.Expressions.BlockExpression node)
    ::System::Linq::Expressions::Expression* VisitBlock(::System::Linq::Expressions::BlockExpression* node);
    // protected override System.Linq.Expressions.CatchBlock VisitCatchBlock(System.Linq.Expressions.CatchBlock node)
    // Offset: 0x16AA00C
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.CatchBlock ExpressionVisitor::VisitCatchBlock(System.Linq.Expressions.CatchBlock node)
    ::System::Linq::Expressions::CatchBlock* VisitCatchBlock(::System::Linq::Expressions::CatchBlock* node);
    // protected internal override System.Linq.Expressions.Expression VisitLambda(System.Linq.Expressions.Expression`1<T> node)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitLambda(System.Linq.Expressions.Expression`1<T> node)
    template<class T>
    ::System::Linq::Expressions::Expression* VisitLambda(::System::Linq::Expressions::Expression_1<T>* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::VisitLambda");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Linq::Expressions::ExpressionVisitor*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Linq::Expressions::Expression*, false>(this, ___generic__method, node);
    }
  }; // System.Linq.Expressions.Interpreter.LightCompiler/System.Linq.Expressions.Interpreter.QuoteVisitor
  #pragma pack(pop)
  static check_size<sizeof(LightCompiler::QuoteVisitor), 24 + sizeof(::System::Collections::Generic::HashSet_1<::System::Linq::Expressions::ParameterExpression*>*)> __System_Linq_Expressions_Interpreter_LightCompiler_QuoteVisitorSizeCheck;
  static_assert(sizeof(LightCompiler::QuoteVisitor) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::PushParameters
// Il2CppName: PushParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::*)(::System::Collections::Generic::IEnumerable_1<::System::Linq::Expressions::ParameterExpression*>*)>(&System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::PushParameters)> {
  static const MethodInfo* get() {
    static auto* parameters = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "ParameterExpression")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor*), "PushParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameters});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::PopParameters
// Il2CppName: PopParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::*)(::System::Collections::Generic::IEnumerable_1<::System::Linq::Expressions::ParameterExpression*>*)>(&System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::PopParameters)> {
  static const MethodInfo* get() {
    static auto* parameters = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "ParameterExpression")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor*), "PopParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameters});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::VisitParameter
// Il2CppName: VisitParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::*)(::System::Linq::Expressions::ParameterExpression*)>(&System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::VisitParameter)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "ParameterExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor*), "VisitParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::VisitBlock
// Il2CppName: VisitBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::*)(::System::Linq::Expressions::BlockExpression*)>(&System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::VisitBlock)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "BlockExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor*), "VisitBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::VisitCatchBlock
// Il2CppName: VisitCatchBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::CatchBlock* (System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::*)(::System::Linq::Expressions::CatchBlock*)>(&System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::VisitCatchBlock)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "CatchBlock")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor*), "VisitCatchBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightCompiler::QuoteVisitor::VisitLambda
// Il2CppName: VisitLambda
// Cannot write MetadataGetter for generic methods!
