// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Linq::Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: LambdaExpression
  class LambdaExpression;
}
// Forward declaring namespace: System::Linq::Expressions::Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: Interpreter
  class Interpreter;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Delegate
  class Delegate;
}
// Forward declaring namespace: System::Runtime::CompilerServices
namespace System::Runtime::CompilerServices {
  // Forward declaring type: IStrongBox
  class IStrongBox;
}
// Completed forward declares
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: LightDelegateCreator
  class LightDelegateCreator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::Interpreter::LightDelegateCreator);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::Interpreter::LightDelegateCreator*, "System.Linq.Expressions.Interpreter", "LightDelegateCreator");
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.Interpreter.LightDelegateCreator
  // [TokenAttribute] Offset: FFFFFFFF
  class LightDelegateCreator : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Linq.Expressions.LambdaExpression _lambda
    // Size: 0x8
    // Offset: 0x10
    ::System::Linq::Expressions::LambdaExpression* lambda;
    // Field size check
    static_assert(sizeof(::System::Linq::Expressions::LambdaExpression*) == 0x8);
    // private readonly System.Linq.Expressions.Interpreter.Interpreter <Interpreter>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Linq::Expressions::Interpreter::Interpreter* Interpreter;
    // Field size check
    static_assert(sizeof(::System::Linq::Expressions::Interpreter::Interpreter*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Linq.Expressions.LambdaExpression _lambda
    [[deprecated("Use field access instead!")]] ::System::Linq::Expressions::LambdaExpression*& dyn__lambda();
    // Get instance field reference: private readonly System.Linq.Expressions.Interpreter.Interpreter <Interpreter>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Linq::Expressions::Interpreter::Interpreter*& dyn_$Interpreter$k__BackingField();
    // System.Linq.Expressions.Interpreter.Interpreter get_Interpreter()
    // Offset: 0xE8DA70
    ::System::Linq::Expressions::Interpreter::Interpreter* get_Interpreter();
    // System.Void .ctor(System.Linq.Expressions.Interpreter.Interpreter interpreter, System.Linq.Expressions.LambdaExpression lambda)
    // Offset: 0xE8DA38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightDelegateCreator* New_ctor(::System::Linq::Expressions::Interpreter::Interpreter* interpreter, ::System::Linq::Expressions::LambdaExpression* lambda) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::Interpreter::LightDelegateCreator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightDelegateCreator*, creationType>(interpreter, lambda)));
    }
    // public System.Delegate CreateDelegate()
    // Offset: 0xE8DA78
    ::System::Delegate* CreateDelegate();
    // System.Delegate CreateDelegate(System.Runtime.CompilerServices.IStrongBox[] closure)
    // Offset: 0xE8DA80
    ::System::Delegate* CreateDelegate(::ArrayW<::System::Runtime::CompilerServices::IStrongBox*> closure);
  }; // System.Linq.Expressions.Interpreter.LightDelegateCreator
  #pragma pack(pop)
  static check_size<sizeof(LightDelegateCreator), 24 + sizeof(::System::Linq::Expressions::Interpreter::Interpreter*)> __System_Linq_Expressions_Interpreter_LightDelegateCreatorSizeCheck;
  static_assert(sizeof(LightDelegateCreator) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightDelegateCreator::get_Interpreter
// Il2CppName: get_Interpreter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Interpreter::Interpreter* (System::Linq::Expressions::Interpreter::LightDelegateCreator::*)()>(&System::Linq::Expressions::Interpreter::LightDelegateCreator::get_Interpreter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LightDelegateCreator*), "get_Interpreter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightDelegateCreator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightDelegateCreator::CreateDelegate
// Il2CppName: CreateDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Delegate* (System::Linq::Expressions::Interpreter::LightDelegateCreator::*)()>(&System::Linq::Expressions::Interpreter::LightDelegateCreator::CreateDelegate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LightDelegateCreator*), "CreateDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightDelegateCreator::CreateDelegate
// Il2CppName: CreateDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Delegate* (System::Linq::Expressions::Interpreter::LightDelegateCreator::*)(::ArrayW<::System::Runtime::CompilerServices::IStrongBox*>)>(&System::Linq::Expressions::Interpreter::LightDelegateCreator::CreateDelegate)> {
  static const MethodInfo* get() {
    static auto* closure = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Runtime.CompilerServices", "IStrongBox"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LightDelegateCreator*), "CreateDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{closure});
  }
};
