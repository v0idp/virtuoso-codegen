// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Linq::Expressions::Interpreter
namespace System::Linq::Expressions::Interpreter {
}
// Completed forward declares
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: DebugInfo
  class DebugInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::Interpreter::DebugInfo);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::Interpreter::DebugInfo*, "System.Linq.Expressions.Interpreter", "DebugInfo");
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.Interpreter.DebugInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugInfo : public ::Il2CppObject {
    public:
    // Nested type: ::System::Linq::Expressions::Interpreter::DebugInfo::DebugInfoComparer
    class DebugInfoComparer;
    public:
    // public System.Int32 StartLine
    // Size: 0x4
    // Offset: 0x10
    int StartLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 EndLine
    // Size: 0x4
    // Offset: 0x14
    int EndLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Index
    // Size: 0x4
    // Offset: 0x18
    int Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Index and: FileName
    char __padding2[0x4] = {};
    // public System.String FileName
    // Size: 0x8
    // Offset: 0x20
    ::StringW FileName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean IsClear
    // Size: 0x1
    // Offset: 0x28
    bool IsClear;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private readonly System.Linq.Expressions.Interpreter.DebugInfo/System.Linq.Expressions.Interpreter.DebugInfoComparer s_debugComparer
    static ::System::Linq::Expressions::Interpreter::DebugInfo::DebugInfoComparer* _get_s_debugComparer();
    // Set static field: static private readonly System.Linq.Expressions.Interpreter.DebugInfo/System.Linq.Expressions.Interpreter.DebugInfoComparer s_debugComparer
    static void _set_s_debugComparer(::System::Linq::Expressions::Interpreter::DebugInfo::DebugInfoComparer* value);
    // Get instance field reference: public System.Int32 StartLine
    [[deprecated("Use field access instead!")]] int& dyn_StartLine();
    // Get instance field reference: public System.Int32 EndLine
    [[deprecated("Use field access instead!")]] int& dyn_EndLine();
    // Get instance field reference: public System.Int32 Index
    [[deprecated("Use field access instead!")]] int& dyn_Index();
    // Get instance field reference: public System.String FileName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_FileName();
    // Get instance field reference: public System.Boolean IsClear
    [[deprecated("Use field access instead!")]] bool& dyn_IsClear();
    // public System.Void .ctor()
    // Offset: 0x11F9B14
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::Interpreter::DebugInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugInfo*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x11F9D74
    static void _cctor();
    // static public System.Linq.Expressions.Interpreter.DebugInfo GetMatchingDebugInfo(System.Linq.Expressions.Interpreter.DebugInfo[] debugInfos, System.Int32 index)
    // Offset: 0x11F9A1C
    static ::System::Linq::Expressions::Interpreter::DebugInfo* GetMatchingDebugInfo(::ArrayW<::System::Linq::Expressions::Interpreter::DebugInfo*> debugInfos, int index);
    // public override System.String ToString()
    // Offset: 0x11F9B1C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // System.Linq.Expressions.Interpreter.DebugInfo
  #pragma pack(pop)
  static check_size<sizeof(DebugInfo), 40 + sizeof(bool)> __System_Linq_Expressions_Interpreter_DebugInfoSizeCheck;
  static_assert(sizeof(DebugInfo) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::DebugInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::DebugInfo::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Linq::Expressions::Interpreter::DebugInfo::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::DebugInfo*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::DebugInfo::GetMatchingDebugInfo
// Il2CppName: GetMatchingDebugInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Interpreter::DebugInfo* (*)(::ArrayW<::System::Linq::Expressions::Interpreter::DebugInfo*>, int)>(&System::Linq::Expressions::Interpreter::DebugInfo::GetMatchingDebugInfo)> {
  static const MethodInfo* get() {
    static auto* debugInfos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "DebugInfo"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::DebugInfo*), "GetMatchingDebugInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{debugInfos, index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::DebugInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Linq::Expressions::Interpreter::DebugInfo::*)()>(&System::Linq::Expressions::Interpreter::DebugInfo::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::DebugInfo*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
