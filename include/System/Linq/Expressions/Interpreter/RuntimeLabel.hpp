// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: RuntimeLabel
  struct RuntimeLabel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::Interpreter::RuntimeLabel, "System.Linq.Expressions.Interpreter", "RuntimeLabel");
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Linq.Expressions.Interpreter.RuntimeLabel
  // [TokenAttribute] Offset: FFFFFFFF
  struct RuntimeLabel/*, public ::System::ValueType*/ {
    public:
    public:
    // public readonly System.Int32 Index
    // Size: 0x4
    // Offset: 0x0
    int Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 StackDepth
    // Size: 0x4
    // Offset: 0x4
    int StackDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 ContinuationStackDepth
    // Size: 0x4
    // Offset: 0x8
    int ContinuationStackDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: RuntimeLabel
    constexpr RuntimeLabel(int Index_ = {}, int StackDepth_ = {}, int ContinuationStackDepth_ = {}) noexcept : Index{Index_}, StackDepth{StackDepth_}, ContinuationStackDepth{ContinuationStackDepth_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly System.Int32 Index
    [[deprecated]] int& dyn_Index();
    // Get instance field reference: public readonly System.Int32 StackDepth
    [[deprecated]] int& dyn_StackDepth();
    // Get instance field reference: public readonly System.Int32 ContinuationStackDepth
    [[deprecated]] int& dyn_ContinuationStackDepth();
    // public System.Void .ctor(System.Int32 index, System.Int32 continuationStackDepth, System.Int32 stackDepth)
    // Offset: 0xE993E0
    // ABORTED: conflicts with another method.  RuntimeLabel(int index, int continuationStackDepth, int stackDepth);
    // public override System.String ToString()
    // Offset: 0xE993EC
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // System.Linq.Expressions.Interpreter.RuntimeLabel
  #pragma pack(pop)
  static check_size<sizeof(RuntimeLabel), 8 + sizeof(int)> __System_Linq_Expressions_Interpreter_RuntimeLabelSizeCheck;
  static_assert(sizeof(RuntimeLabel) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::RuntimeLabel::RuntimeLabel
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::RuntimeLabel::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Linq::Expressions::Interpreter::RuntimeLabel::*)()>(&System::Linq::Expressions::Interpreter::RuntimeLabel::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::RuntimeLabel), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
