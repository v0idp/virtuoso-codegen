// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Linq::Expressions::Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: DebugInfo
  class DebugInfo;
}
// Completed forward declares
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: InterpretedFrameInfo
  struct InterpretedFrameInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::Interpreter::InterpretedFrameInfo, "System.Linq.Expressions.Interpreter", "InterpretedFrameInfo");
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Linq.Expressions.Interpreter.InterpretedFrameInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct InterpretedFrameInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.String _methodName
    // Size: 0x8
    // Offset: 0x0
    ::StringW methodName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Linq.Expressions.Interpreter.DebugInfo _debugInfo
    // Size: 0x8
    // Offset: 0x8
    ::System::Linq::Expressions::Interpreter::DebugInfo* debugInfo;
    // Field size check
    static_assert(sizeof(::System::Linq::Expressions::Interpreter::DebugInfo*) == 0x8);
    public:
    // Creating value type constructor for type: InterpretedFrameInfo
    constexpr InterpretedFrameInfo(::StringW methodName_ = {}, ::System::Linq::Expressions::Interpreter::DebugInfo* debugInfo_ = {}) noexcept : methodName{methodName_}, debugInfo{debugInfo_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly System.String _methodName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__methodName();
    // Get instance field reference: private readonly System.Linq.Expressions.Interpreter.DebugInfo _debugInfo
    [[deprecated("Use field access instead!")]] ::System::Linq::Expressions::Interpreter::DebugInfo*& dyn__debugInfo();
    // public System.Void .ctor(System.String methodName, System.Linq.Expressions.Interpreter.DebugInfo info)
    // Offset: 0xF1EEC8
    // ABORTED: conflicts with another method.  InterpretedFrameInfo(::StringW methodName, ::System::Linq::Expressions::Interpreter::DebugInfo* info);
    // public override System.String ToString()
    // Offset: 0xF1EED0
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // System.Linq.Expressions.Interpreter.InterpretedFrameInfo
  #pragma pack(pop)
  static check_size<sizeof(InterpretedFrameInfo), 8 + sizeof(::System::Linq::Expressions::Interpreter::DebugInfo*)> __System_Linq_Expressions_Interpreter_InterpretedFrameInfoSizeCheck;
  static_assert(sizeof(InterpretedFrameInfo) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InterpretedFrameInfo::InterpretedFrameInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InterpretedFrameInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Linq::Expressions::Interpreter::InterpretedFrameInfo::*)()>(&System::Linq::Expressions::Interpreter::InterpretedFrameInfo::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InterpretedFrameInfo), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
