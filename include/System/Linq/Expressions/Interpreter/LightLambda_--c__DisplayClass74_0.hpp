// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Linq.Expressions.Interpreter.LightLambda
#include "System/Linq/Expressions/Interpreter/LightLambda.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Delegate
  class Delegate;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::Interpreter::LightLambda::$$c__DisplayClass74_0);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::Interpreter::LightLambda::$$c__DisplayClass74_0*, "System.Linq.Expressions.Interpreter", "LightLambda/<>c__DisplayClass74_0");
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.Interpreter.LightLambda/System.Linq.Expressions.Interpreter.<>c__DisplayClass74_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class LightLambda::$$c__DisplayClass74_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Reflection.MethodInfo targetMethod
    // Size: 0x8
    // Offset: 0x10
    ::System::Reflection::MethodInfo* targetMethod;
    // Field size check
    static_assert(sizeof(::System::Reflection::MethodInfo*) == 0x8);
    // public System.Type delegateType
    // Size: 0x8
    // Offset: 0x18
    ::System::Type* delegateType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // Get instance field reference: public System.Reflection.MethodInfo targetMethod
    [[deprecated("Use field access instead!")]] ::System::Reflection::MethodInfo*& dyn_targetMethod();
    // Get instance field reference: public System.Type delegateType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_delegateType();
    // public System.Void .ctor()
    // Offset: 0x16AA208
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightLambda::$$c__DisplayClass74_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::Interpreter::LightLambda::$$c__DisplayClass74_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightLambda::$$c__DisplayClass74_0*, creationType>()));
    }
    // System.Delegate <MakeRunDelegateCtor>b__0(System.Linq.Expressions.Interpreter.LightLambda lambda)
    // Offset: 0x16AA210
    ::System::Delegate* $MakeRunDelegateCtor$b__0(::System::Linq::Expressions::Interpreter::LightLambda* lambda);
  }; // System.Linq.Expressions.Interpreter.LightLambda/System.Linq.Expressions.Interpreter.<>c__DisplayClass74_0
  #pragma pack(pop)
  static check_size<sizeof(LightLambda::$$c__DisplayClass74_0), 24 + sizeof(::System::Type*)> __System_Linq_Expressions_Interpreter_LightLambda_$$c__DisplayClass74_0SizeCheck;
  static_assert(sizeof(LightLambda::$$c__DisplayClass74_0) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightLambda::$$c__DisplayClass74_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightLambda::$$c__DisplayClass74_0::$MakeRunDelegateCtor$b__0
// Il2CppName: <MakeRunDelegateCtor>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Delegate* (System::Linq::Expressions::Interpreter::LightLambda::$$c__DisplayClass74_0::*)(::System::Linq::Expressions::Interpreter::LightLambda*)>(&System::Linq::Expressions::Interpreter::LightLambda::$$c__DisplayClass74_0::$MakeRunDelegateCtor$b__0)> {
  static const MethodInfo* get() {
    static auto* lambda = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "LightLambda")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LightLambda::$$c__DisplayClass74_0*), "<MakeRunDelegateCtor>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lambda});
  }
};
