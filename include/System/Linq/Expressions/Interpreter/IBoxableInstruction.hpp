// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Linq::Expressions::Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: Instruction
  class Instruction;
}
// Completed forward declares
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: IBoxableInstruction
  class IBoxableInstruction;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::Interpreter::IBoxableInstruction);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::Interpreter::IBoxableInstruction*, "System.Linq.Expressions.Interpreter", "IBoxableInstruction");
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.Interpreter.IBoxableInstruction
  // [TokenAttribute] Offset: FFFFFFFF
  class IBoxableInstruction {
    public:
    // public System.Linq.Expressions.Interpreter.Instruction BoxIfIndexMatches(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Linq::Expressions::Interpreter::Instruction* BoxIfIndexMatches(int index);
  }; // System.Linq.Expressions.Interpreter.IBoxableInstruction
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::IBoxableInstruction::BoxIfIndexMatches
// Il2CppName: BoxIfIndexMatches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Interpreter::Instruction* (System::Linq::Expressions::Interpreter::IBoxableInstruction::*)(int)>(&System::Linq::Expressions::Interpreter::IBoxableInstruction::BoxIfIndexMatches)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::IBoxableInstruction*), "BoxIfIndexMatches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
