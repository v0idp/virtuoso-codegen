// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Linq.Expressions.Interpreter.NewInstruction
#include "System/Linq/Expressions/Interpreter/NewInstruction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Linq::Expressions::Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: ByRefUpdater
  class ByRefUpdater;
  // Forward declaring type: InterpretedFrame
  class InterpretedFrame;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: ConstructorInfo
  class ConstructorInfo;
}
// Completed forward declares
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: ByRefNewInstruction
  class ByRefNewInstruction;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::Interpreter::ByRefNewInstruction);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::Interpreter::ByRefNewInstruction*, "System.Linq.Expressions.Interpreter", "ByRefNewInstruction");
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.Interpreter.ByRefNewInstruction
  // [TokenAttribute] Offset: FFFFFFFF
  class ByRefNewInstruction : public ::System::Linq::Expressions::Interpreter::NewInstruction {
    public:
    // Writing base type padding for base size: 0x1C to desired offset: 0x20
    char ___base_padding[0x4] = {};
    public:
    // private readonly System.Linq.Expressions.Interpreter.ByRefUpdater[] _byrefArgs
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::System::Linq::Expressions::Interpreter::ByRefUpdater*> byrefArgs;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Linq::Expressions::Interpreter::ByRefUpdater*>) == 0x8);
    public:
    // Creating conversion operator: operator ::ArrayW<::System::Linq::Expressions::Interpreter::ByRefUpdater*>
    constexpr operator ::ArrayW<::System::Linq::Expressions::Interpreter::ByRefUpdater*>() const noexcept {
      return byrefArgs;
    }
    // Get instance field reference: private readonly System.Linq.Expressions.Interpreter.ByRefUpdater[] _byrefArgs
    [[deprecated]] ::ArrayW<::System::Linq::Expressions::Interpreter::ByRefUpdater*>& dyn__byrefArgs();
    // System.Void .ctor(System.Reflection.ConstructorInfo target, System.Int32 argumentCount, System.Linq.Expressions.Interpreter.ByRefUpdater[] byrefArgs)
    // Offset: 0x11F6588
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ByRefNewInstruction* New_ctor(::System::Reflection::ConstructorInfo* target, int argumentCount, ::ArrayW<::System::Linq::Expressions::Interpreter::ByRefUpdater*> byrefArgs) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::Interpreter::ByRefNewInstruction::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ByRefNewInstruction*, creationType>(target, argumentCount, byrefArgs)));
    }
    // public override System.String get_InstructionName()
    // Offset: 0x11F65B4
    // Implemented from: System.Linq.Expressions.Interpreter.NewInstruction
    // Base method: System.String NewInstruction::get_InstructionName()
    ::StringW get_InstructionName();
    // public override System.Int32 Run(System.Linq.Expressions.Interpreter.InterpretedFrame frame)
    // Offset: 0x11F65F8
    // Implemented from: System.Linq.Expressions.Interpreter.NewInstruction
    // Base method: System.Int32 NewInstruction::Run(System.Linq.Expressions.Interpreter.InterpretedFrame frame)
    int Run(::System::Linq::Expressions::Interpreter::InterpretedFrame* frame);
  }; // System.Linq.Expressions.Interpreter.ByRefNewInstruction
  #pragma pack(pop)
  static check_size<sizeof(ByRefNewInstruction), 32 + sizeof(::ArrayW<::System::Linq::Expressions::Interpreter::ByRefUpdater*>)> __System_Linq_Expressions_Interpreter_ByRefNewInstructionSizeCheck;
  static_assert(sizeof(ByRefNewInstruction) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::ByRefNewInstruction::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::ByRefNewInstruction::get_InstructionName
// Il2CppName: get_InstructionName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Linq::Expressions::Interpreter::ByRefNewInstruction::*)()>(&System::Linq::Expressions::Interpreter::ByRefNewInstruction::get_InstructionName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::ByRefNewInstruction*), "get_InstructionName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::ByRefNewInstruction::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::Interpreter::ByRefNewInstruction::*)(::System::Linq::Expressions::Interpreter::InterpretedFrame*)>(&System::Linq::Expressions::Interpreter::ByRefNewInstruction::Run)> {
  static const MethodInfo* get() {
    static auto* frame = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "InterpretedFrame")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::ByRefNewInstruction*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frame});
  }
};
