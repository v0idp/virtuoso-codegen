// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Linq::Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: ParameterExpression
  class ParameterExpression;
  // Forward declaring type: Expression
  class Expression;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: CatchBlock
  class CatchBlock;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::CatchBlock);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::CatchBlock*, "System.Linq.Expressions", "CatchBlock");
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.CatchBlock
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: 6A0D04
  class CatchBlock : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Linq.Expressions.ParameterExpression <Variable>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Linq::Expressions::ParameterExpression* Variable;
    // Field size check
    static_assert(sizeof(::System::Linq::Expressions::ParameterExpression*) == 0x8);
    // private readonly System.Type <Test>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Type* Test;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private readonly System.Linq.Expressions.Expression <Body>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::System::Linq::Expressions::Expression* Body;
    // Field size check
    static_assert(sizeof(::System::Linq::Expressions::Expression*) == 0x8);
    // private readonly System.Linq.Expressions.Expression <Filter>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::System::Linq::Expressions::Expression* Filter;
    // Field size check
    static_assert(sizeof(::System::Linq::Expressions::Expression*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Linq.Expressions.ParameterExpression <Variable>k__BackingField
    [[deprecated]] ::System::Linq::Expressions::ParameterExpression*& dyn_$Variable$k__BackingField();
    // Get instance field reference: private readonly System.Type <Test>k__BackingField
    [[deprecated]] ::System::Type*& dyn_$Test$k__BackingField();
    // Get instance field reference: private readonly System.Linq.Expressions.Expression <Body>k__BackingField
    [[deprecated]] ::System::Linq::Expressions::Expression*& dyn_$Body$k__BackingField();
    // Get instance field reference: private readonly System.Linq.Expressions.Expression <Filter>k__BackingField
    [[deprecated]] ::System::Linq::Expressions::Expression*& dyn_$Filter$k__BackingField();
    // public System.Linq.Expressions.ParameterExpression get_Variable()
    // Offset: 0x11F8B98
    ::System::Linq::Expressions::ParameterExpression* get_Variable();
    // public System.Type get_Test()
    // Offset: 0x11F8BA0
    ::System::Type* get_Test();
    // public System.Linq.Expressions.Expression get_Body()
    // Offset: 0x11F8BA8
    ::System::Linq::Expressions::Expression* get_Body();
    // public System.Linq.Expressions.Expression get_Filter()
    // Offset: 0x11F8BB0
    ::System::Linq::Expressions::Expression* get_Filter();
    // System.Void .ctor(System.Type test, System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter)
    // Offset: 0x11F8B4C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CatchBlock* New_ctor(::System::Type* test, ::System::Linq::Expressions::ParameterExpression* variable, ::System::Linq::Expressions::Expression* body, ::System::Linq::Expressions::Expression* filter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::CatchBlock::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CatchBlock*, creationType>(test, variable, body, filter)));
    }
    // public System.Linq.Expressions.CatchBlock Update(System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression filter, System.Linq.Expressions.Expression body)
    // Offset: 0x11F8BC0
    ::System::Linq::Expressions::CatchBlock* Update(::System::Linq::Expressions::ParameterExpression* variable, ::System::Linq::Expressions::Expression* filter, ::System::Linq::Expressions::Expression* body);
    // public override System.String ToString()
    // Offset: 0x11F8BB8
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // System.Linq.Expressions.CatchBlock
  #pragma pack(pop)
  static check_size<sizeof(CatchBlock), 40 + sizeof(::System::Linq::Expressions::Expression*)> __System_Linq_Expressions_CatchBlockSizeCheck;
  static_assert(sizeof(CatchBlock) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::CatchBlock::get_Variable
// Il2CppName: get_Variable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::ParameterExpression* (System::Linq::Expressions::CatchBlock::*)()>(&System::Linq::Expressions::CatchBlock::get_Variable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::CatchBlock*), "get_Variable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::CatchBlock::get_Test
// Il2CppName: get_Test
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Linq::Expressions::CatchBlock::*)()>(&System::Linq::Expressions::CatchBlock::get_Test)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::CatchBlock*), "get_Test", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::CatchBlock::get_Body
// Il2CppName: get_Body
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::CatchBlock::*)()>(&System::Linq::Expressions::CatchBlock::get_Body)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::CatchBlock*), "get_Body", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::CatchBlock::get_Filter
// Il2CppName: get_Filter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::CatchBlock::*)()>(&System::Linq::Expressions::CatchBlock::get_Filter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::CatchBlock*), "get_Filter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::CatchBlock::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::CatchBlock::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::CatchBlock* (System::Linq::Expressions::CatchBlock::*)(::System::Linq::Expressions::ParameterExpression*, ::System::Linq::Expressions::Expression*, ::System::Linq::Expressions::Expression*)>(&System::Linq::Expressions::CatchBlock::Update)> {
  static const MethodInfo* get() {
    static auto* variable = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "ParameterExpression")->byval_arg;
    static auto* filter = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "Expression")->byval_arg;
    static auto* body = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "Expression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::CatchBlock*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{variable, filter, body});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::CatchBlock::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Linq::Expressions::CatchBlock::*)()>(&System::Linq::Expressions::CatchBlock::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::CatchBlock*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
