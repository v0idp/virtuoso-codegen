// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Linq.Expressions.IArgumentProvider
#include "System/Linq/Expressions/IArgumentProvider.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: System::Linq::Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: Expression
  class Expression;
}
// Completed forward declares
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: ElementInit
  class ElementInit;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::ElementInit);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::ElementInit*, "System.Linq.Expressions", "ElementInit");
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.ElementInit
  // [TokenAttribute] Offset: FFFFFFFF
  class ElementInit : public ::Il2CppObject/*, public ::System::Linq::Expressions::IArgumentProvider*/ {
    public:
    public:
    // private readonly System.Reflection.MethodInfo <AddMethod>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Reflection::MethodInfo* AddMethod;
    // Field size check
    static_assert(sizeof(::System::Reflection::MethodInfo*) == 0x8);
    // private readonly System.Collections.ObjectModel.ReadOnlyCollection`1<System.Linq.Expressions.Expression> <Arguments>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Linq::Expressions::Expression*>* Arguments;
    // Field size check
    static_assert(sizeof(::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Linq::Expressions::Expression*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Linq::Expressions::IArgumentProvider
    operator ::System::Linq::Expressions::IArgumentProvider() noexcept {
      return *reinterpret_cast<::System::Linq::Expressions::IArgumentProvider*>(this);
    }
    // Get instance field reference: private readonly System.Reflection.MethodInfo <AddMethod>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Reflection::MethodInfo*& dyn_$AddMethod$k__BackingField();
    // Get instance field reference: private readonly System.Collections.ObjectModel.ReadOnlyCollection`1<System.Linq.Expressions.Expression> <Arguments>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Linq::Expressions::Expression*>*& dyn_$Arguments$k__BackingField();
    // public System.Reflection.MethodInfo get_AddMethod()
    // Offset: 0x11FC184
    ::System::Reflection::MethodInfo* get_AddMethod();
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<System.Linq.Expressions.Expression> get_Arguments()
    // Offset: 0x11FC18C
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Linq::Expressions::Expression*>* get_Arguments();
    // public System.Int32 get_ArgumentCount()
    // Offset: 0x11FC1F8
    int get_ArgumentCount();
    // public System.Linq.Expressions.Expression GetArgument(System.Int32 index)
    // Offset: 0x11FC194
    ::System::Linq::Expressions::Expression* GetArgument(int index);
  }; // System.Linq.Expressions.ElementInit
  #pragma pack(pop)
  static check_size<sizeof(ElementInit), 24 + sizeof(::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Linq::Expressions::Expression*>*)> __System_Linq_Expressions_ElementInitSizeCheck;
  static_assert(sizeof(ElementInit) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::ElementInit::get_AddMethod
// Il2CppName: get_AddMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MethodInfo* (System::Linq::Expressions::ElementInit::*)()>(&System::Linq::Expressions::ElementInit::get_AddMethod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ElementInit*), "get_AddMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ElementInit::get_Arguments
// Il2CppName: get_Arguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Linq::Expressions::Expression*>* (System::Linq::Expressions::ElementInit::*)()>(&System::Linq::Expressions::ElementInit::get_Arguments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ElementInit*), "get_Arguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ElementInit::get_ArgumentCount
// Il2CppName: get_ArgumentCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::ElementInit::*)()>(&System::Linq::Expressions::ElementInit::get_ArgumentCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ElementInit*), "get_ArgumentCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ElementInit::GetArgument
// Il2CppName: GetArgument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ElementInit::*)(int)>(&System::Linq::Expressions::ElementInit::GetArgument)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ElementInit*), "GetArgument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
