// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Linq.Expressions.Expression
#include "System/Linq/Expressions/Expression.hpp"
// Including type: System.Linq.Expressions.ExpressionType
#include "System/Linq/Expressions/ExpressionType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Forward declaring namespace: System::Linq::Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: ExpressionVisitor
  class ExpressionVisitor;
}
// Completed forward declares
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: UnaryExpression
  class UnaryExpression;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::UnaryExpression);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::UnaryExpression*, "System.Linq.Expressions", "UnaryExpression");
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.UnaryExpression
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: 6A15C4
  class UnaryExpression : public ::System::Linq::Expressions::Expression {
    public:
    public:
    // private readonly System.Type <Type>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Type* Type;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private readonly System.Linq.Expressions.ExpressionType <NodeType>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    ::System::Linq::Expressions::ExpressionType NodeType;
    // Field size check
    static_assert(sizeof(::System::Linq::Expressions::ExpressionType) == 0x4);
    // Padding between fields: NodeType and: Operand
    char __padding1[0x4] = {};
    // private readonly System.Linq.Expressions.Expression <Operand>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::System::Linq::Expressions::Expression* Operand;
    // Field size check
    static_assert(sizeof(::System::Linq::Expressions::Expression*) == 0x8);
    // private readonly System.Reflection.MethodInfo <Method>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::System::Reflection::MethodInfo* Method;
    // Field size check
    static_assert(sizeof(::System::Reflection::MethodInfo*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Type <Type>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_$Type$k__BackingField();
    // Get instance field reference: private readonly System.Linq.Expressions.ExpressionType <NodeType>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Linq::Expressions::ExpressionType& dyn_$NodeType$k__BackingField();
    // Get instance field reference: private readonly System.Linq.Expressions.Expression <Operand>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Linq::Expressions::Expression*& dyn_$Operand$k__BackingField();
    // Get instance field reference: private readonly System.Reflection.MethodInfo <Method>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Reflection::MethodInfo*& dyn_$Method$k__BackingField();
    // public System.Linq.Expressions.Expression get_Operand()
    // Offset: 0xEA1BF8
    ::System::Linq::Expressions::Expression* get_Operand();
    // public System.Reflection.MethodInfo get_Method()
    // Offset: 0xEA1C00
    ::System::Reflection::MethodInfo* get_Method();
    // public System.Boolean get_IsLifted()
    // Offset: 0xEA1C08
    bool get_IsLifted();
    // public System.Boolean get_IsLiftedToNull()
    // Offset: 0xEA1DCC
    bool get_IsLiftedToNull();
    // private System.Boolean get_IsPrefix()
    // Offset: 0xEA2D28
    bool get_IsPrefix();
    // System.Void .ctor(System.Linq.Expressions.ExpressionType nodeType, System.Linq.Expressions.Expression expression, System.Type type, System.Reflection.MethodInfo method)
    // Offset: 0xEA1B54
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnaryExpression* New_ctor(::System::Linq::Expressions::ExpressionType nodeType, ::System::Linq::Expressions::Expression* expression, ::System::Type* type, ::System::Reflection::MethodInfo* method) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::UnaryExpression::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnaryExpression*, creationType>(nodeType, expression, type, method)));
    }
    // private System.Linq.Expressions.UnaryExpression FunctionalOp(System.Linq.Expressions.Expression operand)
    // Offset: 0xEA2D78
    ::System::Linq::Expressions::UnaryExpression* FunctionalOp(::System::Linq::Expressions::Expression* operand);
    // private System.Linq.Expressions.Expression ReduceVariable()
    // Offset: 0xEA2A38
    ::System::Linq::Expressions::Expression* ReduceVariable();
    // private System.Linq.Expressions.Expression ReduceMember()
    // Offset: 0xEA2520
    ::System::Linq::Expressions::Expression* ReduceMember();
    // private System.Linq.Expressions.Expression ReduceIndex()
    // Offset: 0xEA1EEC
    ::System::Linq::Expressions::Expression* ReduceIndex();
    // public System.Linq.Expressions.UnaryExpression Update(System.Linq.Expressions.Expression operand)
    // Offset: 0xEA2E50
    ::System::Linq::Expressions::UnaryExpression* Update(::System::Linq::Expressions::Expression* operand);
    // public override System.Type get_Type()
    // Offset: 0xEA1BE8
    // Implemented from: System.Linq.Expressions.Expression
    // Base method: System.Type Expression::get_Type()
    ::System::Type* get_Type();
    // public override System.Linq.Expressions.ExpressionType get_NodeType()
    // Offset: 0xEA1BF0
    // Implemented from: System.Linq.Expressions.Expression
    // Base method: System.Linq.Expressions.ExpressionType Expression::get_NodeType()
    ::System::Linq::Expressions::ExpressionType get_NodeType();
    // public override System.Boolean get_CanReduce()
    // Offset: 0xEA1E3C
    // Implemented from: System.Linq.Expressions.Expression
    // Base method: System.Boolean Expression::get_CanReduce()
    bool get_CanReduce();
    // protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor)
    // Offset: 0xEA1E10
    // Implemented from: System.Linq.Expressions.Expression
    // Base method: System.Linq.Expressions.Expression Expression::Accept(System.Linq.Expressions.ExpressionVisitor visitor)
    ::System::Linq::Expressions::Expression* Accept(::System::Linq::Expressions::ExpressionVisitor* visitor);
    // public override System.Linq.Expressions.Expression Reduce()
    // Offset: 0xEA1E64
    // Implemented from: System.Linq.Expressions.Expression
    // Base method: System.Linq.Expressions.Expression Expression::Reduce()
    ::System::Linq::Expressions::Expression* Reduce();
  }; // System.Linq.Expressions.UnaryExpression
  #pragma pack(pop)
  static check_size<sizeof(UnaryExpression), 40 + sizeof(::System::Reflection::MethodInfo*)> __System_Linq_Expressions_UnaryExpressionSizeCheck;
  static_assert(sizeof(UnaryExpression) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::UnaryExpression::get_Operand
// Il2CppName: get_Operand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::UnaryExpression::*)()>(&System::Linq::Expressions::UnaryExpression::get_Operand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::UnaryExpression*), "get_Operand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::UnaryExpression::get_Method
// Il2CppName: get_Method
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MethodInfo* (System::Linq::Expressions::UnaryExpression::*)()>(&System::Linq::Expressions::UnaryExpression::get_Method)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::UnaryExpression*), "get_Method", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::UnaryExpression::get_IsLifted
// Il2CppName: get_IsLifted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Linq::Expressions::UnaryExpression::*)()>(&System::Linq::Expressions::UnaryExpression::get_IsLifted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::UnaryExpression*), "get_IsLifted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::UnaryExpression::get_IsLiftedToNull
// Il2CppName: get_IsLiftedToNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Linq::Expressions::UnaryExpression::*)()>(&System::Linq::Expressions::UnaryExpression::get_IsLiftedToNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::UnaryExpression*), "get_IsLiftedToNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::UnaryExpression::get_IsPrefix
// Il2CppName: get_IsPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Linq::Expressions::UnaryExpression::*)()>(&System::Linq::Expressions::UnaryExpression::get_IsPrefix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::UnaryExpression*), "get_IsPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::UnaryExpression::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::UnaryExpression::FunctionalOp
// Il2CppName: FunctionalOp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::UnaryExpression* (System::Linq::Expressions::UnaryExpression::*)(::System::Linq::Expressions::Expression*)>(&System::Linq::Expressions::UnaryExpression::FunctionalOp)> {
  static const MethodInfo* get() {
    static auto* operand = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "Expression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::UnaryExpression*), "FunctionalOp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operand});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::UnaryExpression::ReduceVariable
// Il2CppName: ReduceVariable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::UnaryExpression::*)()>(&System::Linq::Expressions::UnaryExpression::ReduceVariable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::UnaryExpression*), "ReduceVariable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::UnaryExpression::ReduceMember
// Il2CppName: ReduceMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::UnaryExpression::*)()>(&System::Linq::Expressions::UnaryExpression::ReduceMember)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::UnaryExpression*), "ReduceMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::UnaryExpression::ReduceIndex
// Il2CppName: ReduceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::UnaryExpression::*)()>(&System::Linq::Expressions::UnaryExpression::ReduceIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::UnaryExpression*), "ReduceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::UnaryExpression::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::UnaryExpression* (System::Linq::Expressions::UnaryExpression::*)(::System::Linq::Expressions::Expression*)>(&System::Linq::Expressions::UnaryExpression::Update)> {
  static const MethodInfo* get() {
    static auto* operand = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "Expression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::UnaryExpression*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operand});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::UnaryExpression::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Linq::Expressions::UnaryExpression::*)()>(&System::Linq::Expressions::UnaryExpression::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::UnaryExpression*), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::UnaryExpression::get_NodeType
// Il2CppName: get_NodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::ExpressionType (System::Linq::Expressions::UnaryExpression::*)()>(&System::Linq::Expressions::UnaryExpression::get_NodeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::UnaryExpression*), "get_NodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::UnaryExpression::get_CanReduce
// Il2CppName: get_CanReduce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Linq::Expressions::UnaryExpression::*)()>(&System::Linq::Expressions::UnaryExpression::get_CanReduce)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::UnaryExpression*), "get_CanReduce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::UnaryExpression::Accept
// Il2CppName: Accept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::UnaryExpression::*)(::System::Linq::Expressions::ExpressionVisitor*)>(&System::Linq::Expressions::UnaryExpression::Accept)> {
  static const MethodInfo* get() {
    static auto* visitor = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "ExpressionVisitor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::UnaryExpression*), "Accept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{visitor});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::UnaryExpression::Reduce
// Il2CppName: Reduce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::UnaryExpression::*)()>(&System::Linq::Expressions::UnaryExpression::Reduce)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::UnaryExpression*), "Reduce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
