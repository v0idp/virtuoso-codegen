// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Linq.Expressions.ExpressionVisitor
#include "System/Linq/Expressions/ExpressionVisitor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Linq::Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: LabelTarget
  class LabelTarget;
  // Forward declaring type: ParameterExpression
  class ParameterExpression;
  // Forward declaring type: Expression
  class Expression;
  // Forward declaring type: CatchBlock
  class CatchBlock;
  // Forward declaring type: BinaryExpression
  class BinaryExpression;
  // Forward declaring type: Expression`1<TDelegate>
  template<typename TDelegate>
  class Expression_1;
  // Forward declaring type: ConditionalExpression
  class ConditionalExpression;
  // Forward declaring type: ConstantExpression
  class ConstantExpression;
  // Forward declaring type: MemberExpression
  class MemberExpression;
  // Forward declaring type: InvocationExpression
  class InvocationExpression;
  // Forward declaring type: MethodCallExpression
  class MethodCallExpression;
  // Forward declaring type: NewArrayExpression
  class NewArrayExpression;
  // Forward declaring type: TypeBinaryExpression
  class TypeBinaryExpression;
  // Forward declaring type: UnaryExpression
  class UnaryExpression;
  // Forward declaring type: BlockExpression
  class BlockExpression;
  // Forward declaring type: DefaultExpression
  class DefaultExpression;
  // Forward declaring type: LabelExpression
  class LabelExpression;
  // Forward declaring type: GotoExpression
  class GotoExpression;
  // Forward declaring type: LoopExpression
  class LoopExpression;
  // Forward declaring type: TryExpression
  class TryExpression;
  // Forward declaring type: IndexExpression
  class IndexExpression;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MemberInfo
  class MemberInfo;
}
// Completed forward declares
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: ExpressionStringBuilder
  class ExpressionStringBuilder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::ExpressionStringBuilder);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::ExpressionStringBuilder*, "System.Linq.Expressions", "ExpressionStringBuilder");
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.ExpressionStringBuilder
  // [TokenAttribute] Offset: FFFFFFFF
  class ExpressionStringBuilder : public ::System::Linq::Expressions::ExpressionVisitor {
    public:
    public:
    // private readonly System.Text.StringBuilder _out
    // Size: 0x8
    // Offset: 0x10
    ::System::Text::StringBuilder* out;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Object,System.Int32> _ids
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, int>* ids;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Il2CppObject*, int>*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Text.StringBuilder _out
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn__out();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Object,System.Int32> _ids
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, int>*& dyn__ids();
    // private System.Int32 GetLabelId(System.Linq.Expressions.LabelTarget label)
    // Offset: 0x15D01BC
    int GetLabelId(::System::Linq::Expressions::LabelTarget* label);
    // private System.Int32 GetParamId(System.Linq.Expressions.ParameterExpression p)
    // Offset: 0x15D02D4
    int GetParamId(::System::Linq::Expressions::ParameterExpression* p);
    // private System.Int32 GetId(System.Object o)
    // Offset: 0x15D01C0
    int GetId(::Il2CppObject* o);
    // private System.Void Out(System.String s)
    // Offset: 0x15D02D8
    void Out(::StringW s);
    // private System.Void Out(System.Char c)
    // Offset: 0x15D02F4
    void Out(::Il2CppChar c);
    // static System.String ExpressionToString(System.Linq.Expressions.Expression node)
    // Offset: 0x15C3DA4
    static ::StringW ExpressionToString(::System::Linq::Expressions::Expression* node);
    // static System.String CatchBlockToString(System.Linq.Expressions.CatchBlock node)
    // Offset: 0x15D0310
    static ::StringW CatchBlockToString(::System::Linq::Expressions::CatchBlock* node);
    // private System.Void VisitExpressions(System.Char open, System.Collections.ObjectModel.ReadOnlyCollection`1<T> expressions, System.Char close)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void VisitExpressions(::Il2CppChar open, ::System::Collections::ObjectModel::ReadOnlyCollection_1<T>* expressions, ::Il2CppChar close) {
      static_assert(std::is_convertible_v<T, ::System::Linq::Expressions::Expression*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::ExpressionStringBuilder::VisitExpressions");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VisitExpressions", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(open), ::il2cpp_utils::ExtractType(expressions), ::il2cpp_utils::ExtractType(close)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, open, expressions, close);
    }
    // private System.Void VisitExpressions(System.Char open, System.Collections.ObjectModel.ReadOnlyCollection`1<T> expressions, System.Char close, System.String seperator)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void VisitExpressions(::Il2CppChar open, ::System::Collections::ObjectModel::ReadOnlyCollection_1<T>* expressions, ::Il2CppChar close, ::StringW seperator) {
      static_assert(std::is_convertible_v<T, ::System::Linq::Expressions::Expression*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::ExpressionStringBuilder::VisitExpressions");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VisitExpressions", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(open), ::il2cpp_utils::ExtractType(expressions), ::il2cpp_utils::ExtractType(close), ::il2cpp_utils::ExtractType(seperator)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, open, expressions, close, seperator);
    }
    // private System.Void OutMember(System.Linq.Expressions.Expression instance, System.Reflection.MemberInfo member)
    // Offset: 0x15D0D74
    void OutMember(::System::Linq::Expressions::Expression* instance, ::System::Reflection::MemberInfo* member);
    // private System.Void DumpLabel(System.Linq.Expressions.LabelTarget target)
    // Offset: 0x15D1CBC
    void DumpLabel(::System::Linq::Expressions::LabelTarget* target);
    // static private System.Boolean IsBool(System.Linq.Expressions.Expression node)
    // Offset: 0x15D08A0
    static bool IsBool(::System::Linq::Expressions::Expression* node);
    // private System.Void .ctor()
    // Offset: 0x15D012C
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Void ExpressionVisitor::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ExpressionStringBuilder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::ExpressionStringBuilder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ExpressionStringBuilder*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0x15D019C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
    // protected internal override System.Linq.Expressions.Expression VisitBinary(System.Linq.Expressions.BinaryExpression node)
    // Offset: 0x15D0390
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitBinary(System.Linq.Expressions.BinaryExpression node)
    ::System::Linq::Expressions::Expression* VisitBinary(::System::Linq::Expressions::BinaryExpression* node);
    // protected internal override System.Linq.Expressions.Expression VisitParameter(System.Linq.Expressions.ParameterExpression node)
    // Offset: 0x15D09D0
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitParameter(System.Linq.Expressions.ParameterExpression node)
    ::System::Linq::Expressions::Expression* VisitParameter(::System::Linq::Expressions::ParameterExpression* node);
    // protected internal override System.Linq.Expressions.Expression VisitLambda(System.Linq.Expressions.Expression`1<T> node)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitLambda(System.Linq.Expressions.Expression`1<T> node)
    template<class T>
    ::System::Linq::Expressions::Expression* VisitLambda(::System::Linq::Expressions::Expression_1<T>* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::ExpressionStringBuilder::VisitLambda");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Linq::Expressions::ExpressionVisitor*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Linq::Expressions::Expression*, false>(this, ___generic__method, node);
    }
    // protected internal override System.Linq.Expressions.Expression VisitConditional(System.Linq.Expressions.ConditionalExpression node)
    // Offset: 0x15D0AE8
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitConditional(System.Linq.Expressions.ConditionalExpression node)
    ::System::Linq::Expressions::Expression* VisitConditional(::System::Linq::Expressions::ConditionalExpression* node);
    // protected internal override System.Linq.Expressions.Expression VisitConstant(System.Linq.Expressions.ConstantExpression node)
    // Offset: 0x15D0BF0
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitConstant(System.Linq.Expressions.ConstantExpression node)
    ::System::Linq::Expressions::Expression* VisitConstant(::System::Linq::Expressions::ConstantExpression* node);
    // protected internal override System.Linq.Expressions.Expression VisitMember(System.Linq.Expressions.MemberExpression node)
    // Offset: 0x15D0E38
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitMember(System.Linq.Expressions.MemberExpression node)
    ::System::Linq::Expressions::Expression* VisitMember(::System::Linq::Expressions::MemberExpression* node);
    // protected internal override System.Linq.Expressions.Expression VisitInvocation(System.Linq.Expressions.InvocationExpression node)
    // Offset: 0x15D0E8C
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitInvocation(System.Linq.Expressions.InvocationExpression node)
    ::System::Linq::Expressions::Expression* VisitInvocation(::System::Linq::Expressions::InvocationExpression* node);
    // protected internal override System.Linq.Expressions.Expression VisitMethodCall(System.Linq.Expressions.MethodCallExpression node)
    // Offset: 0x15D0FC0
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitMethodCall(System.Linq.Expressions.MethodCallExpression node)
    ::System::Linq::Expressions::Expression* VisitMethodCall(::System::Linq::Expressions::MethodCallExpression* node);
    // protected internal override System.Linq.Expressions.Expression VisitNewArray(System.Linq.Expressions.NewArrayExpression node)
    // Offset: 0x15D11C4
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitNewArray(System.Linq.Expressions.NewArrayExpression node)
    ::System::Linq::Expressions::Expression* VisitNewArray(::System::Linq::Expressions::NewArrayExpression* node);
    // protected internal override System.Linq.Expressions.Expression VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression node)
    // Offset: 0x15D12F8
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression node)
    ::System::Linq::Expressions::Expression* VisitTypeBinary(::System::Linq::Expressions::TypeBinaryExpression* node);
    // protected internal override System.Linq.Expressions.Expression VisitUnary(System.Linq.Expressions.UnaryExpression node)
    // Offset: 0x15D1410
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitUnary(System.Linq.Expressions.UnaryExpression node)
    ::System::Linq::Expressions::Expression* VisitUnary(::System::Linq::Expressions::UnaryExpression* node);
    // protected internal override System.Linq.Expressions.Expression VisitBlock(System.Linq.Expressions.BlockExpression node)
    // Offset: 0x15D1864
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitBlock(System.Linq.Expressions.BlockExpression node)
    ::System::Linq::Expressions::Expression* VisitBlock(::System::Linq::Expressions::BlockExpression* node);
    // protected internal override System.Linq.Expressions.Expression VisitDefault(System.Linq.Expressions.DefaultExpression node)
    // Offset: 0x15D1B70
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitDefault(System.Linq.Expressions.DefaultExpression node)
    ::System::Linq::Expressions::Expression* VisitDefault(::System::Linq::Expressions::DefaultExpression* node);
    // protected internal override System.Linq.Expressions.Expression VisitLabel(System.Linq.Expressions.LabelExpression node)
    // Offset: 0x15D1C2C
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitLabel(System.Linq.Expressions.LabelExpression node)
    ::System::Linq::Expressions::Expression* VisitLabel(::System::Linq::Expressions::LabelExpression* node);
    // protected internal override System.Linq.Expressions.Expression VisitGoto(System.Linq.Expressions.GotoExpression node)
    // Offset: 0x15D1DA4
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitGoto(System.Linq.Expressions.GotoExpression node)
    ::System::Linq::Expressions::Expression* VisitGoto(::System::Linq::Expressions::GotoExpression* node);
    // protected internal override System.Linq.Expressions.Expression VisitLoop(System.Linq.Expressions.LoopExpression node)
    // Offset: 0x15D1F08
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitLoop(System.Linq.Expressions.LoopExpression node)
    ::System::Linq::Expressions::Expression* VisitLoop(::System::Linq::Expressions::LoopExpression* node);
    // protected override System.Linq.Expressions.CatchBlock VisitCatchBlock(System.Linq.Expressions.CatchBlock node)
    // Offset: 0x15D1F74
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.CatchBlock ExpressionVisitor::VisitCatchBlock(System.Linq.Expressions.CatchBlock node)
    ::System::Linq::Expressions::CatchBlock* VisitCatchBlock(::System::Linq::Expressions::CatchBlock* node);
    // protected internal override System.Linq.Expressions.Expression VisitTry(System.Linq.Expressions.TryExpression node)
    // Offset: 0x15D2088
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitTry(System.Linq.Expressions.TryExpression node)
    ::System::Linq::Expressions::Expression* VisitTry(::System::Linq::Expressions::TryExpression* node);
    // protected internal override System.Linq.Expressions.Expression VisitIndex(System.Linq.Expressions.IndexExpression node)
    // Offset: 0x15D20F4
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitIndex(System.Linq.Expressions.IndexExpression node)
    ::System::Linq::Expressions::Expression* VisitIndex(::System::Linq::Expressions::IndexExpression* node);
    // protected internal override System.Linq.Expressions.Expression VisitExtension(System.Linq.Expressions.Expression node)
    // Offset: 0x15D2298
    // Implemented from: System.Linq.Expressions.ExpressionVisitor
    // Base method: System.Linq.Expressions.Expression ExpressionVisitor::VisitExtension(System.Linq.Expressions.Expression node)
    ::System::Linq::Expressions::Expression* VisitExtension(::System::Linq::Expressions::Expression* node);
  }; // System.Linq.Expressions.ExpressionStringBuilder
  #pragma pack(pop)
  static check_size<sizeof(ExpressionStringBuilder), 24 + sizeof(::System::Collections::Generic::Dictionary_2<::Il2CppObject*, int>*)> __System_Linq_Expressions_ExpressionStringBuilderSizeCheck;
  static_assert(sizeof(ExpressionStringBuilder) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::GetLabelId
// Il2CppName: GetLabelId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::LabelTarget*)>(&System::Linq::Expressions::ExpressionStringBuilder::GetLabelId)> {
  static const MethodInfo* get() {
    static auto* label = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "LabelTarget")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "GetLabelId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{label});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::GetParamId
// Il2CppName: GetParamId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::ParameterExpression*)>(&System::Linq::Expressions::ExpressionStringBuilder::GetParamId)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "ParameterExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "GetParamId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::GetId
// Il2CppName: GetId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::ExpressionStringBuilder::*)(::Il2CppObject*)>(&System::Linq::Expressions::ExpressionStringBuilder::GetId)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "GetId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::Out
// Il2CppName: Out
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::ExpressionStringBuilder::*)(::StringW)>(&System::Linq::Expressions::ExpressionStringBuilder::Out)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "Out", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::Out
// Il2CppName: Out
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::ExpressionStringBuilder::*)(::Il2CppChar)>(&System::Linq::Expressions::ExpressionStringBuilder::Out)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "Out", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::ExpressionToString
// Il2CppName: ExpressionToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Linq::Expressions::Expression*)>(&System::Linq::Expressions::ExpressionStringBuilder::ExpressionToString)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "Expression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "ExpressionToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::CatchBlockToString
// Il2CppName: CatchBlockToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Linq::Expressions::CatchBlock*)>(&System::Linq::Expressions::ExpressionStringBuilder::CatchBlockToString)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "CatchBlock")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "CatchBlockToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitExpressions
// Il2CppName: VisitExpressions
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitExpressions
// Il2CppName: VisitExpressions
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::OutMember
// Il2CppName: OutMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::Expression*, ::System::Reflection::MemberInfo*)>(&System::Linq::Expressions::ExpressionStringBuilder::OutMember)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "Expression")->byval_arg;
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "OutMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, member});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::DumpLabel
// Il2CppName: DumpLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::LabelTarget*)>(&System::Linq::Expressions::ExpressionStringBuilder::DumpLabel)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "LabelTarget")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "DumpLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::IsBool
// Il2CppName: IsBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Linq::Expressions::Expression*)>(&System::Linq::Expressions::ExpressionStringBuilder::IsBool)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "Expression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "IsBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Linq::Expressions::ExpressionStringBuilder::*)()>(&System::Linq::Expressions::ExpressionStringBuilder::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitBinary
// Il2CppName: VisitBinary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::BinaryExpression*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitBinary)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "BinaryExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitBinary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitParameter
// Il2CppName: VisitParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::ParameterExpression*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitParameter)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "ParameterExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitLambda
// Il2CppName: VisitLambda
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitConditional
// Il2CppName: VisitConditional
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::ConditionalExpression*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitConditional)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "ConditionalExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitConditional", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitConstant
// Il2CppName: VisitConstant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::ConstantExpression*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitConstant)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "ConstantExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitConstant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitMember
// Il2CppName: VisitMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::MemberExpression*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitMember)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "MemberExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitInvocation
// Il2CppName: VisitInvocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::InvocationExpression*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitInvocation)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "InvocationExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitInvocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitMethodCall
// Il2CppName: VisitMethodCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::MethodCallExpression*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitMethodCall)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "MethodCallExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitMethodCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitNewArray
// Il2CppName: VisitNewArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::NewArrayExpression*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitNewArray)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "NewArrayExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitNewArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitTypeBinary
// Il2CppName: VisitTypeBinary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::TypeBinaryExpression*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitTypeBinary)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "TypeBinaryExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitTypeBinary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitUnary
// Il2CppName: VisitUnary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::UnaryExpression*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitUnary)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "UnaryExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitUnary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitBlock
// Il2CppName: VisitBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::BlockExpression*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitBlock)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "BlockExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitDefault
// Il2CppName: VisitDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::DefaultExpression*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitDefault)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "DefaultExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitLabel
// Il2CppName: VisitLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::LabelExpression*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitLabel)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "LabelExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitGoto
// Il2CppName: VisitGoto
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::GotoExpression*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitGoto)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "GotoExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitGoto", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitLoop
// Il2CppName: VisitLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::LoopExpression*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitLoop)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "LoopExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitCatchBlock
// Il2CppName: VisitCatchBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::CatchBlock* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::CatchBlock*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitCatchBlock)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "CatchBlock")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitCatchBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitTry
// Il2CppName: VisitTry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::TryExpression*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitTry)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "TryExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitTry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitIndex
// Il2CppName: VisitIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::IndexExpression*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitIndex)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "IndexExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::ExpressionStringBuilder::VisitExtension
// Il2CppName: VisitExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::ExpressionStringBuilder::*)(::System::Linq::Expressions::Expression*)>(&System::Linq::Expressions::ExpressionStringBuilder::VisitExtension)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Linq.Expressions", "Expression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::ExpressionStringBuilder*), "VisitExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
