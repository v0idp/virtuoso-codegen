// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Linq.Expressions.Expression
#include "System/Linq/Expressions/Expression.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: ConstructorInfo
  class ConstructorInfo;
}
// Completed forward declares
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: NewExpression
  class NewExpression;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::NewExpression);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::NewExpression*, "System.Linq.Expressions", "NewExpression");
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.NewExpression
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: 6A1314
  class NewExpression : public ::System::Linq::Expressions::Expression {
    public:
    public:
    // private System.Collections.Generic.IReadOnlyList`1<System.Linq.Expressions.Expression> _arguments
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::IReadOnlyList_1<::System::Linq::Expressions::Expression*>* arguments;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IReadOnlyList_1<::System::Linq::Expressions::Expression*>*) == 0x8);
    // private readonly System.Reflection.ConstructorInfo <Constructor>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Reflection::ConstructorInfo* Constructor;
    // Field size check
    static_assert(sizeof(::System::Reflection::ConstructorInfo*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.Generic.IReadOnlyList`1<System.Linq.Expressions.Expression> _arguments
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::System::Linq::Expressions::Expression*>*& dyn__arguments();
    // Get instance field reference: private readonly System.Reflection.ConstructorInfo <Constructor>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Reflection::ConstructorInfo*& dyn_$Constructor$k__BackingField();
    // public System.Reflection.ConstructorInfo get_Constructor()
    // Offset: 0xE942EC
    ::System::Reflection::ConstructorInfo* get_Constructor();
    // public System.Linq.Expressions.Expression GetArgument(System.Int32 index)
    // Offset: 0xE942F4
    ::System::Linq::Expressions::Expression* GetArgument(int index);
  }; // System.Linq.Expressions.NewExpression
  #pragma pack(pop)
  static check_size<sizeof(NewExpression), 24 + sizeof(::System::Reflection::ConstructorInfo*)> __System_Linq_Expressions_NewExpressionSizeCheck;
  static_assert(sizeof(NewExpression) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::NewExpression::get_Constructor
// Il2CppName: get_Constructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::ConstructorInfo* (System::Linq::Expressions::NewExpression::*)()>(&System::Linq::Expressions::NewExpression::get_Constructor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::NewExpression*), "get_Constructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::NewExpression::GetArgument
// Il2CppName: GetArgument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::NewExpression::*)(int)>(&System::Linq::Expressions::NewExpression::GetArgument)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::NewExpression*), "GetArgument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
