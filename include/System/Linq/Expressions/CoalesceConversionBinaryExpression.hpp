// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Linq.Expressions.BinaryExpression
#include "System/Linq/Expressions/BinaryExpression.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Linq::Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: LambdaExpression
  class LambdaExpression;
  // Forward declaring type: ExpressionType
  struct ExpressionType;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: CoalesceConversionBinaryExpression
  class CoalesceConversionBinaryExpression;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::CoalesceConversionBinaryExpression);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::CoalesceConversionBinaryExpression*, "System.Linq.Expressions", "CoalesceConversionBinaryExpression");
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.CoalesceConversionBinaryExpression
  // [TokenAttribute] Offset: FFFFFFFF
  class CoalesceConversionBinaryExpression : public ::System::Linq::Expressions::BinaryExpression {
    public:
    public:
    // private readonly System.Linq.Expressions.LambdaExpression _conversion
    // Size: 0x8
    // Offset: 0x20
    ::System::Linq::Expressions::LambdaExpression* conversion;
    // Field size check
    static_assert(sizeof(::System::Linq::Expressions::LambdaExpression*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Linq::Expressions::LambdaExpression*
    constexpr operator ::System::Linq::Expressions::LambdaExpression*() const noexcept {
      return conversion;
    }
    // Get instance field reference: private readonly System.Linq.Expressions.LambdaExpression _conversion
    [[deprecated("Use field access instead!")]] ::System::Linq::Expressions::LambdaExpression*& dyn__conversion();
    // System.Void .ctor(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Linq.Expressions.LambdaExpression conversion)
    // Offset: 0x11F8C8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CoalesceConversionBinaryExpression* New_ctor(::System::Linq::Expressions::Expression* left, ::System::Linq::Expressions::Expression* right, ::System::Linq::Expressions::LambdaExpression* conversion) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::CoalesceConversionBinaryExpression::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CoalesceConversionBinaryExpression*, creationType>(left, right, conversion)));
    }
    // public override System.Linq.Expressions.ExpressionType get_NodeType()
    // Offset: 0x11F8CBC
    // Implemented from: System.Linq.Expressions.Expression
    // Base method: System.Linq.Expressions.ExpressionType Expression::get_NodeType()
    ::System::Linq::Expressions::ExpressionType get_NodeType();
    // public override System.Type get_Type()
    // Offset: 0x11F8CC4
    // Implemented from: System.Linq.Expressions.Expression
    // Base method: System.Type Expression::get_Type()
    ::System::Type* get_Type();
    // override System.Linq.Expressions.LambdaExpression GetConversion()
    // Offset: 0x11F8CB4
    // Implemented from: System.Linq.Expressions.BinaryExpression
    // Base method: System.Linq.Expressions.LambdaExpression BinaryExpression::GetConversion()
    ::System::Linq::Expressions::LambdaExpression* GetConversion();
  }; // System.Linq.Expressions.CoalesceConversionBinaryExpression
  #pragma pack(pop)
  static check_size<sizeof(CoalesceConversionBinaryExpression), 32 + sizeof(::System::Linq::Expressions::LambdaExpression*)> __System_Linq_Expressions_CoalesceConversionBinaryExpressionSizeCheck;
  static_assert(sizeof(CoalesceConversionBinaryExpression) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::CoalesceConversionBinaryExpression::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::CoalesceConversionBinaryExpression::get_NodeType
// Il2CppName: get_NodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::ExpressionType (System::Linq::Expressions::CoalesceConversionBinaryExpression::*)()>(&System::Linq::Expressions::CoalesceConversionBinaryExpression::get_NodeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::CoalesceConversionBinaryExpression*), "get_NodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::CoalesceConversionBinaryExpression::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Linq::Expressions::CoalesceConversionBinaryExpression::*)()>(&System::Linq::Expressions::CoalesceConversionBinaryExpression::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::CoalesceConversionBinaryExpression*), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::CoalesceConversionBinaryExpression::GetConversion
// Il2CppName: GetConversion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::LambdaExpression* (System::Linq::Expressions::CoalesceConversionBinaryExpression::*)()>(&System::Linq::Expressions::CoalesceConversionBinaryExpression::GetConversion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::CoalesceConversionBinaryExpression*), "GetConversion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
