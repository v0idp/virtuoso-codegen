// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Linq.Expressions.Expression
#include "System/Linq/Expressions/Expression.hpp"
// Including type: System.Linq.Expressions.IParameterProvider
#include "System/Linq/Expressions/IParameterProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Linq::Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: ParameterExpression
  class ParameterExpression;
  // Forward declaring type: ExpressionType
  struct ExpressionType;
}
// Completed forward declares
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: LambdaExpression
  class LambdaExpression;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::LambdaExpression);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::LambdaExpression*, "System.Linq.Expressions", "LambdaExpression");
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.LambdaExpression
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: 6A1074
  class LambdaExpression : public ::System::Linq::Expressions::Expression/*, public ::System::Linq::Expressions::IParameterProvider*/ {
    public:
    public:
    // private readonly System.Linq.Expressions.Expression _body
    // Size: 0x8
    // Offset: 0x10
    ::System::Linq::Expressions::Expression* body;
    // Field size check
    static_assert(sizeof(::System::Linq::Expressions::Expression*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Linq::Expressions::IParameterProvider
    operator ::System::Linq::Expressions::IParameterProvider() noexcept {
      return *reinterpret_cast<::System::Linq::Expressions::IParameterProvider*>(this);
    }
    // Creating conversion operator: operator ::System::Linq::Expressions::Expression*
    constexpr operator ::System::Linq::Expressions::Expression*() const noexcept {
      return body;
    }
    // Get instance field reference: private readonly System.Linq.Expressions.Expression _body
    [[deprecated]] ::System::Linq::Expressions::Expression*& dyn__body();
    // System.Type get_TypeCore()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Type* get_TypeCore();
    // System.Type get_PublicType()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Type* get_PublicType();
    // public System.String get_Name()
    // Offset: 0xF20F68
    ::StringW get_Name();
    // System.String get_NameCore()
    // Offset: 0xF20F78
    ::StringW get_NameCore();
    // public System.Linq.Expressions.Expression get_Body()
    // Offset: 0xF20F80
    ::System::Linq::Expressions::Expression* get_Body();
    // public System.Type get_ReturnType()
    // Offset: 0xF20F88
    ::System::Type* get_ReturnType();
    // public System.Boolean get_TailCall()
    // Offset: 0xF20FC0
    bool get_TailCall();
    // System.Boolean get_TailCallCore()
    // Offset: 0xF20FD0
    bool get_TailCallCore();
    // private System.Int32 System.Linq.Expressions.IParameterProvider.get_ParameterCount()
    // Offset: 0xF21018
    int System_Linq_Expressions_IParameterProvider_get_ParameterCount();
    // System.Int32 get_ParameterCount()
    // Offset: 0xF21028
    int get_ParameterCount();
    // System.Void .ctor(System.Linq.Expressions.Expression body)
    // Offset: 0xF20EDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LambdaExpression* New_ctor(::System::Linq::Expressions::Expression* body) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::LambdaExpression::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LambdaExpression*, creationType>(body)));
    }
    // private System.Linq.Expressions.ParameterExpression System.Linq.Expressions.IParameterProvider.GetParameter(System.Int32 index)
    // Offset: 0xF20FD8
    ::System::Linq::Expressions::ParameterExpression* System_Linq_Expressions_IParameterProvider_GetParameter(int index);
    // System.Linq.Expressions.ParameterExpression GetParameter(System.Int32 index)
    // Offset: 0xF20FE8
    ::System::Linq::Expressions::ParameterExpression* GetParameter(int index);
    // public override System.Type get_Type()
    // Offset: 0xF20F54
    // Implemented from: System.Linq.Expressions.Expression
    // Base method: System.Type Expression::get_Type()
    ::System::Type* get_Type();
    // public override System.Linq.Expressions.ExpressionType get_NodeType()
    // Offset: 0xF20F60
    // Implemented from: System.Linq.Expressions.Expression
    // Base method: System.Linq.Expressions.ExpressionType Expression::get_NodeType()
    ::System::Linq::Expressions::ExpressionType get_NodeType();
  }; // System.Linq.Expressions.LambdaExpression
  #pragma pack(pop)
  static check_size<sizeof(LambdaExpression), 16 + sizeof(::System::Linq::Expressions::Expression*)> __System_Linq_Expressions_LambdaExpressionSizeCheck;
  static_assert(sizeof(LambdaExpression) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::LambdaExpression::get_TypeCore
// Il2CppName: get_TypeCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Linq::Expressions::LambdaExpression::*)()>(&System::Linq::Expressions::LambdaExpression::get_TypeCore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LambdaExpression*), "get_TypeCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LambdaExpression::get_PublicType
// Il2CppName: get_PublicType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Linq::Expressions::LambdaExpression::*)()>(&System::Linq::Expressions::LambdaExpression::get_PublicType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LambdaExpression*), "get_PublicType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LambdaExpression::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Linq::Expressions::LambdaExpression::*)()>(&System::Linq::Expressions::LambdaExpression::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LambdaExpression*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LambdaExpression::get_NameCore
// Il2CppName: get_NameCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Linq::Expressions::LambdaExpression::*)()>(&System::Linq::Expressions::LambdaExpression::get_NameCore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LambdaExpression*), "get_NameCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LambdaExpression::get_Body
// Il2CppName: get_Body
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::Expression* (System::Linq::Expressions::LambdaExpression::*)()>(&System::Linq::Expressions::LambdaExpression::get_Body)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LambdaExpression*), "get_Body", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LambdaExpression::get_ReturnType
// Il2CppName: get_ReturnType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Linq::Expressions::LambdaExpression::*)()>(&System::Linq::Expressions::LambdaExpression::get_ReturnType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LambdaExpression*), "get_ReturnType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LambdaExpression::get_TailCall
// Il2CppName: get_TailCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Linq::Expressions::LambdaExpression::*)()>(&System::Linq::Expressions::LambdaExpression::get_TailCall)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LambdaExpression*), "get_TailCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LambdaExpression::get_TailCallCore
// Il2CppName: get_TailCallCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Linq::Expressions::LambdaExpression::*)()>(&System::Linq::Expressions::LambdaExpression::get_TailCallCore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LambdaExpression*), "get_TailCallCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LambdaExpression::System_Linq_Expressions_IParameterProvider_get_ParameterCount
// Il2CppName: System.Linq.Expressions.IParameterProvider.get_ParameterCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::LambdaExpression::*)()>(&System::Linq::Expressions::LambdaExpression::System_Linq_Expressions_IParameterProvider_get_ParameterCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LambdaExpression*), "System.Linq.Expressions.IParameterProvider.get_ParameterCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LambdaExpression::get_ParameterCount
// Il2CppName: get_ParameterCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::LambdaExpression::*)()>(&System::Linq::Expressions::LambdaExpression::get_ParameterCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LambdaExpression*), "get_ParameterCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LambdaExpression::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::LambdaExpression::System_Linq_Expressions_IParameterProvider_GetParameter
// Il2CppName: System.Linq.Expressions.IParameterProvider.GetParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::ParameterExpression* (System::Linq::Expressions::LambdaExpression::*)(int)>(&System::Linq::Expressions::LambdaExpression::System_Linq_Expressions_IParameterProvider_GetParameter)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LambdaExpression*), "System.Linq.Expressions.IParameterProvider.GetParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LambdaExpression::GetParameter
// Il2CppName: GetParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::ParameterExpression* (System::Linq::Expressions::LambdaExpression::*)(int)>(&System::Linq::Expressions::LambdaExpression::GetParameter)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LambdaExpression*), "GetParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LambdaExpression::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Linq::Expressions::LambdaExpression::*)()>(&System::Linq::Expressions::LambdaExpression::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LambdaExpression*), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::LambdaExpression::get_NodeType
// Il2CppName: get_NodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::ExpressionType (System::Linq::Expressions::LambdaExpression::*)()>(&System::Linq::Expressions::LambdaExpression::get_NodeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::LambdaExpression*), "get_NodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
