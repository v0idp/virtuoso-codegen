// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Linq.Expressions.FullConditionalExpression
#include "System/Linq/Expressions/FullConditionalExpression.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Linq::Expressions
namespace System::Linq::Expressions {
  // Skipping declaration: Expression because it is already included!
}
// Completed forward declares
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: FullConditionalExpressionWithType
  class FullConditionalExpressionWithType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::FullConditionalExpressionWithType);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::FullConditionalExpressionWithType*, "System.Linq.Expressions", "FullConditionalExpressionWithType");
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.FullConditionalExpressionWithType
  // [TokenAttribute] Offset: FFFFFFFF
  class FullConditionalExpressionWithType : public ::System::Linq::Expressions::FullConditionalExpression {
    public:
    public:
    // private readonly System.Type <Type>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::System::Type* Type;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::Linq::Expressions::Expression*
    constexpr operator ::System::Linq::Expressions::Expression*() const noexcept = delete;
    // Get instance field reference: private readonly System.Type <Type>k__BackingField
    [[deprecated]] ::System::Type*& dyn_$Type$k__BackingField();
    // System.Void .ctor(System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse, System.Type type)
    // Offset: 0xF148E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FullConditionalExpressionWithType* New_ctor(::System::Linq::Expressions::Expression* test, ::System::Linq::Expressions::Expression* ifTrue, ::System::Linq::Expressions::Expression* ifFalse, ::System::Type* type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::FullConditionalExpressionWithType::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FullConditionalExpressionWithType*, creationType>(test, ifTrue, ifFalse, type)));
    }
    // public override System.Type get_Type()
    // Offset: 0xF1491C
    // Implemented from: System.Linq.Expressions.ConditionalExpression
    // Base method: System.Type ConditionalExpression::get_Type()
    ::System::Type* get_Type();
  }; // System.Linq.Expressions.FullConditionalExpressionWithType
  #pragma pack(pop)
  static check_size<sizeof(FullConditionalExpressionWithType), 40 + sizeof(::System::Type*)> __System_Linq_Expressions_FullConditionalExpressionWithTypeSizeCheck;
  static_assert(sizeof(FullConditionalExpressionWithType) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::FullConditionalExpressionWithType::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::FullConditionalExpressionWithType::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Linq::Expressions::FullConditionalExpressionWithType::*)()>(&System::Linq::Expressions::FullConditionalExpressionWithType::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::FullConditionalExpressionWithType*), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
