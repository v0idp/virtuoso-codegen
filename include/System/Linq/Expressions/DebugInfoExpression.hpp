// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Linq.Expressions.Expression
#include "System/Linq/Expressions/Expression.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Linq::Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: SymbolDocumentInfo
  class SymbolDocumentInfo;
}
// Completed forward declares
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Forward declaring type: DebugInfoExpression
  class DebugInfoExpression;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::DebugInfoExpression);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::DebugInfoExpression*, "System.Linq.Expressions", "DebugInfoExpression");
// Type namespace: System.Linq.Expressions
namespace System::Linq::Expressions {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.DebugInfoExpression
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: 6A0E34
  class DebugInfoExpression : public ::System::Linq::Expressions::Expression {
    public:
    public:
    // private readonly System.Linq.Expressions.SymbolDocumentInfo <Document>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Linq::Expressions::SymbolDocumentInfo* Document;
    // Field size check
    static_assert(sizeof(::System::Linq::Expressions::SymbolDocumentInfo*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Linq::Expressions::SymbolDocumentInfo*
    constexpr operator ::System::Linq::Expressions::SymbolDocumentInfo*() const noexcept {
      return Document;
    }
    // Get instance field reference: private readonly System.Linq.Expressions.SymbolDocumentInfo <Document>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Linq::Expressions::SymbolDocumentInfo*& dyn_$Document$k__BackingField();
    // public System.Int32 get_StartLine()
    // Offset: 0x11F9DE8
    int get_StartLine();
    // public System.Int32 get_EndLine()
    // Offset: 0x11F9E14
    int get_EndLine();
    // public System.Linq.Expressions.SymbolDocumentInfo get_Document()
    // Offset: 0x11F9E40
    ::System::Linq::Expressions::SymbolDocumentInfo* get_Document();
    // public System.Boolean get_IsClear()
    // Offset: 0x11F9E48
    bool get_IsClear();
  }; // System.Linq.Expressions.DebugInfoExpression
  #pragma pack(pop)
  static check_size<sizeof(DebugInfoExpression), 16 + sizeof(::System::Linq::Expressions::SymbolDocumentInfo*)> __System_Linq_Expressions_DebugInfoExpressionSizeCheck;
  static_assert(sizeof(DebugInfoExpression) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::DebugInfoExpression::get_StartLine
// Il2CppName: get_StartLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::DebugInfoExpression::*)()>(&System::Linq::Expressions::DebugInfoExpression::get_StartLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::DebugInfoExpression*), "get_StartLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::DebugInfoExpression::get_EndLine
// Il2CppName: get_EndLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::DebugInfoExpression::*)()>(&System::Linq::Expressions::DebugInfoExpression::get_EndLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::DebugInfoExpression*), "get_EndLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::DebugInfoExpression::get_Document
// Il2CppName: get_Document
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Linq::Expressions::SymbolDocumentInfo* (System::Linq::Expressions::DebugInfoExpression::*)()>(&System::Linq::Expressions::DebugInfoExpression::get_Document)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::DebugInfoExpression*), "get_Document", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::DebugInfoExpression::get_IsClear
// Il2CppName: get_IsClear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Linq::Expressions::DebugInfoExpression::*)()>(&System::Linq::Expressions::DebugInfoExpression::get_IsClear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::DebugInfoExpression*), "get_IsClear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
