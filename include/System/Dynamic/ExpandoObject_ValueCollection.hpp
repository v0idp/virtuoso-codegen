// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Dynamic.ExpandoObject
#include "System/Dynamic/ExpandoObject.hpp"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Dynamic
namespace System::Dynamic {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Dynamic::ExpandoObject::ValueCollection);
DEFINE_IL2CPP_ARG_TYPE(::System::Dynamic::ExpandoObject::ValueCollection*, "System.Dynamic", "ExpandoObject/ValueCollection");
// Type namespace: System.Dynamic
namespace System::Dynamic {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Dynamic.ExpandoObject/System.Dynamic.ValueCollection
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: 6A1934
  // [DebuggerDisplayAttribute] Offset: 6A1934
  class ExpandoObject::ValueCollection : public ::Il2CppObject/*, public ::System::Collections::Generic::ICollection_1<::Il2CppObject*>*/ {
    public:
    // Nested type: ::System::Dynamic::ExpandoObject::ValueCollection::$GetEnumerator$d__15
    class $GetEnumerator$d__15;
    public:
    // private readonly System.Dynamic.ExpandoObject _expando
    // Size: 0x8
    // Offset: 0x10
    ::System::Dynamic::ExpandoObject* expando;
    // Field size check
    static_assert(sizeof(::System::Dynamic::ExpandoObject*) == 0x8);
    // private readonly System.Int32 _expandoVersion
    // Size: 0x4
    // Offset: 0x18
    int expandoVersion;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _expandoCount
    // Size: 0x4
    // Offset: 0x1C
    int expandoCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Dynamic.ExpandoObject/System.Dynamic.ExpandoData _expandoData
    // Size: 0x8
    // Offset: 0x20
    ::System::Dynamic::ExpandoObject::ExpandoData* expandoData;
    // Field size check
    static_assert(sizeof(::System::Dynamic::ExpandoObject::ExpandoData*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::ICollection_1<::Il2CppObject*>
    operator ::System::Collections::Generic::ICollection_1<::Il2CppObject*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::ICollection_1<::Il2CppObject*>*>(this);
    }
    // Get instance field reference: private readonly System.Dynamic.ExpandoObject _expando
    [[deprecated]] ::System::Dynamic::ExpandoObject*& dyn__expando();
    // Get instance field reference: private readonly System.Int32 _expandoVersion
    [[deprecated]] int& dyn__expandoVersion();
    // Get instance field reference: private readonly System.Int32 _expandoCount
    [[deprecated]] int& dyn__expandoCount();
    // Get instance field reference: private readonly System.Dynamic.ExpandoObject/System.Dynamic.ExpandoData _expandoData
    [[deprecated]] ::System::Dynamic::ExpandoObject::ExpandoData*& dyn__expandoData();
    // public System.Int32 get_Count()
    // Offset: 0x16A4C50
    int get_Count();
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x16A4C74
    bool get_IsReadOnly();
    // System.Void .ctor(System.Dynamic.ExpandoObject expando)
    // Offset: 0x16A4670
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ExpandoObject::ValueCollection* New_ctor(::System::Dynamic::ExpandoObject* expando) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Dynamic::ExpandoObject::ValueCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ExpandoObject::ValueCollection*, creationType>(expando)));
    }
    // private System.Void CheckVersion()
    // Offset: 0x16A4770
    void CheckVersion();
    // public System.Void Add(System.Object item)
    // Offset: 0x16A47DC
    void Add(::Il2CppObject* item);
    // public System.Void Clear()
    // Offset: 0x16A480C
    void Clear();
    // public System.Boolean Contains(System.Object item)
    // Offset: 0x16A483C
    bool Contains(::Il2CppObject* item);
    // public System.Void CopyTo(System.Object[] array, System.Int32 arrayIndex)
    // Offset: 0x16A49BC
    void CopyTo(::ArrayW<::Il2CppObject*> array, int arrayIndex);
    // public System.Boolean Remove(System.Object item)
    // Offset: 0x16A4C7C
    bool Remove(::Il2CppObject* item);
    // public System.Collections.Generic.IEnumerator`1<System.Object> GetEnumerator()
    // Offset: 0x16A4CAC
    ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>* GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x16A4D44
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
  }; // System.Dynamic.ExpandoObject/System.Dynamic.ValueCollection
  #pragma pack(pop)
  static check_size<sizeof(ExpandoObject::ValueCollection), 32 + sizeof(::System::Dynamic::ExpandoObject::ExpandoData*)> __System_Dynamic_ExpandoObject_ValueCollectionSizeCheck;
  static_assert(sizeof(ExpandoObject::ValueCollection) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Dynamic::ExpandoObject::ValueCollection::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Dynamic::ExpandoObject::ValueCollection::*)()>(&System::Dynamic::ExpandoObject::ValueCollection::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::ExpandoObject::ValueCollection*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Dynamic::ExpandoObject::ValueCollection::get_IsReadOnly
// Il2CppName: get_IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Dynamic::ExpandoObject::ValueCollection::*)()>(&System::Dynamic::ExpandoObject::ValueCollection::get_IsReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::ExpandoObject::ValueCollection*), "get_IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Dynamic::ExpandoObject::ValueCollection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Dynamic::ExpandoObject::ValueCollection::CheckVersion
// Il2CppName: CheckVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Dynamic::ExpandoObject::ValueCollection::*)()>(&System::Dynamic::ExpandoObject::ValueCollection::CheckVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::ExpandoObject::ValueCollection*), "CheckVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Dynamic::ExpandoObject::ValueCollection::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Dynamic::ExpandoObject::ValueCollection::*)(::Il2CppObject*)>(&System::Dynamic::ExpandoObject::ValueCollection::Add)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::ExpandoObject::ValueCollection*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: System::Dynamic::ExpandoObject::ValueCollection::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Dynamic::ExpandoObject::ValueCollection::*)()>(&System::Dynamic::ExpandoObject::ValueCollection::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::ExpandoObject::ValueCollection*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Dynamic::ExpandoObject::ValueCollection::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Dynamic::ExpandoObject::ValueCollection::*)(::Il2CppObject*)>(&System::Dynamic::ExpandoObject::ValueCollection::Contains)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::ExpandoObject::ValueCollection*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: System::Dynamic::ExpandoObject::ValueCollection::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Dynamic::ExpandoObject::ValueCollection::*)(::ArrayW<::Il2CppObject*>, int)>(&System::Dynamic::ExpandoObject::ValueCollection::CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* arrayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::ExpandoObject::ValueCollection*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, arrayIndex});
  }
};
// Writing MetadataGetter for method: System::Dynamic::ExpandoObject::ValueCollection::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Dynamic::ExpandoObject::ValueCollection::*)(::Il2CppObject*)>(&System::Dynamic::ExpandoObject::ValueCollection::Remove)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::ExpandoObject::ValueCollection*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: System::Dynamic::ExpandoObject::ValueCollection::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>* (System::Dynamic::ExpandoObject::ValueCollection::*)()>(&System::Dynamic::ExpandoObject::ValueCollection::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::ExpandoObject::ValueCollection*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Dynamic::ExpandoObject::ValueCollection::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (System::Dynamic::ExpandoObject::ValueCollection::*)()>(&System::Dynamic::ExpandoObject::ValueCollection::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::ExpandoObject::ValueCollection*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
