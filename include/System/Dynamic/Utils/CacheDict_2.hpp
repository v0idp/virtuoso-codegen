// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Dynamic::Utils
namespace System::Dynamic::Utils {
  // Skipping declaration: Entry because it is already included!
}
// Completed forward declares
// Type namespace: System.Dynamic.Utils
namespace System::Dynamic::Utils {
  // Forward declaring type: CacheDict`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class CacheDict_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::Dynamic::Utils::CacheDict_2, "System.Dynamic.Utils", "CacheDict`2");
// Type namespace: System.Dynamic.Utils
namespace System::Dynamic::Utils {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Dynamic.Utils.CacheDict`2
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 6A1A20
  template<typename TKey, typename TValue>
  class CacheDict_2 : public ::Il2CppObject {
    public:
    // Nested type: ::System::Dynamic::Utils::CacheDict_2::Entry<TKey, TValue>
    class Entry;
    // WARNING Size may be invalid!
    // Autogenerated type: System.Dynamic.Utils.CacheDict`2/System.Dynamic.Utils.Entry
    // [TokenAttribute] Offset: FFFFFFFF
    class Entry : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = CacheDict_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "Entry";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // readonly System.Int32 _hash
      // Size: 0x4
      // Offset: 0x0
      int hash;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // readonly TKey _key
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TKey key;
      // readonly TValue _value
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TValue value;
      public:
      // Autogenerated instance field getter
      // Get instance field: readonly System.Int32 _hash
      [[deprecated("Use field access instead!")]] int& dyn__hash() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Dynamic::Utils::CacheDict_2::Entry::dyn__hash");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hash"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: readonly TKey _key
      [[deprecated("Use field access instead!")]] TKey& dyn__key() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Dynamic::Utils::CacheDict_2::Entry::dyn__key");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_key"))->offset;
        return *reinterpret_cast<TKey*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: readonly TValue _value
      [[deprecated("Use field access instead!")]] TValue& dyn__value() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Dynamic::Utils::CacheDict_2::Entry::dyn__value");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_value"))->offset;
        return *reinterpret_cast<TValue*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void .ctor(System.Int32 hash, TKey key, TValue value)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename CacheDict_2<TKey, TValue>::Entry* New_ctor(int hash, TKey key, TValue value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Dynamic::Utils::CacheDict_2::Entry::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename CacheDict_2<TKey, TValue>::Entry*, creationType>(hash, key, value)));
      }
    }; // System.Dynamic.Utils.CacheDict`2/System.Dynamic.Utils.Entry
    // Could not write size check! Type: System.Dynamic.Utils.CacheDict`2/System.Dynamic.Utils.Entry is generic, or has no fields that are valid for size checks!
    public:
    // private readonly System.Int32 _mask
    // Size: 0x4
    // Offset: 0x0
    int mask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Dynamic.Utils.CacheDict`2/System.Dynamic.Utils.Entry<TKey,TValue>[] _entries
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<typename ::System::Dynamic::Utils::CacheDict_2<TKey, TValue>::Entry*> entries;
    // Field size check
    static_assert(sizeof(::ArrayW<typename ::System::Dynamic::Utils::CacheDict_2<TKey, TValue>::Entry*>) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Int32 _mask
    [[deprecated("Use field access instead!")]] int& dyn__mask() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Dynamic::Utils::CacheDict_2::dyn__mask");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mask"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Dynamic.Utils.CacheDict`2/System.Dynamic.Utils.Entry<TKey,TValue>[] _entries
    [[deprecated("Use field access instead!")]] ::ArrayW<typename ::System::Dynamic::Utils::CacheDict_2<TKey, TValue>::Entry*>& dyn__entries() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Dynamic::Utils::CacheDict_2::dyn__entries");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_entries"))->offset;
      return *reinterpret_cast<::ArrayW<typename ::System::Dynamic::Utils::CacheDict_2<TKey, TValue>::Entry*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // System.Void set_Item(TKey key, TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Item(TKey key, TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Dynamic::Utils::CacheDict_2::set_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
    // System.Void .ctor(System.Int32 size)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CacheDict_2<TKey, TValue>* New_ctor(int size) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Dynamic::Utils::CacheDict_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CacheDict_2<TKey, TValue>*, creationType>(size)));
    }
    // static private System.Int32 AlignSize(System.Int32 size)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static int AlignSize(int size) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Dynamic::Utils::CacheDict_2::AlignSize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<CacheDict_2<TKey, TValue>*>::get(), "AlignSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(size)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, size);
    }
    // System.Boolean TryGetValue(TKey key, out TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGetValue(TKey key, ByRef<TValue> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Dynamic::Utils::CacheDict_2::TryGetValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractIndependentType<TValue&>()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key, byref(value));
    }
    // System.Void Add(TKey key, TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Add(TKey key, TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Dynamic::Utils::CacheDict_2::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
  }; // System.Dynamic.Utils.CacheDict`2
  // Could not write size check! Type: System.Dynamic.Utils.CacheDict`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
