// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Dynamic::Utils
namespace System::Dynamic::Utils {
  // Forward declaring type: CacheDict`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class CacheDict_2;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodBase
  class MethodBase;
  // Forward declaring type: ParameterInfo
  class ParameterInfo;
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: TypeCode
  struct TypeCode;
}
// Completed forward declares
// Type namespace: System.Dynamic.Utils
namespace System::Dynamic::Utils {
  // Forward declaring type: TypeExtensions
  class TypeExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Dynamic::Utils::TypeExtensions);
DEFINE_IL2CPP_ARG_TYPE(::System::Dynamic::Utils::TypeExtensions*, "System.Dynamic.Utils", "TypeExtensions");
// Type namespace: System.Dynamic.Utils
namespace System::Dynamic::Utils {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Dynamic.Utils.TypeExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class TypeExtensions : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.Dynamic.Utils.CacheDict`2<System.Reflection.MethodBase,System.Reflection.ParameterInfo[]> s_paramInfoCache
    static ::System::Dynamic::Utils::CacheDict_2<::System::Reflection::MethodBase*, ::ArrayW<::System::Reflection::ParameterInfo*>>* _get_s_paramInfoCache();
    // Set static field: static private readonly System.Dynamic.Utils.CacheDict`2<System.Reflection.MethodBase,System.Reflection.ParameterInfo[]> s_paramInfoCache
    static void _set_s_paramInfoCache(::System::Dynamic::Utils::CacheDict_2<::System::Reflection::MethodBase*, ::ArrayW<::System::Reflection::ParameterInfo*>>* value);
    // static private System.Void .cctor()
    // Offset: 0xE9F2EC
    static void _cctor();
    // static public System.Reflection.MethodInfo GetAnyStaticMethodValidated(System.Type type, System.String name, System.Type[] types)
    // Offset: 0xE9EF18
    static ::System::Reflection::MethodInfo* GetAnyStaticMethodValidated(::System::Type* type, ::StringW name, ::ArrayW<::System::Type*> types);
    // static private System.Boolean MatchesArgumentTypes(System.Reflection.MethodInfo mi, System.Type[] argTypes)
    // Offset: 0xE9EFC8
    static bool MatchesArgumentTypes(::System::Reflection::MethodInfo* mi, ::ArrayW<::System::Type*> argTypes);
    // static public System.Type GetReturnType(System.Reflection.MethodBase mi)
    // Offset: 0xE9F164
    static ::System::Type* GetReturnType(::System::Reflection::MethodBase* mi);
    // static public System.TypeCode GetTypeCode(System.Type type)
    // Offset: 0xE930C4
    static ::System::TypeCode GetTypeCode(::System::Type* type);
    // static System.Reflection.ParameterInfo[] GetParametersCached(System.Reflection.MethodBase method)
    // Offset: 0xE8E7D4
    static ::ArrayW<::System::Reflection::ParameterInfo*> GetParametersCached(::System::Reflection::MethodBase* method);
  }; // System.Dynamic.Utils.TypeExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeExtensions::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Dynamic::Utils::TypeExtensions::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeExtensions*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeExtensions::GetAnyStaticMethodValidated
// Il2CppName: GetAnyStaticMethodValidated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MethodInfo* (*)(::System::Type*, ::StringW, ::ArrayW<::System::Type*>)>(&System::Dynamic::Utils::TypeExtensions::GetAnyStaticMethodValidated)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* types = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeExtensions*), "GetAnyStaticMethodValidated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, name, types});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeExtensions::MatchesArgumentTypes
// Il2CppName: MatchesArgumentTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Reflection::MethodInfo*, ::ArrayW<::System::Type*>)>(&System::Dynamic::Utils::TypeExtensions::MatchesArgumentTypes)> {
  static const MethodInfo* get() {
    static auto* mi = &::il2cpp_utils::GetClassFromName("System.Reflection", "MethodInfo")->byval_arg;
    static auto* argTypes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeExtensions*), "MatchesArgumentTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mi, argTypes});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeExtensions::GetReturnType
// Il2CppName: GetReturnType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Reflection::MethodBase*)>(&System::Dynamic::Utils::TypeExtensions::GetReturnType)> {
  static const MethodInfo* get() {
    static auto* mi = &::il2cpp_utils::GetClassFromName("System.Reflection", "MethodBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeExtensions*), "GetReturnType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mi});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeExtensions::GetTypeCode
// Il2CppName: GetTypeCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TypeCode (*)(::System::Type*)>(&System::Dynamic::Utils::TypeExtensions::GetTypeCode)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeExtensions*), "GetTypeCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeExtensions::GetParametersCached
// Il2CppName: GetParametersCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::ParameterInfo*> (*)(::System::Reflection::MethodBase*)>(&System::Dynamic::Utils::TypeExtensions::GetParametersCached)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("System.Reflection", "MethodBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeExtensions*), "GetParametersCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method});
  }
};
