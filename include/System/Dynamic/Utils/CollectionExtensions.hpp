// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::CompilerServices
namespace System::Runtime::CompilerServices {
  // Forward declaring type: TrueReadOnlyCollection`1<T>
  template<typename T>
  class TrueReadOnlyCollection_1;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: System.Dynamic.Utils
namespace System::Dynamic::Utils {
  // Forward declaring type: CollectionExtensions
  class CollectionExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Dynamic::Utils::CollectionExtensions);
DEFINE_IL2CPP_ARG_TYPE(::System::Dynamic::Utils::CollectionExtensions*, "System.Dynamic.Utils", "CollectionExtensions");
// Type namespace: System.Dynamic.Utils
namespace System::Dynamic::Utils {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Dynamic.Utils.CollectionExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class CollectionExtensions : public ::Il2CppObject {
    public:
    // static public System.Runtime.CompilerServices.TrueReadOnlyCollection`1<T> AddFirst(System.Collections.ObjectModel.ReadOnlyCollection`1<T> list, T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Runtime::CompilerServices::TrueReadOnlyCollection_1<T>* AddFirst(::System::Collections::ObjectModel::ReadOnlyCollection_1<T>* list, T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Dynamic::Utils::CollectionExtensions::AddFirst");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Dynamic.Utils", "CollectionExtensions", "AddFirst", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(item)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::CompilerServices::TrueReadOnlyCollection_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, list, item);
    }
    // static public T[] AddLast(T[] array, T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> AddLast(::ArrayW<T> array, T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Dynamic::Utils::CollectionExtensions::AddLast");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Dynamic.Utils", "CollectionExtensions", "AddLast", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(item)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, item);
    }
    // static public T[] RemoveFirst(T[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> RemoveFirst(::ArrayW<T> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Dynamic::Utils::CollectionExtensions::RemoveFirst");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Dynamic.Utils", "CollectionExtensions", "RemoveFirst", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array);
    }
    // static public T[] RemoveLast(T[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> RemoveLast(::ArrayW<T> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Dynamic::Utils::CollectionExtensions::RemoveLast");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Dynamic.Utils", "CollectionExtensions", "RemoveLast", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array);
    }
    // static public System.Collections.ObjectModel.ReadOnlyCollection`1<T> ToReadOnly(System.Collections.Generic.IEnumerable`1<T> enumerable)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Collections::ObjectModel::ReadOnlyCollection_1<T>* ToReadOnly(::System::Collections::Generic::IEnumerable_1<T>* enumerable) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Dynamic::Utils::CollectionExtensions::ToReadOnly");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Dynamic.Utils", "CollectionExtensions", "ToReadOnly", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enumerable)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ObjectModel::ReadOnlyCollection_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, enumerable);
    }
  }; // System.Dynamic.Utils.CollectionExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Dynamic::Utils::CollectionExtensions::AddFirst
// Il2CppName: AddFirst
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Dynamic::Utils::CollectionExtensions::AddLast
// Il2CppName: AddLast
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Dynamic::Utils::CollectionExtensions::RemoveFirst
// Il2CppName: RemoveFirst
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Dynamic::Utils::CollectionExtensions::RemoveLast
// Il2CppName: RemoveLast
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Dynamic::Utils::CollectionExtensions::ToReadOnly
// Il2CppName: ToReadOnly
// Cannot write MetadataGetter for generic methods!
