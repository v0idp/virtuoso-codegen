// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: TypeInfo
  class TypeInfo;
}
// Completed forward declares
// Type namespace: System.Reflection
namespace System::Reflection {
  // Forward declaring type: IReflectableType
  class IReflectableType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Reflection::IReflectableType);
DEFINE_IL2CPP_ARG_TYPE(::System::Reflection::IReflectableType*, "System.Reflection", "IReflectableType");
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Reflection.IReflectableType
  // [TokenAttribute] Offset: FFFFFFFF
  class IReflectableType {
    public:
    // public System.Reflection.TypeInfo GetTypeInfo()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Reflection::TypeInfo* GetTypeInfo();
  }; // System.Reflection.IReflectableType
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Reflection::IReflectableType::GetTypeInfo
// Il2CppName: GetTypeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::TypeInfo* (System::Reflection::IReflectableType::*)()>(&System::Reflection::IReflectableType::GetTypeInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::IReflectableType*), "GetTypeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
