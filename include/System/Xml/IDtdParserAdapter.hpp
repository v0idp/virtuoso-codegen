// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: IXmlNamespaceResolver
  class IXmlNamespaceResolver;
  // Forward declaring type: IDtdEntityInfo
  class IDtdEntityInfo;
  // Forward declaring type: LineInfo
  struct LineInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: IDtdParserAdapter
  class IDtdParserAdapter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::IDtdParserAdapter);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::IDtdParserAdapter*, "System.Xml", "IDtdParserAdapter");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.IDtdParserAdapter
  // [TokenAttribute] Offset: FFFFFFFF
  class IDtdParserAdapter {
    public:
    // public System.Xml.XmlNameTable get_NameTable()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Xml::XmlNameTable* get_NameTable();
    // public System.Xml.IXmlNamespaceResolver get_NamespaceResolver()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Xml::IXmlNamespaceResolver* get_NamespaceResolver();
    // public System.Uri get_BaseUri()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Uri* get_BaseUri();
    // public System.Char[] get_ParsingBuffer()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<::Il2CppChar> get_ParsingBuffer();
    // public System.Int32 get_ParsingBufferLength()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_ParsingBufferLength();
    // public System.Int32 get_CurrentPosition()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_CurrentPosition();
    // public System.Void set_CurrentPosition(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_CurrentPosition(int value);
    // public System.Int32 get_LineNo()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_LineNo();
    // public System.Int32 get_LineStartPosition()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_LineStartPosition();
    // public System.Boolean get_IsEof()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsEof();
    // public System.Int32 get_EntityStackLength()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_EntityStackLength();
    // public System.Boolean get_IsEntityEolNormalized()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsEntityEolNormalized();
    // public System.Int32 ReadData()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int ReadData();
    // public System.Void OnNewLine(System.Int32 pos)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnNewLine(int pos);
    // public System.Int32 ParseNumericCharRef(System.Text.StringBuilder internalSubsetBuilder)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int ParseNumericCharRef(::System::Text::StringBuilder* internalSubsetBuilder);
    // public System.Int32 ParseNamedCharRef(System.Boolean expand, System.Text.StringBuilder internalSubsetBuilder)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int ParseNamedCharRef(bool expand, ::System::Text::StringBuilder* internalSubsetBuilder);
    // public System.Void ParsePI(System.Text.StringBuilder sb)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ParsePI(::System::Text::StringBuilder* sb);
    // public System.Void ParseComment(System.Text.StringBuilder sb)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ParseComment(::System::Text::StringBuilder* sb);
    // public System.Boolean PushEntity(System.Xml.IDtdEntityInfo entity, out System.Int32 entityId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool PushEntity(::System::Xml::IDtdEntityInfo* entity, ByRef<int> entityId);
    // public System.Boolean PopEntity(out System.Xml.IDtdEntityInfo oldEntity, out System.Int32 newEntityId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool PopEntity(ByRef<::System::Xml::IDtdEntityInfo*> oldEntity, ByRef<int> newEntityId);
    // public System.Boolean PushExternalSubset(System.String systemId, System.String publicId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool PushExternalSubset(::StringW systemId, ::StringW publicId);
    // public System.Void PushInternalDtd(System.String baseUri, System.String internalDtd)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void PushInternalDtd(::StringW baseUri, ::StringW internalDtd);
    // public System.Void OnSystemId(System.String systemId, System.Xml.LineInfo keywordLineInfo, System.Xml.LineInfo systemLiteralLineInfo)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnSystemId(::StringW systemId, ::System::Xml::LineInfo keywordLineInfo, ::System::Xml::LineInfo systemLiteralLineInfo);
    // public System.Void OnPublicId(System.String publicId, System.Xml.LineInfo keywordLineInfo, System.Xml.LineInfo publicLiteralLineInfo)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnPublicId(::StringW publicId, ::System::Xml::LineInfo keywordLineInfo, ::System::Xml::LineInfo publicLiteralLineInfo);
    // public System.Void Throw(System.Exception e)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Throw(::System::Exception* e);
  }; // System.Xml.IDtdParserAdapter
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::get_NameTable
// Il2CppName: get_NameTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNameTable* (System::Xml::IDtdParserAdapter::*)()>(&System::Xml::IDtdParserAdapter::get_NameTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "get_NameTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::get_NamespaceResolver
// Il2CppName: get_NamespaceResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::IXmlNamespaceResolver* (System::Xml::IDtdParserAdapter::*)()>(&System::Xml::IDtdParserAdapter::get_NamespaceResolver)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "get_NamespaceResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::get_BaseUri
// Il2CppName: get_BaseUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Xml::IDtdParserAdapter::*)()>(&System::Xml::IDtdParserAdapter::get_BaseUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "get_BaseUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::get_ParsingBuffer
// Il2CppName: get_ParsingBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppChar> (System::Xml::IDtdParserAdapter::*)()>(&System::Xml::IDtdParserAdapter::get_ParsingBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "get_ParsingBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::get_ParsingBufferLength
// Il2CppName: get_ParsingBufferLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::IDtdParserAdapter::*)()>(&System::Xml::IDtdParserAdapter::get_ParsingBufferLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "get_ParsingBufferLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::get_CurrentPosition
// Il2CppName: get_CurrentPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::IDtdParserAdapter::*)()>(&System::Xml::IDtdParserAdapter::get_CurrentPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "get_CurrentPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::set_CurrentPosition
// Il2CppName: set_CurrentPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::IDtdParserAdapter::*)(int)>(&System::Xml::IDtdParserAdapter::set_CurrentPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "set_CurrentPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::get_LineNo
// Il2CppName: get_LineNo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::IDtdParserAdapter::*)()>(&System::Xml::IDtdParserAdapter::get_LineNo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "get_LineNo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::get_LineStartPosition
// Il2CppName: get_LineStartPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::IDtdParserAdapter::*)()>(&System::Xml::IDtdParserAdapter::get_LineStartPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "get_LineStartPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::get_IsEof
// Il2CppName: get_IsEof
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::IDtdParserAdapter::*)()>(&System::Xml::IDtdParserAdapter::get_IsEof)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "get_IsEof", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::get_EntityStackLength
// Il2CppName: get_EntityStackLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::IDtdParserAdapter::*)()>(&System::Xml::IDtdParserAdapter::get_EntityStackLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "get_EntityStackLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::get_IsEntityEolNormalized
// Il2CppName: get_IsEntityEolNormalized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::IDtdParserAdapter::*)()>(&System::Xml::IDtdParserAdapter::get_IsEntityEolNormalized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "get_IsEntityEolNormalized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::ReadData
// Il2CppName: ReadData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::IDtdParserAdapter::*)()>(&System::Xml::IDtdParserAdapter::ReadData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "ReadData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::OnNewLine
// Il2CppName: OnNewLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::IDtdParserAdapter::*)(int)>(&System::Xml::IDtdParserAdapter::OnNewLine)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "OnNewLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::ParseNumericCharRef
// Il2CppName: ParseNumericCharRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::IDtdParserAdapter::*)(::System::Text::StringBuilder*)>(&System::Xml::IDtdParserAdapter::ParseNumericCharRef)> {
  static const MethodInfo* get() {
    static auto* internalSubsetBuilder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "ParseNumericCharRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{internalSubsetBuilder});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::ParseNamedCharRef
// Il2CppName: ParseNamedCharRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::IDtdParserAdapter::*)(bool, ::System::Text::StringBuilder*)>(&System::Xml::IDtdParserAdapter::ParseNamedCharRef)> {
  static const MethodInfo* get() {
    static auto* expand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* internalSubsetBuilder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "ParseNamedCharRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expand, internalSubsetBuilder});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::ParsePI
// Il2CppName: ParsePI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::IDtdParserAdapter::*)(::System::Text::StringBuilder*)>(&System::Xml::IDtdParserAdapter::ParsePI)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "ParsePI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::ParseComment
// Il2CppName: ParseComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::IDtdParserAdapter::*)(::System::Text::StringBuilder*)>(&System::Xml::IDtdParserAdapter::ParseComment)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "ParseComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::PushEntity
// Il2CppName: PushEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::IDtdParserAdapter::*)(::System::Xml::IDtdEntityInfo*, ByRef<int>)>(&System::Xml::IDtdParserAdapter::PushEntity)> {
  static const MethodInfo* get() {
    static auto* entity = &::il2cpp_utils::GetClassFromName("System.Xml", "IDtdEntityInfo")->byval_arg;
    static auto* entityId = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "PushEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entity, entityId});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::PopEntity
// Il2CppName: PopEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::IDtdParserAdapter::*)(ByRef<::System::Xml::IDtdEntityInfo*>, ByRef<int>)>(&System::Xml::IDtdParserAdapter::PopEntity)> {
  static const MethodInfo* get() {
    static auto* oldEntity = &::il2cpp_utils::GetClassFromName("System.Xml", "IDtdEntityInfo")->this_arg;
    static auto* newEntityId = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "PopEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldEntity, newEntityId});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::PushExternalSubset
// Il2CppName: PushExternalSubset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::IDtdParserAdapter::*)(::StringW, ::StringW)>(&System::Xml::IDtdParserAdapter::PushExternalSubset)> {
  static const MethodInfo* get() {
    static auto* systemId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* publicId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "PushExternalSubset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{systemId, publicId});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::PushInternalDtd
// Il2CppName: PushInternalDtd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::IDtdParserAdapter::*)(::StringW, ::StringW)>(&System::Xml::IDtdParserAdapter::PushInternalDtd)> {
  static const MethodInfo* get() {
    static auto* baseUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* internalDtd = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "PushInternalDtd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUri, internalDtd});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::OnSystemId
// Il2CppName: OnSystemId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::IDtdParserAdapter::*)(::StringW, ::System::Xml::LineInfo, ::System::Xml::LineInfo)>(&System::Xml::IDtdParserAdapter::OnSystemId)> {
  static const MethodInfo* get() {
    static auto* systemId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* keywordLineInfo = &::il2cpp_utils::GetClassFromName("System.Xml", "LineInfo")->byval_arg;
    static auto* systemLiteralLineInfo = &::il2cpp_utils::GetClassFromName("System.Xml", "LineInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "OnSystemId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{systemId, keywordLineInfo, systemLiteralLineInfo});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::OnPublicId
// Il2CppName: OnPublicId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::IDtdParserAdapter::*)(::StringW, ::System::Xml::LineInfo, ::System::Xml::LineInfo)>(&System::Xml::IDtdParserAdapter::OnPublicId)> {
  static const MethodInfo* get() {
    static auto* publicId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* keywordLineInfo = &::il2cpp_utils::GetClassFromName("System.Xml", "LineInfo")->byval_arg;
    static auto* publicLiteralLineInfo = &::il2cpp_utils::GetClassFromName("System.Xml", "LineInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "OnPublicId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{publicId, keywordLineInfo, publicLiteralLineInfo});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapter::Throw
// Il2CppName: Throw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::IDtdParserAdapter::*)(::System::Exception*)>(&System::Xml::IDtdParserAdapter::Throw)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapter*), "Throw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
