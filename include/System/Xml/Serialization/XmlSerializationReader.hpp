// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Serialization.XmlSerializationGeneratedCode
#include "System/Xml/Serialization/XmlSerializationGeneratedCode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: XmlSerializer
  class XmlSerializer;
  // Forward declaring type: XmlSerializationReadCallback
  class XmlSerializationReadCallback;
  // Forward declaring type: IXmlSerializable
  class IXmlSerializable;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlDocument
  class XmlDocument;
  // Forward declaring type: XmlReader
  class XmlReader;
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
  // Forward declaring type: XmlAttribute
  class XmlAttribute;
  // Forward declaring type: XmlNode
  class XmlNode;
  // Forward declaring type: XmlElement
  class XmlElement;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: XmlSerializationReader
  class XmlSerializationReader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Serialization::XmlSerializationReader);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Serialization::XmlSerializationReader*, "System.Xml.Serialization", "XmlSerializationReader");
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Serialization.XmlSerializationReader
  // [TokenAttribute] Offset: FFFFFFFF
  // [MonoTODOAttribute] Offset: FFFFFFFF
  class XmlSerializationReader : public ::System::Xml::Serialization::XmlSerializationGeneratedCode {
    public:
    // Nested type: ::System::Xml::Serialization::XmlSerializationReader::WriteCallbackInfo
    class WriteCallbackInfo;
    // Nested type: ::System::Xml::Serialization::XmlSerializationReader::CollectionFixup
    class CollectionFixup;
    // Nested type: ::System::Xml::Serialization::XmlSerializationReader::Fixup
    class Fixup;
    // Nested type: ::System::Xml::Serialization::XmlSerializationReader::CollectionItemFixup
    class CollectionItemFixup;
    public:
    // private System.Xml.XmlDocument document
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::XmlDocument* document;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlDocument*) == 0x8);
    // private System.Xml.XmlReader reader
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::XmlReader* reader;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlReader*) == 0x8);
    // private System.Collections.ArrayList fixups
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::ArrayList* fixups;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Collections.Hashtable collFixups
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Hashtable* collFixups;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.ArrayList collItemFixups
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::ArrayList* collItemFixups;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Collections.Hashtable typesCallbacks
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Hashtable* typesCallbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.ArrayList noIDTargets
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::ArrayList* noIDTargets;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Collections.Hashtable targets
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Hashtable* targets;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable delayedListFixups
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Hashtable* delayedListFixups;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Xml.Serialization.XmlSerializer eventSource
    // Size: 0x8
    // Offset: 0x58
    ::System::Xml::Serialization::XmlSerializer* eventSource;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::XmlSerializer*) == 0x8);
    // private System.Int32 delayedFixupId
    // Size: 0x4
    // Offset: 0x60
    int delayedFixupId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: delayedFixupId and: referencedObjects
    char __padding10[0x4] = {};
    // private System.Collections.Hashtable referencedObjects
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Hashtable* referencedObjects;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Int32 readCount
    // Size: 0x4
    // Offset: 0x70
    int readCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 whileIterationCount
    // Size: 0x4
    // Offset: 0x74
    int whileIterationCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String w3SchemaNS
    // Size: 0x8
    // Offset: 0x78
    ::StringW w3SchemaNS;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String w3InstanceNS
    // Size: 0x8
    // Offset: 0x80
    ::StringW w3InstanceNS;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String w3InstanceNS2000
    // Size: 0x8
    // Offset: 0x88
    ::StringW w3InstanceNS2000;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String w3InstanceNS1999
    // Size: 0x8
    // Offset: 0x90
    ::StringW w3InstanceNS1999;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String soapNS
    // Size: 0x8
    // Offset: 0x98
    ::StringW soapNS;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String wsdlNS
    // Size: 0x8
    // Offset: 0xA0
    ::StringW wsdlNS;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String nullX
    // Size: 0x8
    // Offset: 0xA8
    ::StringW nullX;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String nil
    // Size: 0x8
    // Offset: 0xB0
    ::StringW nil;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String typeX
    // Size: 0x8
    // Offset: 0xB8
    ::StringW typeX;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String arrayType
    // Size: 0x8
    // Offset: 0xC0
    ::StringW arrayType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.XmlQualifiedName arrayQName
    // Size: 0x8
    // Offset: 0xC8
    ::System::Xml::XmlQualifiedName* arrayQName;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    public:
    // Get instance field reference: private System.Xml.XmlDocument document
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlDocument*& dyn_document();
    // Get instance field reference: private System.Xml.XmlReader reader
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlReader*& dyn_reader();
    // Get instance field reference: private System.Collections.ArrayList fixups
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_fixups();
    // Get instance field reference: private System.Collections.Hashtable collFixups
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_collFixups();
    // Get instance field reference: private System.Collections.ArrayList collItemFixups
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_collItemFixups();
    // Get instance field reference: private System.Collections.Hashtable typesCallbacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_typesCallbacks();
    // Get instance field reference: private System.Collections.ArrayList noIDTargets
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_noIDTargets();
    // Get instance field reference: private System.Collections.Hashtable targets
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_targets();
    // Get instance field reference: private System.Collections.Hashtable delayedListFixups
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_delayedListFixups();
    // Get instance field reference: private System.Xml.Serialization.XmlSerializer eventSource
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::XmlSerializer*& dyn_eventSource();
    // Get instance field reference: private System.Int32 delayedFixupId
    [[deprecated("Use field access instead!")]] int& dyn_delayedFixupId();
    // Get instance field reference: private System.Collections.Hashtable referencedObjects
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_referencedObjects();
    // Get instance field reference: private System.Int32 readCount
    [[deprecated("Use field access instead!")]] int& dyn_readCount();
    // Get instance field reference: private System.Int32 whileIterationCount
    [[deprecated("Use field access instead!")]] int& dyn_whileIterationCount();
    // Get instance field reference: private System.String w3SchemaNS
    [[deprecated("Use field access instead!")]] ::StringW& dyn_w3SchemaNS();
    // Get instance field reference: private System.String w3InstanceNS
    [[deprecated("Use field access instead!")]] ::StringW& dyn_w3InstanceNS();
    // Get instance field reference: private System.String w3InstanceNS2000
    [[deprecated("Use field access instead!")]] ::StringW& dyn_w3InstanceNS2000();
    // Get instance field reference: private System.String w3InstanceNS1999
    [[deprecated("Use field access instead!")]] ::StringW& dyn_w3InstanceNS1999();
    // Get instance field reference: private System.String soapNS
    [[deprecated("Use field access instead!")]] ::StringW& dyn_soapNS();
    // Get instance field reference: private System.String wsdlNS
    [[deprecated("Use field access instead!")]] ::StringW& dyn_wsdlNS();
    // Get instance field reference: private System.String nullX
    [[deprecated("Use field access instead!")]] ::StringW& dyn_nullX();
    // Get instance field reference: private System.String nil
    [[deprecated("Use field access instead!")]] ::StringW& dyn_nil();
    // Get instance field reference: private System.String typeX
    [[deprecated("Use field access instead!")]] ::StringW& dyn_typeX();
    // Get instance field reference: private System.String arrayType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_arrayType();
    // Get instance field reference: private System.Xml.XmlQualifiedName arrayQName
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlQualifiedName*& dyn_arrayQName();
    // protected System.Xml.XmlDocument get_Document()
    // Offset: 0xF44BAC
    ::System::Xml::XmlDocument* get_Document();
    // protected System.Xml.XmlReader get_Reader()
    // Offset: 0xF44C44
    ::System::Xml::XmlReader* get_Reader();
    // System.Void Initialize(System.Xml.XmlReader reader, System.Xml.Serialization.XmlSerializer eventSource)
    // Offset: 0xF447BC
    void Initialize(::System::Xml::XmlReader* reader, ::System::Xml::Serialization::XmlSerializer* eventSource);
    // private System.Collections.ArrayList EnsureArrayList(System.Collections.ArrayList list)
    // Offset: 0xF44AE4
    ::System::Collections::ArrayList* EnsureArrayList(::System::Collections::ArrayList* list);
    // private System.Collections.Hashtable EnsureHashtable(System.Collections.Hashtable hash)
    // Offset: 0xF44B44
    ::System::Collections::Hashtable* EnsureHashtable(::System::Collections::Hashtable* hash);
    // protected System.Void AddFixup(System.Xml.Serialization.XmlSerializationReader/System.Xml.Serialization.CollectionFixup fixup)
    // Offset: 0xF44C4C
    void AddFixup(::System::Xml::Serialization::XmlSerializationReader::CollectionFixup* fixup);
    // protected System.Void AddFixup(System.Xml.Serialization.XmlSerializationReader/System.Xml.Serialization.Fixup fixup)
    // Offset: 0xF44D04
    void AddFixup(::System::Xml::Serialization::XmlSerializationReader::Fixup* fixup);
    // private System.Void AddFixup(System.Xml.Serialization.XmlSerializationReader/System.Xml.Serialization.CollectionItemFixup fixup)
    // Offset: 0xF44D4C
    void AddFixup(::System::Xml::Serialization::XmlSerializationReader::CollectionItemFixup* fixup);
    // protected System.Void AddReadCallback(System.String name, System.String ns, System.Type type, System.Xml.Serialization.XmlSerializationReadCallback read)
    // Offset: 0xF44D94
    void AddReadCallback(::StringW name, ::StringW ns, ::System::Type* type, ::System::Xml::Serialization::XmlSerializationReadCallback* read);
    // protected System.Void AddTarget(System.String id, System.Object o)
    // Offset: 0xF44E78
    void AddTarget(::StringW id, ::Il2CppObject* o);
    // private System.String CurrentTag()
    // Offset: 0xF44F34
    ::StringW CurrentTag();
    // protected System.Exception CreateReadOnlyCollectionException(System.String name)
    // Offset: 0xF45094
    ::System::Exception* CreateReadOnlyCollectionException(::StringW name);
    // protected System.Exception CreateUnknownConstantException(System.String value, System.Type enumType)
    // Offset: 0xF45120
    ::System::Exception* CreateUnknownConstantException(::StringW value, ::System::Type* enumType);
    // protected System.Exception CreateUnknownNodeException()
    // Offset: 0xF451BC
    ::System::Exception* CreateUnknownNodeException();
    // protected System.Exception CreateUnknownTypeException(System.Xml.XmlQualifiedName type)
    // Offset: 0xF4524C
    ::System::Exception* CreateUnknownTypeException(::System::Xml::XmlQualifiedName* type);
    // protected System.Array EnsureArrayIndex(System.Array a, System.Int32 index, System.Type elementType)
    // Offset: 0xF4545C
    ::System::Array* EnsureArrayIndex(::System::Array* a, int index, ::System::Type* elementType);
    // protected System.Boolean GetNullAttr()
    // Offset: 0xF454F8
    bool GetNullAttr();
    // protected System.Object GetTarget(System.String id)
    // Offset: 0xF455AC
    ::Il2CppObject* GetTarget(::StringW id);
    // private System.Boolean TargetReady(System.String id)
    // Offset: 0xF45670
    bool TargetReady(::StringW id);
    // protected System.Xml.XmlQualifiedName GetXsiType()
    // Offset: 0xF4568C
    ::System::Xml::XmlQualifiedName* GetXsiType();
    // protected System.Void InitCallbacks()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void InitCallbacks();
    // protected System.Void InitIDs()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void InitIDs();
    // protected System.Boolean IsXmlnsAttribute(System.String name)
    // Offset: 0xF458A8
    bool IsXmlnsAttribute(::StringW name);
    // protected System.Void ParseWsdlArrayType(System.Xml.XmlAttribute attr)
    // Offset: 0xF4594C
    void ParseWsdlArrayType(::System::Xml::XmlAttribute* attr);
    // protected System.Xml.XmlQualifiedName ReadElementQualifiedName()
    // Offset: 0xF45ADC
    ::System::Xml::XmlQualifiedName* ReadElementQualifiedName();
    // protected System.Void ReadEndElement()
    // Offset: 0xF45E1C
    void ReadEndElement();
    // protected System.Boolean ReadNull()
    // Offset: 0xF45EC0
    bool ReadNull();
    // protected System.Xml.XmlQualifiedName ReadNullableQualifiedName()
    // Offset: 0xF45FCC
    ::System::Xml::XmlQualifiedName* ReadNullableQualifiedName();
    // protected System.String ReadNullableString()
    // Offset: 0xF46004
    ::StringW ReadNullableString();
    // protected System.Object ReadReferencedElement()
    // Offset: 0xF4605C
    ::Il2CppObject* ReadReferencedElement();
    // private System.Xml.Serialization.XmlSerializationReader/System.Xml.Serialization.WriteCallbackInfo GetCallbackInfo(System.Xml.XmlQualifiedName qname)
    // Offset: 0xF46374
    ::System::Xml::Serialization::XmlSerializationReader::WriteCallbackInfo* GetCallbackInfo(::System::Xml::XmlQualifiedName* qname);
    // protected System.Object ReadReferencedElement(System.String name, System.String ns)
    // Offset: 0xF460B8
    ::Il2CppObject* ReadReferencedElement(::StringW name, ::StringW ns);
    // private System.Boolean ReadList(out System.Object resultList)
    // Offset: 0xF4645C
    bool ReadList(ByRef<::Il2CppObject*> resultList);
    // protected System.Void ReadReferencedElements()
    // Offset: 0xF47258
    void ReadReferencedElements();
    // protected System.Object ReadReferencingElement(out System.String fixupReference)
    // Offset: 0xF48068
    ::Il2CppObject* ReadReferencingElement(ByRef<::StringW> fixupReference);
    // protected System.Object ReadReferencingElement(System.String name, System.String ns, out System.String fixupReference)
    // Offset: 0xF4724C
    ::Il2CppObject* ReadReferencingElement(::StringW name, ::StringW ns, ByRef<::StringW> fixupReference);
    // protected System.Object ReadReferencingElement(System.String name, System.String ns, System.Boolean elementCanBeType, out System.String fixupReference)
    // Offset: 0xF480D8
    ::Il2CppObject* ReadReferencingElement(::StringW name, ::StringW ns, bool elementCanBeType, ByRef<::StringW> fixupReference);
    // protected System.Xml.Serialization.IXmlSerializable ReadSerializable(System.Xml.Serialization.IXmlSerializable serializable)
    // Offset: 0xF48400
    ::System::Xml::Serialization::IXmlSerializable* ReadSerializable(::System::Xml::Serialization::IXmlSerializable* serializable);
    // protected System.Object ReadTypedPrimitive(System.Xml.XmlQualifiedName type)
    // Offset: 0xF4859C
    ::Il2CppObject* ReadTypedPrimitive(::System::Xml::XmlQualifiedName* type);
    // private System.Object ReadTypedPrimitive(System.Xml.XmlQualifiedName qname, System.Boolean reportUnknown)
    // Offset: 0xF46948
    ::Il2CppObject* ReadTypedPrimitive(::System::Xml::XmlQualifiedName* qname, bool reportUnknown);
    // protected System.Xml.XmlNode ReadXmlNode(System.Boolean wrapped)
    // Offset: 0xF48830
    ::System::Xml::XmlNode* ReadXmlNode(bool wrapped);
    // protected System.Xml.XmlDocument ReadXmlDocument(System.Boolean wrapped)
    // Offset: 0xF4889C
    ::System::Xml::XmlDocument* ReadXmlDocument(bool wrapped);
    // protected System.Array ShrinkArray(System.Array a, System.Int32 length, System.Type elementType, System.Boolean isNullable)
    // Offset: 0xF489BC
    ::System::Array* ShrinkArray(::System::Array* a, int length, ::System::Type* elementType, bool isNullable);
    // protected System.Xml.XmlQualifiedName ToXmlQualifiedName(System.String value)
    // Offset: 0xF45BDC
    ::System::Xml::XmlQualifiedName* ToXmlQualifiedName(::StringW value);
    // protected System.Void UnknownAttribute(System.Object o, System.Xml.XmlAttribute attr, System.String qnames)
    // Offset: 0xF48A5C
    void UnknownAttribute(::Il2CppObject* o, ::System::Xml::XmlAttribute* attr, ::StringW qnames);
    // protected System.Void UnknownElement(System.Object o, System.Xml.XmlElement elem, System.String qnames)
    // Offset: 0xF48BC8
    void UnknownElement(::Il2CppObject* o, ::System::Xml::XmlElement* elem, ::StringW qnames);
    // protected System.Void UnknownNode(System.Object o)
    // Offset: 0xF45F94
    void UnknownNode(::Il2CppObject* o);
    // protected System.Void UnknownNode(System.Object o, System.String qnames)
    // Offset: 0xF48D34
    void UnknownNode(::Il2CppObject* o, ::StringW qnames);
    // private System.Void OnUnknownNode(System.Xml.XmlNode node, System.Object o, System.String qnames)
    // Offset: 0xF485A4
    void OnUnknownNode(::System::Xml::XmlNode* node, ::Il2CppObject* o, ::StringW qnames);
    // protected System.Void UnreferencedObject(System.String id, System.Object o)
    // Offset: 0xF47FD0
    void UnreferencedObject(::StringW id, ::Il2CppObject* o);
    // protected System.Void .ctor()
    // Offset: 0xF44BA4
    // Implemented from: System.Xml.Serialization.XmlSerializationGeneratedCode
    // Base method: System.Void XmlSerializationGeneratedCode::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSerializationReader* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Serialization::XmlSerializationReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSerializationReader*, creationType>()));
    }
  }; // System.Xml.Serialization.XmlSerializationReader
  #pragma pack(pop)
  static check_size<sizeof(XmlSerializationReader), 200 + sizeof(::System::Xml::XmlQualifiedName*)> __System_Xml_Serialization_XmlSerializationReaderSizeCheck;
  static_assert(sizeof(XmlSerializationReader) == 0xD0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::get_Document
// Il2CppName: get_Document
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlDocument* (System::Xml::Serialization::XmlSerializationReader::*)()>(&System::Xml::Serialization::XmlSerializationReader::get_Document)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "get_Document", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::get_Reader
// Il2CppName: get_Reader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlReader* (System::Xml::Serialization::XmlSerializationReader::*)()>(&System::Xml::Serialization::XmlSerializationReader::get_Reader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "get_Reader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationReader::*)(::System::Xml::XmlReader*, ::System::Xml::Serialization::XmlSerializer*)>(&System::Xml::Serialization::XmlSerializationReader::Initialize)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    static auto* eventSource = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlSerializer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, eventSource});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::EnsureArrayList
// Il2CppName: EnsureArrayList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ArrayList* (System::Xml::Serialization::XmlSerializationReader::*)(::System::Collections::ArrayList*)>(&System::Xml::Serialization::XmlSerializationReader::EnsureArrayList)> {
  static const MethodInfo* get() {
    static auto* list = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "EnsureArrayList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{list});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::EnsureHashtable
// Il2CppName: EnsureHashtable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Hashtable* (System::Xml::Serialization::XmlSerializationReader::*)(::System::Collections::Hashtable*)>(&System::Xml::Serialization::XmlSerializationReader::EnsureHashtable)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "EnsureHashtable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::AddFixup
// Il2CppName: AddFixup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationReader::*)(::System::Xml::Serialization::XmlSerializationReader::CollectionFixup*)>(&System::Xml::Serialization::XmlSerializationReader::AddFixup)> {
  static const MethodInfo* get() {
    static auto* fixup = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlSerializationReader/CollectionFixup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "AddFixup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fixup});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::AddFixup
// Il2CppName: AddFixup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationReader::*)(::System::Xml::Serialization::XmlSerializationReader::Fixup*)>(&System::Xml::Serialization::XmlSerializationReader::AddFixup)> {
  static const MethodInfo* get() {
    static auto* fixup = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlSerializationReader/Fixup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "AddFixup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fixup});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::AddFixup
// Il2CppName: AddFixup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationReader::*)(::System::Xml::Serialization::XmlSerializationReader::CollectionItemFixup*)>(&System::Xml::Serialization::XmlSerializationReader::AddFixup)> {
  static const MethodInfo* get() {
    static auto* fixup = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlSerializationReader/CollectionItemFixup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "AddFixup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fixup});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::AddReadCallback
// Il2CppName: AddReadCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationReader::*)(::StringW, ::StringW, ::System::Type*, ::System::Xml::Serialization::XmlSerializationReadCallback*)>(&System::Xml::Serialization::XmlSerializationReader::AddReadCallback)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* read = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlSerializationReadCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "AddReadCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns, type, read});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::AddTarget
// Il2CppName: AddTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationReader::*)(::StringW, ::Il2CppObject*)>(&System::Xml::Serialization::XmlSerializationReader::AddTarget)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "AddTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, o});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::CurrentTag
// Il2CppName: CurrentTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::XmlSerializationReader::*)()>(&System::Xml::Serialization::XmlSerializationReader::CurrentTag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "CurrentTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::CreateReadOnlyCollectionException
// Il2CppName: CreateReadOnlyCollectionException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (System::Xml::Serialization::XmlSerializationReader::*)(::StringW)>(&System::Xml::Serialization::XmlSerializationReader::CreateReadOnlyCollectionException)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "CreateReadOnlyCollectionException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::CreateUnknownConstantException
// Il2CppName: CreateUnknownConstantException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (System::Xml::Serialization::XmlSerializationReader::*)(::StringW, ::System::Type*)>(&System::Xml::Serialization::XmlSerializationReader::CreateUnknownConstantException)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* enumType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "CreateUnknownConstantException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, enumType});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::CreateUnknownNodeException
// Il2CppName: CreateUnknownNodeException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (System::Xml::Serialization::XmlSerializationReader::*)()>(&System::Xml::Serialization::XmlSerializationReader::CreateUnknownNodeException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "CreateUnknownNodeException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::CreateUnknownTypeException
// Il2CppName: CreateUnknownTypeException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (System::Xml::Serialization::XmlSerializationReader::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Serialization::XmlSerializationReader::CreateUnknownTypeException)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "CreateUnknownTypeException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::EnsureArrayIndex
// Il2CppName: EnsureArrayIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Array* (System::Xml::Serialization::XmlSerializationReader::*)(::System::Array*, int, ::System::Type*)>(&System::Xml::Serialization::XmlSerializationReader::EnsureArrayIndex)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elementType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "EnsureArrayIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, index, elementType});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::GetNullAttr
// Il2CppName: GetNullAttr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::XmlSerializationReader::*)()>(&System::Xml::Serialization::XmlSerializationReader::GetNullAttr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "GetNullAttr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::GetTarget
// Il2CppName: GetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Serialization::XmlSerializationReader::*)(::StringW)>(&System::Xml::Serialization::XmlSerializationReader::GetTarget)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "GetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::TargetReady
// Il2CppName: TargetReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::XmlSerializationReader::*)(::StringW)>(&System::Xml::Serialization::XmlSerializationReader::TargetReady)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "TargetReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::GetXsiType
// Il2CppName: GetXsiType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Serialization::XmlSerializationReader::*)()>(&System::Xml::Serialization::XmlSerializationReader::GetXsiType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "GetXsiType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::InitCallbacks
// Il2CppName: InitCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationReader::*)()>(&System::Xml::Serialization::XmlSerializationReader::InitCallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "InitCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::InitIDs
// Il2CppName: InitIDs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationReader::*)()>(&System::Xml::Serialization::XmlSerializationReader::InitIDs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "InitIDs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::IsXmlnsAttribute
// Il2CppName: IsXmlnsAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::XmlSerializationReader::*)(::StringW)>(&System::Xml::Serialization::XmlSerializationReader::IsXmlnsAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "IsXmlnsAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ParseWsdlArrayType
// Il2CppName: ParseWsdlArrayType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationReader::*)(::System::Xml::XmlAttribute*)>(&System::Xml::Serialization::XmlSerializationReader::ParseWsdlArrayType)> {
  static const MethodInfo* get() {
    static auto* attr = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ParseWsdlArrayType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attr});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ReadElementQualifiedName
// Il2CppName: ReadElementQualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Serialization::XmlSerializationReader::*)()>(&System::Xml::Serialization::XmlSerializationReader::ReadElementQualifiedName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ReadElementQualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ReadEndElement
// Il2CppName: ReadEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationReader::*)()>(&System::Xml::Serialization::XmlSerializationReader::ReadEndElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ReadEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ReadNull
// Il2CppName: ReadNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::XmlSerializationReader::*)()>(&System::Xml::Serialization::XmlSerializationReader::ReadNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ReadNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ReadNullableQualifiedName
// Il2CppName: ReadNullableQualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Serialization::XmlSerializationReader::*)()>(&System::Xml::Serialization::XmlSerializationReader::ReadNullableQualifiedName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ReadNullableQualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ReadNullableString
// Il2CppName: ReadNullableString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::XmlSerializationReader::*)()>(&System::Xml::Serialization::XmlSerializationReader::ReadNullableString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ReadNullableString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ReadReferencedElement
// Il2CppName: ReadReferencedElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Serialization::XmlSerializationReader::*)()>(&System::Xml::Serialization::XmlSerializationReader::ReadReferencedElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ReadReferencedElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::GetCallbackInfo
// Il2CppName: GetCallbackInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlSerializationReader::WriteCallbackInfo* (System::Xml::Serialization::XmlSerializationReader::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Serialization::XmlSerializationReader::GetCallbackInfo)> {
  static const MethodInfo* get() {
    static auto* qname = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "GetCallbackInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qname});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ReadReferencedElement
// Il2CppName: ReadReferencedElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Serialization::XmlSerializationReader::*)(::StringW, ::StringW)>(&System::Xml::Serialization::XmlSerializationReader::ReadReferencedElement)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ReadReferencedElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ReadList
// Il2CppName: ReadList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::XmlSerializationReader::*)(ByRef<::Il2CppObject*>)>(&System::Xml::Serialization::XmlSerializationReader::ReadList)> {
  static const MethodInfo* get() {
    static auto* resultList = &::il2cpp_utils::GetClassFromName("System", "Object")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ReadList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resultList});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ReadReferencedElements
// Il2CppName: ReadReferencedElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationReader::*)()>(&System::Xml::Serialization::XmlSerializationReader::ReadReferencedElements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ReadReferencedElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ReadReferencingElement
// Il2CppName: ReadReferencingElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Serialization::XmlSerializationReader::*)(ByRef<::StringW>)>(&System::Xml::Serialization::XmlSerializationReader::ReadReferencingElement)> {
  static const MethodInfo* get() {
    static auto* fixupReference = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ReadReferencingElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fixupReference});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ReadReferencingElement
// Il2CppName: ReadReferencingElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Serialization::XmlSerializationReader::*)(::StringW, ::StringW, ByRef<::StringW>)>(&System::Xml::Serialization::XmlSerializationReader::ReadReferencingElement)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fixupReference = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ReadReferencingElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns, fixupReference});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ReadReferencingElement
// Il2CppName: ReadReferencingElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Serialization::XmlSerializationReader::*)(::StringW, ::StringW, bool, ByRef<::StringW>)>(&System::Xml::Serialization::XmlSerializationReader::ReadReferencingElement)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* elementCanBeType = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* fixupReference = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ReadReferencingElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns, elementCanBeType, fixupReference});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ReadSerializable
// Il2CppName: ReadSerializable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::IXmlSerializable* (System::Xml::Serialization::XmlSerializationReader::*)(::System::Xml::Serialization::IXmlSerializable*)>(&System::Xml::Serialization::XmlSerializationReader::ReadSerializable)> {
  static const MethodInfo* get() {
    static auto* serializable = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "IXmlSerializable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ReadSerializable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializable});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ReadTypedPrimitive
// Il2CppName: ReadTypedPrimitive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Serialization::XmlSerializationReader::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Serialization::XmlSerializationReader::ReadTypedPrimitive)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ReadTypedPrimitive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ReadTypedPrimitive
// Il2CppName: ReadTypedPrimitive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Serialization::XmlSerializationReader::*)(::System::Xml::XmlQualifiedName*, bool)>(&System::Xml::Serialization::XmlSerializationReader::ReadTypedPrimitive)> {
  static const MethodInfo* get() {
    static auto* qname = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    static auto* reportUnknown = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ReadTypedPrimitive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qname, reportUnknown});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ReadXmlNode
// Il2CppName: ReadXmlNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::Serialization::XmlSerializationReader::*)(bool)>(&System::Xml::Serialization::XmlSerializationReader::ReadXmlNode)> {
  static const MethodInfo* get() {
    static auto* wrapped = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ReadXmlNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wrapped});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ReadXmlDocument
// Il2CppName: ReadXmlDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlDocument* (System::Xml::Serialization::XmlSerializationReader::*)(bool)>(&System::Xml::Serialization::XmlSerializationReader::ReadXmlDocument)> {
  static const MethodInfo* get() {
    static auto* wrapped = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ReadXmlDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wrapped});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ShrinkArray
// Il2CppName: ShrinkArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Array* (System::Xml::Serialization::XmlSerializationReader::*)(::System::Array*, int, ::System::Type*, bool)>(&System::Xml::Serialization::XmlSerializationReader::ShrinkArray)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elementType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* isNullable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ShrinkArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, length, elementType, isNullable});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::ToXmlQualifiedName
// Il2CppName: ToXmlQualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Serialization::XmlSerializationReader::*)(::StringW)>(&System::Xml::Serialization::XmlSerializationReader::ToXmlQualifiedName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "ToXmlQualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::UnknownAttribute
// Il2CppName: UnknownAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationReader::*)(::Il2CppObject*, ::System::Xml::XmlAttribute*, ::StringW)>(&System::Xml::Serialization::XmlSerializationReader::UnknownAttribute)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* attr = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlAttribute")->byval_arg;
    static auto* qnames = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "UnknownAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o, attr, qnames});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::UnknownElement
// Il2CppName: UnknownElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationReader::*)(::Il2CppObject*, ::System::Xml::XmlElement*, ::StringW)>(&System::Xml::Serialization::XmlSerializationReader::UnknownElement)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* elem = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    static auto* qnames = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "UnknownElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o, elem, qnames});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::UnknownNode
// Il2CppName: UnknownNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationReader::*)(::Il2CppObject*)>(&System::Xml::Serialization::XmlSerializationReader::UnknownNode)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "UnknownNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::UnknownNode
// Il2CppName: UnknownNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationReader::*)(::Il2CppObject*, ::StringW)>(&System::Xml::Serialization::XmlSerializationReader::UnknownNode)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* qnames = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "UnknownNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o, qnames});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::OnUnknownNode
// Il2CppName: OnUnknownNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationReader::*)(::System::Xml::XmlNode*, ::Il2CppObject*, ::StringW)>(&System::Xml::Serialization::XmlSerializationReader::OnUnknownNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* qnames = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "OnUnknownNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, o, qnames});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::UnreferencedObject
// Il2CppName: UnreferencedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationReader::*)(::StringW, ::Il2CppObject*)>(&System::Xml::Serialization::XmlSerializationReader::UnreferencedObject)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationReader*), "UnreferencedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, o});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
