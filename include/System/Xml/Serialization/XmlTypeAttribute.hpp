// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: XmlTypeAttribute
  class XmlTypeAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Serialization::XmlTypeAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Serialization::XmlTypeAttribute*, "System.Xml.Serialization", "XmlTypeAttribute");
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Serialization.XmlTypeAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: 6A46DC
  class XmlTypeAttribute : public ::System::Attribute {
    public:
    public:
    // private System.Boolean includeInSchema
    // Size: 0x1
    // Offset: 0x10
    bool includeInSchema;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: includeInSchema and: ns
    char __padding0[0x7] = {};
    // private System.String ns
    // Size: 0x8
    // Offset: 0x18
    ::StringW ns;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String typeName
    // Size: 0x8
    // Offset: 0x20
    ::StringW typeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.Boolean includeInSchema
    [[deprecated]] bool& dyn_includeInSchema();
    // Get instance field reference: private System.String ns
    [[deprecated]] ::StringW& dyn_ns();
    // Get instance field reference: private System.String typeName
    [[deprecated]] ::StringW& dyn_typeName();
    // public System.Boolean get_IncludeInSchema()
    // Offset: 0x10866CC
    bool get_IncludeInSchema();
    // public System.String get_Namespace()
    // Offset: 0x10866D4
    ::StringW get_Namespace();
    // public System.String get_TypeName()
    // Offset: 0x10866DC
    ::StringW get_TypeName();
    // System.Void AddKeyHash(System.Text.StringBuilder sb)
    // Offset: 0x1086734
    void AddKeyHash(::System::Text::StringBuilder* sb);
  }; // System.Xml.Serialization.XmlTypeAttribute
  #pragma pack(pop)
  static check_size<sizeof(XmlTypeAttribute), 32 + sizeof(::StringW)> __System_Xml_Serialization_XmlTypeAttributeSizeCheck;
  static_assert(sizeof(XmlTypeAttribute) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Serialization::XmlTypeAttribute::get_IncludeInSchema
// Il2CppName: get_IncludeInSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::XmlTypeAttribute::*)()>(&System::Xml::Serialization::XmlTypeAttribute::get_IncludeInSchema)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlTypeAttribute*), "get_IncludeInSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlTypeAttribute::get_Namespace
// Il2CppName: get_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::XmlTypeAttribute::*)()>(&System::Xml::Serialization::XmlTypeAttribute::get_Namespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlTypeAttribute*), "get_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlTypeAttribute::get_TypeName
// Il2CppName: get_TypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::XmlTypeAttribute::*)()>(&System::Xml::Serialization::XmlTypeAttribute::get_TypeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlTypeAttribute*), "get_TypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlTypeAttribute::AddKeyHash
// Il2CppName: AddKeyHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlTypeAttribute::*)(::System::Text::StringBuilder*)>(&System::Xml::Serialization::XmlTypeAttribute::AddKeyHash)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlTypeAttribute*), "AddKeyHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb});
  }
};
