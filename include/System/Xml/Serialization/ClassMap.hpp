// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Serialization.ObjectMap
#include "System/Xml/Serialization/ObjectMap.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: ICollection
  class ICollection;
}
// Forward declaring namespace: System::Xml::Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: XmlTypeMapMemberAttribute
  class XmlTypeMapMemberAttribute;
  // Forward declaring type: XmlTypeMapMemberAnyElement
  class XmlTypeMapMemberAnyElement;
  // Forward declaring type: XmlTypeMapMemberAnyAttribute
  class XmlTypeMapMemberAnyAttribute;
  // Forward declaring type: XmlTypeMapMemberNamespaces
  class XmlTypeMapMemberNamespaces;
  // Forward declaring type: XmlTypeMapMember
  class XmlTypeMapMember;
  // Forward declaring type: XmlTypeMapMemberExpandable
  class XmlTypeMapMemberExpandable;
  // Forward declaring type: XmlTypeMapElementInfo
  class XmlTypeMapElementInfo;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Completed forward declares
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: ClassMap
  class ClassMap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Serialization::ClassMap);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Serialization::ClassMap*, "System.Xml.Serialization", "ClassMap");
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Xml.Serialization.ClassMap
  // [TokenAttribute] Offset: FFFFFFFF
  class ClassMap : public ::System::Xml::Serialization::ObjectMap {
    public:
    public:
    // private System.Collections.Hashtable _elements
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Hashtable* elements;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.ArrayList _elementMembers
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::ArrayList* elementMembers;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Collections.Hashtable _attributeMembers
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Hashtable* attributeMembers;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Xml.Serialization.XmlTypeMapMemberAttribute[] _attributeMembersArray
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::System::Xml::Serialization::XmlTypeMapMemberAttribute*> attributeMembersArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::Serialization::XmlTypeMapMemberAttribute*>) == 0x8);
    // private System.Collections.ArrayList _flatLists
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::ArrayList* flatLists;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Collections.ArrayList _allMembers
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::ArrayList* allMembers;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Collections.ArrayList _membersWithDefault
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::ArrayList* membersWithDefault;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Collections.ArrayList _listMembers
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::ArrayList* listMembers;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Xml.Serialization.XmlTypeMapMemberAnyElement _defaultAnyElement
    // Size: 0x8
    // Offset: 0x50
    ::System::Xml::Serialization::XmlTypeMapMemberAnyElement* defaultAnyElement;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::XmlTypeMapMemberAnyElement*) == 0x8);
    // private System.Xml.Serialization.XmlTypeMapMemberAnyAttribute _defaultAnyAttribute
    // Size: 0x8
    // Offset: 0x58
    ::System::Xml::Serialization::XmlTypeMapMemberAnyAttribute* defaultAnyAttribute;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::XmlTypeMapMemberAnyAttribute*) == 0x8);
    // private System.Xml.Serialization.XmlTypeMapMemberNamespaces _namespaceDeclarations
    // Size: 0x8
    // Offset: 0x60
    ::System::Xml::Serialization::XmlTypeMapMemberNamespaces* namespaceDeclarations;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::XmlTypeMapMemberNamespaces*) == 0x8);
    // private System.Xml.Serialization.XmlTypeMapMember _xmlTextCollector
    // Size: 0x8
    // Offset: 0x68
    ::System::Xml::Serialization::XmlTypeMapMember* xmlTextCollector;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::XmlTypeMapMember*) == 0x8);
    // private System.Xml.Serialization.XmlTypeMapMember _returnMember
    // Size: 0x8
    // Offset: 0x70
    ::System::Xml::Serialization::XmlTypeMapMember* returnMember;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::XmlTypeMapMember*) == 0x8);
    // private System.Boolean _ignoreMemberNamespace
    // Size: 0x1
    // Offset: 0x78
    bool ignoreMemberNamespace;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _canBeSimpleType
    // Size: 0x1
    // Offset: 0x79
    bool canBeSimpleType;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Nullable`1<System.Boolean> _isOrderDependentMap
    // Size: 0xFFFFFFFF
    // Offset: 0x7A
    ::System::Nullable_1<bool> isOrderDependentMap;
    public:
    // Get instance field reference: private System.Collections.Hashtable _elements
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__elements();
    // Get instance field reference: private System.Collections.ArrayList _elementMembers
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn__elementMembers();
    // Get instance field reference: private System.Collections.Hashtable _attributeMembers
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__attributeMembers();
    // Get instance field reference: private System.Xml.Serialization.XmlTypeMapMemberAttribute[] _attributeMembersArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Xml::Serialization::XmlTypeMapMemberAttribute*>& dyn__attributeMembersArray();
    // Get instance field reference: private System.Collections.ArrayList _flatLists
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn__flatLists();
    // Get instance field reference: private System.Collections.ArrayList _allMembers
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn__allMembers();
    // Get instance field reference: private System.Collections.ArrayList _membersWithDefault
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn__membersWithDefault();
    // Get instance field reference: private System.Collections.ArrayList _listMembers
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn__listMembers();
    // Get instance field reference: private System.Xml.Serialization.XmlTypeMapMemberAnyElement _defaultAnyElement
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::XmlTypeMapMemberAnyElement*& dyn__defaultAnyElement();
    // Get instance field reference: private System.Xml.Serialization.XmlTypeMapMemberAnyAttribute _defaultAnyAttribute
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::XmlTypeMapMemberAnyAttribute*& dyn__defaultAnyAttribute();
    // Get instance field reference: private System.Xml.Serialization.XmlTypeMapMemberNamespaces _namespaceDeclarations
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::XmlTypeMapMemberNamespaces*& dyn__namespaceDeclarations();
    // Get instance field reference: private System.Xml.Serialization.XmlTypeMapMember _xmlTextCollector
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::XmlTypeMapMember*& dyn__xmlTextCollector();
    // Get instance field reference: private System.Xml.Serialization.XmlTypeMapMember _returnMember
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::XmlTypeMapMember*& dyn__returnMember();
    // Get instance field reference: private System.Boolean _ignoreMemberNamespace
    [[deprecated("Use field access instead!")]] bool& dyn__ignoreMemberNamespace();
    // Get instance field reference: private System.Boolean _canBeSimpleType
    [[deprecated("Use field access instead!")]] bool& dyn__canBeSimpleType();
    // Get instance field reference: private System.Nullable`1<System.Boolean> _isOrderDependentMap
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& dyn__isOrderDependentMap();
    // public System.Boolean get_IsOrderDependentMap()
    // Offset: 0xB66088
    bool get_IsOrderDependentMap();
    // public System.Xml.Serialization.XmlTypeMapMemberAnyElement get_DefaultAnyElementMember()
    // Offset: 0xB66440
    ::System::Xml::Serialization::XmlTypeMapMemberAnyElement* get_DefaultAnyElementMember();
    // public System.Xml.Serialization.XmlTypeMapMemberAnyAttribute get_DefaultAnyAttributeMember()
    // Offset: 0xB66448
    ::System::Xml::Serialization::XmlTypeMapMemberAnyAttribute* get_DefaultAnyAttributeMember();
    // public System.Xml.Serialization.XmlTypeMapMemberNamespaces get_NamespaceDeclarations()
    // Offset: 0xB66450
    ::System::Xml::Serialization::XmlTypeMapMemberNamespaces* get_NamespaceDeclarations();
    // public System.Collections.ICollection get_AttributeMembers()
    // Offset: 0xB66458
    ::System::Collections::ICollection* get_AttributeMembers();
    // public System.Collections.ICollection get_ElementMembers()
    // Offset: 0xB66828
    ::System::Collections::ICollection* get_ElementMembers();
    // public System.Collections.ArrayList get_AllMembers()
    // Offset: 0xB66830
    ::System::Collections::ArrayList* get_AllMembers();
    // public System.Collections.ArrayList get_FlatLists()
    // Offset: 0xB66838
    ::System::Collections::ArrayList* get_FlatLists();
    // public System.Collections.ArrayList get_ListMembers()
    // Offset: 0xB66840
    ::System::Collections::ArrayList* get_ListMembers();
    // public System.Xml.Serialization.XmlTypeMapMember get_XmlTextCollector()
    // Offset: 0xB66848
    ::System::Xml::Serialization::XmlTypeMapMember* get_XmlTextCollector();
    // public System.Xml.Serialization.XmlTypeMapMember get_ReturnMember()
    // Offset: 0xB66850
    ::System::Xml::Serialization::XmlTypeMapMember* get_ReturnMember();
    // public System.Xml.XmlQualifiedName get_SimpleContentBaseType()
    // Offset: 0xB66858
    ::System::Xml::XmlQualifiedName* get_SimpleContentBaseType();
    // public System.Boolean get_HasSimpleContent()
    // Offset: 0xB66A58
    bool get_HasSimpleContent();
    // public System.Void AddMember(System.Xml.Serialization.XmlTypeMapMember member)
    // Offset: 0xB64B20
    void AddMember(::System::Xml::Serialization::XmlTypeMapMember* member);
    // private System.Void RegisterFlatList(System.Xml.Serialization.XmlTypeMapMemberExpandable member)
    // Offset: 0xB6580C
    void RegisterFlatList(::System::Xml::Serialization::XmlTypeMapMemberExpandable* member);
    // public System.Xml.Serialization.XmlTypeMapMemberAttribute GetAttribute(System.String name, System.String ns)
    // Offset: 0xB658B8
    ::System::Xml::Serialization::XmlTypeMapMemberAttribute* GetAttribute(::StringW name, ::StringW ns);
    // public System.Xml.Serialization.XmlTypeMapElementInfo GetElement(System.String name, System.String ns, System.Int32 minimalOrder)
    // Offset: 0xB65978
    ::System::Xml::Serialization::XmlTypeMapElementInfo* GetElement(::StringW name, ::StringW ns, int minimalOrder);
    // public System.Xml.Serialization.XmlTypeMapElementInfo GetElement(System.String name, System.String ns)
    // Offset: 0xB65D0C
    ::System::Xml::Serialization::XmlTypeMapElementInfo* GetElement(::StringW name, ::StringW ns);
    // private System.String BuildKey(System.String name, System.String ns, System.Int32 explicitOrder)
    // Offset: 0xB65714
    ::StringW BuildKey(::StringW name, ::StringW ns, int explicitOrder);
    // public System.Void SetCanBeSimpleType(System.Boolean can)
    // Offset: 0xB66A4C
    void SetCanBeSimpleType(bool can);
    // public System.Void .ctor()
    // Offset: 0xB66AD0
    // Implemented from: System.Xml.Serialization.ObjectMap
    // Base method: System.Void ObjectMap::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClassMap* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Serialization::ClassMap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClassMap*, creationType>()));
    }
  }; // System.Xml.Serialization.ClassMap
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::get_IsOrderDependentMap
// Il2CppName: get_IsOrderDependentMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::ClassMap::*)()>(&System::Xml::Serialization::ClassMap::get_IsOrderDependentMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "get_IsOrderDependentMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::get_DefaultAnyElementMember
// Il2CppName: get_DefaultAnyElementMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapMemberAnyElement* (System::Xml::Serialization::ClassMap::*)()>(&System::Xml::Serialization::ClassMap::get_DefaultAnyElementMember)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "get_DefaultAnyElementMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::get_DefaultAnyAttributeMember
// Il2CppName: get_DefaultAnyAttributeMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapMemberAnyAttribute* (System::Xml::Serialization::ClassMap::*)()>(&System::Xml::Serialization::ClassMap::get_DefaultAnyAttributeMember)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "get_DefaultAnyAttributeMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::get_NamespaceDeclarations
// Il2CppName: get_NamespaceDeclarations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapMemberNamespaces* (System::Xml::Serialization::ClassMap::*)()>(&System::Xml::Serialization::ClassMap::get_NamespaceDeclarations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "get_NamespaceDeclarations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::get_AttributeMembers
// Il2CppName: get_AttributeMembers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ICollection* (System::Xml::Serialization::ClassMap::*)()>(&System::Xml::Serialization::ClassMap::get_AttributeMembers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "get_AttributeMembers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::get_ElementMembers
// Il2CppName: get_ElementMembers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ICollection* (System::Xml::Serialization::ClassMap::*)()>(&System::Xml::Serialization::ClassMap::get_ElementMembers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "get_ElementMembers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::get_AllMembers
// Il2CppName: get_AllMembers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ArrayList* (System::Xml::Serialization::ClassMap::*)()>(&System::Xml::Serialization::ClassMap::get_AllMembers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "get_AllMembers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::get_FlatLists
// Il2CppName: get_FlatLists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ArrayList* (System::Xml::Serialization::ClassMap::*)()>(&System::Xml::Serialization::ClassMap::get_FlatLists)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "get_FlatLists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::get_ListMembers
// Il2CppName: get_ListMembers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ArrayList* (System::Xml::Serialization::ClassMap::*)()>(&System::Xml::Serialization::ClassMap::get_ListMembers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "get_ListMembers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::get_XmlTextCollector
// Il2CppName: get_XmlTextCollector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapMember* (System::Xml::Serialization::ClassMap::*)()>(&System::Xml::Serialization::ClassMap::get_XmlTextCollector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "get_XmlTextCollector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::get_ReturnMember
// Il2CppName: get_ReturnMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapMember* (System::Xml::Serialization::ClassMap::*)()>(&System::Xml::Serialization::ClassMap::get_ReturnMember)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "get_ReturnMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::get_SimpleContentBaseType
// Il2CppName: get_SimpleContentBaseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Serialization::ClassMap::*)()>(&System::Xml::Serialization::ClassMap::get_SimpleContentBaseType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "get_SimpleContentBaseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::get_HasSimpleContent
// Il2CppName: get_HasSimpleContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::ClassMap::*)()>(&System::Xml::Serialization::ClassMap::get_HasSimpleContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "get_HasSimpleContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::AddMember
// Il2CppName: AddMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::ClassMap::*)(::System::Xml::Serialization::XmlTypeMapMember*)>(&System::Xml::Serialization::ClassMap::AddMember)> {
  static const MethodInfo* get() {
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlTypeMapMember")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "AddMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{member});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::RegisterFlatList
// Il2CppName: RegisterFlatList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::ClassMap::*)(::System::Xml::Serialization::XmlTypeMapMemberExpandable*)>(&System::Xml::Serialization::ClassMap::RegisterFlatList)> {
  static const MethodInfo* get() {
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlTypeMapMemberExpandable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "RegisterFlatList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{member});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::GetAttribute
// Il2CppName: GetAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapMemberAttribute* (System::Xml::Serialization::ClassMap::*)(::StringW, ::StringW)>(&System::Xml::Serialization::ClassMap::GetAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "GetAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::GetElement
// Il2CppName: GetElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapElementInfo* (System::Xml::Serialization::ClassMap::*)(::StringW, ::StringW, int)>(&System::Xml::Serialization::ClassMap::GetElement)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* minimalOrder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "GetElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns, minimalOrder});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::GetElement
// Il2CppName: GetElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapElementInfo* (System::Xml::Serialization::ClassMap::*)(::StringW, ::StringW)>(&System::Xml::Serialization::ClassMap::GetElement)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "GetElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::BuildKey
// Il2CppName: BuildKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::ClassMap::*)(::StringW, ::StringW, int)>(&System::Xml::Serialization::ClassMap::BuildKey)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* explicitOrder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "BuildKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns, explicitOrder});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::SetCanBeSimpleType
// Il2CppName: SetCanBeSimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::ClassMap::*)(bool)>(&System::Xml::Serialization::ClassMap::SetCanBeSimpleType)> {
  static const MethodInfo* get() {
    static auto* can = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::ClassMap*), "SetCanBeSimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{can});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::ClassMap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
