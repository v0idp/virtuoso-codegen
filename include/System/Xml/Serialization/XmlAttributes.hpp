// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: XmlAnyAttributeAttribute
  class XmlAnyAttributeAttribute;
  // Forward declaring type: XmlAnyElementAttributes
  class XmlAnyElementAttributes;
  // Forward declaring type: XmlArrayAttribute
  class XmlArrayAttribute;
  // Forward declaring type: XmlArrayItemAttributes
  class XmlArrayItemAttributes;
  // Forward declaring type: XmlAttributeAttribute
  class XmlAttributeAttribute;
  // Forward declaring type: XmlChoiceIdentifierAttribute
  class XmlChoiceIdentifierAttribute;
  // Forward declaring type: XmlElementAttributes
  class XmlElementAttributes;
  // Forward declaring type: XmlEnumAttribute
  class XmlEnumAttribute;
  // Forward declaring type: XmlRootAttribute
  class XmlRootAttribute;
  // Forward declaring type: XmlTextAttribute
  class XmlTextAttribute;
  // Forward declaring type: XmlTypeAttribute
  class XmlTypeAttribute;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: ICustomAttributeProvider
  class ICustomAttributeProvider;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: XmlAttributes
  class XmlAttributes;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Serialization::XmlAttributes);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Serialization::XmlAttributes*, "System.Xml.Serialization", "XmlAttributes");
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Serialization.XmlAttributes
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlAttributes : public ::Il2CppObject {
    public:
    public:
    // private System.Xml.Serialization.XmlAnyAttributeAttribute xmlAnyAttribute
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::Serialization::XmlAnyAttributeAttribute* xmlAnyAttribute;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::XmlAnyAttributeAttribute*) == 0x8);
    // private System.Xml.Serialization.XmlAnyElementAttributes xmlAnyElements
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::Serialization::XmlAnyElementAttributes* xmlAnyElements;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::XmlAnyElementAttributes*) == 0x8);
    // private System.Xml.Serialization.XmlArrayAttribute xmlArray
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::Serialization::XmlArrayAttribute* xmlArray;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::XmlArrayAttribute*) == 0x8);
    // private System.Xml.Serialization.XmlArrayItemAttributes xmlArrayItems
    // Size: 0x8
    // Offset: 0x28
    ::System::Xml::Serialization::XmlArrayItemAttributes* xmlArrayItems;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::XmlArrayItemAttributes*) == 0x8);
    // private System.Xml.Serialization.XmlAttributeAttribute xmlAttribute
    // Size: 0x8
    // Offset: 0x30
    ::System::Xml::Serialization::XmlAttributeAttribute* xmlAttribute;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::XmlAttributeAttribute*) == 0x8);
    // private System.Xml.Serialization.XmlChoiceIdentifierAttribute xmlChoiceIdentifier
    // Size: 0x8
    // Offset: 0x38
    ::System::Xml::Serialization::XmlChoiceIdentifierAttribute* xmlChoiceIdentifier;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::XmlChoiceIdentifierAttribute*) == 0x8);
    // private System.Object xmlDefaultValue
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppObject* xmlDefaultValue;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Xml.Serialization.XmlElementAttributes xmlElements
    // Size: 0x8
    // Offset: 0x48
    ::System::Xml::Serialization::XmlElementAttributes* xmlElements;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::XmlElementAttributes*) == 0x8);
    // private System.Xml.Serialization.XmlEnumAttribute xmlEnum
    // Size: 0x8
    // Offset: 0x50
    ::System::Xml::Serialization::XmlEnumAttribute* xmlEnum;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::XmlEnumAttribute*) == 0x8);
    // private System.Boolean xmlIgnore
    // Size: 0x1
    // Offset: 0x58
    bool xmlIgnore;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean xmlns
    // Size: 0x1
    // Offset: 0x59
    bool xmlns;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: xmlns and: xmlRoot
    char __padding10[0x6] = {};
    // private System.Xml.Serialization.XmlRootAttribute xmlRoot
    // Size: 0x8
    // Offset: 0x60
    ::System::Xml::Serialization::XmlRootAttribute* xmlRoot;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::XmlRootAttribute*) == 0x8);
    // private System.Xml.Serialization.XmlTextAttribute xmlText
    // Size: 0x8
    // Offset: 0x68
    ::System::Xml::Serialization::XmlTextAttribute* xmlText;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::XmlTextAttribute*) == 0x8);
    // private System.Xml.Serialization.XmlTypeAttribute xmlType
    // Size: 0x8
    // Offset: 0x70
    ::System::Xml::Serialization::XmlTypeAttribute* xmlType;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::XmlTypeAttribute*) == 0x8);
    public:
    // Get instance field reference: private System.Xml.Serialization.XmlAnyAttributeAttribute xmlAnyAttribute
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::XmlAnyAttributeAttribute*& dyn_xmlAnyAttribute();
    // Get instance field reference: private System.Xml.Serialization.XmlAnyElementAttributes xmlAnyElements
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::XmlAnyElementAttributes*& dyn_xmlAnyElements();
    // Get instance field reference: private System.Xml.Serialization.XmlArrayAttribute xmlArray
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::XmlArrayAttribute*& dyn_xmlArray();
    // Get instance field reference: private System.Xml.Serialization.XmlArrayItemAttributes xmlArrayItems
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::XmlArrayItemAttributes*& dyn_xmlArrayItems();
    // Get instance field reference: private System.Xml.Serialization.XmlAttributeAttribute xmlAttribute
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::XmlAttributeAttribute*& dyn_xmlAttribute();
    // Get instance field reference: private System.Xml.Serialization.XmlChoiceIdentifierAttribute xmlChoiceIdentifier
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::XmlChoiceIdentifierAttribute*& dyn_xmlChoiceIdentifier();
    // Get instance field reference: private System.Object xmlDefaultValue
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_xmlDefaultValue();
    // Get instance field reference: private System.Xml.Serialization.XmlElementAttributes xmlElements
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::XmlElementAttributes*& dyn_xmlElements();
    // Get instance field reference: private System.Xml.Serialization.XmlEnumAttribute xmlEnum
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::XmlEnumAttribute*& dyn_xmlEnum();
    // Get instance field reference: private System.Boolean xmlIgnore
    [[deprecated("Use field access instead!")]] bool& dyn_xmlIgnore();
    // Get instance field reference: private System.Boolean xmlns
    [[deprecated("Use field access instead!")]] bool& dyn_xmlns();
    // Get instance field reference: private System.Xml.Serialization.XmlRootAttribute xmlRoot
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::XmlRootAttribute*& dyn_xmlRoot();
    // Get instance field reference: private System.Xml.Serialization.XmlTextAttribute xmlText
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::XmlTextAttribute*& dyn_xmlText();
    // Get instance field reference: private System.Xml.Serialization.XmlTypeAttribute xmlType
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::XmlTypeAttribute*& dyn_xmlType();
    // public System.Xml.Serialization.XmlAnyAttributeAttribute get_XmlAnyAttribute()
    // Offset: 0x1185DA0
    ::System::Xml::Serialization::XmlAnyAttributeAttribute* get_XmlAnyAttribute();
    // public System.Xml.Serialization.XmlAnyElementAttributes get_XmlAnyElements()
    // Offset: 0x1185DA8
    ::System::Xml::Serialization::XmlAnyElementAttributes* get_XmlAnyElements();
    // public System.Xml.Serialization.XmlArrayAttribute get_XmlArray()
    // Offset: 0x1185DB0
    ::System::Xml::Serialization::XmlArrayAttribute* get_XmlArray();
    // public System.Xml.Serialization.XmlArrayItemAttributes get_XmlArrayItems()
    // Offset: 0x1185DB8
    ::System::Xml::Serialization::XmlArrayItemAttributes* get_XmlArrayItems();
    // public System.Xml.Serialization.XmlAttributeAttribute get_XmlAttribute()
    // Offset: 0x1185DC0
    ::System::Xml::Serialization::XmlAttributeAttribute* get_XmlAttribute();
    // public System.Xml.Serialization.XmlChoiceIdentifierAttribute get_XmlChoiceIdentifier()
    // Offset: 0x1185DC8
    ::System::Xml::Serialization::XmlChoiceIdentifierAttribute* get_XmlChoiceIdentifier();
    // public System.Object get_XmlDefaultValue()
    // Offset: 0x1185DD0
    ::Il2CppObject* get_XmlDefaultValue();
    // public System.Xml.Serialization.XmlElementAttributes get_XmlElements()
    // Offset: 0x1185DD8
    ::System::Xml::Serialization::XmlElementAttributes* get_XmlElements();
    // public System.Boolean get_XmlIgnore()
    // Offset: 0x1185DE0
    bool get_XmlIgnore();
    // public System.Boolean get_Xmlns()
    // Offset: 0x1185DE8
    bool get_Xmlns();
    // public System.Xml.Serialization.XmlRootAttribute get_XmlRoot()
    // Offset: 0x1185DF0
    ::System::Xml::Serialization::XmlRootAttribute* get_XmlRoot();
    // public System.Xml.Serialization.XmlTextAttribute get_XmlText()
    // Offset: 0x1185DF8
    ::System::Xml::Serialization::XmlTextAttribute* get_XmlText();
    // public System.Xml.Serialization.XmlTypeAttribute get_XmlType()
    // Offset: 0x1185E00
    ::System::Xml::Serialization::XmlTypeAttribute* get_XmlType();
    // System.Nullable`1<System.Int32> get_Order()
    // Offset: 0x1186D8C
    ::System::Nullable_1<int> get_Order();
    // System.Int32 get_SortableOrder()
    // Offset: 0x1186E60
    int get_SortableOrder();
    // public System.Void .ctor()
    // Offset: 0x1185684
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlAttributes* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Serialization::XmlAttributes::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlAttributes*, creationType>()));
    }
    // public System.Void .ctor(System.Reflection.ICustomAttributeProvider provider)
    // Offset: 0x118577C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlAttributes* New_ctor(::System::Reflection::ICustomAttributeProvider* provider) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Serialization::XmlAttributes::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlAttributes*, creationType>(provider)));
    }
    // System.Void AddKeyHash(System.Text.StringBuilder sb)
    // Offset: 0x11853EC
    void AddKeyHash(::System::Text::StringBuilder* sb);
  }; // System.Xml.Serialization.XmlAttributes
  #pragma pack(pop)
  static check_size<sizeof(XmlAttributes), 112 + sizeof(::System::Xml::Serialization::XmlTypeAttribute*)> __System_Xml_Serialization_XmlAttributesSizeCheck;
  static_assert(sizeof(XmlAttributes) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributes::get_XmlAnyAttribute
// Il2CppName: get_XmlAnyAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlAnyAttributeAttribute* (System::Xml::Serialization::XmlAttributes::*)()>(&System::Xml::Serialization::XmlAttributes::get_XmlAnyAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributes*), "get_XmlAnyAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributes::get_XmlAnyElements
// Il2CppName: get_XmlAnyElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlAnyElementAttributes* (System::Xml::Serialization::XmlAttributes::*)()>(&System::Xml::Serialization::XmlAttributes::get_XmlAnyElements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributes*), "get_XmlAnyElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributes::get_XmlArray
// Il2CppName: get_XmlArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlArrayAttribute* (System::Xml::Serialization::XmlAttributes::*)()>(&System::Xml::Serialization::XmlAttributes::get_XmlArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributes*), "get_XmlArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributes::get_XmlArrayItems
// Il2CppName: get_XmlArrayItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlArrayItemAttributes* (System::Xml::Serialization::XmlAttributes::*)()>(&System::Xml::Serialization::XmlAttributes::get_XmlArrayItems)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributes*), "get_XmlArrayItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributes::get_XmlAttribute
// Il2CppName: get_XmlAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlAttributeAttribute* (System::Xml::Serialization::XmlAttributes::*)()>(&System::Xml::Serialization::XmlAttributes::get_XmlAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributes*), "get_XmlAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributes::get_XmlChoiceIdentifier
// Il2CppName: get_XmlChoiceIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlChoiceIdentifierAttribute* (System::Xml::Serialization::XmlAttributes::*)()>(&System::Xml::Serialization::XmlAttributes::get_XmlChoiceIdentifier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributes*), "get_XmlChoiceIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributes::get_XmlDefaultValue
// Il2CppName: get_XmlDefaultValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Serialization::XmlAttributes::*)()>(&System::Xml::Serialization::XmlAttributes::get_XmlDefaultValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributes*), "get_XmlDefaultValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributes::get_XmlElements
// Il2CppName: get_XmlElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlElementAttributes* (System::Xml::Serialization::XmlAttributes::*)()>(&System::Xml::Serialization::XmlAttributes::get_XmlElements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributes*), "get_XmlElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributes::get_XmlIgnore
// Il2CppName: get_XmlIgnore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::XmlAttributes::*)()>(&System::Xml::Serialization::XmlAttributes::get_XmlIgnore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributes*), "get_XmlIgnore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributes::get_Xmlns
// Il2CppName: get_Xmlns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::XmlAttributes::*)()>(&System::Xml::Serialization::XmlAttributes::get_Xmlns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributes*), "get_Xmlns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributes::get_XmlRoot
// Il2CppName: get_XmlRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlRootAttribute* (System::Xml::Serialization::XmlAttributes::*)()>(&System::Xml::Serialization::XmlAttributes::get_XmlRoot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributes*), "get_XmlRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributes::get_XmlText
// Il2CppName: get_XmlText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTextAttribute* (System::Xml::Serialization::XmlAttributes::*)()>(&System::Xml::Serialization::XmlAttributes::get_XmlText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributes*), "get_XmlText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributes::get_XmlType
// Il2CppName: get_XmlType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeAttribute* (System::Xml::Serialization::XmlAttributes::*)()>(&System::Xml::Serialization::XmlAttributes::get_XmlType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributes*), "get_XmlType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributes::get_Order
// Il2CppName: get_Order
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<int> (System::Xml::Serialization::XmlAttributes::*)()>(&System::Xml::Serialization::XmlAttributes::get_Order)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributes*), "get_Order", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributes::get_SortableOrder
// Il2CppName: get_SortableOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Serialization::XmlAttributes::*)()>(&System::Xml::Serialization::XmlAttributes::get_SortableOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributes*), "get_SortableOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributes::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributes::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributes::AddKeyHash
// Il2CppName: AddKeyHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlAttributes::*)(::System::Text::StringBuilder*)>(&System::Xml::Serialization::XmlAttributes::AddKeyHash)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributes*), "AddKeyHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb});
  }
};
