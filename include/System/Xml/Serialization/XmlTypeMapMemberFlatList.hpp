// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Serialization.XmlTypeMapMemberExpandable
#include "System/Xml/Serialization/XmlTypeMapMemberExpandable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: ListMap
  class ListMap;
}
// Completed forward declares
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: XmlTypeMapMemberFlatList
  class XmlTypeMapMemberFlatList;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Serialization::XmlTypeMapMemberFlatList);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Serialization::XmlTypeMapMemberFlatList*, "System.Xml.Serialization", "XmlTypeMapMemberFlatList");
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Serialization.XmlTypeMapMemberFlatList
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlTypeMapMemberFlatList : public ::System::Xml::Serialization::XmlTypeMapMemberExpandable {
    public:
    // Writing base type padding for base size: 0x7C to desired offset: 0x80
    char ___base_padding[0x4] = {};
    public:
    // private System.Xml.Serialization.ListMap _listMap
    // Size: 0x8
    // Offset: 0x80
    ::System::Xml::Serialization::ListMap* listMap;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::ListMap*) == 0x8);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get instance field reference: private System.Xml.Serialization.ListMap _listMap
    [[deprecated]] ::System::Xml::Serialization::ListMap*& dyn__listMap();
    // public System.Xml.Serialization.ListMap get_ListMap()
    // Offset: 0x1088BC8
    ::System::Xml::Serialization::ListMap* get_ListMap();
    // public System.Void set_ListMap(System.Xml.Serialization.ListMap value)
    // Offset: 0x1088BD0
    void set_ListMap(::System::Xml::Serialization::ListMap* value);
    // public System.Void .ctor()
    // Offset: 0x1088BD8
    // Implemented from: System.Xml.Serialization.XmlTypeMapMemberExpandable
    // Base method: System.Void XmlTypeMapMemberExpandable::.ctor()
    // Base method: System.Void XmlTypeMapMemberElement::.ctor()
    // Base method: System.Void XmlTypeMapMember::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlTypeMapMemberFlatList* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Serialization::XmlTypeMapMemberFlatList::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlTypeMapMemberFlatList*, creationType>()));
    }
  }; // System.Xml.Serialization.XmlTypeMapMemberFlatList
  #pragma pack(pop)
  static check_size<sizeof(XmlTypeMapMemberFlatList), 128 + sizeof(::System::Xml::Serialization::ListMap*)> __System_Xml_Serialization_XmlTypeMapMemberFlatListSizeCheck;
  static_assert(sizeof(XmlTypeMapMemberFlatList) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Serialization::XmlTypeMapMemberFlatList::get_ListMap
// Il2CppName: get_ListMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::ListMap* (System::Xml::Serialization::XmlTypeMapMemberFlatList::*)()>(&System::Xml::Serialization::XmlTypeMapMemberFlatList::get_ListMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlTypeMapMemberFlatList*), "get_ListMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlTypeMapMemberFlatList::set_ListMap
// Il2CppName: set_ListMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlTypeMapMemberFlatList::*)(::System::Xml::Serialization::ListMap*)>(&System::Xml::Serialization::XmlTypeMapMemberFlatList::set_ListMap)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "ListMap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlTypeMapMemberFlatList*), "set_ListMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlTypeMapMemberFlatList::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
