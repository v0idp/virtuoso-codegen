// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Xml::Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: TypeData
  class TypeData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: TypeTranslator
  class TypeTranslator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Serialization::TypeTranslator);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Serialization::TypeTranslator*, "System.Xml.Serialization", "TypeTranslator");
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Serialization.TypeTranslator
  // [TokenAttribute] Offset: FFFFFFFF
  class TypeTranslator : public ::Il2CppObject {
    public:
    // Get static field: static private System.Collections.Hashtable nameCache
    static ::System::Collections::Hashtable* _get_nameCache();
    // Set static field: static private System.Collections.Hashtable nameCache
    static void _set_nameCache(::System::Collections::Hashtable* value);
    // Get static field: static private System.Collections.Hashtable primitiveTypes
    static ::System::Collections::Hashtable* _get_primitiveTypes();
    // Set static field: static private System.Collections.Hashtable primitiveTypes
    static void _set_primitiveTypes(::System::Collections::Hashtable* value);
    // Get static field: static private System.Collections.Hashtable primitiveArrayTypes
    static ::System::Collections::Hashtable* _get_primitiveArrayTypes();
    // Set static field: static private System.Collections.Hashtable primitiveArrayTypes
    static void _set_primitiveArrayTypes(::System::Collections::Hashtable* value);
    // Get static field: static private System.Collections.Hashtable nullableTypes
    static ::System::Collections::Hashtable* _get_nullableTypes();
    // Set static field: static private System.Collections.Hashtable nullableTypes
    static void _set_nullableTypes(::System::Collections::Hashtable* value);
    // static private System.Void .cctor()
    // Offset: 0xF72C48
    static void _cctor();
    // static public System.Xml.Serialization.TypeData GetTypeData(System.Type type)
    // Offset: 0xF71068
    static ::System::Xml::Serialization::TypeData* GetTypeData(::System::Type* type);
    // static public System.Xml.Serialization.TypeData GetTypeData(System.Type runtimeType, System.String xmlDataType, System.Boolean underlyingEnumType)
    // Offset: 0xF75064
    static ::System::Xml::Serialization::TypeData* GetTypeData(::System::Type* runtimeType, ::StringW xmlDataType, bool underlyingEnumType);
    // static public System.Xml.Serialization.TypeData GetPrimitiveTypeData(System.String typeName)
    // Offset: 0xF75AFC
    static ::System::Xml::Serialization::TypeData* GetPrimitiveTypeData(::StringW typeName);
    // static public System.Xml.Serialization.TypeData GetPrimitiveTypeData(System.String typeName, System.Boolean nullable)
    // Offset: 0xF75B60
    static ::System::Xml::Serialization::TypeData* GetPrimitiveTypeData(::StringW typeName, bool nullable);
    // static public System.Xml.Serialization.TypeData FindPrimitiveTypeData(System.String typeName)
    // Offset: 0xF75D8C
    static ::System::Xml::Serialization::TypeData* FindPrimitiveTypeData(::StringW typeName);
    // static public System.String GetArrayName(System.String elemName)
    // Offset: 0xF703D4
    static ::StringW GetArrayName(::StringW elemName);
    // static public System.Void ParseArrayType(System.String arrayType, out System.String type, out System.String ns, out System.String dimensions)
    // Offset: 0xF75E58
    static void ParseArrayType(::StringW arrayType, ByRef<::StringW> type, ByRef<::StringW> ns, ByRef<::StringW> dimensions);
  }; // System.Xml.Serialization.TypeTranslator
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Serialization::TypeTranslator::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::Serialization::TypeTranslator::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeTranslator*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeTranslator::GetTypeData
// Il2CppName: GetTypeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::TypeData* (*)(::System::Type*)>(&System::Xml::Serialization::TypeTranslator::GetTypeData)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeTranslator*), "GetTypeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeTranslator::GetTypeData
// Il2CppName: GetTypeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::TypeData* (*)(::System::Type*, ::StringW, bool)>(&System::Xml::Serialization::TypeTranslator::GetTypeData)> {
  static const MethodInfo* get() {
    static auto* runtimeType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* xmlDataType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* underlyingEnumType = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeTranslator*), "GetTypeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runtimeType, xmlDataType, underlyingEnumType});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeTranslator::GetPrimitiveTypeData
// Il2CppName: GetPrimitiveTypeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::TypeData* (*)(::StringW)>(&System::Xml::Serialization::TypeTranslator::GetPrimitiveTypeData)> {
  static const MethodInfo* get() {
    static auto* typeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeTranslator*), "GetPrimitiveTypeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeName});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeTranslator::GetPrimitiveTypeData
// Il2CppName: GetPrimitiveTypeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::TypeData* (*)(::StringW, bool)>(&System::Xml::Serialization::TypeTranslator::GetPrimitiveTypeData)> {
  static const MethodInfo* get() {
    static auto* typeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* nullable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeTranslator*), "GetPrimitiveTypeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeName, nullable});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeTranslator::FindPrimitiveTypeData
// Il2CppName: FindPrimitiveTypeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::TypeData* (*)(::StringW)>(&System::Xml::Serialization::TypeTranslator::FindPrimitiveTypeData)> {
  static const MethodInfo* get() {
    static auto* typeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeTranslator*), "FindPrimitiveTypeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeName});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeTranslator::GetArrayName
// Il2CppName: GetArrayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::Xml::Serialization::TypeTranslator::GetArrayName)> {
  static const MethodInfo* get() {
    static auto* elemName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeTranslator*), "GetArrayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elemName});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeTranslator::ParseArrayType
// Il2CppName: ParseArrayType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ByRef<::StringW>, ByRef<::StringW>, ByRef<::StringW>)>(&System::Xml::Serialization::TypeTranslator::ParseArrayType)> {
  static const MethodInfo* get() {
    static auto* arrayType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* dimensions = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeTranslator*), "ParseArrayType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arrayType, type, ns, dimensions});
  }
};
