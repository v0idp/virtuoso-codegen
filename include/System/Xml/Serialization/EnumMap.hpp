// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Serialization.ObjectMap
#include "System/Xml/Serialization/ObjectMap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Serialization
namespace System::Xml::Serialization {
}
// Completed forward declares
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: EnumMap
  class EnumMap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Serialization::EnumMap);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Serialization::EnumMap*, "System.Xml.Serialization", "EnumMap");
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Serialization.EnumMap
  // [TokenAttribute] Offset: FFFFFFFF
  class EnumMap : public ::System::Xml::Serialization::ObjectMap {
    public:
    // Nested type: ::System::Xml::Serialization::EnumMap::EnumMapMember
    class EnumMapMember;
    public:
    // private readonly System.Xml.Serialization.EnumMap/System.Xml.Serialization.EnumMapMember[] _members
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::System::Xml::Serialization::EnumMap::EnumMapMember*> members;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::Serialization::EnumMap::EnumMapMember*>) == 0x8);
    // private readonly System.Boolean _isFlags
    // Size: 0x1
    // Offset: 0x18
    bool isFlags;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isFlags and: enumNames
    char __padding1[0x7] = {};
    // private readonly System.String[] _enumNames
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::StringW> enumNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private readonly System.String[] _xmlNames
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::StringW> xmlNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private readonly System.Int64[] _values
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<int64_t> values;
    // Field size check
    static_assert(sizeof(::ArrayW<int64_t>) == 0x8);
    public:
    // Get instance field reference: private readonly System.Xml.Serialization.EnumMap/System.Xml.Serialization.EnumMapMember[] _members
    [[deprecated]] ::ArrayW<::System::Xml::Serialization::EnumMap::EnumMapMember*>& dyn__members();
    // Get instance field reference: private readonly System.Boolean _isFlags
    [[deprecated]] bool& dyn__isFlags();
    // Get instance field reference: private readonly System.String[] _enumNames
    [[deprecated]] ::ArrayW<::StringW>& dyn__enumNames();
    // Get instance field reference: private readonly System.String[] _xmlNames
    [[deprecated]] ::ArrayW<::StringW>& dyn__xmlNames();
    // Get instance field reference: private readonly System.Int64[] _values
    [[deprecated]] ::ArrayW<int64_t>& dyn__values();
    // public System.Boolean get_IsFlags()
    // Offset: 0xAED9BC
    bool get_IsFlags();
    // public System.String[] get_EnumNames()
    // Offset: 0xAED9C4
    ::ArrayW<::StringW> get_EnumNames();
    // public System.String[] get_XmlNames()
    // Offset: 0xAED9CC
    ::ArrayW<::StringW> get_XmlNames();
    // public System.Int64[] get_Values()
    // Offset: 0xAED9D4
    ::ArrayW<int64_t> get_Values();
    // public System.Void .ctor(System.Xml.Serialization.EnumMap/System.Xml.Serialization.EnumMapMember[] members, System.Boolean isFlags)
    // Offset: 0xAED810
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EnumMap* New_ctor(::ArrayW<::System::Xml::Serialization::EnumMap::EnumMapMember*> members, bool isFlags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Serialization::EnumMap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EnumMap*, creationType>(members, isFlags)));
    }
    // public System.String GetXmlName(System.String typeName, System.Object enumValue)
    // Offset: 0xAED9DC
    ::StringW GetXmlName(::StringW typeName, ::Il2CppObject* enumValue);
    // public System.String GetEnumName(System.String typeName, System.String xmlName)
    // Offset: 0xAEDDA4
    ::StringW GetEnumName(::StringW typeName, ::StringW xmlName);
  }; // System.Xml.Serialization.EnumMap
  #pragma pack(pop)
  static check_size<sizeof(EnumMap), 48 + sizeof(::ArrayW<int64_t>)> __System_Xml_Serialization_EnumMapSizeCheck;
  static_assert(sizeof(EnumMap) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Serialization::EnumMap::get_IsFlags
// Il2CppName: get_IsFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::EnumMap::*)()>(&System::Xml::Serialization::EnumMap::get_IsFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::EnumMap*), "get_IsFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::EnumMap::get_EnumNames
// Il2CppName: get_EnumNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (System::Xml::Serialization::EnumMap::*)()>(&System::Xml::Serialization::EnumMap::get_EnumNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::EnumMap*), "get_EnumNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::EnumMap::get_XmlNames
// Il2CppName: get_XmlNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (System::Xml::Serialization::EnumMap::*)()>(&System::Xml::Serialization::EnumMap::get_XmlNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::EnumMap*), "get_XmlNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::EnumMap::get_Values
// Il2CppName: get_Values
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int64_t> (System::Xml::Serialization::EnumMap::*)()>(&System::Xml::Serialization::EnumMap::get_Values)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::EnumMap*), "get_Values", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::EnumMap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Serialization::EnumMap::GetXmlName
// Il2CppName: GetXmlName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::EnumMap::*)(::StringW, ::Il2CppObject*)>(&System::Xml::Serialization::EnumMap::GetXmlName)> {
  static const MethodInfo* get() {
    static auto* typeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* enumValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::EnumMap*), "GetXmlName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeName, enumValue});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::EnumMap::GetEnumName
// Il2CppName: GetEnumName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::EnumMap::*)(::StringW, ::StringW)>(&System::Xml::Serialization::EnumMap::GetEnumName)> {
  static const MethodInfo* get() {
    static auto* typeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* xmlName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::EnumMap*), "GetEnumName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeName, xmlName});
  }
};
