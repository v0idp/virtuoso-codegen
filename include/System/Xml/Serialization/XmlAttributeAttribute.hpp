// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Xml.Schema.XmlSchemaForm
#include "System/Xml/Schema/XmlSchemaForm.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: XmlAttributeAttribute
  class XmlAttributeAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Serialization::XmlAttributeAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Serialization::XmlAttributeAttribute*, "System.Xml.Serialization", "XmlAttributeAttribute");
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Serialization.XmlAttributeAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: 6A4504
  class XmlAttributeAttribute : public ::System::Attribute {
    public:
    public:
    // private System.String attributeName
    // Size: 0x8
    // Offset: 0x10
    ::StringW attributeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String dataType
    // Size: 0x8
    // Offset: 0x18
    ::StringW dataType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Type type
    // Size: 0x8
    // Offset: 0x20
    ::System::Type* type;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private System.Xml.Schema.XmlSchemaForm form
    // Size: 0x4
    // Offset: 0x28
    ::System::Xml::Schema::XmlSchemaForm form;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaForm) == 0x4);
    // Padding between fields: form and: ns
    char __padding3[0x4] = {};
    // private System.String ns
    // Size: 0x8
    // Offset: 0x30
    ::StringW ns;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.String attributeName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_attributeName();
    // Get instance field reference: private System.String dataType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_dataType();
    // Get instance field reference: private System.Type type
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_type();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaForm form
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaForm& dyn_form();
    // Get instance field reference: private System.String ns
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ns();
    // public System.String get_AttributeName()
    // Offset: 0x1182C64
    ::StringW get_AttributeName();
    // public System.String get_DataType()
    // Offset: 0x1182CBC
    ::StringW get_DataType();
    // public System.Void set_DataType(System.String value)
    // Offset: 0x1182D14
    void set_DataType(::StringW value);
    // public System.Xml.Schema.XmlSchemaForm get_Form()
    // Offset: 0x1182D1C
    ::System::Xml::Schema::XmlSchemaForm get_Form();
    // public System.String get_Namespace()
    // Offset: 0x1182D24
    ::StringW get_Namespace();
    // public System.Void .ctor(System.String attributeName)
    // Offset: 0x1182C38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlAttributeAttribute* New_ctor(::StringW attributeName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Serialization::XmlAttributeAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlAttributeAttribute*, creationType>(attributeName)));
    }
    // System.Void AddKeyHash(System.Text.StringBuilder sb)
    // Offset: 0x1182D2C
    void AddKeyHash(::System::Text::StringBuilder* sb);
  }; // System.Xml.Serialization.XmlAttributeAttribute
  #pragma pack(pop)
  static check_size<sizeof(XmlAttributeAttribute), 48 + sizeof(::StringW)> __System_Xml_Serialization_XmlAttributeAttributeSizeCheck;
  static_assert(sizeof(XmlAttributeAttribute) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributeAttribute::get_AttributeName
// Il2CppName: get_AttributeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::XmlAttributeAttribute::*)()>(&System::Xml::Serialization::XmlAttributeAttribute::get_AttributeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributeAttribute*), "get_AttributeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributeAttribute::get_DataType
// Il2CppName: get_DataType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::XmlAttributeAttribute::*)()>(&System::Xml::Serialization::XmlAttributeAttribute::get_DataType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributeAttribute*), "get_DataType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributeAttribute::set_DataType
// Il2CppName: set_DataType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlAttributeAttribute::*)(::StringW)>(&System::Xml::Serialization::XmlAttributeAttribute::set_DataType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributeAttribute*), "set_DataType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributeAttribute::get_Form
// Il2CppName: get_Form
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaForm (System::Xml::Serialization::XmlAttributeAttribute::*)()>(&System::Xml::Serialization::XmlAttributeAttribute::get_Form)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributeAttribute*), "get_Form", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributeAttribute::get_Namespace
// Il2CppName: get_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::XmlAttributeAttribute::*)()>(&System::Xml::Serialization::XmlAttributeAttribute::get_Namespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributeAttribute*), "get_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributeAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Serialization::XmlAttributeAttribute::AddKeyHash
// Il2CppName: AddKeyHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlAttributeAttribute::*)(::System::Text::StringBuilder*)>(&System::Xml::Serialization::XmlAttributeAttribute::AddKeyHash)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlAttributeAttribute*), "AddKeyHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb});
  }
};
