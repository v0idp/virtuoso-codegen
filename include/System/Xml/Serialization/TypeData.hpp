// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Serialization.SchemaTypes
#include "System/Xml/Serialization/SchemaTypes.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: InvalidOperationException
  class InvalidOperationException;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaPatternFacet
  class XmlSchemaPatternFacet;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
  // Forward declaring type: PropertyInfo
  class PropertyInfo;
}
// Completed forward declares
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: TypeData
  class TypeData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Serialization::TypeData);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Serialization::TypeData*, "System.Xml.Serialization", "TypeData");
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Size: 0x62
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Serialization.TypeData
  // [TokenAttribute] Offset: FFFFFFFF
  class TypeData : public ::Il2CppObject {
    public:
    public:
    // private System.Type type
    // Size: 0x8
    // Offset: 0x10
    ::System::Type* type;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private System.String elementName
    // Size: 0x8
    // Offset: 0x18
    ::StringW elementName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.Serialization.SchemaTypes sType
    // Size: 0x4
    // Offset: 0x20
    ::System::Xml::Serialization::SchemaTypes sType;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::SchemaTypes) == 0x4);
    // Padding between fields: sType and: listItemType
    char __padding2[0x4] = {};
    // private System.Type listItemType
    // Size: 0x8
    // Offset: 0x28
    ::System::Type* listItemType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private System.String typeName
    // Size: 0x8
    // Offset: 0x30
    ::StringW typeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String fullTypeName
    // Size: 0x8
    // Offset: 0x38
    ::StringW fullTypeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.Serialization.TypeData listItemTypeData
    // Size: 0x8
    // Offset: 0x40
    ::System::Xml::Serialization::TypeData* listItemTypeData;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::TypeData*) == 0x8);
    // private System.Xml.Serialization.TypeData mappedType
    // Size: 0x8
    // Offset: 0x48
    ::System::Xml::Serialization::TypeData* mappedType;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::TypeData*) == 0x8);
    // private System.Xml.Schema.XmlSchemaPatternFacet facet
    // Size: 0x8
    // Offset: 0x50
    ::System::Xml::Schema::XmlSchemaPatternFacet* facet;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaPatternFacet*) == 0x8);
    // private System.Reflection.MethodInfo typeConvertor
    // Size: 0x8
    // Offset: 0x58
    ::System::Reflection::MethodInfo* typeConvertor;
    // Field size check
    static_assert(sizeof(::System::Reflection::MethodInfo*) == 0x8);
    // private System.Boolean hasPublicConstructor
    // Size: 0x1
    // Offset: 0x60
    bool hasPublicConstructor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean nullableOverride
    // Size: 0x1
    // Offset: 0x61
    bool nullableOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private System.String[] keywords
    static ::ArrayW<::StringW> _get_keywords();
    // Set static field: static private System.String[] keywords
    static void _set_keywords(::ArrayW<::StringW> value);
    // Get instance field reference: private System.Type type
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_type();
    // Get instance field reference: private System.String elementName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_elementName();
    // Get instance field reference: private System.Xml.Serialization.SchemaTypes sType
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::SchemaTypes& dyn_sType();
    // Get instance field reference: private System.Type listItemType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_listItemType();
    // Get instance field reference: private System.String typeName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_typeName();
    // Get instance field reference: private System.String fullTypeName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_fullTypeName();
    // Get instance field reference: private System.Xml.Serialization.TypeData listItemTypeData
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::TypeData*& dyn_listItemTypeData();
    // Get instance field reference: private System.Xml.Serialization.TypeData mappedType
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::TypeData*& dyn_mappedType();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaPatternFacet facet
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaPatternFacet*& dyn_facet();
    // Get instance field reference: private System.Reflection.MethodInfo typeConvertor
    [[deprecated("Use field access instead!")]] ::System::Reflection::MethodInfo*& dyn_typeConvertor();
    // Get instance field reference: private System.Boolean hasPublicConstructor
    [[deprecated("Use field access instead!")]] bool& dyn_hasPublicConstructor();
    // Get instance field reference: private System.Boolean nullableOverride
    [[deprecated("Use field access instead!")]] bool& dyn_nullableOverride();
    // public System.String get_TypeName()
    // Offset: 0xF70678
    ::StringW get_TypeName();
    // public System.String get_XmlType()
    // Offset: 0xF70680
    ::StringW get_XmlType();
    // public System.Type get_Type()
    // Offset: 0xF70688
    ::System::Type* get_Type();
    // public System.String get_FullTypeName()
    // Offset: 0xF70690
    ::StringW get_FullTypeName();
    // public System.Xml.Serialization.SchemaTypes get_SchemaType()
    // Offset: 0xF70698
    ::System::Xml::Serialization::SchemaTypes get_SchemaType();
    // public System.Boolean get_IsListType()
    // Offset: 0xF702F8
    bool get_IsListType();
    // public System.Boolean get_IsComplexType()
    // Offset: 0xF706A0
    bool get_IsComplexType();
    // public System.Boolean get_IsValueType()
    // Offset: 0xF706D8
    bool get_IsValueType();
    // public System.Boolean get_IsNullable()
    // Offset: 0xF70778
    bool get_IsNullable();
    // public System.Void set_IsNullable(System.Boolean value)
    // Offset: 0xF708AC
    void set_IsNullable(bool value);
    // public System.Xml.Serialization.TypeData get_ListItemTypeData()
    // Offset: 0xF70308
    ::System::Xml::Serialization::TypeData* get_ListItemTypeData();
    // public System.Type get_ListItemType()
    // Offset: 0xF708B8
    ::System::Type* get_ListItemType();
    // public System.Boolean get_IsXsdType()
    // Offset: 0xF706C8
    bool get_IsXsdType();
    // public System.Boolean get_HasPublicConstructor()
    // Offset: 0xF71564
    bool get_HasPublicConstructor();
    // public System.Void .ctor(System.Type type, System.String elementName, System.Boolean isPrimitive)
    // Offset: 0xF6FF10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TypeData* New_ctor(::System::Type* type, ::StringW elementName, bool isPrimitive) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Serialization::TypeData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TypeData*, creationType>(type, elementName, isPrimitive)));
    }
    // public System.Void .ctor(System.Type type, System.String elementName, System.Boolean isPrimitive, System.Xml.Serialization.TypeData mappedType, System.Xml.Schema.XmlSchemaPatternFacet facet)
    // Offset: 0xF6FF20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TypeData* New_ctor(::System::Type* type, ::StringW elementName, bool isPrimitive, ::System::Xml::Serialization::TypeData* mappedType, ::System::Xml::Schema::XmlSchemaPatternFacet* facet) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Serialization::TypeData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TypeData*, creationType>(type, elementName, isPrimitive, mappedType, facet)));
    }
    // static private System.Void .cctor()
    // Offset: 0xF7156C
    static void _cctor();
    // private System.Void LookupTypeConvertor()
    // Offset: 0xF704F8
    void LookupTypeConvertor();
    // System.Void ConvertForAssignment(ref System.Object value)
    // Offset: 0xF7059C
    void ConvertForAssignment(ByRef<::Il2CppObject*> value);
    // static public System.Reflection.PropertyInfo GetIndexerProperty(System.Type collectionType)
    // Offset: 0xF712F0
    static ::System::Reflection::PropertyInfo* GetIndexerProperty(::System::Type* collectionType);
    // static private System.InvalidOperationException CreateMissingAddMethodException(System.Type type, System.String inheritFrom, System.Type argumentType)
    // Offset: 0xF7144C
    static ::System::InvalidOperationException* CreateMissingAddMethodException(::System::Type* type, ::StringW inheritFrom, ::System::Type* argumentType);
    // static System.Type GetGenericListItemType(System.Type type)
    // Offset: 0xF710D0
    static ::System::Type* GetGenericListItemType(::System::Type* type);
  }; // System.Xml.Serialization.TypeData
  #pragma pack(pop)
  static check_size<sizeof(TypeData), 97 + sizeof(bool)> __System_Xml_Serialization_TypeDataSizeCheck;
  static_assert(sizeof(TypeData) == 0x62);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::get_TypeName
// Il2CppName: get_TypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::TypeData::*)()>(&System::Xml::Serialization::TypeData::get_TypeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "get_TypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::get_XmlType
// Il2CppName: get_XmlType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::TypeData::*)()>(&System::Xml::Serialization::TypeData::get_XmlType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "get_XmlType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Xml::Serialization::TypeData::*)()>(&System::Xml::Serialization::TypeData::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::get_FullTypeName
// Il2CppName: get_FullTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::TypeData::*)()>(&System::Xml::Serialization::TypeData::get_FullTypeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "get_FullTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::get_SchemaType
// Il2CppName: get_SchemaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::SchemaTypes (System::Xml::Serialization::TypeData::*)()>(&System::Xml::Serialization::TypeData::get_SchemaType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "get_SchemaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::get_IsListType
// Il2CppName: get_IsListType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::TypeData::*)()>(&System::Xml::Serialization::TypeData::get_IsListType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "get_IsListType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::get_IsComplexType
// Il2CppName: get_IsComplexType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::TypeData::*)()>(&System::Xml::Serialization::TypeData::get_IsComplexType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "get_IsComplexType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::get_IsValueType
// Il2CppName: get_IsValueType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::TypeData::*)()>(&System::Xml::Serialization::TypeData::get_IsValueType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "get_IsValueType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::get_IsNullable
// Il2CppName: get_IsNullable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::TypeData::*)()>(&System::Xml::Serialization::TypeData::get_IsNullable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "get_IsNullable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::set_IsNullable
// Il2CppName: set_IsNullable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::TypeData::*)(bool)>(&System::Xml::Serialization::TypeData::set_IsNullable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "set_IsNullable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::get_ListItemTypeData
// Il2CppName: get_ListItemTypeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::TypeData* (System::Xml::Serialization::TypeData::*)()>(&System::Xml::Serialization::TypeData::get_ListItemTypeData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "get_ListItemTypeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::get_ListItemType
// Il2CppName: get_ListItemType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Xml::Serialization::TypeData::*)()>(&System::Xml::Serialization::TypeData::get_ListItemType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "get_ListItemType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::get_IsXsdType
// Il2CppName: get_IsXsdType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::TypeData::*)()>(&System::Xml::Serialization::TypeData::get_IsXsdType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "get_IsXsdType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::get_HasPublicConstructor
// Il2CppName: get_HasPublicConstructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::TypeData::*)()>(&System::Xml::Serialization::TypeData::get_HasPublicConstructor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "get_HasPublicConstructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::Serialization::TypeData::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::LookupTypeConvertor
// Il2CppName: LookupTypeConvertor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::TypeData::*)()>(&System::Xml::Serialization::TypeData::LookupTypeConvertor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "LookupTypeConvertor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::ConvertForAssignment
// Il2CppName: ConvertForAssignment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::TypeData::*)(ByRef<::Il2CppObject*>)>(&System::Xml::Serialization::TypeData::ConvertForAssignment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "ConvertForAssignment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::GetIndexerProperty
// Il2CppName: GetIndexerProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::PropertyInfo* (*)(::System::Type*)>(&System::Xml::Serialization::TypeData::GetIndexerProperty)> {
  static const MethodInfo* get() {
    static auto* collectionType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "GetIndexerProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collectionType});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::CreateMissingAddMethodException
// Il2CppName: CreateMissingAddMethodException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::InvalidOperationException* (*)(::System::Type*, ::StringW, ::System::Type*)>(&System::Xml::Serialization::TypeData::CreateMissingAddMethodException)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* inheritFrom = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* argumentType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "CreateMissingAddMethodException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, inheritFrom, argumentType});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::TypeData::GetGenericListItemType
// Il2CppName: GetGenericListItemType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*)>(&System::Xml::Serialization::TypeData::GetGenericListItemType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::TypeData*), "GetGenericListItemType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
