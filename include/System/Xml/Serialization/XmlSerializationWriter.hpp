// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Serialization.XmlSerializationGeneratedCode
#include "System/Xml/Serialization/XmlSerializationGeneratedCode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: XmlSerializerNamespaces
  class XmlSerializerNamespaces;
  // Forward declaring type: XmlSerializationWriteCallback
  class XmlSerializationWriteCallback;
  // Forward declaring type: TypeData
  class TypeData;
  // Forward declaring type: IXmlSerializable
  class IXmlSerializable;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: ObjectIDGenerator
  class ObjectIDGenerator;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: Queue
  class Queue;
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: ICollection
  class ICollection;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlWriter
  class XmlWriter;
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
  // Forward declaring type: XmlNode
  class XmlNode;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: XmlSerializationWriter
  class XmlSerializationWriter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Serialization::XmlSerializationWriter);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Serialization::XmlSerializationWriter*, "System.Xml.Serialization", "XmlSerializationWriter");
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Serialization.XmlSerializationWriter
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSerializationWriter : public ::System::Xml::Serialization::XmlSerializationGeneratedCode {
    public:
    // Nested type: ::System::Xml::Serialization::XmlSerializationWriter::WriteCallbackInfo
    class WriteCallbackInfo;
    public:
    // private System.Runtime.Serialization.ObjectIDGenerator idGenerator
    // Size: 0x8
    // Offset: 0x10
    ::System::Runtime::Serialization::ObjectIDGenerator* idGenerator;
    // Field size check
    static_assert(sizeof(::System::Runtime::Serialization::ObjectIDGenerator*) == 0x8);
    // private System.Int32 qnameCount
    // Size: 0x4
    // Offset: 0x18
    int qnameCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean topLevelElement
    // Size: 0x1
    // Offset: 0x1C
    bool topLevelElement;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: topLevelElement and: namespaces
    char __padding2[0x3] = {};
    // private System.Collections.ArrayList namespaces
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::ArrayList* namespaces;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Xml.XmlWriter writer
    // Size: 0x8
    // Offset: 0x28
    ::System::Xml::XmlWriter* writer;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlWriter*) == 0x8);
    // private System.Collections.Queue referencedElements
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Queue* referencedElements;
    // Field size check
    static_assert(sizeof(::System::Collections::Queue*) == 0x8);
    // private System.Collections.Hashtable callbacks
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Hashtable* callbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable serializedObjects
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Hashtable* serializedObjects;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    public:
    // Get instance field reference: private System.Runtime.Serialization.ObjectIDGenerator idGenerator
    [[deprecated("Use field access instead!")]] ::System::Runtime::Serialization::ObjectIDGenerator*& dyn_idGenerator();
    // Get instance field reference: private System.Int32 qnameCount
    [[deprecated("Use field access instead!")]] int& dyn_qnameCount();
    // Get instance field reference: private System.Boolean topLevelElement
    [[deprecated("Use field access instead!")]] bool& dyn_topLevelElement();
    // Get instance field reference: private System.Collections.ArrayList namespaces
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_namespaces();
    // Get instance field reference: private System.Xml.XmlWriter writer
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlWriter*& dyn_writer();
    // Get instance field reference: private System.Collections.Queue referencedElements
    [[deprecated("Use field access instead!")]] ::System::Collections::Queue*& dyn_referencedElements();
    // Get instance field reference: private System.Collections.Hashtable callbacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_callbacks();
    // Get instance field reference: private System.Collections.Hashtable serializedObjects
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_serializedObjects();
    // protected System.Xml.XmlWriter get_Writer()
    // Offset: 0x1324920
    ::System::Xml::XmlWriter* get_Writer();
    // System.Void Initialize(System.Xml.XmlWriter writer, System.Xml.Serialization.XmlSerializerNamespaces nss)
    // Offset: 0x13246F0
    void Initialize(::System::Xml::XmlWriter* writer, ::System::Xml::Serialization::XmlSerializerNamespaces* nss);
    // protected System.Void AddWriteCallback(System.Type type, System.String typeName, System.String typeNs, System.Xml.Serialization.XmlSerializationWriteCallback callback)
    // Offset: 0x1324928
    void AddWriteCallback(::System::Type* type, ::StringW typeName, ::StringW typeNs, ::System::Xml::Serialization::XmlSerializationWriteCallback* callback);
    // protected System.Exception CreateUnknownAnyElementException(System.String name, System.String ns)
    // Offset: 0x1324A00
    ::System::Exception* CreateUnknownAnyElementException(::StringW name, ::StringW ns);
    // protected System.Exception CreateUnknownTypeException(System.Object o)
    // Offset: 0x1324A9C
    ::System::Exception* CreateUnknownTypeException(::Il2CppObject* o);
    // protected System.Exception CreateUnknownTypeException(System.Type type)
    // Offset: 0x1324AC4
    ::System::Exception* CreateUnknownTypeException(::System::Type* type);
    // protected System.String FromXmlQualifiedName(System.Xml.XmlQualifiedName xmlQualifiedName)
    // Offset: 0x1324B50
    ::StringW FromXmlQualifiedName(::System::Xml::XmlQualifiedName* xmlQualifiedName);
    // private System.String GetId(System.Object o, System.Boolean addToReferencesList)
    // Offset: 0x1324CF4
    ::StringW GetId(::Il2CppObject* o, bool addToReferencesList);
    // private System.Boolean AlreadyQueued(System.Object ob)
    // Offset: 0x1324E1C
    bool AlreadyQueued(::Il2CppObject* ob);
    // private System.String GetNamespacePrefix(System.String ns)
    // Offset: 0x1324E5C
    ::StringW GetNamespacePrefix(::StringW ns);
    // private System.String GetQualifiedName(System.String name, System.String ns)
    // Offset: 0x1324C24
    ::StringW GetQualifiedName(::StringW name, ::StringW ns);
    // protected System.Void InitCallbacks()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void InitCallbacks();
    // protected System.Void TopLevelElement()
    // Offset: 0x1324FA8
    void TopLevelElement();
    // protected System.Void WriteAttribute(System.String localName, System.String ns, System.String value)
    // Offset: 0x1324FB4
    void WriteAttribute(::StringW localName, ::StringW ns, ::StringW value);
    // protected System.Void WriteAttribute(System.String prefix, System.String localName, System.String ns, System.String value)
    // Offset: 0x1324F84
    void WriteAttribute(::StringW prefix, ::StringW localName, ::StringW ns, ::StringW value);
    // private System.Void WriteXmlNode(System.Xml.XmlNode node)
    // Offset: 0x1324FC8
    void WriteXmlNode(::System::Xml::XmlNode* node);
    // protected System.Void WriteElementEncoded(System.Xml.XmlNode node, System.String name, System.String ns, System.Boolean isNullable, System.Boolean any)
    // Offset: 0x1325074
    void WriteElementEncoded(::System::Xml::XmlNode* node, ::StringW name, ::StringW ns, bool isNullable, bool any);
    // protected System.Void WriteElementLiteral(System.Xml.XmlNode node, System.String name, System.String ns, System.Boolean isNullable, System.Boolean any)
    // Offset: 0x1325264
    void WriteElementLiteral(::System::Xml::XmlNode* node, ::StringW name, ::StringW ns, bool isNullable, bool any);
    // protected System.Void WriteElementQualifiedName(System.String localName, System.String ns, System.Xml.XmlQualifiedName value)
    // Offset: 0x1325458
    void WriteElementQualifiedName(::StringW localName, ::StringW ns, ::System::Xml::XmlQualifiedName* value);
    // protected System.Void WriteElementQualifiedName(System.String localName, System.String ns, System.Xml.XmlQualifiedName value, System.Xml.XmlQualifiedName xsiType)
    // Offset: 0x1325460
    void WriteElementQualifiedName(::StringW localName, ::StringW ns, ::System::Xml::XmlQualifiedName* value, ::System::Xml::XmlQualifiedName* xsiType);
    // protected System.Void WriteElementString(System.String localName, System.String ns, System.String value)
    // Offset: 0x13256AC
    void WriteElementString(::StringW localName, ::StringW ns, ::StringW value);
    // protected System.Void WriteElementString(System.String localName, System.String ns, System.String value, System.Xml.XmlQualifiedName xsiType)
    // Offset: 0x13256B4
    void WriteElementString(::StringW localName, ::StringW ns, ::StringW value, ::System::Xml::XmlQualifiedName* xsiType);
    // protected System.Void WriteEndElement()
    // Offset: 0x132568C
    void WriteEndElement();
    // protected System.Void WriteEndElement(System.Object o)
    // Offset: 0x132581C
    void WriteEndElement(::Il2CppObject* o);
    // protected System.Void WriteNamespaceDeclarations(System.Xml.Serialization.XmlSerializerNamespaces xmlns)
    // Offset: 0x1325868
    void WriteNamespaceDeclarations(::System::Xml::Serialization::XmlSerializerNamespaces* xmlns);
    // protected System.Void WriteNullableQualifiedNameEncoded(System.String name, System.String ns, System.Xml.XmlQualifiedName value, System.Xml.XmlQualifiedName xsiType)
    // Offset: 0x1325CBC
    void WriteNullableQualifiedNameEncoded(::StringW name, ::StringW ns, ::System::Xml::XmlQualifiedName* value, ::System::Xml::XmlQualifiedName* xsiType);
    // protected System.Void WriteNullableQualifiedNameLiteral(System.String name, System.String ns, System.Xml.XmlQualifiedName value)
    // Offset: 0x1325D80
    void WriteNullableQualifiedNameLiteral(::StringW name, ::StringW ns, ::System::Xml::XmlQualifiedName* value);
    // protected System.Void WriteNullableStringEncoded(System.String name, System.String ns, System.String value, System.Xml.XmlQualifiedName xsiType)
    // Offset: 0x1325E40
    void WriteNullableStringEncoded(::StringW name, ::StringW ns, ::StringW value, ::System::Xml::XmlQualifiedName* xsiType);
    // protected System.Void WriteNullableStringLiteral(System.String name, System.String ns, System.String value)
    // Offset: 0x1325E4C
    void WriteNullableStringLiteral(::StringW name, ::StringW ns, ::StringW value);
    // protected System.Void WriteNullTagEncoded(System.String name, System.String ns)
    // Offset: 0x13251A0
    void WriteNullTagEncoded(::StringW name, ::StringW ns);
    // protected System.Void WriteNullTagLiteral(System.String name, System.String ns)
    // Offset: 0x1325390
    void WriteNullTagLiteral(::StringW name, ::StringW ns);
    // protected System.Void WritePotentiallyReferencingElement(System.String n, System.String ns, System.Object o, System.Type ambientType, System.Boolean suppressReference, System.Boolean isNullable)
    // Offset: 0x1325E5C
    void WritePotentiallyReferencingElement(::StringW n, ::StringW ns, ::Il2CppObject* o, ::System::Type* ambientType, bool suppressReference, bool isNullable);
    // protected System.Void WriteReferencedElements()
    // Offset: 0x13264CC
    void WriteReferencedElements();
    // private System.Boolean IsPrimitiveArray(System.Xml.Serialization.TypeData td)
    // Offset: 0x13263C4
    bool IsPrimitiveArray(::System::Xml::Serialization::TypeData* td);
    // private System.Void WriteArray(System.Object o, System.Xml.Serialization.TypeData td)
    // Offset: 0x13266E8
    void WriteArray(::Il2CppObject* o, ::System::Xml::Serialization::TypeData* td);
    // protected System.Void WriteReferencingElement(System.String n, System.String ns, System.Object o, System.Boolean isNullable)
    // Offset: 0x13269E0
    void WriteReferencingElement(::StringW n, ::StringW ns, ::Il2CppObject* o, bool isNullable);
    // private System.Void CheckReferenceQueue()
    // Offset: 0x1326348
    void CheckReferenceQueue();
    // protected System.Void WriteSerializable(System.Xml.Serialization.IXmlSerializable serializable, System.String name, System.String ns, System.Boolean isNullable)
    // Offset: 0x1326B4C
    void WriteSerializable(::System::Xml::Serialization::IXmlSerializable* serializable, ::StringW name, ::StringW ns, bool isNullable);
    // protected System.Void WriteSerializable(System.Xml.Serialization.IXmlSerializable serializable, System.String name, System.String ns, System.Boolean isNullable, System.Boolean wrapped)
    // Offset: 0x1326B58
    void WriteSerializable(::System::Xml::Serialization::IXmlSerializable* serializable, ::StringW name, ::StringW ns, bool isNullable, bool wrapped);
    // protected System.Void WriteStartDocument()
    // Offset: 0x1326CB0
    void WriteStartDocument();
    // protected System.Void WriteStartElement(System.String name, System.String ns)
    // Offset: 0x1325594
    void WriteStartElement(::StringW name, ::StringW ns);
    // protected System.Void WriteStartElement(System.String name, System.String ns, System.Boolean writePrefixed)
    // Offset: 0x1326338
    void WriteStartElement(::StringW name, ::StringW ns, bool writePrefixed);
    // protected System.Void WriteStartElement(System.String name, System.String ns, System.Object o)
    // Offset: 0x1326D14
    void WriteStartElement(::StringW name, ::StringW ns, ::Il2CppObject* o);
    // protected System.Void WriteStartElement(System.String name, System.String ns, System.Object o, System.Boolean writePrefixed)
    // Offset: 0x1326D08
    void WriteStartElement(::StringW name, ::StringW ns, ::Il2CppObject* o, bool writePrefixed);
    // private System.Void WriteStartElement(System.String name, System.String ns, System.Object o, System.Boolean writePrefixed, System.Collections.ICollection namespaces)
    // Offset: 0x1326D20
    void WriteStartElement(::StringW name, ::StringW ns, ::Il2CppObject* o, bool writePrefixed, ::System::Collections::ICollection* namespaces);
    // protected System.Void WriteTypedPrimitive(System.String name, System.String ns, System.Object o, System.Boolean xsiType)
    // Offset: 0x13275BC
    void WriteTypedPrimitive(::StringW name, ::StringW ns, ::Il2CppObject* o, bool xsiType);
    // protected System.Void WriteValue(System.String value)
    // Offset: 0x13278B4
    void WriteValue(::StringW value);
    // protected System.Void WriteXmlAttribute(System.Xml.XmlNode node, System.Object container)
    // Offset: 0x13278E0
    void WriteXmlAttribute(::System::Xml::XmlNode* node, ::Il2CppObject* container);
    // protected System.Void WriteXsiType(System.String name, System.String ns)
    // Offset: 0x13255A4
    void WriteXsiType(::StringW name, ::StringW ns);
    // protected System.Void .ctor()
    // Offset: 0x1324684
    // Implemented from: System.Xml.Serialization.XmlSerializationGeneratedCode
    // Base method: System.Void XmlSerializationGeneratedCode::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSerializationWriter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Serialization::XmlSerializationWriter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSerializationWriter*, creationType>()));
    }
  }; // System.Xml.Serialization.XmlSerializationWriter
  #pragma pack(pop)
  static check_size<sizeof(XmlSerializationWriter), 64 + sizeof(::System::Collections::Hashtable*)> __System_Xml_Serialization_XmlSerializationWriterSizeCheck;
  static_assert(sizeof(XmlSerializationWriter) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::get_Writer
// Il2CppName: get_Writer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlWriter* (System::Xml::Serialization::XmlSerializationWriter::*)()>(&System::Xml::Serialization::XmlSerializationWriter::get_Writer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "get_Writer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::System::Xml::XmlWriter*, ::System::Xml::Serialization::XmlSerializerNamespaces*)>(&System::Xml::Serialization::XmlSerializationWriter::Initialize)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    static auto* nss = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlSerializerNamespaces")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, nss});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::AddWriteCallback
// Il2CppName: AddWriteCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::System::Type*, ::StringW, ::StringW, ::System::Xml::Serialization::XmlSerializationWriteCallback*)>(&System::Xml::Serialization::XmlSerializationWriter::AddWriteCallback)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* typeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* typeNs = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlSerializationWriteCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "AddWriteCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, typeName, typeNs, callback});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::CreateUnknownAnyElementException
// Il2CppName: CreateUnknownAnyElementException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW)>(&System::Xml::Serialization::XmlSerializationWriter::CreateUnknownAnyElementException)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "CreateUnknownAnyElementException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::CreateUnknownTypeException
// Il2CppName: CreateUnknownTypeException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (System::Xml::Serialization::XmlSerializationWriter::*)(::Il2CppObject*)>(&System::Xml::Serialization::XmlSerializationWriter::CreateUnknownTypeException)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "CreateUnknownTypeException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::CreateUnknownTypeException
// Il2CppName: CreateUnknownTypeException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (System::Xml::Serialization::XmlSerializationWriter::*)(::System::Type*)>(&System::Xml::Serialization::XmlSerializationWriter::CreateUnknownTypeException)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "CreateUnknownTypeException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::FromXmlQualifiedName
// Il2CppName: FromXmlQualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::XmlSerializationWriter::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Serialization::XmlSerializationWriter::FromXmlQualifiedName)> {
  static const MethodInfo* get() {
    static auto* xmlQualifiedName = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "FromXmlQualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xmlQualifiedName});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::GetId
// Il2CppName: GetId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::XmlSerializationWriter::*)(::Il2CppObject*, bool)>(&System::Xml::Serialization::XmlSerializationWriter::GetId)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* addToReferencesList = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "GetId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o, addToReferencesList});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::AlreadyQueued
// Il2CppName: AlreadyQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::XmlSerializationWriter::*)(::Il2CppObject*)>(&System::Xml::Serialization::XmlSerializationWriter::AlreadyQueued)> {
  static const MethodInfo* get() {
    static auto* ob = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "AlreadyQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ob});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::GetNamespacePrefix
// Il2CppName: GetNamespacePrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW)>(&System::Xml::Serialization::XmlSerializationWriter::GetNamespacePrefix)> {
  static const MethodInfo* get() {
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "GetNamespacePrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::GetQualifiedName
// Il2CppName: GetQualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW)>(&System::Xml::Serialization::XmlSerializationWriter::GetQualifiedName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "GetQualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::InitCallbacks
// Il2CppName: InitCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)()>(&System::Xml::Serialization::XmlSerializationWriter::InitCallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "InitCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::TopLevelElement
// Il2CppName: TopLevelElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)()>(&System::Xml::Serialization::XmlSerializationWriter::TopLevelElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "TopLevelElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteAttribute
// Il2CppName: WriteAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW, ::StringW)>(&System::Xml::Serialization::XmlSerializationWriter::WriteAttribute)> {
  static const MethodInfo* get() {
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localName, ns, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteAttribute
// Il2CppName: WriteAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW, ::StringW, ::StringW)>(&System::Xml::Serialization::XmlSerializationWriter::WriteAttribute)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName, ns, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteXmlNode
// Il2CppName: WriteXmlNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::System::Xml::XmlNode*)>(&System::Xml::Serialization::XmlSerializationWriter::WriteXmlNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteXmlNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteElementEncoded
// Il2CppName: WriteElementEncoded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::System::Xml::XmlNode*, ::StringW, ::StringW, bool, bool)>(&System::Xml::Serialization::XmlSerializationWriter::WriteElementEncoded)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isNullable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* any = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteElementEncoded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, name, ns, isNullable, any});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteElementLiteral
// Il2CppName: WriteElementLiteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::System::Xml::XmlNode*, ::StringW, ::StringW, bool, bool)>(&System::Xml::Serialization::XmlSerializationWriter::WriteElementLiteral)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isNullable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* any = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteElementLiteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, name, ns, isNullable, any});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteElementQualifiedName
// Il2CppName: WriteElementQualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW, ::System::Xml::XmlQualifiedName*)>(&System::Xml::Serialization::XmlSerializationWriter::WriteElementQualifiedName)> {
  static const MethodInfo* get() {
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteElementQualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localName, ns, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteElementQualifiedName
// Il2CppName: WriteElementQualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW, ::System::Xml::XmlQualifiedName*, ::System::Xml::XmlQualifiedName*)>(&System::Xml::Serialization::XmlSerializationWriter::WriteElementQualifiedName)> {
  static const MethodInfo* get() {
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    static auto* xsiType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteElementQualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localName, ns, value, xsiType});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteElementString
// Il2CppName: WriteElementString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW, ::StringW)>(&System::Xml::Serialization::XmlSerializationWriter::WriteElementString)> {
  static const MethodInfo* get() {
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteElementString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localName, ns, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteElementString
// Il2CppName: WriteElementString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW, ::StringW, ::System::Xml::XmlQualifiedName*)>(&System::Xml::Serialization::XmlSerializationWriter::WriteElementString)> {
  static const MethodInfo* get() {
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* xsiType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteElementString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localName, ns, value, xsiType});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)()>(&System::Xml::Serialization::XmlSerializationWriter::WriteEndElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::Il2CppObject*)>(&System::Xml::Serialization::XmlSerializationWriter::WriteEndElement)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteNamespaceDeclarations
// Il2CppName: WriteNamespaceDeclarations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::System::Xml::Serialization::XmlSerializerNamespaces*)>(&System::Xml::Serialization::XmlSerializationWriter::WriteNamespaceDeclarations)> {
  static const MethodInfo* get() {
    static auto* xmlns = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlSerializerNamespaces")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteNamespaceDeclarations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xmlns});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteNullableQualifiedNameEncoded
// Il2CppName: WriteNullableQualifiedNameEncoded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW, ::System::Xml::XmlQualifiedName*, ::System::Xml::XmlQualifiedName*)>(&System::Xml::Serialization::XmlSerializationWriter::WriteNullableQualifiedNameEncoded)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    static auto* xsiType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteNullableQualifiedNameEncoded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns, value, xsiType});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteNullableQualifiedNameLiteral
// Il2CppName: WriteNullableQualifiedNameLiteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW, ::System::Xml::XmlQualifiedName*)>(&System::Xml::Serialization::XmlSerializationWriter::WriteNullableQualifiedNameLiteral)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteNullableQualifiedNameLiteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteNullableStringEncoded
// Il2CppName: WriteNullableStringEncoded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW, ::StringW, ::System::Xml::XmlQualifiedName*)>(&System::Xml::Serialization::XmlSerializationWriter::WriteNullableStringEncoded)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* xsiType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteNullableStringEncoded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns, value, xsiType});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteNullableStringLiteral
// Il2CppName: WriteNullableStringLiteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW, ::StringW)>(&System::Xml::Serialization::XmlSerializationWriter::WriteNullableStringLiteral)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteNullableStringLiteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteNullTagEncoded
// Il2CppName: WriteNullTagEncoded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW)>(&System::Xml::Serialization::XmlSerializationWriter::WriteNullTagEncoded)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteNullTagEncoded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteNullTagLiteral
// Il2CppName: WriteNullTagLiteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW)>(&System::Xml::Serialization::XmlSerializationWriter::WriteNullTagLiteral)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteNullTagLiteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WritePotentiallyReferencingElement
// Il2CppName: WritePotentiallyReferencingElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW, ::Il2CppObject*, ::System::Type*, bool, bool)>(&System::Xml::Serialization::XmlSerializationWriter::WritePotentiallyReferencingElement)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* ambientType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* suppressReference = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isNullable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WritePotentiallyReferencingElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n, ns, o, ambientType, suppressReference, isNullable});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteReferencedElements
// Il2CppName: WriteReferencedElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)()>(&System::Xml::Serialization::XmlSerializationWriter::WriteReferencedElements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteReferencedElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::IsPrimitiveArray
// Il2CppName: IsPrimitiveArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::XmlSerializationWriter::*)(::System::Xml::Serialization::TypeData*)>(&System::Xml::Serialization::XmlSerializationWriter::IsPrimitiveArray)> {
  static const MethodInfo* get() {
    static auto* td = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "TypeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "IsPrimitiveArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{td});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteArray
// Il2CppName: WriteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::Il2CppObject*, ::System::Xml::Serialization::TypeData*)>(&System::Xml::Serialization::XmlSerializationWriter::WriteArray)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* td = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "TypeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o, td});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteReferencingElement
// Il2CppName: WriteReferencingElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW, ::Il2CppObject*, bool)>(&System::Xml::Serialization::XmlSerializationWriter::WriteReferencingElement)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* isNullable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteReferencingElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n, ns, o, isNullable});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::CheckReferenceQueue
// Il2CppName: CheckReferenceQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)()>(&System::Xml::Serialization::XmlSerializationWriter::CheckReferenceQueue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "CheckReferenceQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteSerializable
// Il2CppName: WriteSerializable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::System::Xml::Serialization::IXmlSerializable*, ::StringW, ::StringW, bool)>(&System::Xml::Serialization::XmlSerializationWriter::WriteSerializable)> {
  static const MethodInfo* get() {
    static auto* serializable = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "IXmlSerializable")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isNullable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteSerializable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializable, name, ns, isNullable});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteSerializable
// Il2CppName: WriteSerializable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::System::Xml::Serialization::IXmlSerializable*, ::StringW, ::StringW, bool, bool)>(&System::Xml::Serialization::XmlSerializationWriter::WriteSerializable)> {
  static const MethodInfo* get() {
    static auto* serializable = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "IXmlSerializable")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isNullable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* wrapped = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteSerializable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializable, name, ns, isNullable, wrapped});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteStartDocument
// Il2CppName: WriteStartDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)()>(&System::Xml::Serialization::XmlSerializationWriter::WriteStartDocument)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteStartDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW)>(&System::Xml::Serialization::XmlSerializationWriter::WriteStartElement)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW, bool)>(&System::Xml::Serialization::XmlSerializationWriter::WriteStartElement)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* writePrefixed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns, writePrefixed});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW, ::Il2CppObject*)>(&System::Xml::Serialization::XmlSerializationWriter::WriteStartElement)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns, o});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW, ::Il2CppObject*, bool)>(&System::Xml::Serialization::XmlSerializationWriter::WriteStartElement)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* writePrefixed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns, o, writePrefixed});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW, ::Il2CppObject*, bool, ::System::Collections::ICollection*)>(&System::Xml::Serialization::XmlSerializationWriter::WriteStartElement)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* writePrefixed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* namespaces = &::il2cpp_utils::GetClassFromName("System.Collections", "ICollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns, o, writePrefixed, namespaces});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteTypedPrimitive
// Il2CppName: WriteTypedPrimitive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW, ::Il2CppObject*, bool)>(&System::Xml::Serialization::XmlSerializationWriter::WriteTypedPrimitive)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* xsiType = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteTypedPrimitive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns, o, xsiType});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW)>(&System::Xml::Serialization::XmlSerializationWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteXmlAttribute
// Il2CppName: WriteXmlAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::System::Xml::XmlNode*, ::Il2CppObject*)>(&System::Xml::Serialization::XmlSerializationWriter::WriteXmlAttribute)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* container = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteXmlAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, container});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::WriteXsiType
// Il2CppName: WriteXsiType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializationWriter::*)(::StringW, ::StringW)>(&System::Xml::Serialization::XmlSerializationWriter::WriteXsiType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializationWriter*), "WriteXsiType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializationWriter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
