// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: XmlAttributeOverrides
  class XmlAttributeOverrides;
  // Forward declaring type: ReflectionHelper
  class ReflectionHelper;
  // Forward declaring type: XmlTypeMapping
  class XmlTypeMapping;
  // Forward declaring type: XmlRootAttribute
  class XmlRootAttribute;
  // Forward declaring type: TypeData
  class TypeData;
  // Forward declaring type: XmlAttributes
  class XmlAttributes;
  // Forward declaring type: XmlReflectionMember
  class XmlReflectionMember;
  // Forward declaring type: XmlTypeMapMember
  class XmlTypeMapMember;
  // Forward declaring type: XmlTypeMapElementInfoList
  class XmlTypeMapElementInfoList;
  // Forward declaring type: XmlTypeMapMemberElement
  class XmlTypeMapMemberElement;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: XmlReflectionImporter
  class XmlReflectionImporter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Serialization::XmlReflectionImporter);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Serialization::XmlReflectionImporter*, "System.Xml.Serialization", "XmlReflectionImporter");
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Serialization.XmlReflectionImporter
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlReflectionImporter : public ::Il2CppObject {
    public:
    // Nested type: ::System::Xml::Serialization::XmlReflectionImporter::$$c
    class $$c;
    public:
    // private System.String initialDefaultNamespace
    // Size: 0x8
    // Offset: 0x10
    ::StringW initialDefaultNamespace;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.Serialization.XmlAttributeOverrides attributeOverrides
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::Serialization::XmlAttributeOverrides* attributeOverrides;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::XmlAttributeOverrides*) == 0x8);
    // private System.Collections.ArrayList includedTypes
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::ArrayList* includedTypes;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Xml.Serialization.ReflectionHelper helper
    // Size: 0x8
    // Offset: 0x28
    ::System::Xml::Serialization::ReflectionHelper* helper;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::ReflectionHelper*) == 0x8);
    // private System.Int32 arrayChoiceCount
    // Size: 0x4
    // Offset: 0x30
    int arrayChoiceCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: arrayChoiceCount and: relatedMaps
    char __padding4[0x4] = {};
    // private System.Collections.ArrayList relatedMaps
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::ArrayList* relatedMaps;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Boolean allowPrivateTypes
    // Size: 0x1
    // Offset: 0x40
    bool allowPrivateTypes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private readonly System.String errSimple
    static ::StringW _get_errSimple();
    // Set static field: static private readonly System.String errSimple
    static void _set_errSimple(::StringW value);
    // Get static field: static private readonly System.String errSimple2
    static ::StringW _get_errSimple2();
    // Set static field: static private readonly System.String errSimple2
    static void _set_errSimple2(::StringW value);
    // Get instance field reference: private System.String initialDefaultNamespace
    [[deprecated("Use field access instead!")]] ::StringW& dyn_initialDefaultNamespace();
    // Get instance field reference: private System.Xml.Serialization.XmlAttributeOverrides attributeOverrides
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::XmlAttributeOverrides*& dyn_attributeOverrides();
    // Get instance field reference: private System.Collections.ArrayList includedTypes
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_includedTypes();
    // Get instance field reference: private System.Xml.Serialization.ReflectionHelper helper
    [[deprecated("Use field access instead!")]] ::System::Xml::Serialization::ReflectionHelper*& dyn_helper();
    // Get instance field reference: private System.Int32 arrayChoiceCount
    [[deprecated("Use field access instead!")]] int& dyn_arrayChoiceCount();
    // Get instance field reference: private System.Collections.ArrayList relatedMaps
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_relatedMaps();
    // Get instance field reference: private System.Boolean allowPrivateTypes
    [[deprecated("Use field access instead!")]] bool& dyn_allowPrivateTypes();
    // public System.Void .ctor(System.Xml.Serialization.XmlAttributeOverrides attributeOverrides, System.String defaultNamespace)
    // Offset: 0x1028340
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlReflectionImporter* New_ctor(::System::Xml::Serialization::XmlAttributeOverrides* attributeOverrides, ::StringW defaultNamespace) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Serialization::XmlReflectionImporter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlReflectionImporter*, creationType>(attributeOverrides, defaultNamespace)));
    }
    // static private System.Void .cctor()
    // Offset: 0x102F528
    static void _cctor();
    // public System.Xml.Serialization.XmlTypeMapping ImportTypeMapping(System.Type type)
    // Offset: 0x1028450
    ::System::Xml::Serialization::XmlTypeMapping* ImportTypeMapping(::System::Type* type);
    // public System.Xml.Serialization.XmlTypeMapping ImportTypeMapping(System.Type type, System.String defaultNamespace)
    // Offset: 0x1028654
    ::System::Xml::Serialization::XmlTypeMapping* ImportTypeMapping(::System::Type* type, ::StringW defaultNamespace);
    // public System.Xml.Serialization.XmlTypeMapping ImportTypeMapping(System.Type type, System.Xml.Serialization.XmlRootAttribute root, System.String defaultNamespace)
    // Offset: 0x102845C
    ::System::Xml::Serialization::XmlTypeMapping* ImportTypeMapping(::System::Type* type, ::System::Xml::Serialization::XmlRootAttribute* root, ::StringW defaultNamespace);
    // private System.Xml.Serialization.XmlTypeMapping ImportTypeMapping(System.Xml.Serialization.TypeData typeData, System.Xml.Serialization.XmlRootAttribute root, System.String defaultNamespace)
    // Offset: 0x1028660
    ::System::Xml::Serialization::XmlTypeMapping* ImportTypeMapping(::System::Xml::Serialization::TypeData* typeData, ::System::Xml::Serialization::XmlRootAttribute* root, ::StringW defaultNamespace);
    // private System.Xml.Serialization.XmlTypeMapping CreateTypeMapping(System.Xml.Serialization.TypeData typeData, System.Xml.Serialization.XmlRootAttribute root, System.String defaultXmlType, System.String defaultNamespace)
    // Offset: 0x102B26C
    ::System::Xml::Serialization::XmlTypeMapping* CreateTypeMapping(::System::Xml::Serialization::TypeData* typeData, ::System::Xml::Serialization::XmlRootAttribute* root, ::StringW defaultXmlType, ::StringW defaultNamespace);
    // private System.Xml.Serialization.XmlTypeMapping ImportClassMapping(System.Type type, System.Xml.Serialization.XmlRootAttribute root, System.String defaultNamespace, System.Boolean isBaseType)
    // Offset: 0x102B6FC
    ::System::Xml::Serialization::XmlTypeMapping* ImportClassMapping(::System::Type* type, ::System::Xml::Serialization::XmlRootAttribute* root, ::StringW defaultNamespace, bool isBaseType);
    // private System.Xml.Serialization.XmlTypeMapping ImportClassMapping(System.Xml.Serialization.TypeData typeData, System.Xml.Serialization.XmlRootAttribute root, System.String defaultNamespace, System.Boolean isBaseType)
    // Offset: 0x1028B00
    ::System::Xml::Serialization::XmlTypeMapping* ImportClassMapping(::System::Xml::Serialization::TypeData* typeData, ::System::Xml::Serialization::XmlRootAttribute* root, ::StringW defaultNamespace, bool isBaseType);
    // private System.Void RegisterDerivedMap(System.Xml.Serialization.XmlTypeMapping map, System.Xml.Serialization.XmlTypeMapping derivedMap)
    // Offset: 0x102CF28
    void RegisterDerivedMap(::System::Xml::Serialization::XmlTypeMapping* map, ::System::Xml::Serialization::XmlTypeMapping* derivedMap);
    // private System.String GetTypeNamespace(System.Xml.Serialization.TypeData typeData, System.Xml.Serialization.XmlRootAttribute root, System.String defaultNamespace)
    // Offset: 0x102B798
    ::StringW GetTypeNamespace(::System::Xml::Serialization::TypeData* typeData, ::System::Xml::Serialization::XmlRootAttribute* root, ::StringW defaultNamespace);
    // private System.Xml.Serialization.XmlTypeMapping ImportListMapping(System.Type type, System.Xml.Serialization.XmlRootAttribute root, System.String defaultNamespace, System.Xml.Serialization.XmlAttributes atts, System.Int32 nestingLevel)
    // Offset: 0x102D1A4
    ::System::Xml::Serialization::XmlTypeMapping* ImportListMapping(::System::Type* type, ::System::Xml::Serialization::XmlRootAttribute* root, ::StringW defaultNamespace, ::System::Xml::Serialization::XmlAttributes* atts, int nestingLevel);
    // private System.Xml.Serialization.XmlTypeMapping ImportListMapping(System.Xml.Serialization.TypeData typeData, System.Xml.Serialization.XmlRootAttribute root, System.String defaultNamespace, System.Xml.Serialization.XmlAttributes atts, System.Int32 nestingLevel)
    // Offset: 0x1029B78
    ::System::Xml::Serialization::XmlTypeMapping* ImportListMapping(::System::Xml::Serialization::TypeData* typeData, ::System::Xml::Serialization::XmlRootAttribute* root, ::StringW defaultNamespace, ::System::Xml::Serialization::XmlAttributes* atts, int nestingLevel);
    // private System.Xml.Serialization.XmlTypeMapping ImportXmlNodeMapping(System.Xml.Serialization.TypeData typeData, System.Xml.Serialization.XmlRootAttribute root, System.String defaultNamespace)
    // Offset: 0x102A854
    ::System::Xml::Serialization::XmlTypeMapping* ImportXmlNodeMapping(::System::Xml::Serialization::TypeData* typeData, ::System::Xml::Serialization::XmlRootAttribute* root, ::StringW defaultNamespace);
    // private System.Xml.Serialization.XmlTypeMapping ImportPrimitiveMapping(System.Xml.Serialization.TypeData typeData, System.Xml.Serialization.XmlRootAttribute root, System.String defaultNamespace)
    // Offset: 0x102AA44
    ::System::Xml::Serialization::XmlTypeMapping* ImportPrimitiveMapping(::System::Xml::Serialization::TypeData* typeData, ::System::Xml::Serialization::XmlRootAttribute* root, ::StringW defaultNamespace);
    // private System.Xml.Serialization.XmlTypeMapping ImportEnumMapping(System.Xml.Serialization.TypeData typeData, System.Xml.Serialization.XmlRootAttribute root, System.String defaultNamespace)
    // Offset: 0x102AAFC
    ::System::Xml::Serialization::XmlTypeMapping* ImportEnumMapping(::System::Xml::Serialization::TypeData* typeData, ::System::Xml::Serialization::XmlRootAttribute* root, ::StringW defaultNamespace);
    // private System.Xml.Serialization.XmlTypeMapping ImportXmlSerializableMapping(System.Xml.Serialization.TypeData typeData, System.Xml.Serialization.XmlRootAttribute root, System.String defaultNamespace)
    // Offset: 0x102B14C
    ::System::Xml::Serialization::XmlTypeMapping* ImportXmlSerializableMapping(::System::Xml::Serialization::TypeData* typeData, ::System::Xml::Serialization::XmlRootAttribute* root, ::StringW defaultNamespace);
    // private System.Void ImportIncludedTypes(System.Type type, System.String defaultNamespace)
    // Offset: 0x102D05C
    void ImportIncludedTypes(::System::Type* type, ::StringW defaultNamespace);
    // private System.Collections.Generic.List`1<System.Xml.Serialization.XmlReflectionMember> GetReflectionMembers(System.Type type)
    // Offset: 0x102B8B8
    ::System::Collections::Generic::List_1<::System::Xml::Serialization::XmlReflectionMember*>* GetReflectionMembers(::System::Type* type);
    // private System.Xml.Serialization.XmlTypeMapMember CreateMapMember(System.Type declaringType, System.Xml.Serialization.XmlReflectionMember rmember, System.String defaultNamespace)
    // Offset: 0x102C5C0
    ::System::Xml::Serialization::XmlTypeMapMember* CreateMapMember(::System::Type* declaringType, ::System::Xml::Serialization::XmlReflectionMember* rmember, ::StringW defaultNamespace);
    // private System.Xml.Serialization.XmlTypeMapElementInfoList ImportElementInfo(System.Type cls, System.String defaultName, System.String defaultNamespace, System.Type defaultType, System.Xml.Serialization.XmlTypeMapMemberElement member, System.Xml.Serialization.XmlAttributes atts)
    // Offset: 0x102D94C
    ::System::Xml::Serialization::XmlTypeMapElementInfoList* ImportElementInfo(::System::Type* cls, ::StringW defaultName, ::StringW defaultNamespace, ::System::Type* defaultType, ::System::Xml::Serialization::XmlTypeMapMemberElement* member, ::System::Xml::Serialization::XmlAttributes* atts);
    // private System.Xml.Serialization.XmlTypeMapElementInfoList ImportAnyElementInfo(System.String defaultNamespace, System.Xml.Serialization.XmlReflectionMember rmember, System.Xml.Serialization.XmlTypeMapMemberElement member, System.Xml.Serialization.XmlAttributes atts)
    // Offset: 0x102D250
    ::System::Xml::Serialization::XmlTypeMapElementInfoList* ImportAnyElementInfo(::StringW defaultNamespace, ::System::Xml::Serialization::XmlReflectionMember* rmember, ::System::Xml::Serialization::XmlTypeMapMemberElement* member, ::System::Xml::Serialization::XmlAttributes* atts);
    // private System.Void ImportTextElementInfo(System.Xml.Serialization.XmlTypeMapElementInfoList list, System.Type defaultType, System.Xml.Serialization.XmlTypeMapMemberElement member, System.Xml.Serialization.XmlAttributes atts, System.String defaultNamespace)
    // Offset: 0x102ECB4
    void ImportTextElementInfo(::System::Xml::Serialization::XmlTypeMapElementInfoList* list, ::System::Type* defaultType, ::System::Xml::Serialization::XmlTypeMapMemberElement* member, ::System::Xml::Serialization::XmlAttributes* atts, ::StringW defaultNamespace);
    // private System.Boolean CanBeNull(System.Xml.Serialization.TypeData type)
    // Offset: 0x102B6AC
    bool CanBeNull(::System::Xml::Serialization::TypeData* type);
    // public System.Void IncludeType(System.Type type)
    // Offset: 0x102F038
    void IncludeType(::System::Type* type);
    // private System.Object GetDefaultValue(System.Xml.Serialization.TypeData typeData, System.Object defaultValue)
    // Offset: 0x102EAAC
    ::Il2CppObject* GetDefaultValue(::System::Xml::Serialization::TypeData* typeData, ::Il2CppObject* defaultValue);
  }; // System.Xml.Serialization.XmlReflectionImporter
  #pragma pack(pop)
  static check_size<sizeof(XmlReflectionImporter), 64 + sizeof(bool)> __System_Xml_Serialization_XmlReflectionImporterSizeCheck;
  static_assert(sizeof(XmlReflectionImporter) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::Serialization::XmlReflectionImporter::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::ImportTypeMapping
// Il2CppName: ImportTypeMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapping* (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Type*)>(&System::Xml::Serialization::XmlReflectionImporter::ImportTypeMapping)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "ImportTypeMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::ImportTypeMapping
// Il2CppName: ImportTypeMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapping* (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Type*, ::StringW)>(&System::Xml::Serialization::XmlReflectionImporter::ImportTypeMapping)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* defaultNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "ImportTypeMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, defaultNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::ImportTypeMapping
// Il2CppName: ImportTypeMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapping* (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Type*, ::System::Xml::Serialization::XmlRootAttribute*, ::StringW)>(&System::Xml::Serialization::XmlReflectionImporter::ImportTypeMapping)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlRootAttribute")->byval_arg;
    static auto* defaultNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "ImportTypeMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, root, defaultNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::ImportTypeMapping
// Il2CppName: ImportTypeMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapping* (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Xml::Serialization::TypeData*, ::System::Xml::Serialization::XmlRootAttribute*, ::StringW)>(&System::Xml::Serialization::XmlReflectionImporter::ImportTypeMapping)> {
  static const MethodInfo* get() {
    static auto* typeData = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "TypeData")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlRootAttribute")->byval_arg;
    static auto* defaultNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "ImportTypeMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeData, root, defaultNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::CreateTypeMapping
// Il2CppName: CreateTypeMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapping* (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Xml::Serialization::TypeData*, ::System::Xml::Serialization::XmlRootAttribute*, ::StringW, ::StringW)>(&System::Xml::Serialization::XmlReflectionImporter::CreateTypeMapping)> {
  static const MethodInfo* get() {
    static auto* typeData = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "TypeData")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlRootAttribute")->byval_arg;
    static auto* defaultXmlType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* defaultNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "CreateTypeMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeData, root, defaultXmlType, defaultNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::ImportClassMapping
// Il2CppName: ImportClassMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapping* (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Type*, ::System::Xml::Serialization::XmlRootAttribute*, ::StringW, bool)>(&System::Xml::Serialization::XmlReflectionImporter::ImportClassMapping)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlRootAttribute")->byval_arg;
    static auto* defaultNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isBaseType = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "ImportClassMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, root, defaultNamespace, isBaseType});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::ImportClassMapping
// Il2CppName: ImportClassMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapping* (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Xml::Serialization::TypeData*, ::System::Xml::Serialization::XmlRootAttribute*, ::StringW, bool)>(&System::Xml::Serialization::XmlReflectionImporter::ImportClassMapping)> {
  static const MethodInfo* get() {
    static auto* typeData = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "TypeData")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlRootAttribute")->byval_arg;
    static auto* defaultNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isBaseType = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "ImportClassMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeData, root, defaultNamespace, isBaseType});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::RegisterDerivedMap
// Il2CppName: RegisterDerivedMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Xml::Serialization::XmlTypeMapping*, ::System::Xml::Serialization::XmlTypeMapping*)>(&System::Xml::Serialization::XmlReflectionImporter::RegisterDerivedMap)> {
  static const MethodInfo* get() {
    static auto* map = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlTypeMapping")->byval_arg;
    static auto* derivedMap = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlTypeMapping")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "RegisterDerivedMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map, derivedMap});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::GetTypeNamespace
// Il2CppName: GetTypeNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Xml::Serialization::TypeData*, ::System::Xml::Serialization::XmlRootAttribute*, ::StringW)>(&System::Xml::Serialization::XmlReflectionImporter::GetTypeNamespace)> {
  static const MethodInfo* get() {
    static auto* typeData = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "TypeData")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlRootAttribute")->byval_arg;
    static auto* defaultNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "GetTypeNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeData, root, defaultNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::ImportListMapping
// Il2CppName: ImportListMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapping* (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Type*, ::System::Xml::Serialization::XmlRootAttribute*, ::StringW, ::System::Xml::Serialization::XmlAttributes*, int)>(&System::Xml::Serialization::XmlReflectionImporter::ImportListMapping)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlRootAttribute")->byval_arg;
    static auto* defaultNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* atts = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlAttributes")->byval_arg;
    static auto* nestingLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "ImportListMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, root, defaultNamespace, atts, nestingLevel});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::ImportListMapping
// Il2CppName: ImportListMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapping* (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Xml::Serialization::TypeData*, ::System::Xml::Serialization::XmlRootAttribute*, ::StringW, ::System::Xml::Serialization::XmlAttributes*, int)>(&System::Xml::Serialization::XmlReflectionImporter::ImportListMapping)> {
  static const MethodInfo* get() {
    static auto* typeData = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "TypeData")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlRootAttribute")->byval_arg;
    static auto* defaultNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* atts = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlAttributes")->byval_arg;
    static auto* nestingLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "ImportListMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeData, root, defaultNamespace, atts, nestingLevel});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::ImportXmlNodeMapping
// Il2CppName: ImportXmlNodeMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapping* (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Xml::Serialization::TypeData*, ::System::Xml::Serialization::XmlRootAttribute*, ::StringW)>(&System::Xml::Serialization::XmlReflectionImporter::ImportXmlNodeMapping)> {
  static const MethodInfo* get() {
    static auto* typeData = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "TypeData")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlRootAttribute")->byval_arg;
    static auto* defaultNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "ImportXmlNodeMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeData, root, defaultNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::ImportPrimitiveMapping
// Il2CppName: ImportPrimitiveMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapping* (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Xml::Serialization::TypeData*, ::System::Xml::Serialization::XmlRootAttribute*, ::StringW)>(&System::Xml::Serialization::XmlReflectionImporter::ImportPrimitiveMapping)> {
  static const MethodInfo* get() {
    static auto* typeData = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "TypeData")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlRootAttribute")->byval_arg;
    static auto* defaultNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "ImportPrimitiveMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeData, root, defaultNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::ImportEnumMapping
// Il2CppName: ImportEnumMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapping* (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Xml::Serialization::TypeData*, ::System::Xml::Serialization::XmlRootAttribute*, ::StringW)>(&System::Xml::Serialization::XmlReflectionImporter::ImportEnumMapping)> {
  static const MethodInfo* get() {
    static auto* typeData = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "TypeData")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlRootAttribute")->byval_arg;
    static auto* defaultNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "ImportEnumMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeData, root, defaultNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::ImportXmlSerializableMapping
// Il2CppName: ImportXmlSerializableMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapping* (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Xml::Serialization::TypeData*, ::System::Xml::Serialization::XmlRootAttribute*, ::StringW)>(&System::Xml::Serialization::XmlReflectionImporter::ImportXmlSerializableMapping)> {
  static const MethodInfo* get() {
    static auto* typeData = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "TypeData")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlRootAttribute")->byval_arg;
    static auto* defaultNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "ImportXmlSerializableMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeData, root, defaultNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::ImportIncludedTypes
// Il2CppName: ImportIncludedTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Type*, ::StringW)>(&System::Xml::Serialization::XmlReflectionImporter::ImportIncludedTypes)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* defaultNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "ImportIncludedTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, defaultNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::GetReflectionMembers
// Il2CppName: GetReflectionMembers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Xml::Serialization::XmlReflectionMember*>* (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Type*)>(&System::Xml::Serialization::XmlReflectionImporter::GetReflectionMembers)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "GetReflectionMembers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::CreateMapMember
// Il2CppName: CreateMapMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapMember* (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Type*, ::System::Xml::Serialization::XmlReflectionMember*, ::StringW)>(&System::Xml::Serialization::XmlReflectionImporter::CreateMapMember)> {
  static const MethodInfo* get() {
    static auto* declaringType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* rmember = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlReflectionMember")->byval_arg;
    static auto* defaultNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "CreateMapMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{declaringType, rmember, defaultNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::ImportElementInfo
// Il2CppName: ImportElementInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapElementInfoList* (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Type*, ::StringW, ::StringW, ::System::Type*, ::System::Xml::Serialization::XmlTypeMapMemberElement*, ::System::Xml::Serialization::XmlAttributes*)>(&System::Xml::Serialization::XmlReflectionImporter::ImportElementInfo)> {
  static const MethodInfo* get() {
    static auto* cls = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* defaultName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* defaultNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* defaultType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlTypeMapMemberElement")->byval_arg;
    static auto* atts = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlAttributes")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "ImportElementInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cls, defaultName, defaultNamespace, defaultType, member, atts});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::ImportAnyElementInfo
// Il2CppName: ImportAnyElementInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::XmlTypeMapElementInfoList* (System::Xml::Serialization::XmlReflectionImporter::*)(::StringW, ::System::Xml::Serialization::XmlReflectionMember*, ::System::Xml::Serialization::XmlTypeMapMemberElement*, ::System::Xml::Serialization::XmlAttributes*)>(&System::Xml::Serialization::XmlReflectionImporter::ImportAnyElementInfo)> {
  static const MethodInfo* get() {
    static auto* defaultNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* rmember = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlReflectionMember")->byval_arg;
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlTypeMapMemberElement")->byval_arg;
    static auto* atts = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlAttributes")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "ImportAnyElementInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{defaultNamespace, rmember, member, atts});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::ImportTextElementInfo
// Il2CppName: ImportTextElementInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Xml::Serialization::XmlTypeMapElementInfoList*, ::System::Type*, ::System::Xml::Serialization::XmlTypeMapMemberElement*, ::System::Xml::Serialization::XmlAttributes*, ::StringW)>(&System::Xml::Serialization::XmlReflectionImporter::ImportTextElementInfo)> {
  static const MethodInfo* get() {
    static auto* list = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlTypeMapElementInfoList")->byval_arg;
    static auto* defaultType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlTypeMapMemberElement")->byval_arg;
    static auto* atts = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "XmlAttributes")->byval_arg;
    static auto* defaultNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "ImportTextElementInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{list, defaultType, member, atts, defaultNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::CanBeNull
// Il2CppName: CanBeNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Xml::Serialization::TypeData*)>(&System::Xml::Serialization::XmlReflectionImporter::CanBeNull)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "TypeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "CanBeNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::IncludeType
// Il2CppName: IncludeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Type*)>(&System::Xml::Serialization::XmlReflectionImporter::IncludeType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "IncludeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlReflectionImporter::GetDefaultValue
// Il2CppName: GetDefaultValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Serialization::XmlReflectionImporter::*)(::System::Xml::Serialization::TypeData*, ::Il2CppObject*)>(&System::Xml::Serialization::XmlReflectionImporter::GetDefaultValue)> {
  static const MethodInfo* get() {
    static auto* typeData = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "TypeData")->byval_arg;
    static auto* defaultValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlReflectionImporter*), "GetDefaultValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeData, defaultValue});
  }
};
