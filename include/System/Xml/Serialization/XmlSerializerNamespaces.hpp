// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Completed forward declares
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: XmlSerializerNamespaces
  class XmlSerializerNamespaces;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Serialization::XmlSerializerNamespaces);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Serialization::XmlSerializerNamespaces*, "System.Xml.Serialization", "XmlSerializerNamespaces");
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Serialization.XmlSerializerNamespaces
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSerializerNamespaces : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.Hashtable namespaces
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Hashtable* namespaces;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Hashtable*
    constexpr operator ::System::Collections::Hashtable*() const noexcept {
      return namespaces;
    }
    // Get instance field reference: private System.Collections.Hashtable namespaces
    [[deprecated]] ::System::Collections::Hashtable*& dyn_namespaces();
    // public System.Int32 get_Count()
    // Offset: 0x132CE60
    int get_Count();
    // System.Collections.ArrayList get_NamespaceList()
    // Offset: 0x132D23C
    ::System::Collections::ArrayList* get_NamespaceList();
    // System.Collections.Hashtable get_Namespaces()
    // Offset: 0x1325C54
    ::System::Collections::Hashtable* get_Namespaces();
    // System.Void set_Namespaces(System.Collections.Hashtable value)
    // Offset: 0x132D640
    void set_Namespaces(::System::Collections::Hashtable* value);
    // public System.Void Add(System.String prefix, System.String ns)
    // Offset: 0x1322898
    void Add(::StringW prefix, ::StringW ns);
    // System.Void AddInternal(System.String prefix, System.String ns)
    // Offset: 0x132D1FC
    void AddInternal(::StringW prefix, ::StringW ns);
    // public System.Xml.XmlQualifiedName[] ToArray()
    // Offset: 0x1324818
    ::ArrayW<::System::Xml::XmlQualifiedName*> ToArray();
    // public System.Void .ctor()
    // Offset: 0x1322890
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSerializerNamespaces* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Serialization::XmlSerializerNamespaces::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSerializerNamespaces*, creationType>()));
    }
  }; // System.Xml.Serialization.XmlSerializerNamespaces
  #pragma pack(pop)
  static check_size<sizeof(XmlSerializerNamespaces), 16 + sizeof(::System::Collections::Hashtable*)> __System_Xml_Serialization_XmlSerializerNamespacesSizeCheck;
  static_assert(sizeof(XmlSerializerNamespaces) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializerNamespaces::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Serialization::XmlSerializerNamespaces::*)()>(&System::Xml::Serialization::XmlSerializerNamespaces::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializerNamespaces*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializerNamespaces::get_NamespaceList
// Il2CppName: get_NamespaceList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ArrayList* (System::Xml::Serialization::XmlSerializerNamespaces::*)()>(&System::Xml::Serialization::XmlSerializerNamespaces::get_NamespaceList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializerNamespaces*), "get_NamespaceList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializerNamespaces::get_Namespaces
// Il2CppName: get_Namespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Hashtable* (System::Xml::Serialization::XmlSerializerNamespaces::*)()>(&System::Xml::Serialization::XmlSerializerNamespaces::get_Namespaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializerNamespaces*), "get_Namespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializerNamespaces::set_Namespaces
// Il2CppName: set_Namespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializerNamespaces::*)(::System::Collections::Hashtable*)>(&System::Xml::Serialization::XmlSerializerNamespaces::set_Namespaces)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializerNamespaces*), "set_Namespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializerNamespaces::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializerNamespaces::*)(::StringW, ::StringW)>(&System::Xml::Serialization::XmlSerializerNamespaces::Add)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializerNamespaces*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializerNamespaces::AddInternal
// Il2CppName: AddInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlSerializerNamespaces::*)(::StringW, ::StringW)>(&System::Xml::Serialization::XmlSerializerNamespaces::AddInternal)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializerNamespaces*), "AddInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializerNamespaces::ToArray
// Il2CppName: ToArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Xml::XmlQualifiedName*> (System::Xml::Serialization::XmlSerializerNamespaces::*)()>(&System::Xml::Serialization::XmlSerializerNamespaces::ToArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlSerializerNamespaces*), "ToArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlSerializerNamespaces::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
