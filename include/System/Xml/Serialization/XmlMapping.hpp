// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Serialization.SerializationFormat
#include "System/Xml/Serialization/SerializationFormat.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: ObjectMap
  class ObjectMap;
  // Forward declaring type: SerializationSource
  class SerializationSource;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Completed forward declares
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Forward declaring type: XmlMapping
  class XmlMapping;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Serialization::XmlMapping);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Serialization::XmlMapping*, "System.Xml.Serialization", "XmlMapping");
// Type namespace: System.Xml.Serialization
namespace System::Xml::Serialization {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Serialization.XmlMapping
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlMapping : public ::Il2CppObject {
    public:
    public:
    // private System.Xml.Serialization.ObjectMap map
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::Serialization::ObjectMap* map;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::ObjectMap*) == 0x8);
    // private System.Collections.ArrayList relatedMaps
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::ArrayList* relatedMaps;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Xml.Serialization.SerializationFormat format
    // Size: 0x4
    // Offset: 0x20
    ::System::Xml::Serialization::SerializationFormat format;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::SerializationFormat) == 0x4);
    // Padding between fields: format and: source
    char __padding2[0x4] = {};
    // private System.Xml.Serialization.SerializationSource source
    // Size: 0x8
    // Offset: 0x28
    ::System::Xml::Serialization::SerializationSource* source;
    // Field size check
    static_assert(sizeof(::System::Xml::Serialization::SerializationSource*) == 0x8);
    // System.String _elementName
    // Size: 0x8
    // Offset: 0x30
    ::StringW elementName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String _namespace
    // Size: 0x8
    // Offset: 0x38
    ::StringW _namespace;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String key
    // Size: 0x8
    // Offset: 0x40
    ::StringW key;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.Xml.Serialization.ObjectMap map
    [[deprecated]] ::System::Xml::Serialization::ObjectMap*& dyn_map();
    // Get instance field reference: private System.Collections.ArrayList relatedMaps
    [[deprecated]] ::System::Collections::ArrayList*& dyn_relatedMaps();
    // Get instance field reference: private System.Xml.Serialization.SerializationFormat format
    [[deprecated]] ::System::Xml::Serialization::SerializationFormat& dyn_format();
    // Get instance field reference: private System.Xml.Serialization.SerializationSource source
    [[deprecated]] ::System::Xml::Serialization::SerializationSource*& dyn_source();
    // Get instance field reference: System.String _elementName
    [[deprecated]] ::StringW& dyn__elementName();
    // Get instance field reference: System.String _namespace
    [[deprecated]] ::StringW& dyn__namespace();
    // Get instance field reference: private System.String key
    [[deprecated]] ::StringW& dyn_key();
    // public System.String get_ElementName()
    // Offset: 0x128BFB0
    ::StringW get_ElementName();
    // public System.String get_Namespace()
    // Offset: 0x128BFB8
    ::StringW get_Namespace();
    // System.Xml.Serialization.ObjectMap get_ObjectMap()
    // Offset: 0x128BFC8
    ::System::Xml::Serialization::ObjectMap* get_ObjectMap();
    // System.Void set_ObjectMap(System.Xml.Serialization.ObjectMap value)
    // Offset: 0x128BFD0
    void set_ObjectMap(::System::Xml::Serialization::ObjectMap* value);
    // System.Collections.ArrayList get_RelatedMaps()
    // Offset: 0x128BFD8
    ::System::Collections::ArrayList* get_RelatedMaps();
    // System.Void set_RelatedMaps(System.Collections.ArrayList value)
    // Offset: 0x128BFE0
    void set_RelatedMaps(::System::Collections::ArrayList* value);
    // System.Xml.Serialization.SerializationFormat get_Format()
    // Offset: 0x128BFE8
    ::System::Xml::Serialization::SerializationFormat get_Format();
    // System.Void set_Format(System.Xml.Serialization.SerializationFormat value)
    // Offset: 0x128BFF0
    void set_Format(::System::Xml::Serialization::SerializationFormat value);
    // System.Xml.Serialization.SerializationSource get_Source()
    // Offset: 0x128BFF8
    ::System::Xml::Serialization::SerializationSource* get_Source();
    // System.Void .ctor(System.String elementName, System.String ns)
    // Offset: 0x128BF78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlMapping* New_ctor(::StringW elementName, ::StringW ns) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Serialization::XmlMapping::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlMapping*, creationType>(elementName, ns)));
    }
    // public System.Void SetKey(System.String key)
    // Offset: 0x128BFC0
    void SetKey(::StringW key);
  }; // System.Xml.Serialization.XmlMapping
  #pragma pack(pop)
  static check_size<sizeof(XmlMapping), 64 + sizeof(::StringW)> __System_Xml_Serialization_XmlMappingSizeCheck;
  static_assert(sizeof(XmlMapping) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Serialization::XmlMapping::get_ElementName
// Il2CppName: get_ElementName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::XmlMapping::*)()>(&System::Xml::Serialization::XmlMapping::get_ElementName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlMapping*), "get_ElementName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlMapping::get_Namespace
// Il2CppName: get_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Serialization::XmlMapping::*)()>(&System::Xml::Serialization::XmlMapping::get_Namespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlMapping*), "get_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlMapping::get_ObjectMap
// Il2CppName: get_ObjectMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::ObjectMap* (System::Xml::Serialization::XmlMapping::*)()>(&System::Xml::Serialization::XmlMapping::get_ObjectMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlMapping*), "get_ObjectMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlMapping::set_ObjectMap
// Il2CppName: set_ObjectMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlMapping::*)(::System::Xml::Serialization::ObjectMap*)>(&System::Xml::Serialization::XmlMapping::set_ObjectMap)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "ObjectMap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlMapping*), "set_ObjectMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlMapping::get_RelatedMaps
// Il2CppName: get_RelatedMaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ArrayList* (System::Xml::Serialization::XmlMapping::*)()>(&System::Xml::Serialization::XmlMapping::get_RelatedMaps)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlMapping*), "get_RelatedMaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlMapping::set_RelatedMaps
// Il2CppName: set_RelatedMaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlMapping::*)(::System::Collections::ArrayList*)>(&System::Xml::Serialization::XmlMapping::set_RelatedMaps)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlMapping*), "set_RelatedMaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlMapping::get_Format
// Il2CppName: get_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::SerializationFormat (System::Xml::Serialization::XmlMapping::*)()>(&System::Xml::Serialization::XmlMapping::get_Format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlMapping*), "get_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlMapping::set_Format
// Il2CppName: set_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlMapping::*)(::System::Xml::Serialization::SerializationFormat)>(&System::Xml::Serialization::XmlMapping::set_Format)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Serialization", "SerializationFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlMapping*), "set_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlMapping::get_Source
// Il2CppName: get_Source
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Serialization::SerializationSource* (System::Xml::Serialization::XmlMapping::*)()>(&System::Xml::Serialization::XmlMapping::get_Source)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlMapping*), "get_Source", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Serialization::XmlMapping::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Serialization::XmlMapping::SetKey
// Il2CppName: SetKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Serialization::XmlMapping::*)(::StringW)>(&System::Xml::Serialization::XmlMapping::SetKey)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Serialization::XmlMapping*), "SetKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
