// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaInfo
  class XmlSchemaInfo;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: AttributePSVIInfo
  class AttributePSVIInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::AttributePSVIInfo);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::AttributePSVIInfo*, "System.Xml", "AttributePSVIInfo");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.AttributePSVIInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class AttributePSVIInfo : public ::Il2CppObject {
    public:
    public:
    // System.String localName
    // Size: 0x8
    // Offset: 0x10
    ::StringW localName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String namespaceUri
    // Size: 0x8
    // Offset: 0x18
    ::StringW namespaceUri;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Object typedAttributeValue
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppObject* typedAttributeValue;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // System.Xml.Schema.XmlSchemaInfo attributeSchemaInfo
    // Size: 0x8
    // Offset: 0x28
    ::System::Xml::Schema::XmlSchemaInfo* attributeSchemaInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaInfo*) == 0x8);
    public:
    // Get instance field reference: System.String localName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_localName();
    // Get instance field reference: System.String namespaceUri
    [[deprecated("Use field access instead!")]] ::StringW& dyn_namespaceUri();
    // Get instance field reference: System.Object typedAttributeValue
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_typedAttributeValue();
    // Get instance field reference: System.Xml.Schema.XmlSchemaInfo attributeSchemaInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaInfo*& dyn_attributeSchemaInfo();
    // System.Void .ctor()
    // Offset: 0xB5BC70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AttributePSVIInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::AttributePSVIInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AttributePSVIInfo*, creationType>()));
    }
    // System.Void Reset()
    // Offset: 0xB5BCD8
    void Reset();
  }; // System.Xml.AttributePSVIInfo
  #pragma pack(pop)
  static check_size<sizeof(AttributePSVIInfo), 40 + sizeof(::System::Xml::Schema::XmlSchemaInfo*)> __System_Xml_AttributePSVIInfoSizeCheck;
  static_assert(sizeof(AttributePSVIInfo) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::AttributePSVIInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::AttributePSVIInfo::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::AttributePSVIInfo::*)()>(&System::Xml::AttributePSVIInfo::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::AttributePSVIInfo*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
