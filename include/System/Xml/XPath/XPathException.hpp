// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.SystemException
#include "System/SystemException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System.Xml.XPath
namespace System::Xml::XPath {
  // Forward declaring type: XPathException
  class XPathException;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XPath::XPathException);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XPath::XPathException*, "System.Xml.XPath", "XPathException");
// Type namespace: System.Xml.XPath
namespace System::Xml::XPath {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XPath.XPathException
  // [TokenAttribute] Offset: FFFFFFFF
  class XPathException : public ::System::SystemException {
    public:
    public:
    // private System.String res
    // Size: 0x8
    // Offset: 0x88
    ::StringW res;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String[] args
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<::StringW> args;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.String message
    // Size: 0x8
    // Offset: 0x98
    ::StringW message;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.String res
    [[deprecated]] ::StringW& dyn_res();
    // Get instance field reference: private System.String[] args
    [[deprecated]] ::ArrayW<::StringW>& dyn_args();
    // Get instance field reference: private System.String message
    [[deprecated]] ::StringW& dyn_message();
    // private System.Void .ctor(System.String res, System.String[] args)
    // Offset: 0xF7B234
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XPathException* New_ctor(::StringW res, ::ArrayW<::StringW> args) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XPath::XPathException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XPathException*, creationType>(res, args)));
    }
    // private System.Void .ctor(System.String res, System.String[] args, System.Exception inner)
    // Offset: 0xF7B150
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XPathException* New_ctor(::StringW res, ::ArrayW<::StringW> args, ::System::Exception* inner) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XPath::XPathException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XPathException*, creationType>(res, args, inner)));
    }
    // static System.Xml.XPath.XPathException Create(System.String res)
    // Offset: 0xF7B1B0
    static ::System::Xml::XPath::XPathException* Create(::StringW res);
    // static System.Xml.XPath.XPathException Create(System.String res, System.String arg)
    // Offset: 0xF7B290
    static ::System::Xml::XPath::XPathException* Create(::StringW res, ::StringW arg);
    // static System.Xml.XPath.XPathException Create(System.String res, System.String arg, System.String arg2)
    // Offset: 0xF7B388
    static ::System::Xml::XPath::XPathException* Create(::StringW res, ::StringW arg, ::StringW arg2);
    // static private System.String CreateMessage(System.String res, System.String[] args)
    // Offset: 0xF7ADDC
    static ::StringW CreateMessage(::StringW res, ::ArrayW<::StringW> args);
    // public override System.String get_Message()
    // Offset: 0xF7B4AC
    // Implemented from: System.Exception
    // Base method: System.String Exception::get_Message()
    ::StringW get_Message();
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xF7ABA0
    // Implemented from: System.SystemException
    // Base method: System.Void SystemException::.ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Base method: System.Void Exception::.ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XPathException* New_ctor(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XPath::XPathException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XPathException*, creationType>(info, context)));
    }
    // public System.Void .ctor()
    // Offset: 0xF7B008
    // Implemented from: System.SystemException
    // Base method: System.Void SystemException::.ctor()
    // Base method: System.Void Exception::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XPathException* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XPath::XPathException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XPathException*, creationType>()));
    }
    // public System.Void .ctor(System.String message, System.Exception innerException)
    // Offset: 0xF7B060
    // Implemented from: System.SystemException
    // Base method: System.Void SystemException::.ctor(System.String message, System.Exception innerException)
    // Base method: System.Void Exception::.ctor(System.String message, System.Exception innerException)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XPathException* New_ctor(::StringW message, ::System::Exception* innerException) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XPath::XPathException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XPathException*, creationType>(message, innerException)));
    }
    // public override System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xF7AF14
    // Implemented from: System.Exception
    // Base method: System.Void Exception::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context);
  }; // System.Xml.XPath.XPathException
  #pragma pack(pop)
  static check_size<sizeof(XPathException), 152 + sizeof(::StringW)> __System_Xml_XPath_XPathExceptionSizeCheck;
  static_assert(sizeof(XPathException) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XPath::XPathException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XPath::XPathException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XPath::XPathException::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XPath::XPathException* (*)(::StringW)>(&System::Xml::XPath::XPathException::Create)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XPath::XPathException*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res});
  }
};
// Writing MetadataGetter for method: System::Xml::XPath::XPathException::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XPath::XPathException* (*)(::StringW, ::StringW)>(&System::Xml::XPath::XPathException::Create)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XPath::XPathException*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res, arg});
  }
};
// Writing MetadataGetter for method: System::Xml::XPath::XPathException::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XPath::XPathException* (*)(::StringW, ::StringW, ::StringW)>(&System::Xml::XPath::XPathException::Create)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XPath::XPathException*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res, arg, arg2});
  }
};
// Writing MetadataGetter for method: System::Xml::XPath::XPathException::CreateMessage
// Il2CppName: CreateMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::ArrayW<::StringW>)>(&System::Xml::XPath::XPathException::CreateMessage)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XPath::XPathException*), "CreateMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res, args});
  }
};
// Writing MetadataGetter for method: System::Xml::XPath::XPathException::get_Message
// Il2CppName: get_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XPath::XPathException::*)()>(&System::Xml::XPath::XPathException::get_Message)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XPath::XPathException*), "get_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XPath::XPathException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XPath::XPathException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XPath::XPathException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XPath::XPathException::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XPath::XPathException::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Xml::XPath::XPathException::GetObjectData)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XPath::XPathException*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context});
  }
};
