// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.XmlReader
#include "System/Xml/XmlReader.hpp"
// Including type: System.Xml.IXmlLineInfo
#include "System/Xml/IXmlLineInfo.hpp"
// Including type: System.Xml.IXmlNamespaceResolver
#include "System/Xml/IXmlNamespaceResolver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlTextReaderImpl
  class XmlTextReaderImpl;
  // Forward declaring type: WhitespaceHandling
  struct WhitespaceHandling;
  // Forward declaring type: EntityHandling
  struct EntityHandling;
  // Forward declaring type: XmlResolver
  class XmlResolver;
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: XmlNamespaceScope
  struct XmlNamespaceScope;
  // Forward declaring type: XmlNodeType
  struct XmlNodeType;
  // Forward declaring type: XmlSpace
  struct XmlSpace;
  // Forward declaring type: ReadState
  struct ReadState;
  // Forward declaring type: XmlNamespaceManager
  class XmlNamespaceManager;
  // Forward declaring type: IDtdInfo
  class IDtdInfo;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
  // Forward declaring type: TextReader
  class TextReader;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XmlTextReader
  class XmlTextReader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XmlTextReader);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlTextReader*, "System.Xml", "XmlTextReader");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlTextReader
  // [TokenAttribute] Offset: FFFFFFFF
  // [EditorBrowsableAttribute] Offset: 6A4188
  class XmlTextReader : public ::System::Xml::XmlReader/*, public ::System::Xml::IXmlLineInfo, public ::System::Xml::IXmlNamespaceResolver*/ {
    public:
    public:
    // private System.Xml.XmlTextReaderImpl impl
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::XmlTextReaderImpl* impl;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlTextReaderImpl*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Xml::IXmlLineInfo
    operator ::System::Xml::IXmlLineInfo() noexcept {
      return *reinterpret_cast<::System::Xml::IXmlLineInfo*>(this);
    }
    // Creating interface conversion operator: operator ::System::Xml::IXmlNamespaceResolver
    operator ::System::Xml::IXmlNamespaceResolver() noexcept {
      return *reinterpret_cast<::System::Xml::IXmlNamespaceResolver*>(this);
    }
    // Creating conversion operator: operator ::System::Xml::XmlTextReaderImpl*
    constexpr operator ::System::Xml::XmlTextReaderImpl*() const noexcept {
      return impl;
    }
    // Get instance field reference: private System.Xml.XmlTextReaderImpl impl
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlTextReaderImpl*& dyn_impl();
    // public System.Int32 get_LineNumber()
    // Offset: 0x15608A8
    int get_LineNumber();
    // public System.Int32 get_LinePosition()
    // Offset: 0x15608EC
    int get_LinePosition();
    // public System.Boolean get_Namespaces()
    // Offset: 0x15609FC
    bool get_Namespaces();
    // public System.Boolean get_Normalization()
    // Offset: 0x1560A18
    bool get_Normalization();
    // public System.Void set_Normalization(System.Boolean value)
    // Offset: 0x1560A34
    void set_Normalization(bool value);
    // public System.Void set_WhitespaceHandling(System.Xml.WhitespaceHandling value)
    // Offset: 0x1560B80
    void set_WhitespaceHandling(::System::Xml::WhitespaceHandling value);
    // public System.Void set_EntityHandling(System.Xml.EntityHandling value)
    // Offset: 0x1560C64
    void set_EntityHandling(::System::Xml::EntityHandling value);
    // public System.Void set_XmlResolver(System.Xml.XmlResolver value)
    // Offset: 0x1560CFC
    void set_XmlResolver(::System::Xml::XmlResolver* value);
    // System.Xml.XmlTextReaderImpl get_Impl()
    // Offset: 0x1560D80
    ::System::Xml::XmlTextReaderImpl* get_Impl();
    // System.Void set_XmlValidatingReaderCompatibilityMode(System.Boolean value)
    // Offset: 0x1560DAC
    void set_XmlValidatingReaderCompatibilityMode(bool value);
    // public System.Void .ctor(System.IO.Stream input)
    // Offset: 0x155FE18
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlTextReader* New_ctor(::System::IO::Stream* input) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlTextReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlTextReader*, creationType>(input)));
    }
    // public System.Void .ctor(System.String url, System.IO.Stream input, System.Xml.XmlNameTable nt)
    // Offset: 0x155FF58
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlTextReader* New_ctor(::StringW url, ::System::IO::Stream* input, ::System::Xml::XmlNameTable* nt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlTextReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlTextReader*, creationType>(url, input, nt)));
    }
    // public System.Void .ctor(System.IO.TextReader input)
    // Offset: 0x15600F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlTextReader* New_ctor(::System::IO::TextReader* input) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlTextReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlTextReader*, creationType>(input)));
    }
    // public System.Void .ctor(System.IO.TextReader input, System.Xml.XmlNameTable nt)
    // Offset: 0x1560230
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlTextReader* New_ctor(::System::IO::TextReader* input, ::System::Xml::XmlNameTable* nt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlTextReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlTextReader*, creationType>(input, nt)));
    }
    // public System.Boolean HasLineInfo()
    // Offset: 0x15608A0
    bool HasLineInfo();
    // private System.Collections.Generic.IDictionary`2<System.String,System.String> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope scope)
    // Offset: 0x1560930
    ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* System_Xml_IXmlNamespaceResolver_GetNamespacesInScope(::System::Xml::XmlNamespaceScope scope);
    // private System.String System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String prefix)
    // Offset: 0x1560984
    ::StringW System_Xml_IXmlNamespaceResolver_LookupNamespace(::StringW prefix);
    // private System.String System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String namespaceName)
    // Offset: 0x15609A8
    ::StringW System_Xml_IXmlNamespaceResolver_LookupPrefix(::StringW namespaceName);
    // public override System.Xml.XmlNodeType get_NodeType()
    // Offset: 0x1560350
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.XmlNodeType XmlReader::get_NodeType()
    ::System::Xml::XmlNodeType get_NodeType();
    // public override System.String get_Name()
    // Offset: 0x1560370
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_Name()
    ::StringW get_Name();
    // public override System.String get_LocalName()
    // Offset: 0x1560390
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_LocalName()
    ::StringW get_LocalName();
    // public override System.String get_NamespaceURI()
    // Offset: 0x15603B0
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_NamespaceURI()
    ::StringW get_NamespaceURI();
    // public override System.String get_Prefix()
    // Offset: 0x15603D0
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_Prefix()
    ::StringW get_Prefix();
    // public override System.String get_Value()
    // Offset: 0x15603F0
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_Value()
    ::StringW get_Value();
    // public override System.Int32 get_Depth()
    // Offset: 0x1560410
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Int32 XmlReader::get_Depth()
    int get_Depth();
    // public override System.String get_BaseURI()
    // Offset: 0x1560430
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_BaseURI()
    ::StringW get_BaseURI();
    // public override System.Boolean get_IsEmptyElement()
    // Offset: 0x1560454
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::get_IsEmptyElement()
    bool get_IsEmptyElement();
    // public override System.Boolean get_IsDefault()
    // Offset: 0x1560478
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::get_IsDefault()
    bool get_IsDefault();
    // public override System.Char get_QuoteChar()
    // Offset: 0x156049C
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Char XmlReader::get_QuoteChar()
    ::Il2CppChar get_QuoteChar();
    // public override System.Xml.XmlSpace get_XmlSpace()
    // Offset: 0x15604C0
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.XmlSpace XmlReader::get_XmlSpace()
    ::System::Xml::XmlSpace get_XmlSpace();
    // public override System.String get_XmlLang()
    // Offset: 0x15604E4
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_XmlLang()
    ::StringW get_XmlLang();
    // public override System.Int32 get_AttributeCount()
    // Offset: 0x1560508
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Int32 XmlReader::get_AttributeCount()
    int get_AttributeCount();
    // public override System.Boolean get_EOF()
    // Offset: 0x1560694
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::get_EOF()
    bool get_EOF();
    // public override System.Xml.ReadState get_ReadState()
    // Offset: 0x15606DC
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.ReadState XmlReader::get_ReadState()
    ::System::Xml::ReadState get_ReadState();
    // public override System.Xml.XmlNameTable get_NameTable()
    // Offset: 0x1560724
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.XmlNameTable XmlReader::get_NameTable()
    ::System::Xml::XmlNameTable* get_NameTable();
    // public override System.Boolean get_CanResolveEntity()
    // Offset: 0x1560784
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::get_CanResolveEntity()
    bool get_CanResolveEntity();
    // public override System.Boolean get_CanReadValueChunk()
    // Offset: 0x15607B0
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::get_CanReadValueChunk()
    bool get_CanReadValueChunk();
    // override System.Xml.XmlNamespaceManager get_NamespaceManager()
    // Offset: 0x1560D88
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.XmlNamespaceManager XmlReader::get_NamespaceManager()
    ::System::Xml::XmlNamespaceManager* get_NamespaceManager();
    // override System.Xml.IDtdInfo get_DtdInfo()
    // Offset: 0x1560EA4
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.IDtdInfo XmlReader::get_DtdInfo()
    ::System::Xml::IDtdInfo* get_DtdInfo();
    // public override System.String GetAttribute(System.String name)
    // Offset: 0x156052C
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::GetAttribute(System.String name)
    ::StringW GetAttribute(::StringW name);
    // public override System.String GetAttribute(System.String localName, System.String namespaceURI)
    // Offset: 0x1560550
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::GetAttribute(System.String localName, System.String namespaceURI)
    ::StringW GetAttribute(::StringW localName, ::StringW namespaceURI);
    // public override System.String GetAttribute(System.Int32 i)
    // Offset: 0x1560574
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::GetAttribute(System.Int32 i)
    ::StringW GetAttribute(int i);
    // public override System.Boolean MoveToAttribute(System.String name)
    // Offset: 0x1560598
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::MoveToAttribute(System.String name)
    bool MoveToAttribute(::StringW name);
    // public override System.Void MoveToAttribute(System.Int32 i)
    // Offset: 0x15605BC
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Void XmlReader::MoveToAttribute(System.Int32 i)
    void MoveToAttribute(int i);
    // public override System.Boolean MoveToFirstAttribute()
    // Offset: 0x15605E0
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::MoveToFirstAttribute()
    bool MoveToFirstAttribute();
    // public override System.Boolean MoveToNextAttribute()
    // Offset: 0x1560604
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::MoveToNextAttribute()
    bool MoveToNextAttribute();
    // public override System.Boolean MoveToElement()
    // Offset: 0x1560628
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::MoveToElement()
    bool MoveToElement();
    // public override System.Boolean ReadAttributeValue()
    // Offset: 0x156064C
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::ReadAttributeValue()
    bool ReadAttributeValue();
    // public override System.Boolean Read()
    // Offset: 0x1560670
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::Read()
    bool Read();
    // public override System.Void Close()
    // Offset: 0x15606B8
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Void XmlReader::Close()
    void Close();
    // public override System.Void Skip()
    // Offset: 0x1560700
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Void XmlReader::Skip()
    void Skip();
    // public override System.String LookupNamespace(System.String prefix)
    // Offset: 0x1560748
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::LookupNamespace(System.String prefix)
    ::StringW LookupNamespace(::StringW prefix);
    // public override System.Void ResolveEntity()
    // Offset: 0x156078C
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Void XmlReader::ResolveEntity()
    void ResolveEntity();
    // public override System.String ReadString()
    // Offset: 0x15607B8
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::ReadString()
    ::StringW ReadString();
  }; // System.Xml.XmlTextReader
  #pragma pack(pop)
  static check_size<sizeof(XmlTextReader), 16 + sizeof(::System::Xml::XmlTextReaderImpl*)> __System_Xml_XmlTextReaderSizeCheck;
  static_assert(sizeof(XmlTextReader) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_LineNumber
// Il2CppName: get_LineNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_LineNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_LineNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_LinePosition
// Il2CppName: get_LinePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_LinePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_LinePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_Namespaces
// Il2CppName: get_Namespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_Namespaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_Namespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_Normalization
// Il2CppName: get_Normalization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_Normalization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_Normalization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::set_Normalization
// Il2CppName: set_Normalization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReader::*)(bool)>(&System::Xml::XmlTextReader::set_Normalization)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "set_Normalization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::set_WhitespaceHandling
// Il2CppName: set_WhitespaceHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReader::*)(::System::Xml::WhitespaceHandling)>(&System::Xml::XmlTextReader::set_WhitespaceHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "WhitespaceHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "set_WhitespaceHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::set_EntityHandling
// Il2CppName: set_EntityHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReader::*)(::System::Xml::EntityHandling)>(&System::Xml::XmlTextReader::set_EntityHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "EntityHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "set_EntityHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::set_XmlResolver
// Il2CppName: set_XmlResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReader::*)(::System::Xml::XmlResolver*)>(&System::Xml::XmlTextReader::set_XmlResolver)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "set_XmlResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_Impl
// Il2CppName: get_Impl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlTextReaderImpl* (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_Impl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_Impl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::set_XmlValidatingReaderCompatibilityMode
// Il2CppName: set_XmlValidatingReaderCompatibilityMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReader::*)(bool)>(&System::Xml::XmlTextReader::set_XmlValidatingReaderCompatibilityMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "set_XmlValidatingReaderCompatibilityMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlTextReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlTextReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlTextReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlTextReader::HasLineInfo
// Il2CppName: HasLineInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::HasLineInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "HasLineInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::System_Xml_IXmlNamespaceResolver_GetNamespacesInScope
// Il2CppName: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* (System::Xml::XmlTextReader::*)(::System::Xml::XmlNamespaceScope)>(&System::Xml::XmlTextReader::System_Xml_IXmlNamespaceResolver_GetNamespacesInScope)> {
  static const MethodInfo* get() {
    static auto* scope = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamespaceScope")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scope});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::System_Xml_IXmlNamespaceResolver_LookupNamespace
// Il2CppName: System.Xml.IXmlNamespaceResolver.LookupNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReader::*)(::StringW)>(&System::Xml::XmlTextReader::System_Xml_IXmlNamespaceResolver_LookupNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "System.Xml.IXmlNamespaceResolver.LookupNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::System_Xml_IXmlNamespaceResolver_LookupPrefix
// Il2CppName: System.Xml.IXmlNamespaceResolver.LookupPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReader::*)(::StringW)>(&System::Xml::XmlTextReader::System_Xml_IXmlNamespaceResolver_LookupPrefix)> {
  static const MethodInfo* get() {
    static auto* namespaceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "System.Xml.IXmlNamespaceResolver.LookupPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{namespaceName});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_NodeType
// Il2CppName: get_NodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeType (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_NodeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_NodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_LocalName
// Il2CppName: get_LocalName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_LocalName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_LocalName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_NamespaceURI
// Il2CppName: get_NamespaceURI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_NamespaceURI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_NamespaceURI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_Prefix
// Il2CppName: get_Prefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_Prefix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_Prefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_Depth
// Il2CppName: get_Depth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_Depth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_Depth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_BaseURI
// Il2CppName: get_BaseURI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_BaseURI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_BaseURI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_IsEmptyElement
// Il2CppName: get_IsEmptyElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_IsEmptyElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_IsEmptyElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_IsDefault
// Il2CppName: get_IsDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_IsDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_IsDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_QuoteChar
// Il2CppName: get_QuoteChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_QuoteChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_QuoteChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_XmlSpace
// Il2CppName: get_XmlSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlSpace (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_XmlSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_XmlSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_XmlLang
// Il2CppName: get_XmlLang
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_XmlLang)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_XmlLang", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_AttributeCount
// Il2CppName: get_AttributeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_AttributeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_AttributeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_EOF
// Il2CppName: get_EOF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_EOF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_EOF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_ReadState
// Il2CppName: get_ReadState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::ReadState (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_ReadState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_ReadState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_NameTable
// Il2CppName: get_NameTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNameTable* (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_NameTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_NameTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_CanResolveEntity
// Il2CppName: get_CanResolveEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_CanResolveEntity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_CanResolveEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_CanReadValueChunk
// Il2CppName: get_CanReadValueChunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_CanReadValueChunk)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_CanReadValueChunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_NamespaceManager
// Il2CppName: get_NamespaceManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNamespaceManager* (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_NamespaceManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_NamespaceManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::get_DtdInfo
// Il2CppName: get_DtdInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::IDtdInfo* (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::get_DtdInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "get_DtdInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::GetAttribute
// Il2CppName: GetAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReader::*)(::StringW)>(&System::Xml::XmlTextReader::GetAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "GetAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::GetAttribute
// Il2CppName: GetAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReader::*)(::StringW, ::StringW)>(&System::Xml::XmlTextReader::GetAttribute)> {
  static const MethodInfo* get() {
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "GetAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localName, namespaceURI});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::GetAttribute
// Il2CppName: GetAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReader::*)(int)>(&System::Xml::XmlTextReader::GetAttribute)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "GetAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::MoveToAttribute
// Il2CppName: MoveToAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReader::*)(::StringW)>(&System::Xml::XmlTextReader::MoveToAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "MoveToAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::MoveToAttribute
// Il2CppName: MoveToAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReader::*)(int)>(&System::Xml::XmlTextReader::MoveToAttribute)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "MoveToAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::MoveToFirstAttribute
// Il2CppName: MoveToFirstAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::MoveToFirstAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "MoveToFirstAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::MoveToNextAttribute
// Il2CppName: MoveToNextAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::MoveToNextAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "MoveToNextAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::MoveToElement
// Il2CppName: MoveToElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::MoveToElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "MoveToElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::ReadAttributeValue
// Il2CppName: ReadAttributeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::ReadAttributeValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "ReadAttributeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::Read)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::Skip
// Il2CppName: Skip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::Skip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "Skip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::LookupNamespace
// Il2CppName: LookupNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReader::*)(::StringW)>(&System::Xml::XmlTextReader::LookupNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "LookupNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::ResolveEntity
// Il2CppName: ResolveEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::ResolveEntity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "ResolveEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReader::ReadString
// Il2CppName: ReadString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReader::*)()>(&System::Xml::XmlTextReader::ReadString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReader*), "ReadString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
