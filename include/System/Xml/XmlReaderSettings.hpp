// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.ConformanceLevel
#include "System/Xml/ConformanceLevel.hpp"
// Including type: System.Xml.DtdProcessing
#include "System/Xml/DtdProcessing.hpp"
// Including type: System.Xml.ValidationType
#include "System/Xml/ValidationType.hpp"
// Including type: System.Xml.Schema.XmlSchemaValidationFlags
#include "System/Xml/Schema/XmlSchemaValidationFlags.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: XmlResolver
  class XmlResolver;
  // Forward declaring type: XmlReader
  class XmlReader;
  // Forward declaring type: XmlParserContext
  class XmlParserContext;
  // Forward declaring type: XmlValidatingReaderImpl
  class XmlValidatingReaderImpl;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaSet
  class XmlSchemaSet;
  // Forward declaring type: ValidationEventHandler
  class ValidationEventHandler;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
  // Forward declaring type: TextReader
  class TextReader;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XmlReaderSettings
  class XmlReaderSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XmlReaderSettings);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlReaderSettings*, "System.Xml", "XmlReaderSettings");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x6B
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlReaderSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlReaderSettings : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean useAsync
    // Size: 0x1
    // Offset: 0x10
    bool useAsync;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useAsync and: nameTable
    char __padding0[0x7] = {};
    // private System.Xml.XmlNameTable nameTable
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::XmlNameTable* nameTable;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNameTable*) == 0x8);
    // private System.Xml.XmlResolver xmlResolver
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::XmlResolver* xmlResolver;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlResolver*) == 0x8);
    // private System.Int32 lineNumberOffset
    // Size: 0x4
    // Offset: 0x28
    int lineNumberOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 linePositionOffset
    // Size: 0x4
    // Offset: 0x2C
    int linePositionOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Xml.ConformanceLevel conformanceLevel
    // Size: 0x4
    // Offset: 0x30
    ::System::Xml::ConformanceLevel conformanceLevel;
    // Field size check
    static_assert(sizeof(::System::Xml::ConformanceLevel) == 0x4);
    // private System.Boolean checkCharacters
    // Size: 0x1
    // Offset: 0x34
    bool checkCharacters;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: checkCharacters and: maxCharactersInDocument
    char __padding6[0x3] = {};
    // private System.Int64 maxCharactersInDocument
    // Size: 0x8
    // Offset: 0x38
    int64_t maxCharactersInDocument;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 maxCharactersFromEntities
    // Size: 0x8
    // Offset: 0x40
    int64_t maxCharactersFromEntities;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Boolean ignoreWhitespace
    // Size: 0x1
    // Offset: 0x48
    bool ignoreWhitespace;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean ignorePIs
    // Size: 0x1
    // Offset: 0x49
    bool ignorePIs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean ignoreComments
    // Size: 0x1
    // Offset: 0x4A
    bool ignoreComments;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ignoreComments and: dtdProcessing
    char __padding11[0x1] = {};
    // private System.Xml.DtdProcessing dtdProcessing
    // Size: 0x4
    // Offset: 0x4C
    ::System::Xml::DtdProcessing dtdProcessing;
    // Field size check
    static_assert(sizeof(::System::Xml::DtdProcessing) == 0x4);
    // private System.Xml.ValidationType validationType
    // Size: 0x4
    // Offset: 0x50
    ::System::Xml::ValidationType validationType;
    // Field size check
    static_assert(sizeof(::System::Xml::ValidationType) == 0x4);
    // private System.Xml.Schema.XmlSchemaValidationFlags validationFlags
    // Size: 0x4
    // Offset: 0x54
    ::System::Xml::Schema::XmlSchemaValidationFlags validationFlags;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaValidationFlags) == 0x4);
    // private System.Xml.Schema.XmlSchemaSet schemas
    // Size: 0x8
    // Offset: 0x58
    ::System::Xml::Schema::XmlSchemaSet* schemas;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaSet*) == 0x8);
    // private System.Xml.Schema.ValidationEventHandler valEventHandler
    // Size: 0x8
    // Offset: 0x60
    ::System::Xml::Schema::ValidationEventHandler* valEventHandler;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::ValidationEventHandler*) == 0x8);
    // private System.Boolean closeInput
    // Size: 0x1
    // Offset: 0x68
    bool closeInput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isReadOnly
    // Size: 0x1
    // Offset: 0x69
    bool isReadOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IsXmlResolverSet>k__BackingField
    // Size: 0x1
    // Offset: 0x6A
    bool IsXmlResolverSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private System.Nullable`1<System.Boolean> s_enableLegacyXmlSettings
    static ::System::Nullable_1<bool> _get_s_enableLegacyXmlSettings();
    // Set static field: static private System.Nullable`1<System.Boolean> s_enableLegacyXmlSettings
    static void _set_s_enableLegacyXmlSettings(::System::Nullable_1<bool> value);
    // Get instance field reference: private System.Boolean useAsync
    [[deprecated]] bool& dyn_useAsync();
    // Get instance field reference: private System.Xml.XmlNameTable nameTable
    [[deprecated]] ::System::Xml::XmlNameTable*& dyn_nameTable();
    // Get instance field reference: private System.Xml.XmlResolver xmlResolver
    [[deprecated]] ::System::Xml::XmlResolver*& dyn_xmlResolver();
    // Get instance field reference: private System.Int32 lineNumberOffset
    [[deprecated]] int& dyn_lineNumberOffset();
    // Get instance field reference: private System.Int32 linePositionOffset
    [[deprecated]] int& dyn_linePositionOffset();
    // Get instance field reference: private System.Xml.ConformanceLevel conformanceLevel
    [[deprecated]] ::System::Xml::ConformanceLevel& dyn_conformanceLevel();
    // Get instance field reference: private System.Boolean checkCharacters
    [[deprecated]] bool& dyn_checkCharacters();
    // Get instance field reference: private System.Int64 maxCharactersInDocument
    [[deprecated]] int64_t& dyn_maxCharactersInDocument();
    // Get instance field reference: private System.Int64 maxCharactersFromEntities
    [[deprecated]] int64_t& dyn_maxCharactersFromEntities();
    // Get instance field reference: private System.Boolean ignoreWhitespace
    [[deprecated]] bool& dyn_ignoreWhitespace();
    // Get instance field reference: private System.Boolean ignorePIs
    [[deprecated]] bool& dyn_ignorePIs();
    // Get instance field reference: private System.Boolean ignoreComments
    [[deprecated]] bool& dyn_ignoreComments();
    // Get instance field reference: private System.Xml.DtdProcessing dtdProcessing
    [[deprecated]] ::System::Xml::DtdProcessing& dyn_dtdProcessing();
    // Get instance field reference: private System.Xml.ValidationType validationType
    [[deprecated]] ::System::Xml::ValidationType& dyn_validationType();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaValidationFlags validationFlags
    [[deprecated]] ::System::Xml::Schema::XmlSchemaValidationFlags& dyn_validationFlags();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaSet schemas
    [[deprecated]] ::System::Xml::Schema::XmlSchemaSet*& dyn_schemas();
    // Get instance field reference: private System.Xml.Schema.ValidationEventHandler valEventHandler
    [[deprecated]] ::System::Xml::Schema::ValidationEventHandler*& dyn_valEventHandler();
    // Get instance field reference: private System.Boolean closeInput
    [[deprecated]] bool& dyn_closeInput();
    // Get instance field reference: private System.Boolean isReadOnly
    [[deprecated]] bool& dyn_isReadOnly();
    // Get instance field reference: private System.Boolean <IsXmlResolverSet>k__BackingField
    [[deprecated]] bool& dyn_$IsXmlResolverSet$k__BackingField();
    // public System.Boolean get_Async()
    // Offset: 0x10275F4
    bool get_Async();
    // public System.Void set_Async(System.Boolean value)
    // Offset: 0x10275FC
    void set_Async(bool value);
    // public System.Xml.XmlNameTable get_NameTable()
    // Offset: 0x1027710
    ::System::Xml::XmlNameTable* get_NameTable();
    // public System.Void set_NameTable(System.Xml.XmlNameTable value)
    // Offset: 0x1027718
    void set_NameTable(::System::Xml::XmlNameTable* value);
    // System.Boolean get_IsXmlResolverSet()
    // Offset: 0x1027778
    bool get_IsXmlResolverSet();
    // System.Void set_IsXmlResolverSet(System.Boolean value)
    // Offset: 0x1027780
    void set_IsXmlResolverSet(bool value);
    // public System.Void set_XmlResolver(System.Xml.XmlResolver value)
    // Offset: 0x102778C
    void set_XmlResolver(::System::Xml::XmlResolver* value);
    // public System.Int32 get_LineNumberOffset()
    // Offset: 0x1027804
    int get_LineNumberOffset();
    // public System.Void set_LineNumberOffset(System.Int32 value)
    // Offset: 0x102780C
    void set_LineNumberOffset(int value);
    // public System.Int32 get_LinePositionOffset()
    // Offset: 0x102786C
    int get_LinePositionOffset();
    // public System.Void set_LinePositionOffset(System.Int32 value)
    // Offset: 0x1027874
    void set_LinePositionOffset(int value);
    // public System.Xml.ConformanceLevel get_ConformanceLevel()
    // Offset: 0x10278D4
    ::System::Xml::ConformanceLevel get_ConformanceLevel();
    // public System.Void set_ConformanceLevel(System.Xml.ConformanceLevel value)
    // Offset: 0x10278DC
    void set_ConformanceLevel(::System::Xml::ConformanceLevel value);
    // public System.Boolean get_CheckCharacters()
    // Offset: 0x102798C
    bool get_CheckCharacters();
    // public System.Void set_CheckCharacters(System.Boolean value)
    // Offset: 0x1027994
    void set_CheckCharacters(bool value);
    // public System.Int64 get_MaxCharactersInDocument()
    // Offset: 0x10279F8
    int64_t get_MaxCharactersInDocument();
    // public System.Void set_MaxCharactersInDocument(System.Int64 value)
    // Offset: 0x1027A00
    void set_MaxCharactersInDocument(int64_t value);
    // public System.Int64 get_MaxCharactersFromEntities()
    // Offset: 0x1027AAC
    int64_t get_MaxCharactersFromEntities();
    // public System.Void set_MaxCharactersFromEntities(System.Int64 value)
    // Offset: 0x1027AB4
    void set_MaxCharactersFromEntities(int64_t value);
    // public System.Boolean get_IgnoreWhitespace()
    // Offset: 0x1027B60
    bool get_IgnoreWhitespace();
    // public System.Void set_IgnoreWhitespace(System.Boolean value)
    // Offset: 0x1027B68
    void set_IgnoreWhitespace(bool value);
    // public System.Boolean get_IgnoreProcessingInstructions()
    // Offset: 0x1027BCC
    bool get_IgnoreProcessingInstructions();
    // public System.Void set_IgnoreProcessingInstructions(System.Boolean value)
    // Offset: 0x1027BD4
    void set_IgnoreProcessingInstructions(bool value);
    // public System.Boolean get_IgnoreComments()
    // Offset: 0x1027C38
    bool get_IgnoreComments();
    // public System.Void set_IgnoreComments(System.Boolean value)
    // Offset: 0x1027C40
    void set_IgnoreComments(bool value);
    // public System.Xml.DtdProcessing get_DtdProcessing()
    // Offset: 0x1027CA4
    ::System::Xml::DtdProcessing get_DtdProcessing();
    // public System.Void set_DtdProcessing(System.Xml.DtdProcessing value)
    // Offset: 0x1027CAC
    void set_DtdProcessing(::System::Xml::DtdProcessing value);
    // public System.Boolean get_CloseInput()
    // Offset: 0x1027D5C
    bool get_CloseInput();
    // public System.Void set_CloseInput(System.Boolean value)
    // Offset: 0x1027D64
    void set_CloseInput(bool value);
    // public System.Xml.ValidationType get_ValidationType()
    // Offset: 0x1027DC8
    ::System::Xml::ValidationType get_ValidationType();
    // public System.Void set_ValidationType(System.Xml.ValidationType value)
    // Offset: 0x1027DD0
    void set_ValidationType(::System::Xml::ValidationType value);
    // public System.Xml.Schema.XmlSchemaValidationFlags get_ValidationFlags()
    // Offset: 0x1027E80
    ::System::Xml::Schema::XmlSchemaValidationFlags get_ValidationFlags();
    // public System.Void set_ValidationFlags(System.Xml.Schema.XmlSchemaValidationFlags value)
    // Offset: 0x1027E88
    void set_ValidationFlags(::System::Xml::Schema::XmlSchemaValidationFlags value);
    // public System.Xml.Schema.XmlSchemaSet get_Schemas()
    // Offset: 0x1027F38
    ::System::Xml::Schema::XmlSchemaSet* get_Schemas();
    // public System.Void set_Schemas(System.Xml.Schema.XmlSchemaSet value)
    // Offset: 0x1027FA0
    void set_Schemas(::System::Xml::Schema::XmlSchemaSet* value);
    // System.Void set_ReadOnly(System.Boolean value)
    // Offset: 0x1028074
    void set_ReadOnly(bool value);
    // System.Xml.XmlResolver GetXmlResolver()
    // Offset: 0x10277F4
    ::System::Xml::XmlResolver* GetXmlResolver();
    // System.Xml.XmlResolver GetXmlResolver_CheckConfig()
    // Offset: 0x10277FC
    ::System::Xml::XmlResolver* GetXmlResolver_CheckConfig();
    // public System.Xml.XmlReaderSettings Clone()
    // Offset: 0x1028000
    ::System::Xml::XmlReaderSettings* Clone();
    // System.Xml.Schema.ValidationEventHandler GetEventHandler()
    // Offset: 0x102806C
    ::System::Xml::Schema::ValidationEventHandler* GetEventHandler();
    // System.Xml.XmlReader CreateReader(System.IO.Stream input, System.Uri baseUri, System.String baseUriString, System.Xml.XmlParserContext inputContext)
    // Offset: 0x1026D10
    ::System::Xml::XmlReader* CreateReader(::System::IO::Stream* input, ::System::Uri* baseUri, ::StringW baseUriString, ::System::Xml::XmlParserContext* inputContext);
    // System.Xml.XmlReader CreateReader(System.IO.TextReader input, System.String baseUriString, System.Xml.XmlParserContext inputContext)
    // Offset: 0x1026F50
    ::System::Xml::XmlReader* CreateReader(::System::IO::TextReader* input, ::StringW baseUriString, ::System::Xml::XmlParserContext* inputContext);
    // private System.Void CheckReadOnly(System.String propertyName)
    // Offset: 0x1027660
    void CheckReadOnly(::StringW propertyName);
    // private System.Void Initialize()
    // Offset: 0x10275EC
    void Initialize();
    // private System.Void Initialize(System.Xml.XmlResolver resolver)
    // Offset: 0x1028080
    void Initialize(::System::Xml::XmlResolver* resolver);
    // static private System.Xml.XmlResolver CreateDefaultResolver()
    // Offset: 0x10280F0
    static ::System::Xml::XmlResolver* CreateDefaultResolver();
    // System.Xml.XmlReader AddValidation(System.Xml.XmlReader reader)
    // Offset: 0x1027424
    ::System::Xml::XmlReader* AddValidation(::System::Xml::XmlReader* reader);
    // private System.Xml.XmlValidatingReaderImpl CreateDtdValidatingReader(System.Xml.XmlReader baseReader)
    // Offset: 0x10282C4
    ::System::Xml::XmlValidatingReaderImpl* CreateDtdValidatingReader(::System::Xml::XmlReader* baseReader);
    // static System.Boolean EnableLegacyXmlSettings()
    // Offset: 0x1028148
    static bool EnableLegacyXmlSettings();
    // public System.Void .ctor()
    // Offset: 0x1026CE4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlReaderSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlReaderSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlReaderSettings*, creationType>()));
    }
  }; // System.Xml.XmlReaderSettings
  #pragma pack(pop)
  static check_size<sizeof(XmlReaderSettings), 106 + sizeof(bool)> __System_Xml_XmlReaderSettingsSizeCheck;
  static_assert(sizeof(XmlReaderSettings) == 0x6B);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::get_Async
// Il2CppName: get_Async
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::get_Async)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "get_Async", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_Async
// Il2CppName: set_Async
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(bool)>(&System::Xml::XmlReaderSettings::set_Async)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_Async", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::get_NameTable
// Il2CppName: get_NameTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNameTable* (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::get_NameTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "get_NameTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_NameTable
// Il2CppName: set_NameTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(::System::Xml::XmlNameTable*)>(&System::Xml::XmlReaderSettings::set_NameTable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_NameTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::get_IsXmlResolverSet
// Il2CppName: get_IsXmlResolverSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::get_IsXmlResolverSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "get_IsXmlResolverSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_IsXmlResolverSet
// Il2CppName: set_IsXmlResolverSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(bool)>(&System::Xml::XmlReaderSettings::set_IsXmlResolverSet)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_IsXmlResolverSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_XmlResolver
// Il2CppName: set_XmlResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(::System::Xml::XmlResolver*)>(&System::Xml::XmlReaderSettings::set_XmlResolver)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_XmlResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::get_LineNumberOffset
// Il2CppName: get_LineNumberOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::get_LineNumberOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "get_LineNumberOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_LineNumberOffset
// Il2CppName: set_LineNumberOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(int)>(&System::Xml::XmlReaderSettings::set_LineNumberOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_LineNumberOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::get_LinePositionOffset
// Il2CppName: get_LinePositionOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::get_LinePositionOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "get_LinePositionOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_LinePositionOffset
// Il2CppName: set_LinePositionOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(int)>(&System::Xml::XmlReaderSettings::set_LinePositionOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_LinePositionOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::get_ConformanceLevel
// Il2CppName: get_ConformanceLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::ConformanceLevel (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::get_ConformanceLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "get_ConformanceLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_ConformanceLevel
// Il2CppName: set_ConformanceLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(::System::Xml::ConformanceLevel)>(&System::Xml::XmlReaderSettings::set_ConformanceLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "ConformanceLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_ConformanceLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::get_CheckCharacters
// Il2CppName: get_CheckCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::get_CheckCharacters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "get_CheckCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_CheckCharacters
// Il2CppName: set_CheckCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(bool)>(&System::Xml::XmlReaderSettings::set_CheckCharacters)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_CheckCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::get_MaxCharactersInDocument
// Il2CppName: get_MaxCharactersInDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::get_MaxCharactersInDocument)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "get_MaxCharactersInDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_MaxCharactersInDocument
// Il2CppName: set_MaxCharactersInDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(int64_t)>(&System::Xml::XmlReaderSettings::set_MaxCharactersInDocument)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_MaxCharactersInDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::get_MaxCharactersFromEntities
// Il2CppName: get_MaxCharactersFromEntities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::get_MaxCharactersFromEntities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "get_MaxCharactersFromEntities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_MaxCharactersFromEntities
// Il2CppName: set_MaxCharactersFromEntities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(int64_t)>(&System::Xml::XmlReaderSettings::set_MaxCharactersFromEntities)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_MaxCharactersFromEntities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::get_IgnoreWhitespace
// Il2CppName: get_IgnoreWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::get_IgnoreWhitespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "get_IgnoreWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_IgnoreWhitespace
// Il2CppName: set_IgnoreWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(bool)>(&System::Xml::XmlReaderSettings::set_IgnoreWhitespace)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_IgnoreWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::get_IgnoreProcessingInstructions
// Il2CppName: get_IgnoreProcessingInstructions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::get_IgnoreProcessingInstructions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "get_IgnoreProcessingInstructions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_IgnoreProcessingInstructions
// Il2CppName: set_IgnoreProcessingInstructions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(bool)>(&System::Xml::XmlReaderSettings::set_IgnoreProcessingInstructions)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_IgnoreProcessingInstructions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::get_IgnoreComments
// Il2CppName: get_IgnoreComments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::get_IgnoreComments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "get_IgnoreComments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_IgnoreComments
// Il2CppName: set_IgnoreComments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(bool)>(&System::Xml::XmlReaderSettings::set_IgnoreComments)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_IgnoreComments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::get_DtdProcessing
// Il2CppName: get_DtdProcessing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdProcessing (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::get_DtdProcessing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "get_DtdProcessing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_DtdProcessing
// Il2CppName: set_DtdProcessing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(::System::Xml::DtdProcessing)>(&System::Xml::XmlReaderSettings::set_DtdProcessing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "DtdProcessing")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_DtdProcessing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::get_CloseInput
// Il2CppName: get_CloseInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::get_CloseInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "get_CloseInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_CloseInput
// Il2CppName: set_CloseInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(bool)>(&System::Xml::XmlReaderSettings::set_CloseInput)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_CloseInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::get_ValidationType
// Il2CppName: get_ValidationType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::ValidationType (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::get_ValidationType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "get_ValidationType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_ValidationType
// Il2CppName: set_ValidationType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(::System::Xml::ValidationType)>(&System::Xml::XmlReaderSettings::set_ValidationType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "ValidationType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_ValidationType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::get_ValidationFlags
// Il2CppName: get_ValidationFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaValidationFlags (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::get_ValidationFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "get_ValidationFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_ValidationFlags
// Il2CppName: set_ValidationFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(::System::Xml::Schema::XmlSchemaValidationFlags)>(&System::Xml::XmlReaderSettings::set_ValidationFlags)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaValidationFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_ValidationFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::get_Schemas
// Il2CppName: get_Schemas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaSet* (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::get_Schemas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "get_Schemas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_Schemas
// Il2CppName: set_Schemas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(::System::Xml::Schema::XmlSchemaSet*)>(&System::Xml::XmlReaderSettings::set_Schemas)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_Schemas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::set_ReadOnly
// Il2CppName: set_ReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(bool)>(&System::Xml::XmlReaderSettings::set_ReadOnly)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "set_ReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::GetXmlResolver
// Il2CppName: GetXmlResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlResolver* (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::GetXmlResolver)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "GetXmlResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::GetXmlResolver_CheckConfig
// Il2CppName: GetXmlResolver_CheckConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlResolver* (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::GetXmlResolver_CheckConfig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "GetXmlResolver_CheckConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlReaderSettings* (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::GetEventHandler
// Il2CppName: GetEventHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::ValidationEventHandler* (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::GetEventHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "GetEventHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::CreateReader
// Il2CppName: CreateReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlReader* (System::Xml::XmlReaderSettings::*)(::System::IO::Stream*, ::System::Uri*, ::StringW, ::System::Xml::XmlParserContext*)>(&System::Xml::XmlReaderSettings::CreateReader)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* baseUri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* baseUriString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* inputContext = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlParserContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "CreateReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, baseUri, baseUriString, inputContext});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::CreateReader
// Il2CppName: CreateReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlReader* (System::Xml::XmlReaderSettings::*)(::System::IO::TextReader*, ::StringW, ::System::Xml::XmlParserContext*)>(&System::Xml::XmlReaderSettings::CreateReader)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System.IO", "TextReader")->byval_arg;
    static auto* baseUriString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* inputContext = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlParserContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "CreateReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, baseUriString, inputContext});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::CheckReadOnly
// Il2CppName: CheckReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(::StringW)>(&System::Xml::XmlReaderSettings::CheckReadOnly)> {
  static const MethodInfo* get() {
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "CheckReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyName});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)()>(&System::Xml::XmlReaderSettings::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReaderSettings::*)(::System::Xml::XmlResolver*)>(&System::Xml::XmlReaderSettings::Initialize)> {
  static const MethodInfo* get() {
    static auto* resolver = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resolver});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::CreateDefaultResolver
// Il2CppName: CreateDefaultResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlResolver* (*)()>(&System::Xml::XmlReaderSettings::CreateDefaultResolver)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "CreateDefaultResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::AddValidation
// Il2CppName: AddValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlReader* (System::Xml::XmlReaderSettings::*)(::System::Xml::XmlReader*)>(&System::Xml::XmlReaderSettings::AddValidation)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "AddValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::CreateDtdValidatingReader
// Il2CppName: CreateDtdValidatingReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlValidatingReaderImpl* (System::Xml::XmlReaderSettings::*)(::System::Xml::XmlReader*)>(&System::Xml::XmlReaderSettings::CreateDtdValidatingReader)> {
  static const MethodInfo* get() {
    static auto* baseReader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "CreateDtdValidatingReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseReader});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::EnableLegacyXmlSettings
// Il2CppName: EnableLegacyXmlSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Xml::XmlReaderSettings::EnableLegacyXmlSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReaderSettings*), "EnableLegacyXmlSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReaderSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
