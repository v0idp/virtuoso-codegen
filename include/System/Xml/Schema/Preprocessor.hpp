// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.BaseProcessor
#include "System/Xml/Schema/BaseProcessor.hpp"
// Including type: System.Xml.Schema.XmlSchemaForm
#include "System/Xml/Schema/XmlSchemaForm.hpp"
// Including type: System.Xml.Schema.XmlSchemaDerivationMethod
#include "System/Xml/Schema/XmlSchemaDerivationMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchema
  class XmlSchema;
  // Forward declaring type: XmlSchemaExternal
  class XmlSchemaExternal;
  // Forward declaring type: XmlSchemaObject
  class XmlSchemaObject;
  // Forward declaring type: RedefineEntry
  class RedefineEntry;
  // Forward declaring type: XmlSchemaObjectCollection
  class XmlSchemaObjectCollection;
  // Forward declaring type: XmlSchemaGroup
  class XmlSchemaGroup;
  // Forward declaring type: XmlSchemaAttributeGroup
  class XmlSchemaAttributeGroup;
  // Forward declaring type: XmlSchemaSimpleType
  class XmlSchemaSimpleType;
  // Forward declaring type: XmlSchemaComplexType
  class XmlSchemaComplexType;
  // Forward declaring type: XmlSchemaAttribute
  class XmlSchemaAttribute;
  // Forward declaring type: XmlSchemaElement
  class XmlSchemaElement;
  // Forward declaring type: XmlSchemaIdentityConstraint
  class XmlSchemaIdentityConstraint;
  // Forward declaring type: XmlSchemaNotation
  class XmlSchemaNotation;
  // Forward declaring type: XmlSchemaParticle
  class XmlSchemaParticle;
  // Forward declaring type: XmlSchemaAnyAttribute
  class XmlSchemaAnyAttribute;
  // Forward declaring type: XmlSchemaAnnotation
  class XmlSchemaAnnotation;
  // Forward declaring type: SchemaNames
  class SchemaNames;
  // Forward declaring type: ValidationEventHandler
  class ValidationEventHandler;
  // Forward declaring type: XmlSchemaCompilationSettings
  class XmlSchemaCompilationSettings;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: SortedList
  class SortedList;
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlReaderSettings
  class XmlReaderSettings;
  // Forward declaring type: XmlResolver
  class XmlResolver;
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: Preprocessor
  class Preprocessor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::Preprocessor);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::Preprocessor*, "System.Xml.Schema", "Preprocessor");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0xC0
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.Preprocessor
  // [TokenAttribute] Offset: FFFFFFFF
  class Preprocessor : public ::System::Xml::Schema::BaseProcessor {
    public:
    public:
    // private System.String Xmlns
    // Size: 0x8
    // Offset: 0x40
    ::StringW Xmlns;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String NsXsi
    // Size: 0x8
    // Offset: 0x48
    ::StringW NsXsi;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String targetNamespace
    // Size: 0x8
    // Offset: 0x50
    ::StringW targetNamespace;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.Schema.XmlSchema rootSchema
    // Size: 0x8
    // Offset: 0x58
    ::System::Xml::Schema::XmlSchema* rootSchema;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchema*) == 0x8);
    // private System.Xml.Schema.XmlSchema currentSchema
    // Size: 0x8
    // Offset: 0x60
    ::System::Xml::Schema::XmlSchema* currentSchema;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchema*) == 0x8);
    // private System.Xml.Schema.XmlSchemaForm elementFormDefault
    // Size: 0x4
    // Offset: 0x68
    ::System::Xml::Schema::XmlSchemaForm elementFormDefault;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaForm) == 0x4);
    // private System.Xml.Schema.XmlSchemaForm attributeFormDefault
    // Size: 0x4
    // Offset: 0x6C
    ::System::Xml::Schema::XmlSchemaForm attributeFormDefault;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaForm) == 0x4);
    // private System.Xml.Schema.XmlSchemaDerivationMethod blockDefault
    // Size: 0x4
    // Offset: 0x70
    ::System::Xml::Schema::XmlSchemaDerivationMethod blockDefault;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaDerivationMethod) == 0x4);
    // private System.Xml.Schema.XmlSchemaDerivationMethod finalDefault
    // Size: 0x4
    // Offset: 0x74
    ::System::Xml::Schema::XmlSchemaDerivationMethod finalDefault;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaDerivationMethod) == 0x4);
    // private System.Collections.Hashtable schemaLocations
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Hashtable* schemaLocations;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable chameleonSchemas
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Hashtable* chameleonSchemas;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable referenceNamespaces
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Hashtable* referenceNamespaces;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable processedExternals
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Hashtable* processedExternals;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.SortedList lockList
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::SortedList* lockList;
    // Field size check
    static_assert(sizeof(::System::Collections::SortedList*) == 0x8);
    // private System.Xml.XmlReaderSettings readerSettings
    // Size: 0x8
    // Offset: 0xA0
    ::System::Xml::XmlReaderSettings* readerSettings;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlReaderSettings*) == 0x8);
    // private System.Xml.Schema.XmlSchema rootSchemaForRedefine
    // Size: 0x8
    // Offset: 0xA8
    ::System::Xml::Schema::XmlSchema* rootSchemaForRedefine;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchema*) == 0x8);
    // private System.Collections.ArrayList redefinedList
    // Size: 0x8
    // Offset: 0xB0
    ::System::Collections::ArrayList* redefinedList;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Xml.XmlResolver xmlResolver
    // Size: 0x8
    // Offset: 0xB8
    ::System::Xml::XmlResolver* xmlResolver;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlResolver*) == 0x8);
    public:
    // Get static field: static private System.Xml.Schema.XmlSchema builtInSchemaForXmlNS
    static ::System::Xml::Schema::XmlSchema* _get_builtInSchemaForXmlNS();
    // Set static field: static private System.Xml.Schema.XmlSchema builtInSchemaForXmlNS
    static void _set_builtInSchemaForXmlNS(::System::Xml::Schema::XmlSchema* value);
    // Get instance field reference: private System.String Xmlns
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Xmlns();
    // Get instance field reference: private System.String NsXsi
    [[deprecated("Use field access instead!")]] ::StringW& dyn_NsXsi();
    // Get instance field reference: private System.String targetNamespace
    [[deprecated("Use field access instead!")]] ::StringW& dyn_targetNamespace();
    // Get instance field reference: private System.Xml.Schema.XmlSchema rootSchema
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchema*& dyn_rootSchema();
    // Get instance field reference: private System.Xml.Schema.XmlSchema currentSchema
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchema*& dyn_currentSchema();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaForm elementFormDefault
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaForm& dyn_elementFormDefault();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaForm attributeFormDefault
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaForm& dyn_attributeFormDefault();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaDerivationMethod blockDefault
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaDerivationMethod& dyn_blockDefault();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaDerivationMethod finalDefault
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaDerivationMethod& dyn_finalDefault();
    // Get instance field reference: private System.Collections.Hashtable schemaLocations
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_schemaLocations();
    // Get instance field reference: private System.Collections.Hashtable chameleonSchemas
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_chameleonSchemas();
    // Get instance field reference: private System.Collections.Hashtable referenceNamespaces
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_referenceNamespaces();
    // Get instance field reference: private System.Collections.Hashtable processedExternals
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_processedExternals();
    // Get instance field reference: private System.Collections.SortedList lockList
    [[deprecated("Use field access instead!")]] ::System::Collections::SortedList*& dyn_lockList();
    // Get instance field reference: private System.Xml.XmlReaderSettings readerSettings
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlReaderSettings*& dyn_readerSettings();
    // Get instance field reference: private System.Xml.Schema.XmlSchema rootSchemaForRedefine
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchema*& dyn_rootSchemaForRedefine();
    // Get instance field reference: private System.Collections.ArrayList redefinedList
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_redefinedList();
    // Get instance field reference: private System.Xml.XmlResolver xmlResolver
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlResolver*& dyn_xmlResolver();
    // System.Void set_XmlResolver(System.Xml.XmlResolver value)
    // Offset: 0xB00420
    void set_XmlResolver(::System::Xml::XmlResolver* value);
    // System.Void set_ReaderSettings(System.Xml.XmlReaderSettings value)
    // Offset: 0xB00428
    void set_ReaderSettings(::System::Xml::XmlReaderSettings* value);
    // System.Void set_SchemaLocations(System.Collections.Hashtable value)
    // Offset: 0xB00430
    void set_SchemaLocations(::System::Collections::Hashtable* value);
    // System.Void set_ChameleonSchemas(System.Collections.Hashtable value)
    // Offset: 0xB00438
    void set_ChameleonSchemas(::System::Collections::Hashtable* value);
    // System.Xml.Schema.XmlSchema get_RootSchema()
    // Offset: 0xB00440
    ::System::Xml::Schema::XmlSchema* get_RootSchema();
    // public System.Boolean Execute(System.Xml.Schema.XmlSchema schema, System.String targetNamespace, System.Boolean loadExternals)
    // Offset: 0xAFC9D4
    bool Execute(::System::Xml::Schema::XmlSchema* schema, ::StringW targetNamespace, bool loadExternals);
    // private System.Void Cleanup(System.Xml.Schema.XmlSchema schema)
    // Offset: 0xB0029C
    void Cleanup(::System::Xml::Schema::XmlSchema* schema);
    // private System.Void CleanupRedefine(System.Xml.Schema.XmlSchemaExternal include)
    // Offset: 0xB0037C
    void CleanupRedefine(::System::Xml::Schema::XmlSchemaExternal* include);
    // private System.Void BuildSchemaList(System.Xml.Schema.XmlSchema schema)
    // Offset: 0xAFDE1C
    void BuildSchemaList(::System::Xml::Schema::XmlSchema* schema);
    // private System.Void LoadExternals(System.Xml.Schema.XmlSchema schema)
    // Offset: 0xAFD0A8
    void LoadExternals(::System::Xml::Schema::XmlSchema* schema);
    // static System.Xml.Schema.XmlSchema GetBuildInSchema()
    // Offset: 0xAFFCEC
    static ::System::Xml::Schema::XmlSchema* GetBuildInSchema();
    // private System.Void BuildRefNamespaces(System.Xml.Schema.XmlSchema schema)
    // Offset: 0xB004B4
    void BuildRefNamespaces(::System::Xml::Schema::XmlSchema* schema);
    // private System.Void ParseUri(System.String uri, System.String code, System.Xml.Schema.XmlSchemaObject sourceSchemaObject)
    // Offset: 0xB006E4
    void ParseUri(::StringW uri, ::StringW code, ::System::Xml::Schema::XmlSchemaObject* sourceSchemaObject);
    // private System.Void Preprocess(System.Xml.Schema.XmlSchema schema, System.String targetNamespace, System.Collections.ArrayList imports)
    // Offset: 0xAFDFA0
    void Preprocess(::System::Xml::Schema::XmlSchema* schema, ::StringW targetNamespace, ::System::Collections::ArrayList* imports);
    // private System.Void CopyIncludedComponents(System.Xml.Schema.XmlSchema includedSchema, System.Xml.Schema.XmlSchema schema)
    // Offset: 0xB00D7C
    void CopyIncludedComponents(::System::Xml::Schema::XmlSchema* includedSchema, ::System::Xml::Schema::XmlSchema* schema);
    // private System.Void PreprocessRedefine(System.Xml.Schema.RedefineEntry redefineEntry)
    // Offset: 0xAFF1D0
    void PreprocessRedefine(::System::Xml::Schema::RedefineEntry* redefineEntry);
    // private System.Void GetIncludedSet(System.Xml.Schema.XmlSchema schema, System.Collections.ArrayList includesList)
    // Offset: 0xB0378C
    void GetIncludedSet(::System::Xml::Schema::XmlSchema* schema, ::System::Collections::ArrayList* includesList);
    // static System.Xml.Schema.XmlSchema GetParentSchema(System.Xml.Schema.XmlSchemaObject currentSchemaObject)
    // Offset: 0xB036F4
    static ::System::Xml::Schema::XmlSchema* GetParentSchema(::System::Xml::Schema::XmlSchemaObject* currentSchemaObject);
    // private System.Void SetSchemaDefaults(System.Xml.Schema.XmlSchema schema)
    // Offset: 0xB00C64
    void SetSchemaDefaults(::System::Xml::Schema::XmlSchema* schema);
    // private System.Int32 CountGroupSelfReference(System.Xml.Schema.XmlSchemaObjectCollection items, System.Xml.XmlQualifiedName name, System.Xml.Schema.XmlSchemaGroup redefined)
    // Offset: 0xB03F18
    int CountGroupSelfReference(::System::Xml::Schema::XmlSchemaObjectCollection* items, ::System::Xml::XmlQualifiedName* name, ::System::Xml::Schema::XmlSchemaGroup* redefined);
    // private System.Void CheckRefinedGroup(System.Xml.Schema.XmlSchemaGroup group)
    // Offset: 0xB038C4
    void CheckRefinedGroup(::System::Xml::Schema::XmlSchemaGroup* group);
    // private System.Void CheckRefinedAttributeGroup(System.Xml.Schema.XmlSchemaAttributeGroup attributeGroup)
    // Offset: 0xB03970
    void CheckRefinedAttributeGroup(::System::Xml::Schema::XmlSchemaAttributeGroup* attributeGroup);
    // private System.Void CheckRefinedSimpleType(System.Xml.Schema.XmlSchemaSimpleType stype)
    // Offset: 0xB03E00
    void CheckRefinedSimpleType(::System::Xml::Schema::XmlSchemaSimpleType* stype);
    // private System.Void CheckRefinedComplexType(System.Xml.Schema.XmlSchemaComplexType ctype)
    // Offset: 0xB03AD4
    void CheckRefinedComplexType(::System::Xml::Schema::XmlSchemaComplexType* ctype);
    // private System.Void PreprocessAttribute(System.Xml.Schema.XmlSchemaAttribute attribute)
    // Offset: 0xB01EF4
    void PreprocessAttribute(::System::Xml::Schema::XmlSchemaAttribute* attribute);
    // private System.Void PreprocessLocalAttribute(System.Xml.Schema.XmlSchemaAttribute attribute)
    // Offset: 0xB04764
    void PreprocessLocalAttribute(::System::Xml::Schema::XmlSchemaAttribute* attribute);
    // private System.Void PreprocessAttributeContent(System.Xml.Schema.XmlSchemaAttribute attribute)
    // Offset: 0xB04520
    void PreprocessAttributeContent(::System::Xml::Schema::XmlSchemaAttribute* attribute);
    // private System.Void PreprocessAttributeGroup(System.Xml.Schema.XmlSchemaAttributeGroup attributeGroup)
    // Offset: 0xB0206C
    void PreprocessAttributeGroup(::System::Xml::Schema::XmlSchemaAttributeGroup* attributeGroup);
    // private System.Void PreprocessElement(System.Xml.Schema.XmlSchemaElement element)
    // Offset: 0xB02FB4
    void PreprocessElement(::System::Xml::Schema::XmlSchemaElement* element);
    // private System.Void PreprocessLocalElement(System.Xml.Schema.XmlSchemaElement element)
    // Offset: 0xB05254
    void PreprocessLocalElement(::System::Xml::Schema::XmlSchemaElement* element);
    // private System.Void PreprocessElementContent(System.Xml.Schema.XmlSchemaElement element)
    // Offset: 0xB04F20
    void PreprocessElementContent(::System::Xml::Schema::XmlSchemaElement* element);
    // private System.Void PreprocessIdentityConstraint(System.Xml.Schema.XmlSchemaIdentityConstraint constraint)
    // Offset: 0xB055E8
    void PreprocessIdentityConstraint(::System::Xml::Schema::XmlSchemaIdentityConstraint* constraint);
    // private System.Void PreprocessSimpleType(System.Xml.Schema.XmlSchemaSimpleType simpleType, System.Boolean local)
    // Offset: 0xB02A20
    void PreprocessSimpleType(::System::Xml::Schema::XmlSchemaSimpleType* simpleType, bool local);
    // private System.Void PreprocessComplexType(System.Xml.Schema.XmlSchemaComplexType complexType, System.Boolean local)
    // Offset: 0xB02170
    void PreprocessComplexType(::System::Xml::Schema::XmlSchemaComplexType* complexType, bool local);
    // private System.Void PreprocessGroup(System.Xml.Schema.XmlSchemaGroup group)
    // Offset: 0xB03218
    void PreprocessGroup(::System::Xml::Schema::XmlSchemaGroup* group);
    // private System.Void PreprocessNotation(System.Xml.Schema.XmlSchemaNotation notation)
    // Offset: 0xB033EC
    void PreprocessNotation(::System::Xml::Schema::XmlSchemaNotation* notation);
    // private System.Void PreprocessParticle(System.Xml.Schema.XmlSchemaParticle particle)
    // Offset: 0xB05930
    void PreprocessParticle(::System::Xml::Schema::XmlSchemaParticle* particle);
    // private System.Void PreprocessAttributes(System.Xml.Schema.XmlSchemaObjectCollection attributes, System.Xml.Schema.XmlSchemaAnyAttribute anyAttribute, System.Xml.Schema.XmlSchemaObject parent)
    // Offset: 0xB04B88
    void PreprocessAttributes(::System::Xml::Schema::XmlSchemaObjectCollection* attributes, ::System::Xml::Schema::XmlSchemaAnyAttribute* anyAttribute, ::System::Xml::Schema::XmlSchemaObject* parent);
    // private System.Void ValidateIdAttribute(System.Xml.Schema.XmlSchemaObject xso)
    // Offset: 0xB00914
    void ValidateIdAttribute(::System::Xml::Schema::XmlSchemaObject* xso);
    // private System.Void ValidateNameAttribute(System.Xml.Schema.XmlSchemaObject xso)
    // Offset: 0xB0425C
    void ValidateNameAttribute(::System::Xml::Schema::XmlSchemaObject* xso);
    // private System.Void ValidateQNameAttribute(System.Xml.Schema.XmlSchemaObject xso, System.String attributeName, System.Xml.XmlQualifiedName value)
    // Offset: 0xB0491C
    void ValidateQNameAttribute(::System::Xml::Schema::XmlSchemaObject* xso, ::StringW attributeName, ::System::Xml::XmlQualifiedName* value);
    // private System.Uri ResolveSchemaLocationUri(System.Xml.Schema.XmlSchema enclosingSchema, System.String location)
    // Offset: 0xB00448
    ::System::Uri* ResolveSchemaLocationUri(::System::Xml::Schema::XmlSchema* enclosingSchema, ::StringW location);
    // private System.Object GetSchemaEntity(System.Uri ruri)
    // Offset: 0xB0048C
    ::Il2CppObject* GetSchemaEntity(::System::Uri* ruri);
    // private System.Xml.Schema.XmlSchema GetChameleonSchema(System.String targetNamespace, System.Xml.Schema.XmlSchema schema)
    // Offset: 0xAFCF6C
    ::System::Xml::Schema::XmlSchema* GetChameleonSchema(::StringW targetNamespace, ::System::Xml::Schema::XmlSchema* schema);
    // private System.Void SetParent(System.Xml.Schema.XmlSchemaObject child, System.Xml.Schema.XmlSchemaObject parent)
    // Offset: 0xB00864
    void SetParent(::System::Xml::Schema::XmlSchemaObject* child, ::System::Xml::Schema::XmlSchemaObject* parent);
    // private System.Void PreprocessAnnotation(System.Xml.Schema.XmlSchemaObject schemaObject)
    // Offset: 0xB0087C
    void PreprocessAnnotation(::System::Xml::Schema::XmlSchemaObject* schemaObject);
    // private System.Void PreprocessAnnotation(System.Xml.Schema.XmlSchemaAnnotation annotation)
    // Offset: 0xB03680
    void PreprocessAnnotation(::System::Xml::Schema::XmlSchemaAnnotation* annotation);
    // public System.Void .ctor(System.Xml.XmlNameTable nameTable, System.Xml.Schema.SchemaNames schemaNames, System.Xml.Schema.ValidationEventHandler eventHandler, System.Xml.Schema.XmlSchemaCompilationSettings compilationSettings)
    // Offset: 0xAFC8F8
    // Implemented from: System.Xml.Schema.BaseProcessor
    // Base method: System.Void BaseProcessor::.ctor(System.Xml.XmlNameTable nameTable, System.Xml.Schema.SchemaNames schemaNames, System.Xml.Schema.ValidationEventHandler eventHandler, System.Xml.Schema.XmlSchemaCompilationSettings compilationSettings)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Preprocessor* New_ctor(::System::Xml::XmlNameTable* nameTable, ::System::Xml::Schema::SchemaNames* schemaNames, ::System::Xml::Schema::ValidationEventHandler* eventHandler, ::System::Xml::Schema::XmlSchemaCompilationSettings* compilationSettings) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::Preprocessor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Preprocessor*, creationType>(nameTable, schemaNames, eventHandler, compilationSettings)));
    }
  }; // System.Xml.Schema.Preprocessor
  #pragma pack(pop)
  static check_size<sizeof(Preprocessor), 184 + sizeof(::System::Xml::XmlResolver*)> __System_Xml_Schema_PreprocessorSizeCheck;
  static_assert(sizeof(Preprocessor) == 0xC0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::set_XmlResolver
// Il2CppName: set_XmlResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::XmlResolver*)>(&System::Xml::Schema::Preprocessor::set_XmlResolver)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "set_XmlResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::set_ReaderSettings
// Il2CppName: set_ReaderSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::XmlReaderSettings*)>(&System::Xml::Schema::Preprocessor::set_ReaderSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReaderSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "set_ReaderSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::set_SchemaLocations
// Il2CppName: set_SchemaLocations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Collections::Hashtable*)>(&System::Xml::Schema::Preprocessor::set_SchemaLocations)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "set_SchemaLocations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::set_ChameleonSchemas
// Il2CppName: set_ChameleonSchemas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Collections::Hashtable*)>(&System::Xml::Schema::Preprocessor::set_ChameleonSchemas)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "set_ChameleonSchemas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::get_RootSchema
// Il2CppName: get_RootSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Xml::Schema::Preprocessor::*)()>(&System::Xml::Schema::Preprocessor::get_RootSchema)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "get_RootSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchema*, ::StringW, bool)>(&System::Xml::Schema::Preprocessor::Execute)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* targetNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* loadExternals = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema, targetNamespace, loadExternals});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::Preprocessor::Cleanup)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::CleanupRedefine
// Il2CppName: CleanupRedefine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaExternal*)>(&System::Xml::Schema::Preprocessor::CleanupRedefine)> {
  static const MethodInfo* get() {
    static auto* include = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaExternal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "CleanupRedefine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{include});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::BuildSchemaList
// Il2CppName: BuildSchemaList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::Preprocessor::BuildSchemaList)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "BuildSchemaList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::LoadExternals
// Il2CppName: LoadExternals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::Preprocessor::LoadExternals)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "LoadExternals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::GetBuildInSchema
// Il2CppName: GetBuildInSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (*)()>(&System::Xml::Schema::Preprocessor::GetBuildInSchema)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "GetBuildInSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::BuildRefNamespaces
// Il2CppName: BuildRefNamespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::Preprocessor::BuildRefNamespaces)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "BuildRefNamespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::ParseUri
// Il2CppName: ParseUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::StringW, ::StringW, ::System::Xml::Schema::XmlSchemaObject*)>(&System::Xml::Schema::Preprocessor::ParseUri)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sourceSchemaObject = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "ParseUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri, code, sourceSchemaObject});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::Preprocess
// Il2CppName: Preprocess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchema*, ::StringW, ::System::Collections::ArrayList*)>(&System::Xml::Schema::Preprocessor::Preprocess)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* targetNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* imports = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "Preprocess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema, targetNamespace, imports});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::CopyIncludedComponents
// Il2CppName: CopyIncludedComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchema*, ::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::Preprocessor::CopyIncludedComponents)> {
  static const MethodInfo* get() {
    static auto* includedSchema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "CopyIncludedComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{includedSchema, schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::PreprocessRedefine
// Il2CppName: PreprocessRedefine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::RedefineEntry*)>(&System::Xml::Schema::Preprocessor::PreprocessRedefine)> {
  static const MethodInfo* get() {
    static auto* redefineEntry = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "RedefineEntry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "PreprocessRedefine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{redefineEntry});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::GetIncludedSet
// Il2CppName: GetIncludedSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchema*, ::System::Collections::ArrayList*)>(&System::Xml::Schema::Preprocessor::GetIncludedSet)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* includesList = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "GetIncludedSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema, includesList});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::GetParentSchema
// Il2CppName: GetParentSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (*)(::System::Xml::Schema::XmlSchemaObject*)>(&System::Xml::Schema::Preprocessor::GetParentSchema)> {
  static const MethodInfo* get() {
    static auto* currentSchemaObject = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "GetParentSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentSchemaObject});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::SetSchemaDefaults
// Il2CppName: SetSchemaDefaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::Preprocessor::SetSchemaDefaults)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "SetSchemaDefaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::CountGroupSelfReference
// Il2CppName: CountGroupSelfReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaObjectCollection*, ::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::XmlSchemaGroup*)>(&System::Xml::Schema::Preprocessor::CountGroupSelfReference)> {
  static const MethodInfo* get() {
    static auto* items = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    static auto* redefined = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "CountGroupSelfReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{items, name, redefined});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::CheckRefinedGroup
// Il2CppName: CheckRefinedGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaGroup*)>(&System::Xml::Schema::Preprocessor::CheckRefinedGroup)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "CheckRefinedGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::CheckRefinedAttributeGroup
// Il2CppName: CheckRefinedAttributeGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaAttributeGroup*)>(&System::Xml::Schema::Preprocessor::CheckRefinedAttributeGroup)> {
  static const MethodInfo* get() {
    static auto* attributeGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttributeGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "CheckRefinedAttributeGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeGroup});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::CheckRefinedSimpleType
// Il2CppName: CheckRefinedSimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaSimpleType*)>(&System::Xml::Schema::Preprocessor::CheckRefinedSimpleType)> {
  static const MethodInfo* get() {
    static auto* stype = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "CheckRefinedSimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stype});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::CheckRefinedComplexType
// Il2CppName: CheckRefinedComplexType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaComplexType*)>(&System::Xml::Schema::Preprocessor::CheckRefinedComplexType)> {
  static const MethodInfo* get() {
    static auto* ctype = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "CheckRefinedComplexType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctype});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::PreprocessAttribute
// Il2CppName: PreprocessAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaAttribute*)>(&System::Xml::Schema::Preprocessor::PreprocessAttribute)> {
  static const MethodInfo* get() {
    static auto* attribute = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "PreprocessAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attribute});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::PreprocessLocalAttribute
// Il2CppName: PreprocessLocalAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaAttribute*)>(&System::Xml::Schema::Preprocessor::PreprocessLocalAttribute)> {
  static const MethodInfo* get() {
    static auto* attribute = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "PreprocessLocalAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attribute});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::PreprocessAttributeContent
// Il2CppName: PreprocessAttributeContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaAttribute*)>(&System::Xml::Schema::Preprocessor::PreprocessAttributeContent)> {
  static const MethodInfo* get() {
    static auto* attribute = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "PreprocessAttributeContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attribute});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::PreprocessAttributeGroup
// Il2CppName: PreprocessAttributeGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaAttributeGroup*)>(&System::Xml::Schema::Preprocessor::PreprocessAttributeGroup)> {
  static const MethodInfo* get() {
    static auto* attributeGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttributeGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "PreprocessAttributeGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeGroup});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::PreprocessElement
// Il2CppName: PreprocessElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaElement*)>(&System::Xml::Schema::Preprocessor::PreprocessElement)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "PreprocessElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::PreprocessLocalElement
// Il2CppName: PreprocessLocalElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaElement*)>(&System::Xml::Schema::Preprocessor::PreprocessLocalElement)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "PreprocessLocalElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::PreprocessElementContent
// Il2CppName: PreprocessElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaElement*)>(&System::Xml::Schema::Preprocessor::PreprocessElementContent)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "PreprocessElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::PreprocessIdentityConstraint
// Il2CppName: PreprocessIdentityConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaIdentityConstraint*)>(&System::Xml::Schema::Preprocessor::PreprocessIdentityConstraint)> {
  static const MethodInfo* get() {
    static auto* constraint = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaIdentityConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "PreprocessIdentityConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{constraint});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::PreprocessSimpleType
// Il2CppName: PreprocessSimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaSimpleType*, bool)>(&System::Xml::Schema::Preprocessor::PreprocessSimpleType)> {
  static const MethodInfo* get() {
    static auto* simpleType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    static auto* local = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "PreprocessSimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{simpleType, local});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::PreprocessComplexType
// Il2CppName: PreprocessComplexType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaComplexType*, bool)>(&System::Xml::Schema::Preprocessor::PreprocessComplexType)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* local = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "PreprocessComplexType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType, local});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::PreprocessGroup
// Il2CppName: PreprocessGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaGroup*)>(&System::Xml::Schema::Preprocessor::PreprocessGroup)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "PreprocessGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::PreprocessNotation
// Il2CppName: PreprocessNotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaNotation*)>(&System::Xml::Schema::Preprocessor::PreprocessNotation)> {
  static const MethodInfo* get() {
    static auto* notation = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaNotation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "PreprocessNotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{notation});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::PreprocessParticle
// Il2CppName: PreprocessParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::Preprocessor::PreprocessParticle)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "PreprocessParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::PreprocessAttributes
// Il2CppName: PreprocessAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaObjectCollection*, ::System::Xml::Schema::XmlSchemaAnyAttribute*, ::System::Xml::Schema::XmlSchemaObject*)>(&System::Xml::Schema::Preprocessor::PreprocessAttributes)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    static auto* anyAttribute = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnyAttribute")->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "PreprocessAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes, anyAttribute, parent});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::ValidateIdAttribute
// Il2CppName: ValidateIdAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaObject*)>(&System::Xml::Schema::Preprocessor::ValidateIdAttribute)> {
  static const MethodInfo* get() {
    static auto* xso = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "ValidateIdAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xso});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::ValidateNameAttribute
// Il2CppName: ValidateNameAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaObject*)>(&System::Xml::Schema::Preprocessor::ValidateNameAttribute)> {
  static const MethodInfo* get() {
    static auto* xso = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "ValidateNameAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xso});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::ValidateQNameAttribute
// Il2CppName: ValidateQNameAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaObject*, ::StringW, ::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::Preprocessor::ValidateQNameAttribute)> {
  static const MethodInfo* get() {
    static auto* xso = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    static auto* attributeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "ValidateQNameAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xso, attributeName, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::ResolveSchemaLocationUri
// Il2CppName: ResolveSchemaLocationUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchema*, ::StringW)>(&System::Xml::Schema::Preprocessor::ResolveSchemaLocationUri)> {
  static const MethodInfo* get() {
    static auto* enclosingSchema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* location = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "ResolveSchemaLocationUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enclosingSchema, location});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::GetSchemaEntity
// Il2CppName: GetSchemaEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::Preprocessor::*)(::System::Uri*)>(&System::Xml::Schema::Preprocessor::GetSchemaEntity)> {
  static const MethodInfo* get() {
    static auto* ruri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "GetSchemaEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ruri});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::GetChameleonSchema
// Il2CppName: GetChameleonSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Xml::Schema::Preprocessor::*)(::StringW, ::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::Preprocessor::GetChameleonSchema)> {
  static const MethodInfo* get() {
    static auto* targetNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "GetChameleonSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetNamespace, schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::SetParent
// Il2CppName: SetParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaObject*, ::System::Xml::Schema::XmlSchemaObject*)>(&System::Xml::Schema::Preprocessor::SetParent)> {
  static const MethodInfo* get() {
    static auto* child = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "SetParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{child, parent});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::PreprocessAnnotation
// Il2CppName: PreprocessAnnotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaObject*)>(&System::Xml::Schema::Preprocessor::PreprocessAnnotation)> {
  static const MethodInfo* get() {
    static auto* schemaObject = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "PreprocessAnnotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaObject});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::PreprocessAnnotation
// Il2CppName: PreprocessAnnotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Preprocessor::*)(::System::Xml::Schema::XmlSchemaAnnotation*)>(&System::Xml::Schema::Preprocessor::PreprocessAnnotation)> {
  static const MethodInfo* get() {
    static auto* annotation = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnnotation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Preprocessor*), "PreprocessAnnotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{annotation});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Preprocessor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
