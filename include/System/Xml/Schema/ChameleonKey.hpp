// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchema
  class XmlSchema;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: ChameleonKey
  class ChameleonKey;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::ChameleonKey);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::ChameleonKey*, "System.Xml.Schema", "ChameleonKey");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.ChameleonKey
  // [TokenAttribute] Offset: FFFFFFFF
  class ChameleonKey : public ::Il2CppObject {
    public:
    public:
    // System.String targetNS
    // Size: 0x8
    // Offset: 0x10
    ::StringW targetNS;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Uri chameleonLocation
    // Size: 0x8
    // Offset: 0x18
    ::System::Uri* chameleonLocation;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // System.Xml.Schema.XmlSchema originalSchema
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::Schema::XmlSchema* originalSchema;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchema*) == 0x8);
    // private System.Int32 hashCode
    // Size: 0x4
    // Offset: 0x28
    int hashCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: System.String targetNS
    [[deprecated("Use field access instead!")]] ::StringW& dyn_targetNS();
    // Get instance field reference: System.Uri chameleonLocation
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn_chameleonLocation();
    // Get instance field reference: System.Xml.Schema.XmlSchema originalSchema
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchema*& dyn_originalSchema();
    // Get instance field reference: private System.Int32 hashCode
    [[deprecated("Use field access instead!")]] int& dyn_hashCode();
    // public System.Void .ctor(System.String ns, System.Xml.Schema.XmlSchema originalSchema)
    // Offset: 0xB63FB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChameleonKey* New_ctor(::StringW ns, ::System::Xml::Schema::XmlSchema* originalSchema) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::ChameleonKey::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChameleonKey*, creationType>(ns, originalSchema)));
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0xB64018
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xB6409C
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
  }; // System.Xml.Schema.ChameleonKey
  #pragma pack(pop)
  static check_size<sizeof(ChameleonKey), 40 + sizeof(int)> __System_Xml_Schema_ChameleonKeySizeCheck;
  static_assert(sizeof(ChameleonKey) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::ChameleonKey::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::ChameleonKey::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::ChameleonKey::*)()>(&System::Xml::Schema::ChameleonKey::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ChameleonKey*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ChameleonKey::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::ChameleonKey::*)(::Il2CppObject*)>(&System::Xml::Schema::ChameleonKey::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ChameleonKey*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
