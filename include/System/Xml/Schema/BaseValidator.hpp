// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaCollection
  class XmlSchemaCollection;
  // Forward declaring type: SchemaNames
  class SchemaNames;
  // Forward declaring type: SchemaInfo
  class SchemaInfo;
  // Forward declaring type: ValidationState
  class ValidationState;
  // Forward declaring type: ValidationEventHandler
  class ValidationEventHandler;
  // Forward declaring type: XmlSchemaException
  class XmlSchemaException;
  // Forward declaring type: XmlSeverityType
  struct XmlSeverityType;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: IValidationEventHandling
  class IValidationEventHandling;
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: PositionInfo
  class PositionInfo;
  // Forward declaring type: XmlResolver
  class XmlResolver;
  // Forward declaring type: XmlValidatingReaderImpl
  class XmlValidatingReaderImpl;
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
  // Forward declaring type: IDtdInfo
  class IDtdInfo;
  // Forward declaring type: ValidationType
  struct ValidationType;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: BaseValidator
  class BaseValidator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::BaseValidator);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::BaseValidator*, "System.Xml.Schema", "BaseValidator");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x7A
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.BaseValidator
  // [TokenAttribute] Offset: FFFFFFFF
  class BaseValidator : public ::Il2CppObject {
    public:
    public:
    // private System.Xml.Schema.XmlSchemaCollection schemaCollection
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::Schema::XmlSchemaCollection* schemaCollection;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaCollection*) == 0x8);
    // private System.Xml.IValidationEventHandling eventHandling
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::IValidationEventHandling* eventHandling;
    // Field size check
    static_assert(sizeof(::System::Xml::IValidationEventHandling*) == 0x8);
    // private System.Xml.XmlNameTable nameTable
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::XmlNameTable* nameTable;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNameTable*) == 0x8);
    // private System.Xml.Schema.SchemaNames schemaNames
    // Size: 0x8
    // Offset: 0x28
    ::System::Xml::Schema::SchemaNames* schemaNames;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::SchemaNames*) == 0x8);
    // private System.Xml.PositionInfo positionInfo
    // Size: 0x8
    // Offset: 0x30
    ::System::Xml::PositionInfo* positionInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::PositionInfo*) == 0x8);
    // private System.Xml.XmlResolver xmlResolver
    // Size: 0x8
    // Offset: 0x38
    ::System::Xml::XmlResolver* xmlResolver;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlResolver*) == 0x8);
    // private System.Uri baseUri
    // Size: 0x8
    // Offset: 0x40
    ::System::Uri* baseUri;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // protected System.Xml.Schema.SchemaInfo schemaInfo
    // Size: 0x8
    // Offset: 0x48
    ::System::Xml::Schema::SchemaInfo* schemaInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::SchemaInfo*) == 0x8);
    // protected System.Xml.XmlValidatingReaderImpl reader
    // Size: 0x8
    // Offset: 0x50
    ::System::Xml::XmlValidatingReaderImpl* reader;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlValidatingReaderImpl*) == 0x8);
    // protected System.Xml.XmlQualifiedName elementName
    // Size: 0x8
    // Offset: 0x58
    ::System::Xml::XmlQualifiedName* elementName;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    // protected System.Xml.Schema.ValidationState context
    // Size: 0x8
    // Offset: 0x60
    ::System::Xml::Schema::ValidationState* context;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::ValidationState*) == 0x8);
    // protected System.Text.StringBuilder textValue
    // Size: 0x8
    // Offset: 0x68
    ::System::Text::StringBuilder* textValue;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // protected System.String textString
    // Size: 0x8
    // Offset: 0x70
    ::StringW textString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected System.Boolean hasSibling
    // Size: 0x1
    // Offset: 0x78
    bool hasSibling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean checkDatatype
    // Size: 0x1
    // Offset: 0x79
    bool checkDatatype;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Xml.Schema.XmlSchemaCollection schemaCollection
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaCollection*& dyn_schemaCollection();
    // Get instance field reference: private System.Xml.IValidationEventHandling eventHandling
    [[deprecated("Use field access instead!")]] ::System::Xml::IValidationEventHandling*& dyn_eventHandling();
    // Get instance field reference: private System.Xml.XmlNameTable nameTable
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNameTable*& dyn_nameTable();
    // Get instance field reference: private System.Xml.Schema.SchemaNames schemaNames
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::SchemaNames*& dyn_schemaNames();
    // Get instance field reference: private System.Xml.PositionInfo positionInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::PositionInfo*& dyn_positionInfo();
    // Get instance field reference: private System.Xml.XmlResolver xmlResolver
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlResolver*& dyn_xmlResolver();
    // Get instance field reference: private System.Uri baseUri
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn_baseUri();
    // Get instance field reference: protected System.Xml.Schema.SchemaInfo schemaInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::SchemaInfo*& dyn_schemaInfo();
    // Get instance field reference: protected System.Xml.XmlValidatingReaderImpl reader
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlValidatingReaderImpl*& dyn_reader();
    // Get instance field reference: protected System.Xml.XmlQualifiedName elementName
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlQualifiedName*& dyn_elementName();
    // Get instance field reference: protected System.Xml.Schema.ValidationState context
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::ValidationState*& dyn_context();
    // Get instance field reference: protected System.Text.StringBuilder textValue
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn_textValue();
    // Get instance field reference: protected System.String textString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_textString();
    // Get instance field reference: protected System.Boolean hasSibling
    [[deprecated("Use field access instead!")]] bool& dyn_hasSibling();
    // Get instance field reference: protected System.Boolean checkDatatype
    [[deprecated("Use field access instead!")]] bool& dyn_checkDatatype();
    // public System.Xml.XmlValidatingReaderImpl get_Reader()
    // Offset: 0xB5DE50
    ::System::Xml::XmlValidatingReaderImpl* get_Reader();
    // public System.Xml.Schema.XmlSchemaCollection get_SchemaCollection()
    // Offset: 0xB5DE58
    ::System::Xml::Schema::XmlSchemaCollection* get_SchemaCollection();
    // public System.Xml.XmlNameTable get_NameTable()
    // Offset: 0xB5DE60
    ::System::Xml::XmlNameTable* get_NameTable();
    // public System.Xml.Schema.SchemaNames get_SchemaNames()
    // Offset: 0xB5C2E4
    ::System::Xml::Schema::SchemaNames* get_SchemaNames();
    // public System.Xml.PositionInfo get_PositionInfo()
    // Offset: 0xB5DE68
    ::System::Xml::PositionInfo* get_PositionInfo();
    // public System.Xml.XmlResolver get_XmlResolver()
    // Offset: 0xB5DE70
    ::System::Xml::XmlResolver* get_XmlResolver();
    // public System.Void set_XmlResolver(System.Xml.XmlResolver value)
    // Offset: 0xB5DE78
    void set_XmlResolver(::System::Xml::XmlResolver* value);
    // public System.Uri get_BaseUri()
    // Offset: 0xB5DE80
    ::System::Uri* get_BaseUri();
    // public System.Void set_BaseUri(System.Uri value)
    // Offset: 0xB5DE88
    void set_BaseUri(::System::Uri* value);
    // public System.Xml.Schema.ValidationEventHandler get_EventHandler()
    // Offset: 0xB5DE90
    ::System::Xml::Schema::ValidationEventHandler* get_EventHandler();
    // public System.Xml.Schema.SchemaInfo get_SchemaInfo()
    // Offset: 0xB5DF6C
    ::System::Xml::Schema::SchemaInfo* get_SchemaInfo();
    // public System.Void set_DtdInfo(System.Xml.IDtdInfo value)
    // Offset: 0xB5DF74
    void set_DtdInfo(::System::Xml::IDtdInfo* value);
    // public System.Boolean get_PreserveWhitespace()
    // Offset: 0xB5E058
    bool get_PreserveWhitespace();
    // public System.Void .ctor(System.Xml.Schema.BaseValidator other)
    // Offset: 0xB5DDD8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseValidator* New_ctor(::System::Xml::Schema::BaseValidator* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::BaseValidator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseValidator*, creationType>(other)));
    }
    // public System.Void .ctor(System.Xml.XmlValidatingReaderImpl reader, System.Xml.Schema.XmlSchemaCollection schemaCollection, System.Xml.IValidationEventHandling eventHandling)
    // Offset: 0xB5BDD8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseValidator* New_ctor(::System::Xml::XmlValidatingReaderImpl* reader, ::System::Xml::Schema::XmlSchemaCollection* schemaCollection, ::System::Xml::IValidationEventHandling* eventHandling) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::BaseValidator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseValidator*, creationType>(reader, schemaCollection, eventHandling)));
    }
    // public System.Void Validate()
    // Offset: 0xB5E060
    void Validate();
    // public System.Void CompleteValidation()
    // Offset: 0xB5E064
    void CompleteValidation();
    // public System.Object FindId(System.String name)
    // Offset: 0xB5E068
    ::Il2CppObject* FindId(::StringW name);
    // public System.Void ValidateText()
    // Offset: 0xB5E070
    void ValidateText();
    // public System.Void ValidateWhitespace()
    // Offset: 0xB5E5B8
    void ValidateWhitespace();
    // private System.Void SaveTextValue(System.String value)
    // Offset: 0xB5E540
    void SaveTextValue(::StringW value);
    // protected System.Void SendValidationEvent(System.String code)
    // Offset: 0xB5E700
    void SendValidationEvent(::StringW code);
    // protected System.Void SendValidationEvent(System.String code, System.String[] args)
    // Offset: 0xB5E44C
    void SendValidationEvent(::StringW code, ::ArrayW<::StringW> args);
    // protected System.Void SendValidationEvent(System.String code, System.String arg)
    // Offset: 0xB5E358
    void SendValidationEvent(::StringW code, ::StringW arg);
    // protected System.Void SendValidationEvent(System.Xml.Schema.XmlSchemaException e)
    // Offset: 0xB5E764
    void SendValidationEvent(::System::Xml::Schema::XmlSchemaException* e);
    // protected System.Void SendValidationEvent(System.String code, System.String msg, System.Xml.Schema.XmlSeverityType severity)
    // Offset: 0xB5E85C
    void SendValidationEvent(::StringW code, ::StringW msg, ::System::Xml::Schema::XmlSeverityType severity);
    // protected System.Void SendValidationEvent(System.String code, System.String[] args, System.Xml.Schema.XmlSeverityType severity)
    // Offset: 0xB5E954
    void SendValidationEvent(::StringW code, ::ArrayW<::StringW> args, ::System::Xml::Schema::XmlSeverityType severity);
    // protected System.Void SendValidationEvent(System.Xml.Schema.XmlSchemaException e, System.Xml.Schema.XmlSeverityType severity)
    // Offset: 0xB5E76C
    void SendValidationEvent(::System::Xml::Schema::XmlSchemaException* e, ::System::Xml::Schema::XmlSeverityType severity);
    // static protected System.Void ProcessEntity(System.Xml.Schema.SchemaInfo sinfo, System.String name, System.Object sender, System.Xml.Schema.ValidationEventHandler eventhandler, System.String baseUri, System.Int32 lineNumber, System.Int32 linePosition)
    // Offset: 0xB5EA4C
    static void ProcessEntity(::System::Xml::Schema::SchemaInfo* sinfo, ::StringW name, ::Il2CppObject* sender, ::System::Xml::Schema::ValidationEventHandler* eventhandler, ::StringW baseUri, int lineNumber, int linePosition);
    // static protected System.Void ProcessEntity(System.Xml.Schema.SchemaInfo sinfo, System.String name, System.Xml.IValidationEventHandling eventHandling, System.String baseUriStr, System.Int32 lineNumber, System.Int32 linePosition)
    // Offset: 0xB5EC24
    static void ProcessEntity(::System::Xml::Schema::SchemaInfo* sinfo, ::StringW name, ::System::Xml::IValidationEventHandling* eventHandling, ::StringW baseUriStr, int lineNumber, int linePosition);
    // static public System.Xml.Schema.BaseValidator CreateInstance(System.Xml.ValidationType valType, System.Xml.XmlValidatingReaderImpl reader, System.Xml.Schema.XmlSchemaCollection schemaCollection, System.Xml.IValidationEventHandling eventHandling, System.Boolean processIdentityConstraints)
    // Offset: 0xB5EE24
    static ::System::Xml::Schema::BaseValidator* CreateInstance(::System::Xml::ValidationType valType, ::System::Xml::XmlValidatingReaderImpl* reader, ::System::Xml::Schema::XmlSchemaCollection* schemaCollection, ::System::Xml::IValidationEventHandling* eventHandling, bool processIdentityConstraints);
  }; // System.Xml.Schema.BaseValidator
  #pragma pack(pop)
  static check_size<sizeof(BaseValidator), 121 + sizeof(bool)> __System_Xml_Schema_BaseValidatorSizeCheck;
  static_assert(sizeof(BaseValidator) == 0x7A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::get_Reader
// Il2CppName: get_Reader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlValidatingReaderImpl* (System::Xml::Schema::BaseValidator::*)()>(&System::Xml::Schema::BaseValidator::get_Reader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "get_Reader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::get_SchemaCollection
// Il2CppName: get_SchemaCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaCollection* (System::Xml::Schema::BaseValidator::*)()>(&System::Xml::Schema::BaseValidator::get_SchemaCollection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "get_SchemaCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::get_NameTable
// Il2CppName: get_NameTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNameTable* (System::Xml::Schema::BaseValidator::*)()>(&System::Xml::Schema::BaseValidator::get_NameTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "get_NameTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::get_SchemaNames
// Il2CppName: get_SchemaNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaNames* (System::Xml::Schema::BaseValidator::*)()>(&System::Xml::Schema::BaseValidator::get_SchemaNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "get_SchemaNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::get_PositionInfo
// Il2CppName: get_PositionInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::PositionInfo* (System::Xml::Schema::BaseValidator::*)()>(&System::Xml::Schema::BaseValidator::get_PositionInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "get_PositionInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::get_XmlResolver
// Il2CppName: get_XmlResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlResolver* (System::Xml::Schema::BaseValidator::*)()>(&System::Xml::Schema::BaseValidator::get_XmlResolver)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "get_XmlResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::set_XmlResolver
// Il2CppName: set_XmlResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::BaseValidator::*)(::System::Xml::XmlResolver*)>(&System::Xml::Schema::BaseValidator::set_XmlResolver)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "set_XmlResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::get_BaseUri
// Il2CppName: get_BaseUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Xml::Schema::BaseValidator::*)()>(&System::Xml::Schema::BaseValidator::get_BaseUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "get_BaseUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::set_BaseUri
// Il2CppName: set_BaseUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::BaseValidator::*)(::System::Uri*)>(&System::Xml::Schema::BaseValidator::set_BaseUri)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "set_BaseUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::get_EventHandler
// Il2CppName: get_EventHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::ValidationEventHandler* (System::Xml::Schema::BaseValidator::*)()>(&System::Xml::Schema::BaseValidator::get_EventHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "get_EventHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::get_SchemaInfo
// Il2CppName: get_SchemaInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaInfo* (System::Xml::Schema::BaseValidator::*)()>(&System::Xml::Schema::BaseValidator::get_SchemaInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "get_SchemaInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::set_DtdInfo
// Il2CppName: set_DtdInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::BaseValidator::*)(::System::Xml::IDtdInfo*)>(&System::Xml::Schema::BaseValidator::set_DtdInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "IDtdInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "set_DtdInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::get_PreserveWhitespace
// Il2CppName: get_PreserveWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::BaseValidator::*)()>(&System::Xml::Schema::BaseValidator::get_PreserveWhitespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "get_PreserveWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::BaseValidator::*)()>(&System::Xml::Schema::BaseValidator::Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::CompleteValidation
// Il2CppName: CompleteValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::BaseValidator::*)()>(&System::Xml::Schema::BaseValidator::CompleteValidation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "CompleteValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::FindId
// Il2CppName: FindId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::BaseValidator::*)(::StringW)>(&System::Xml::Schema::BaseValidator::FindId)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "FindId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::ValidateText
// Il2CppName: ValidateText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::BaseValidator::*)()>(&System::Xml::Schema::BaseValidator::ValidateText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "ValidateText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::ValidateWhitespace
// Il2CppName: ValidateWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::BaseValidator::*)()>(&System::Xml::Schema::BaseValidator::ValidateWhitespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "ValidateWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::SaveTextValue
// Il2CppName: SaveTextValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::BaseValidator::*)(::StringW)>(&System::Xml::Schema::BaseValidator::SaveTextValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "SaveTextValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::BaseValidator::*)(::StringW)>(&System::Xml::Schema::BaseValidator::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::BaseValidator::*)(::StringW, ::ArrayW<::StringW>)>(&System::Xml::Schema::BaseValidator::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, args});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::BaseValidator::*)(::StringW, ::StringW)>(&System::Xml::Schema::BaseValidator::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, arg});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::BaseValidator::*)(::System::Xml::Schema::XmlSchemaException*)>(&System::Xml::Schema::BaseValidator::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaException")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::BaseValidator::*)(::StringW, ::StringW, ::System::Xml::Schema::XmlSeverityType)>(&System::Xml::Schema::BaseValidator::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* severity = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSeverityType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, msg, severity});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::BaseValidator::*)(::StringW, ::ArrayW<::StringW>, ::System::Xml::Schema::XmlSeverityType)>(&System::Xml::Schema::BaseValidator::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* severity = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSeverityType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, args, severity});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::BaseValidator::*)(::System::Xml::Schema::XmlSchemaException*, ::System::Xml::Schema::XmlSeverityType)>(&System::Xml::Schema::BaseValidator::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaException")->byval_arg;
    static auto* severity = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSeverityType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, severity});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::ProcessEntity
// Il2CppName: ProcessEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::SchemaInfo*, ::StringW, ::Il2CppObject*, ::System::Xml::Schema::ValidationEventHandler*, ::StringW, int, int)>(&System::Xml::Schema::BaseValidator::ProcessEntity)> {
  static const MethodInfo* get() {
    static auto* sinfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaInfo")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* eventhandler = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationEventHandler")->byval_arg;
    static auto* baseUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* lineNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* linePosition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "ProcessEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sinfo, name, sender, eventhandler, baseUri, lineNumber, linePosition});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::ProcessEntity
// Il2CppName: ProcessEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::SchemaInfo*, ::StringW, ::System::Xml::IValidationEventHandling*, ::StringW, int, int)>(&System::Xml::Schema::BaseValidator::ProcessEntity)> {
  static const MethodInfo* get() {
    static auto* sinfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaInfo")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* eventHandling = &::il2cpp_utils::GetClassFromName("System.Xml", "IValidationEventHandling")->byval_arg;
    static auto* baseUriStr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* lineNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* linePosition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "ProcessEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sinfo, name, eventHandling, baseUriStr, lineNumber, linePosition});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::BaseValidator::CreateInstance
// Il2CppName: CreateInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::BaseValidator* (*)(::System::Xml::ValidationType, ::System::Xml::XmlValidatingReaderImpl*, ::System::Xml::Schema::XmlSchemaCollection*, ::System::Xml::IValidationEventHandling*, bool)>(&System::Xml::Schema::BaseValidator::CreateInstance)> {
  static const MethodInfo* get() {
    static auto* valType = &::il2cpp_utils::GetClassFromName("System.Xml", "ValidationType")->byval_arg;
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlValidatingReaderImpl")->byval_arg;
    static auto* schemaCollection = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaCollection")->byval_arg;
    static auto* eventHandling = &::il2cpp_utils::GetClassFromName("System.Xml", "IValidationEventHandling")->byval_arg;
    static auto* processIdentityConstraints = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::BaseValidator*), "CreateInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{valType, reader, schemaCollection, eventHandling, processIdentityConstraints});
  }
};
