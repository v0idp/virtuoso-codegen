// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.NamespaceList
#include "System/Xml/Schema/NamespaceList.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: NamespaceListV1Compat
  class NamespaceListV1Compat;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::NamespaceListV1Compat);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::NamespaceListV1Compat*, "System.Xml.Schema", "NamespaceListV1Compat");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.NamespaceListV1Compat
  // [TokenAttribute] Offset: FFFFFFFF
  class NamespaceListV1Compat : public ::System::Xml::Schema::NamespaceList {
    public:
    // public System.Void .ctor(System.String namespaces, System.String targetNamespace)
    // Offset: 0xAF70B8
    // Implemented from: System.Xml.Schema.NamespaceList
    // Base method: System.Void NamespaceList::.ctor(System.String namespaces, System.String targetNamespace)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NamespaceListV1Compat* New_ctor(::StringW namespaces, ::StringW targetNamespace) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::NamespaceListV1Compat::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NamespaceListV1Compat*, creationType>(namespaces, targetNamespace)));
    }
    // public override System.Boolean Allows(System.String ns)
    // Offset: 0xAF70BC
    // Implemented from: System.Xml.Schema.NamespaceList
    // Base method: System.Boolean NamespaceList::Allows(System.String ns)
    bool Allows(::StringW ns);
  }; // System.Xml.Schema.NamespaceListV1Compat
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::NamespaceListV1Compat::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::NamespaceListV1Compat::Allows
// Il2CppName: Allows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::NamespaceListV1Compat::*)(::StringW)>(&System::Xml::Schema::NamespaceListV1Compat::Allows)> {
  static const MethodInfo* get() {
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::NamespaceListV1Compat*), "Allows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ns});
  }
};
