// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XdrBuilder
#include "System/Xml/Schema/XdrBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: SchemaElementDecl
  class SchemaElementDecl;
  // Forward declaring type: SchemaAttDef
  class SchemaAttDef;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XdrBuilder::DeclBaseInfo);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XdrBuilder::DeclBaseInfo*, "System.Xml.Schema", "XdrBuilder/DeclBaseInfo");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XdrBuilder/System.Xml.Schema.DeclBaseInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class XdrBuilder::DeclBaseInfo : public ::Il2CppObject {
    public:
    public:
    // System.Xml.XmlQualifiedName _Name
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::XmlQualifiedName* Name;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    // System.String _Prefix
    // Size: 0x8
    // Offset: 0x18
    ::StringW Prefix;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Xml.XmlQualifiedName _TypeName
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::XmlQualifiedName* TypeName;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    // System.String _TypePrefix
    // Size: 0x8
    // Offset: 0x28
    ::StringW TypePrefix;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Object _Default
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppObject* Default;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // System.Object _Revises
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppObject* Revises;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // System.UInt32 _MaxOccurs
    // Size: 0x4
    // Offset: 0x40
    uint MaxOccurs;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // System.UInt32 _MinOccurs
    // Size: 0x4
    // Offset: 0x44
    uint MinOccurs;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // System.Boolean _Checking
    // Size: 0x1
    // Offset: 0x48
    bool Checking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Checking and: ElementDecl
    char __padding8[0x7] = {};
    // System.Xml.Schema.SchemaElementDecl _ElementDecl
    // Size: 0x8
    // Offset: 0x50
    ::System::Xml::Schema::SchemaElementDecl* ElementDecl;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::SchemaElementDecl*) == 0x8);
    // System.Xml.Schema.SchemaAttDef _Attdef
    // Size: 0x8
    // Offset: 0x58
    ::System::Xml::Schema::SchemaAttDef* Attdef;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::SchemaAttDef*) == 0x8);
    // System.Xml.Schema.XdrBuilder/System.Xml.Schema.DeclBaseInfo _Next
    // Size: 0x8
    // Offset: 0x60
    ::System::Xml::Schema::XdrBuilder::DeclBaseInfo* Next;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XdrBuilder::DeclBaseInfo*) == 0x8);
    public:
    // Get instance field reference: System.Xml.XmlQualifiedName _Name
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlQualifiedName*& dyn__Name();
    // Get instance field reference: System.String _Prefix
    [[deprecated("Use field access instead!")]] ::StringW& dyn__Prefix();
    // Get instance field reference: System.Xml.XmlQualifiedName _TypeName
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlQualifiedName*& dyn__TypeName();
    // Get instance field reference: System.String _TypePrefix
    [[deprecated("Use field access instead!")]] ::StringW& dyn__TypePrefix();
    // Get instance field reference: System.Object _Default
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__Default();
    // Get instance field reference: System.Object _Revises
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__Revises();
    // Get instance field reference: System.UInt32 _MaxOccurs
    [[deprecated("Use field access instead!")]] uint& dyn__MaxOccurs();
    // Get instance field reference: System.UInt32 _MinOccurs
    [[deprecated("Use field access instead!")]] uint& dyn__MinOccurs();
    // Get instance field reference: System.Boolean _Checking
    [[deprecated("Use field access instead!")]] bool& dyn__Checking();
    // Get instance field reference: System.Xml.Schema.SchemaElementDecl _ElementDecl
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::SchemaElementDecl*& dyn__ElementDecl();
    // Get instance field reference: System.Xml.Schema.SchemaAttDef _Attdef
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::SchemaAttDef*& dyn__Attdef();
    // Get instance field reference: System.Xml.Schema.XdrBuilder/System.Xml.Schema.DeclBaseInfo _Next
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XdrBuilder::DeclBaseInfo*& dyn__Next();
    // System.Void .ctor()
    // Offset: 0xC1EE14
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XdrBuilder::DeclBaseInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XdrBuilder::DeclBaseInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XdrBuilder::DeclBaseInfo*, creationType>()));
    }
    // System.Void Reset()
    // Offset: 0xC1EE3C
    void Reset();
  }; // System.Xml.Schema.XdrBuilder/System.Xml.Schema.DeclBaseInfo
  #pragma pack(pop)
  static check_size<sizeof(XdrBuilder::DeclBaseInfo), 96 + sizeof(::System::Xml::Schema::XdrBuilder::DeclBaseInfo*)> __System_Xml_Schema_XdrBuilder_DeclBaseInfoSizeCheck;
  static_assert(sizeof(XdrBuilder::DeclBaseInfo) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XdrBuilder::DeclBaseInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XdrBuilder::DeclBaseInfo::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XdrBuilder::DeclBaseInfo::*)()>(&System::Xml::Schema::XdrBuilder::DeclBaseInfo::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XdrBuilder::DeclBaseInfo*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
