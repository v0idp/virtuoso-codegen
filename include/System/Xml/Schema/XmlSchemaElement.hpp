// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlSchemaParticle
#include "System/Xml/Schema/XmlSchemaParticle.hpp"
// Including type: System.Xml.Schema.XmlSchemaDerivationMethod
#include "System/Xml/Schema/XmlSchemaDerivationMethod.hpp"
// Including type: System.Xml.Schema.XmlSchemaForm
#include "System/Xml/Schema/XmlSchemaForm.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaType
  class XmlSchemaType;
  // Forward declaring type: XmlSchemaObjectCollection
  class XmlSchemaObjectCollection;
  // Forward declaring type: SchemaElementDecl
  class SchemaElementDecl;
  // Forward declaring type: XmlSchema
  class XmlSchema;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaElement
  class XmlSchemaElement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchemaElement);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaElement*, "System.Xml.Schema", "XmlSchemaElement");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0xE8
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaElement
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSchemaElement : public ::System::Xml::Schema::XmlSchemaParticle {
    public:
    public:
    // private System.Boolean isAbstract
    // Size: 0x1
    // Offset: 0x74
    bool isAbstract;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hasAbstractAttribute
    // Size: 0x1
    // Offset: 0x75
    bool hasAbstractAttribute;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isNillable
    // Size: 0x1
    // Offset: 0x76
    bool isNillable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hasNillableAttribute
    // Size: 0x1
    // Offset: 0x77
    bool hasNillableAttribute;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isLocalTypeDerivationChecked
    // Size: 0x1
    // Offset: 0x78
    bool isLocalTypeDerivationChecked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isLocalTypeDerivationChecked and: block
    char __padding4[0x3] = {};
    // private System.Xml.Schema.XmlSchemaDerivationMethod block
    // Size: 0x4
    // Offset: 0x7C
    ::System::Xml::Schema::XmlSchemaDerivationMethod block;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaDerivationMethod) == 0x4);
    // private System.Xml.Schema.XmlSchemaDerivationMethod final
    // Size: 0x4
    // Offset: 0x80
    ::System::Xml::Schema::XmlSchemaDerivationMethod final;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaDerivationMethod) == 0x4);
    // private System.Xml.Schema.XmlSchemaForm form
    // Size: 0x4
    // Offset: 0x84
    ::System::Xml::Schema::XmlSchemaForm form;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaForm) == 0x4);
    // private System.String defaultValue
    // Size: 0x8
    // Offset: 0x88
    ::StringW defaultValue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String fixedValue
    // Size: 0x8
    // Offset: 0x90
    ::StringW fixedValue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String name
    // Size: 0x8
    // Offset: 0x98
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.XmlQualifiedName refName
    // Size: 0x8
    // Offset: 0xA0
    ::System::Xml::XmlQualifiedName* refName;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    // private System.Xml.XmlQualifiedName substitutionGroup
    // Size: 0x8
    // Offset: 0xA8
    ::System::Xml::XmlQualifiedName* substitutionGroup;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    // private System.Xml.XmlQualifiedName typeName
    // Size: 0x8
    // Offset: 0xB0
    ::System::Xml::XmlQualifiedName* typeName;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    // private System.Xml.Schema.XmlSchemaType type
    // Size: 0x8
    // Offset: 0xB8
    ::System::Xml::Schema::XmlSchemaType* type;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaType*) == 0x8);
    // private System.Xml.XmlQualifiedName qualifiedName
    // Size: 0x8
    // Offset: 0xC0
    ::System::Xml::XmlQualifiedName* qualifiedName;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    // private System.Xml.Schema.XmlSchemaType elementType
    // Size: 0x8
    // Offset: 0xC8
    ::System::Xml::Schema::XmlSchemaType* elementType;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaType*) == 0x8);
    // private System.Xml.Schema.XmlSchemaDerivationMethod blockResolved
    // Size: 0x4
    // Offset: 0xD0
    ::System::Xml::Schema::XmlSchemaDerivationMethod blockResolved;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaDerivationMethod) == 0x4);
    // private System.Xml.Schema.XmlSchemaDerivationMethod finalResolved
    // Size: 0x4
    // Offset: 0xD4
    ::System::Xml::Schema::XmlSchemaDerivationMethod finalResolved;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaDerivationMethod) == 0x4);
    // private System.Xml.Schema.XmlSchemaObjectCollection constraints
    // Size: 0x8
    // Offset: 0xD8
    ::System::Xml::Schema::XmlSchemaObjectCollection* constraints;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectCollection*) == 0x8);
    // private System.Xml.Schema.SchemaElementDecl elementDecl
    // Size: 0x8
    // Offset: 0xE0
    ::System::Xml::Schema::SchemaElementDecl* elementDecl;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::SchemaElementDecl*) == 0x8);
    public:
    // Get instance field reference: private System.Boolean isAbstract
    [[deprecated]] bool& dyn_isAbstract();
    // Get instance field reference: private System.Boolean hasAbstractAttribute
    [[deprecated]] bool& dyn_hasAbstractAttribute();
    // Get instance field reference: private System.Boolean isNillable
    [[deprecated]] bool& dyn_isNillable();
    // Get instance field reference: private System.Boolean hasNillableAttribute
    [[deprecated]] bool& dyn_hasNillableAttribute();
    // Get instance field reference: private System.Boolean isLocalTypeDerivationChecked
    [[deprecated]] bool& dyn_isLocalTypeDerivationChecked();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaDerivationMethod block
    [[deprecated]] ::System::Xml::Schema::XmlSchemaDerivationMethod& dyn_block();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaDerivationMethod final
    [[deprecated]] ::System::Xml::Schema::XmlSchemaDerivationMethod& dyn_final();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaForm form
    [[deprecated]] ::System::Xml::Schema::XmlSchemaForm& dyn_form();
    // Get instance field reference: private System.String defaultValue
    [[deprecated]] ::StringW& dyn_defaultValue();
    // Get instance field reference: private System.String fixedValue
    [[deprecated]] ::StringW& dyn_fixedValue();
    // Get instance field reference: private System.String name
    [[deprecated]] ::StringW& dyn_name();
    // Get instance field reference: private System.Xml.XmlQualifiedName refName
    [[deprecated]] ::System::Xml::XmlQualifiedName*& dyn_refName();
    // Get instance field reference: private System.Xml.XmlQualifiedName substitutionGroup
    [[deprecated]] ::System::Xml::XmlQualifiedName*& dyn_substitutionGroup();
    // Get instance field reference: private System.Xml.XmlQualifiedName typeName
    [[deprecated]] ::System::Xml::XmlQualifiedName*& dyn_typeName();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaType type
    [[deprecated]] ::System::Xml::Schema::XmlSchemaType*& dyn_type();
    // Get instance field reference: private System.Xml.XmlQualifiedName qualifiedName
    [[deprecated]] ::System::Xml::XmlQualifiedName*& dyn_qualifiedName();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaType elementType
    [[deprecated]] ::System::Xml::Schema::XmlSchemaType*& dyn_elementType();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaDerivationMethod blockResolved
    [[deprecated]] ::System::Xml::Schema::XmlSchemaDerivationMethod& dyn_blockResolved();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaDerivationMethod finalResolved
    [[deprecated]] ::System::Xml::Schema::XmlSchemaDerivationMethod& dyn_finalResolved();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectCollection constraints
    [[deprecated]] ::System::Xml::Schema::XmlSchemaObjectCollection*& dyn_constraints();
    // Get instance field reference: private System.Xml.Schema.SchemaElementDecl elementDecl
    [[deprecated]] ::System::Xml::Schema::SchemaElementDecl*& dyn_elementDecl();
    // public System.Boolean get_IsAbstract()
    // Offset: 0x110DC78
    bool get_IsAbstract();
    // public System.Void set_IsAbstract(System.Boolean value)
    // Offset: 0x110DC80
    void set_IsAbstract(bool value);
    // public System.Xml.Schema.XmlSchemaDerivationMethod get_Block()
    // Offset: 0x110DC94
    ::System::Xml::Schema::XmlSchemaDerivationMethod get_Block();
    // public System.Void set_Block(System.Xml.Schema.XmlSchemaDerivationMethod value)
    // Offset: 0x110DC9C
    void set_Block(::System::Xml::Schema::XmlSchemaDerivationMethod value);
    // public System.String get_DefaultValue()
    // Offset: 0x110DCA4
    ::StringW get_DefaultValue();
    // public System.Void set_DefaultValue(System.String value)
    // Offset: 0x110DCAC
    void set_DefaultValue(::StringW value);
    // public System.Xml.Schema.XmlSchemaDerivationMethod get_Final()
    // Offset: 0x110DCB4
    ::System::Xml::Schema::XmlSchemaDerivationMethod get_Final();
    // public System.Void set_Final(System.Xml.Schema.XmlSchemaDerivationMethod value)
    // Offset: 0x110DCBC
    void set_Final(::System::Xml::Schema::XmlSchemaDerivationMethod value);
    // public System.String get_FixedValue()
    // Offset: 0x110DCC4
    ::StringW get_FixedValue();
    // public System.Void set_FixedValue(System.String value)
    // Offset: 0x110DCCC
    void set_FixedValue(::StringW value);
    // public System.Xml.Schema.XmlSchemaForm get_Form()
    // Offset: 0x110DCD4
    ::System::Xml::Schema::XmlSchemaForm get_Form();
    // public System.Void set_Form(System.Xml.Schema.XmlSchemaForm value)
    // Offset: 0x110DCDC
    void set_Form(::System::Xml::Schema::XmlSchemaForm value);
    // public System.String get_Name()
    // Offset: 0x110DCE4
    ::StringW get_Name();
    // public System.Void set_Name(System.String value)
    // Offset: 0x110DCEC
    void set_Name(::StringW value);
    // public System.Boolean get_IsNillable()
    // Offset: 0x110DCF4
    bool get_IsNillable();
    // public System.Void set_IsNillable(System.Boolean value)
    // Offset: 0x110DCFC
    void set_IsNillable(bool value);
    // System.Boolean get_HasNillableAttribute()
    // Offset: 0x110DD10
    bool get_HasNillableAttribute();
    // System.Boolean get_HasAbstractAttribute()
    // Offset: 0x110DD18
    bool get_HasAbstractAttribute();
    // public System.Xml.XmlQualifiedName get_RefName()
    // Offset: 0x110DD20
    ::System::Xml::XmlQualifiedName* get_RefName();
    // public System.Void set_RefName(System.Xml.XmlQualifiedName value)
    // Offset: 0x110DD28
    void set_RefName(::System::Xml::XmlQualifiedName* value);
    // public System.Xml.XmlQualifiedName get_SubstitutionGroup()
    // Offset: 0x110DDD4
    ::System::Xml::XmlQualifiedName* get_SubstitutionGroup();
    // public System.Void set_SubstitutionGroup(System.Xml.XmlQualifiedName value)
    // Offset: 0x110DDDC
    void set_SubstitutionGroup(::System::Xml::XmlQualifiedName* value);
    // public System.Xml.XmlQualifiedName get_SchemaTypeName()
    // Offset: 0x110DE88
    ::System::Xml::XmlQualifiedName* get_SchemaTypeName();
    // public System.Void set_SchemaTypeName(System.Xml.XmlQualifiedName value)
    // Offset: 0x110DE90
    void set_SchemaTypeName(::System::Xml::XmlQualifiedName* value);
    // public System.Xml.Schema.XmlSchemaType get_SchemaType()
    // Offset: 0x110DF3C
    ::System::Xml::Schema::XmlSchemaType* get_SchemaType();
    // public System.Void set_SchemaType(System.Xml.Schema.XmlSchemaType value)
    // Offset: 0x110DF44
    void set_SchemaType(::System::Xml::Schema::XmlSchemaType* value);
    // public System.Xml.Schema.XmlSchemaObjectCollection get_Constraints()
    // Offset: 0x110DF4C
    ::System::Xml::Schema::XmlSchemaObjectCollection* get_Constraints();
    // public System.Xml.XmlQualifiedName get_QualifiedName()
    // Offset: 0x110DFB4
    ::System::Xml::XmlQualifiedName* get_QualifiedName();
    // public System.Xml.Schema.XmlSchemaType get_ElementSchemaType()
    // Offset: 0x110DFBC
    ::System::Xml::Schema::XmlSchemaType* get_ElementSchemaType();
    // public System.Xml.Schema.XmlSchemaDerivationMethod get_BlockResolved()
    // Offset: 0x110DFC4
    ::System::Xml::Schema::XmlSchemaDerivationMethod get_BlockResolved();
    // public System.Xml.Schema.XmlSchemaDerivationMethod get_FinalResolved()
    // Offset: 0x110DFCC
    ::System::Xml::Schema::XmlSchemaDerivationMethod get_FinalResolved();
    // System.Boolean get_HasConstraints()
    // Offset: 0x110DFF4
    bool get_HasConstraints();
    // System.Boolean get_IsLocalTypeDerivationChecked()
    // Offset: 0x110E01C
    bool get_IsLocalTypeDerivationChecked();
    // System.Void set_IsLocalTypeDerivationChecked(System.Boolean value)
    // Offset: 0x110E024
    void set_IsLocalTypeDerivationChecked(bool value);
    // System.Xml.Schema.SchemaElementDecl get_ElementDecl()
    // Offset: 0x110E030
    ::System::Xml::Schema::SchemaElementDecl* get_ElementDecl();
    // System.Void set_ElementDecl(System.Xml.Schema.SchemaElementDecl value)
    // Offset: 0x110E038
    void set_ElementDecl(::System::Xml::Schema::SchemaElementDecl* value);
    // System.Void SetQualifiedName(System.Xml.XmlQualifiedName value)
    // Offset: 0x110DFD4
    void SetQualifiedName(::System::Xml::XmlQualifiedName* value);
    // System.Void SetElementType(System.Xml.Schema.XmlSchemaType value)
    // Offset: 0x110DFDC
    void SetElementType(::System::Xml::Schema::XmlSchemaType* value);
    // System.Void SetBlockResolved(System.Xml.Schema.XmlSchemaDerivationMethod value)
    // Offset: 0x110DFE4
    void SetBlockResolved(::System::Xml::Schema::XmlSchemaDerivationMethod value);
    // System.Void SetFinalResolved(System.Xml.Schema.XmlSchemaDerivationMethod value)
    // Offset: 0x110DFEC
    void SetFinalResolved(::System::Xml::Schema::XmlSchemaDerivationMethod value);
    // System.Xml.Schema.XmlSchemaObject Clone(System.Xml.Schema.XmlSchema parentSchema)
    // Offset: 0x11081F4
    ::System::Xml::Schema::XmlSchemaObject* Clone(::System::Xml::Schema::XmlSchema* parentSchema);
    // override System.String get_NameAttribute()
    // Offset: 0x110E040
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.String XmlSchemaObject::get_NameAttribute()
    ::StringW get_NameAttribute();
    // override System.Void set_NameAttribute(System.String value)
    // Offset: 0x110E048
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.Void XmlSchemaObject::set_NameAttribute(System.String value)
    void set_NameAttribute(::StringW value);
    // override System.String get_NameString()
    // Offset: 0x110E050
    // Implemented from: System.Xml.Schema.XmlSchemaParticle
    // Base method: System.String XmlSchemaParticle::get_NameString()
    ::StringW get_NameString();
    // public System.Void .ctor()
    // Offset: 0x110E078
    // Implemented from: System.Xml.Schema.XmlSchemaParticle
    // Base method: System.Void XmlSchemaParticle::.ctor()
    // Base method: System.Void XmlSchemaAnnotated::.ctor()
    // Base method: System.Void XmlSchemaObject::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaElement* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaElement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaElement*, creationType>()));
    }
    // override System.Xml.Schema.XmlSchemaObject Clone()
    // Offset: 0x110E070
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.Xml.Schema.XmlSchemaObject XmlSchemaObject::Clone()
    ::System::Xml::Schema::XmlSchemaObject* Clone();
  }; // System.Xml.Schema.XmlSchemaElement
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaElement), 224 + sizeof(::System::Xml::Schema::SchemaElementDecl*)> __System_Xml_Schema_XmlSchemaElementSizeCheck;
  static_assert(sizeof(XmlSchemaElement) == 0xE8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_IsAbstract
// Il2CppName: get_IsAbstract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_IsAbstract)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_IsAbstract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::set_IsAbstract
// Il2CppName: set_IsAbstract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(bool)>(&System::Xml::Schema::XmlSchemaElement::set_IsAbstract)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "set_IsAbstract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_Block
// Il2CppName: get_Block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaDerivationMethod (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_Block)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_Block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::set_Block
// Il2CppName: set_Block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(::System::Xml::Schema::XmlSchemaDerivationMethod)>(&System::Xml::Schema::XmlSchemaElement::set_Block)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaDerivationMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "set_Block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_DefaultValue
// Il2CppName: get_DefaultValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_DefaultValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_DefaultValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::set_DefaultValue
// Il2CppName: set_DefaultValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(::StringW)>(&System::Xml::Schema::XmlSchemaElement::set_DefaultValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "set_DefaultValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_Final
// Il2CppName: get_Final
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaDerivationMethod (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_Final)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_Final", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::set_Final
// Il2CppName: set_Final
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(::System::Xml::Schema::XmlSchemaDerivationMethod)>(&System::Xml::Schema::XmlSchemaElement::set_Final)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaDerivationMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "set_Final", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_FixedValue
// Il2CppName: get_FixedValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_FixedValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_FixedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::set_FixedValue
// Il2CppName: set_FixedValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(::StringW)>(&System::Xml::Schema::XmlSchemaElement::set_FixedValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "set_FixedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_Form
// Il2CppName: get_Form
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaForm (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_Form)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_Form", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::set_Form
// Il2CppName: set_Form
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(::System::Xml::Schema::XmlSchemaForm)>(&System::Xml::Schema::XmlSchemaElement::set_Form)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaForm")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "set_Form", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(::StringW)>(&System::Xml::Schema::XmlSchemaElement::set_Name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_IsNillable
// Il2CppName: get_IsNillable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_IsNillable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_IsNillable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::set_IsNillable
// Il2CppName: set_IsNillable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(bool)>(&System::Xml::Schema::XmlSchemaElement::set_IsNillable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "set_IsNillable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_HasNillableAttribute
// Il2CppName: get_HasNillableAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_HasNillableAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_HasNillableAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_HasAbstractAttribute
// Il2CppName: get_HasAbstractAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_HasAbstractAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_HasAbstractAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_RefName
// Il2CppName: get_RefName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_RefName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_RefName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::set_RefName
// Il2CppName: set_RefName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XmlSchemaElement::set_RefName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "set_RefName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_SubstitutionGroup
// Il2CppName: get_SubstitutionGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_SubstitutionGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_SubstitutionGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::set_SubstitutionGroup
// Il2CppName: set_SubstitutionGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XmlSchemaElement::set_SubstitutionGroup)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "set_SubstitutionGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_SchemaTypeName
// Il2CppName: get_SchemaTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_SchemaTypeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_SchemaTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::set_SchemaTypeName
// Il2CppName: set_SchemaTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XmlSchemaElement::set_SchemaTypeName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "set_SchemaTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_SchemaType
// Il2CppName: get_SchemaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaType* (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_SchemaType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_SchemaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::set_SchemaType
// Il2CppName: set_SchemaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(::System::Xml::Schema::XmlSchemaType*)>(&System::Xml::Schema::XmlSchemaElement::set_SchemaType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "set_SchemaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_Constraints
// Il2CppName: get_Constraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectCollection* (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_Constraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_Constraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_QualifiedName
// Il2CppName: get_QualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_QualifiedName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_QualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_ElementSchemaType
// Il2CppName: get_ElementSchemaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaType* (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_ElementSchemaType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_ElementSchemaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_BlockResolved
// Il2CppName: get_BlockResolved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaDerivationMethod (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_BlockResolved)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_BlockResolved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_FinalResolved
// Il2CppName: get_FinalResolved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaDerivationMethod (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_FinalResolved)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_FinalResolved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_HasConstraints
// Il2CppName: get_HasConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_HasConstraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_HasConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_IsLocalTypeDerivationChecked
// Il2CppName: get_IsLocalTypeDerivationChecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_IsLocalTypeDerivationChecked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_IsLocalTypeDerivationChecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::set_IsLocalTypeDerivationChecked
// Il2CppName: set_IsLocalTypeDerivationChecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(bool)>(&System::Xml::Schema::XmlSchemaElement::set_IsLocalTypeDerivationChecked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "set_IsLocalTypeDerivationChecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_ElementDecl
// Il2CppName: get_ElementDecl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaElementDecl* (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_ElementDecl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_ElementDecl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::set_ElementDecl
// Il2CppName: set_ElementDecl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(::System::Xml::Schema::SchemaElementDecl*)>(&System::Xml::Schema::XmlSchemaElement::set_ElementDecl)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaElementDecl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "set_ElementDecl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::SetQualifiedName
// Il2CppName: SetQualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XmlSchemaElement::SetQualifiedName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "SetQualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::SetElementType
// Il2CppName: SetElementType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(::System::Xml::Schema::XmlSchemaType*)>(&System::Xml::Schema::XmlSchemaElement::SetElementType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "SetElementType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::SetBlockResolved
// Il2CppName: SetBlockResolved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(::System::Xml::Schema::XmlSchemaDerivationMethod)>(&System::Xml::Schema::XmlSchemaElement::SetBlockResolved)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaDerivationMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "SetBlockResolved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::SetFinalResolved
// Il2CppName: SetFinalResolved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(::System::Xml::Schema::XmlSchemaDerivationMethod)>(&System::Xml::Schema::XmlSchemaElement::SetFinalResolved)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaDerivationMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "SetFinalResolved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObject* (System::Xml::Schema::XmlSchemaElement::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchemaElement::Clone)> {
  static const MethodInfo* get() {
    static auto* parentSchema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentSchema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_NameAttribute
// Il2CppName: get_NameAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_NameAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_NameAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::set_NameAttribute
// Il2CppName: set_NameAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaElement::*)(::StringW)>(&System::Xml::Schema::XmlSchemaElement::set_NameAttribute)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "set_NameAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::get_NameString
// Il2CppName: get_NameString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::get_NameString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "get_NameString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaElement::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObject* (System::Xml::Schema::XmlSchemaElement::*)()>(&System::Xml::Schema::XmlSchemaElement::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaElement*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
