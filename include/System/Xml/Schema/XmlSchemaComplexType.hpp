// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlSchemaType
#include "System/Xml/Schema/XmlSchemaType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaContentModel
  class XmlSchemaContentModel;
  // Forward declaring type: XmlSchemaParticle
  class XmlSchemaParticle;
  // Forward declaring type: XmlSchemaObjectCollection
  class XmlSchemaObjectCollection;
  // Forward declaring type: XmlSchemaAnyAttribute
  class XmlSchemaAnyAttribute;
  // Forward declaring type: XmlSchemaObjectTable
  class XmlSchemaObjectTable;
  // Forward declaring type: ContentValidator
  class ContentValidator;
  // Skipping declaration: XmlSchemaContentType because it is already included!
  // Forward declaring type: XmlSchemaContentProcessing
  struct XmlSchemaContentProcessing;
  // Forward declaring type: XmlSchema
  class XmlSchema;
  // Forward declaring type: XmlSchemaForm
  struct XmlSchemaForm;
  // Forward declaring type: XmlSchemaElement
  class XmlSchemaElement;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaComplexType
  class XmlSchemaComplexType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchemaComplexType);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaComplexType*, "System.Xml.Schema", "XmlSchemaComplexType");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0xE1
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaComplexType
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSchemaComplexType : public ::System::Xml::Schema::XmlSchemaType {
    public:
    public:
    // private System.Xml.Schema.XmlSchemaDerivationMethod block
    // Size: 0x4
    // Offset: 0x94
    ::System::Xml::Schema::XmlSchemaDerivationMethod block;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaDerivationMethod) == 0x4);
    // private System.Xml.Schema.XmlSchemaContentModel contentModel
    // Size: 0x8
    // Offset: 0x98
    ::System::Xml::Schema::XmlSchemaContentModel* contentModel;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaContentModel*) == 0x8);
    // private System.Xml.Schema.XmlSchemaParticle particle
    // Size: 0x8
    // Offset: 0xA0
    ::System::Xml::Schema::XmlSchemaParticle* particle;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaParticle*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectCollection attributes
    // Size: 0x8
    // Offset: 0xA8
    ::System::Xml::Schema::XmlSchemaObjectCollection* attributes;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectCollection*) == 0x8);
    // private System.Xml.Schema.XmlSchemaAnyAttribute anyAttribute
    // Size: 0x8
    // Offset: 0xB0
    ::System::Xml::Schema::XmlSchemaAnyAttribute* anyAttribute;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaAnyAttribute*) == 0x8);
    // private System.Xml.Schema.XmlSchemaParticle contentTypeParticle
    // Size: 0x8
    // Offset: 0xB8
    ::System::Xml::Schema::XmlSchemaParticle* contentTypeParticle;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaParticle*) == 0x8);
    // private System.Xml.Schema.XmlSchemaDerivationMethod blockResolved
    // Size: 0x4
    // Offset: 0xC0
    ::System::Xml::Schema::XmlSchemaDerivationMethod blockResolved;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaDerivationMethod) == 0x4);
    // Padding between fields: blockResolved and: localElements
    char __padding6[0x4] = {};
    // private System.Xml.Schema.XmlSchemaObjectTable localElements
    // Size: 0x8
    // Offset: 0xC8
    ::System::Xml::Schema::XmlSchemaObjectTable* localElements;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectTable attributeUses
    // Size: 0x8
    // Offset: 0xD0
    ::System::Xml::Schema::XmlSchemaObjectTable* attributeUses;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Xml.Schema.XmlSchemaAnyAttribute attributeWildcard
    // Size: 0x8
    // Offset: 0xD8
    ::System::Xml::Schema::XmlSchemaAnyAttribute* attributeWildcard;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaAnyAttribute*) == 0x8);
    // private System.Byte pvFlags
    // Size: 0x1
    // Offset: 0xE0
    uint8_t pvFlags;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Get static field: static private System.Xml.Schema.XmlSchemaComplexType anyTypeLax
    static ::System::Xml::Schema::XmlSchemaComplexType* _get_anyTypeLax();
    // Set static field: static private System.Xml.Schema.XmlSchemaComplexType anyTypeLax
    static void _set_anyTypeLax(::System::Xml::Schema::XmlSchemaComplexType* value);
    // Get static field: static private System.Xml.Schema.XmlSchemaComplexType anyTypeSkip
    static ::System::Xml::Schema::XmlSchemaComplexType* _get_anyTypeSkip();
    // Set static field: static private System.Xml.Schema.XmlSchemaComplexType anyTypeSkip
    static void _set_anyTypeSkip(::System::Xml::Schema::XmlSchemaComplexType* value);
    // Get static field: static private System.Xml.Schema.XmlSchemaComplexType untypedAnyType
    static ::System::Xml::Schema::XmlSchemaComplexType* _get_untypedAnyType();
    // Set static field: static private System.Xml.Schema.XmlSchemaComplexType untypedAnyType
    static void _set_untypedAnyType(::System::Xml::Schema::XmlSchemaComplexType* value);
    // Get instance field reference: private System.Xml.Schema.XmlSchemaDerivationMethod block
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaDerivationMethod& dyn_block();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaContentModel contentModel
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaContentModel*& dyn_contentModel();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaParticle particle
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaParticle*& dyn_particle();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectCollection attributes
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaObjectCollection*& dyn_attributes();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaAnyAttribute anyAttribute
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaAnyAttribute*& dyn_anyAttribute();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaParticle contentTypeParticle
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaParticle*& dyn_contentTypeParticle();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaDerivationMethod blockResolved
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaDerivationMethod& dyn_blockResolved();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable localElements
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_localElements();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable attributeUses
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_attributeUses();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaAnyAttribute attributeWildcard
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaAnyAttribute*& dyn_attributeWildcard();
    // Get instance field reference: private System.Byte pvFlags
    [[deprecated("Use field access instead!")]] uint8_t& dyn_pvFlags();
    // static System.Xml.Schema.XmlSchemaComplexType get_AnyType()
    // Offset: 0x110BA64
    static ::System::Xml::Schema::XmlSchemaComplexType* get_AnyType();
    // static System.Xml.Schema.XmlSchemaComplexType get_UntypedAnyType()
    // Offset: 0x110BAC8
    static ::System::Xml::Schema::XmlSchemaComplexType* get_UntypedAnyType();
    // static System.Xml.Schema.ContentValidator get_AnyTypeContentValidator()
    // Offset: 0x110B730
    static ::System::Xml::Schema::ContentValidator* get_AnyTypeContentValidator();
    // public System.Boolean get_IsAbstract()
    // Offset: 0x110BB2C
    bool get_IsAbstract();
    // public System.Void set_IsAbstract(System.Boolean value)
    // Offset: 0x110BB38
    void set_IsAbstract(bool value);
    // public System.Xml.Schema.XmlSchemaDerivationMethod get_Block()
    // Offset: 0x110BB54
    ::System::Xml::Schema::XmlSchemaDerivationMethod get_Block();
    // public System.Void set_Block(System.Xml.Schema.XmlSchemaDerivationMethod value)
    // Offset: 0x110BB5C
    void set_Block(::System::Xml::Schema::XmlSchemaDerivationMethod value);
    // public System.Xml.Schema.XmlSchemaContentModel get_ContentModel()
    // Offset: 0x110BB8C
    ::System::Xml::Schema::XmlSchemaContentModel* get_ContentModel();
    // public System.Void set_ContentModel(System.Xml.Schema.XmlSchemaContentModel value)
    // Offset: 0x110BB94
    void set_ContentModel(::System::Xml::Schema::XmlSchemaContentModel* value);
    // public System.Xml.Schema.XmlSchemaParticle get_Particle()
    // Offset: 0x110BB9C
    ::System::Xml::Schema::XmlSchemaParticle* get_Particle();
    // public System.Void set_Particle(System.Xml.Schema.XmlSchemaParticle value)
    // Offset: 0x110BBA4
    void set_Particle(::System::Xml::Schema::XmlSchemaParticle* value);
    // public System.Xml.Schema.XmlSchemaObjectCollection get_Attributes()
    // Offset: 0x110BBAC
    ::System::Xml::Schema::XmlSchemaObjectCollection* get_Attributes();
    // public System.Xml.Schema.XmlSchemaAnyAttribute get_AnyAttribute()
    // Offset: 0x110BC14
    ::System::Xml::Schema::XmlSchemaAnyAttribute* get_AnyAttribute();
    // public System.Void set_AnyAttribute(System.Xml.Schema.XmlSchemaAnyAttribute value)
    // Offset: 0x110BC1C
    void set_AnyAttribute(::System::Xml::Schema::XmlSchemaAnyAttribute* value);
    // public System.Xml.Schema.XmlSchemaContentType get_ContentType()
    // Offset: 0x110BC24
    ::System::Xml::Schema::XmlSchemaContentType get_ContentType();
    // public System.Xml.Schema.XmlSchemaParticle get_ContentTypeParticle()
    // Offset: 0x110BC2C
    ::System::Xml::Schema::XmlSchemaParticle* get_ContentTypeParticle();
    // public System.Xml.Schema.XmlSchemaDerivationMethod get_BlockResolved()
    // Offset: 0x110BC34
    ::System::Xml::Schema::XmlSchemaDerivationMethod get_BlockResolved();
    // public System.Xml.Schema.XmlSchemaObjectTable get_AttributeUses()
    // Offset: 0x110BC3C
    ::System::Xml::Schema::XmlSchemaObjectTable* get_AttributeUses();
    // public System.Xml.Schema.XmlSchemaAnyAttribute get_AttributeWildcard()
    // Offset: 0x110BCA0
    ::System::Xml::Schema::XmlSchemaAnyAttribute* get_AttributeWildcard();
    // System.Xml.Schema.XmlSchemaObjectTable get_LocalElements()
    // Offset: 0x110BCA8
    ::System::Xml::Schema::XmlSchemaObjectTable* get_LocalElements();
    // System.Void set_HasWildCard(System.Boolean value)
    // Offset: 0x110BD24
    void set_HasWildCard(bool value);
    // static private System.Void .cctor()
    // Offset: 0x110B1BC
    static void _cctor();
    // static private System.Xml.Schema.XmlSchemaComplexType CreateAnyType(System.Xml.Schema.XmlSchemaContentProcessing processContents)
    // Offset: 0x110B3B8
    static ::System::Xml::Schema::XmlSchemaComplexType* CreateAnyType(::System::Xml::Schema::XmlSchemaContentProcessing processContents);
    // System.Void SetContentTypeParticle(System.Xml.Schema.XmlSchemaParticle value)
    // Offset: 0x110BD0C
    void SetContentTypeParticle(::System::Xml::Schema::XmlSchemaParticle* value);
    // System.Void SetBlockResolved(System.Xml.Schema.XmlSchemaDerivationMethod value)
    // Offset: 0x110BD14
    void SetBlockResolved(::System::Xml::Schema::XmlSchemaDerivationMethod value);
    // System.Void SetAttributeWildcard(System.Xml.Schema.XmlSchemaAnyAttribute value)
    // Offset: 0x110BD1C
    void SetAttributeWildcard(::System::Xml::Schema::XmlSchemaAnyAttribute* value);
    // System.Void SetAttributes(System.Xml.Schema.XmlSchemaObjectCollection newAttributes)
    // Offset: 0x110BD40
    void SetAttributes(::System::Xml::Schema::XmlSchemaObjectCollection* newAttributes);
    // System.Boolean ContainsIdAttribute(System.Boolean findAll)
    // Offset: 0x110BD48
    bool ContainsIdAttribute(bool findAll);
    // System.Xml.Schema.XmlSchemaObject Clone(System.Xml.Schema.XmlSchema parentSchema)
    // Offset: 0x1107B3C
    ::System::Xml::Schema::XmlSchemaObject* Clone(::System::Xml::Schema::XmlSchema* parentSchema);
    // private System.Void ClearCompiledState()
    // Offset: 0x110C6B4
    void ClearCompiledState();
    // static System.Xml.Schema.XmlSchemaObjectCollection CloneAttributes(System.Xml.Schema.XmlSchemaObjectCollection attributes)
    // Offset: 0x1109D68
    static ::System::Xml::Schema::XmlSchemaObjectCollection* CloneAttributes(::System::Xml::Schema::XmlSchemaObjectCollection* attributes);
    // static private System.Xml.Schema.XmlSchemaObjectCollection CloneGroupBaseParticles(System.Xml.Schema.XmlSchemaObjectCollection groupBaseParticles, System.Xml.Schema.XmlSchema parentSchema)
    // Offset: 0x110C7A0
    static ::System::Xml::Schema::XmlSchemaObjectCollection* CloneGroupBaseParticles(::System::Xml::Schema::XmlSchemaObjectCollection* groupBaseParticles, ::System::Xml::Schema::XmlSchema* parentSchema);
    // static System.Xml.Schema.XmlSchemaParticle CloneParticle(System.Xml.Schema.XmlSchemaParticle particle, System.Xml.Schema.XmlSchema parentSchema)
    // Offset: 0x110C3F4
    static ::System::Xml::Schema::XmlSchemaParticle* CloneParticle(::System::Xml::Schema::XmlSchemaParticle* particle, ::System::Xml::Schema::XmlSchema* parentSchema);
    // static private System.Xml.Schema.XmlSchemaForm GetResolvedElementForm(System.Xml.Schema.XmlSchema parentSchema, System.Xml.Schema.XmlSchemaElement element)
    // Offset: 0x110C9A0
    static ::System::Xml::Schema::XmlSchemaForm GetResolvedElementForm(::System::Xml::Schema::XmlSchema* parentSchema, ::System::Xml::Schema::XmlSchemaElement* element);
    // static System.Boolean HasParticleRef(System.Xml.Schema.XmlSchemaParticle particle, System.Xml.Schema.XmlSchema parentSchema)
    // Offset: 0x110C15C
    static bool HasParticleRef(::System::Xml::Schema::XmlSchemaParticle* particle, ::System::Xml::Schema::XmlSchema* parentSchema);
    // static System.Boolean HasAttributeQNameRef(System.Xml.Schema.XmlSchemaObjectCollection attributes)
    // Offset: 0x1109C00
    static bool HasAttributeQNameRef(::System::Xml::Schema::XmlSchemaObjectCollection* attributes);
    // public override System.Boolean get_IsMixed()
    // Offset: 0x110BB64
    // Implemented from: System.Xml.Schema.XmlSchemaType
    // Base method: System.Boolean XmlSchemaType::get_IsMixed()
    bool get_IsMixed();
    // public override System.Void set_IsMixed(System.Boolean value)
    // Offset: 0x110BB70
    // Implemented from: System.Xml.Schema.XmlSchemaType
    // Base method: System.Void XmlSchemaType::set_IsMixed(System.Boolean value)
    void set_IsMixed(bool value);
    // public System.Void .ctor()
    // Offset: 0x110B6B4
    // Implemented from: System.Xml.Schema.XmlSchemaType
    // Base method: System.Void XmlSchemaType::.ctor()
    // Base method: System.Void XmlSchemaAnnotated::.ctor()
    // Base method: System.Void XmlSchemaObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaComplexType* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaComplexType::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaComplexType*, creationType>()));
    }
    // override System.Xml.Schema.XmlSchemaObject Clone()
    // Offset: 0x110C154
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.Xml.Schema.XmlSchemaObject XmlSchemaObject::Clone()
    ::System::Xml::Schema::XmlSchemaObject* Clone();
  }; // System.Xml.Schema.XmlSchemaComplexType
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaComplexType), 224 + sizeof(uint8_t)> __System_Xml_Schema_XmlSchemaComplexTypeSizeCheck;
  static_assert(sizeof(XmlSchemaComplexType) == 0xE1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::get_AnyType
// Il2CppName: get_AnyType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaComplexType* (*)()>(&System::Xml::Schema::XmlSchemaComplexType::get_AnyType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "get_AnyType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::get_UntypedAnyType
// Il2CppName: get_UntypedAnyType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaComplexType* (*)()>(&System::Xml::Schema::XmlSchemaComplexType::get_UntypedAnyType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "get_UntypedAnyType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::get_AnyTypeContentValidator
// Il2CppName: get_AnyTypeContentValidator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::ContentValidator* (*)()>(&System::Xml::Schema::XmlSchemaComplexType::get_AnyTypeContentValidator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "get_AnyTypeContentValidator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::get_IsAbstract
// Il2CppName: get_IsAbstract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaComplexType::*)()>(&System::Xml::Schema::XmlSchemaComplexType::get_IsAbstract)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "get_IsAbstract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::set_IsAbstract
// Il2CppName: set_IsAbstract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaComplexType::*)(bool)>(&System::Xml::Schema::XmlSchemaComplexType::set_IsAbstract)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "set_IsAbstract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::get_Block
// Il2CppName: get_Block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaDerivationMethod (System::Xml::Schema::XmlSchemaComplexType::*)()>(&System::Xml::Schema::XmlSchemaComplexType::get_Block)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "get_Block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::set_Block
// Il2CppName: set_Block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaComplexType::*)(::System::Xml::Schema::XmlSchemaDerivationMethod)>(&System::Xml::Schema::XmlSchemaComplexType::set_Block)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaDerivationMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "set_Block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::get_ContentModel
// Il2CppName: get_ContentModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaContentModel* (System::Xml::Schema::XmlSchemaComplexType::*)()>(&System::Xml::Schema::XmlSchemaComplexType::get_ContentModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "get_ContentModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::set_ContentModel
// Il2CppName: set_ContentModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaComplexType::*)(::System::Xml::Schema::XmlSchemaContentModel*)>(&System::Xml::Schema::XmlSchemaComplexType::set_ContentModel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaContentModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "set_ContentModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::get_Particle
// Il2CppName: get_Particle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (System::Xml::Schema::XmlSchemaComplexType::*)()>(&System::Xml::Schema::XmlSchemaComplexType::get_Particle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "get_Particle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::set_Particle
// Il2CppName: set_Particle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaComplexType::*)(::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::XmlSchemaComplexType::set_Particle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "set_Particle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectCollection* (System::Xml::Schema::XmlSchemaComplexType::*)()>(&System::Xml::Schema::XmlSchemaComplexType::get_Attributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::get_AnyAttribute
// Il2CppName: get_AnyAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaAnyAttribute* (System::Xml::Schema::XmlSchemaComplexType::*)()>(&System::Xml::Schema::XmlSchemaComplexType::get_AnyAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "get_AnyAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::set_AnyAttribute
// Il2CppName: set_AnyAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaComplexType::*)(::System::Xml::Schema::XmlSchemaAnyAttribute*)>(&System::Xml::Schema::XmlSchemaComplexType::set_AnyAttribute)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnyAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "set_AnyAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::get_ContentType
// Il2CppName: get_ContentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaContentType (System::Xml::Schema::XmlSchemaComplexType::*)()>(&System::Xml::Schema::XmlSchemaComplexType::get_ContentType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "get_ContentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::get_ContentTypeParticle
// Il2CppName: get_ContentTypeParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (System::Xml::Schema::XmlSchemaComplexType::*)()>(&System::Xml::Schema::XmlSchemaComplexType::get_ContentTypeParticle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "get_ContentTypeParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::get_BlockResolved
// Il2CppName: get_BlockResolved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaDerivationMethod (System::Xml::Schema::XmlSchemaComplexType::*)()>(&System::Xml::Schema::XmlSchemaComplexType::get_BlockResolved)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "get_BlockResolved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::get_AttributeUses
// Il2CppName: get_AttributeUses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectTable* (System::Xml::Schema::XmlSchemaComplexType::*)()>(&System::Xml::Schema::XmlSchemaComplexType::get_AttributeUses)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "get_AttributeUses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::get_AttributeWildcard
// Il2CppName: get_AttributeWildcard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaAnyAttribute* (System::Xml::Schema::XmlSchemaComplexType::*)()>(&System::Xml::Schema::XmlSchemaComplexType::get_AttributeWildcard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "get_AttributeWildcard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::get_LocalElements
// Il2CppName: get_LocalElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectTable* (System::Xml::Schema::XmlSchemaComplexType::*)()>(&System::Xml::Schema::XmlSchemaComplexType::get_LocalElements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "get_LocalElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::set_HasWildCard
// Il2CppName: set_HasWildCard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaComplexType::*)(bool)>(&System::Xml::Schema::XmlSchemaComplexType::set_HasWildCard)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "set_HasWildCard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::Schema::XmlSchemaComplexType::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::CreateAnyType
// Il2CppName: CreateAnyType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaComplexType* (*)(::System::Xml::Schema::XmlSchemaContentProcessing)>(&System::Xml::Schema::XmlSchemaComplexType::CreateAnyType)> {
  static const MethodInfo* get() {
    static auto* processContents = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaContentProcessing")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "CreateAnyType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{processContents});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::SetContentTypeParticle
// Il2CppName: SetContentTypeParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaComplexType::*)(::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::XmlSchemaComplexType::SetContentTypeParticle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "SetContentTypeParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::SetBlockResolved
// Il2CppName: SetBlockResolved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaComplexType::*)(::System::Xml::Schema::XmlSchemaDerivationMethod)>(&System::Xml::Schema::XmlSchemaComplexType::SetBlockResolved)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaDerivationMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "SetBlockResolved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::SetAttributeWildcard
// Il2CppName: SetAttributeWildcard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaComplexType::*)(::System::Xml::Schema::XmlSchemaAnyAttribute*)>(&System::Xml::Schema::XmlSchemaComplexType::SetAttributeWildcard)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnyAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "SetAttributeWildcard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::SetAttributes
// Il2CppName: SetAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaComplexType::*)(::System::Xml::Schema::XmlSchemaObjectCollection*)>(&System::Xml::Schema::XmlSchemaComplexType::SetAttributes)> {
  static const MethodInfo* get() {
    static auto* newAttributes = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "SetAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newAttributes});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::ContainsIdAttribute
// Il2CppName: ContainsIdAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaComplexType::*)(bool)>(&System::Xml::Schema::XmlSchemaComplexType::ContainsIdAttribute)> {
  static const MethodInfo* get() {
    static auto* findAll = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "ContainsIdAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{findAll});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObject* (System::Xml::Schema::XmlSchemaComplexType::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchemaComplexType::Clone)> {
  static const MethodInfo* get() {
    static auto* parentSchema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentSchema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::ClearCompiledState
// Il2CppName: ClearCompiledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaComplexType::*)()>(&System::Xml::Schema::XmlSchemaComplexType::ClearCompiledState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "ClearCompiledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::CloneAttributes
// Il2CppName: CloneAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectCollection* (*)(::System::Xml::Schema::XmlSchemaObjectCollection*)>(&System::Xml::Schema::XmlSchemaComplexType::CloneAttributes)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "CloneAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::CloneGroupBaseParticles
// Il2CppName: CloneGroupBaseParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectCollection* (*)(::System::Xml::Schema::XmlSchemaObjectCollection*, ::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchemaComplexType::CloneGroupBaseParticles)> {
  static const MethodInfo* get() {
    static auto* groupBaseParticles = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    static auto* parentSchema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "CloneGroupBaseParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupBaseParticles, parentSchema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::CloneParticle
// Il2CppName: CloneParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (*)(::System::Xml::Schema::XmlSchemaParticle*, ::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchemaComplexType::CloneParticle)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* parentSchema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "CloneParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle, parentSchema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::GetResolvedElementForm
// Il2CppName: GetResolvedElementForm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaForm (*)(::System::Xml::Schema::XmlSchema*, ::System::Xml::Schema::XmlSchemaElement*)>(&System::Xml::Schema::XmlSchemaComplexType::GetResolvedElementForm)> {
  static const MethodInfo* get() {
    static auto* parentSchema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* element = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "GetResolvedElementForm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentSchema, element});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::HasParticleRef
// Il2CppName: HasParticleRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Xml::Schema::XmlSchemaParticle*, ::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchemaComplexType::HasParticleRef)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* parentSchema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "HasParticleRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle, parentSchema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::HasAttributeQNameRef
// Il2CppName: HasAttributeQNameRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Xml::Schema::XmlSchemaObjectCollection*)>(&System::Xml::Schema::XmlSchemaComplexType::HasAttributeQNameRef)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "HasAttributeQNameRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::get_IsMixed
// Il2CppName: get_IsMixed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaComplexType::*)()>(&System::Xml::Schema::XmlSchemaComplexType::get_IsMixed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "get_IsMixed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::set_IsMixed
// Il2CppName: set_IsMixed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaComplexType::*)(bool)>(&System::Xml::Schema::XmlSchemaComplexType::set_IsMixed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "set_IsMixed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaComplexType::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObject* (System::Xml::Schema::XmlSchemaComplexType::*)()>(&System::Xml::Schema::XmlSchemaComplexType::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaComplexType*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
