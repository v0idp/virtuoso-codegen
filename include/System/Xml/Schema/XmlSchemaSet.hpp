// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.DictionaryEntry
#include "System/Collections/DictionaryEntry.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: XmlReaderSettings
  class XmlReaderSettings;
  // Forward declaring type: XmlResolver
  class XmlResolver;
  // Forward declaring type: XmlReader
  class XmlReader;
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: SchemaNames
  class SchemaNames;
  // Forward declaring type: ValidationEventHandler
  class ValidationEventHandler;
  // Forward declaring type: SchemaInfo
  class SchemaInfo;
  // Forward declaring type: XmlSchema
  class XmlSchema;
  // Forward declaring type: XmlSchemaCompilationSettings
  class XmlSchemaCompilationSettings;
  // Forward declaring type: XmlSchemaObjectTable
  class XmlSchemaObjectTable;
  // Forward declaring type: XmlSchemaSubstitutionGroup
  class XmlSchemaSubstitutionGroup;
  // Forward declaring type: XmlSchemaObject
  class XmlSchemaObject;
  // Forward declaring type: ValidationEventArgs
  class ValidationEventArgs;
  // Forward declaring type: XmlSchemaException
  class XmlSchemaException;
  // Forward declaring type: XmlSeverityType
  struct XmlSeverityType;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: SortedList
  class SortedList;
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: ICollection
  class ICollection;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaSet
  class XmlSchemaSet;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchemaSet);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaSet*, "System.Xml.Schema", "XmlSchemaSet");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaSet
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSchemaSet : public ::Il2CppObject {
    public:
    public:
    // private System.Xml.XmlNameTable nameTable
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::XmlNameTable* nameTable;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNameTable*) == 0x8);
    // private System.Xml.Schema.SchemaNames schemaNames
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::Schema::SchemaNames* schemaNames;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::SchemaNames*) == 0x8);
    // private System.Collections.SortedList schemas
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::SortedList* schemas;
    // Field size check
    static_assert(sizeof(::System::Collections::SortedList*) == 0x8);
    // private System.Xml.Schema.ValidationEventHandler internalEventHandler
    // Size: 0x8
    // Offset: 0x28
    ::System::Xml::Schema::ValidationEventHandler* internalEventHandler;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::ValidationEventHandler*) == 0x8);
    // private System.Xml.Schema.ValidationEventHandler eventHandler
    // Size: 0x8
    // Offset: 0x30
    ::System::Xml::Schema::ValidationEventHandler* eventHandler;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::ValidationEventHandler*) == 0x8);
    // private System.Boolean isCompiled
    // Size: 0x1
    // Offset: 0x38
    bool isCompiled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isCompiled and: schemaLocations
    char __padding5[0x7] = {};
    // private System.Collections.Hashtable schemaLocations
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Hashtable* schemaLocations;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable chameleonSchemas
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Hashtable* chameleonSchemas;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable targetNamespaces
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Hashtable* targetNamespaces;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Boolean compileAll
    // Size: 0x1
    // Offset: 0x58
    bool compileAll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: compileAll and: cachedCompiledInfo
    char __padding9[0x7] = {};
    // private System.Xml.Schema.SchemaInfo cachedCompiledInfo
    // Size: 0x8
    // Offset: 0x60
    ::System::Xml::Schema::SchemaInfo* cachedCompiledInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::SchemaInfo*) == 0x8);
    // private System.Xml.XmlReaderSettings readerSettings
    // Size: 0x8
    // Offset: 0x68
    ::System::Xml::XmlReaderSettings* readerSettings;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlReaderSettings*) == 0x8);
    // private System.Xml.Schema.XmlSchema schemaForSchema
    // Size: 0x8
    // Offset: 0x70
    ::System::Xml::Schema::XmlSchema* schemaForSchema;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchema*) == 0x8);
    // private System.Xml.Schema.XmlSchemaCompilationSettings compilationSettings
    // Size: 0x8
    // Offset: 0x78
    ::System::Xml::Schema::XmlSchemaCompilationSettings* compilationSettings;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaCompilationSettings*) == 0x8);
    // System.Xml.Schema.XmlSchemaObjectTable elements
    // Size: 0x8
    // Offset: 0x80
    ::System::Xml::Schema::XmlSchemaObjectTable* elements;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // System.Xml.Schema.XmlSchemaObjectTable attributes
    // Size: 0x8
    // Offset: 0x88
    ::System::Xml::Schema::XmlSchemaObjectTable* attributes;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // System.Xml.Schema.XmlSchemaObjectTable schemaTypes
    // Size: 0x8
    // Offset: 0x90
    ::System::Xml::Schema::XmlSchemaObjectTable* schemaTypes;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // System.Xml.Schema.XmlSchemaObjectTable substitutionGroups
    // Size: 0x8
    // Offset: 0x98
    ::System::Xml::Schema::XmlSchemaObjectTable* substitutionGroups;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectTable typeExtensions
    // Size: 0x8
    // Offset: 0xA0
    ::System::Xml::Schema::XmlSchemaObjectTable* typeExtensions;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Object internalSyncObject
    // Size: 0x8
    // Offset: 0xA8
    ::Il2CppObject* internalSyncObject;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Get instance field reference: private System.Xml.XmlNameTable nameTable
    [[deprecated]] ::System::Xml::XmlNameTable*& dyn_nameTable();
    // Get instance field reference: private System.Xml.Schema.SchemaNames schemaNames
    [[deprecated]] ::System::Xml::Schema::SchemaNames*& dyn_schemaNames();
    // Get instance field reference: private System.Collections.SortedList schemas
    [[deprecated]] ::System::Collections::SortedList*& dyn_schemas();
    // Get instance field reference: private System.Xml.Schema.ValidationEventHandler internalEventHandler
    [[deprecated]] ::System::Xml::Schema::ValidationEventHandler*& dyn_internalEventHandler();
    // Get instance field reference: private System.Xml.Schema.ValidationEventHandler eventHandler
    [[deprecated]] ::System::Xml::Schema::ValidationEventHandler*& dyn_eventHandler();
    // Get instance field reference: private System.Boolean isCompiled
    [[deprecated]] bool& dyn_isCompiled();
    // Get instance field reference: private System.Collections.Hashtable schemaLocations
    [[deprecated]] ::System::Collections::Hashtable*& dyn_schemaLocations();
    // Get instance field reference: private System.Collections.Hashtable chameleonSchemas
    [[deprecated]] ::System::Collections::Hashtable*& dyn_chameleonSchemas();
    // Get instance field reference: private System.Collections.Hashtable targetNamespaces
    [[deprecated]] ::System::Collections::Hashtable*& dyn_targetNamespaces();
    // Get instance field reference: private System.Boolean compileAll
    [[deprecated]] bool& dyn_compileAll();
    // Get instance field reference: private System.Xml.Schema.SchemaInfo cachedCompiledInfo
    [[deprecated]] ::System::Xml::Schema::SchemaInfo*& dyn_cachedCompiledInfo();
    // Get instance field reference: private System.Xml.XmlReaderSettings readerSettings
    [[deprecated]] ::System::Xml::XmlReaderSettings*& dyn_readerSettings();
    // Get instance field reference: private System.Xml.Schema.XmlSchema schemaForSchema
    [[deprecated]] ::System::Xml::Schema::XmlSchema*& dyn_schemaForSchema();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaCompilationSettings compilationSettings
    [[deprecated]] ::System::Xml::Schema::XmlSchemaCompilationSettings*& dyn_compilationSettings();
    // Get instance field reference: System.Xml.Schema.XmlSchemaObjectTable elements
    [[deprecated]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_elements();
    // Get instance field reference: System.Xml.Schema.XmlSchemaObjectTable attributes
    [[deprecated]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_attributes();
    // Get instance field reference: System.Xml.Schema.XmlSchemaObjectTable schemaTypes
    [[deprecated]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_schemaTypes();
    // Get instance field reference: System.Xml.Schema.XmlSchemaObjectTable substitutionGroups
    [[deprecated]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_substitutionGroups();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable typeExtensions
    [[deprecated]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_typeExtensions();
    // Get instance field reference: private System.Object internalSyncObject
    [[deprecated]] ::Il2CppObject*& dyn_internalSyncObject();
    // System.Object get_InternalSyncObject()
    // Offset: 0xF2ED5C
    ::Il2CppObject* get_InternalSyncObject();
    // public System.Boolean get_IsCompiled()
    // Offset: 0xF2F1D4
    bool get_IsCompiled();
    // public System.Void set_XmlResolver(System.Xml.XmlResolver value)
    // Offset: 0xF2F1DC
    void set_XmlResolver(::System::Xml::XmlResolver* value);
    // public System.Xml.Schema.XmlSchemaCompilationSettings get_CompilationSettings()
    // Offset: 0xF2F1F8
    ::System::Xml::Schema::XmlSchemaCompilationSettings* get_CompilationSettings();
    // public System.Void set_CompilationSettings(System.Xml.Schema.XmlSchemaCompilationSettings value)
    // Offset: 0xF2F200
    void set_CompilationSettings(::System::Xml::Schema::XmlSchemaCompilationSettings* value);
    // public System.Int32 get_Count()
    // Offset: 0xF2F208
    int get_Count();
    // public System.Xml.Schema.XmlSchemaObjectTable get_GlobalElements()
    // Offset: 0xF2F22C
    ::System::Xml::Schema::XmlSchemaObjectTable* get_GlobalElements();
    // public System.Xml.Schema.XmlSchemaObjectTable get_GlobalAttributes()
    // Offset: 0xF2F294
    ::System::Xml::Schema::XmlSchemaObjectTable* get_GlobalAttributes();
    // public System.Xml.Schema.XmlSchemaObjectTable get_GlobalTypes()
    // Offset: 0xF2F2FC
    ::System::Xml::Schema::XmlSchemaObjectTable* get_GlobalTypes();
    // System.Xml.Schema.XmlSchemaObjectTable get_SubstitutionGroups()
    // Offset: 0xF2F364
    ::System::Xml::Schema::XmlSchemaObjectTable* get_SubstitutionGroups();
    // System.Collections.Hashtable get_SchemaLocations()
    // Offset: 0xF2F3CC
    ::System::Collections::Hashtable* get_SchemaLocations();
    // System.Xml.Schema.XmlSchemaObjectTable get_TypeExtensions()
    // Offset: 0xF2F3D4
    ::System::Xml::Schema::XmlSchemaObjectTable* get_TypeExtensions();
    // System.Xml.Schema.SchemaInfo get_CompiledInfo()
    // Offset: 0xF365A0
    ::System::Xml::Schema::SchemaInfo* get_CompiledInfo();
    // System.Xml.XmlReaderSettings get_ReaderSettings()
    // Offset: 0xF365A8
    ::System::Xml::XmlReaderSettings* get_ReaderSettings();
    // System.Collections.SortedList get_SortedSchemas()
    // Offset: 0xF36720
    ::System::Collections::SortedList* get_SortedSchemas();
    // public System.Void add_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler value)
    // Offset: 0xF2F0A4
    void add_ValidationEventHandler(::System::Xml::Schema::ValidationEventHandler* value);
    // public System.Void remove_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler value)
    // Offset: 0xF2F14C
    void remove_ValidationEventHandler(::System::Xml::Schema::ValidationEventHandler* value);
    // public System.Void .ctor(System.Xml.XmlNameTable nameTable)
    // Offset: 0xF2EE30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaSet* New_ctor(::System::Xml::XmlNameTable* nameTable) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaSet*, creationType>(nameTable)));
    }
    // public System.Void Add(System.Xml.Schema.XmlSchemaSet schemas)
    // Offset: 0xF2F43C
    void Add(::System::Xml::Schema::XmlSchemaSet* schemas);
    // public System.Xml.Schema.XmlSchema Add(System.Xml.Schema.XmlSchema schema)
    // Offset: 0xF319C0
    ::System::Xml::Schema::XmlSchema* Add(::System::Xml::Schema::XmlSchema* schema);
    // public System.Boolean RemoveRecursive(System.Xml.Schema.XmlSchema schemaToRemove)
    // Offset: 0xF31B70
    bool RemoveRecursive(::System::Xml::Schema::XmlSchema* schemaToRemove);
    // public System.Boolean Contains(System.String targetNamespace)
    // Offset: 0xF32A84
    bool Contains(::StringW targetNamespace);
    // public System.Void Compile()
    // Offset: 0xF32B0C
    void Compile();
    // public System.Xml.Schema.XmlSchema Reprocess(System.Xml.Schema.XmlSchema schema)
    // Offset: 0xF3317C
    ::System::Xml::Schema::XmlSchema* Reprocess(::System::Xml::Schema::XmlSchema* schema);
    // public System.Void CopyTo(System.Xml.Schema.XmlSchema[] schemas, System.Int32 index)
    // Offset: 0xF34B88
    void CopyTo(::ArrayW<::System::Xml::Schema::XmlSchema*> schemas, int index);
    // public System.Collections.ICollection Schemas()
    // Offset: 0xF34CF8
    ::System::Collections::ICollection* Schemas();
    // public System.Collections.ICollection Schemas(System.String targetNamespace)
    // Offset: 0xF34920
    ::System::Collections::ICollection* Schemas(::StringW targetNamespace);
    // private System.Xml.Schema.XmlSchema Add(System.String targetNamespace, System.Xml.Schema.XmlSchema schema)
    // Offset: 0xF31958
    ::System::Xml::Schema::XmlSchema* Add(::StringW targetNamespace, ::System::Xml::Schema::XmlSchema* schema);
    // System.Void Add(System.String targetNamespace, System.Xml.XmlReader reader, System.Collections.Hashtable validatedNamespaces)
    // Offset: 0xF350C4
    void Add(::StringW targetNamespace, ::System::Xml::XmlReader* reader, ::System::Collections::Hashtable* validatedNamespaces);
    // System.Xml.Schema.XmlSchema FindSchemaByNSAndUrl(System.Uri schemaUri, System.String ns, System.Collections.DictionaryEntry[] locationsTable)
    // Offset: 0xF316C4
    ::System::Xml::Schema::XmlSchema* FindSchemaByNSAndUrl(::System::Uri* schemaUri, ::StringW ns, ::ArrayW<::System::Collections::DictionaryEntry> locationsTable);
    // private System.Void AddSchemaToSet(System.Xml.Schema.XmlSchema schema)
    // Offset: 0xF34D1C
    void AddSchemaToSet(::System::Xml::Schema::XmlSchema* schema);
    // private System.Void ProcessNewSubstitutionGroups(System.Xml.Schema.XmlSchemaObjectTable substitutionGroupsTable, System.Boolean resolve)
    // Offset: 0xF358AC
    void ProcessNewSubstitutionGroups(::System::Xml::Schema::XmlSchemaObjectTable* substitutionGroupsTable, bool resolve);
    // private System.Void ResolveSubstitutionGroup(System.Xml.Schema.XmlSchemaSubstitutionGroup substitutionGroup, System.Xml.Schema.XmlSchemaObjectTable substTable)
    // Offset: 0xF35D5C
    void ResolveSubstitutionGroup(::System::Xml::Schema::XmlSchemaSubstitutionGroup* substitutionGroup, ::System::Xml::Schema::XmlSchemaObjectTable* substTable);
    // System.Xml.Schema.XmlSchema Remove(System.Xml.Schema.XmlSchema schema, System.Boolean forceCompile)
    // Offset: 0xF326FC
    ::System::Xml::Schema::XmlSchema* Remove(::System::Xml::Schema::XmlSchema* schema, bool forceCompile);
    // private System.Void ClearTables()
    // Offset: 0xF33100
    void ClearTables();
    // System.Boolean PreprocessSchema(ref System.Xml.Schema.XmlSchema schema, System.String targetNamespace)
    // Offset: 0xF34A88
    bool PreprocessSchema(ByRef<::System::Xml::Schema::XmlSchema*> schema, ::StringW targetNamespace);
    // System.Xml.Schema.XmlSchema ParseSchema(System.String targetNamespace, System.Xml.XmlReader reader)
    // Offset: 0xF35734
    ::System::Xml::Schema::XmlSchema* ParseSchema(::StringW targetNamespace, ::System::Xml::XmlReader* reader);
    // System.Void CopyFromCompiledSet(System.Xml.Schema.XmlSchemaSet otherSet)
    // Offset: 0xF2FD80
    void CopyFromCompiledSet(::System::Xml::Schema::XmlSchemaSet* otherSet);
    // System.Xml.XmlResolver GetResolver()
    // Offset: 0xF365B0
    ::System::Xml::XmlResolver* GetResolver();
    // System.Xml.Schema.ValidationEventHandler GetEventHandler()
    // Offset: 0xF365CC
    ::System::Xml::Schema::ValidationEventHandler* GetEventHandler();
    // System.Xml.Schema.SchemaNames GetSchemaNames(System.Xml.XmlNameTable nt)
    // Offset: 0xF363F8
    ::System::Xml::Schema::SchemaNames* GetSchemaNames(::System::Xml::XmlNameTable* nt);
    // System.Boolean IsSchemaLoaded(System.Uri schemaUri, System.String targetNamespace, out System.Xml.Schema.XmlSchema schema)
    // Offset: 0xF35468
    bool IsSchemaLoaded(::System::Uri* schemaUri, ::StringW targetNamespace, ByRef<::System::Xml::Schema::XmlSchema*> schema);
    // System.Boolean GetSchemaByUri(System.Uri schemaUri, out System.Xml.Schema.XmlSchema schema)
    // Offset: 0xF365D4
    bool GetSchemaByUri(::System::Uri* schemaUri, ByRef<::System::Xml::Schema::XmlSchema*> schema);
    // System.String GetTargetNamespace(System.Xml.Schema.XmlSchema schema)
    // Offset: 0xF325F4
    ::StringW GetTargetNamespace(::System::Xml::Schema::XmlSchema* schema);
    // private System.Void RemoveSchemaFromCaches(System.Xml.Schema.XmlSchema schema)
    // Offset: 0xF342D8
    void RemoveSchemaFromCaches(::System::Xml::Schema::XmlSchema* schema);
    // private System.Void RemoveSchemaFromGlobalTables(System.Xml.Schema.XmlSchema schema)
    // Offset: 0xF338B8
    void RemoveSchemaFromGlobalTables(::System::Xml::Schema::XmlSchema* schema);
    // private System.Boolean AddToTable(System.Xml.Schema.XmlSchemaObjectTable table, System.Xml.XmlQualifiedName qname, System.Xml.Schema.XmlSchemaObject item)
    // Offset: 0xF36104
    bool AddToTable(::System::Xml::Schema::XmlSchemaObjectTable* table, ::System::Xml::XmlQualifiedName* qname, ::System::Xml::Schema::XmlSchemaObject* item);
    // private System.Void VerifyTables()
    // Offset: 0xF364A0
    void VerifyTables();
    // private System.Void InternalValidationCallback(System.Object sender, System.Xml.Schema.ValidationEventArgs e)
    // Offset: 0xF36728
    void InternalValidationCallback(::Il2CppObject* sender, ::System::Xml::Schema::ValidationEventArgs* e);
    // private System.Void SendValidationEvent(System.Xml.Schema.XmlSchemaException e, System.Xml.Schema.XmlSeverityType severity)
    // Offset: 0xF32654
    void SendValidationEvent(::System::Xml::Schema::XmlSchemaException* e, ::System::Xml::Schema::XmlSeverityType severity);
    // public System.Void .ctor()
    // Offset: 0xF2EDD0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaSet* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaSet*, creationType>()));
    }
  }; // System.Xml.Schema.XmlSchemaSet
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaSet), 168 + sizeof(::Il2CppObject*)> __System_Xml_Schema_XmlSchemaSetSizeCheck;
  static_assert(sizeof(XmlSchemaSet) == 0xB0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::get_InternalSyncObject
// Il2CppName: get_InternalSyncObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::get_InternalSyncObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "get_InternalSyncObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::get_IsCompiled
// Il2CppName: get_IsCompiled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::get_IsCompiled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "get_IsCompiled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::set_XmlResolver
// Il2CppName: set_XmlResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::XmlResolver*)>(&System::Xml::Schema::XmlSchemaSet::set_XmlResolver)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "set_XmlResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::get_CompilationSettings
// Il2CppName: get_CompilationSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaCompilationSettings* (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::get_CompilationSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "get_CompilationSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::set_CompilationSettings
// Il2CppName: set_CompilationSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::Schema::XmlSchemaCompilationSettings*)>(&System::Xml::Schema::XmlSchemaSet::set_CompilationSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaCompilationSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "set_CompilationSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::get_GlobalElements
// Il2CppName: get_GlobalElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectTable* (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::get_GlobalElements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "get_GlobalElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::get_GlobalAttributes
// Il2CppName: get_GlobalAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectTable* (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::get_GlobalAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "get_GlobalAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::get_GlobalTypes
// Il2CppName: get_GlobalTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectTable* (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::get_GlobalTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "get_GlobalTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::get_SubstitutionGroups
// Il2CppName: get_SubstitutionGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectTable* (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::get_SubstitutionGroups)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "get_SubstitutionGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::get_SchemaLocations
// Il2CppName: get_SchemaLocations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Hashtable* (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::get_SchemaLocations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "get_SchemaLocations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::get_TypeExtensions
// Il2CppName: get_TypeExtensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectTable* (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::get_TypeExtensions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "get_TypeExtensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::get_CompiledInfo
// Il2CppName: get_CompiledInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaInfo* (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::get_CompiledInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "get_CompiledInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::get_ReaderSettings
// Il2CppName: get_ReaderSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlReaderSettings* (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::get_ReaderSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "get_ReaderSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::get_SortedSchemas
// Il2CppName: get_SortedSchemas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::SortedList* (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::get_SortedSchemas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "get_SortedSchemas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::add_ValidationEventHandler
// Il2CppName: add_ValidationEventHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::Schema::ValidationEventHandler*)>(&System::Xml::Schema::XmlSchemaSet::add_ValidationEventHandler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "add_ValidationEventHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::remove_ValidationEventHandler
// Il2CppName: remove_ValidationEventHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::Schema::ValidationEventHandler*)>(&System::Xml::Schema::XmlSchemaSet::remove_ValidationEventHandler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "remove_ValidationEventHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::Schema::XmlSchemaSet*)>(&System::Xml::Schema::XmlSchemaSet::Add)> {
  static const MethodInfo* get() {
    static auto* schemas = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemas});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchemaSet::Add)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::RemoveRecursive
// Il2CppName: RemoveRecursive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchemaSet::RemoveRecursive)> {
  static const MethodInfo* get() {
    static auto* schemaToRemove = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "RemoveRecursive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaToRemove});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaSet::*)(::StringW)>(&System::Xml::Schema::XmlSchemaSet::Contains)> {
  static const MethodInfo* get() {
    static auto* targetNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::Compile
// Il2CppName: Compile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::Compile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "Compile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::Reprocess
// Il2CppName: Reprocess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchemaSet::Reprocess)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "Reprocess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSet::*)(::ArrayW<::System::Xml::Schema::XmlSchema*>, int)>(&System::Xml::Schema::XmlSchemaSet::CopyTo)> {
  static const MethodInfo* get() {
    static auto* schemas = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemas, index});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::Schemas
// Il2CppName: Schemas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ICollection* (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::Schemas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "Schemas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::Schemas
// Il2CppName: Schemas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ICollection* (System::Xml::Schema::XmlSchemaSet::*)(::StringW)>(&System::Xml::Schema::XmlSchemaSet::Schemas)> {
  static const MethodInfo* get() {
    static auto* targetNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "Schemas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Xml::Schema::XmlSchemaSet::*)(::StringW, ::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchemaSet::Add)> {
  static const MethodInfo* get() {
    static auto* targetNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetNamespace, schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSet::*)(::StringW, ::System::Xml::XmlReader*, ::System::Collections::Hashtable*)>(&System::Xml::Schema::XmlSchemaSet::Add)> {
  static const MethodInfo* get() {
    static auto* targetNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    static auto* validatedNamespaces = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetNamespace, reader, validatedNamespaces});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::FindSchemaByNSAndUrl
// Il2CppName: FindSchemaByNSAndUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Xml::Schema::XmlSchemaSet::*)(::System::Uri*, ::StringW, ::ArrayW<::System::Collections::DictionaryEntry>)>(&System::Xml::Schema::XmlSchemaSet::FindSchemaByNSAndUrl)> {
  static const MethodInfo* get() {
    static auto* schemaUri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* locationsTable = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Collections", "DictionaryEntry"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "FindSchemaByNSAndUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaUri, ns, locationsTable});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::AddSchemaToSet
// Il2CppName: AddSchemaToSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchemaSet::AddSchemaToSet)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "AddSchemaToSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::ProcessNewSubstitutionGroups
// Il2CppName: ProcessNewSubstitutionGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::Schema::XmlSchemaObjectTable*, bool)>(&System::Xml::Schema::XmlSchemaSet::ProcessNewSubstitutionGroups)> {
  static const MethodInfo* get() {
    static auto* substitutionGroupsTable = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectTable")->byval_arg;
    static auto* resolve = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "ProcessNewSubstitutionGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{substitutionGroupsTable, resolve});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::ResolveSubstitutionGroup
// Il2CppName: ResolveSubstitutionGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::Schema::XmlSchemaSubstitutionGroup*, ::System::Xml::Schema::XmlSchemaObjectTable*)>(&System::Xml::Schema::XmlSchemaSet::ResolveSubstitutionGroup)> {
  static const MethodInfo* get() {
    static auto* substitutionGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSubstitutionGroup")->byval_arg;
    static auto* substTable = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "ResolveSubstitutionGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{substitutionGroup, substTable});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::Schema::XmlSchema*, bool)>(&System::Xml::Schema::XmlSchemaSet::Remove)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* forceCompile = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema, forceCompile});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::ClearTables
// Il2CppName: ClearTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::ClearTables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "ClearTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::PreprocessSchema
// Il2CppName: PreprocessSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaSet::*)(ByRef<::System::Xml::Schema::XmlSchema*>, ::StringW)>(&System::Xml::Schema::XmlSchemaSet::PreprocessSchema)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->this_arg;
    static auto* targetNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "PreprocessSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema, targetNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::ParseSchema
// Il2CppName: ParseSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Xml::Schema::XmlSchemaSet::*)(::StringW, ::System::Xml::XmlReader*)>(&System::Xml::Schema::XmlSchemaSet::ParseSchema)> {
  static const MethodInfo* get() {
    static auto* targetNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "ParseSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetNamespace, reader});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::CopyFromCompiledSet
// Il2CppName: CopyFromCompiledSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::Schema::XmlSchemaSet*)>(&System::Xml::Schema::XmlSchemaSet::CopyFromCompiledSet)> {
  static const MethodInfo* get() {
    static auto* otherSet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "CopyFromCompiledSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherSet});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::GetResolver
// Il2CppName: GetResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlResolver* (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::GetResolver)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "GetResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::GetEventHandler
// Il2CppName: GetEventHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::ValidationEventHandler* (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::GetEventHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "GetEventHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::GetSchemaNames
// Il2CppName: GetSchemaNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaNames* (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::XmlNameTable*)>(&System::Xml::Schema::XmlSchemaSet::GetSchemaNames)> {
  static const MethodInfo* get() {
    static auto* nt = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "GetSchemaNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nt});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::IsSchemaLoaded
// Il2CppName: IsSchemaLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaSet::*)(::System::Uri*, ::StringW, ByRef<::System::Xml::Schema::XmlSchema*>)>(&System::Xml::Schema::XmlSchemaSet::IsSchemaLoaded)> {
  static const MethodInfo* get() {
    static auto* schemaUri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* targetNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "IsSchemaLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaUri, targetNamespace, schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::GetSchemaByUri
// Il2CppName: GetSchemaByUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaSet::*)(::System::Uri*, ByRef<::System::Xml::Schema::XmlSchema*>)>(&System::Xml::Schema::XmlSchemaSet::GetSchemaByUri)> {
  static const MethodInfo* get() {
    static auto* schemaUri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "GetSchemaByUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaUri, schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::GetTargetNamespace
// Il2CppName: GetTargetNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchemaSet::GetTargetNamespace)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "GetTargetNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::RemoveSchemaFromCaches
// Il2CppName: RemoveSchemaFromCaches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchemaSet::RemoveSchemaFromCaches)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "RemoveSchemaFromCaches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::RemoveSchemaFromGlobalTables
// Il2CppName: RemoveSchemaFromGlobalTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchemaSet::RemoveSchemaFromGlobalTables)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "RemoveSchemaFromGlobalTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::AddToTable
// Il2CppName: AddToTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::Schema::XmlSchemaObjectTable*, ::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::XmlSchemaObject*)>(&System::Xml::Schema::XmlSchemaSet::AddToTable)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectTable")->byval_arg;
    static auto* qname = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    static auto* item = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "AddToTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table, qname, item});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::VerifyTables
// Il2CppName: VerifyTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSet::*)()>(&System::Xml::Schema::XmlSchemaSet::VerifyTables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "VerifyTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::InternalValidationCallback
// Il2CppName: InternalValidationCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSet::*)(::Il2CppObject*, ::System::Xml::Schema::ValidationEventArgs*)>(&System::Xml::Schema::XmlSchemaSet::InternalValidationCallback)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "InternalValidationCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, e});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSet::*)(::System::Xml::Schema::XmlSchemaException*, ::System::Xml::Schema::XmlSeverityType)>(&System::Xml::Schema::XmlSchemaSet::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaException")->byval_arg;
    static auto* severity = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSeverityType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSet*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, severity});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSet::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
