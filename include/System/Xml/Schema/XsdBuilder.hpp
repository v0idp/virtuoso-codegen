// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.SchemaBuilder
#include "System/Xml/Schema/SchemaBuilder.hpp"
// Including type: System.Xml.Schema.SchemaNames
#include "System/Xml/Schema/SchemaNames.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Skipping declaration: State because it is already included!
  // Forward declaring type: XmlSchema
  class XmlSchema;
  // Forward declaring type: XmlSchemaObject
  class XmlSchemaObject;
  // Forward declaring type: XmlSchemaElement
  class XmlSchemaElement;
  // Forward declaring type: XmlSchemaAny
  class XmlSchemaAny;
  // Forward declaring type: XmlSchemaAttribute
  class XmlSchemaAttribute;
  // Forward declaring type: XmlSchemaAnyAttribute
  class XmlSchemaAnyAttribute;
  // Forward declaring type: XmlSchemaComplexType
  class XmlSchemaComplexType;
  // Forward declaring type: XmlSchemaSimpleType
  class XmlSchemaSimpleType;
  // Forward declaring type: XmlSchemaComplexContent
  class XmlSchemaComplexContent;
  // Forward declaring type: XmlSchemaComplexContentExtension
  class XmlSchemaComplexContentExtension;
  // Forward declaring type: XmlSchemaComplexContentRestriction
  class XmlSchemaComplexContentRestriction;
  // Forward declaring type: XmlSchemaSimpleContent
  class XmlSchemaSimpleContent;
  // Forward declaring type: XmlSchemaSimpleContentExtension
  class XmlSchemaSimpleContentExtension;
  // Forward declaring type: XmlSchemaSimpleContentRestriction
  class XmlSchemaSimpleContentRestriction;
  // Forward declaring type: XmlSchemaSimpleTypeUnion
  class XmlSchemaSimpleTypeUnion;
  // Forward declaring type: XmlSchemaSimpleTypeList
  class XmlSchemaSimpleTypeList;
  // Forward declaring type: XmlSchemaSimpleTypeRestriction
  class XmlSchemaSimpleTypeRestriction;
  // Forward declaring type: XmlSchemaGroup
  class XmlSchemaGroup;
  // Forward declaring type: XmlSchemaGroupRef
  class XmlSchemaGroupRef;
  // Forward declaring type: XmlSchemaAll
  class XmlSchemaAll;
  // Forward declaring type: XmlSchemaChoice
  class XmlSchemaChoice;
  // Forward declaring type: XmlSchemaSequence
  class XmlSchemaSequence;
  // Forward declaring type: XmlSchemaParticle
  class XmlSchemaParticle;
  // Forward declaring type: XmlSchemaAttributeGroup
  class XmlSchemaAttributeGroup;
  // Forward declaring type: XmlSchemaAttributeGroupRef
  class XmlSchemaAttributeGroupRef;
  // Forward declaring type: XmlSchemaNotation
  class XmlSchemaNotation;
  // Forward declaring type: XmlSchemaIdentityConstraint
  class XmlSchemaIdentityConstraint;
  // Forward declaring type: XmlSchemaXPath
  class XmlSchemaXPath;
  // Forward declaring type: XmlSchemaInclude
  class XmlSchemaInclude;
  // Forward declaring type: XmlSchemaImport
  class XmlSchemaImport;
  // Forward declaring type: XmlSchemaAnnotation
  class XmlSchemaAnnotation;
  // Forward declaring type: XmlSchemaAppInfo
  class XmlSchemaAppInfo;
  // Forward declaring type: XmlSchemaDocumentation
  class XmlSchemaDocumentation;
  // Forward declaring type: XmlSchemaFacet
  class XmlSchemaFacet;
  // Forward declaring type: XmlSchemaRedefine
  class XmlSchemaRedefine;
  // Forward declaring type: ValidationEventHandler
  class ValidationEventHandler;
  // Forward declaring type: XmlSeverityType
  struct XmlSeverityType;
  // Forward declaring type: XmlSchemaException
  class XmlSchemaException;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlReader
  class XmlReader;
  // Forward declaring type: PositionInfo
  class PositionInfo;
  // Forward declaring type: HWStack
  class HWStack;
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: XmlNamespaceManager
  class XmlNamespaceManager;
  // Forward declaring type: XmlNode
  class XmlNode;
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Stack
  class Stack;
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XsdBuilder
  class XsdBuilder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XsdBuilder);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XsdBuilder*, "System.Xml.Schema", "XsdBuilder");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x1A0
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XsdBuilder
  // [TokenAttribute] Offset: FFFFFFFF
  class XsdBuilder : public ::System::Xml::Schema::SchemaBuilder {
    public:
    // Nested type: ::System::Xml::Schema::XsdBuilder::State
    struct State;
    // Nested type: ::System::Xml::Schema::XsdBuilder::XsdBuildFunction
    class XsdBuildFunction;
    // Nested type: ::System::Xml::Schema::XsdBuilder::XsdInitFunction
    class XsdInitFunction;
    // Nested type: ::System::Xml::Schema::XsdBuilder::XsdEndChildFunction
    class XsdEndChildFunction;
    // Nested type: ::System::Xml::Schema::XsdBuilder::XsdAttributeEntry
    class XsdAttributeEntry;
    // Nested type: ::System::Xml::Schema::XsdBuilder::XsdEntry
    class XsdEntry;
    // Nested type: ::System::Xml::Schema::XsdBuilder::BuilderNamespaceManager
    class BuilderNamespaceManager;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.Schema.XsdBuilder/System.Xml.Schema.State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Root
      static constexpr const int Root = 0;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Root
      static ::System::Xml::Schema::XsdBuilder::State _get_Root();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Root
      static void _set_Root(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Schema
      static constexpr const int Schema = 1;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Schema
      static ::System::Xml::Schema::XsdBuilder::State _get_Schema();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Schema
      static void _set_Schema(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Annotation
      static constexpr const int Annotation = 2;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Annotation
      static ::System::Xml::Schema::XsdBuilder::State _get_Annotation();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Annotation
      static void _set_Annotation(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Include
      static constexpr const int Include = 3;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Include
      static ::System::Xml::Schema::XsdBuilder::State _get_Include();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Include
      static void _set_Include(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Import
      static constexpr const int Import = 4;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Import
      static ::System::Xml::Schema::XsdBuilder::State _get_Import();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Import
      static void _set_Import(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Element
      static constexpr const int Element = 5;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Element
      static ::System::Xml::Schema::XsdBuilder::State _get_Element();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Element
      static void _set_Element(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Attribute
      static constexpr const int Attribute = 6;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Attribute
      static ::System::Xml::Schema::XsdBuilder::State _get_Attribute();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Attribute
      static void _set_Attribute(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State AttributeGroup
      static constexpr const int AttributeGroup = 7;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State AttributeGroup
      static ::System::Xml::Schema::XsdBuilder::State _get_AttributeGroup();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State AttributeGroup
      static void _set_AttributeGroup(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State AttributeGroupRef
      static constexpr const int AttributeGroupRef = 8;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State AttributeGroupRef
      static ::System::Xml::Schema::XsdBuilder::State _get_AttributeGroupRef();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State AttributeGroupRef
      static void _set_AttributeGroupRef(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State AnyAttribute
      static constexpr const int AnyAttribute = 9;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State AnyAttribute
      static ::System::Xml::Schema::XsdBuilder::State _get_AnyAttribute();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State AnyAttribute
      static void _set_AnyAttribute(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Group
      static constexpr const int Group = 10;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Group
      static ::System::Xml::Schema::XsdBuilder::State _get_Group();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Group
      static void _set_Group(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State GroupRef
      static constexpr const int GroupRef = 11;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State GroupRef
      static ::System::Xml::Schema::XsdBuilder::State _get_GroupRef();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State GroupRef
      static void _set_GroupRef(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State All
      static constexpr const int All = 12;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State All
      static ::System::Xml::Schema::XsdBuilder::State _get_All();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State All
      static void _set_All(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Choice
      static constexpr const int Choice = 13;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Choice
      static ::System::Xml::Schema::XsdBuilder::State _get_Choice();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Choice
      static void _set_Choice(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Sequence
      static constexpr const int Sequence = 14;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Sequence
      static ::System::Xml::Schema::XsdBuilder::State _get_Sequence();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Sequence
      static void _set_Sequence(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Any
      static constexpr const int Any = 15;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Any
      static ::System::Xml::Schema::XsdBuilder::State _get_Any();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Any
      static void _set_Any(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Notation
      static constexpr const int Notation = 16;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Notation
      static ::System::Xml::Schema::XsdBuilder::State _get_Notation();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Notation
      static void _set_Notation(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleType
      static constexpr const int SimpleType = 17;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleType
      static ::System::Xml::Schema::XsdBuilder::State _get_SimpleType();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleType
      static void _set_SimpleType(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State ComplexType
      static constexpr const int ComplexType = 18;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State ComplexType
      static ::System::Xml::Schema::XsdBuilder::State _get_ComplexType();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State ComplexType
      static void _set_ComplexType(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State ComplexContent
      static constexpr const int ComplexContent = 19;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State ComplexContent
      static ::System::Xml::Schema::XsdBuilder::State _get_ComplexContent();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State ComplexContent
      static void _set_ComplexContent(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State ComplexContentRestriction
      static constexpr const int ComplexContentRestriction = 20;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State ComplexContentRestriction
      static ::System::Xml::Schema::XsdBuilder::State _get_ComplexContentRestriction();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State ComplexContentRestriction
      static void _set_ComplexContentRestriction(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State ComplexContentExtension
      static constexpr const int ComplexContentExtension = 21;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State ComplexContentExtension
      static ::System::Xml::Schema::XsdBuilder::State _get_ComplexContentExtension();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State ComplexContentExtension
      static void _set_ComplexContentExtension(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleContent
      static constexpr const int SimpleContent = 22;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleContent
      static ::System::Xml::Schema::XsdBuilder::State _get_SimpleContent();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleContent
      static void _set_SimpleContent(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleContentExtension
      static constexpr const int SimpleContentExtension = 23;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleContentExtension
      static ::System::Xml::Schema::XsdBuilder::State _get_SimpleContentExtension();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleContentExtension
      static void _set_SimpleContentExtension(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleContentRestriction
      static constexpr const int SimpleContentRestriction = 24;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleContentRestriction
      static ::System::Xml::Schema::XsdBuilder::State _get_SimpleContentRestriction();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleContentRestriction
      static void _set_SimpleContentRestriction(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleTypeUnion
      static constexpr const int SimpleTypeUnion = 25;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleTypeUnion
      static ::System::Xml::Schema::XsdBuilder::State _get_SimpleTypeUnion();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleTypeUnion
      static void _set_SimpleTypeUnion(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleTypeList
      static constexpr const int SimpleTypeList = 26;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleTypeList
      static ::System::Xml::Schema::XsdBuilder::State _get_SimpleTypeList();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleTypeList
      static void _set_SimpleTypeList(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleTypeRestriction
      static constexpr const int SimpleTypeRestriction = 27;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleTypeRestriction
      static ::System::Xml::Schema::XsdBuilder::State _get_SimpleTypeRestriction();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State SimpleTypeRestriction
      static void _set_SimpleTypeRestriction(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Unique
      static constexpr const int Unique = 28;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Unique
      static ::System::Xml::Schema::XsdBuilder::State _get_Unique();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Unique
      static void _set_Unique(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Key
      static constexpr const int Key = 29;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Key
      static ::System::Xml::Schema::XsdBuilder::State _get_Key();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Key
      static void _set_Key(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State KeyRef
      static constexpr const int KeyRef = 30;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State KeyRef
      static ::System::Xml::Schema::XsdBuilder::State _get_KeyRef();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State KeyRef
      static void _set_KeyRef(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Selector
      static constexpr const int Selector = 31;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Selector
      static ::System::Xml::Schema::XsdBuilder::State _get_Selector();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Selector
      static void _set_Selector(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Field
      static constexpr const int Field = 32;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Field
      static ::System::Xml::Schema::XsdBuilder::State _get_Field();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Field
      static void _set_Field(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State MinExclusive
      static constexpr const int MinExclusive = 33;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State MinExclusive
      static ::System::Xml::Schema::XsdBuilder::State _get_MinExclusive();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State MinExclusive
      static void _set_MinExclusive(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State MinInclusive
      static constexpr const int MinInclusive = 34;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State MinInclusive
      static ::System::Xml::Schema::XsdBuilder::State _get_MinInclusive();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State MinInclusive
      static void _set_MinInclusive(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State MaxExclusive
      static constexpr const int MaxExclusive = 35;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State MaxExclusive
      static ::System::Xml::Schema::XsdBuilder::State _get_MaxExclusive();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State MaxExclusive
      static void _set_MaxExclusive(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State MaxInclusive
      static constexpr const int MaxInclusive = 36;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State MaxInclusive
      static ::System::Xml::Schema::XsdBuilder::State _get_MaxInclusive();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State MaxInclusive
      static void _set_MaxInclusive(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State TotalDigits
      static constexpr const int TotalDigits = 37;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State TotalDigits
      static ::System::Xml::Schema::XsdBuilder::State _get_TotalDigits();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State TotalDigits
      static void _set_TotalDigits(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State FractionDigits
      static constexpr const int FractionDigits = 38;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State FractionDigits
      static ::System::Xml::Schema::XsdBuilder::State _get_FractionDigits();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State FractionDigits
      static void _set_FractionDigits(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Length
      static constexpr const int Length = 39;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Length
      static ::System::Xml::Schema::XsdBuilder::State _get_Length();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Length
      static void _set_Length(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State MinLength
      static constexpr const int MinLength = 40;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State MinLength
      static ::System::Xml::Schema::XsdBuilder::State _get_MinLength();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State MinLength
      static void _set_MinLength(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State MaxLength
      static constexpr const int MaxLength = 41;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State MaxLength
      static ::System::Xml::Schema::XsdBuilder::State _get_MaxLength();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State MaxLength
      static void _set_MaxLength(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Enumeration
      static constexpr const int Enumeration = 42;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Enumeration
      static ::System::Xml::Schema::XsdBuilder::State _get_Enumeration();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Enumeration
      static void _set_Enumeration(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Pattern
      static constexpr const int Pattern = 43;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Pattern
      static ::System::Xml::Schema::XsdBuilder::State _get_Pattern();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Pattern
      static void _set_Pattern(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State WhiteSpace
      static constexpr const int WhiteSpace = 44;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State WhiteSpace
      static ::System::Xml::Schema::XsdBuilder::State _get_WhiteSpace();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State WhiteSpace
      static void _set_WhiteSpace(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State AppInfo
      static constexpr const int AppInfo = 45;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State AppInfo
      static ::System::Xml::Schema::XsdBuilder::State _get_AppInfo();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State AppInfo
      static void _set_AppInfo(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Documentation
      static constexpr const int Documentation = 46;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Documentation
      static ::System::Xml::Schema::XsdBuilder::State _get_Documentation();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Documentation
      static void _set_Documentation(::System::Xml::Schema::XsdBuilder::State value);
      // static field const value: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Redefine
      static constexpr const int Redefine = 47;
      // Get static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Redefine
      static ::System::Xml::Schema::XsdBuilder::State _get_Redefine();
      // Set static field: static public System.Xml.Schema.XsdBuilder/System.Xml.Schema.State Redefine
      static void _set_Redefine(::System::Xml::Schema::XsdBuilder::State value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Xml.Schema.XsdBuilder/System.Xml.Schema.State
    #pragma pack(pop)
    static check_size<sizeof(XsdBuilder::State), 0 + sizeof(int)> __System_Xml_Schema_XsdBuilder_StateSizeCheck;
    static_assert(sizeof(XsdBuilder::State) == 0x4);
    public:
    // private System.Xml.XmlReader reader
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::XmlReader* reader;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlReader*) == 0x8);
    // private System.Xml.PositionInfo positionInfo
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::PositionInfo* positionInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::PositionInfo*) == 0x8);
    // private System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdEntry currentEntry
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::Schema::XsdBuilder::XsdEntry* currentEntry;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XsdBuilder::XsdEntry*) == 0x8);
    // private System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdEntry nextEntry
    // Size: 0x8
    // Offset: 0x28
    ::System::Xml::Schema::XsdBuilder::XsdEntry* nextEntry;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XsdBuilder::XsdEntry*) == 0x8);
    // private System.Boolean hasChild
    // Size: 0x1
    // Offset: 0x30
    bool hasChild;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasChild and: stateHistory
    char __padding4[0x7] = {};
    // private System.Xml.HWStack stateHistory
    // Size: 0x8
    // Offset: 0x38
    ::System::Xml::HWStack* stateHistory;
    // Field size check
    static_assert(sizeof(::System::Xml::HWStack*) == 0x8);
    // private System.Collections.Stack containerStack
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Stack* containerStack;
    // Field size check
    static_assert(sizeof(::System::Collections::Stack*) == 0x8);
    // private System.Xml.XmlNameTable nameTable
    // Size: 0x8
    // Offset: 0x48
    ::System::Xml::XmlNameTable* nameTable;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNameTable*) == 0x8);
    // private System.Xml.Schema.SchemaNames schemaNames
    // Size: 0x8
    // Offset: 0x50
    ::System::Xml::Schema::SchemaNames* schemaNames;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::SchemaNames*) == 0x8);
    // private System.Xml.XmlNamespaceManager namespaceManager
    // Size: 0x8
    // Offset: 0x58
    ::System::Xml::XmlNamespaceManager* namespaceManager;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNamespaceManager*) == 0x8);
    // private System.Boolean canIncludeImport
    // Size: 0x1
    // Offset: 0x60
    bool canIncludeImport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canIncludeImport and: schema
    char __padding10[0x7] = {};
    // private System.Xml.Schema.XmlSchema schema
    // Size: 0x8
    // Offset: 0x68
    ::System::Xml::Schema::XmlSchema* schema;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchema*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObject xso
    // Size: 0x8
    // Offset: 0x70
    ::System::Xml::Schema::XmlSchemaObject* xso;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObject*) == 0x8);
    // private System.Xml.Schema.XmlSchemaElement element
    // Size: 0x8
    // Offset: 0x78
    ::System::Xml::Schema::XmlSchemaElement* element;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaElement*) == 0x8);
    // private System.Xml.Schema.XmlSchemaAny anyElement
    // Size: 0x8
    // Offset: 0x80
    ::System::Xml::Schema::XmlSchemaAny* anyElement;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaAny*) == 0x8);
    // private System.Xml.Schema.XmlSchemaAttribute attribute
    // Size: 0x8
    // Offset: 0x88
    ::System::Xml::Schema::XmlSchemaAttribute* attribute;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaAttribute*) == 0x8);
    // private System.Xml.Schema.XmlSchemaAnyAttribute anyAttribute
    // Size: 0x8
    // Offset: 0x90
    ::System::Xml::Schema::XmlSchemaAnyAttribute* anyAttribute;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaAnyAttribute*) == 0x8);
    // private System.Xml.Schema.XmlSchemaComplexType complexType
    // Size: 0x8
    // Offset: 0x98
    ::System::Xml::Schema::XmlSchemaComplexType* complexType;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaComplexType*) == 0x8);
    // private System.Xml.Schema.XmlSchemaSimpleType simpleType
    // Size: 0x8
    // Offset: 0xA0
    ::System::Xml::Schema::XmlSchemaSimpleType* simpleType;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaSimpleType*) == 0x8);
    // private System.Xml.Schema.XmlSchemaComplexContent complexContent
    // Size: 0x8
    // Offset: 0xA8
    ::System::Xml::Schema::XmlSchemaComplexContent* complexContent;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaComplexContent*) == 0x8);
    // private System.Xml.Schema.XmlSchemaComplexContentExtension complexContentExtension
    // Size: 0x8
    // Offset: 0xB0
    ::System::Xml::Schema::XmlSchemaComplexContentExtension* complexContentExtension;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaComplexContentExtension*) == 0x8);
    // private System.Xml.Schema.XmlSchemaComplexContentRestriction complexContentRestriction
    // Size: 0x8
    // Offset: 0xB8
    ::System::Xml::Schema::XmlSchemaComplexContentRestriction* complexContentRestriction;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaComplexContentRestriction*) == 0x8);
    // private System.Xml.Schema.XmlSchemaSimpleContent simpleContent
    // Size: 0x8
    // Offset: 0xC0
    ::System::Xml::Schema::XmlSchemaSimpleContent* simpleContent;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaSimpleContent*) == 0x8);
    // private System.Xml.Schema.XmlSchemaSimpleContentExtension simpleContentExtension
    // Size: 0x8
    // Offset: 0xC8
    ::System::Xml::Schema::XmlSchemaSimpleContentExtension* simpleContentExtension;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaSimpleContentExtension*) == 0x8);
    // private System.Xml.Schema.XmlSchemaSimpleContentRestriction simpleContentRestriction
    // Size: 0x8
    // Offset: 0xD0
    ::System::Xml::Schema::XmlSchemaSimpleContentRestriction* simpleContentRestriction;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaSimpleContentRestriction*) == 0x8);
    // private System.Xml.Schema.XmlSchemaSimpleTypeUnion simpleTypeUnion
    // Size: 0x8
    // Offset: 0xD8
    ::System::Xml::Schema::XmlSchemaSimpleTypeUnion* simpleTypeUnion;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaSimpleTypeUnion*) == 0x8);
    // private System.Xml.Schema.XmlSchemaSimpleTypeList simpleTypeList
    // Size: 0x8
    // Offset: 0xE0
    ::System::Xml::Schema::XmlSchemaSimpleTypeList* simpleTypeList;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaSimpleTypeList*) == 0x8);
    // private System.Xml.Schema.XmlSchemaSimpleTypeRestriction simpleTypeRestriction
    // Size: 0x8
    // Offset: 0xE8
    ::System::Xml::Schema::XmlSchemaSimpleTypeRestriction* simpleTypeRestriction;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaSimpleTypeRestriction*) == 0x8);
    // private System.Xml.Schema.XmlSchemaGroup group
    // Size: 0x8
    // Offset: 0xF0
    ::System::Xml::Schema::XmlSchemaGroup* group;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaGroup*) == 0x8);
    // private System.Xml.Schema.XmlSchemaGroupRef groupRef
    // Size: 0x8
    // Offset: 0xF8
    ::System::Xml::Schema::XmlSchemaGroupRef* groupRef;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaGroupRef*) == 0x8);
    // private System.Xml.Schema.XmlSchemaAll all
    // Size: 0x8
    // Offset: 0x100
    ::System::Xml::Schema::XmlSchemaAll* all;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaAll*) == 0x8);
    // private System.Xml.Schema.XmlSchemaChoice choice
    // Size: 0x8
    // Offset: 0x108
    ::System::Xml::Schema::XmlSchemaChoice* choice;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaChoice*) == 0x8);
    // private System.Xml.Schema.XmlSchemaSequence sequence
    // Size: 0x8
    // Offset: 0x110
    ::System::Xml::Schema::XmlSchemaSequence* sequence;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaSequence*) == 0x8);
    // private System.Xml.Schema.XmlSchemaParticle particle
    // Size: 0x8
    // Offset: 0x118
    ::System::Xml::Schema::XmlSchemaParticle* particle;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaParticle*) == 0x8);
    // private System.Xml.Schema.XmlSchemaAttributeGroup attributeGroup
    // Size: 0x8
    // Offset: 0x120
    ::System::Xml::Schema::XmlSchemaAttributeGroup* attributeGroup;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaAttributeGroup*) == 0x8);
    // private System.Xml.Schema.XmlSchemaAttributeGroupRef attributeGroupRef
    // Size: 0x8
    // Offset: 0x128
    ::System::Xml::Schema::XmlSchemaAttributeGroupRef* attributeGroupRef;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaAttributeGroupRef*) == 0x8);
    // private System.Xml.Schema.XmlSchemaNotation notation
    // Size: 0x8
    // Offset: 0x130
    ::System::Xml::Schema::XmlSchemaNotation* notation;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaNotation*) == 0x8);
    // private System.Xml.Schema.XmlSchemaIdentityConstraint identityConstraint
    // Size: 0x8
    // Offset: 0x138
    ::System::Xml::Schema::XmlSchemaIdentityConstraint* identityConstraint;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaIdentityConstraint*) == 0x8);
    // private System.Xml.Schema.XmlSchemaXPath xpath
    // Size: 0x8
    // Offset: 0x140
    ::System::Xml::Schema::XmlSchemaXPath* xpath;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaXPath*) == 0x8);
    // private System.Xml.Schema.XmlSchemaInclude include
    // Size: 0x8
    // Offset: 0x148
    ::System::Xml::Schema::XmlSchemaInclude* include;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaInclude*) == 0x8);
    // private System.Xml.Schema.XmlSchemaImport import
    // Size: 0x8
    // Offset: 0x150
    ::System::Xml::Schema::XmlSchemaImport* import;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaImport*) == 0x8);
    // private System.Xml.Schema.XmlSchemaAnnotation annotation
    // Size: 0x8
    // Offset: 0x158
    ::System::Xml::Schema::XmlSchemaAnnotation* annotation;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaAnnotation*) == 0x8);
    // private System.Xml.Schema.XmlSchemaAppInfo appInfo
    // Size: 0x8
    // Offset: 0x160
    ::System::Xml::Schema::XmlSchemaAppInfo* appInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaAppInfo*) == 0x8);
    // private System.Xml.Schema.XmlSchemaDocumentation documentation
    // Size: 0x8
    // Offset: 0x168
    ::System::Xml::Schema::XmlSchemaDocumentation* documentation;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaDocumentation*) == 0x8);
    // private System.Xml.Schema.XmlSchemaFacet facet
    // Size: 0x8
    // Offset: 0x170
    ::System::Xml::Schema::XmlSchemaFacet* facet;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaFacet*) == 0x8);
    // private System.Xml.XmlNode[] markup
    // Size: 0x8
    // Offset: 0x178
    ::ArrayW<::System::Xml::XmlNode*> markup;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::XmlNode*>) == 0x8);
    // private System.Xml.Schema.XmlSchemaRedefine redefine
    // Size: 0x8
    // Offset: 0x180
    ::System::Xml::Schema::XmlSchemaRedefine* redefine;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaRedefine*) == 0x8);
    // private System.Xml.Schema.ValidationEventHandler validationEventHandler
    // Size: 0x8
    // Offset: 0x188
    ::System::Xml::Schema::ValidationEventHandler* validationEventHandler;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::ValidationEventHandler*) == 0x8);
    // private System.Collections.ArrayList unhandledAttributes
    // Size: 0x8
    // Offset: 0x190
    ::System::Collections::ArrayList* unhandledAttributes;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Collections.Hashtable namespaces
    // Size: 0x8
    // Offset: 0x198
    ::System::Collections::Hashtable* namespaces;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    public:
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] SchemaElement
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_SchemaElement();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] SchemaElement
    static void _set_SchemaElement(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] SchemaSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_SchemaSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] SchemaSubelements
    static void _set_SchemaSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] AttributeSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_AttributeSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] AttributeSubelements
    static void _set_AttributeSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] ElementSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_ElementSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] ElementSubelements
    static void _set_ElementSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] ComplexTypeSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_ComplexTypeSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] ComplexTypeSubelements
    static void _set_ComplexTypeSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] SimpleContentSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_SimpleContentSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] SimpleContentSubelements
    static void _set_SimpleContentSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] SimpleContentExtensionSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_SimpleContentExtensionSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] SimpleContentExtensionSubelements
    static void _set_SimpleContentExtensionSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] SimpleContentRestrictionSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_SimpleContentRestrictionSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] SimpleContentRestrictionSubelements
    static void _set_SimpleContentRestrictionSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] ComplexContentSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_ComplexContentSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] ComplexContentSubelements
    static void _set_ComplexContentSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] ComplexContentExtensionSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_ComplexContentExtensionSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] ComplexContentExtensionSubelements
    static void _set_ComplexContentExtensionSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] ComplexContentRestrictionSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_ComplexContentRestrictionSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] ComplexContentRestrictionSubelements
    static void _set_ComplexContentRestrictionSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] SimpleTypeSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_SimpleTypeSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] SimpleTypeSubelements
    static void _set_SimpleTypeSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] SimpleTypeRestrictionSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_SimpleTypeRestrictionSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] SimpleTypeRestrictionSubelements
    static void _set_SimpleTypeRestrictionSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] SimpleTypeListSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_SimpleTypeListSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] SimpleTypeListSubelements
    static void _set_SimpleTypeListSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] SimpleTypeUnionSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_SimpleTypeUnionSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] SimpleTypeUnionSubelements
    static void _set_SimpleTypeUnionSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] RedefineSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_RedefineSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] RedefineSubelements
    static void _set_RedefineSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] AttributeGroupSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_AttributeGroupSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] AttributeGroupSubelements
    static void _set_AttributeGroupSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] GroupSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_GroupSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] GroupSubelements
    static void _set_GroupSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] AllSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_AllSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] AllSubelements
    static void _set_AllSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] ChoiceSequenceSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_ChoiceSequenceSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] ChoiceSequenceSubelements
    static void _set_ChoiceSequenceSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] IdentityConstraintSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_IdentityConstraintSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] IdentityConstraintSubelements
    static void _set_IdentityConstraintSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] AnnotationSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_AnnotationSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] AnnotationSubelements
    static void _set_AnnotationSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] AnnotatedSubelements
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::State> _get_AnnotatedSubelements();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.State[] AnnotatedSubelements
    static void _set_AnnotatedSubelements(::ArrayW<::System::Xml::Schema::XsdBuilder::State> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] SchemaAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_SchemaAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] SchemaAttributes
    static void _set_SchemaAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] AttributeAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_AttributeAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] AttributeAttributes
    static void _set_AttributeAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] ElementAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_ElementAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] ElementAttributes
    static void _set_ElementAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] ComplexTypeAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_ComplexTypeAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] ComplexTypeAttributes
    static void _set_ComplexTypeAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] SimpleContentAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_SimpleContentAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] SimpleContentAttributes
    static void _set_SimpleContentAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] SimpleContentExtensionAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_SimpleContentExtensionAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] SimpleContentExtensionAttributes
    static void _set_SimpleContentExtensionAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] SimpleContentRestrictionAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_SimpleContentRestrictionAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] SimpleContentRestrictionAttributes
    static void _set_SimpleContentRestrictionAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] ComplexContentAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_ComplexContentAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] ComplexContentAttributes
    static void _set_ComplexContentAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] ComplexContentExtensionAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_ComplexContentExtensionAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] ComplexContentExtensionAttributes
    static void _set_ComplexContentExtensionAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] ComplexContentRestrictionAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_ComplexContentRestrictionAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] ComplexContentRestrictionAttributes
    static void _set_ComplexContentRestrictionAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] SimpleTypeAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_SimpleTypeAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] SimpleTypeAttributes
    static void _set_SimpleTypeAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] SimpleTypeRestrictionAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_SimpleTypeRestrictionAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] SimpleTypeRestrictionAttributes
    static void _set_SimpleTypeRestrictionAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] SimpleTypeUnionAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_SimpleTypeUnionAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] SimpleTypeUnionAttributes
    static void _set_SimpleTypeUnionAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] SimpleTypeListAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_SimpleTypeListAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] SimpleTypeListAttributes
    static void _set_SimpleTypeListAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] AttributeGroupAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_AttributeGroupAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] AttributeGroupAttributes
    static void _set_AttributeGroupAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] AttributeGroupRefAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_AttributeGroupRefAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] AttributeGroupRefAttributes
    static void _set_AttributeGroupRefAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] GroupAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_GroupAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] GroupAttributes
    static void _set_GroupAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] GroupRefAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_GroupRefAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] GroupRefAttributes
    static void _set_GroupRefAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] ParticleAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_ParticleAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] ParticleAttributes
    static void _set_ParticleAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] AnyAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_AnyAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] AnyAttributes
    static void _set_AnyAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] IdentityConstraintAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_IdentityConstraintAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] IdentityConstraintAttributes
    static void _set_IdentityConstraintAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] SelectorAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_SelectorAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] SelectorAttributes
    static void _set_SelectorAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] FieldAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_FieldAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] FieldAttributes
    static void _set_FieldAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] NotationAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_NotationAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] NotationAttributes
    static void _set_NotationAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] IncludeAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_IncludeAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] IncludeAttributes
    static void _set_IncludeAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] ImportAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_ImportAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] ImportAttributes
    static void _set_ImportAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] FacetAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_FacetAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] FacetAttributes
    static void _set_FacetAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] AnyAttributeAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_AnyAttributeAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] AnyAttributeAttributes
    static void _set_AnyAttributeAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] DocumentationAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_DocumentationAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] DocumentationAttributes
    static void _set_DocumentationAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] AppinfoAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_AppinfoAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] AppinfoAttributes
    static void _set_AppinfoAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] RedefineAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_RedefineAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] RedefineAttributes
    static void _set_RedefineAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] AnnotationAttributes
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> _get_AnnotationAttributes();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdAttributeEntry[] AnnotationAttributes
    static void _set_AnnotationAttributes(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdAttributeEntry*> value);
    // Get static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdEntry[] SchemaEntries
    static ::ArrayW<::System::Xml::Schema::XsdBuilder::XsdEntry*> _get_SchemaEntries();
    // Set static field: static private readonly System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdEntry[] SchemaEntries
    static void _set_SchemaEntries(::ArrayW<::System::Xml::Schema::XsdBuilder::XsdEntry*> value);
    // Get static field: static private readonly System.Int32[] DerivationMethodValues
    static ::ArrayW<int> _get_DerivationMethodValues();
    // Set static field: static private readonly System.Int32[] DerivationMethodValues
    static void _set_DerivationMethodValues(::ArrayW<int> value);
    // Get static field: static private readonly System.String[] DerivationMethodStrings
    static ::ArrayW<::StringW> _get_DerivationMethodStrings();
    // Set static field: static private readonly System.String[] DerivationMethodStrings
    static void _set_DerivationMethodStrings(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.String[] FormStringValues
    static ::ArrayW<::StringW> _get_FormStringValues();
    // Set static field: static private readonly System.String[] FormStringValues
    static void _set_FormStringValues(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.String[] UseStringValues
    static ::ArrayW<::StringW> _get_UseStringValues();
    // Set static field: static private readonly System.String[] UseStringValues
    static void _set_UseStringValues(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.String[] ProcessContentsStringValues
    static ::ArrayW<::StringW> _get_ProcessContentsStringValues();
    // Set static field: static private readonly System.String[] ProcessContentsStringValues
    static void _set_ProcessContentsStringValues(::ArrayW<::StringW> value);
    // Get instance field reference: private System.Xml.XmlReader reader
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlReader*& dyn_reader();
    // Get instance field reference: private System.Xml.PositionInfo positionInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::PositionInfo*& dyn_positionInfo();
    // Get instance field reference: private System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdEntry currentEntry
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XsdBuilder::XsdEntry*& dyn_currentEntry();
    // Get instance field reference: private System.Xml.Schema.XsdBuilder/System.Xml.Schema.XsdEntry nextEntry
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XsdBuilder::XsdEntry*& dyn_nextEntry();
    // Get instance field reference: private System.Boolean hasChild
    [[deprecated("Use field access instead!")]] bool& dyn_hasChild();
    // Get instance field reference: private System.Xml.HWStack stateHistory
    [[deprecated("Use field access instead!")]] ::System::Xml::HWStack*& dyn_stateHistory();
    // Get instance field reference: private System.Collections.Stack containerStack
    [[deprecated("Use field access instead!")]] ::System::Collections::Stack*& dyn_containerStack();
    // Get instance field reference: private System.Xml.XmlNameTable nameTable
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNameTable*& dyn_nameTable();
    // Get instance field reference: private System.Xml.Schema.SchemaNames schemaNames
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::SchemaNames*& dyn_schemaNames();
    // Get instance field reference: private System.Xml.XmlNamespaceManager namespaceManager
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNamespaceManager*& dyn_namespaceManager();
    // Get instance field reference: private System.Boolean canIncludeImport
    [[deprecated("Use field access instead!")]] bool& dyn_canIncludeImport();
    // Get instance field reference: private System.Xml.Schema.XmlSchema schema
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchema*& dyn_schema();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObject xso
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaObject*& dyn_xso();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaElement element
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaElement*& dyn_element();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaAny anyElement
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaAny*& dyn_anyElement();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaAttribute attribute
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaAttribute*& dyn_attribute();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaAnyAttribute anyAttribute
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaAnyAttribute*& dyn_anyAttribute();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaComplexType complexType
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaComplexType*& dyn_complexType();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaSimpleType simpleType
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaSimpleType*& dyn_simpleType();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaComplexContent complexContent
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaComplexContent*& dyn_complexContent();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaComplexContentExtension complexContentExtension
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaComplexContentExtension*& dyn_complexContentExtension();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaComplexContentRestriction complexContentRestriction
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaComplexContentRestriction*& dyn_complexContentRestriction();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaSimpleContent simpleContent
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaSimpleContent*& dyn_simpleContent();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaSimpleContentExtension simpleContentExtension
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaSimpleContentExtension*& dyn_simpleContentExtension();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaSimpleContentRestriction simpleContentRestriction
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaSimpleContentRestriction*& dyn_simpleContentRestriction();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaSimpleTypeUnion simpleTypeUnion
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaSimpleTypeUnion*& dyn_simpleTypeUnion();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaSimpleTypeList simpleTypeList
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaSimpleTypeList*& dyn_simpleTypeList();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaSimpleTypeRestriction simpleTypeRestriction
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaSimpleTypeRestriction*& dyn_simpleTypeRestriction();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaGroup group
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaGroup*& dyn_group();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaGroupRef groupRef
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaGroupRef*& dyn_groupRef();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaAll all
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaAll*& dyn_all();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaChoice choice
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaChoice*& dyn_choice();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaSequence sequence
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaSequence*& dyn_sequence();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaParticle particle
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaParticle*& dyn_particle();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaAttributeGroup attributeGroup
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaAttributeGroup*& dyn_attributeGroup();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaAttributeGroupRef attributeGroupRef
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaAttributeGroupRef*& dyn_attributeGroupRef();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaNotation notation
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaNotation*& dyn_notation();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaIdentityConstraint identityConstraint
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaIdentityConstraint*& dyn_identityConstraint();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaXPath xpath
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaXPath*& dyn_xpath();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaInclude include
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaInclude*& dyn_include();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaImport import
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaImport*& dyn_import();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaAnnotation annotation
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaAnnotation*& dyn_annotation();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaAppInfo appInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaAppInfo*& dyn_appInfo();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaDocumentation documentation
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaDocumentation*& dyn_documentation();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaFacet facet
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaFacet*& dyn_facet();
    // Get instance field reference: private System.Xml.XmlNode[] markup
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Xml::XmlNode*>& dyn_markup();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaRedefine redefine
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaRedefine*& dyn_redefine();
    // Get instance field reference: private System.Xml.Schema.ValidationEventHandler validationEventHandler
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::ValidationEventHandler*& dyn_validationEventHandler();
    // Get instance field reference: private System.Collections.ArrayList unhandledAttributes
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_unhandledAttributes();
    // Get instance field reference: private System.Collections.Hashtable namespaces
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_namespaces();
    // private System.Xml.Schema.SchemaNames/System.Xml.Schema.Token get_CurrentElement()
    // Offset: 0xEC5D20
    ::System::Xml::Schema::SchemaNames::Token get_CurrentElement();
    // private System.Xml.Schema.SchemaNames/System.Xml.Schema.Token get_ParentElement()
    // Offset: 0xEC5D3C
    ::System::Xml::Schema::SchemaNames::Token get_ParentElement();
    // private System.Xml.Schema.XmlSchemaObject get_ParentContainer()
    // Offset: 0xEC5DB8
    ::System::Xml::Schema::XmlSchemaObject* get_ParentContainer();
    // System.Void .ctor(System.Xml.XmlReader reader, System.Xml.XmlNamespaceManager curmgr, System.Xml.Schema.XmlSchema schema, System.Xml.XmlNameTable nameTable, System.Xml.Schema.SchemaNames schemaNames, System.Xml.Schema.ValidationEventHandler eventhandler)
    // Offset: 0xEC42B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XsdBuilder* New_ctor(::System::Xml::XmlReader* reader, ::System::Xml::XmlNamespaceManager* curmgr, ::System::Xml::Schema::XmlSchema* schema, ::System::Xml::XmlNameTable* nameTable, ::System::Xml::Schema::SchemaNames* schemaNames, ::System::Xml::Schema::ValidationEventHandler* eventhandler) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XsdBuilder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XsdBuilder*, creationType>(reader, curmgr, schema, nameTable, schemaNames, eventhandler)));
    }
    // static private System.Void .cctor()
    // Offset: 0xECA698
    static void _cctor();
    // private System.Void Push()
    // Offset: 0xEC470C
    void Push();
    // private System.Void Pop()
    // Offset: 0xEC5150
    void Pop();
    // private System.Xml.Schema.XmlSchemaObject GetContainer(System.Xml.Schema.XsdBuilder/System.Xml.Schema.State state)
    // Offset: 0xEC5204
    ::System::Xml::Schema::XmlSchemaObject* GetContainer(::System::Xml::Schema::XsdBuilder::State state);
    // private System.Void SetContainer(System.Xml.Schema.XsdBuilder/System.Xml.Schema.State state, System.Object container)
    // Offset: 0xEC5338
    void SetContainer(::System::Xml::Schema::XsdBuilder::State state, ::Il2CppObject* container);
    // static private System.Void BuildAnnotated_Id(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC5E4C
    static void BuildAnnotated_Id(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildSchema_AttributeFormDefault(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC5E74
    static void BuildSchema_AttributeFormDefault(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildSchema_ElementFormDefault(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC6000
    static void BuildSchema_ElementFormDefault(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildSchema_TargetNamespace(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC60AC
    static void BuildSchema_TargetNamespace(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildSchema_Version(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC60D0
    static void BuildSchema_Version(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildSchema_FinalDefault(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC60F4
    static void BuildSchema_FinalDefault(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildSchema_BlockDefault(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC63F8
    static void BuildSchema_BlockDefault(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitSchema(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC646C
    static void InitSchema(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitInclude(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC6490
    static void InitInclude(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildInclude_SchemaLocation(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC653C
    static void BuildInclude_SchemaLocation(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitImport(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC6560
    static void InitImport(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildImport_Namespace(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC660C
    static void BuildImport_Namespace(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildImport_SchemaLocation(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC6630
    static void BuildImport_SchemaLocation(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitRedefine(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC6654
    static void InitRedefine(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildRedefine_SchemaLocation(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC6700
    static void BuildRedefine_SchemaLocation(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void EndRedefine(System.Xml.Schema.XsdBuilder builder)
    // Offset: 0xEC6724
    static void EndRedefine(::System::Xml::Schema::XsdBuilder* builder);
    // static private System.Void InitAttribute(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC6740
    static void InitAttribute(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildAttribute_Default(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC6A24
    static void BuildAttribute_Default(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildAttribute_Fixed(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC6A48
    static void BuildAttribute_Fixed(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildAttribute_Form(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC6A6C
    static void BuildAttribute_Form(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildAttribute_Use(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC6B18
    static void BuildAttribute_Use(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildAttribute_Ref(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC6BC4
    static void BuildAttribute_Ref(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildAttribute_Name(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC6DD0
    static void BuildAttribute_Name(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildAttribute_Type(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC6DF4
    static void BuildAttribute_Type(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitElement(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC6E70
    static void InitElement(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildElement_Abstract(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC6F64
    static void BuildElement_Abstract(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildElement_Block(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC70F8
    static void BuildElement_Block(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildElement_Default(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC716C
    static void BuildElement_Default(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildElement_Form(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC7190
    static void BuildElement_Form(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildElement_SubstitutionGroup(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC723C
    static void BuildElement_SubstitutionGroup(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildElement_Final(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC72B8
    static void BuildElement_Final(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildElement_Fixed(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC732C
    static void BuildElement_Fixed(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildElement_MaxOccurs(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC7350
    static void BuildElement_MaxOccurs(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildElement_MinOccurs(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC7430
    static void BuildElement_MinOccurs(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildElement_Name(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC7510
    static void BuildElement_Name(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildElement_Nillable(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC7534
    static void BuildElement_Nillable(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildElement_Ref(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC75B0
    static void BuildElement_Ref(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildElement_Type(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC762C
    static void BuildElement_Type(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitSimpleType(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC76A8
    static void InitSimpleType(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildSimpleType_Name(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC79A8
    static void BuildSimpleType_Name(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildSimpleType_Final(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC79CC
    static void BuildSimpleType_Final(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitSimpleTypeUnion(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC7A40
    static void InitSimpleTypeUnion(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildSimpleTypeUnion_MemberTypes(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC7AE8
    static void BuildSimpleTypeUnion_MemberTypes(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitSimpleTypeList(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC7CD0
    static void InitSimpleTypeList(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildSimpleTypeList_ItemType(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC7D78
    static void BuildSimpleTypeList_ItemType(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitSimpleTypeRestriction(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC7DF4
    static void InitSimpleTypeRestriction(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildSimpleTypeRestriction_Base(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC7E9C
    static void BuildSimpleTypeRestriction_Base(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitComplexType(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC7F18
    static void InitComplexType(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildComplexType_Abstract(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC8078
    static void BuildComplexType_Abstract(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildComplexType_Block(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC80F4
    static void BuildComplexType_Block(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildComplexType_Final(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC8168
    static void BuildComplexType_Final(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildComplexType_Mixed(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC81DC
    static void BuildComplexType_Mixed(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildComplexType_Name(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC8260
    static void BuildComplexType_Name(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitComplexContent(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC8284
    static void InitComplexContent(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildComplexContent_Mixed(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC8370
    static void BuildComplexContent_Mixed(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitComplexContentExtension(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC83EC
    static void InitComplexContentExtension(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildComplexContentExtension_Base(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC84C0
    static void BuildComplexContentExtension_Base(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitComplexContentRestriction(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC853C
    static void InitComplexContentRestriction(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildComplexContentRestriction_Base(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC85BC
    static void BuildComplexContentRestriction_Base(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitSimpleContent(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC8638
    static void InitSimpleContent(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitSimpleContentExtension(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC8724
    static void InitSimpleContentExtension(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildSimpleContentExtension_Base(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC87F8
    static void BuildSimpleContentExtension_Base(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitSimpleContentRestriction(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC8874
    static void InitSimpleContentRestriction(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildSimpleContentRestriction_Base(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC8948
    static void BuildSimpleContentRestriction_Base(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitAttributeGroup(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC89C4
    static void InitAttributeGroup(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildAttributeGroup_Name(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC8A80
    static void BuildAttributeGroup_Name(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitAttributeGroupRef(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC8AA4
    static void InitAttributeGroupRef(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildAttributeGroupRef_Ref(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC8B14
    static void BuildAttributeGroupRef_Ref(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitAnyAttribute(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC8B90
    static void InitAnyAttribute(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildAnyAttribute_Namespace(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC8E00
    static void BuildAnyAttribute_Namespace(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildAnyAttribute_ProcessContents(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC8E24
    static void BuildAnyAttribute_ProcessContents(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitGroup(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC8ED0
    static void InitGroup(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildGroup_Name(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC8F8C
    static void BuildGroup_Name(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitGroupRef(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC8FB0
    static void InitGroupRef(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildParticle_MaxOccurs(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC9334
    static void BuildParticle_MaxOccurs(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildParticle_MinOccurs(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC9350
    static void BuildParticle_MinOccurs(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildGroupRef_Ref(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC936C
    static void BuildGroupRef_Ref(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitAll(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC93E8
    static void InitAll(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitChoice(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC945C
    static void InitChoice(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitSequence(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC94D0
    static void InitSequence(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitAny(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC9540
    static void InitAny(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildAny_Namespace(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC95B4
    static void BuildAny_Namespace(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildAny_ProcessContents(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC95D8
    static void BuildAny_ProcessContents(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitNotation(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC9684
    static void InitNotation(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildNotation_Name(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC9708
    static void BuildNotation_Name(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildNotation_Public(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC972C
    static void BuildNotation_Public(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildNotation_System(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC9750
    static void BuildNotation_System(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitFacet(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC9774
    static void InitFacet(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildFacet_Fixed(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC9A88
    static void BuildFacet_Fixed(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildFacet_Value(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC9B0C
    static void BuildFacet_Value(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitIdentityConstraint(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC9B30
    static void InitIdentityConstraint(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildIdentityConstraint_Name(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC9C70
    static void BuildIdentityConstraint_Name(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildIdentityConstraint_Refer(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC9C94
    static void BuildIdentityConstraint_Refer(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitSelector(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC9DC0
    static void InitSelector(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildSelector_XPath(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC9E68
    static void BuildSelector_XPath(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitField(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC9E8C
    static void InitField(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildField_XPath(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC9F40
    static void BuildField_XPath(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitAnnotation(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xEC9F64
    static void InitAnnotation(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void InitAppinfo(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xECA030
    static void InitAppinfo(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildAppinfo_Source(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xECA0D8
    static void BuildAppinfo_Source(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void EndAppinfo(System.Xml.Schema.XsdBuilder builder)
    // Offset: 0xECA158
    static void EndAppinfo(::System::Xml::Schema::XsdBuilder* builder);
    // static private System.Void InitDocumentation(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xECA180
    static void InitDocumentation(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildDocumentation_Source(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xECA228
    static void BuildDocumentation_Source(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void BuildDocumentation_XmlLang(System.Xml.Schema.XsdBuilder builder, System.String value)
    // Offset: 0xECA2A4
    static void BuildDocumentation_XmlLang(::System::Xml::Schema::XsdBuilder* builder, ::StringW value);
    // static private System.Void EndDocumentation(System.Xml.Schema.XsdBuilder builder)
    // Offset: 0xECA3E8
    static void EndDocumentation(::System::Xml::Schema::XsdBuilder* builder);
    // private System.Void AddAttribute(System.Xml.Schema.XmlSchemaObject value)
    // Offset: 0xEC67E8
    void AddAttribute(::System::Xml::Schema::XmlSchemaObject* value);
    // private System.Void AddParticle(System.Xml.Schema.XmlSchemaParticle particle)
    // Offset: 0xEC9024
    void AddParticle(::System::Xml::Schema::XmlSchemaParticle* particle);
    // private System.Boolean GetNextState(System.Xml.XmlQualifiedName qname)
    // Offset: 0xEC4594
    bool GetNextState(::System::Xml::XmlQualifiedName* qname);
    // private System.Boolean IsSkipableElement(System.Xml.XmlQualifiedName qname)
    // Offset: 0xEC4848
    bool IsSkipableElement(::System::Xml::XmlQualifiedName* qname);
    // private System.Void SetMinOccurs(System.Xml.Schema.XmlSchemaParticle particle, System.String value)
    // Offset: 0xEC744C
    void SetMinOccurs(::System::Xml::Schema::XmlSchemaParticle* particle, ::StringW value);
    // private System.Void SetMaxOccurs(System.Xml.Schema.XmlSchemaParticle particle, System.String value)
    // Offset: 0xEC736C
    void SetMaxOccurs(::System::Xml::Schema::XmlSchemaParticle* particle, ::StringW value);
    // private System.Boolean ParseBoolean(System.String value, System.String attributeName)
    // Offset: 0xEC6FE0
    bool ParseBoolean(::StringW value, ::StringW attributeName);
    // private System.Int32 ParseEnum(System.String value, System.String attributeName, System.String[] values)
    // Offset: 0xEC5F20
    int ParseEnum(::StringW value, ::StringW attributeName, ::ArrayW<::StringW> values);
    // private System.Xml.XmlQualifiedName ParseQName(System.String value, System.String attributeName)
    // Offset: 0xEC6C40
    ::System::Xml::XmlQualifiedName* ParseQName(::StringW value, ::StringW attributeName);
    // private System.Int32 ParseBlockFinalEnum(System.String value, System.String attributeName)
    // Offset: 0xEC6168
    int ParseBlockFinalEnum(::StringW value, ::StringW attributeName);
    // static private System.String ParseUriReference(System.String s)
    // Offset: 0xECA154
    static ::StringW ParseUriReference(::StringW s);
    // private System.Void SendValidationEvent(System.String code, System.String arg0, System.String arg1, System.String arg2)
    // Offset: 0xECA410
    void SendValidationEvent(::StringW code, ::StringW arg0, ::StringW arg1, ::StringW arg2);
    // private System.Void SendValidationEvent(System.String code, System.String msg)
    // Offset: 0xEC4870
    void SendValidationEvent(::StringW code, ::StringW msg);
    // private System.Void SendValidationEvent(System.String code, System.String[] args, System.Xml.Schema.XmlSeverityType severity)
    // Offset: 0xEC4E08
    void SendValidationEvent(::StringW code, ::ArrayW<::StringW> args, ::System::Xml::Schema::XmlSeverityType severity);
    // private System.Void SendValidationEvent(System.Xml.Schema.XmlSchemaException e, System.Xml.Schema.XmlSeverityType severity)
    // Offset: 0xECA5C0
    void SendValidationEvent(::System::Xml::Schema::XmlSchemaException* e, ::System::Xml::Schema::XmlSeverityType severity);
    // private System.Void SendValidationEvent(System.Xml.Schema.XmlSchemaException e)
    // Offset: 0xEC7CC8
    void SendValidationEvent(::System::Xml::Schema::XmlSchemaException* e);
    // private System.Void RecordPosition()
    // Offset: 0xEC47A8
    void RecordPosition();
    // override System.Boolean ProcessElement(System.String prefix, System.String name, System.String ns)
    // Offset: 0xEC4480
    // Implemented from: System.Xml.Schema.SchemaBuilder
    // Base method: System.Boolean SchemaBuilder::ProcessElement(System.String prefix, System.String name, System.String ns)
    bool ProcessElement(::StringW prefix, ::StringW name, ::StringW ns);
    // override System.Void ProcessAttribute(System.String prefix, System.String name, System.String ns, System.String value)
    // Offset: 0xEC4964
    // Implemented from: System.Xml.Schema.SchemaBuilder
    // Base method: System.Void SchemaBuilder::ProcessAttribute(System.String prefix, System.String name, System.String ns, System.String value)
    void ProcessAttribute(::StringW prefix, ::StringW name, ::StringW ns, ::StringW value);
    // override System.Boolean IsContentParsed()
    // Offset: 0xEC4F00
    // Implemented from: System.Xml.Schema.SchemaBuilder
    // Base method: System.Boolean SchemaBuilder::IsContentParsed()
    bool IsContentParsed();
    // override System.Void ProcessMarkup(System.Xml.XmlNode[] markup)
    // Offset: 0xEC4F1C
    // Implemented from: System.Xml.Schema.SchemaBuilder
    // Base method: System.Void SchemaBuilder::ProcessMarkup(System.Xml.XmlNode[] markup)
    void ProcessMarkup(::ArrayW<::System::Xml::XmlNode*> markup);
    // override System.Void ProcessCData(System.String value)
    // Offset: 0xEC4F24
    // Implemented from: System.Xml.Schema.SchemaBuilder
    // Base method: System.Void SchemaBuilder::ProcessCData(System.String value)
    void ProcessCData(::StringW value);
    // override System.Void StartChildren()
    // Offset: 0xEC4F80
    // Implemented from: System.Xml.Schema.SchemaBuilder
    // Base method: System.Void SchemaBuilder::StartChildren()
    void StartChildren();
    // override System.Void EndChildren()
    // Offset: 0xEC5110
    // Implemented from: System.Xml.Schema.SchemaBuilder
    // Base method: System.Void SchemaBuilder::EndChildren()
    void EndChildren();
  }; // System.Xml.Schema.XsdBuilder
  #pragma pack(pop)
  static check_size<sizeof(XsdBuilder), 408 + sizeof(::System::Collections::Hashtable*)> __System_Xml_Schema_XsdBuilderSizeCheck;
  static_assert(sizeof(XsdBuilder) == 0x1A0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XsdBuilder::State, "System.Xml.Schema", "XsdBuilder/State");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::get_CurrentElement
// Il2CppName: get_CurrentElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaNames::Token (System::Xml::Schema::XsdBuilder::*)()>(&System::Xml::Schema::XsdBuilder::get_CurrentElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "get_CurrentElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::get_ParentElement
// Il2CppName: get_ParentElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaNames::Token (System::Xml::Schema::XsdBuilder::*)()>(&System::Xml::Schema::XsdBuilder::get_ParentElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "get_ParentElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::get_ParentContainer
// Il2CppName: get_ParentContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObject* (System::Xml::Schema::XsdBuilder::*)()>(&System::Xml::Schema::XsdBuilder::get_ParentContainer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "get_ParentContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::Schema::XsdBuilder::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdBuilder::*)()>(&System::Xml::Schema::XsdBuilder::Push)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::Pop
// Il2CppName: Pop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdBuilder::*)()>(&System::Xml::Schema::XsdBuilder::Pop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "Pop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::GetContainer
// Il2CppName: GetContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObject* (System::Xml::Schema::XsdBuilder::*)(::System::Xml::Schema::XsdBuilder::State)>(&System::Xml::Schema::XsdBuilder::GetContainer)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder/State")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "GetContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::SetContainer
// Il2CppName: SetContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdBuilder::*)(::System::Xml::Schema::XsdBuilder::State, ::Il2CppObject*)>(&System::Xml::Schema::XsdBuilder::SetContainer)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder/State")->byval_arg;
    static auto* container = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "SetContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, container});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildAnnotated_Id
// Il2CppName: BuildAnnotated_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildAnnotated_Id)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildAnnotated_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildSchema_AttributeFormDefault
// Il2CppName: BuildSchema_AttributeFormDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildSchema_AttributeFormDefault)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildSchema_AttributeFormDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildSchema_ElementFormDefault
// Il2CppName: BuildSchema_ElementFormDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildSchema_ElementFormDefault)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildSchema_ElementFormDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildSchema_TargetNamespace
// Il2CppName: BuildSchema_TargetNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildSchema_TargetNamespace)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildSchema_TargetNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildSchema_Version
// Il2CppName: BuildSchema_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildSchema_Version)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildSchema_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildSchema_FinalDefault
// Il2CppName: BuildSchema_FinalDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildSchema_FinalDefault)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildSchema_FinalDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildSchema_BlockDefault
// Il2CppName: BuildSchema_BlockDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildSchema_BlockDefault)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildSchema_BlockDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitSchema
// Il2CppName: InitSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitSchema)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitInclude
// Il2CppName: InitInclude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitInclude)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitInclude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildInclude_SchemaLocation
// Il2CppName: BuildInclude_SchemaLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildInclude_SchemaLocation)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildInclude_SchemaLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitImport
// Il2CppName: InitImport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitImport)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitImport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildImport_Namespace
// Il2CppName: BuildImport_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildImport_Namespace)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildImport_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildImport_SchemaLocation
// Il2CppName: BuildImport_SchemaLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildImport_SchemaLocation)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildImport_SchemaLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitRedefine
// Il2CppName: InitRedefine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitRedefine)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitRedefine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildRedefine_SchemaLocation
// Il2CppName: BuildRedefine_SchemaLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildRedefine_SchemaLocation)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildRedefine_SchemaLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::EndRedefine
// Il2CppName: EndRedefine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*)>(&System::Xml::Schema::XsdBuilder::EndRedefine)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "EndRedefine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitAttribute
// Il2CppName: InitAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitAttribute)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildAttribute_Default
// Il2CppName: BuildAttribute_Default
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildAttribute_Default)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildAttribute_Default", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildAttribute_Fixed
// Il2CppName: BuildAttribute_Fixed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildAttribute_Fixed)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildAttribute_Fixed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildAttribute_Form
// Il2CppName: BuildAttribute_Form
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildAttribute_Form)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildAttribute_Form", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildAttribute_Use
// Il2CppName: BuildAttribute_Use
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildAttribute_Use)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildAttribute_Use", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildAttribute_Ref
// Il2CppName: BuildAttribute_Ref
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildAttribute_Ref)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildAttribute_Ref", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildAttribute_Name
// Il2CppName: BuildAttribute_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildAttribute_Name)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildAttribute_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildAttribute_Type
// Il2CppName: BuildAttribute_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildAttribute_Type)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildAttribute_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitElement
// Il2CppName: InitElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitElement)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildElement_Abstract
// Il2CppName: BuildElement_Abstract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildElement_Abstract)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildElement_Abstract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildElement_Block
// Il2CppName: BuildElement_Block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildElement_Block)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildElement_Block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildElement_Default
// Il2CppName: BuildElement_Default
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildElement_Default)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildElement_Default", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildElement_Form
// Il2CppName: BuildElement_Form
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildElement_Form)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildElement_Form", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildElement_SubstitutionGroup
// Il2CppName: BuildElement_SubstitutionGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildElement_SubstitutionGroup)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildElement_SubstitutionGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildElement_Final
// Il2CppName: BuildElement_Final
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildElement_Final)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildElement_Final", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildElement_Fixed
// Il2CppName: BuildElement_Fixed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildElement_Fixed)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildElement_Fixed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildElement_MaxOccurs
// Il2CppName: BuildElement_MaxOccurs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildElement_MaxOccurs)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildElement_MaxOccurs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildElement_MinOccurs
// Il2CppName: BuildElement_MinOccurs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildElement_MinOccurs)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildElement_MinOccurs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildElement_Name
// Il2CppName: BuildElement_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildElement_Name)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildElement_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildElement_Nillable
// Il2CppName: BuildElement_Nillable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildElement_Nillable)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildElement_Nillable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildElement_Ref
// Il2CppName: BuildElement_Ref
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildElement_Ref)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildElement_Ref", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildElement_Type
// Il2CppName: BuildElement_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildElement_Type)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildElement_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitSimpleType
// Il2CppName: InitSimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitSimpleType)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitSimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildSimpleType_Name
// Il2CppName: BuildSimpleType_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildSimpleType_Name)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildSimpleType_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildSimpleType_Final
// Il2CppName: BuildSimpleType_Final
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildSimpleType_Final)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildSimpleType_Final", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitSimpleTypeUnion
// Il2CppName: InitSimpleTypeUnion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitSimpleTypeUnion)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitSimpleTypeUnion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildSimpleTypeUnion_MemberTypes
// Il2CppName: BuildSimpleTypeUnion_MemberTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildSimpleTypeUnion_MemberTypes)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildSimpleTypeUnion_MemberTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitSimpleTypeList
// Il2CppName: InitSimpleTypeList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitSimpleTypeList)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitSimpleTypeList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildSimpleTypeList_ItemType
// Il2CppName: BuildSimpleTypeList_ItemType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildSimpleTypeList_ItemType)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildSimpleTypeList_ItemType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitSimpleTypeRestriction
// Il2CppName: InitSimpleTypeRestriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitSimpleTypeRestriction)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitSimpleTypeRestriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildSimpleTypeRestriction_Base
// Il2CppName: BuildSimpleTypeRestriction_Base
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildSimpleTypeRestriction_Base)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildSimpleTypeRestriction_Base", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitComplexType
// Il2CppName: InitComplexType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitComplexType)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitComplexType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildComplexType_Abstract
// Il2CppName: BuildComplexType_Abstract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildComplexType_Abstract)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildComplexType_Abstract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildComplexType_Block
// Il2CppName: BuildComplexType_Block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildComplexType_Block)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildComplexType_Block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildComplexType_Final
// Il2CppName: BuildComplexType_Final
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildComplexType_Final)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildComplexType_Final", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildComplexType_Mixed
// Il2CppName: BuildComplexType_Mixed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildComplexType_Mixed)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildComplexType_Mixed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildComplexType_Name
// Il2CppName: BuildComplexType_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildComplexType_Name)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildComplexType_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitComplexContent
// Il2CppName: InitComplexContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitComplexContent)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitComplexContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildComplexContent_Mixed
// Il2CppName: BuildComplexContent_Mixed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildComplexContent_Mixed)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildComplexContent_Mixed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitComplexContentExtension
// Il2CppName: InitComplexContentExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitComplexContentExtension)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitComplexContentExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildComplexContentExtension_Base
// Il2CppName: BuildComplexContentExtension_Base
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildComplexContentExtension_Base)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildComplexContentExtension_Base", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitComplexContentRestriction
// Il2CppName: InitComplexContentRestriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitComplexContentRestriction)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitComplexContentRestriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildComplexContentRestriction_Base
// Il2CppName: BuildComplexContentRestriction_Base
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildComplexContentRestriction_Base)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildComplexContentRestriction_Base", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitSimpleContent
// Il2CppName: InitSimpleContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitSimpleContent)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitSimpleContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitSimpleContentExtension
// Il2CppName: InitSimpleContentExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitSimpleContentExtension)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitSimpleContentExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildSimpleContentExtension_Base
// Il2CppName: BuildSimpleContentExtension_Base
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildSimpleContentExtension_Base)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildSimpleContentExtension_Base", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitSimpleContentRestriction
// Il2CppName: InitSimpleContentRestriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitSimpleContentRestriction)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitSimpleContentRestriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildSimpleContentRestriction_Base
// Il2CppName: BuildSimpleContentRestriction_Base
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildSimpleContentRestriction_Base)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildSimpleContentRestriction_Base", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitAttributeGroup
// Il2CppName: InitAttributeGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitAttributeGroup)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitAttributeGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildAttributeGroup_Name
// Il2CppName: BuildAttributeGroup_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildAttributeGroup_Name)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildAttributeGroup_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitAttributeGroupRef
// Il2CppName: InitAttributeGroupRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitAttributeGroupRef)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitAttributeGroupRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildAttributeGroupRef_Ref
// Il2CppName: BuildAttributeGroupRef_Ref
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildAttributeGroupRef_Ref)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildAttributeGroupRef_Ref", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitAnyAttribute
// Il2CppName: InitAnyAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitAnyAttribute)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitAnyAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildAnyAttribute_Namespace
// Il2CppName: BuildAnyAttribute_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildAnyAttribute_Namespace)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildAnyAttribute_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildAnyAttribute_ProcessContents
// Il2CppName: BuildAnyAttribute_ProcessContents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildAnyAttribute_ProcessContents)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildAnyAttribute_ProcessContents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitGroup
// Il2CppName: InitGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitGroup)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildGroup_Name
// Il2CppName: BuildGroup_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildGroup_Name)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildGroup_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitGroupRef
// Il2CppName: InitGroupRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitGroupRef)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitGroupRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildParticle_MaxOccurs
// Il2CppName: BuildParticle_MaxOccurs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildParticle_MaxOccurs)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildParticle_MaxOccurs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildParticle_MinOccurs
// Il2CppName: BuildParticle_MinOccurs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildParticle_MinOccurs)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildParticle_MinOccurs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildGroupRef_Ref
// Il2CppName: BuildGroupRef_Ref
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildGroupRef_Ref)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildGroupRef_Ref", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitAll
// Il2CppName: InitAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitAll)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitChoice
// Il2CppName: InitChoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitChoice)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitChoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitSequence
// Il2CppName: InitSequence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitSequence)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitSequence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitAny
// Il2CppName: InitAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitAny)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildAny_Namespace
// Il2CppName: BuildAny_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildAny_Namespace)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildAny_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildAny_ProcessContents
// Il2CppName: BuildAny_ProcessContents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildAny_ProcessContents)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildAny_ProcessContents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitNotation
// Il2CppName: InitNotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitNotation)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitNotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildNotation_Name
// Il2CppName: BuildNotation_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildNotation_Name)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildNotation_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildNotation_Public
// Il2CppName: BuildNotation_Public
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildNotation_Public)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildNotation_Public", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildNotation_System
// Il2CppName: BuildNotation_System
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildNotation_System)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildNotation_System", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitFacet
// Il2CppName: InitFacet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitFacet)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitFacet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildFacet_Fixed
// Il2CppName: BuildFacet_Fixed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildFacet_Fixed)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildFacet_Fixed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildFacet_Value
// Il2CppName: BuildFacet_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildFacet_Value)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildFacet_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitIdentityConstraint
// Il2CppName: InitIdentityConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitIdentityConstraint)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitIdentityConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildIdentityConstraint_Name
// Il2CppName: BuildIdentityConstraint_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildIdentityConstraint_Name)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildIdentityConstraint_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildIdentityConstraint_Refer
// Il2CppName: BuildIdentityConstraint_Refer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildIdentityConstraint_Refer)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildIdentityConstraint_Refer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitSelector
// Il2CppName: InitSelector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitSelector)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitSelector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildSelector_XPath
// Il2CppName: BuildSelector_XPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildSelector_XPath)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildSelector_XPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitField
// Il2CppName: InitField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitField)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildField_XPath
// Il2CppName: BuildField_XPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildField_XPath)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildField_XPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitAnnotation
// Il2CppName: InitAnnotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitAnnotation)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitAnnotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitAppinfo
// Il2CppName: InitAppinfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitAppinfo)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitAppinfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildAppinfo_Source
// Il2CppName: BuildAppinfo_Source
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildAppinfo_Source)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildAppinfo_Source", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::EndAppinfo
// Il2CppName: EndAppinfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*)>(&System::Xml::Schema::XsdBuilder::EndAppinfo)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "EndAppinfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::InitDocumentation
// Il2CppName: InitDocumentation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::InitDocumentation)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "InitDocumentation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildDocumentation_Source
// Il2CppName: BuildDocumentation_Source
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildDocumentation_Source)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildDocumentation_Source", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::BuildDocumentation_XmlLang
// Il2CppName: BuildDocumentation_XmlLang
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*, ::StringW)>(&System::Xml::Schema::XsdBuilder::BuildDocumentation_XmlLang)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "BuildDocumentation_XmlLang", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::EndDocumentation
// Il2CppName: EndDocumentation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XsdBuilder*)>(&System::Xml::Schema::XsdBuilder::EndDocumentation)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "EndDocumentation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::AddAttribute
// Il2CppName: AddAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdBuilder::*)(::System::Xml::Schema::XmlSchemaObject*)>(&System::Xml::Schema::XsdBuilder::AddAttribute)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "AddAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::AddParticle
// Il2CppName: AddParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdBuilder::*)(::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::XsdBuilder::AddParticle)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "AddParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::GetNextState
// Il2CppName: GetNextState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdBuilder::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XsdBuilder::GetNextState)> {
  static const MethodInfo* get() {
    static auto* qname = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "GetNextState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qname});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::IsSkipableElement
// Il2CppName: IsSkipableElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdBuilder::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XsdBuilder::IsSkipableElement)> {
  static const MethodInfo* get() {
    static auto* qname = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "IsSkipableElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qname});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::SetMinOccurs
// Il2CppName: SetMinOccurs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdBuilder::*)(::System::Xml::Schema::XmlSchemaParticle*, ::StringW)>(&System::Xml::Schema::XsdBuilder::SetMinOccurs)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "SetMinOccurs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::SetMaxOccurs
// Il2CppName: SetMaxOccurs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdBuilder::*)(::System::Xml::Schema::XmlSchemaParticle*, ::StringW)>(&System::Xml::Schema::XsdBuilder::SetMaxOccurs)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "SetMaxOccurs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::ParseBoolean
// Il2CppName: ParseBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdBuilder::*)(::StringW, ::StringW)>(&System::Xml::Schema::XsdBuilder::ParseBoolean)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "ParseBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, attributeName});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::ParseEnum
// Il2CppName: ParseEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::XsdBuilder::*)(::StringW, ::StringW, ::ArrayW<::StringW>)>(&System::Xml::Schema::XsdBuilder::ParseEnum)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "ParseEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, attributeName, values});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::ParseQName
// Il2CppName: ParseQName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Schema::XsdBuilder::*)(::StringW, ::StringW)>(&System::Xml::Schema::XsdBuilder::ParseQName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "ParseQName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, attributeName});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::ParseBlockFinalEnum
// Il2CppName: ParseBlockFinalEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::XsdBuilder::*)(::StringW, ::StringW)>(&System::Xml::Schema::XsdBuilder::ParseBlockFinalEnum)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "ParseBlockFinalEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, attributeName});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::ParseUriReference
// Il2CppName: ParseUriReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::Xml::Schema::XsdBuilder::ParseUriReference)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "ParseUriReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdBuilder::*)(::StringW, ::StringW, ::StringW, ::StringW)>(&System::Xml::Schema::XsdBuilder::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, arg0, arg1, arg2});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdBuilder::*)(::StringW, ::StringW)>(&System::Xml::Schema::XsdBuilder::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, msg});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdBuilder::*)(::StringW, ::ArrayW<::StringW>, ::System::Xml::Schema::XmlSeverityType)>(&System::Xml::Schema::XsdBuilder::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* severity = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSeverityType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, args, severity});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdBuilder::*)(::System::Xml::Schema::XmlSchemaException*, ::System::Xml::Schema::XmlSeverityType)>(&System::Xml::Schema::XsdBuilder::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaException")->byval_arg;
    static auto* severity = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSeverityType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, severity});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdBuilder::*)(::System::Xml::Schema::XmlSchemaException*)>(&System::Xml::Schema::XsdBuilder::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaException")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::RecordPosition
// Il2CppName: RecordPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdBuilder::*)()>(&System::Xml::Schema::XsdBuilder::RecordPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "RecordPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::ProcessElement
// Il2CppName: ProcessElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdBuilder::*)(::StringW, ::StringW, ::StringW)>(&System::Xml::Schema::XsdBuilder::ProcessElement)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "ProcessElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, name, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::ProcessAttribute
// Il2CppName: ProcessAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdBuilder::*)(::StringW, ::StringW, ::StringW, ::StringW)>(&System::Xml::Schema::XsdBuilder::ProcessAttribute)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "ProcessAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, name, ns, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::IsContentParsed
// Il2CppName: IsContentParsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdBuilder::*)()>(&System::Xml::Schema::XsdBuilder::IsContentParsed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "IsContentParsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::ProcessMarkup
// Il2CppName: ProcessMarkup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdBuilder::*)(::ArrayW<::System::Xml::XmlNode*>)>(&System::Xml::Schema::XsdBuilder::ProcessMarkup)> {
  static const MethodInfo* get() {
    static auto* markup = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "ProcessMarkup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{markup});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::ProcessCData
// Il2CppName: ProcessCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdBuilder::*)(::StringW)>(&System::Xml::Schema::XsdBuilder::ProcessCData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "ProcessCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::StartChildren
// Il2CppName: StartChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdBuilder::*)()>(&System::Xml::Schema::XsdBuilder::StartChildren)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "StartChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdBuilder::EndChildren
// Il2CppName: EndChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdBuilder::*)()>(&System::Xml::Schema::XsdBuilder::EndChildren)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdBuilder*), "EndChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
