// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlSchemaValidationFlags
#include "System/Xml/Schema/XmlSchemaValidationFlags.hpp"
// Including type: System.Xml.Schema.ValidatorState
#include "System/Xml/Schema/ValidatorState.hpp"
// Including type: System.Xml.Schema.XmlSchemaContentProcessing
#include "System/Xml/Schema/XmlSchemaContentProcessing.hpp"
// Including type: System.Xml.XmlCharType
#include "System/Xml/XmlCharType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaSet
  class XmlSchemaSet;
  // Forward declaring type: SchemaInfo
  class SchemaInfo;
  // Forward declaring type: ValidationState
  class ValidationState;
  // Forward declaring type: SchemaAttDef
  class SchemaAttDef;
  // Forward declaring type: IdRefNode
  class IdRefNode;
  // Forward declaring type: XmlSchemaObject
  class XmlSchemaObject;
  // Forward declaring type: ValidationEventHandler
  class ValidationEventHandler;
  // Forward declaring type: XmlSchemaDatatype
  class XmlSchemaDatatype;
  // Forward declaring type: XmlSchemaParticle
  class XmlSchemaParticle;
  // Forward declaring type: XmlSchemaAttribute
  class XmlSchemaAttribute;
  // Forward declaring type: XmlSchemaContentType
  struct XmlSchemaContentType;
  // Forward declaring type: XmlSchema
  class XmlSchema;
  // Forward declaring type: XmlSchemaInfo
  class XmlSchemaInfo;
  // Forward declaring type: XmlValueGetter
  class XmlValueGetter;
  // Forward declaring type: XmlSchemaElement
  class XmlSchemaElement;
  // Forward declaring type: XmlSchemaSimpleType
  class XmlSchemaSimpleType;
  // Forward declaring type: SchemaDeclBase
  class SchemaDeclBase;
  // Forward declaring type: SchemaElementDecl
  class SchemaElementDecl;
  // Forward declaring type: XmlSeverityType
  struct XmlSeverityType;
  // Forward declaring type: XmlSchemaValidationException
  class XmlSchemaValidationException;
  // Forward declaring type: XmlSchemaException
  class XmlSchemaException;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: IDtdInfo
  class IDtdInfo;
  // Forward declaring type: HWStack
  class HWStack;
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: IXmlLineInfo
  class IXmlLineInfo;
  // Forward declaring type: XmlResolver
  class XmlResolver;
  // Forward declaring type: IXmlNamespaceResolver
  class IXmlNamespaceResolver;
  // Forward declaring type: XmlTokenizedType
  struct XmlTokenizedType;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaValidator
  class XmlSchemaValidator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchemaValidator);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaValidator*, "System.Xml.Schema", "XmlSchemaValidator");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x128
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaValidator
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSchemaValidator : public ::Il2CppObject {
    public:
    public:
    // private System.Xml.Schema.XmlSchemaSet schemaSet
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::Schema::XmlSchemaSet* schemaSet;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaSet*) == 0x8);
    // private System.Xml.Schema.XmlSchemaValidationFlags validationFlags
    // Size: 0x4
    // Offset: 0x18
    ::System::Xml::Schema::XmlSchemaValidationFlags validationFlags;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaValidationFlags) == 0x4);
    // private System.Int32 startIDConstraint
    // Size: 0x4
    // Offset: 0x1C
    int startIDConstraint;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean isRoot
    // Size: 0x1
    // Offset: 0x20
    bool isRoot;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean rootHasSchema
    // Size: 0x1
    // Offset: 0x21
    bool rootHasSchema;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean attrValid
    // Size: 0x1
    // Offset: 0x22
    bool attrValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean checkEntity
    // Size: 0x1
    // Offset: 0x23
    bool checkEntity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: checkEntity and: compiledSchemaInfo
    char __padding6[0x4] = {};
    // private System.Xml.Schema.SchemaInfo compiledSchemaInfo
    // Size: 0x8
    // Offset: 0x28
    ::System::Xml::Schema::SchemaInfo* compiledSchemaInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::SchemaInfo*) == 0x8);
    // private System.Xml.IDtdInfo dtdSchemaInfo
    // Size: 0x8
    // Offset: 0x30
    ::System::Xml::IDtdInfo* dtdSchemaInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::IDtdInfo*) == 0x8);
    // private System.Collections.Hashtable validatedNamespaces
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Hashtable* validatedNamespaces;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Xml.HWStack validationStack
    // Size: 0x8
    // Offset: 0x40
    ::System::Xml::HWStack* validationStack;
    // Field size check
    static_assert(sizeof(::System::Xml::HWStack*) == 0x8);
    // private System.Xml.Schema.ValidationState context
    // Size: 0x8
    // Offset: 0x48
    ::System::Xml::Schema::ValidationState* context;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::ValidationState*) == 0x8);
    // private System.Xml.Schema.ValidatorState currentState
    // Size: 0x4
    // Offset: 0x50
    ::System::Xml::Schema::ValidatorState currentState;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::ValidatorState) == 0x4);
    // Padding between fields: currentState and: attPresence
    char __padding12[0x4] = {};
    // private System.Collections.Hashtable attPresence
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Hashtable* attPresence;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Xml.Schema.SchemaAttDef wildID
    // Size: 0x8
    // Offset: 0x60
    ::System::Xml::Schema::SchemaAttDef* wildID;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::SchemaAttDef*) == 0x8);
    // private System.Collections.Hashtable IDs
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Hashtable* IDs;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Xml.Schema.IdRefNode idRefListHead
    // Size: 0x8
    // Offset: 0x70
    ::System::Xml::Schema::IdRefNode* idRefListHead;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::IdRefNode*) == 0x8);
    // private System.Xml.XmlQualifiedName contextQName
    // Size: 0x8
    // Offset: 0x78
    ::System::Xml::XmlQualifiedName* contextQName;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    // private System.String NsXs
    // Size: 0x8
    // Offset: 0x80
    ::StringW NsXs;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String NsXsi
    // Size: 0x8
    // Offset: 0x88
    ::StringW NsXsi;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String NsXmlNs
    // Size: 0x8
    // Offset: 0x90
    ::StringW NsXmlNs;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String NsXml
    // Size: 0x8
    // Offset: 0x98
    ::StringW NsXml;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.Schema.XmlSchemaObject partialValidationType
    // Size: 0x8
    // Offset: 0xA0
    ::System::Xml::Schema::XmlSchemaObject* partialValidationType;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObject*) == 0x8);
    // private System.Text.StringBuilder textValue
    // Size: 0x8
    // Offset: 0xA8
    ::System::Text::StringBuilder* textValue;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // private System.Xml.Schema.ValidationEventHandler eventHandler
    // Size: 0x8
    // Offset: 0xB0
    ::System::Xml::Schema::ValidationEventHandler* eventHandler;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::ValidationEventHandler*) == 0x8);
    // private System.Object validationEventSender
    // Size: 0x8
    // Offset: 0xB8
    ::Il2CppObject* validationEventSender;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Xml.XmlNameTable nameTable
    // Size: 0x8
    // Offset: 0xC0
    ::System::Xml::XmlNameTable* nameTable;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNameTable*) == 0x8);
    // private System.Xml.IXmlLineInfo positionInfo
    // Size: 0x8
    // Offset: 0xC8
    ::System::Xml::IXmlLineInfo* positionInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::IXmlLineInfo*) == 0x8);
    // private System.Xml.IXmlLineInfo dummyPositionInfo
    // Size: 0x8
    // Offset: 0xD0
    ::System::Xml::IXmlLineInfo* dummyPositionInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::IXmlLineInfo*) == 0x8);
    // private System.Xml.XmlResolver xmlResolver
    // Size: 0x8
    // Offset: 0xD8
    ::System::Xml::XmlResolver* xmlResolver;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlResolver*) == 0x8);
    // private System.Uri sourceUri
    // Size: 0x8
    // Offset: 0xE0
    ::System::Uri* sourceUri;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // private System.String sourceUriString
    // Size: 0x8
    // Offset: 0xE8
    ::StringW sourceUriString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.IXmlNamespaceResolver nsResolver
    // Size: 0x8
    // Offset: 0xF0
    ::System::Xml::IXmlNamespaceResolver* nsResolver;
    // Field size check
    static_assert(sizeof(::System::Xml::IXmlNamespaceResolver*) == 0x8);
    // private System.Xml.Schema.XmlSchemaContentProcessing processContents
    // Size: 0x4
    // Offset: 0xF8
    ::System::Xml::Schema::XmlSchemaContentProcessing processContents;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaContentProcessing) == 0x4);
    // Padding between fields: processContents and: xsiTypeString
    char __padding33[0x4] = {};
    // private System.String xsiTypeString
    // Size: 0x8
    // Offset: 0x100
    ::StringW xsiTypeString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String xsiNilString
    // Size: 0x8
    // Offset: 0x108
    ::StringW xsiNilString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String xsiSchemaLocationString
    // Size: 0x8
    // Offset: 0x110
    ::StringW xsiSchemaLocationString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String xsiNoNamespaceSchemaLocationString
    // Size: 0x8
    // Offset: 0x118
    ::StringW xsiNoNamespaceSchemaLocationString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.XmlCharType xmlCharType
    // Size: 0x8
    // Offset: 0x120
    ::System::Xml::XmlCharType xmlCharType;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlCharType) == 0x8);
    public:
    // Get static field: static private readonly System.Xml.Schema.XmlSchemaDatatype dtQName
    static ::System::Xml::Schema::XmlSchemaDatatype* _get_dtQName();
    // Set static field: static private readonly System.Xml.Schema.XmlSchemaDatatype dtQName
    static void _set_dtQName(::System::Xml::Schema::XmlSchemaDatatype* value);
    // Get static field: static private readonly System.Xml.Schema.XmlSchemaDatatype dtCDATA
    static ::System::Xml::Schema::XmlSchemaDatatype* _get_dtCDATA();
    // Set static field: static private readonly System.Xml.Schema.XmlSchemaDatatype dtCDATA
    static void _set_dtCDATA(::System::Xml::Schema::XmlSchemaDatatype* value);
    // Get static field: static private readonly System.Xml.Schema.XmlSchemaDatatype dtStringArray
    static ::System::Xml::Schema::XmlSchemaDatatype* _get_dtStringArray();
    // Set static field: static private readonly System.Xml.Schema.XmlSchemaDatatype dtStringArray
    static void _set_dtStringArray(::System::Xml::Schema::XmlSchemaDatatype* value);
    // Get static field: static private System.Xml.Schema.XmlSchemaParticle[] EmptyParticleArray
    static ::ArrayW<::System::Xml::Schema::XmlSchemaParticle*> _get_EmptyParticleArray();
    // Set static field: static private System.Xml.Schema.XmlSchemaParticle[] EmptyParticleArray
    static void _set_EmptyParticleArray(::ArrayW<::System::Xml::Schema::XmlSchemaParticle*> value);
    // Get static field: static private System.Xml.Schema.XmlSchemaAttribute[] EmptyAttributeArray
    static ::ArrayW<::System::Xml::Schema::XmlSchemaAttribute*> _get_EmptyAttributeArray();
    // Set static field: static private System.Xml.Schema.XmlSchemaAttribute[] EmptyAttributeArray
    static void _set_EmptyAttributeArray(::ArrayW<::System::Xml::Schema::XmlSchemaAttribute*> value);
    // Get static field: static System.Boolean[,] ValidStates
    static ::ArrayW<bool> _get_ValidStates();
    // Set static field: static System.Boolean[,] ValidStates
    static void _set_ValidStates(::ArrayW<bool> value);
    // Get static field: static private System.String[] MethodNames
    static ::ArrayW<::StringW> _get_MethodNames();
    // Set static field: static private System.String[] MethodNames
    static void _set_MethodNames(::ArrayW<::StringW> value);
    // Get instance field reference: private System.Xml.Schema.XmlSchemaSet schemaSet
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaSet*& dyn_schemaSet();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaValidationFlags validationFlags
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaValidationFlags& dyn_validationFlags();
    // Get instance field reference: private System.Int32 startIDConstraint
    [[deprecated("Use field access instead!")]] int& dyn_startIDConstraint();
    // Get instance field reference: private System.Boolean isRoot
    [[deprecated("Use field access instead!")]] bool& dyn_isRoot();
    // Get instance field reference: private System.Boolean rootHasSchema
    [[deprecated("Use field access instead!")]] bool& dyn_rootHasSchema();
    // Get instance field reference: private System.Boolean attrValid
    [[deprecated("Use field access instead!")]] bool& dyn_attrValid();
    // Get instance field reference: private System.Boolean checkEntity
    [[deprecated("Use field access instead!")]] bool& dyn_checkEntity();
    // Get instance field reference: private System.Xml.Schema.SchemaInfo compiledSchemaInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::SchemaInfo*& dyn_compiledSchemaInfo();
    // Get instance field reference: private System.Xml.IDtdInfo dtdSchemaInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::IDtdInfo*& dyn_dtdSchemaInfo();
    // Get instance field reference: private System.Collections.Hashtable validatedNamespaces
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_validatedNamespaces();
    // Get instance field reference: private System.Xml.HWStack validationStack
    [[deprecated("Use field access instead!")]] ::System::Xml::HWStack*& dyn_validationStack();
    // Get instance field reference: private System.Xml.Schema.ValidationState context
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::ValidationState*& dyn_context();
    // Get instance field reference: private System.Xml.Schema.ValidatorState currentState
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::ValidatorState& dyn_currentState();
    // Get instance field reference: private System.Collections.Hashtable attPresence
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_attPresence();
    // Get instance field reference: private System.Xml.Schema.SchemaAttDef wildID
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::SchemaAttDef*& dyn_wildID();
    // Get instance field reference: private System.Collections.Hashtable IDs
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_IDs();
    // Get instance field reference: private System.Xml.Schema.IdRefNode idRefListHead
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::IdRefNode*& dyn_idRefListHead();
    // Get instance field reference: private System.Xml.XmlQualifiedName contextQName
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlQualifiedName*& dyn_contextQName();
    // Get instance field reference: private System.String NsXs
    [[deprecated("Use field access instead!")]] ::StringW& dyn_NsXs();
    // Get instance field reference: private System.String NsXsi
    [[deprecated("Use field access instead!")]] ::StringW& dyn_NsXsi();
    // Get instance field reference: private System.String NsXmlNs
    [[deprecated("Use field access instead!")]] ::StringW& dyn_NsXmlNs();
    // Get instance field reference: private System.String NsXml
    [[deprecated("Use field access instead!")]] ::StringW& dyn_NsXml();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObject partialValidationType
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaObject*& dyn_partialValidationType();
    // Get instance field reference: private System.Text.StringBuilder textValue
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn_textValue();
    // Get instance field reference: private System.Xml.Schema.ValidationEventHandler eventHandler
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::ValidationEventHandler*& dyn_eventHandler();
    // Get instance field reference: private System.Object validationEventSender
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_validationEventSender();
    // Get instance field reference: private System.Xml.XmlNameTable nameTable
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNameTable*& dyn_nameTable();
    // Get instance field reference: private System.Xml.IXmlLineInfo positionInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::IXmlLineInfo*& dyn_positionInfo();
    // Get instance field reference: private System.Xml.IXmlLineInfo dummyPositionInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::IXmlLineInfo*& dyn_dummyPositionInfo();
    // Get instance field reference: private System.Xml.XmlResolver xmlResolver
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlResolver*& dyn_xmlResolver();
    // Get instance field reference: private System.Uri sourceUri
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn_sourceUri();
    // Get instance field reference: private System.String sourceUriString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_sourceUriString();
    // Get instance field reference: private System.Xml.IXmlNamespaceResolver nsResolver
    [[deprecated("Use field access instead!")]] ::System::Xml::IXmlNamespaceResolver*& dyn_nsResolver();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaContentProcessing processContents
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaContentProcessing& dyn_processContents();
    // Get instance field reference: private System.String xsiTypeString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_xsiTypeString();
    // Get instance field reference: private System.String xsiNilString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_xsiNilString();
    // Get instance field reference: private System.String xsiSchemaLocationString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_xsiSchemaLocationString();
    // Get instance field reference: private System.String xsiNoNamespaceSchemaLocationString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_xsiNoNamespaceSchemaLocationString();
    // Get instance field reference: private System.Xml.XmlCharType xmlCharType
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlCharType& dyn_xmlCharType();
    // public System.Void set_XmlResolver(System.Xml.XmlResolver value)
    // Offset: 0xF38634
    void set_XmlResolver(::System::Xml::XmlResolver* value);
    // public System.Void set_LineInfoProvider(System.Xml.IXmlLineInfo value)
    // Offset: 0xF3863C
    void set_LineInfoProvider(::System::Xml::IXmlLineInfo* value);
    // public System.Void set_SourceUri(System.Uri value)
    // Offset: 0xF38654
    void set_SourceUri(::System::Uri* value);
    // public System.Void set_ValidationEventSender(System.Object value)
    // Offset: 0xF38694
    void set_ValidationEventSender(::Il2CppObject* value);
    // System.Xml.Schema.XmlSchemaSet get_SchemaSet()
    // Offset: 0xF3E88C
    ::System::Xml::Schema::XmlSchemaSet* get_SchemaSet();
    // System.Xml.Schema.XmlSchemaValidationFlags get_ValidationFlags()
    // Offset: 0xF3E894
    ::System::Xml::Schema::XmlSchemaValidationFlags get_ValidationFlags();
    // System.Xml.Schema.XmlSchemaContentType get_CurrentContentType()
    // Offset: 0xF3E89C
    ::System::Xml::Schema::XmlSchemaContentType get_CurrentContentType();
    // private System.Boolean get_StrictlyAssessed()
    // Offset: 0xF3E8E4
    bool get_StrictlyAssessed();
    // private System.Boolean get_HasSchema()
    // Offset: 0xF3E928
    bool get_HasSchema();
    // private System.Boolean get_HasIdentityConstraints()
    // Offset: 0xF3C18C
    bool get_HasIdentityConstraints();
    // System.Boolean get_ProcessIdentityConstraints()
    // Offset: 0xF41840
    bool get_ProcessIdentityConstraints();
    // System.Boolean get_ReportValidationWarnings()
    // Offset: 0xF42838
    bool get_ReportValidationWarnings();
    // System.Boolean get_ProcessSchemaHints()
    // Offset: 0xF38624
    bool get_ProcessSchemaHints();
    // public System.Void add_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler value)
    // Offset: 0xF3869C
    void add_ValidationEventHandler(::System::Xml::Schema::ValidationEventHandler* value);
    // public System.Void remove_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler value)
    // Offset: 0xF38718
    void remove_ValidationEventHandler(::System::Xml::Schema::ValidationEventHandler* value);
    // public System.Void .ctor(System.Xml.XmlNameTable nameTable, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.IXmlNamespaceResolver namespaceResolver, System.Xml.Schema.XmlSchemaValidationFlags validationFlags)
    // Offset: 0xF37E74
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaValidator* New_ctor(::System::Xml::XmlNameTable* nameTable, ::System::Xml::Schema::XmlSchemaSet* schemas, ::System::Xml::IXmlNamespaceResolver* namespaceResolver, ::System::Xml::Schema::XmlSchemaValidationFlags validationFlags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaValidator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaValidator*, creationType>(nameTable, schemas, namespaceResolver, validationFlags)));
    }
    // static private System.Void .cctor()
    // Offset: 0xF43178
    static void _cctor();
    // private System.Void Init()
    // Offset: 0xF38058
    void Init();
    // private System.Void Reset()
    // Offset: 0xF384C4
    void Reset();
    // public System.Void AddSchema(System.Xml.Schema.XmlSchema schema)
    // Offset: 0xF38794
    void AddSchema(::System::Xml::Schema::XmlSchema* schema);
    // public System.Void Initialize()
    // Offset: 0xF38F54
    void Initialize();
    // public System.Void Initialize(System.Xml.Schema.XmlSchemaObject partialValidationType)
    // Offset: 0xF390CC
    void Initialize(::System::Xml::Schema::XmlSchemaObject* partialValidationType);
    // public System.Void ValidateElement(System.String localName, System.String namespaceUri, System.Xml.Schema.XmlSchemaInfo schemaInfo, System.String xsiType, System.String xsiNil, System.String xsiSchemaLocation, System.String xsiNoNamespaceSchemaLocation)
    // Offset: 0xF393AC
    void ValidateElement(::StringW localName, ::StringW namespaceUri, ::System::Xml::Schema::XmlSchemaInfo* schemaInfo, ::StringW xsiType, ::StringW xsiNil, ::StringW xsiSchemaLocation, ::StringW xsiNoNamespaceSchemaLocation);
    // public System.Object ValidateAttribute(System.String localName, System.String namespaceUri, System.Xml.Schema.XmlValueGetter attributeValue, System.Xml.Schema.XmlSchemaInfo schemaInfo)
    // Offset: 0xF3AEB8
    ::Il2CppObject* ValidateAttribute(::StringW localName, ::StringW namespaceUri, ::System::Xml::Schema::XmlValueGetter* attributeValue, ::System::Xml::Schema::XmlSchemaInfo* schemaInfo);
    // private System.Object ValidateAttribute(System.String lName, System.String ns, System.Xml.Schema.XmlValueGetter attributeValueGetter, System.String attributeStringValue, System.Xml.Schema.XmlSchemaInfo schemaInfo)
    // Offset: 0xF3AF1C
    ::Il2CppObject* ValidateAttribute(::StringW lName, ::StringW ns, ::System::Xml::Schema::XmlValueGetter* attributeValueGetter, ::StringW attributeStringValue, ::System::Xml::Schema::XmlSchemaInfo* schemaInfo);
    // public System.Void ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo schemaInfo)
    // Offset: 0xF3C470
    void ValidateEndOfAttributes(::System::Xml::Schema::XmlSchemaInfo* schemaInfo);
    // public System.Void ValidateText(System.Xml.Schema.XmlValueGetter elementValue)
    // Offset: 0xF3C71C
    void ValidateText(::System::Xml::Schema::XmlValueGetter* elementValue);
    // private System.Void ValidateText(System.String elementStringValue, System.Xml.Schema.XmlValueGetter elementValueGetter)
    // Offset: 0xF3C780
    void ValidateText(::StringW elementStringValue, ::System::Xml::Schema::XmlValueGetter* elementValueGetter);
    // public System.Void ValidateWhitespace(System.Xml.Schema.XmlValueGetter elementValue)
    // Offset: 0xF3D18C
    void ValidateWhitespace(::System::Xml::Schema::XmlValueGetter* elementValue);
    // private System.Void ValidateWhitespace(System.String elementStringValue, System.Xml.Schema.XmlValueGetter elementValueGetter)
    // Offset: 0xF3D1F0
    void ValidateWhitespace(::StringW elementStringValue, ::System::Xml::Schema::XmlValueGetter* elementValueGetter);
    // public System.Object ValidateEndElement(System.Xml.Schema.XmlSchemaInfo schemaInfo)
    // Offset: 0xF3D3E4
    ::Il2CppObject* ValidateEndElement(::System::Xml::Schema::XmlSchemaInfo* schemaInfo);
    // public System.Void SkipToEndElement(System.Xml.Schema.XmlSchemaInfo schemaInfo)
    // Offset: 0xF3D944
    void SkipToEndElement(::System::Xml::Schema::XmlSchemaInfo* schemaInfo);
    // public System.Void EndValidation()
    // Offset: 0xF3DCB8
    void EndValidation();
    // System.Void GetUnspecifiedDefaultAttributes(System.Collections.ArrayList defaultAttributes, System.Boolean createNodeData)
    // Offset: 0xF3DEAC
    void GetUnspecifiedDefaultAttributes(::System::Collections::ArrayList* defaultAttributes, bool createNodeData);
    // System.Void SetDtdSchemaInfo(System.Xml.IDtdInfo dtdSchemaInfo)
    // Offset: 0xF3E8D4
    void SetDtdSchemaInfo(::System::Xml::IDtdInfo* dtdSchemaInfo);
    // System.String GetConcatenatedValue()
    // Offset: 0xF3E97C
    ::StringW GetConcatenatedValue();
    // private System.Object InternalValidateEndElement(System.Xml.Schema.XmlSchemaInfo schemaInfo, System.Object typedValue)
    // Offset: 0xF3D3EC
    ::Il2CppObject* InternalValidateEndElement(::System::Xml::Schema::XmlSchemaInfo* schemaInfo, ::Il2CppObject* typedValue);
    // private System.Void ProcessSchemaLocations(System.String xsiSchemaLocation, System.String xsiNoNamespaceSchemaLocation)
    // Offset: 0xF3A0F8
    void ProcessSchemaLocations(::StringW xsiSchemaLocation, ::StringW xsiNoNamespaceSchemaLocation);
    // private System.Object ValidateElementContext(System.Xml.XmlQualifiedName elementName, out System.Boolean invalidElementInContext)
    // Offset: 0xF39A38
    ::Il2CppObject* ValidateElementContext(::System::Xml::XmlQualifiedName* elementName, ByRef<bool> invalidElementInContext);
    // private System.Xml.Schema.XmlSchemaElement GetSubstitutionGroupHead(System.Xml.XmlQualifiedName member)
    // Offset: 0xF407D8
    ::System::Xml::Schema::XmlSchemaElement* GetSubstitutionGroupHead(::System::Xml::XmlQualifiedName* member);
    // private System.Object ValidateAtomicValue(System.String stringValue, out System.Xml.Schema.XmlSchemaSimpleType memberType)
    // Offset: 0xF3E99C
    ::Il2CppObject* ValidateAtomicValue(::StringW stringValue, ByRef<::System::Xml::Schema::XmlSchemaSimpleType*> memberType);
    // private System.Object ValidateAtomicValue(System.Object parsedValue, out System.Xml.Schema.XmlSchemaSimpleType memberType)
    // Offset: 0xF3EC54
    ::Il2CppObject* ValidateAtomicValue(::Il2CppObject* parsedValue, ByRef<::System::Xml::Schema::XmlSchemaSimpleType*> memberType);
    // private System.String GetTypeName(System.Xml.Schema.SchemaDeclBase decl)
    // Offset: 0xF41770
    ::StringW GetTypeName(::System::Xml::Schema::SchemaDeclBase* decl);
    // private System.Void SaveTextValue(System.Object value)
    // Offset: 0xF3CBB4
    void SaveTextValue(::Il2CppObject* value);
    // private System.Void Push(System.Xml.XmlQualifiedName elementName)
    // Offset: 0xF38364
    void Push(::System::Xml::XmlQualifiedName* elementName);
    // private System.Void Pop()
    // Offset: 0xF3DB98
    void Pop();
    // private System.Xml.Schema.SchemaElementDecl FastGetElementDecl(System.Xml.XmlQualifiedName elementName, System.Object particle)
    // Offset: 0xF39E9C
    ::System::Xml::Schema::SchemaElementDecl* FastGetElementDecl(::System::Xml::XmlQualifiedName* elementName, ::Il2CppObject* particle);
    // private System.Xml.Schema.SchemaElementDecl CheckXsiTypeAndNil(System.Xml.Schema.SchemaElementDecl elementDecl, System.String xsiType, System.String xsiNil, ref System.Boolean declFound)
    // Offset: 0xF3A49C
    ::System::Xml::Schema::SchemaElementDecl* CheckXsiTypeAndNil(::System::Xml::Schema::SchemaElementDecl* elementDecl, ::StringW xsiType, ::StringW xsiNil, ByRef<bool> declFound);
    // private System.Void ThrowDeclNotFoundWarningOrError(System.Boolean declFound)
    // Offset: 0xF3AAF0
    void ThrowDeclNotFoundWarningOrError(bool declFound);
    // private System.Void CheckElementProperties()
    // Offset: 0xF3AC6C
    void CheckElementProperties();
    // private System.Void ValidateStartElementIdentityConstraints()
    // Offset: 0xF3AD2C
    void ValidateStartElementIdentityConstraints();
    // private System.Xml.Schema.SchemaAttDef CheckIsXmlAttribute(System.Xml.XmlQualifiedName attQName)
    // Offset: 0xF3BAE8
    ::System::Xml::Schema::SchemaAttDef* CheckIsXmlAttribute(::System::Xml::XmlQualifiedName* attQName);
    // private System.Void AddXmlNamespaceSchema()
    // Offset: 0xF42040
    void AddXmlNamespaceSchema();
    // System.Object CheckMixedValueConstraint(System.String elementValue)
    // Offset: 0xF3EFAC
    ::Il2CppObject* CheckMixedValueConstraint(::StringW elementValue);
    // private System.Void LoadSchema(System.String uri, System.String url)
    // Offset: 0xF401F4
    void LoadSchema(::StringW uri, ::StringW url);
    // System.Void RecompileSchemaSet()
    // Offset: 0xF38560
    void RecompileSchemaSet();
    // private System.Void ProcessTokenizedType(System.Xml.XmlTokenizedType ttype, System.String name, System.Boolean attrValue)
    // Offset: 0xF422B4
    void ProcessTokenizedType(::System::Xml::XmlTokenizedType ttype, ::StringW name, bool attrValue);
    // private System.Object CheckAttributeValue(System.Object value, System.Xml.Schema.SchemaAttDef attdef)
    // Offset: 0xF3BD5C
    ::Il2CppObject* CheckAttributeValue(::Il2CppObject* value, ::System::Xml::Schema::SchemaAttDef* attdef);
    // private System.Object CheckElementValue(System.String stringValue)
    // Offset: 0xF414F4
    ::Il2CppObject* CheckElementValue(::StringW stringValue);
    // private System.Void CheckTokenizedTypes(System.Xml.Schema.XmlSchemaDatatype dtype, System.Object typedValue, System.Boolean attrValue)
    // Offset: 0xF3BFF4
    void CheckTokenizedTypes(::System::Xml::Schema::XmlSchemaDatatype* dtype, ::Il2CppObject* typedValue, bool attrValue);
    // private System.Object FindId(System.String name)
    // Offset: 0xF42568
    ::Il2CppObject* FindId(::StringW name);
    // private System.Void CheckForwardRefs()
    // Offset: 0xF3DDB8
    void CheckForwardRefs();
    // private System.Void CheckStateTransition(System.Xml.Schema.ValidatorState toState, System.String methodName)
    // Offset: 0xF39720
    void CheckStateTransition(::System::Xml::Schema::ValidatorState toState, ::StringW methodName);
    // private System.Void ClearPSVI()
    // Offset: 0xF399E8
    void ClearPSVI();
    // private System.Void CheckRequiredAttributes(System.Xml.Schema.SchemaElementDecl currentElementDecl)
    // Offset: 0xF3C54C
    void CheckRequiredAttributes(::System::Xml::Schema::SchemaElementDecl* currentElementDecl);
    // private System.Xml.Schema.XmlSchemaElement GetSchemaElement()
    // Offset: 0xF3AD98
    ::System::Xml::Schema::XmlSchemaElement* GetSchemaElement();
    // System.String GetDefaultAttributePrefix(System.String attributeNS)
    // Offset: 0xF3E4A8
    ::StringW GetDefaultAttributePrefix(::StringW attributeNS);
    // private System.Void AddIdentityConstraints()
    // Offset: 0xF4184C
    void AddIdentityConstraints();
    // private System.Void ElementIdentityConstraints()
    // Offset: 0xF41C6C
    void ElementIdentityConstraints();
    // private System.Void AttributeIdentityConstraints(System.String name, System.String ns, System.Object obj, System.String sobj, System.Xml.Schema.XmlSchemaDatatype datatype)
    // Offset: 0xF3C1AC
    void AttributeIdentityConstraints(::StringW name, ::StringW ns, ::Il2CppObject* obj, ::StringW sobj, ::System::Xml::Schema::XmlSchemaDatatype* datatype);
    // private System.Void EndElementIdentityConstraints(System.Object typedValue, System.String stringValue, System.Xml.Schema.XmlSchemaDatatype datatype)
    // Offset: 0xF3F590
    void EndElementIdentityConstraints(::Il2CppObject* typedValue, ::StringW stringValue, ::System::Xml::Schema::XmlSchemaDatatype* datatype);
    // static System.Void ElementValidationError(System.Xml.XmlQualifiedName name, System.Xml.Schema.ValidationState context, System.Xml.Schema.ValidationEventHandler eventHandler, System.Object sender, System.String sourceUri, System.Int32 lineNo, System.Int32 linePos, System.Xml.Schema.XmlSchemaSet schemaSet)
    // Offset: 0xF40CC4
    static void ElementValidationError(::System::Xml::XmlQualifiedName* name, ::System::Xml::Schema::ValidationState* context, ::System::Xml::Schema::ValidationEventHandler* eventHandler, ::Il2CppObject* sender, ::StringW sourceUri, int lineNo, int linePos, ::System::Xml::Schema::XmlSchemaSet* schemaSet);
    // static System.Void CompleteValidationError(System.Xml.Schema.ValidationState context, System.Xml.Schema.ValidationEventHandler eventHandler, System.Object sender, System.String sourceUri, System.Int32 lineNo, System.Int32 linePos, System.Xml.Schema.XmlSchemaSet schemaSet)
    // Offset: 0xF3F094
    static void CompleteValidationError(::System::Xml::Schema::ValidationState* context, ::System::Xml::Schema::ValidationEventHandler* eventHandler, ::Il2CppObject* sender, ::StringW sourceUri, int lineNo, int linePos, ::System::Xml::Schema::XmlSchemaSet* schemaSet);
    // static System.String PrintExpectedElements(System.Collections.ArrayList expected, System.Boolean getParticles)
    // Offset: 0xF3CD40
    static ::StringW PrintExpectedElements(::System::Collections::ArrayList* expected, bool getParticles);
    // static private System.String PrintNames(System.Collections.ArrayList expected)
    // Offset: 0xF42DA8
    static ::StringW PrintNames(::System::Collections::ArrayList* expected);
    // static private System.Void PrintNamesWithNS(System.Collections.ArrayList expected, System.Text.StringBuilder builder)
    // Offset: 0xF4290C
    static void PrintNamesWithNS(::System::Collections::ArrayList* expected, ::System::Text::StringBuilder* builder);
    // static private System.Void EnumerateAny(System.Text.StringBuilder builder, System.String namespaces)
    // Offset: 0xF42F30
    static void EnumerateAny(::System::Text::StringBuilder* builder, ::StringW namespaces);
    // static System.String QNameString(System.String localName, System.String ns)
    // Offset: 0xF3CB30
    static ::StringW QNameString(::StringW localName, ::StringW ns);
    // static System.String BuildElementName(System.Xml.XmlQualifiedName qname)
    // Offset: 0xF40A1C
    static ::StringW BuildElementName(::System::Xml::XmlQualifiedName* qname);
    // static System.String BuildElementName(System.String localName, System.String ns)
    // Offset: 0xF3CC00
    static ::StringW BuildElementName(::StringW localName, ::StringW ns);
    // private System.Void ProcessEntity(System.String name)
    // Offset: 0xF42584
    void ProcessEntity(::StringW name);
    // private System.Void SendValidationEvent(System.String code)
    // Offset: 0xF417DC
    void SendValidationEvent(::StringW code);
    // private System.Void SendValidationEvent(System.String code, System.String[] args)
    // Offset: 0xF3BBB4
    void SendValidationEvent(::StringW code, ::ArrayW<::StringW> args);
    // private System.Void SendValidationEvent(System.String code, System.String arg)
    // Offset: 0xF3B954
    void SendValidationEvent(::StringW code, ::StringW arg);
    // private System.Void SendValidationEvent(System.String code, System.String arg1, System.String arg2)
    // Offset: 0xF40A8C
    void SendValidationEvent(::StringW code, ::StringW arg1, ::StringW arg2);
    // private System.Void SendValidationEvent(System.String code, System.String[] args, System.Exception innerException, System.Xml.Schema.XmlSeverityType severity)
    // Offset: 0xF420CC
    void SendValidationEvent(::StringW code, ::ArrayW<::StringW> args, ::System::Exception* innerException, ::System::Xml::Schema::XmlSeverityType severity);
    // private System.Void SendValidationEvent(System.String code, System.String[] args, System.Exception innerException)
    // Offset: 0xF38DA8
    void SendValidationEvent(::StringW code, ::ArrayW<::StringW> args, ::System::Exception* innerException);
    // private System.Void SendValidationEvent(System.Xml.Schema.XmlSchemaValidationException e)
    // Offset: 0xF42844
    void SendValidationEvent(::System::Xml::Schema::XmlSchemaValidationException* e);
    // private System.Void SendValidationEvent(System.Xml.Schema.XmlSchemaException e)
    // Offset: 0xF40720
    void SendValidationEvent(::System::Xml::Schema::XmlSchemaException* e);
    // private System.Void SendValidationEvent(System.String code, System.String msg, System.Xml.Schema.XmlSeverityType severity)
    // Offset: 0xF38BE8
    void SendValidationEvent(::StringW code, ::StringW msg, ::System::Xml::Schema::XmlSeverityType severity);
    // private System.Void SendValidationEvent(System.Xml.Schema.XmlSchemaValidationException e, System.Xml.Schema.XmlSeverityType severity)
    // Offset: 0xF42718
    void SendValidationEvent(::System::Xml::Schema::XmlSchemaValidationException* e, ::System::Xml::Schema::XmlSeverityType severity);
    // static System.Void SendValidationEvent(System.Xml.Schema.ValidationEventHandler eventHandler, System.Object sender, System.Xml.Schema.XmlSchemaValidationException e, System.Xml.Schema.XmlSeverityType severity)
    // Offset: 0xF4284C
    static void SendValidationEvent(::System::Xml::Schema::ValidationEventHandler* eventHandler, ::Il2CppObject* sender, ::System::Xml::Schema::XmlSchemaValidationException* e, ::System::Xml::Schema::XmlSeverityType severity);
  }; // System.Xml.Schema.XmlSchemaValidator
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaValidator), 288 + sizeof(::System::Xml::XmlCharType)> __System_Xml_Schema_XmlSchemaValidatorSizeCheck;
  static_assert(sizeof(XmlSchemaValidator) == 0x128);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::set_XmlResolver
// Il2CppName: set_XmlResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::XmlResolver*)>(&System::Xml::Schema::XmlSchemaValidator::set_XmlResolver)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "set_XmlResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::set_LineInfoProvider
// Il2CppName: set_LineInfoProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::IXmlLineInfo*)>(&System::Xml::Schema::XmlSchemaValidator::set_LineInfoProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "IXmlLineInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "set_LineInfoProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::set_SourceUri
// Il2CppName: set_SourceUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Uri*)>(&System::Xml::Schema::XmlSchemaValidator::set_SourceUri)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "set_SourceUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::set_ValidationEventSender
// Il2CppName: set_ValidationEventSender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::Il2CppObject*)>(&System::Xml::Schema::XmlSchemaValidator::set_ValidationEventSender)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "set_ValidationEventSender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::get_SchemaSet
// Il2CppName: get_SchemaSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaSet* (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::get_SchemaSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "get_SchemaSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::get_ValidationFlags
// Il2CppName: get_ValidationFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaValidationFlags (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::get_ValidationFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "get_ValidationFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::get_CurrentContentType
// Il2CppName: get_CurrentContentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaContentType (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::get_CurrentContentType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "get_CurrentContentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::get_StrictlyAssessed
// Il2CppName: get_StrictlyAssessed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::get_StrictlyAssessed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "get_StrictlyAssessed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::get_HasSchema
// Il2CppName: get_HasSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::get_HasSchema)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "get_HasSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::get_HasIdentityConstraints
// Il2CppName: get_HasIdentityConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::get_HasIdentityConstraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "get_HasIdentityConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::get_ProcessIdentityConstraints
// Il2CppName: get_ProcessIdentityConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::get_ProcessIdentityConstraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "get_ProcessIdentityConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::get_ReportValidationWarnings
// Il2CppName: get_ReportValidationWarnings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::get_ReportValidationWarnings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "get_ReportValidationWarnings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::get_ProcessSchemaHints
// Il2CppName: get_ProcessSchemaHints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::get_ProcessSchemaHints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "get_ProcessSchemaHints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::add_ValidationEventHandler
// Il2CppName: add_ValidationEventHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::Schema::ValidationEventHandler*)>(&System::Xml::Schema::XmlSchemaValidator::add_ValidationEventHandler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "add_ValidationEventHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::remove_ValidationEventHandler
// Il2CppName: remove_ValidationEventHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::Schema::ValidationEventHandler*)>(&System::Xml::Schema::XmlSchemaValidator::remove_ValidationEventHandler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "remove_ValidationEventHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::Schema::XmlSchemaValidator::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::AddSchema
// Il2CppName: AddSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchemaValidator::AddSchema)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "AddSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::Schema::XmlSchemaObject*)>(&System::Xml::Schema::XmlSchemaValidator::Initialize)> {
  static const MethodInfo* get() {
    static auto* partialValidationType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{partialValidationType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ValidateElement
// Il2CppName: ValidateElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::StringW, ::StringW, ::System::Xml::Schema::XmlSchemaInfo*, ::StringW, ::StringW, ::StringW, ::StringW)>(&System::Xml::Schema::XmlSchemaValidator::ValidateElement)> {
  static const MethodInfo* get() {
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* schemaInfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaInfo")->byval_arg;
    static auto* xsiType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* xsiNil = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* xsiSchemaLocation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* xsiNoNamespaceSchemaLocation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ValidateElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localName, namespaceUri, schemaInfo, xsiType, xsiNil, xsiSchemaLocation, xsiNoNamespaceSchemaLocation});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ValidateAttribute
// Il2CppName: ValidateAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlSchemaValidator::*)(::StringW, ::StringW, ::System::Xml::Schema::XmlValueGetter*, ::System::Xml::Schema::XmlSchemaInfo*)>(&System::Xml::Schema::XmlSchemaValidator::ValidateAttribute)> {
  static const MethodInfo* get() {
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributeValue = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlValueGetter")->byval_arg;
    static auto* schemaInfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ValidateAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localName, namespaceUri, attributeValue, schemaInfo});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ValidateAttribute
// Il2CppName: ValidateAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlSchemaValidator::*)(::StringW, ::StringW, ::System::Xml::Schema::XmlValueGetter*, ::StringW, ::System::Xml::Schema::XmlSchemaInfo*)>(&System::Xml::Schema::XmlSchemaValidator::ValidateAttribute)> {
  static const MethodInfo* get() {
    static auto* lName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributeValueGetter = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlValueGetter")->byval_arg;
    static auto* attributeStringValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* schemaInfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ValidateAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lName, ns, attributeValueGetter, attributeStringValue, schemaInfo});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ValidateEndOfAttributes
// Il2CppName: ValidateEndOfAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::Schema::XmlSchemaInfo*)>(&System::Xml::Schema::XmlSchemaValidator::ValidateEndOfAttributes)> {
  static const MethodInfo* get() {
    static auto* schemaInfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ValidateEndOfAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaInfo});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ValidateText
// Il2CppName: ValidateText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::Schema::XmlValueGetter*)>(&System::Xml::Schema::XmlSchemaValidator::ValidateText)> {
  static const MethodInfo* get() {
    static auto* elementValue = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlValueGetter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ValidateText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementValue});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ValidateText
// Il2CppName: ValidateText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::StringW, ::System::Xml::Schema::XmlValueGetter*)>(&System::Xml::Schema::XmlSchemaValidator::ValidateText)> {
  static const MethodInfo* get() {
    static auto* elementStringValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* elementValueGetter = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlValueGetter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ValidateText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementStringValue, elementValueGetter});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ValidateWhitespace
// Il2CppName: ValidateWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::Schema::XmlValueGetter*)>(&System::Xml::Schema::XmlSchemaValidator::ValidateWhitespace)> {
  static const MethodInfo* get() {
    static auto* elementValue = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlValueGetter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ValidateWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementValue});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ValidateWhitespace
// Il2CppName: ValidateWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::StringW, ::System::Xml::Schema::XmlValueGetter*)>(&System::Xml::Schema::XmlSchemaValidator::ValidateWhitespace)> {
  static const MethodInfo* get() {
    static auto* elementStringValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* elementValueGetter = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlValueGetter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ValidateWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementStringValue, elementValueGetter});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ValidateEndElement
// Il2CppName: ValidateEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::Schema::XmlSchemaInfo*)>(&System::Xml::Schema::XmlSchemaValidator::ValidateEndElement)> {
  static const MethodInfo* get() {
    static auto* schemaInfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ValidateEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaInfo});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::SkipToEndElement
// Il2CppName: SkipToEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::Schema::XmlSchemaInfo*)>(&System::Xml::Schema::XmlSchemaValidator::SkipToEndElement)> {
  static const MethodInfo* get() {
    static auto* schemaInfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "SkipToEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaInfo});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::EndValidation
// Il2CppName: EndValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::EndValidation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "EndValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::GetUnspecifiedDefaultAttributes
// Il2CppName: GetUnspecifiedDefaultAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Collections::ArrayList*, bool)>(&System::Xml::Schema::XmlSchemaValidator::GetUnspecifiedDefaultAttributes)> {
  static const MethodInfo* get() {
    static auto* defaultAttributes = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    static auto* createNodeData = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "GetUnspecifiedDefaultAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{defaultAttributes, createNodeData});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::SetDtdSchemaInfo
// Il2CppName: SetDtdSchemaInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::IDtdInfo*)>(&System::Xml::Schema::XmlSchemaValidator::SetDtdSchemaInfo)> {
  static const MethodInfo* get() {
    static auto* dtdSchemaInfo = &::il2cpp_utils::GetClassFromName("System.Xml", "IDtdInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "SetDtdSchemaInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dtdSchemaInfo});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::GetConcatenatedValue
// Il2CppName: GetConcatenatedValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::GetConcatenatedValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "GetConcatenatedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::InternalValidateEndElement
// Il2CppName: InternalValidateEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::Schema::XmlSchemaInfo*, ::Il2CppObject*)>(&System::Xml::Schema::XmlSchemaValidator::InternalValidateEndElement)> {
  static const MethodInfo* get() {
    static auto* schemaInfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaInfo")->byval_arg;
    static auto* typedValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "InternalValidateEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaInfo, typedValue});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ProcessSchemaLocations
// Il2CppName: ProcessSchemaLocations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::StringW, ::StringW)>(&System::Xml::Schema::XmlSchemaValidator::ProcessSchemaLocations)> {
  static const MethodInfo* get() {
    static auto* xsiSchemaLocation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* xsiNoNamespaceSchemaLocation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ProcessSchemaLocations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xsiSchemaLocation, xsiNoNamespaceSchemaLocation});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ValidateElementContext
// Il2CppName: ValidateElementContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::XmlQualifiedName*, ByRef<bool>)>(&System::Xml::Schema::XmlSchemaValidator::ValidateElementContext)> {
  static const MethodInfo* get() {
    static auto* elementName = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    static auto* invalidElementInContext = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ValidateElementContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementName, invalidElementInContext});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::GetSubstitutionGroupHead
// Il2CppName: GetSubstitutionGroupHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaElement* (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XmlSchemaValidator::GetSubstitutionGroupHead)> {
  static const MethodInfo* get() {
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "GetSubstitutionGroupHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{member});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ValidateAtomicValue
// Il2CppName: ValidateAtomicValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlSchemaValidator::*)(::StringW, ByRef<::System::Xml::Schema::XmlSchemaSimpleType*>)>(&System::Xml::Schema::XmlSchemaValidator::ValidateAtomicValue)> {
  static const MethodInfo* get() {
    static auto* stringValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* memberType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ValidateAtomicValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stringValue, memberType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ValidateAtomicValue
// Il2CppName: ValidateAtomicValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlSchemaValidator::*)(::Il2CppObject*, ByRef<::System::Xml::Schema::XmlSchemaSimpleType*>)>(&System::Xml::Schema::XmlSchemaValidator::ValidateAtomicValue)> {
  static const MethodInfo* get() {
    static auto* parsedValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* memberType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ValidateAtomicValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parsedValue, memberType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::GetTypeName
// Il2CppName: GetTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::Schema::SchemaDeclBase*)>(&System::Xml::Schema::XmlSchemaValidator::GetTypeName)> {
  static const MethodInfo* get() {
    static auto* decl = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaDeclBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "GetTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{decl});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::SaveTextValue
// Il2CppName: SaveTextValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::Il2CppObject*)>(&System::Xml::Schema::XmlSchemaValidator::SaveTextValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "SaveTextValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XmlSchemaValidator::Push)> {
  static const MethodInfo* get() {
    static auto* elementName = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementName});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::Pop
// Il2CppName: Pop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::Pop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "Pop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::FastGetElementDecl
// Il2CppName: FastGetElementDecl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaElementDecl* (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::XmlQualifiedName*, ::Il2CppObject*)>(&System::Xml::Schema::XmlSchemaValidator::FastGetElementDecl)> {
  static const MethodInfo* get() {
    static auto* elementName = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    static auto* particle = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "FastGetElementDecl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementName, particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::CheckXsiTypeAndNil
// Il2CppName: CheckXsiTypeAndNil
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaElementDecl* (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::Schema::SchemaElementDecl*, ::StringW, ::StringW, ByRef<bool>)>(&System::Xml::Schema::XmlSchemaValidator::CheckXsiTypeAndNil)> {
  static const MethodInfo* get() {
    static auto* elementDecl = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaElementDecl")->byval_arg;
    static auto* xsiType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* xsiNil = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* declFound = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "CheckXsiTypeAndNil", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementDecl, xsiType, xsiNil, declFound});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ThrowDeclNotFoundWarningOrError
// Il2CppName: ThrowDeclNotFoundWarningOrError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(bool)>(&System::Xml::Schema::XmlSchemaValidator::ThrowDeclNotFoundWarningOrError)> {
  static const MethodInfo* get() {
    static auto* declFound = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ThrowDeclNotFoundWarningOrError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{declFound});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::CheckElementProperties
// Il2CppName: CheckElementProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::CheckElementProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "CheckElementProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ValidateStartElementIdentityConstraints
// Il2CppName: ValidateStartElementIdentityConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::ValidateStartElementIdentityConstraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ValidateStartElementIdentityConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::CheckIsXmlAttribute
// Il2CppName: CheckIsXmlAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaAttDef* (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XmlSchemaValidator::CheckIsXmlAttribute)> {
  static const MethodInfo* get() {
    static auto* attQName = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "CheckIsXmlAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attQName});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::AddXmlNamespaceSchema
// Il2CppName: AddXmlNamespaceSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::AddXmlNamespaceSchema)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "AddXmlNamespaceSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::CheckMixedValueConstraint
// Il2CppName: CheckMixedValueConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlSchemaValidator::*)(::StringW)>(&System::Xml::Schema::XmlSchemaValidator::CheckMixedValueConstraint)> {
  static const MethodInfo* get() {
    static auto* elementValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "CheckMixedValueConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementValue});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::LoadSchema
// Il2CppName: LoadSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::StringW, ::StringW)>(&System::Xml::Schema::XmlSchemaValidator::LoadSchema)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* url = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "LoadSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri, url});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::RecompileSchemaSet
// Il2CppName: RecompileSchemaSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::RecompileSchemaSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "RecompileSchemaSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ProcessTokenizedType
// Il2CppName: ProcessTokenizedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::XmlTokenizedType, ::StringW, bool)>(&System::Xml::Schema::XmlSchemaValidator::ProcessTokenizedType)> {
  static const MethodInfo* get() {
    static auto* ttype = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTokenizedType")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attrValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ProcessTokenizedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ttype, name, attrValue});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::CheckAttributeValue
// Il2CppName: CheckAttributeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlSchemaValidator::*)(::Il2CppObject*, ::System::Xml::Schema::SchemaAttDef*)>(&System::Xml::Schema::XmlSchemaValidator::CheckAttributeValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* attdef = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaAttDef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "CheckAttributeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, attdef});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::CheckElementValue
// Il2CppName: CheckElementValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlSchemaValidator::*)(::StringW)>(&System::Xml::Schema::XmlSchemaValidator::CheckElementValue)> {
  static const MethodInfo* get() {
    static auto* stringValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "CheckElementValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stringValue});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::CheckTokenizedTypes
// Il2CppName: CheckTokenizedTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::Schema::XmlSchemaDatatype*, ::Il2CppObject*, bool)>(&System::Xml::Schema::XmlSchemaValidator::CheckTokenizedTypes)> {
  static const MethodInfo* get() {
    static auto* dtype = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaDatatype")->byval_arg;
    static auto* typedValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* attrValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "CheckTokenizedTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dtype, typedValue, attrValue});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::FindId
// Il2CppName: FindId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlSchemaValidator::*)(::StringW)>(&System::Xml::Schema::XmlSchemaValidator::FindId)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "FindId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::CheckForwardRefs
// Il2CppName: CheckForwardRefs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::CheckForwardRefs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "CheckForwardRefs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::CheckStateTransition
// Il2CppName: CheckStateTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::Schema::ValidatorState, ::StringW)>(&System::Xml::Schema::XmlSchemaValidator::CheckStateTransition)> {
  static const MethodInfo* get() {
    static auto* toState = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidatorState")->byval_arg;
    static auto* methodName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "CheckStateTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toState, methodName});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ClearPSVI
// Il2CppName: ClearPSVI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::ClearPSVI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ClearPSVI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::CheckRequiredAttributes
// Il2CppName: CheckRequiredAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::Schema::SchemaElementDecl*)>(&System::Xml::Schema::XmlSchemaValidator::CheckRequiredAttributes)> {
  static const MethodInfo* get() {
    static auto* currentElementDecl = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaElementDecl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "CheckRequiredAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentElementDecl});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::GetSchemaElement
// Il2CppName: GetSchemaElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaElement* (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::GetSchemaElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "GetSchemaElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::GetDefaultAttributePrefix
// Il2CppName: GetDefaultAttributePrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaValidator::*)(::StringW)>(&System::Xml::Schema::XmlSchemaValidator::GetDefaultAttributePrefix)> {
  static const MethodInfo* get() {
    static auto* attributeNS = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "GetDefaultAttributePrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeNS});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::AddIdentityConstraints
// Il2CppName: AddIdentityConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::AddIdentityConstraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "AddIdentityConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ElementIdentityConstraints
// Il2CppName: ElementIdentityConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)()>(&System::Xml::Schema::XmlSchemaValidator::ElementIdentityConstraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ElementIdentityConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::AttributeIdentityConstraints
// Il2CppName: AttributeIdentityConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::StringW, ::StringW, ::Il2CppObject*, ::StringW, ::System::Xml::Schema::XmlSchemaDatatype*)>(&System::Xml::Schema::XmlSchemaValidator::AttributeIdentityConstraints)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* sobj = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* datatype = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaDatatype")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "AttributeIdentityConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns, obj, sobj, datatype});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::EndElementIdentityConstraints
// Il2CppName: EndElementIdentityConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::Il2CppObject*, ::StringW, ::System::Xml::Schema::XmlSchemaDatatype*)>(&System::Xml::Schema::XmlSchemaValidator::EndElementIdentityConstraints)> {
  static const MethodInfo* get() {
    static auto* typedValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* stringValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* datatype = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaDatatype")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "EndElementIdentityConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typedValue, stringValue, datatype});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ElementValidationError
// Il2CppName: ElementValidationError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::ValidationState*, ::System::Xml::Schema::ValidationEventHandler*, ::Il2CppObject*, ::StringW, int, int, ::System::Xml::Schema::XmlSchemaSet*)>(&System::Xml::Schema::XmlSchemaValidator::ElementValidationError)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationState")->byval_arg;
    static auto* eventHandler = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationEventHandler")->byval_arg;
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* sourceUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* lineNo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* linePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* schemaSet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ElementValidationError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, context, eventHandler, sender, sourceUri, lineNo, linePos, schemaSet});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::CompleteValidationError
// Il2CppName: CompleteValidationError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::ValidationState*, ::System::Xml::Schema::ValidationEventHandler*, ::Il2CppObject*, ::StringW, int, int, ::System::Xml::Schema::XmlSchemaSet*)>(&System::Xml::Schema::XmlSchemaValidator::CompleteValidationError)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationState")->byval_arg;
    static auto* eventHandler = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationEventHandler")->byval_arg;
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* sourceUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* lineNo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* linePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* schemaSet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "CompleteValidationError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, eventHandler, sender, sourceUri, lineNo, linePos, schemaSet});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::PrintExpectedElements
// Il2CppName: PrintExpectedElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Collections::ArrayList*, bool)>(&System::Xml::Schema::XmlSchemaValidator::PrintExpectedElements)> {
  static const MethodInfo* get() {
    static auto* expected = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    static auto* getParticles = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "PrintExpectedElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expected, getParticles});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::PrintNames
// Il2CppName: PrintNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Collections::ArrayList*)>(&System::Xml::Schema::XmlSchemaValidator::PrintNames)> {
  static const MethodInfo* get() {
    static auto* expected = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "PrintNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expected});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::PrintNamesWithNS
// Il2CppName: PrintNamesWithNS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::ArrayList*, ::System::Text::StringBuilder*)>(&System::Xml::Schema::XmlSchemaValidator::PrintNamesWithNS)> {
  static const MethodInfo* get() {
    static auto* expected = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "PrintNamesWithNS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expected, builder});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::EnumerateAny
// Il2CppName: EnumerateAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Text::StringBuilder*, ::StringW)>(&System::Xml::Schema::XmlSchemaValidator::EnumerateAny)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* namespaces = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "EnumerateAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, namespaces});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::QNameString
// Il2CppName: QNameString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW)>(&System::Xml::Schema::XmlSchemaValidator::QNameString)> {
  static const MethodInfo* get() {
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "QNameString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localName, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::BuildElementName
// Il2CppName: BuildElementName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XmlSchemaValidator::BuildElementName)> {
  static const MethodInfo* get() {
    static auto* qname = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "BuildElementName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qname});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::BuildElementName
// Il2CppName: BuildElementName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW)>(&System::Xml::Schema::XmlSchemaValidator::BuildElementName)> {
  static const MethodInfo* get() {
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "BuildElementName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localName, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::ProcessEntity
// Il2CppName: ProcessEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::StringW)>(&System::Xml::Schema::XmlSchemaValidator::ProcessEntity)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "ProcessEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::StringW)>(&System::Xml::Schema::XmlSchemaValidator::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::StringW, ::ArrayW<::StringW>)>(&System::Xml::Schema::XmlSchemaValidator::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, args});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::StringW, ::StringW)>(&System::Xml::Schema::XmlSchemaValidator::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, arg});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::StringW, ::StringW, ::StringW)>(&System::Xml::Schema::XmlSchemaValidator::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, arg1, arg2});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::StringW, ::ArrayW<::StringW>, ::System::Exception*, ::System::Xml::Schema::XmlSeverityType)>(&System::Xml::Schema::XmlSchemaValidator::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* innerException = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    static auto* severity = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSeverityType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, args, innerException, severity});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::StringW, ::ArrayW<::StringW>, ::System::Exception*)>(&System::Xml::Schema::XmlSchemaValidator::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* innerException = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, args, innerException});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::Schema::XmlSchemaValidationException*)>(&System::Xml::Schema::XmlSchemaValidator::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaValidationException")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::Schema::XmlSchemaException*)>(&System::Xml::Schema::XmlSchemaValidator::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaException")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::StringW, ::StringW, ::System::Xml::Schema::XmlSeverityType)>(&System::Xml::Schema::XmlSchemaValidator::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* severity = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSeverityType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, msg, severity});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaValidator::*)(::System::Xml::Schema::XmlSchemaValidationException*, ::System::Xml::Schema::XmlSeverityType)>(&System::Xml::Schema::XmlSchemaValidator::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaValidationException")->byval_arg;
    static auto* severity = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSeverityType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, severity});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaValidator::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::ValidationEventHandler*, ::Il2CppObject*, ::System::Xml::Schema::XmlSchemaValidationException*, ::System::Xml::Schema::XmlSeverityType)>(&System::Xml::Schema::XmlSchemaValidator::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* eventHandler = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationEventHandler")->byval_arg;
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaValidationException")->byval_arg;
    static auto* severity = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSeverityType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaValidator*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventHandler, sender, e, severity});
  }
};
