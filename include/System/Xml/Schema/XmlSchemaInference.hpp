// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
  // Forward declaring type: XmlReader
  class XmlReader;
  // Forward declaring type: NameTable
  class NameTable;
  // Forward declaring type: XmlNamespaceManager
  class XmlNamespaceManager;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchema
  class XmlSchema;
  // Forward declaring type: XmlSchemaSet
  class XmlSchemaSet;
  // Skipping declaration: InferenceOption because it is already included!
  // Forward declaring type: XmlSchemaAttribute
  class XmlSchemaAttribute;
  // Forward declaring type: XmlSchemaObjectCollection
  class XmlSchemaObjectCollection;
  // Forward declaring type: XmlSchemaObjectTable
  class XmlSchemaObjectTable;
  // Forward declaring type: XmlSchemaElement
  class XmlSchemaElement;
  // Forward declaring type: XmlSchemaSimpleContentExtension
  class XmlSchemaSimpleContentExtension;
  // Forward declaring type: XmlSchemaComplexType
  class XmlSchemaComplexType;
  // Forward declaring type: XmlSchemaType
  class XmlSchemaType;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: ICollection
  class ICollection;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaInference
  class XmlSchemaInference;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchemaInference);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaInference*, "System.Xml.Schema", "XmlSchemaInference");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaInference
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSchemaInference : public ::Il2CppObject {
    public:
    // Nested type: ::System::Xml::Schema::XmlSchemaInference::InferenceOption
    struct InferenceOption;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.Schema.XmlSchemaInference/System.Xml.Schema.InferenceOption
    // [TokenAttribute] Offset: FFFFFFFF
    struct InferenceOption/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: InferenceOption
      constexpr InferenceOption(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.Schema.XmlSchemaInference/System.Xml.Schema.InferenceOption Restricted
      static constexpr const int Restricted = 0;
      // Get static field: static public System.Xml.Schema.XmlSchemaInference/System.Xml.Schema.InferenceOption Restricted
      static ::System::Xml::Schema::XmlSchemaInference::InferenceOption _get_Restricted();
      // Set static field: static public System.Xml.Schema.XmlSchemaInference/System.Xml.Schema.InferenceOption Restricted
      static void _set_Restricted(::System::Xml::Schema::XmlSchemaInference::InferenceOption value);
      // static field const value: static public System.Xml.Schema.XmlSchemaInference/System.Xml.Schema.InferenceOption Relaxed
      static constexpr const int Relaxed = 1;
      // Get static field: static public System.Xml.Schema.XmlSchemaInference/System.Xml.Schema.InferenceOption Relaxed
      static ::System::Xml::Schema::XmlSchemaInference::InferenceOption _get_Relaxed();
      // Set static field: static public System.Xml.Schema.XmlSchemaInference/System.Xml.Schema.InferenceOption Relaxed
      static void _set_Relaxed(::System::Xml::Schema::XmlSchemaInference::InferenceOption value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Xml.Schema.XmlSchemaInference/System.Xml.Schema.InferenceOption
    #pragma pack(pop)
    static check_size<sizeof(XmlSchemaInference::InferenceOption), 0 + sizeof(int)> __System_Xml_Schema_XmlSchemaInference_InferenceOptionSizeCheck;
    static_assert(sizeof(XmlSchemaInference::InferenceOption) == 0x4);
    public:
    // private System.Xml.Schema.XmlSchema rootSchema
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::Schema::XmlSchema* rootSchema;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchema*) == 0x8);
    // private System.Xml.Schema.XmlSchemaSet schemaSet
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::Schema::XmlSchemaSet* schemaSet;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaSet*) == 0x8);
    // private System.Xml.XmlReader xtr
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::XmlReader* xtr;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlReader*) == 0x8);
    // private System.Xml.NameTable nametable
    // Size: 0x8
    // Offset: 0x28
    ::System::Xml::NameTable* nametable;
    // Field size check
    static_assert(sizeof(::System::Xml::NameTable*) == 0x8);
    // private System.String TargetNamespace
    // Size: 0x8
    // Offset: 0x30
    ::StringW TargetNamespace;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.XmlNamespaceManager NamespaceManager
    // Size: 0x8
    // Offset: 0x38
    ::System::Xml::XmlNamespaceManager* NamespaceManager;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNamespaceManager*) == 0x8);
    // private System.Collections.ArrayList schemaList
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::ArrayList* schemaList;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Xml.Schema.XmlSchemaInference/System.Xml.Schema.InferenceOption occurrence
    // Size: 0x4
    // Offset: 0x48
    ::System::Xml::Schema::XmlSchemaInference::InferenceOption occurrence;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaInference::InferenceOption) == 0x4);
    // private System.Xml.Schema.XmlSchemaInference/System.Xml.Schema.InferenceOption typeInference
    // Size: 0x4
    // Offset: 0x4C
    ::System::Xml::Schema::XmlSchemaInference::InferenceOption typeInference;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaInference::InferenceOption) == 0x4);
    public:
    // Get static field: static System.Xml.XmlQualifiedName ST_boolean
    static ::System::Xml::XmlQualifiedName* _get_ST_boolean();
    // Set static field: static System.Xml.XmlQualifiedName ST_boolean
    static void _set_ST_boolean(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_byte
    static ::System::Xml::XmlQualifiedName* _get_ST_byte();
    // Set static field: static System.Xml.XmlQualifiedName ST_byte
    static void _set_ST_byte(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_unsignedByte
    static ::System::Xml::XmlQualifiedName* _get_ST_unsignedByte();
    // Set static field: static System.Xml.XmlQualifiedName ST_unsignedByte
    static void _set_ST_unsignedByte(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_short
    static ::System::Xml::XmlQualifiedName* _get_ST_short();
    // Set static field: static System.Xml.XmlQualifiedName ST_short
    static void _set_ST_short(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_unsignedShort
    static ::System::Xml::XmlQualifiedName* _get_ST_unsignedShort();
    // Set static field: static System.Xml.XmlQualifiedName ST_unsignedShort
    static void _set_ST_unsignedShort(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_int
    static ::System::Xml::XmlQualifiedName* _get_ST_int();
    // Set static field: static System.Xml.XmlQualifiedName ST_int
    static void _set_ST_int(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_unsignedInt
    static ::System::Xml::XmlQualifiedName* _get_ST_unsignedInt();
    // Set static field: static System.Xml.XmlQualifiedName ST_unsignedInt
    static void _set_ST_unsignedInt(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_long
    static ::System::Xml::XmlQualifiedName* _get_ST_long();
    // Set static field: static System.Xml.XmlQualifiedName ST_long
    static void _set_ST_long(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_unsignedLong
    static ::System::Xml::XmlQualifiedName* _get_ST_unsignedLong();
    // Set static field: static System.Xml.XmlQualifiedName ST_unsignedLong
    static void _set_ST_unsignedLong(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_integer
    static ::System::Xml::XmlQualifiedName* _get_ST_integer();
    // Set static field: static System.Xml.XmlQualifiedName ST_integer
    static void _set_ST_integer(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_decimal
    static ::System::Xml::XmlQualifiedName* _get_ST_decimal();
    // Set static field: static System.Xml.XmlQualifiedName ST_decimal
    static void _set_ST_decimal(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_float
    static ::System::Xml::XmlQualifiedName* _get_ST_float();
    // Set static field: static System.Xml.XmlQualifiedName ST_float
    static void _set_ST_float(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_double
    static ::System::Xml::XmlQualifiedName* _get_ST_double();
    // Set static field: static System.Xml.XmlQualifiedName ST_double
    static void _set_ST_double(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_duration
    static ::System::Xml::XmlQualifiedName* _get_ST_duration();
    // Set static field: static System.Xml.XmlQualifiedName ST_duration
    static void _set_ST_duration(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_dateTime
    static ::System::Xml::XmlQualifiedName* _get_ST_dateTime();
    // Set static field: static System.Xml.XmlQualifiedName ST_dateTime
    static void _set_ST_dateTime(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_time
    static ::System::Xml::XmlQualifiedName* _get_ST_time();
    // Set static field: static System.Xml.XmlQualifiedName ST_time
    static void _set_ST_time(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_date
    static ::System::Xml::XmlQualifiedName* _get_ST_date();
    // Set static field: static System.Xml.XmlQualifiedName ST_date
    static void _set_ST_date(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_gYearMonth
    static ::System::Xml::XmlQualifiedName* _get_ST_gYearMonth();
    // Set static field: static System.Xml.XmlQualifiedName ST_gYearMonth
    static void _set_ST_gYearMonth(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_string
    static ::System::Xml::XmlQualifiedName* _get_ST_string();
    // Set static field: static System.Xml.XmlQualifiedName ST_string
    static void _set_ST_string(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName ST_anySimpleType
    static ::System::Xml::XmlQualifiedName* _get_ST_anySimpleType();
    // Set static field: static System.Xml.XmlQualifiedName ST_anySimpleType
    static void _set_ST_anySimpleType(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName[] SimpleTypes
    static ::ArrayW<::System::Xml::XmlQualifiedName*> _get_SimpleTypes();
    // Set static field: static System.Xml.XmlQualifiedName[] SimpleTypes
    static void _set_SimpleTypes(::ArrayW<::System::Xml::XmlQualifiedName*> value);
    // Get instance field reference: private System.Xml.Schema.XmlSchema rootSchema
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchema*& dyn_rootSchema();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaSet schemaSet
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaSet*& dyn_schemaSet();
    // Get instance field reference: private System.Xml.XmlReader xtr
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlReader*& dyn_xtr();
    // Get instance field reference: private System.Xml.NameTable nametable
    [[deprecated("Use field access instead!")]] ::System::Xml::NameTable*& dyn_nametable();
    // Get instance field reference: private System.String TargetNamespace
    [[deprecated("Use field access instead!")]] ::StringW& dyn_TargetNamespace();
    // Get instance field reference: private System.Xml.XmlNamespaceManager NamespaceManager
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNamespaceManager*& dyn_NamespaceManager();
    // Get instance field reference: private System.Collections.ArrayList schemaList
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_schemaList();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaInference/System.Xml.Schema.InferenceOption occurrence
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaInference::InferenceOption& dyn_occurrence();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaInference/System.Xml.Schema.InferenceOption typeInference
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaInference::InferenceOption& dyn_typeInference();
    // public System.Xml.Schema.XmlSchemaInference/System.Xml.Schema.InferenceOption get_Occurrence()
    // Offset: 0x110F2C4
    ::System::Xml::Schema::XmlSchemaInference::InferenceOption get_Occurrence();
    // public System.Void set_Occurrence(System.Xml.Schema.XmlSchemaInference/System.Xml.Schema.InferenceOption value)
    // Offset: 0x110F2BC
    void set_Occurrence(::System::Xml::Schema::XmlSchemaInference::InferenceOption value);
    // public System.Void set_TypeInference(System.Xml.Schema.XmlSchemaInference/System.Xml.Schema.InferenceOption value)
    // Offset: 0x110F2CC
    void set_TypeInference(::System::Xml::Schema::XmlSchemaInference::InferenceOption value);
    // public System.Void .ctor()
    // Offset: 0x110F2D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaInference* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaInference::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaInference*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x111872C
    static void _cctor();
    // public System.Xml.Schema.XmlSchemaSet InferSchema(System.Xml.XmlReader instanceDocument)
    // Offset: 0x110F3E8
    ::System::Xml::Schema::XmlSchemaSet* InferSchema(::System::Xml::XmlReader* instanceDocument);
    // System.Xml.Schema.XmlSchemaSet InferSchema1(System.Xml.XmlReader instanceDocument, System.Xml.Schema.XmlSchemaSet schemas)
    // Offset: 0x110F460
    ::System::Xml::Schema::XmlSchemaSet* InferSchema1(::System::Xml::XmlReader* instanceDocument, ::System::Xml::Schema::XmlSchemaSet* schemas);
    // private System.Xml.Schema.XmlSchemaAttribute AddAttribute(System.String localName, System.String prefix, System.String childURI, System.String attrValue, System.Boolean bCreatingNewType, System.Xml.Schema.XmlSchema parentSchema, System.Xml.Schema.XmlSchemaObjectCollection addLocation, System.Xml.Schema.XmlSchemaObjectTable compiledAttributes)
    // Offset: 0x11118D8
    ::System::Xml::Schema::XmlSchemaAttribute* AddAttribute(::StringW localName, ::StringW prefix, ::StringW childURI, ::StringW attrValue, bool bCreatingNewType, ::System::Xml::Schema::XmlSchema* parentSchema, ::System::Xml::Schema::XmlSchemaObjectCollection* addLocation, ::System::Xml::Schema::XmlSchemaObjectTable* compiledAttributes);
    // private System.Xml.Schema.XmlSchema CreateXmlSchema(System.String targetNS)
    // Offset: 0x1114514
    ::System::Xml::Schema::XmlSchema* CreateXmlSchema(::StringW targetNS);
    // private System.Xml.Schema.XmlSchemaElement AddElement(System.String localName, System.String prefix, System.String childURI, System.Xml.Schema.XmlSchema parentSchema, System.Xml.Schema.XmlSchemaObjectCollection addLocation, System.Int32 positionWithinCollection)
    // Offset: 0x110FE14
    ::System::Xml::Schema::XmlSchemaElement* AddElement(::StringW localName, ::StringW prefix, ::StringW childURI, ::System::Xml::Schema::XmlSchema* parentSchema, ::System::Xml::Schema::XmlSchemaObjectCollection* addLocation, int positionWithinCollection);
    // System.Void InferElement(System.Xml.Schema.XmlSchemaElement xse, System.Boolean bCreatingNewType, System.Xml.Schema.XmlSchema parentSchema)
    // Offset: 0x11103E0
    void InferElement(::System::Xml::Schema::XmlSchemaElement* xse, bool bCreatingNewType, ::System::Xml::Schema::XmlSchema* parentSchema);
    // private System.Xml.Schema.XmlSchemaSimpleContentExtension CheckSimpleContentExtension(System.Xml.Schema.XmlSchemaComplexType ct)
    // Offset: 0x11152B0
    ::System::Xml::Schema::XmlSchemaSimpleContentExtension* CheckSimpleContentExtension(::System::Xml::Schema::XmlSchemaComplexType* ct);
    // private System.Xml.Schema.XmlSchemaType GetEffectiveSchemaType(System.Xml.Schema.XmlSchemaElement elem, System.Boolean bCreatingNewType)
    // Offset: 0x11149EC
    ::System::Xml::Schema::XmlSchemaType* GetEffectiveSchemaType(::System::Xml::Schema::XmlSchemaElement* elem, bool bCreatingNewType);
    // System.Xml.Schema.XmlSchemaElement FindMatchingElement(System.Boolean bCreatingNewType, System.Xml.XmlReader xtr, System.Xml.Schema.XmlSchemaComplexType ct, ref System.Int32 lastUsedSeqItem, ref System.Boolean bParticleChanged, System.Xml.Schema.XmlSchema parentSchema, System.Boolean setMaxoccurs)
    // Offset: 0x1115804
    ::System::Xml::Schema::XmlSchemaElement* FindMatchingElement(bool bCreatingNewType, ::System::Xml::XmlReader* xtr, ::System::Xml::Schema::XmlSchemaComplexType* ct, ByRef<int> lastUsedSeqItem, ByRef<bool> bParticleChanged, ::System::Xml::Schema::XmlSchema* parentSchema, bool setMaxoccurs);
    // System.Void ProcessAttributes(ref System.Xml.Schema.XmlSchemaElement xse, System.Xml.Schema.XmlSchemaType effectiveSchemaType, System.Boolean bCreatingNewType, System.Xml.Schema.XmlSchema parentSchema)
    // Offset: 0x1114B20
    void ProcessAttributes(ByRef<::System::Xml::Schema::XmlSchemaElement*> xse, ::System::Xml::Schema::XmlSchemaType* effectiveSchemaType, bool bCreatingNewType, ::System::Xml::Schema::XmlSchema* parentSchema);
    // private System.Void MoveAttributes(System.Xml.Schema.XmlSchemaSimpleContentExtension scExtension, System.Xml.Schema.XmlSchemaComplexType ct)
    // Offset: 0x111576C
    void MoveAttributes(::System::Xml::Schema::XmlSchemaSimpleContentExtension* scExtension, ::System::Xml::Schema::XmlSchemaComplexType* ct);
    // private System.Void MoveAttributes(System.Xml.Schema.XmlSchemaComplexType ct, System.Xml.Schema.XmlSchemaSimpleContentExtension simpleContentExtension, System.Boolean bCreatingNewType)
    // Offset: 0x11153EC
    void MoveAttributes(::System::Xml::Schema::XmlSchemaComplexType* ct, ::System::Xml::Schema::XmlSchemaSimpleContentExtension* simpleContentExtension, bool bCreatingNewType);
    // System.Xml.Schema.XmlSchemaAttribute FindAttribute(System.Collections.ICollection attributes, System.String attrName)
    // Offset: 0x11124A4
    ::System::Xml::Schema::XmlSchemaAttribute* FindAttribute(::System::Collections::ICollection* attributes, ::StringW attrName);
    // System.Xml.Schema.XmlSchemaElement FindGlobalElement(System.String namespaceURI, System.String localName, out System.Xml.Schema.XmlSchema parentSchema)
    // Offset: 0x11145A4
    ::System::Xml::Schema::XmlSchemaElement* FindGlobalElement(::StringW namespaceURI, ::StringW localName, ByRef<::System::Xml::Schema::XmlSchema*> parentSchema);
    // System.Xml.Schema.XmlSchemaElement FindElement(System.Xml.Schema.XmlSchemaObjectCollection elements, System.String elementName)
    // Offset: 0x11169C4
    ::System::Xml::Schema::XmlSchemaElement* FindElement(::System::Xml::Schema::XmlSchemaObjectCollection* elements, ::StringW elementName);
    // System.Xml.Schema.XmlSchemaAttribute FindAttributeRef(System.Collections.ICollection attributes, System.String attributeName, System.String nsURI)
    // Offset: 0x11120F0
    ::System::Xml::Schema::XmlSchemaAttribute* FindAttributeRef(::System::Collections::ICollection* attributes, ::StringW attributeName, ::StringW nsURI);
    // System.Xml.Schema.XmlSchemaElement FindElementRef(System.Xml.Schema.XmlSchemaObjectCollection elements, System.String elementName, System.String nsURI)
    // Offset: 0x1116B08
    ::System::Xml::Schema::XmlSchemaElement* FindElementRef(::System::Xml::Schema::XmlSchemaObjectCollection* elements, ::StringW elementName, ::StringW nsURI);
    // System.Void MakeExistingAttributesOptional(System.Xml.Schema.XmlSchemaComplexType ct, System.Xml.Schema.XmlSchemaObjectCollection attributesInInstance)
    // Offset: 0x1115218
    void MakeExistingAttributesOptional(::System::Xml::Schema::XmlSchemaComplexType* ct, ::System::Xml::Schema::XmlSchemaObjectCollection* attributesInInstance);
    // private System.Void SwitchUseToOptional(System.Xml.Schema.XmlSchemaObjectCollection attributes, System.Xml.Schema.XmlSchemaObjectCollection attributesInInstance)
    // Offset: 0x1116F24
    void SwitchUseToOptional(::System::Xml::Schema::XmlSchemaObjectCollection* attributes, ::System::Xml::Schema::XmlSchemaObjectCollection* attributesInInstance);
    // System.Xml.XmlQualifiedName RefineSimpleType(System.String s, ref System.Int32 iTypeFlags)
    // Offset: 0x1112814
    ::System::Xml::XmlQualifiedName* RefineSimpleType(::StringW s, ByRef<int> iTypeFlags);
    // static System.Int32 InferSimpleType(System.String s, ref System.Boolean bNeedsRangeCheck)
    // Offset: 0x111704C
    static int InferSimpleType(::StringW s, ByRef<bool> bNeedsRangeCheck);
    // static System.Int32 DateTime(System.String s, System.Boolean bDate, System.Boolean bTime)
    // Offset: 0x111860C
    static int DateTime(::StringW s, bool bDate, bool bTime);
    // private System.Xml.Schema.XmlSchemaElement CreateNewElementforChoice(System.Xml.Schema.XmlSchemaElement copyElement)
    // Offset: 0x1116C74
    ::System::Xml::Schema::XmlSchemaElement* CreateNewElementforChoice(::System::Xml::Schema::XmlSchemaElement* copyElement);
    // static private System.Int32 GetSchemaType(System.Xml.XmlQualifiedName qname)
    // Offset: 0x1113C00
    static int GetSchemaType(::System::Xml::XmlQualifiedName* qname);
    // System.Void SetMinMaxOccurs(System.Xml.Schema.XmlSchemaElement el, System.Boolean setMaxOccurs)
    // Offset: 0x1116824
    void SetMinMaxOccurs(::System::Xml::Schema::XmlSchemaElement* el, bool setMaxOccurs);
  }; // System.Xml.Schema.XmlSchemaInference
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaInference), 76 + sizeof(::System::Xml::Schema::XmlSchemaInference::InferenceOption)> __System_Xml_Schema_XmlSchemaInferenceSizeCheck;
  static_assert(sizeof(XmlSchemaInference) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaInference::InferenceOption, "System.Xml.Schema", "XmlSchemaInference/InferenceOption");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::get_Occurrence
// Il2CppName: get_Occurrence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaInference::InferenceOption (System::Xml::Schema::XmlSchemaInference::*)()>(&System::Xml::Schema::XmlSchemaInference::get_Occurrence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "get_Occurrence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::set_Occurrence
// Il2CppName: set_Occurrence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaInference::*)(::System::Xml::Schema::XmlSchemaInference::InferenceOption)>(&System::Xml::Schema::XmlSchemaInference::set_Occurrence)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaInference/InferenceOption")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "set_Occurrence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::set_TypeInference
// Il2CppName: set_TypeInference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaInference::*)(::System::Xml::Schema::XmlSchemaInference::InferenceOption)>(&System::Xml::Schema::XmlSchemaInference::set_TypeInference)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaInference/InferenceOption")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "set_TypeInference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::Schema::XmlSchemaInference::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::InferSchema
// Il2CppName: InferSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaSet* (System::Xml::Schema::XmlSchemaInference::*)(::System::Xml::XmlReader*)>(&System::Xml::Schema::XmlSchemaInference::InferSchema)> {
  static const MethodInfo* get() {
    static auto* instanceDocument = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "InferSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceDocument});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::InferSchema1
// Il2CppName: InferSchema1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaSet* (System::Xml::Schema::XmlSchemaInference::*)(::System::Xml::XmlReader*, ::System::Xml::Schema::XmlSchemaSet*)>(&System::Xml::Schema::XmlSchemaInference::InferSchema1)> {
  static const MethodInfo* get() {
    static auto* instanceDocument = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    static auto* schemas = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "InferSchema1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceDocument, schemas});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::AddAttribute
// Il2CppName: AddAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaAttribute* (System::Xml::Schema::XmlSchemaInference::*)(::StringW, ::StringW, ::StringW, ::StringW, bool, ::System::Xml::Schema::XmlSchema*, ::System::Xml::Schema::XmlSchemaObjectCollection*, ::System::Xml::Schema::XmlSchemaObjectTable*)>(&System::Xml::Schema::XmlSchemaInference::AddAttribute)> {
  static const MethodInfo* get() {
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* childURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attrValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bCreatingNewType = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* parentSchema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* addLocation = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    static auto* compiledAttributes = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "AddAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localName, prefix, childURI, attrValue, bCreatingNewType, parentSchema, addLocation, compiledAttributes});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::CreateXmlSchema
// Il2CppName: CreateXmlSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Xml::Schema::XmlSchemaInference::*)(::StringW)>(&System::Xml::Schema::XmlSchemaInference::CreateXmlSchema)> {
  static const MethodInfo* get() {
    static auto* targetNS = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "CreateXmlSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetNS});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::AddElement
// Il2CppName: AddElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaElement* (System::Xml::Schema::XmlSchemaInference::*)(::StringW, ::StringW, ::StringW, ::System::Xml::Schema::XmlSchema*, ::System::Xml::Schema::XmlSchemaObjectCollection*, int)>(&System::Xml::Schema::XmlSchemaInference::AddElement)> {
  static const MethodInfo* get() {
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* childURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parentSchema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* addLocation = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    static auto* positionWithinCollection = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "AddElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localName, prefix, childURI, parentSchema, addLocation, positionWithinCollection});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::InferElement
// Il2CppName: InferElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaInference::*)(::System::Xml::Schema::XmlSchemaElement*, bool, ::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchemaInference::InferElement)> {
  static const MethodInfo* get() {
    static auto* xse = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    static auto* bCreatingNewType = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* parentSchema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "InferElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xse, bCreatingNewType, parentSchema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::CheckSimpleContentExtension
// Il2CppName: CheckSimpleContentExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaSimpleContentExtension* (System::Xml::Schema::XmlSchemaInference::*)(::System::Xml::Schema::XmlSchemaComplexType*)>(&System::Xml::Schema::XmlSchemaInference::CheckSimpleContentExtension)> {
  static const MethodInfo* get() {
    static auto* ct = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "CheckSimpleContentExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ct});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::GetEffectiveSchemaType
// Il2CppName: GetEffectiveSchemaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaType* (System::Xml::Schema::XmlSchemaInference::*)(::System::Xml::Schema::XmlSchemaElement*, bool)>(&System::Xml::Schema::XmlSchemaInference::GetEffectiveSchemaType)> {
  static const MethodInfo* get() {
    static auto* elem = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    static auto* bCreatingNewType = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "GetEffectiveSchemaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elem, bCreatingNewType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::FindMatchingElement
// Il2CppName: FindMatchingElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaElement* (System::Xml::Schema::XmlSchemaInference::*)(bool, ::System::Xml::XmlReader*, ::System::Xml::Schema::XmlSchemaComplexType*, ByRef<int>, ByRef<bool>, ::System::Xml::Schema::XmlSchema*, bool)>(&System::Xml::Schema::XmlSchemaInference::FindMatchingElement)> {
  static const MethodInfo* get() {
    static auto* bCreatingNewType = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* xtr = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    static auto* ct = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* lastUsedSeqItem = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bParticleChanged = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* parentSchema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* setMaxoccurs = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "FindMatchingElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bCreatingNewType, xtr, ct, lastUsedSeqItem, bParticleChanged, parentSchema, setMaxoccurs});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::ProcessAttributes
// Il2CppName: ProcessAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaInference::*)(ByRef<::System::Xml::Schema::XmlSchemaElement*>, ::System::Xml::Schema::XmlSchemaType*, bool, ::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchemaInference::ProcessAttributes)> {
  static const MethodInfo* get() {
    static auto* xse = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->this_arg;
    static auto* effectiveSchemaType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaType")->byval_arg;
    static auto* bCreatingNewType = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* parentSchema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "ProcessAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xse, effectiveSchemaType, bCreatingNewType, parentSchema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::MoveAttributes
// Il2CppName: MoveAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaInference::*)(::System::Xml::Schema::XmlSchemaSimpleContentExtension*, ::System::Xml::Schema::XmlSchemaComplexType*)>(&System::Xml::Schema::XmlSchemaInference::MoveAttributes)> {
  static const MethodInfo* get() {
    static auto* scExtension = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleContentExtension")->byval_arg;
    static auto* ct = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "MoveAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scExtension, ct});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::MoveAttributes
// Il2CppName: MoveAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaInference::*)(::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaSimpleContentExtension*, bool)>(&System::Xml::Schema::XmlSchemaInference::MoveAttributes)> {
  static const MethodInfo* get() {
    static auto* ct = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* simpleContentExtension = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleContentExtension")->byval_arg;
    static auto* bCreatingNewType = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "MoveAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ct, simpleContentExtension, bCreatingNewType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::FindAttribute
// Il2CppName: FindAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaAttribute* (System::Xml::Schema::XmlSchemaInference::*)(::System::Collections::ICollection*, ::StringW)>(&System::Xml::Schema::XmlSchemaInference::FindAttribute)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::GetClassFromName("System.Collections", "ICollection")->byval_arg;
    static auto* attrName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "FindAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes, attrName});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::FindGlobalElement
// Il2CppName: FindGlobalElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaElement* (System::Xml::Schema::XmlSchemaInference::*)(::StringW, ::StringW, ByRef<::System::Xml::Schema::XmlSchema*>)>(&System::Xml::Schema::XmlSchemaInference::FindGlobalElement)> {
  static const MethodInfo* get() {
    static auto* namespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parentSchema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "FindGlobalElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{namespaceURI, localName, parentSchema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::FindElement
// Il2CppName: FindElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaElement* (System::Xml::Schema::XmlSchemaInference::*)(::System::Xml::Schema::XmlSchemaObjectCollection*, ::StringW)>(&System::Xml::Schema::XmlSchemaInference::FindElement)> {
  static const MethodInfo* get() {
    static auto* elements = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    static auto* elementName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "FindElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elements, elementName});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::FindAttributeRef
// Il2CppName: FindAttributeRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaAttribute* (System::Xml::Schema::XmlSchemaInference::*)(::System::Collections::ICollection*, ::StringW, ::StringW)>(&System::Xml::Schema::XmlSchemaInference::FindAttributeRef)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::GetClassFromName("System.Collections", "ICollection")->byval_arg;
    static auto* attributeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* nsURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "FindAttributeRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes, attributeName, nsURI});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::FindElementRef
// Il2CppName: FindElementRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaElement* (System::Xml::Schema::XmlSchemaInference::*)(::System::Xml::Schema::XmlSchemaObjectCollection*, ::StringW, ::StringW)>(&System::Xml::Schema::XmlSchemaInference::FindElementRef)> {
  static const MethodInfo* get() {
    static auto* elements = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    static auto* elementName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* nsURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "FindElementRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elements, elementName, nsURI});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::MakeExistingAttributesOptional
// Il2CppName: MakeExistingAttributesOptional
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaInference::*)(::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaObjectCollection*)>(&System::Xml::Schema::XmlSchemaInference::MakeExistingAttributesOptional)> {
  static const MethodInfo* get() {
    static auto* ct = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* attributesInInstance = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "MakeExistingAttributesOptional", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ct, attributesInInstance});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::SwitchUseToOptional
// Il2CppName: SwitchUseToOptional
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaInference::*)(::System::Xml::Schema::XmlSchemaObjectCollection*, ::System::Xml::Schema::XmlSchemaObjectCollection*)>(&System::Xml::Schema::XmlSchemaInference::SwitchUseToOptional)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    static auto* attributesInInstance = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "SwitchUseToOptional", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes, attributesInInstance});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::RefineSimpleType
// Il2CppName: RefineSimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Schema::XmlSchemaInference::*)(::StringW, ByRef<int>)>(&System::Xml::Schema::XmlSchemaInference::RefineSimpleType)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* iTypeFlags = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "RefineSimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, iTypeFlags});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::InferSimpleType
// Il2CppName: InferSimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::StringW, ByRef<bool>)>(&System::Xml::Schema::XmlSchemaInference::InferSimpleType)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bNeedsRangeCheck = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "InferSimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, bNeedsRangeCheck});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::DateTime
// Il2CppName: DateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::StringW, bool, bool)>(&System::Xml::Schema::XmlSchemaInference::DateTime)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bDate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bTime = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "DateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, bDate, bTime});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::CreateNewElementforChoice
// Il2CppName: CreateNewElementforChoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaElement* (System::Xml::Schema::XmlSchemaInference::*)(::System::Xml::Schema::XmlSchemaElement*)>(&System::Xml::Schema::XmlSchemaInference::CreateNewElementforChoice)> {
  static const MethodInfo* get() {
    static auto* copyElement = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "CreateNewElementforChoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{copyElement});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::GetSchemaType
// Il2CppName: GetSchemaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XmlSchemaInference::GetSchemaType)> {
  static const MethodInfo* get() {
    static auto* qname = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "GetSchemaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qname});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaInference::SetMinMaxOccurs
// Il2CppName: SetMinMaxOccurs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaInference::*)(::System::Xml::Schema::XmlSchemaElement*, bool)>(&System::Xml::Schema::XmlSchemaInference::SetMinMaxOccurs)> {
  static const MethodInfo* get() {
    static auto* el = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    static auto* setMaxOccurs = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaInference*), "SetMinMaxOccurs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{el, setMaxOccurs});
  }
};
