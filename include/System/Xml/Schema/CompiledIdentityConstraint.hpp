// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: Asttree
  class Asttree;
  // Skipping declaration: ConstraintRole because it is already included!
  // Forward declaring type: XmlSchemaIdentityConstraint
  class XmlSchemaIdentityConstraint;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
  // Forward declaring type: XmlNamespaceManager
  class XmlNamespaceManager;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: CompiledIdentityConstraint
  class CompiledIdentityConstraint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::CompiledIdentityConstraint);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::CompiledIdentityConstraint*, "System.Xml.Schema", "CompiledIdentityConstraint");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.CompiledIdentityConstraint
  // [TokenAttribute] Offset: FFFFFFFF
  class CompiledIdentityConstraint : public ::Il2CppObject {
    public:
    // Nested type: ::System::Xml::Schema::CompiledIdentityConstraint::ConstraintRole
    struct ConstraintRole;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.Schema.CompiledIdentityConstraint/System.Xml.Schema.ConstraintRole
    // [TokenAttribute] Offset: FFFFFFFF
    struct ConstraintRole/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ConstraintRole
      constexpr ConstraintRole(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.Schema.CompiledIdentityConstraint/System.Xml.Schema.ConstraintRole Unique
      static constexpr const int Unique = 0;
      // Get static field: static public System.Xml.Schema.CompiledIdentityConstraint/System.Xml.Schema.ConstraintRole Unique
      static ::System::Xml::Schema::CompiledIdentityConstraint::ConstraintRole _get_Unique();
      // Set static field: static public System.Xml.Schema.CompiledIdentityConstraint/System.Xml.Schema.ConstraintRole Unique
      static void _set_Unique(::System::Xml::Schema::CompiledIdentityConstraint::ConstraintRole value);
      // static field const value: static public System.Xml.Schema.CompiledIdentityConstraint/System.Xml.Schema.ConstraintRole Key
      static constexpr const int Key = 1;
      // Get static field: static public System.Xml.Schema.CompiledIdentityConstraint/System.Xml.Schema.ConstraintRole Key
      static ::System::Xml::Schema::CompiledIdentityConstraint::ConstraintRole _get_Key();
      // Set static field: static public System.Xml.Schema.CompiledIdentityConstraint/System.Xml.Schema.ConstraintRole Key
      static void _set_Key(::System::Xml::Schema::CompiledIdentityConstraint::ConstraintRole value);
      // static field const value: static public System.Xml.Schema.CompiledIdentityConstraint/System.Xml.Schema.ConstraintRole Keyref
      static constexpr const int Keyref = 2;
      // Get static field: static public System.Xml.Schema.CompiledIdentityConstraint/System.Xml.Schema.ConstraintRole Keyref
      static ::System::Xml::Schema::CompiledIdentityConstraint::ConstraintRole _get_Keyref();
      // Set static field: static public System.Xml.Schema.CompiledIdentityConstraint/System.Xml.Schema.ConstraintRole Keyref
      static void _set_Keyref(::System::Xml::Schema::CompiledIdentityConstraint::ConstraintRole value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Xml.Schema.CompiledIdentityConstraint/System.Xml.Schema.ConstraintRole
    #pragma pack(pop)
    static check_size<sizeof(CompiledIdentityConstraint::ConstraintRole), 0 + sizeof(int)> __System_Xml_Schema_CompiledIdentityConstraint_ConstraintRoleSizeCheck;
    static_assert(sizeof(CompiledIdentityConstraint::ConstraintRole) == 0x4);
    public:
    // System.Xml.XmlQualifiedName name
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::XmlQualifiedName* name;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    // private System.Xml.Schema.CompiledIdentityConstraint/System.Xml.Schema.ConstraintRole role
    // Size: 0x4
    // Offset: 0x18
    ::System::Xml::Schema::CompiledIdentityConstraint::ConstraintRole role;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::CompiledIdentityConstraint::ConstraintRole) == 0x4);
    // Padding between fields: role and: selector
    char __padding1[0x4] = {};
    // private System.Xml.Schema.Asttree selector
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::Schema::Asttree* selector;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::Asttree*) == 0x8);
    // private System.Xml.Schema.Asttree[] fields
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::System::Xml::Schema::Asttree*> fields;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::Schema::Asttree*>) == 0x8);
    // System.Xml.XmlQualifiedName refer
    // Size: 0x8
    // Offset: 0x30
    ::System::Xml::XmlQualifiedName* refer;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    public:
    // Get static field: static public readonly System.Xml.Schema.CompiledIdentityConstraint Empty
    static ::System::Xml::Schema::CompiledIdentityConstraint* _get_Empty();
    // Set static field: static public readonly System.Xml.Schema.CompiledIdentityConstraint Empty
    static void _set_Empty(::System::Xml::Schema::CompiledIdentityConstraint* value);
    // Get instance field reference: System.Xml.XmlQualifiedName name
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlQualifiedName*& dyn_name();
    // Get instance field reference: private System.Xml.Schema.CompiledIdentityConstraint/System.Xml.Schema.ConstraintRole role
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::CompiledIdentityConstraint::ConstraintRole& dyn_role();
    // Get instance field reference: private System.Xml.Schema.Asttree selector
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::Asttree*& dyn_selector();
    // Get instance field reference: private System.Xml.Schema.Asttree[] fields
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Xml::Schema::Asttree*>& dyn_fields();
    // Get instance field reference: System.Xml.XmlQualifiedName refer
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlQualifiedName*& dyn_refer();
    // public System.Xml.Schema.CompiledIdentityConstraint/System.Xml.Schema.ConstraintRole get_Role()
    // Offset: 0xB67050
    ::System::Xml::Schema::CompiledIdentityConstraint::ConstraintRole get_Role();
    // public System.Xml.Schema.Asttree get_Selector()
    // Offset: 0xB67058
    ::System::Xml::Schema::Asttree* get_Selector();
    // public System.Xml.Schema.Asttree[] get_Fields()
    // Offset: 0xB67060
    ::ArrayW<::System::Xml::Schema::Asttree*> get_Fields();
    // private System.Void .ctor()
    // Offset: 0xB67068
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CompiledIdentityConstraint* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::CompiledIdentityConstraint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CompiledIdentityConstraint*, creationType>()));
    }
    // public System.Void .ctor(System.Xml.Schema.XmlSchemaIdentityConstraint constraint, System.Xml.XmlNamespaceManager nsmgr)
    // Offset: 0xB670E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CompiledIdentityConstraint* New_ctor(::System::Xml::Schema::XmlSchemaIdentityConstraint* constraint, ::System::Xml::XmlNamespaceManager* nsmgr) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::CompiledIdentityConstraint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CompiledIdentityConstraint*, creationType>(constraint, nsmgr)));
    }
    // static private System.Void .cctor()
    // Offset: 0xB675B0
    static void _cctor();
  }; // System.Xml.Schema.CompiledIdentityConstraint
  #pragma pack(pop)
  static check_size<sizeof(CompiledIdentityConstraint), 48 + sizeof(::System::Xml::XmlQualifiedName*)> __System_Xml_Schema_CompiledIdentityConstraintSizeCheck;
  static_assert(sizeof(CompiledIdentityConstraint) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::CompiledIdentityConstraint::ConstraintRole, "System.Xml.Schema", "CompiledIdentityConstraint/ConstraintRole");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::CompiledIdentityConstraint::get_Role
// Il2CppName: get_Role
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::CompiledIdentityConstraint::ConstraintRole (System::Xml::Schema::CompiledIdentityConstraint::*)()>(&System::Xml::Schema::CompiledIdentityConstraint::get_Role)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::CompiledIdentityConstraint*), "get_Role", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::CompiledIdentityConstraint::get_Selector
// Il2CppName: get_Selector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::Asttree* (System::Xml::Schema::CompiledIdentityConstraint::*)()>(&System::Xml::Schema::CompiledIdentityConstraint::get_Selector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::CompiledIdentityConstraint*), "get_Selector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::CompiledIdentityConstraint::get_Fields
// Il2CppName: get_Fields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Xml::Schema::Asttree*> (System::Xml::Schema::CompiledIdentityConstraint::*)()>(&System::Xml::Schema::CompiledIdentityConstraint::get_Fields)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::CompiledIdentityConstraint*), "get_Fields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::CompiledIdentityConstraint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::CompiledIdentityConstraint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::CompiledIdentityConstraint::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::Schema::CompiledIdentityConstraint::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::CompiledIdentityConstraint*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
