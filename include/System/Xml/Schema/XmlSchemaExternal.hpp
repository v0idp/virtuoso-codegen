// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlSchemaObject
#include "System/Xml/Schema/XmlSchemaObject.hpp"
// Including type: System.Xml.Schema.Compositor
#include "System/Xml/Schema/Compositor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchema
  class XmlSchema;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlAttribute
  class XmlAttribute;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaExternal
  class XmlSchemaExternal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchemaExternal);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaExternal*, "System.Xml.Schema", "XmlSchemaExternal");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaExternal
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSchemaExternal : public ::System::Xml::Schema::XmlSchemaObject {
    public:
    // Writing base type padding for base size: 0x31 to desired offset: 0x38
    char ___base_padding[0x7] = {};
    public:
    // private System.String location
    // Size: 0x8
    // Offset: 0x38
    ::StringW location;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Uri baseUri
    // Size: 0x8
    // Offset: 0x40
    ::System::Uri* baseUri;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // private System.Xml.Schema.XmlSchema schema
    // Size: 0x8
    // Offset: 0x48
    ::System::Xml::Schema::XmlSchema* schema;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchema*) == 0x8);
    // private System.String id
    // Size: 0x8
    // Offset: 0x50
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.XmlAttribute[] moreAttributes
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::System::Xml::XmlAttribute*> moreAttributes;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::XmlAttribute*>) == 0x8);
    // private System.Xml.Schema.Compositor compositor
    // Size: 0x4
    // Offset: 0x60
    ::System::Xml::Schema::Compositor compositor;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::Compositor) == 0x4);
    public:
    // Get instance field reference: private System.String location
    [[deprecated("Use field access instead!")]] ::StringW& dyn_location();
    // Get instance field reference: private System.Uri baseUri
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn_baseUri();
    // Get instance field reference: private System.Xml.Schema.XmlSchema schema
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchema*& dyn_schema();
    // Get instance field reference: private System.String id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_id();
    // Get instance field reference: private System.Xml.XmlAttribute[] moreAttributes
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Xml::XmlAttribute*>& dyn_moreAttributes();
    // Get instance field reference: private System.Xml.Schema.Compositor compositor
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::Compositor& dyn_compositor();
    // public System.String get_SchemaLocation()
    // Offset: 0x110EE10
    ::StringW get_SchemaLocation();
    // public System.Void set_SchemaLocation(System.String value)
    // Offset: 0x110EE18
    void set_SchemaLocation(::StringW value);
    // public System.Xml.Schema.XmlSchema get_Schema()
    // Offset: 0x110EE20
    ::System::Xml::Schema::XmlSchema* get_Schema();
    // public System.Void set_Schema(System.Xml.Schema.XmlSchema value)
    // Offset: 0x110EE28
    void set_Schema(::System::Xml::Schema::XmlSchema* value);
    // public System.String get_Id()
    // Offset: 0x110EE30
    ::StringW get_Id();
    // public System.Void set_Id(System.String value)
    // Offset: 0x110EE38
    void set_Id(::StringW value);
    // System.Uri get_BaseUri()
    // Offset: 0x110EE40
    ::System::Uri* get_BaseUri();
    // System.Void set_BaseUri(System.Uri value)
    // Offset: 0x110EE48
    void set_BaseUri(::System::Uri* value);
    // System.Xml.Schema.Compositor get_Compositor()
    // Offset: 0x110EE68
    ::System::Xml::Schema::Compositor get_Compositor();
    // System.Void set_Compositor(System.Xml.Schema.Compositor value)
    // Offset: 0x110EE70
    void set_Compositor(::System::Xml::Schema::Compositor value);
    // override System.String get_IdAttribute()
    // Offset: 0x110EE50
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.String XmlSchemaObject::get_IdAttribute()
    ::StringW get_IdAttribute();
    // override System.Void set_IdAttribute(System.String value)
    // Offset: 0x110EE58
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.Void XmlSchemaObject::set_IdAttribute(System.String value)
    void set_IdAttribute(::StringW value);
    // protected System.Void .ctor()
    // Offset: 0x110EE78
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.Void XmlSchemaObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaExternal* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaExternal::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaExternal*, creationType>()));
    }
    // override System.Void SetUnhandledAttributes(System.Xml.XmlAttribute[] moreAttributes)
    // Offset: 0x110EE60
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.Void XmlSchemaObject::SetUnhandledAttributes(System.Xml.XmlAttribute[] moreAttributes)
    void SetUnhandledAttributes(::ArrayW<::System::Xml::XmlAttribute*> moreAttributes);
  }; // System.Xml.Schema.XmlSchemaExternal
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaExternal), 96 + sizeof(::System::Xml::Schema::Compositor)> __System_Xml_Schema_XmlSchemaExternalSizeCheck;
  static_assert(sizeof(XmlSchemaExternal) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaExternal::get_SchemaLocation
// Il2CppName: get_SchemaLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaExternal::*)()>(&System::Xml::Schema::XmlSchemaExternal::get_SchemaLocation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaExternal*), "get_SchemaLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaExternal::set_SchemaLocation
// Il2CppName: set_SchemaLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaExternal::*)(::StringW)>(&System::Xml::Schema::XmlSchemaExternal::set_SchemaLocation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaExternal*), "set_SchemaLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaExternal::get_Schema
// Il2CppName: get_Schema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Xml::Schema::XmlSchemaExternal::*)()>(&System::Xml::Schema::XmlSchemaExternal::get_Schema)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaExternal*), "get_Schema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaExternal::set_Schema
// Il2CppName: set_Schema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaExternal::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchemaExternal::set_Schema)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaExternal*), "set_Schema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaExternal::get_Id
// Il2CppName: get_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaExternal::*)()>(&System::Xml::Schema::XmlSchemaExternal::get_Id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaExternal*), "get_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaExternal::set_Id
// Il2CppName: set_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaExternal::*)(::StringW)>(&System::Xml::Schema::XmlSchemaExternal::set_Id)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaExternal*), "set_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaExternal::get_BaseUri
// Il2CppName: get_BaseUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Xml::Schema::XmlSchemaExternal::*)()>(&System::Xml::Schema::XmlSchemaExternal::get_BaseUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaExternal*), "get_BaseUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaExternal::set_BaseUri
// Il2CppName: set_BaseUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaExternal::*)(::System::Uri*)>(&System::Xml::Schema::XmlSchemaExternal::set_BaseUri)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaExternal*), "set_BaseUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaExternal::get_Compositor
// Il2CppName: get_Compositor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::Compositor (System::Xml::Schema::XmlSchemaExternal::*)()>(&System::Xml::Schema::XmlSchemaExternal::get_Compositor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaExternal*), "get_Compositor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaExternal::set_Compositor
// Il2CppName: set_Compositor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaExternal::*)(::System::Xml::Schema::Compositor)>(&System::Xml::Schema::XmlSchemaExternal::set_Compositor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "Compositor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaExternal*), "set_Compositor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaExternal::get_IdAttribute
// Il2CppName: get_IdAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaExternal::*)()>(&System::Xml::Schema::XmlSchemaExternal::get_IdAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaExternal*), "get_IdAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaExternal::set_IdAttribute
// Il2CppName: set_IdAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaExternal::*)(::StringW)>(&System::Xml::Schema::XmlSchemaExternal::set_IdAttribute)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaExternal*), "set_IdAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaExternal::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaExternal::SetUnhandledAttributes
// Il2CppName: SetUnhandledAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaExternal::*)(::ArrayW<::System::Xml::XmlAttribute*>)>(&System::Xml::Schema::XmlSchemaExternal::SetUnhandledAttributes)> {
  static const MethodInfo* get() {
    static auto* moreAttributes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Xml", "XmlAttribute"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaExternal*), "SetUnhandledAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{moreAttributes});
  }
};
