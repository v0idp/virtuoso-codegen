// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlSchemaAnnotated
#include "System/Xml/Schema/XmlSchemaAnnotated.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaXPath
  class XmlSchemaXPath;
  // Forward declaring type: XmlSchemaObjectCollection
  class XmlSchemaObjectCollection;
  // Forward declaring type: CompiledIdentityConstraint
  class CompiledIdentityConstraint;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaIdentityConstraint
  class XmlSchemaIdentityConstraint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchemaIdentityConstraint);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaIdentityConstraint*, "System.Xml.Schema", "XmlSchemaIdentityConstraint");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaIdentityConstraint
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSchemaIdentityConstraint : public ::System::Xml::Schema::XmlSchemaAnnotated {
    public:
    public:
    // private System.String name
    // Size: 0x8
    // Offset: 0x50
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.Schema.XmlSchemaXPath selector
    // Size: 0x8
    // Offset: 0x58
    ::System::Xml::Schema::XmlSchemaXPath* selector;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaXPath*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectCollection fields
    // Size: 0x8
    // Offset: 0x60
    ::System::Xml::Schema::XmlSchemaObjectCollection* fields;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectCollection*) == 0x8);
    // private System.Xml.XmlQualifiedName qualifiedName
    // Size: 0x8
    // Offset: 0x68
    ::System::Xml::XmlQualifiedName* qualifiedName;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    // private System.Xml.Schema.CompiledIdentityConstraint compiledConstraint
    // Size: 0x8
    // Offset: 0x70
    ::System::Xml::Schema::CompiledIdentityConstraint* compiledConstraint;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::CompiledIdentityConstraint*) == 0x8);
    public:
    // Get instance field reference: private System.String name
    [[deprecated]] ::StringW& dyn_name();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaXPath selector
    [[deprecated]] ::System::Xml::Schema::XmlSchemaXPath*& dyn_selector();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectCollection fields
    [[deprecated]] ::System::Xml::Schema::XmlSchemaObjectCollection*& dyn_fields();
    // Get instance field reference: private System.Xml.XmlQualifiedName qualifiedName
    [[deprecated]] ::System::Xml::XmlQualifiedName*& dyn_qualifiedName();
    // Get instance field reference: private System.Xml.Schema.CompiledIdentityConstraint compiledConstraint
    [[deprecated]] ::System::Xml::Schema::CompiledIdentityConstraint*& dyn_compiledConstraint();
    // public System.String get_Name()
    // Offset: 0x110F14C
    ::StringW get_Name();
    // public System.Void set_Name(System.String value)
    // Offset: 0x110F154
    void set_Name(::StringW value);
    // public System.Xml.Schema.XmlSchemaXPath get_Selector()
    // Offset: 0x110F15C
    ::System::Xml::Schema::XmlSchemaXPath* get_Selector();
    // public System.Void set_Selector(System.Xml.Schema.XmlSchemaXPath value)
    // Offset: 0x110F164
    void set_Selector(::System::Xml::Schema::XmlSchemaXPath* value);
    // public System.Xml.Schema.XmlSchemaObjectCollection get_Fields()
    // Offset: 0x110F16C
    ::System::Xml::Schema::XmlSchemaObjectCollection* get_Fields();
    // public System.Xml.XmlQualifiedName get_QualifiedName()
    // Offset: 0x110F174
    ::System::Xml::XmlQualifiedName* get_QualifiedName();
    // System.Xml.Schema.CompiledIdentityConstraint get_CompiledConstraint()
    // Offset: 0x110F184
    ::System::Xml::Schema::CompiledIdentityConstraint* get_CompiledConstraint();
    // System.Void set_CompiledConstraint(System.Xml.Schema.CompiledIdentityConstraint value)
    // Offset: 0x110F18C
    void set_CompiledConstraint(::System::Xml::Schema::CompiledIdentityConstraint* value);
    // System.Void SetQualifiedName(System.Xml.XmlQualifiedName value)
    // Offset: 0x110F17C
    void SetQualifiedName(::System::Xml::XmlQualifiedName* value);
    // override System.String get_NameAttribute()
    // Offset: 0x110F194
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.String XmlSchemaObject::get_NameAttribute()
    ::StringW get_NameAttribute();
    // override System.Void set_NameAttribute(System.String value)
    // Offset: 0x110F19C
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.Void XmlSchemaObject::set_NameAttribute(System.String value)
    void set_NameAttribute(::StringW value);
    // public System.Void .ctor()
    // Offset: 0x110F1A4
    // Implemented from: System.Xml.Schema.XmlSchemaAnnotated
    // Base method: System.Void XmlSchemaAnnotated::.ctor()
    // Base method: System.Void XmlSchemaObject::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaIdentityConstraint* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaIdentityConstraint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaIdentityConstraint*, creationType>()));
    }
  }; // System.Xml.Schema.XmlSchemaIdentityConstraint
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaIdentityConstraint), 112 + sizeof(::System::Xml::Schema::CompiledIdentityConstraint*)> __System_Xml_Schema_XmlSchemaIdentityConstraintSizeCheck;
  static_assert(sizeof(XmlSchemaIdentityConstraint) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaIdentityConstraint::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaIdentityConstraint::*)()>(&System::Xml::Schema::XmlSchemaIdentityConstraint::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaIdentityConstraint*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaIdentityConstraint::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaIdentityConstraint::*)(::StringW)>(&System::Xml::Schema::XmlSchemaIdentityConstraint::set_Name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaIdentityConstraint*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaIdentityConstraint::get_Selector
// Il2CppName: get_Selector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaXPath* (System::Xml::Schema::XmlSchemaIdentityConstraint::*)()>(&System::Xml::Schema::XmlSchemaIdentityConstraint::get_Selector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaIdentityConstraint*), "get_Selector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaIdentityConstraint::set_Selector
// Il2CppName: set_Selector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaIdentityConstraint::*)(::System::Xml::Schema::XmlSchemaXPath*)>(&System::Xml::Schema::XmlSchemaIdentityConstraint::set_Selector)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaXPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaIdentityConstraint*), "set_Selector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaIdentityConstraint::get_Fields
// Il2CppName: get_Fields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectCollection* (System::Xml::Schema::XmlSchemaIdentityConstraint::*)()>(&System::Xml::Schema::XmlSchemaIdentityConstraint::get_Fields)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaIdentityConstraint*), "get_Fields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaIdentityConstraint::get_QualifiedName
// Il2CppName: get_QualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Schema::XmlSchemaIdentityConstraint::*)()>(&System::Xml::Schema::XmlSchemaIdentityConstraint::get_QualifiedName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaIdentityConstraint*), "get_QualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaIdentityConstraint::get_CompiledConstraint
// Il2CppName: get_CompiledConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::CompiledIdentityConstraint* (System::Xml::Schema::XmlSchemaIdentityConstraint::*)()>(&System::Xml::Schema::XmlSchemaIdentityConstraint::get_CompiledConstraint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaIdentityConstraint*), "get_CompiledConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaIdentityConstraint::set_CompiledConstraint
// Il2CppName: set_CompiledConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaIdentityConstraint::*)(::System::Xml::Schema::CompiledIdentityConstraint*)>(&System::Xml::Schema::XmlSchemaIdentityConstraint::set_CompiledConstraint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "CompiledIdentityConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaIdentityConstraint*), "set_CompiledConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaIdentityConstraint::SetQualifiedName
// Il2CppName: SetQualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaIdentityConstraint::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XmlSchemaIdentityConstraint::SetQualifiedName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaIdentityConstraint*), "SetQualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaIdentityConstraint::get_NameAttribute
// Il2CppName: get_NameAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaIdentityConstraint::*)()>(&System::Xml::Schema::XmlSchemaIdentityConstraint::get_NameAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaIdentityConstraint*), "get_NameAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaIdentityConstraint::set_NameAttribute
// Il2CppName: set_NameAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaIdentityConstraint::*)(::StringW)>(&System::Xml::Schema::XmlSchemaIdentityConstraint::set_NameAttribute)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaIdentityConstraint*), "set_NameAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaIdentityConstraint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
