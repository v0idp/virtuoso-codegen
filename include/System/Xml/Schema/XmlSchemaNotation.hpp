// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlSchemaAnnotated
#include "System/Xml/Schema/XmlSchemaAnnotated.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaNotation
  class XmlSchemaNotation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchemaNotation);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaNotation*, "System.Xml.Schema", "XmlSchemaNotation");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaNotation
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSchemaNotation : public ::System::Xml::Schema::XmlSchemaAnnotated {
    public:
    public:
    // private System.String name
    // Size: 0x8
    // Offset: 0x50
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String publicId
    // Size: 0x8
    // Offset: 0x58
    ::StringW publicId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String systemId
    // Size: 0x8
    // Offset: 0x60
    ::StringW systemId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.XmlQualifiedName qname
    // Size: 0x8
    // Offset: 0x68
    ::System::Xml::XmlQualifiedName* qname;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    public:
    // Get instance field reference: private System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: private System.String publicId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_publicId();
    // Get instance field reference: private System.String systemId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_systemId();
    // Get instance field reference: private System.Xml.XmlQualifiedName qname
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlQualifiedName*& dyn_qname();
    // public System.String get_Name()
    // Offset: 0x11194A4
    ::StringW get_Name();
    // public System.Void set_Name(System.String value)
    // Offset: 0x11194AC
    void set_Name(::StringW value);
    // public System.String get_Public()
    // Offset: 0x11194B4
    ::StringW get_Public();
    // public System.Void set_Public(System.String value)
    // Offset: 0x11194BC
    void set_Public(::StringW value);
    // public System.String get_System()
    // Offset: 0x11194C4
    ::StringW get_System();
    // public System.Void set_System(System.String value)
    // Offset: 0x11194CC
    void set_System(::StringW value);
    // System.Xml.XmlQualifiedName get_QualifiedName()
    // Offset: 0x11194D4
    ::System::Xml::XmlQualifiedName* get_QualifiedName();
    // System.Void set_QualifiedName(System.Xml.XmlQualifiedName value)
    // Offset: 0x11194DC
    void set_QualifiedName(::System::Xml::XmlQualifiedName* value);
    // override System.String get_NameAttribute()
    // Offset: 0x11194E4
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.String XmlSchemaObject::get_NameAttribute()
    ::StringW get_NameAttribute();
    // override System.Void set_NameAttribute(System.String value)
    // Offset: 0x11194EC
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.Void XmlSchemaObject::set_NameAttribute(System.String value)
    void set_NameAttribute(::StringW value);
    // public System.Void .ctor()
    // Offset: 0x11194F4
    // Implemented from: System.Xml.Schema.XmlSchemaAnnotated
    // Base method: System.Void XmlSchemaAnnotated::.ctor()
    // Base method: System.Void XmlSchemaObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaNotation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaNotation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaNotation*, creationType>()));
    }
  }; // System.Xml.Schema.XmlSchemaNotation
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaNotation), 104 + sizeof(::System::Xml::XmlQualifiedName*)> __System_Xml_Schema_XmlSchemaNotationSizeCheck;
  static_assert(sizeof(XmlSchemaNotation) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaNotation::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaNotation::*)()>(&System::Xml::Schema::XmlSchemaNotation::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaNotation*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaNotation::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaNotation::*)(::StringW)>(&System::Xml::Schema::XmlSchemaNotation::set_Name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaNotation*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaNotation::get_Public
// Il2CppName: get_Public
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaNotation::*)()>(&System::Xml::Schema::XmlSchemaNotation::get_Public)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaNotation*), "get_Public", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaNotation::set_Public
// Il2CppName: set_Public
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaNotation::*)(::StringW)>(&System::Xml::Schema::XmlSchemaNotation::set_Public)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaNotation*), "set_Public", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaNotation::get_System
// Il2CppName: get_System
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaNotation::*)()>(&System::Xml::Schema::XmlSchemaNotation::get_System)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaNotation*), "get_System", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaNotation::set_System
// Il2CppName: set_System
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaNotation::*)(::StringW)>(&System::Xml::Schema::XmlSchemaNotation::set_System)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaNotation*), "set_System", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaNotation::get_QualifiedName
// Il2CppName: get_QualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Schema::XmlSchemaNotation::*)()>(&System::Xml::Schema::XmlSchemaNotation::get_QualifiedName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaNotation*), "get_QualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaNotation::set_QualifiedName
// Il2CppName: set_QualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaNotation::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XmlSchemaNotation::set_QualifiedName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaNotation*), "set_QualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaNotation::get_NameAttribute
// Il2CppName: get_NameAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaNotation::*)()>(&System::Xml::Schema::XmlSchemaNotation::get_NameAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaNotation*), "get_NameAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaNotation::set_NameAttribute
// Il2CppName: set_NameAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaNotation::*)(::StringW)>(&System::Xml::Schema::XmlSchemaNotation::set_NameAttribute)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaNotation*), "set_NameAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaNotation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
