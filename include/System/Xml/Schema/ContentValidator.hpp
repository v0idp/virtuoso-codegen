// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlSchemaContentType
#include "System/Xml/Schema/XmlSchemaContentType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: ValidationState
  class ValidationState;
  // Forward declaring type: XmlSchemaSet
  class XmlSchemaSet;
  // Forward declaring type: XmlSchemaParticle
  class XmlSchemaParticle;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: ContentValidator
  class ContentValidator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::ContentValidator);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::ContentValidator*, "System.Xml.Schema", "ContentValidator");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x16
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.ContentValidator
  // [TokenAttribute] Offset: FFFFFFFF
  class ContentValidator : public ::Il2CppObject {
    public:
    public:
    // private System.Xml.Schema.XmlSchemaContentType contentType
    // Size: 0x4
    // Offset: 0x10
    ::System::Xml::Schema::XmlSchemaContentType contentType;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaContentType) == 0x4);
    // private System.Boolean isOpen
    // Size: 0x1
    // Offset: 0x14
    bool isOpen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isEmptiable
    // Size: 0x1
    // Offset: 0x15
    bool isEmptiable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static public readonly System.Xml.Schema.ContentValidator Empty
    static ::System::Xml::Schema::ContentValidator* _get_Empty();
    // Set static field: static public readonly System.Xml.Schema.ContentValidator Empty
    static void _set_Empty(::System::Xml::Schema::ContentValidator* value);
    // Get static field: static public readonly System.Xml.Schema.ContentValidator TextOnly
    static ::System::Xml::Schema::ContentValidator* _get_TextOnly();
    // Set static field: static public readonly System.Xml.Schema.ContentValidator TextOnly
    static void _set_TextOnly(::System::Xml::Schema::ContentValidator* value);
    // Get static field: static public readonly System.Xml.Schema.ContentValidator Mixed
    static ::System::Xml::Schema::ContentValidator* _get_Mixed();
    // Set static field: static public readonly System.Xml.Schema.ContentValidator Mixed
    static void _set_Mixed(::System::Xml::Schema::ContentValidator* value);
    // Get static field: static public readonly System.Xml.Schema.ContentValidator Any
    static ::System::Xml::Schema::ContentValidator* _get_Any();
    // Set static field: static public readonly System.Xml.Schema.ContentValidator Any
    static void _set_Any(::System::Xml::Schema::ContentValidator* value);
    // Get instance field reference: private System.Xml.Schema.XmlSchemaContentType contentType
    [[deprecated]] ::System::Xml::Schema::XmlSchemaContentType& dyn_contentType();
    // Get instance field reference: private System.Boolean isOpen
    [[deprecated]] bool& dyn_isOpen();
    // Get instance field reference: private System.Boolean isEmptiable
    [[deprecated]] bool& dyn_isEmptiable();
    // public System.Xml.Schema.XmlSchemaContentType get_ContentType()
    // Offset: 0x109E4D8
    ::System::Xml::Schema::XmlSchemaContentType get_ContentType();
    // public System.Boolean get_PreserveWhitespace()
    // Offset: 0x109E4E0
    bool get_PreserveWhitespace();
    // public System.Boolean get_IsEmptiable()
    // Offset: 0x109E4FC
    bool get_IsEmptiable();
    // public System.Boolean get_IsOpen()
    // Offset: 0x109E504
    bool get_IsOpen();
    // public System.Void set_IsOpen(System.Boolean value)
    // Offset: 0x109E528
    void set_IsOpen(bool value);
    // public System.Void .ctor(System.Xml.Schema.XmlSchemaContentType contentType)
    // Offset: 0x109E458
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ContentValidator* New_ctor(::System::Xml::Schema::XmlSchemaContentType contentType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::ContentValidator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ContentValidator*, creationType>(contentType)));
    }
    // protected System.Void .ctor(System.Xml.Schema.XmlSchemaContentType contentType, System.Boolean isOpen, System.Boolean isEmptiable)
    // Offset: 0x109E48C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ContentValidator* New_ctor(::System::Xml::Schema::XmlSchemaContentType contentType, bool isOpen, bool isEmptiable) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::ContentValidator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ContentValidator*, creationType>(contentType, isOpen, isEmptiable)));
    }
    // static private System.Void .cctor()
    // Offset: 0x109E834
    static void _cctor();
    // public System.Void InitValidation(System.Xml.Schema.ValidationState context)
    // Offset: 0x109E534
    void InitValidation(::System::Xml::Schema::ValidationState* context);
    // public System.Object ValidateElement(System.Xml.XmlQualifiedName name, System.Xml.Schema.ValidationState context, out System.Int32 errorCode)
    // Offset: 0x109E538
    ::Il2CppObject* ValidateElement(::System::Xml::XmlQualifiedName* name, ::System::Xml::Schema::ValidationState* context, ByRef<int> errorCode);
    // public System.Boolean CompleteValidation(System.Xml.Schema.ValidationState context)
    // Offset: 0x109E568
    bool CompleteValidation(::System::Xml::Schema::ValidationState* context);
    // public System.Collections.ArrayList ExpectedElements(System.Xml.Schema.ValidationState context, System.Boolean isRequiredOnly)
    // Offset: 0x109E570
    ::System::Collections::ArrayList* ExpectedElements(::System::Xml::Schema::ValidationState* context, bool isRequiredOnly);
    // public System.Collections.ArrayList ExpectedParticles(System.Xml.Schema.ValidationState context, System.Boolean isRequiredOnly, System.Xml.Schema.XmlSchemaSet schemaSet)
    // Offset: 0x109E578
    ::System::Collections::ArrayList* ExpectedParticles(::System::Xml::Schema::ValidationState* context, bool isRequiredOnly, ::System::Xml::Schema::XmlSchemaSet* schemaSet);
    // static public System.Void AddParticleToExpected(System.Xml.Schema.XmlSchemaParticle p, System.Xml.Schema.XmlSchemaSet schemaSet, System.Collections.ArrayList particles)
    // Offset: 0x109E580
    static void AddParticleToExpected(::System::Xml::Schema::XmlSchemaParticle* p, ::System::Xml::Schema::XmlSchemaSet* schemaSet, ::System::Collections::ArrayList* particles);
    // static public System.Void AddParticleToExpected(System.Xml.Schema.XmlSchemaParticle p, System.Xml.Schema.XmlSchemaSet schemaSet, System.Collections.ArrayList particles, System.Boolean global)
    // Offset: 0x109E5FC
    static void AddParticleToExpected(::System::Xml::Schema::XmlSchemaParticle* p, ::System::Xml::Schema::XmlSchemaSet* schemaSet, ::System::Collections::ArrayList* particles, bool global);
  }; // System.Xml.Schema.ContentValidator
  #pragma pack(pop)
  static check_size<sizeof(ContentValidator), 21 + sizeof(bool)> __System_Xml_Schema_ContentValidatorSizeCheck;
  static_assert(sizeof(ContentValidator) == 0x16);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::ContentValidator::get_ContentType
// Il2CppName: get_ContentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaContentType (System::Xml::Schema::ContentValidator::*)()>(&System::Xml::Schema::ContentValidator::get_ContentType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ContentValidator*), "get_ContentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ContentValidator::get_PreserveWhitespace
// Il2CppName: get_PreserveWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::ContentValidator::*)()>(&System::Xml::Schema::ContentValidator::get_PreserveWhitespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ContentValidator*), "get_PreserveWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ContentValidator::get_IsEmptiable
// Il2CppName: get_IsEmptiable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::ContentValidator::*)()>(&System::Xml::Schema::ContentValidator::get_IsEmptiable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ContentValidator*), "get_IsEmptiable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ContentValidator::get_IsOpen
// Il2CppName: get_IsOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::ContentValidator::*)()>(&System::Xml::Schema::ContentValidator::get_IsOpen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ContentValidator*), "get_IsOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ContentValidator::set_IsOpen
// Il2CppName: set_IsOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::ContentValidator::*)(bool)>(&System::Xml::Schema::ContentValidator::set_IsOpen)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ContentValidator*), "set_IsOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ContentValidator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::ContentValidator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::ContentValidator::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::Schema::ContentValidator::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ContentValidator*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ContentValidator::InitValidation
// Il2CppName: InitValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::ContentValidator::*)(::System::Xml::Schema::ValidationState*)>(&System::Xml::Schema::ContentValidator::InitValidation)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ContentValidator*), "InitValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ContentValidator::ValidateElement
// Il2CppName: ValidateElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::ContentValidator::*)(::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::ValidationState*, ByRef<int>)>(&System::Xml::Schema::ContentValidator::ValidateElement)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationState")->byval_arg;
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ContentValidator*), "ValidateElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, context, errorCode});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ContentValidator::CompleteValidation
// Il2CppName: CompleteValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::ContentValidator::*)(::System::Xml::Schema::ValidationState*)>(&System::Xml::Schema::ContentValidator::CompleteValidation)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ContentValidator*), "CompleteValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ContentValidator::ExpectedElements
// Il2CppName: ExpectedElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ArrayList* (System::Xml::Schema::ContentValidator::*)(::System::Xml::Schema::ValidationState*, bool)>(&System::Xml::Schema::ContentValidator::ExpectedElements)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationState")->byval_arg;
    static auto* isRequiredOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ContentValidator*), "ExpectedElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, isRequiredOnly});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ContentValidator::ExpectedParticles
// Il2CppName: ExpectedParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ArrayList* (System::Xml::Schema::ContentValidator::*)(::System::Xml::Schema::ValidationState*, bool, ::System::Xml::Schema::XmlSchemaSet*)>(&System::Xml::Schema::ContentValidator::ExpectedParticles)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationState")->byval_arg;
    static auto* isRequiredOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* schemaSet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ContentValidator*), "ExpectedParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, isRequiredOnly, schemaSet});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ContentValidator::AddParticleToExpected
// Il2CppName: AddParticleToExpected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XmlSchemaParticle*, ::System::Xml::Schema::XmlSchemaSet*, ::System::Collections::ArrayList*)>(&System::Xml::Schema::ContentValidator::AddParticleToExpected)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* schemaSet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSet")->byval_arg;
    static auto* particles = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ContentValidator*), "AddParticleToExpected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, schemaSet, particles});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ContentValidator::AddParticleToExpected
// Il2CppName: AddParticleToExpected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XmlSchemaParticle*, ::System::Xml::Schema::XmlSchemaSet*, ::System::Collections::ArrayList*, bool)>(&System::Xml::Schema::ContentValidator::AddParticleToExpected)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* schemaSet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSet")->byval_arg;
    static auto* particles = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    static auto* global = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ContentValidator*), "AddParticleToExpected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, schemaSet, particles, global});
  }
};
