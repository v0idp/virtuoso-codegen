// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IDictionaryEnumerator
  class IDictionaryEnumerator;
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchema
  class XmlSchema;
  // Forward declaring type: XmlSchemaCollectionNode
  class XmlSchemaCollectionNode;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaCollectionEnumerator
  class XmlSchemaCollectionEnumerator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchemaCollectionEnumerator);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaCollectionEnumerator*, "System.Xml.Schema", "XmlSchemaCollectionEnumerator");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaCollectionEnumerator
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSchemaCollectionEnumerator : public ::Il2CppObject/*, public ::System::Collections::IEnumerator*/ {
    public:
    public:
    // private System.Collections.IDictionaryEnumerator enumerator
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::IDictionaryEnumerator* enumerator;
    // Field size check
    static_assert(sizeof(::System::Collections::IDictionaryEnumerator*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::IEnumerator
    operator ::System::Collections::IEnumerator() noexcept {
      return *reinterpret_cast<::System::Collections::IEnumerator*>(this);
    }
    // Creating conversion operator: operator ::System::Collections::IDictionaryEnumerator*
    constexpr operator ::System::Collections::IDictionaryEnumerator*() const noexcept {
      return enumerator;
    }
    // Get instance field reference: private System.Collections.IDictionaryEnumerator enumerator
    [[deprecated]] ::System::Collections::IDictionaryEnumerator*& dyn_enumerator();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x110AD28
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.Xml.Schema.XmlSchema get_Current()
    // Offset: 0x110A608
    ::System::Xml::Schema::XmlSchema* get_Current();
    // System.Xml.Schema.XmlSchemaCollectionNode get_CurrentNode()
    // Offset: 0x110AD2C
    ::System::Xml::Schema::XmlSchemaCollectionNode* get_CurrentNode();
    // System.Void .ctor(System.Collections.Hashtable collection)
    // Offset: 0x110A448
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaCollectionEnumerator* New_ctor(::System::Collections::Hashtable* collection) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaCollectionEnumerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaCollectionEnumerator*, creationType>(collection)));
    }
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0x110ABCC
    void System_Collections_IEnumerator_Reset();
    // private System.Boolean System.Collections.IEnumerator.MoveNext()
    // Offset: 0x110AC7C
    bool System_Collections_IEnumerator_MoveNext();
    // public System.Boolean MoveNext()
    // Offset: 0x110A6EC
    bool MoveNext();
  }; // System.Xml.Schema.XmlSchemaCollectionEnumerator
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaCollectionEnumerator), 16 + sizeof(::System::Collections::IDictionaryEnumerator*)> __System_Xml_Schema_XmlSchemaCollectionEnumeratorSizeCheck;
  static_assert(sizeof(XmlSchemaCollectionEnumerator) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollectionEnumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlSchemaCollectionEnumerator::*)()>(&System::Xml::Schema::XmlSchemaCollectionEnumerator::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollectionEnumerator*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollectionEnumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Xml::Schema::XmlSchemaCollectionEnumerator::*)()>(&System::Xml::Schema::XmlSchemaCollectionEnumerator::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollectionEnumerator*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollectionEnumerator::get_CurrentNode
// Il2CppName: get_CurrentNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaCollectionNode* (System::Xml::Schema::XmlSchemaCollectionEnumerator::*)()>(&System::Xml::Schema::XmlSchemaCollectionEnumerator::get_CurrentNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollectionEnumerator*), "get_CurrentNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollectionEnumerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollectionEnumerator::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaCollectionEnumerator::*)()>(&System::Xml::Schema::XmlSchemaCollectionEnumerator::System_Collections_IEnumerator_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollectionEnumerator*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollectionEnumerator::System_Collections_IEnumerator_MoveNext
// Il2CppName: System.Collections.IEnumerator.MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaCollectionEnumerator::*)()>(&System::Xml::Schema::XmlSchemaCollectionEnumerator::System_Collections_IEnumerator_MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollectionEnumerator*), "System.Collections.IEnumerator.MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollectionEnumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaCollectionEnumerator::*)()>(&System::Xml::Schema::XmlSchemaCollectionEnumerator::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollectionEnumerator*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
