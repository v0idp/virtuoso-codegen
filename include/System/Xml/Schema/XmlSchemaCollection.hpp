// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.ICollection
#include "System/Collections/ICollection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: XmlResolver
  class XmlResolver;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: SchemaNames
  class SchemaNames;
  // Forward declaring type: ValidationEventHandler
  class ValidationEventHandler;
  // Forward declaring type: XmlSchema
  class XmlSchema;
  // Forward declaring type: XmlSchemaCollectionEnumerator
  class XmlSchemaCollectionEnumerator;
  // Forward declaring type: SchemaInfo
  class SchemaInfo;
  // Forward declaring type: XmlSchemaCollectionNode
  class XmlSchemaCollectionNode;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ReaderWriterLock
  class ReaderWriterLock;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaCollection
  class XmlSchemaCollection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchemaCollection);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaCollection*, "System.Xml.Schema", "XmlSchemaCollection");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaCollection
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 6A482C
  // [ObsoleteAttribute] Offset: 6A482C
  class XmlSchemaCollection : public ::Il2CppObject/*, public ::System::Collections::ICollection*/ {
    public:
    public:
    // private System.Collections.Hashtable collection
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Hashtable* collection;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Xml.XmlNameTable nameTable
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::XmlNameTable* nameTable;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNameTable*) == 0x8);
    // private System.Xml.Schema.SchemaNames schemaNames
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::Schema::SchemaNames* schemaNames;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::SchemaNames*) == 0x8);
    // private System.Threading.ReaderWriterLock wLock
    // Size: 0x8
    // Offset: 0x28
    ::System::Threading::ReaderWriterLock* wLock;
    // Field size check
    static_assert(sizeof(::System::Threading::ReaderWriterLock*) == 0x8);
    // private System.Int32 timeout
    // Size: 0x4
    // Offset: 0x30
    int timeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean isThreadSafe
    // Size: 0x1
    // Offset: 0x34
    bool isThreadSafe;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isThreadSafe and: validationEventHandler
    char __padding5[0x3] = {};
    // private System.Xml.Schema.ValidationEventHandler validationEventHandler
    // Size: 0x8
    // Offset: 0x38
    ::System::Xml::Schema::ValidationEventHandler* validationEventHandler;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::ValidationEventHandler*) == 0x8);
    // private System.Xml.XmlResolver xmlResolver
    // Size: 0x8
    // Offset: 0x40
    ::System::Xml::XmlResolver* xmlResolver;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlResolver*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::ICollection
    operator ::System::Collections::ICollection() noexcept {
      return *reinterpret_cast<::System::Collections::ICollection*>(this);
    }
    // Get instance field reference: private System.Collections.Hashtable collection
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_collection();
    // Get instance field reference: private System.Xml.XmlNameTable nameTable
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNameTable*& dyn_nameTable();
    // Get instance field reference: private System.Xml.Schema.SchemaNames schemaNames
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::SchemaNames*& dyn_schemaNames();
    // Get instance field reference: private System.Threading.ReaderWriterLock wLock
    [[deprecated("Use field access instead!")]] ::System::Threading::ReaderWriterLock*& dyn_wLock();
    // Get instance field reference: private System.Int32 timeout
    [[deprecated("Use field access instead!")]] int& dyn_timeout();
    // Get instance field reference: private System.Boolean isThreadSafe
    [[deprecated("Use field access instead!")]] bool& dyn_isThreadSafe();
    // Get instance field reference: private System.Xml.Schema.ValidationEventHandler validationEventHandler
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::ValidationEventHandler*& dyn_validationEventHandler();
    // Get instance field reference: private System.Xml.XmlResolver xmlResolver
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlResolver*& dyn_xmlResolver();
    // public System.Int32 get_Count()
    // Offset: 0x110A304
    int get_Count();
    // public System.Xml.XmlNameTable get_NameTable()
    // Offset: 0x110A328
    ::System::Xml::XmlNameTable* get_NameTable();
    // System.Void set_XmlResolver(System.Xml.XmlResolver value)
    // Offset: 0x110A330
    void set_XmlResolver(::System::Xml::XmlResolver* value);
    // public System.Xml.Schema.XmlSchema get_Item(System.String ns)
    // Offset: 0x110A338
    ::System::Xml::Schema::XmlSchema* get_Item(::StringW ns);
    // private System.Object System.Collections.ICollection.get_SyncRoot()
    // Offset: 0x110A798
    ::Il2CppObject* System_Collections_ICollection_get_SyncRoot();
    // private System.Int32 System.Collections.ICollection.get_Count()
    // Offset: 0x110A79C
    int System_Collections_ICollection_get_Count();
    // System.Xml.Schema.ValidationEventHandler get_EventHandler()
    // Offset: 0x110ABBC
    ::System::Xml::Schema::ValidationEventHandler* get_EventHandler();
    // System.Void set_EventHandler(System.Xml.Schema.ValidationEventHandler value)
    // Offset: 0x110ABC4
    void set_EventHandler(::System::Xml::Schema::ValidationEventHandler* value);
    // public System.Void .ctor(System.Xml.XmlNameTable nametable)
    // Offset: 0x110A1E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaCollection* New_ctor(::System::Xml::XmlNameTable* nametable) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaCollection*, creationType>(nametable)));
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x110A3E8
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // public System.Xml.Schema.XmlSchemaCollectionEnumerator GetEnumerator()
    // Offset: 0x110A490
    ::System::Xml::Schema::XmlSchemaCollectionEnumerator* GetEnumerator();
    // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
    // Offset: 0x110A4F0
    void System_Collections_ICollection_CopyTo(::System::Array* array, int index);
    // System.Xml.Schema.SchemaInfo GetSchemaInfo(System.String ns)
    // Offset: 0x110A7C0
    ::System::Xml::Schema::SchemaInfo* GetSchemaInfo(::StringW ns);
    // System.Xml.Schema.SchemaNames GetSchemaNames(System.Xml.XmlNameTable nt)
    // Offset: 0x110A870
    ::System::Xml::Schema::SchemaNames* GetSchemaNames(::System::Xml::XmlNameTable* nt);
    // System.Xml.Schema.XmlSchema Add(System.String ns, System.Xml.Schema.SchemaInfo schemaInfo, System.Xml.Schema.XmlSchema schema, System.Boolean compile)
    // Offset: 0x110A918
    ::System::Xml::Schema::XmlSchema* Add(::StringW ns, ::System::Xml::Schema::SchemaInfo* schemaInfo, ::System::Xml::Schema::XmlSchema* schema, bool compile);
    // private System.Xml.Schema.XmlSchema Add(System.String ns, System.Xml.Schema.SchemaInfo schemaInfo, System.Xml.Schema.XmlSchema schema, System.Boolean compile, System.Xml.XmlResolver resolver)
    // Offset: 0x110A924
    ::System::Xml::Schema::XmlSchema* Add(::StringW ns, ::System::Xml::Schema::SchemaInfo* schemaInfo, ::System::Xml::Schema::XmlSchema* schema, bool compile, ::System::Xml::XmlResolver* resolver);
    // private System.Void Add(System.String ns, System.Xml.Schema.XmlSchemaCollectionNode node)
    // Offset: 0x110AA80
    void Add(::StringW ns, ::System::Xml::Schema::XmlSchemaCollectionNode* node);
  }; // System.Xml.Schema.XmlSchemaCollection
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaCollection), 64 + sizeof(::System::Xml::XmlResolver*)> __System_Xml_Schema_XmlSchemaCollectionSizeCheck;
  static_assert(sizeof(XmlSchemaCollection) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollection::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::XmlSchemaCollection::*)()>(&System::Xml::Schema::XmlSchemaCollection::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollection*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollection::get_NameTable
// Il2CppName: get_NameTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNameTable* (System::Xml::Schema::XmlSchemaCollection::*)()>(&System::Xml::Schema::XmlSchemaCollection::get_NameTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollection*), "get_NameTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollection::set_XmlResolver
// Il2CppName: set_XmlResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaCollection::*)(::System::Xml::XmlResolver*)>(&System::Xml::Schema::XmlSchemaCollection::set_XmlResolver)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollection*), "set_XmlResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollection::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Xml::Schema::XmlSchemaCollection::*)(::StringW)>(&System::Xml::Schema::XmlSchemaCollection::get_Item)> {
  static const MethodInfo* get() {
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollection*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollection::System_Collections_ICollection_get_SyncRoot
// Il2CppName: System.Collections.ICollection.get_SyncRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlSchemaCollection::*)()>(&System::Xml::Schema::XmlSchemaCollection::System_Collections_ICollection_get_SyncRoot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollection*), "System.Collections.ICollection.get_SyncRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollection::System_Collections_ICollection_get_Count
// Il2CppName: System.Collections.ICollection.get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::XmlSchemaCollection::*)()>(&System::Xml::Schema::XmlSchemaCollection::System_Collections_ICollection_get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollection*), "System.Collections.ICollection.get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollection::get_EventHandler
// Il2CppName: get_EventHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::ValidationEventHandler* (System::Xml::Schema::XmlSchemaCollection::*)()>(&System::Xml::Schema::XmlSchemaCollection::get_EventHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollection*), "get_EventHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollection::set_EventHandler
// Il2CppName: set_EventHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaCollection::*)(::System::Xml::Schema::ValidationEventHandler*)>(&System::Xml::Schema::XmlSchemaCollection::set_EventHandler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollection*), "set_EventHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollection::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (System::Xml::Schema::XmlSchemaCollection::*)()>(&System::Xml::Schema::XmlSchemaCollection::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollection*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollection::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaCollectionEnumerator* (System::Xml::Schema::XmlSchemaCollection::*)()>(&System::Xml::Schema::XmlSchemaCollection::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollection*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollection::System_Collections_ICollection_CopyTo
// Il2CppName: System.Collections.ICollection.CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaCollection::*)(::System::Array*, int)>(&System::Xml::Schema::XmlSchemaCollection::System_Collections_ICollection_CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollection*), "System.Collections.ICollection.CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, index});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollection::GetSchemaInfo
// Il2CppName: GetSchemaInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaInfo* (System::Xml::Schema::XmlSchemaCollection::*)(::StringW)>(&System::Xml::Schema::XmlSchemaCollection::GetSchemaInfo)> {
  static const MethodInfo* get() {
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollection*), "GetSchemaInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollection::GetSchemaNames
// Il2CppName: GetSchemaNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaNames* (System::Xml::Schema::XmlSchemaCollection::*)(::System::Xml::XmlNameTable*)>(&System::Xml::Schema::XmlSchemaCollection::GetSchemaNames)> {
  static const MethodInfo* get() {
    static auto* nt = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollection*), "GetSchemaNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nt});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollection::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Xml::Schema::XmlSchemaCollection::*)(::StringW, ::System::Xml::Schema::SchemaInfo*, ::System::Xml::Schema::XmlSchema*, bool)>(&System::Xml::Schema::XmlSchemaCollection::Add)> {
  static const MethodInfo* get() {
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* schemaInfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaInfo")->byval_arg;
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* compile = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollection*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ns, schemaInfo, schema, compile});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollection::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Xml::Schema::XmlSchemaCollection::*)(::StringW, ::System::Xml::Schema::SchemaInfo*, ::System::Xml::Schema::XmlSchema*, bool, ::System::Xml::XmlResolver*)>(&System::Xml::Schema::XmlSchemaCollection::Add)> {
  static const MethodInfo* get() {
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* schemaInfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaInfo")->byval_arg;
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* compile = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* resolver = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollection*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ns, schemaInfo, schema, compile, resolver});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollection::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaCollection::*)(::StringW, ::System::Xml::Schema::XmlSchemaCollectionNode*)>(&System::Xml::Schema::XmlSchemaCollection::Add)> {
  static const MethodInfo* get() {
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaCollectionNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollection*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ns, node});
  }
};
