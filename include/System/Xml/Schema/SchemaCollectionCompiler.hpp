// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.BaseProcessor
#include "System/Xml/Schema/BaseProcessor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaObjectTable
  class XmlSchemaObjectTable;
  // Forward declaring type: XmlSchema
  class XmlSchema;
  // Forward declaring type: ValidationEventHandler
  class ValidationEventHandler;
  // Forward declaring type: SchemaInfo
  class SchemaInfo;
  // Forward declaring type: XmlSchemaAttribute
  class XmlSchemaAttribute;
  // Forward declaring type: XmlSchemaAttributeGroup
  class XmlSchemaAttributeGroup;
  // Forward declaring type: XmlSchemaComplexType
  class XmlSchemaComplexType;
  // Forward declaring type: XmlSchemaSimpleType
  class XmlSchemaSimpleType;
  // Forward declaring type: XmlSchemaElement
  class XmlSchemaElement;
  // Forward declaring type: XmlSchemaObjectCollection
  class XmlSchemaObjectCollection;
  // Forward declaring type: XmlSchemaGroup
  class XmlSchemaGroup;
  // Forward declaring type: XmlSchemaParticle
  class XmlSchemaParticle;
  // Forward declaring type: XmlSchemaSubstitutionGroupV1Compat
  class XmlSchemaSubstitutionGroupV1Compat;
  // Forward declaring type: XmlSchemaSubstitutionGroup
  class XmlSchemaSubstitutionGroup;
  // Forward declaring type: XmlSchemaSimpleContentExtension
  class XmlSchemaSimpleContentExtension;
  // Forward declaring type: XmlSchemaSimpleContentRestriction
  class XmlSchemaSimpleContentRestriction;
  // Forward declaring type: XmlSchemaComplexContent
  class XmlSchemaComplexContent;
  // Forward declaring type: XmlSchemaComplexContentExtension
  class XmlSchemaComplexContentExtension;
  // Forward declaring type: XmlSchemaComplexContentRestriction
  class XmlSchemaComplexContentRestriction;
  // Forward declaring type: XmlSchemaGroupRef
  class XmlSchemaGroupRef;
  // Forward declaring type: XmlSchemaAll
  class XmlSchemaAll;
  // Forward declaring type: XmlSchemaChoice
  class XmlSchemaChoice;
  // Forward declaring type: XmlSchemaSequence
  class XmlSchemaSequence;
  // Forward declaring type: XmlSchemaAny
  class XmlSchemaAny;
  // Forward declaring type: XmlSchemaGroupBase
  class XmlSchemaGroupBase;
  // Forward declaring type: XmlSchemaContentType
  struct XmlSchemaContentType;
  // Forward declaring type: XmlSchemaAnyAttribute
  class XmlSchemaAnyAttribute;
  // Forward declaring type: XmlSchemaDerivationMethod
  struct XmlSchemaDerivationMethod;
  // Forward declaring type: XmlSchemaIdentityConstraint
  class XmlSchemaIdentityConstraint;
  // Forward declaring type: ContentValidator
  class ContentValidator;
  // Forward declaring type: ParticleContentValidator
  class ParticleContentValidator;
  // Forward declaring type: XmlSchemaType
  class XmlSchemaType;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Stack
  class Stack;
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Decimal
  struct Decimal;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: SchemaCollectionCompiler
  class SchemaCollectionCompiler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::SchemaCollectionCompiler);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::SchemaCollectionCompiler*, "System.Xml.Schema", "SchemaCollectionCompiler");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.SchemaCollectionCompiler
  // [TokenAttribute] Offset: FFFFFFFF
  class SchemaCollectionCompiler : public ::System::Xml::Schema::BaseProcessor {
    public:
    public:
    // private System.Boolean compileContentModel
    // Size: 0x1
    // Offset: 0x40
    bool compileContentModel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: compileContentModel and: examplars
    char __padding0[0x7] = {};
    // private System.Xml.Schema.XmlSchemaObjectTable examplars
    // Size: 0x8
    // Offset: 0x48
    ::System::Xml::Schema::XmlSchemaObjectTable* examplars;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Collections.Stack complexTypeStack
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Stack* complexTypeStack;
    // Field size check
    static_assert(sizeof(::System::Collections::Stack*) == 0x8);
    // private System.Xml.Schema.XmlSchema schema
    // Size: 0x8
    // Offset: 0x58
    ::System::Xml::Schema::XmlSchema* schema;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchema*) == 0x8);
    public:
    // Get instance field reference: private System.Boolean compileContentModel
    [[deprecated("Use field access instead!")]] bool& dyn_compileContentModel();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable examplars
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_examplars();
    // Get instance field reference: private System.Collections.Stack complexTypeStack
    [[deprecated("Use field access instead!")]] ::System::Collections::Stack*& dyn_complexTypeStack();
    // Get instance field reference: private System.Xml.Schema.XmlSchema schema
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchema*& dyn_schema();
    // public System.Void .ctor(System.Xml.XmlNameTable nameTable, System.Xml.Schema.ValidationEventHandler eventHandler)
    // Offset: 0xDE9078
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SchemaCollectionCompiler* New_ctor(::System::Xml::XmlNameTable* nameTable, ::System::Xml::Schema::ValidationEventHandler* eventHandler) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::SchemaCollectionCompiler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SchemaCollectionCompiler*, creationType>(nameTable, eventHandler)));
    }
    // public System.Boolean Execute(System.Xml.Schema.XmlSchema schema, System.Xml.Schema.SchemaInfo schemaInfo, System.Boolean compileContentModel)
    // Offset: 0xDE9124
    bool Execute(::System::Xml::Schema::XmlSchema* schema, ::System::Xml::Schema::SchemaInfo* schemaInfo, bool compileContentModel);
    // private System.Void Prepare()
    // Offset: 0xDE9194
    void Prepare();
    // private System.Void Cleanup()
    // Offset: 0xDE95E0
    void Cleanup();
    // static System.Void Cleanup(System.Xml.Schema.XmlSchema schema)
    // Offset: 0xDED654
    static void Cleanup(::System::Xml::Schema::XmlSchema* schema);
    // private System.Void Compile()
    // Offset: 0xDEA3CC
    void Compile();
    // private System.Void Output(System.Xml.Schema.SchemaInfo schemaInfo)
    // Offset: 0xDEC1B4
    void Output(::System::Xml::Schema::SchemaInfo* schemaInfo);
    // static private System.Void CleanupAttribute(System.Xml.Schema.XmlSchemaAttribute attribute)
    // Offset: 0xDED618
    static void CleanupAttribute(::System::Xml::Schema::XmlSchemaAttribute* attribute);
    // static private System.Void CleanupAttributeGroup(System.Xml.Schema.XmlSchemaAttributeGroup attributeGroup)
    // Offset: 0xDED100
    static void CleanupAttributeGroup(::System::Xml::Schema::XmlSchemaAttributeGroup* attributeGroup);
    // static private System.Void CleanupComplexType(System.Xml.Schema.XmlSchemaComplexType complexType)
    // Offset: 0xDED148
    static void CleanupComplexType(::System::Xml::Schema::XmlSchemaComplexType* complexType);
    // static private System.Void CleanupSimpleType(System.Xml.Schema.XmlSchemaSimpleType simpleType)
    // Offset: 0xDED47C
    static void CleanupSimpleType(::System::Xml::Schema::XmlSchemaSimpleType* simpleType);
    // static private System.Void CleanupElement(System.Xml.Schema.XmlSchemaElement element)
    // Offset: 0xDED498
    static void CleanupElement(::System::Xml::Schema::XmlSchemaElement* element);
    // static private System.Void CleanupAttributes(System.Xml.Schema.XmlSchemaObjectCollection attributes)
    // Offset: 0xDF1F40
    static void CleanupAttributes(::System::Xml::Schema::XmlSchemaObjectCollection* attributes);
    // static private System.Void CleanupGroup(System.Xml.Schema.XmlSchemaGroup group)
    // Offset: 0xDED0D0
    static void CleanupGroup(::System::Xml::Schema::XmlSchemaGroup* group);
    // static private System.Void CleanupParticle(System.Xml.Schema.XmlSchemaParticle particle)
    // Offset: 0xDF2010
    static void CleanupParticle(::System::Xml::Schema::XmlSchemaParticle* particle);
    // private System.Void CompileSubstitutionGroup(System.Xml.Schema.XmlSchemaSubstitutionGroupV1Compat substitutionGroup)
    // Offset: 0xDEDC6C
    void CompileSubstitutionGroup(::System::Xml::Schema::XmlSchemaSubstitutionGroupV1Compat* substitutionGroup);
    // private System.Void CheckSubstitutionGroup(System.Xml.Schema.XmlSchemaSubstitutionGroup substitutionGroup)
    // Offset: 0xDF1D70
    void CheckSubstitutionGroup(::System::Xml::Schema::XmlSchemaSubstitutionGroup* substitutionGroup);
    // private System.Void CompileGroup(System.Xml.Schema.XmlSchemaGroup group)
    // Offset: 0xDEE104
    void CompileGroup(::System::Xml::Schema::XmlSchemaGroup* group);
    // private System.Void CompileSimpleType(System.Xml.Schema.XmlSchemaSimpleType simpleType)
    // Offset: 0xDEF578
    void CompileSimpleType(::System::Xml::Schema::XmlSchemaSimpleType* simpleType);
    // private System.Xml.Schema.XmlSchemaSimpleType[] CompileBaseMemberTypes(System.Xml.Schema.XmlSchemaSimpleType simpleType)
    // Offset: 0xDF2570
    ::ArrayW<::System::Xml::Schema::XmlSchemaSimpleType*> CompileBaseMemberTypes(::System::Xml::Schema::XmlSchemaSimpleType* simpleType);
    // private System.Void CheckUnionType(System.Xml.Schema.XmlSchemaSimpleType unionMember, System.Collections.ArrayList memberTypeDefinitions, System.Xml.Schema.XmlSchemaSimpleType parentType)
    // Offset: 0xDF292C
    void CheckUnionType(::System::Xml::Schema::XmlSchemaSimpleType* unionMember, ::System::Collections::ArrayList* memberTypeDefinitions, ::System::Xml::Schema::XmlSchemaSimpleType* parentType);
    // private System.Void CompileComplexType(System.Xml.Schema.XmlSchemaComplexType complexType)
    // Offset: 0xDEE914
    void CompileComplexType(::System::Xml::Schema::XmlSchemaComplexType* complexType);
    // private System.Void CompileSimpleContentExtension(System.Xml.Schema.XmlSchemaComplexType complexType, System.Xml.Schema.XmlSchemaSimpleContentExtension simpleExtension)
    // Offset: 0xDF2A54
    void CompileSimpleContentExtension(::System::Xml::Schema::XmlSchemaComplexType* complexType, ::System::Xml::Schema::XmlSchemaSimpleContentExtension* simpleExtension);
    // private System.Void CompileSimpleContentRestriction(System.Xml.Schema.XmlSchemaComplexType complexType, System.Xml.Schema.XmlSchemaSimpleContentRestriction simpleRestriction)
    // Offset: 0xDF2CA8
    void CompileSimpleContentRestriction(::System::Xml::Schema::XmlSchemaComplexType* complexType, ::System::Xml::Schema::XmlSchemaSimpleContentRestriction* simpleRestriction);
    // private System.Void CompileComplexContentExtension(System.Xml.Schema.XmlSchemaComplexType complexType, System.Xml.Schema.XmlSchemaComplexContent complexContent, System.Xml.Schema.XmlSchemaComplexContentExtension complexExtension)
    // Offset: 0xDF310C
    void CompileComplexContentExtension(::System::Xml::Schema::XmlSchemaComplexType* complexType, ::System::Xml::Schema::XmlSchemaComplexContent* complexContent, ::System::Xml::Schema::XmlSchemaComplexContentExtension* complexExtension);
    // private System.Void CompileComplexContentRestriction(System.Xml.Schema.XmlSchemaComplexType complexType, System.Xml.Schema.XmlSchemaComplexContent complexContent, System.Xml.Schema.XmlSchemaComplexContentRestriction complexRestriction)
    // Offset: 0xDF3500
    void CompileComplexContentRestriction(::System::Xml::Schema::XmlSchemaComplexType* complexType, ::System::Xml::Schema::XmlSchemaComplexContent* complexContent, ::System::Xml::Schema::XmlSchemaComplexContentRestriction* complexRestriction);
    // private System.Void CheckParticleDerivation(System.Xml.Schema.XmlSchemaComplexType complexType)
    // Offset: 0xDF1C1C
    void CheckParticleDerivation(::System::Xml::Schema::XmlSchemaComplexType* complexType);
    // private System.Xml.Schema.XmlSchemaParticle CompileContentTypeParticle(System.Xml.Schema.XmlSchemaParticle particle, System.Boolean substitution)
    // Offset: 0xDF4BA0
    ::System::Xml::Schema::XmlSchemaParticle* CompileContentTypeParticle(::System::Xml::Schema::XmlSchemaParticle* particle, bool substitution);
    // private System.Xml.Schema.XmlSchemaParticle CannonicalizeParticle(System.Xml.Schema.XmlSchemaParticle particle, System.Boolean root, System.Boolean substitution)
    // Offset: 0xDF2184
    ::System::Xml::Schema::XmlSchemaParticle* CannonicalizeParticle(::System::Xml::Schema::XmlSchemaParticle* particle, bool root, bool substitution);
    // private System.Xml.Schema.XmlSchemaParticle CannonicalizeElement(System.Xml.Schema.XmlSchemaElement element, System.Boolean substitution)
    // Offset: 0xDF6058
    ::System::Xml::Schema::XmlSchemaParticle* CannonicalizeElement(::System::Xml::Schema::XmlSchemaElement* element, bool substitution);
    // private System.Xml.Schema.XmlSchemaParticle CannonicalizeGroupRef(System.Xml.Schema.XmlSchemaGroupRef groupRef, System.Boolean root, System.Boolean substitution)
    // Offset: 0xDF61AC
    ::System::Xml::Schema::XmlSchemaParticle* CannonicalizeGroupRef(::System::Xml::Schema::XmlSchemaGroupRef* groupRef, bool root, bool substitution);
    // private System.Xml.Schema.XmlSchemaParticle CannonicalizeAll(System.Xml.Schema.XmlSchemaAll all, System.Boolean root, System.Boolean substitution)
    // Offset: 0xDF6784
    ::System::Xml::Schema::XmlSchemaParticle* CannonicalizeAll(::System::Xml::Schema::XmlSchemaAll* all, bool root, bool substitution);
    // private System.Xml.Schema.XmlSchemaParticle CannonicalizeChoice(System.Xml.Schema.XmlSchemaChoice choice, System.Boolean root, System.Boolean substitution)
    // Offset: 0xDF6C64
    ::System::Xml::Schema::XmlSchemaParticle* CannonicalizeChoice(::System::Xml::Schema::XmlSchemaChoice* choice, bool root, bool substitution);
    // private System.Xml.Schema.XmlSchemaParticle CannonicalizeSequence(System.Xml.Schema.XmlSchemaSequence sequence, System.Boolean root, System.Boolean substitution)
    // Offset: 0xDF71CC
    ::System::Xml::Schema::XmlSchemaParticle* CannonicalizeSequence(::System::Xml::Schema::XmlSchemaSequence* sequence, bool root, bool substitution);
    // private System.Boolean IsValidRestriction(System.Xml.Schema.XmlSchemaParticle derivedParticle, System.Xml.Schema.XmlSchemaParticle baseParticle)
    // Offset: 0xDF5A7C
    bool IsValidRestriction(::System::Xml::Schema::XmlSchemaParticle* derivedParticle, ::System::Xml::Schema::XmlSchemaParticle* baseParticle);
    // private System.Boolean IsElementFromElement(System.Xml.Schema.XmlSchemaElement derivedElement, System.Xml.Schema.XmlSchemaElement baseElement)
    // Offset: 0xDF7770
    bool IsElementFromElement(::System::Xml::Schema::XmlSchemaElement* derivedElement, ::System::Xml::Schema::XmlSchemaElement* baseElement);
    // private System.Boolean IsElementFromAny(System.Xml.Schema.XmlSchemaElement derivedElement, System.Xml.Schema.XmlSchemaAny baseAny)
    // Offset: 0xDF789C
    bool IsElementFromAny(::System::Xml::Schema::XmlSchemaElement* derivedElement, ::System::Xml::Schema::XmlSchemaAny* baseAny);
    // private System.Boolean IsAnyFromAny(System.Xml.Schema.XmlSchemaAny derivedAny, System.Xml.Schema.XmlSchemaAny baseAny)
    // Offset: 0xDF7908
    bool IsAnyFromAny(::System::Xml::Schema::XmlSchemaAny* derivedAny, ::System::Xml::Schema::XmlSchemaAny* baseAny);
    // private System.Boolean IsGroupBaseFromAny(System.Xml.Schema.XmlSchemaGroupBase derivedGroupBase, System.Xml.Schema.XmlSchemaAny baseAny)
    // Offset: 0xDF7958
    bool IsGroupBaseFromAny(::System::Xml::Schema::XmlSchemaGroupBase* derivedGroupBase, ::System::Xml::Schema::XmlSchemaAny* baseAny);
    // private System.Boolean IsElementFromGroupBase(System.Xml.Schema.XmlSchemaElement derivedElement, System.Xml.Schema.XmlSchemaGroupBase baseGroupBase, System.Boolean skipEmptableOnly)
    // Offset: 0xDF7B48
    bool IsElementFromGroupBase(::System::Xml::Schema::XmlSchemaElement* derivedElement, ::System::Xml::Schema::XmlSchemaGroupBase* baseGroupBase, bool skipEmptableOnly);
    // private System.Boolean IsGroupBaseFromGroupBase(System.Xml.Schema.XmlSchemaGroupBase derivedGroupBase, System.Xml.Schema.XmlSchemaGroupBase baseGroupBase, System.Boolean skipEmptableOnly)
    // Offset: 0xDF7E98
    bool IsGroupBaseFromGroupBase(::System::Xml::Schema::XmlSchemaGroupBase* derivedGroupBase, ::System::Xml::Schema::XmlSchemaGroupBase* baseGroupBase, bool skipEmptableOnly);
    // private System.Boolean IsSequenceFromAll(System.Xml.Schema.XmlSchemaSequence derivedSequence, System.Xml.Schema.XmlSchemaAll baseAll)
    // Offset: 0xDF8110
    bool IsSequenceFromAll(::System::Xml::Schema::XmlSchemaSequence* derivedSequence, ::System::Xml::Schema::XmlSchemaAll* baseAll);
    // private System.Boolean IsSequenceFromChoice(System.Xml.Schema.XmlSchemaSequence derivedSequence, System.Xml.Schema.XmlSchemaChoice baseChoice)
    // Offset: 0xDF8420
    bool IsSequenceFromChoice(::System::Xml::Schema::XmlSchemaSequence* derivedSequence, ::System::Xml::Schema::XmlSchemaChoice* baseChoice);
    // private System.Void CalculateSequenceRange(System.Xml.Schema.XmlSchemaSequence sequence, out System.Decimal minOccurs, out System.Decimal maxOccurs)
    // Offset: 0xDF9030
    void CalculateSequenceRange(::System::Xml::Schema::XmlSchemaSequence* sequence, ByRef<::System::Decimal> minOccurs, ByRef<::System::Decimal> maxOccurs);
    // private System.Boolean IsValidOccurrenceRangeRestriction(System.Xml.Schema.XmlSchemaParticle derivedParticle, System.Xml.Schema.XmlSchemaParticle baseParticle)
    // Offset: 0xDF85F4
    bool IsValidOccurrenceRangeRestriction(::System::Xml::Schema::XmlSchemaParticle* derivedParticle, ::System::Xml::Schema::XmlSchemaParticle* baseParticle);
    // private System.Boolean IsValidOccurrenceRangeRestriction(System.Decimal minOccurs, System.Decimal maxOccurs, System.Decimal baseMinOccurs, System.Decimal baseMaxOccurs)
    // Offset: 0xDF8E34
    bool IsValidOccurrenceRangeRestriction(::System::Decimal minOccurs, ::System::Decimal maxOccurs, ::System::Decimal baseMinOccurs, ::System::Decimal baseMaxOccurs);
    // private System.Int32 GetMappingParticle(System.Xml.Schema.XmlSchemaParticle particle, System.Xml.Schema.XmlSchemaObjectCollection collection)
    // Offset: 0xDF8F30
    int GetMappingParticle(::System::Xml::Schema::XmlSchemaParticle* particle, ::System::Xml::Schema::XmlSchemaObjectCollection* collection);
    // private System.Boolean IsParticleEmptiable(System.Xml.Schema.XmlSchemaParticle particle)
    // Offset: 0xDF76C0
    bool IsParticleEmptiable(::System::Xml::Schema::XmlSchemaParticle* particle);
    // private System.Void CalculateEffectiveTotalRange(System.Xml.Schema.XmlSchemaParticle particle, out System.Decimal minOccurs, out System.Decimal maxOccurs)
    // Offset: 0xDF863C
    void CalculateEffectiveTotalRange(::System::Xml::Schema::XmlSchemaParticle* particle, ByRef<::System::Decimal> minOccurs, ByRef<::System::Decimal> maxOccurs);
    // private System.Void PushComplexType(System.Xml.Schema.XmlSchemaComplexType complexType)
    // Offset: 0xDF93F8
    void PushComplexType(::System::Xml::Schema::XmlSchemaComplexType* complexType);
    // private System.Xml.Schema.XmlSchemaContentType GetSchemaContentType(System.Xml.Schema.XmlSchemaComplexType complexType, System.Xml.Schema.XmlSchemaComplexContent complexContent, System.Xml.Schema.XmlSchemaParticle particle)
    // Offset: 0xDF4D2C
    ::System::Xml::Schema::XmlSchemaContentType GetSchemaContentType(::System::Xml::Schema::XmlSchemaComplexType* complexType, ::System::Xml::Schema::XmlSchemaComplexContent* complexContent, ::System::Xml::Schema::XmlSchemaParticle* particle);
    // private System.Void CompileAttributeGroup(System.Xml.Schema.XmlSchemaAttributeGroup attributeGroup)
    // Offset: 0xDEE1E4
    void CompileAttributeGroup(::System::Xml::Schema::XmlSchemaAttributeGroup* attributeGroup);
    // private System.Void CompileLocalAttributes(System.Xml.Schema.XmlSchemaComplexType baseType, System.Xml.Schema.XmlSchemaComplexType derivedType, System.Xml.Schema.XmlSchemaObjectCollection attributes, System.Xml.Schema.XmlSchemaAnyAttribute anyAttribute, System.Xml.Schema.XmlSchemaDerivationMethod derivedBy)
    // Offset: 0xDF37E4
    void CompileLocalAttributes(::System::Xml::Schema::XmlSchemaComplexType* baseType, ::System::Xml::Schema::XmlSchemaComplexType* derivedType, ::System::Xml::Schema::XmlSchemaObjectCollection* attributes, ::System::Xml::Schema::XmlSchemaAnyAttribute* anyAttribute, ::System::Xml::Schema::XmlSchemaDerivationMethod derivedBy);
    // private System.Xml.Schema.XmlSchemaAnyAttribute CompileAnyAttributeUnion(System.Xml.Schema.XmlSchemaAnyAttribute a, System.Xml.Schema.XmlSchemaAnyAttribute b)
    // Offset: 0xDF94B4
    ::System::Xml::Schema::XmlSchemaAnyAttribute* CompileAnyAttributeUnion(::System::Xml::Schema::XmlSchemaAnyAttribute* a, ::System::Xml::Schema::XmlSchemaAnyAttribute* b);
    // private System.Xml.Schema.XmlSchemaAnyAttribute CompileAnyAttributeIntersection(System.Xml.Schema.XmlSchemaAnyAttribute a, System.Xml.Schema.XmlSchemaAnyAttribute b)
    // Offset: 0xDF941C
    ::System::Xml::Schema::XmlSchemaAnyAttribute* CompileAnyAttributeIntersection(::System::Xml::Schema::XmlSchemaAnyAttribute* a, ::System::Xml::Schema::XmlSchemaAnyAttribute* b);
    // private System.Void CompileAttribute(System.Xml.Schema.XmlSchemaAttribute xa)
    // Offset: 0xDF0B30
    void CompileAttribute(::System::Xml::Schema::XmlSchemaAttribute* xa);
    // private System.Void CompileIdentityConstraint(System.Xml.Schema.XmlSchemaIdentityConstraint xi)
    // Offset: 0xDF14A0
    void CompileIdentityConstraint(::System::Xml::Schema::XmlSchemaIdentityConstraint* xi);
    // private System.Void CompileElement(System.Xml.Schema.XmlSchemaElement xe)
    // Offset: 0xDEFE6C
    void CompileElement(::System::Xml::Schema::XmlSchemaElement* xe);
    // private System.Xml.Schema.ContentValidator CompileComplexContent(System.Xml.Schema.XmlSchemaComplexType complexType)
    // Offset: 0xDF4DA8
    ::System::Xml::Schema::ContentValidator* CompileComplexContent(::System::Xml::Schema::XmlSchemaComplexType* complexType);
    // private System.Void BuildParticleContentModel(System.Xml.Schema.ParticleContentValidator contentValidator, System.Xml.Schema.XmlSchemaParticle particle)
    // Offset: 0xDF954C
    void BuildParticleContentModel(::System::Xml::Schema::ParticleContentValidator* contentValidator, ::System::Xml::Schema::XmlSchemaParticle* particle);
    // private System.Void CompileParticleElements(System.Xml.Schema.XmlSchemaComplexType complexType, System.Xml.Schema.XmlSchemaParticle particle)
    // Offset: 0xDF9A80
    void CompileParticleElements(::System::Xml::Schema::XmlSchemaComplexType* complexType, ::System::Xml::Schema::XmlSchemaParticle* particle);
    // private System.Void CompileCompexTypeElements(System.Xml.Schema.XmlSchemaComplexType complexType)
    // Offset: 0xDF1B3C
    void CompileCompexTypeElements(::System::Xml::Schema::XmlSchemaComplexType* complexType);
    // private System.Xml.Schema.XmlSchemaSimpleType GetSimpleType(System.Xml.XmlQualifiedName name)
    // Offset: 0xDF23F8
    ::System::Xml::Schema::XmlSchemaSimpleType* GetSimpleType(::System::Xml::XmlQualifiedName* name);
    // private System.Xml.Schema.XmlSchemaComplexType GetComplexType(System.Xml.XmlQualifiedName name)
    // Offset: 0xDF59BC
    ::System::Xml::Schema::XmlSchemaComplexType* GetComplexType(::System::Xml::XmlQualifiedName* name);
    // private System.Xml.Schema.XmlSchemaType GetAnySchemaType(System.Xml.XmlQualifiedName name)
    // Offset: 0xDF5844
    ::System::Xml::Schema::XmlSchemaType* GetAnySchemaType(::System::Xml::XmlQualifiedName* name);
  }; // System.Xml.Schema.SchemaCollectionCompiler
  #pragma pack(pop)
  static check_size<sizeof(SchemaCollectionCompiler), 88 + sizeof(::System::Xml::Schema::XmlSchema*)> __System_Xml_Schema_SchemaCollectionCompilerSizeCheck;
  static_assert(sizeof(SchemaCollectionCompiler) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchema*, ::System::Xml::Schema::SchemaInfo*, bool)>(&System::Xml::Schema::SchemaCollectionCompiler::Execute)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* schemaInfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaInfo")->byval_arg;
    static auto* compileContentModel = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema, schemaInfo, compileContentModel});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::Prepare
// Il2CppName: Prepare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)()>(&System::Xml::Schema::SchemaCollectionCompiler::Prepare)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "Prepare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)()>(&System::Xml::Schema::SchemaCollectionCompiler::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::SchemaCollectionCompiler::Cleanup)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::Compile
// Il2CppName: Compile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)()>(&System::Xml::Schema::SchemaCollectionCompiler::Compile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "Compile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::Output
// Il2CppName: Output
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::SchemaInfo*)>(&System::Xml::Schema::SchemaCollectionCompiler::Output)> {
  static const MethodInfo* get() {
    static auto* schemaInfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "Output", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaInfo});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CleanupAttribute
// Il2CppName: CleanupAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XmlSchemaAttribute*)>(&System::Xml::Schema::SchemaCollectionCompiler::CleanupAttribute)> {
  static const MethodInfo* get() {
    static auto* attribute = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CleanupAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attribute});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CleanupAttributeGroup
// Il2CppName: CleanupAttributeGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XmlSchemaAttributeGroup*)>(&System::Xml::Schema::SchemaCollectionCompiler::CleanupAttributeGroup)> {
  static const MethodInfo* get() {
    static auto* attributeGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttributeGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CleanupAttributeGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeGroup});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CleanupComplexType
// Il2CppName: CleanupComplexType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XmlSchemaComplexType*)>(&System::Xml::Schema::SchemaCollectionCompiler::CleanupComplexType)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CleanupComplexType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CleanupSimpleType
// Il2CppName: CleanupSimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XmlSchemaSimpleType*)>(&System::Xml::Schema::SchemaCollectionCompiler::CleanupSimpleType)> {
  static const MethodInfo* get() {
    static auto* simpleType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CleanupSimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{simpleType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CleanupElement
// Il2CppName: CleanupElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XmlSchemaElement*)>(&System::Xml::Schema::SchemaCollectionCompiler::CleanupElement)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CleanupElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CleanupAttributes
// Il2CppName: CleanupAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XmlSchemaObjectCollection*)>(&System::Xml::Schema::SchemaCollectionCompiler::CleanupAttributes)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CleanupAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CleanupGroup
// Il2CppName: CleanupGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XmlSchemaGroup*)>(&System::Xml::Schema::SchemaCollectionCompiler::CleanupGroup)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CleanupGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CleanupParticle
// Il2CppName: CleanupParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::SchemaCollectionCompiler::CleanupParticle)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CleanupParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileSubstitutionGroup
// Il2CppName: CompileSubstitutionGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaSubstitutionGroupV1Compat*)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileSubstitutionGroup)> {
  static const MethodInfo* get() {
    static auto* substitutionGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSubstitutionGroupV1Compat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileSubstitutionGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{substitutionGroup});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CheckSubstitutionGroup
// Il2CppName: CheckSubstitutionGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaSubstitutionGroup*)>(&System::Xml::Schema::SchemaCollectionCompiler::CheckSubstitutionGroup)> {
  static const MethodInfo* get() {
    static auto* substitutionGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSubstitutionGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CheckSubstitutionGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{substitutionGroup});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileGroup
// Il2CppName: CompileGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaGroup*)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileGroup)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileSimpleType
// Il2CppName: CompileSimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaSimpleType*)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileSimpleType)> {
  static const MethodInfo* get() {
    static auto* simpleType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileSimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{simpleType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileBaseMemberTypes
// Il2CppName: CompileBaseMemberTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Xml::Schema::XmlSchemaSimpleType*> (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaSimpleType*)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileBaseMemberTypes)> {
  static const MethodInfo* get() {
    static auto* simpleType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileBaseMemberTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{simpleType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CheckUnionType
// Il2CppName: CheckUnionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaSimpleType*, ::System::Collections::ArrayList*, ::System::Xml::Schema::XmlSchemaSimpleType*)>(&System::Xml::Schema::SchemaCollectionCompiler::CheckUnionType)> {
  static const MethodInfo* get() {
    static auto* unionMember = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    static auto* memberTypeDefinitions = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    static auto* parentType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CheckUnionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unionMember, memberTypeDefinitions, parentType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileComplexType
// Il2CppName: CompileComplexType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaComplexType*)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileComplexType)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileComplexType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileSimpleContentExtension
// Il2CppName: CompileSimpleContentExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaSimpleContentExtension*)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileSimpleContentExtension)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* simpleExtension = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleContentExtension")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileSimpleContentExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType, simpleExtension});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileSimpleContentRestriction
// Il2CppName: CompileSimpleContentRestriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaSimpleContentRestriction*)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileSimpleContentRestriction)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* simpleRestriction = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleContentRestriction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileSimpleContentRestriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType, simpleRestriction});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileComplexContentExtension
// Il2CppName: CompileComplexContentExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaComplexContent*, ::System::Xml::Schema::XmlSchemaComplexContentExtension*)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileComplexContentExtension)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* complexContent = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexContent")->byval_arg;
    static auto* complexExtension = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexContentExtension")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileComplexContentExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType, complexContent, complexExtension});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileComplexContentRestriction
// Il2CppName: CompileComplexContentRestriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaComplexContent*, ::System::Xml::Schema::XmlSchemaComplexContentRestriction*)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileComplexContentRestriction)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* complexContent = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexContent")->byval_arg;
    static auto* complexRestriction = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexContentRestriction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileComplexContentRestriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType, complexContent, complexRestriction});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CheckParticleDerivation
// Il2CppName: CheckParticleDerivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaComplexType*)>(&System::Xml::Schema::SchemaCollectionCompiler::CheckParticleDerivation)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CheckParticleDerivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileContentTypeParticle
// Il2CppName: CompileContentTypeParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaParticle*, bool)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileContentTypeParticle)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* substitution = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileContentTypeParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle, substitution});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CannonicalizeParticle
// Il2CppName: CannonicalizeParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaParticle*, bool, bool)>(&System::Xml::Schema::SchemaCollectionCompiler::CannonicalizeParticle)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* substitution = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CannonicalizeParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle, root, substitution});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CannonicalizeElement
// Il2CppName: CannonicalizeElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaElement*, bool)>(&System::Xml::Schema::SchemaCollectionCompiler::CannonicalizeElement)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    static auto* substitution = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CannonicalizeElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element, substitution});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CannonicalizeGroupRef
// Il2CppName: CannonicalizeGroupRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaGroupRef*, bool, bool)>(&System::Xml::Schema::SchemaCollectionCompiler::CannonicalizeGroupRef)> {
  static const MethodInfo* get() {
    static auto* groupRef = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroupRef")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* substitution = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CannonicalizeGroupRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupRef, root, substitution});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CannonicalizeAll
// Il2CppName: CannonicalizeAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaAll*, bool, bool)>(&System::Xml::Schema::SchemaCollectionCompiler::CannonicalizeAll)> {
  static const MethodInfo* get() {
    static auto* all = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAll")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* substitution = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CannonicalizeAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{all, root, substitution});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CannonicalizeChoice
// Il2CppName: CannonicalizeChoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaChoice*, bool, bool)>(&System::Xml::Schema::SchemaCollectionCompiler::CannonicalizeChoice)> {
  static const MethodInfo* get() {
    static auto* choice = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaChoice")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* substitution = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CannonicalizeChoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{choice, root, substitution});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CannonicalizeSequence
// Il2CppName: CannonicalizeSequence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaSequence*, bool, bool)>(&System::Xml::Schema::SchemaCollectionCompiler::CannonicalizeSequence)> {
  static const MethodInfo* get() {
    static auto* sequence = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSequence")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* substitution = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CannonicalizeSequence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sequence, root, substitution});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::IsValidRestriction
// Il2CppName: IsValidRestriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaParticle*, ::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::SchemaCollectionCompiler::IsValidRestriction)> {
  static const MethodInfo* get() {
    static auto* derivedParticle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* baseParticle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "IsValidRestriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedParticle, baseParticle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::IsElementFromElement
// Il2CppName: IsElementFromElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaElement*, ::System::Xml::Schema::XmlSchemaElement*)>(&System::Xml::Schema::SchemaCollectionCompiler::IsElementFromElement)> {
  static const MethodInfo* get() {
    static auto* derivedElement = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    static auto* baseElement = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "IsElementFromElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedElement, baseElement});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::IsElementFromAny
// Il2CppName: IsElementFromAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaElement*, ::System::Xml::Schema::XmlSchemaAny*)>(&System::Xml::Schema::SchemaCollectionCompiler::IsElementFromAny)> {
  static const MethodInfo* get() {
    static auto* derivedElement = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    static auto* baseAny = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAny")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "IsElementFromAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedElement, baseAny});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::IsAnyFromAny
// Il2CppName: IsAnyFromAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaAny*, ::System::Xml::Schema::XmlSchemaAny*)>(&System::Xml::Schema::SchemaCollectionCompiler::IsAnyFromAny)> {
  static const MethodInfo* get() {
    static auto* derivedAny = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAny")->byval_arg;
    static auto* baseAny = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAny")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "IsAnyFromAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedAny, baseAny});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::IsGroupBaseFromAny
// Il2CppName: IsGroupBaseFromAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaGroupBase*, ::System::Xml::Schema::XmlSchemaAny*)>(&System::Xml::Schema::SchemaCollectionCompiler::IsGroupBaseFromAny)> {
  static const MethodInfo* get() {
    static auto* derivedGroupBase = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroupBase")->byval_arg;
    static auto* baseAny = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAny")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "IsGroupBaseFromAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedGroupBase, baseAny});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::IsElementFromGroupBase
// Il2CppName: IsElementFromGroupBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaElement*, ::System::Xml::Schema::XmlSchemaGroupBase*, bool)>(&System::Xml::Schema::SchemaCollectionCompiler::IsElementFromGroupBase)> {
  static const MethodInfo* get() {
    static auto* derivedElement = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    static auto* baseGroupBase = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroupBase")->byval_arg;
    static auto* skipEmptableOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "IsElementFromGroupBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedElement, baseGroupBase, skipEmptableOnly});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::IsGroupBaseFromGroupBase
// Il2CppName: IsGroupBaseFromGroupBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaGroupBase*, ::System::Xml::Schema::XmlSchemaGroupBase*, bool)>(&System::Xml::Schema::SchemaCollectionCompiler::IsGroupBaseFromGroupBase)> {
  static const MethodInfo* get() {
    static auto* derivedGroupBase = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroupBase")->byval_arg;
    static auto* baseGroupBase = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroupBase")->byval_arg;
    static auto* skipEmptableOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "IsGroupBaseFromGroupBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedGroupBase, baseGroupBase, skipEmptableOnly});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::IsSequenceFromAll
// Il2CppName: IsSequenceFromAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaSequence*, ::System::Xml::Schema::XmlSchemaAll*)>(&System::Xml::Schema::SchemaCollectionCompiler::IsSequenceFromAll)> {
  static const MethodInfo* get() {
    static auto* derivedSequence = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSequence")->byval_arg;
    static auto* baseAll = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAll")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "IsSequenceFromAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedSequence, baseAll});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::IsSequenceFromChoice
// Il2CppName: IsSequenceFromChoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaSequence*, ::System::Xml::Schema::XmlSchemaChoice*)>(&System::Xml::Schema::SchemaCollectionCompiler::IsSequenceFromChoice)> {
  static const MethodInfo* get() {
    static auto* derivedSequence = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSequence")->byval_arg;
    static auto* baseChoice = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaChoice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "IsSequenceFromChoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedSequence, baseChoice});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CalculateSequenceRange
// Il2CppName: CalculateSequenceRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaSequence*, ByRef<::System::Decimal>, ByRef<::System::Decimal>)>(&System::Xml::Schema::SchemaCollectionCompiler::CalculateSequenceRange)> {
  static const MethodInfo* get() {
    static auto* sequence = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSequence")->byval_arg;
    static auto* minOccurs = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    static auto* maxOccurs = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CalculateSequenceRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sequence, minOccurs, maxOccurs});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::IsValidOccurrenceRangeRestriction
// Il2CppName: IsValidOccurrenceRangeRestriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaParticle*, ::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::SchemaCollectionCompiler::IsValidOccurrenceRangeRestriction)> {
  static const MethodInfo* get() {
    static auto* derivedParticle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* baseParticle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "IsValidOccurrenceRangeRestriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedParticle, baseParticle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::IsValidOccurrenceRangeRestriction
// Il2CppName: IsValidOccurrenceRangeRestriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Decimal, ::System::Decimal, ::System::Decimal, ::System::Decimal)>(&System::Xml::Schema::SchemaCollectionCompiler::IsValidOccurrenceRangeRestriction)> {
  static const MethodInfo* get() {
    static auto* minOccurs = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* maxOccurs = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* baseMinOccurs = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* baseMaxOccurs = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "IsValidOccurrenceRangeRestriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minOccurs, maxOccurs, baseMinOccurs, baseMaxOccurs});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::GetMappingParticle
// Il2CppName: GetMappingParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaParticle*, ::System::Xml::Schema::XmlSchemaObjectCollection*)>(&System::Xml::Schema::SchemaCollectionCompiler::GetMappingParticle)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* collection = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "GetMappingParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle, collection});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::IsParticleEmptiable
// Il2CppName: IsParticleEmptiable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::SchemaCollectionCompiler::IsParticleEmptiable)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "IsParticleEmptiable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CalculateEffectiveTotalRange
// Il2CppName: CalculateEffectiveTotalRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaParticle*, ByRef<::System::Decimal>, ByRef<::System::Decimal>)>(&System::Xml::Schema::SchemaCollectionCompiler::CalculateEffectiveTotalRange)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* minOccurs = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    static auto* maxOccurs = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CalculateEffectiveTotalRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle, minOccurs, maxOccurs});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::PushComplexType
// Il2CppName: PushComplexType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaComplexType*)>(&System::Xml::Schema::SchemaCollectionCompiler::PushComplexType)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "PushComplexType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::GetSchemaContentType
// Il2CppName: GetSchemaContentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaContentType (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaComplexContent*, ::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::SchemaCollectionCompiler::GetSchemaContentType)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* complexContent = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexContent")->byval_arg;
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "GetSchemaContentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType, complexContent, particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileAttributeGroup
// Il2CppName: CompileAttributeGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaAttributeGroup*)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileAttributeGroup)> {
  static const MethodInfo* get() {
    static auto* attributeGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttributeGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileAttributeGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeGroup});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileLocalAttributes
// Il2CppName: CompileLocalAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaObjectCollection*, ::System::Xml::Schema::XmlSchemaAnyAttribute*, ::System::Xml::Schema::XmlSchemaDerivationMethod)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileLocalAttributes)> {
  static const MethodInfo* get() {
    static auto* baseType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* derivedType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* attributes = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    static auto* anyAttribute = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnyAttribute")->byval_arg;
    static auto* derivedBy = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaDerivationMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileLocalAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseType, derivedType, attributes, anyAttribute, derivedBy});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileAnyAttributeUnion
// Il2CppName: CompileAnyAttributeUnion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaAnyAttribute* (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaAnyAttribute*, ::System::Xml::Schema::XmlSchemaAnyAttribute*)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileAnyAttributeUnion)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnyAttribute")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnyAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileAnyAttributeUnion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileAnyAttributeIntersection
// Il2CppName: CompileAnyAttributeIntersection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaAnyAttribute* (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaAnyAttribute*, ::System::Xml::Schema::XmlSchemaAnyAttribute*)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileAnyAttributeIntersection)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnyAttribute")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnyAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileAnyAttributeIntersection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileAttribute
// Il2CppName: CompileAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaAttribute*)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileAttribute)> {
  static const MethodInfo* get() {
    static auto* xa = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xa});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileIdentityConstraint
// Il2CppName: CompileIdentityConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaIdentityConstraint*)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileIdentityConstraint)> {
  static const MethodInfo* get() {
    static auto* xi = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaIdentityConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileIdentityConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xi});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileElement
// Il2CppName: CompileElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaElement*)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileElement)> {
  static const MethodInfo* get() {
    static auto* xe = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xe});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileComplexContent
// Il2CppName: CompileComplexContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::ContentValidator* (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaComplexType*)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileComplexContent)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileComplexContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::BuildParticleContentModel
// Il2CppName: BuildParticleContentModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::ParticleContentValidator*, ::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::SchemaCollectionCompiler::BuildParticleContentModel)> {
  static const MethodInfo* get() {
    static auto* contentValidator = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ParticleContentValidator")->byval_arg;
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "BuildParticleContentModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contentValidator, particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileParticleElements
// Il2CppName: CompileParticleElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileParticleElements)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileParticleElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType, particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::CompileCompexTypeElements
// Il2CppName: CompileCompexTypeElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::Schema::XmlSchemaComplexType*)>(&System::Xml::Schema::SchemaCollectionCompiler::CompileCompexTypeElements)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "CompileCompexTypeElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::GetSimpleType
// Il2CppName: GetSimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaSimpleType* (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::SchemaCollectionCompiler::GetSimpleType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "GetSimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::GetComplexType
// Il2CppName: GetComplexType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaComplexType* (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::SchemaCollectionCompiler::GetComplexType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "GetComplexType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionCompiler::GetAnySchemaType
// Il2CppName: GetAnySchemaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaType* (System::Xml::Schema::SchemaCollectionCompiler::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::SchemaCollectionCompiler::GetAnySchemaType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionCompiler*), "GetAnySchemaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
