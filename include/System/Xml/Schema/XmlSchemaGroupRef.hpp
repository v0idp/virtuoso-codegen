// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlSchemaParticle
#include "System/Xml/Schema/XmlSchemaParticle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaGroupBase
  class XmlSchemaGroupBase;
  // Forward declaring type: XmlSchemaGroup
  class XmlSchemaGroup;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaGroupRef
  class XmlSchemaGroupRef;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchemaGroupRef);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaGroupRef*, "System.Xml.Schema", "XmlSchemaGroupRef");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaGroupRef
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSchemaGroupRef : public ::System::Xml::Schema::XmlSchemaParticle {
    public:
    // Writing base type padding for base size: 0x74 to desired offset: 0x78
    char ___base_padding[0x4] = {};
    public:
    // private System.Xml.XmlQualifiedName refName
    // Size: 0x8
    // Offset: 0x78
    ::System::Xml::XmlQualifiedName* refName;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    // private System.Xml.Schema.XmlSchemaGroupBase particle
    // Size: 0x8
    // Offset: 0x80
    ::System::Xml::Schema::XmlSchemaGroupBase* particle;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaGroupBase*) == 0x8);
    // private System.Xml.Schema.XmlSchemaGroup refined
    // Size: 0x8
    // Offset: 0x88
    ::System::Xml::Schema::XmlSchemaGroup* refined;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaGroup*) == 0x8);
    public:
    // Get instance field reference: private System.Xml.XmlQualifiedName refName
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlQualifiedName*& dyn_refName();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaGroupBase particle
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaGroupBase*& dyn_particle();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaGroup refined
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaGroup*& dyn_refined();
    // public System.Xml.XmlQualifiedName get_RefName()
    // Offset: 0x110F088
    ::System::Xml::XmlQualifiedName* get_RefName();
    // public System.Void set_RefName(System.Xml.XmlQualifiedName value)
    // Offset: 0x110C8F4
    void set_RefName(::System::Xml::XmlQualifiedName* value);
    // public System.Xml.Schema.XmlSchemaGroupBase get_Particle()
    // Offset: 0x110F090
    ::System::Xml::Schema::XmlSchemaGroupBase* get_Particle();
    // System.Xml.Schema.XmlSchemaGroup get_Redefined()
    // Offset: 0x110F0A0
    ::System::Xml::Schema::XmlSchemaGroup* get_Redefined();
    // System.Void set_Redefined(System.Xml.Schema.XmlSchemaGroup value)
    // Offset: 0x110F0A8
    void set_Redefined(::System::Xml::Schema::XmlSchemaGroup* value);
    // System.Void SetParticle(System.Xml.Schema.XmlSchemaGroupBase value)
    // Offset: 0x110F098
    void SetParticle(::System::Xml::Schema::XmlSchemaGroupBase* value);
    // public System.Void .ctor()
    // Offset: 0x110F0B0
    // Implemented from: System.Xml.Schema.XmlSchemaParticle
    // Base method: System.Void XmlSchemaParticle::.ctor()
    // Base method: System.Void XmlSchemaAnnotated::.ctor()
    // Base method: System.Void XmlSchemaObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaGroupRef* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaGroupRef::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaGroupRef*, creationType>()));
    }
  }; // System.Xml.Schema.XmlSchemaGroupRef
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaGroupRef), 136 + sizeof(::System::Xml::Schema::XmlSchemaGroup*)> __System_Xml_Schema_XmlSchemaGroupRefSizeCheck;
  static_assert(sizeof(XmlSchemaGroupRef) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaGroupRef::get_RefName
// Il2CppName: get_RefName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Schema::XmlSchemaGroupRef::*)()>(&System::Xml::Schema::XmlSchemaGroupRef::get_RefName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaGroupRef*), "get_RefName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaGroupRef::set_RefName
// Il2CppName: set_RefName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaGroupRef::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XmlSchemaGroupRef::set_RefName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaGroupRef*), "set_RefName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaGroupRef::get_Particle
// Il2CppName: get_Particle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaGroupBase* (System::Xml::Schema::XmlSchemaGroupRef::*)()>(&System::Xml::Schema::XmlSchemaGroupRef::get_Particle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaGroupRef*), "get_Particle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaGroupRef::get_Redefined
// Il2CppName: get_Redefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaGroup* (System::Xml::Schema::XmlSchemaGroupRef::*)()>(&System::Xml::Schema::XmlSchemaGroupRef::get_Redefined)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaGroupRef*), "get_Redefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaGroupRef::set_Redefined
// Il2CppName: set_Redefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaGroupRef::*)(::System::Xml::Schema::XmlSchemaGroup*)>(&System::Xml::Schema::XmlSchemaGroupRef::set_Redefined)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaGroupRef*), "set_Redefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaGroupRef::SetParticle
// Il2CppName: SetParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaGroupRef::*)(::System::Xml::Schema::XmlSchemaGroupBase*)>(&System::Xml::Schema::XmlSchemaGroupRef::SetParticle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroupBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaGroupRef*), "SetParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaGroupRef::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
