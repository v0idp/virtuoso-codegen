// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlSchemaDatatype
#include "System/Xml/Schema/XmlSchemaDatatype.hpp"
// Including type: System.Xml.Schema.XmlSchemaDatatypeVariety
#include "System/Xml/Schema/XmlSchemaDatatypeVariety.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: RestrictionFacets
  class RestrictionFacets;
  // Forward declaring type: XmlValueConverter
  class XmlValueConverter;
  // Forward declaring type: XmlSchemaType
  class XmlSchemaType;
  // Forward declaring type: XmlSchemaSimpleType
  class XmlSchemaSimpleType;
  // Forward declaring type: FacetsChecker
  class FacetsChecker;
  // Forward declaring type: RestrictionFlags
  struct RestrictionFlags;
  // Forward declaring type: XmlTypeCode
  struct XmlTypeCode;
  // Forward declaring type: XmlSchemaWhiteSpace
  struct XmlSchemaWhiteSpace;
  // Forward declaring type: XmlSchemaObjectCollection
  class XmlSchemaObjectCollection;
  // Forward declaring type: XmlSchemaObjectTable
  class XmlSchemaObjectTable;
  // Forward declaring type: XmlSchemaObject
  class XmlSchemaObject;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
  // Forward declaring type: XmlTokenizedType
  struct XmlTokenizedType;
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: IXmlNamespaceResolver
  class IXmlNamespaceResolver;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: DatatypeImplementation
  class DatatypeImplementation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::DatatypeImplementation);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::DatatypeImplementation*, "System.Xml.Schema", "DatatypeImplementation");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.DatatypeImplementation
  // [TokenAttribute] Offset: FFFFFFFF
  class DatatypeImplementation : public ::System::Xml::Schema::XmlSchemaDatatype {
    public:
    // Nested type: ::System::Xml::Schema::DatatypeImplementation::SchemaDatatypeMap
    class SchemaDatatypeMap;
    public:
    // private System.Xml.Schema.XmlSchemaDatatypeVariety variety
    // Size: 0x4
    // Offset: 0x10
    ::System::Xml::Schema::XmlSchemaDatatypeVariety variety;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaDatatypeVariety) == 0x4);
    // Padding between fields: variety and: restriction
    char __padding0[0x4] = {};
    // private System.Xml.Schema.RestrictionFacets restriction
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::Schema::RestrictionFacets* restriction;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::RestrictionFacets*) == 0x8);
    // private System.Xml.Schema.DatatypeImplementation baseType
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::Schema::DatatypeImplementation* baseType;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::DatatypeImplementation*) == 0x8);
    // private System.Xml.Schema.XmlValueConverter valueConverter
    // Size: 0x8
    // Offset: 0x28
    ::System::Xml::Schema::XmlValueConverter* valueConverter;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlValueConverter*) == 0x8);
    // private System.Xml.Schema.XmlSchemaType parentSchemaType
    // Size: 0x8
    // Offset: 0x30
    ::System::Xml::Schema::XmlSchemaType* parentSchemaType;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaType*) == 0x8);
    public:
    // Get static field: static private System.Collections.Hashtable builtinTypes
    static ::System::Collections::Hashtable* _get_builtinTypes();
    // Set static field: static private System.Collections.Hashtable builtinTypes
    static void _set_builtinTypes(::System::Collections::Hashtable* value);
    // Get static field: static private System.Xml.Schema.XmlSchemaSimpleType[] enumToTypeCode
    static ::ArrayW<::System::Xml::Schema::XmlSchemaSimpleType*> _get_enumToTypeCode();
    // Set static field: static private System.Xml.Schema.XmlSchemaSimpleType[] enumToTypeCode
    static void _set_enumToTypeCode(::ArrayW<::System::Xml::Schema::XmlSchemaSimpleType*> value);
    // Get static field: static private System.Xml.Schema.XmlSchemaSimpleType anySimpleType
    static ::System::Xml::Schema::XmlSchemaSimpleType* _get_anySimpleType();
    // Set static field: static private System.Xml.Schema.XmlSchemaSimpleType anySimpleType
    static void _set_anySimpleType(::System::Xml::Schema::XmlSchemaSimpleType* value);
    // Get static field: static private System.Xml.Schema.XmlSchemaSimpleType anyAtomicType
    static ::System::Xml::Schema::XmlSchemaSimpleType* _get_anyAtomicType();
    // Set static field: static private System.Xml.Schema.XmlSchemaSimpleType anyAtomicType
    static void _set_anyAtomicType(::System::Xml::Schema::XmlSchemaSimpleType* value);
    // Get static field: static private System.Xml.Schema.XmlSchemaSimpleType untypedAtomicType
    static ::System::Xml::Schema::XmlSchemaSimpleType* _get_untypedAtomicType();
    // Set static field: static private System.Xml.Schema.XmlSchemaSimpleType untypedAtomicType
    static void _set_untypedAtomicType(::System::Xml::Schema::XmlSchemaSimpleType* value);
    // Get static field: static private System.Xml.Schema.XmlSchemaSimpleType yearMonthDurationType
    static ::System::Xml::Schema::XmlSchemaSimpleType* _get_yearMonthDurationType();
    // Set static field: static private System.Xml.Schema.XmlSchemaSimpleType yearMonthDurationType
    static void _set_yearMonthDurationType(::System::Xml::Schema::XmlSchemaSimpleType* value);
    // Get static field: static private System.Xml.Schema.XmlSchemaSimpleType dayTimeDurationType
    static ::System::Xml::Schema::XmlSchemaSimpleType* _get_dayTimeDurationType();
    // Set static field: static private System.Xml.Schema.XmlSchemaSimpleType dayTimeDurationType
    static void _set_dayTimeDurationType(::System::Xml::Schema::XmlSchemaSimpleType* value);
    // Get static field: static private System.Xml.Schema.XmlSchemaSimpleType normalizedStringTypeV1Compat
    static ::System::Xml::Schema::XmlSchemaSimpleType* _get_normalizedStringTypeV1Compat();
    // Set static field: static private System.Xml.Schema.XmlSchemaSimpleType normalizedStringTypeV1Compat
    static void _set_normalizedStringTypeV1Compat(::System::Xml::Schema::XmlSchemaSimpleType* value);
    // Get static field: static private System.Xml.Schema.XmlSchemaSimpleType tokenTypeV1Compat
    static ::System::Xml::Schema::XmlSchemaSimpleType* _get_tokenTypeV1Compat();
    // Set static field: static private System.Xml.Schema.XmlSchemaSimpleType tokenTypeV1Compat
    static void _set_tokenTypeV1Compat(::System::Xml::Schema::XmlSchemaSimpleType* value);
    // Get static field: static System.Xml.XmlQualifiedName QnAnySimpleType
    static ::System::Xml::XmlQualifiedName* _get_QnAnySimpleType();
    // Set static field: static System.Xml.XmlQualifiedName QnAnySimpleType
    static void _set_QnAnySimpleType(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.XmlQualifiedName QnAnyType
    static ::System::Xml::XmlQualifiedName* _get_QnAnyType();
    // Set static field: static System.Xml.XmlQualifiedName QnAnyType
    static void _set_QnAnyType(::System::Xml::XmlQualifiedName* value);
    // Get static field: static System.Xml.Schema.FacetsChecker stringFacetsChecker
    static ::System::Xml::Schema::FacetsChecker* _get_stringFacetsChecker();
    // Set static field: static System.Xml.Schema.FacetsChecker stringFacetsChecker
    static void _set_stringFacetsChecker(::System::Xml::Schema::FacetsChecker* value);
    // Get static field: static System.Xml.Schema.FacetsChecker miscFacetsChecker
    static ::System::Xml::Schema::FacetsChecker* _get_miscFacetsChecker();
    // Set static field: static System.Xml.Schema.FacetsChecker miscFacetsChecker
    static void _set_miscFacetsChecker(::System::Xml::Schema::FacetsChecker* value);
    // Get static field: static System.Xml.Schema.FacetsChecker numeric2FacetsChecker
    static ::System::Xml::Schema::FacetsChecker* _get_numeric2FacetsChecker();
    // Set static field: static System.Xml.Schema.FacetsChecker numeric2FacetsChecker
    static void _set_numeric2FacetsChecker(::System::Xml::Schema::FacetsChecker* value);
    // Get static field: static System.Xml.Schema.FacetsChecker binaryFacetsChecker
    static ::System::Xml::Schema::FacetsChecker* _get_binaryFacetsChecker();
    // Set static field: static System.Xml.Schema.FacetsChecker binaryFacetsChecker
    static void _set_binaryFacetsChecker(::System::Xml::Schema::FacetsChecker* value);
    // Get static field: static System.Xml.Schema.FacetsChecker dateTimeFacetsChecker
    static ::System::Xml::Schema::FacetsChecker* _get_dateTimeFacetsChecker();
    // Set static field: static System.Xml.Schema.FacetsChecker dateTimeFacetsChecker
    static void _set_dateTimeFacetsChecker(::System::Xml::Schema::FacetsChecker* value);
    // Get static field: static System.Xml.Schema.FacetsChecker durationFacetsChecker
    static ::System::Xml::Schema::FacetsChecker* _get_durationFacetsChecker();
    // Set static field: static System.Xml.Schema.FacetsChecker durationFacetsChecker
    static void _set_durationFacetsChecker(::System::Xml::Schema::FacetsChecker* value);
    // Get static field: static System.Xml.Schema.FacetsChecker listFacetsChecker
    static ::System::Xml::Schema::FacetsChecker* _get_listFacetsChecker();
    // Set static field: static System.Xml.Schema.FacetsChecker listFacetsChecker
    static void _set_listFacetsChecker(::System::Xml::Schema::FacetsChecker* value);
    // Get static field: static System.Xml.Schema.FacetsChecker qnameFacetsChecker
    static ::System::Xml::Schema::FacetsChecker* _get_qnameFacetsChecker();
    // Set static field: static System.Xml.Schema.FacetsChecker qnameFacetsChecker
    static void _set_qnameFacetsChecker(::System::Xml::Schema::FacetsChecker* value);
    // Get static field: static System.Xml.Schema.FacetsChecker unionFacetsChecker
    static ::System::Xml::Schema::FacetsChecker* _get_unionFacetsChecker();
    // Set static field: static System.Xml.Schema.FacetsChecker unionFacetsChecker
    static void _set_unionFacetsChecker(::System::Xml::Schema::FacetsChecker* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_anySimpleType
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_anySimpleType();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_anySimpleType
    static void _set_c_anySimpleType(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_anyURI
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_anyURI();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_anyURI
    static void _set_c_anyURI(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_base64Binary
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_base64Binary();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_base64Binary
    static void _set_c_base64Binary(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_boolean
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_boolean();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_boolean
    static void _set_c_boolean(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_byte
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_byte();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_byte
    static void _set_c_byte(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_char
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_char();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_char
    static void _set_c_char(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_date
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_date();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_date
    static void _set_c_date(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_dateTime
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_dateTime();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_dateTime
    static void _set_c_dateTime(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_dateTimeNoTz
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_dateTimeNoTz();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_dateTimeNoTz
    static void _set_c_dateTimeNoTz(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_dateTimeTz
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_dateTimeTz();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_dateTimeTz
    static void _set_c_dateTimeTz(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_day
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_day();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_day
    static void _set_c_day(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_decimal
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_decimal();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_decimal
    static void _set_c_decimal(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_double
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_double();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_double
    static void _set_c_double(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_doubleXdr
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_doubleXdr();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_doubleXdr
    static void _set_c_doubleXdr(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_duration
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_duration();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_duration
    static void _set_c_duration(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_ENTITY
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_ENTITY();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_ENTITY
    static void _set_c_ENTITY(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_ENTITIES
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_ENTITIES();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_ENTITIES
    static void _set_c_ENTITIES(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_ENUMERATION
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_ENUMERATION();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_ENUMERATION
    static void _set_c_ENUMERATION(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_fixed
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_fixed();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_fixed
    static void _set_c_fixed(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_float
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_float();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_float
    static void _set_c_float(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_floatXdr
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_floatXdr();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_floatXdr
    static void _set_c_floatXdr(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_hexBinary
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_hexBinary();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_hexBinary
    static void _set_c_hexBinary(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_ID
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_ID();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_ID
    static void _set_c_ID(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_IDREF
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_IDREF();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_IDREF
    static void _set_c_IDREF(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_IDREFS
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_IDREFS();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_IDREFS
    static void _set_c_IDREFS(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_int
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_int();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_int
    static void _set_c_int(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_integer
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_integer();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_integer
    static void _set_c_integer(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_language
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_language();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_language
    static void _set_c_language(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_long
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_long();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_long
    static void _set_c_long(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_month
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_month();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_month
    static void _set_c_month(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_monthDay
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_monthDay();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_monthDay
    static void _set_c_monthDay(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_Name
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_Name();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_Name
    static void _set_c_Name(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_NCName
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_NCName();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_NCName
    static void _set_c_NCName(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_negativeInteger
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_negativeInteger();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_negativeInteger
    static void _set_c_negativeInteger(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_NMTOKEN
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_NMTOKEN();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_NMTOKEN
    static void _set_c_NMTOKEN(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_NMTOKENS
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_NMTOKENS();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_NMTOKENS
    static void _set_c_NMTOKENS(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_nonNegativeInteger
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_nonNegativeInteger();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_nonNegativeInteger
    static void _set_c_nonNegativeInteger(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_nonPositiveInteger
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_nonPositiveInteger();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_nonPositiveInteger
    static void _set_c_nonPositiveInteger(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_normalizedString
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_normalizedString();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_normalizedString
    static void _set_c_normalizedString(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_NOTATION
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_NOTATION();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_NOTATION
    static void _set_c_NOTATION(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_positiveInteger
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_positiveInteger();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_positiveInteger
    static void _set_c_positiveInteger(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_QName
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_QName();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_QName
    static void _set_c_QName(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_QNameXdr
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_QNameXdr();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_QNameXdr
    static void _set_c_QNameXdr(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_short
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_short();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_short
    static void _set_c_short(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_string
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_string();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_string
    static void _set_c_string(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_time
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_time();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_time
    static void _set_c_time(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_timeNoTz
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_timeNoTz();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_timeNoTz
    static void _set_c_timeNoTz(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_timeTz
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_timeTz();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_timeTz
    static void _set_c_timeTz(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_token
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_token();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_token
    static void _set_c_token(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_unsignedByte
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_unsignedByte();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_unsignedByte
    static void _set_c_unsignedByte(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_unsignedInt
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_unsignedInt();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_unsignedInt
    static void _set_c_unsignedInt(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_unsignedLong
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_unsignedLong();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_unsignedLong
    static void _set_c_unsignedLong(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_unsignedShort
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_unsignedShort();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_unsignedShort
    static void _set_c_unsignedShort(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_uuid
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_uuid();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_uuid
    static void _set_c_uuid(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_year
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_year();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_year
    static void _set_c_year(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_yearMonth
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_yearMonth();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_yearMonth
    static void _set_c_yearMonth(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static readonly System.Xml.Schema.DatatypeImplementation c_normalizedStringV1Compat
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_normalizedStringV1Compat();
    // Set static field: static readonly System.Xml.Schema.DatatypeImplementation c_normalizedStringV1Compat
    static void _set_c_normalizedStringV1Compat(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static readonly System.Xml.Schema.DatatypeImplementation c_tokenV1Compat
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_tokenV1Compat();
    // Set static field: static readonly System.Xml.Schema.DatatypeImplementation c_tokenV1Compat
    static void _set_c_tokenV1Compat(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_anyAtomicType
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_anyAtomicType();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_anyAtomicType
    static void _set_c_anyAtomicType(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_dayTimeDuration
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_dayTimeDuration();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_dayTimeDuration
    static void _set_c_dayTimeDuration(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_untypedAtomicType
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_untypedAtomicType();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_untypedAtomicType
    static void _set_c_untypedAtomicType(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation c_yearMonthDuration
    static ::System::Xml::Schema::DatatypeImplementation* _get_c_yearMonthDuration();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation c_yearMonthDuration
    static void _set_c_yearMonthDuration(::System::Xml::Schema::DatatypeImplementation* value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation[] c_tokenizedTypes
    static ::ArrayW<::System::Xml::Schema::DatatypeImplementation*> _get_c_tokenizedTypes();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation[] c_tokenizedTypes
    static void _set_c_tokenizedTypes(::ArrayW<::System::Xml::Schema::DatatypeImplementation*> value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation[] c_tokenizedTypesXsd
    static ::ArrayW<::System::Xml::Schema::DatatypeImplementation*> _get_c_tokenizedTypesXsd();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation[] c_tokenizedTypesXsd
    static void _set_c_tokenizedTypesXsd(::ArrayW<::System::Xml::Schema::DatatypeImplementation*> value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation/System.Xml.Schema.SchemaDatatypeMap[] c_XdrTypes
    static ::ArrayW<::System::Xml::Schema::DatatypeImplementation::SchemaDatatypeMap*> _get_c_XdrTypes();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation/System.Xml.Schema.SchemaDatatypeMap[] c_XdrTypes
    static void _set_c_XdrTypes(::ArrayW<::System::Xml::Schema::DatatypeImplementation::SchemaDatatypeMap*> value);
    // Get static field: static private readonly System.Xml.Schema.DatatypeImplementation/System.Xml.Schema.SchemaDatatypeMap[] c_XsdTypes
    static ::ArrayW<::System::Xml::Schema::DatatypeImplementation::SchemaDatatypeMap*> _get_c_XsdTypes();
    // Set static field: static private readonly System.Xml.Schema.DatatypeImplementation/System.Xml.Schema.SchemaDatatypeMap[] c_XsdTypes
    static void _set_c_XsdTypes(::ArrayW<::System::Xml::Schema::DatatypeImplementation::SchemaDatatypeMap*> value);
    // Get instance field reference: private System.Xml.Schema.XmlSchemaDatatypeVariety variety
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaDatatypeVariety& dyn_variety();
    // Get instance field reference: private System.Xml.Schema.RestrictionFacets restriction
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::RestrictionFacets*& dyn_restriction();
    // Get instance field reference: private System.Xml.Schema.DatatypeImplementation baseType
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::DatatypeImplementation*& dyn_baseType();
    // Get instance field reference: private System.Xml.Schema.XmlValueConverter valueConverter
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlValueConverter*& dyn_valueConverter();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaType parentSchemaType
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaType*& dyn_parentSchemaType();
    // static System.Xml.Schema.XmlSchemaSimpleType get_AnySimpleType()
    // Offset: 0x10A3968
    static ::System::Xml::Schema::XmlSchemaSimpleType* get_AnySimpleType();
    // static System.Xml.Schema.XmlSchemaSimpleType get_UntypedAtomicType()
    // Offset: 0x10A39CC
    static ::System::Xml::Schema::XmlSchemaSimpleType* get_UntypedAtomicType();
    // protected System.Xml.Schema.DatatypeImplementation get_Base()
    // Offset: 0x10A4EF4
    ::System::Xml::Schema::DatatypeImplementation* get_Base();
    // System.Type get_ListValueType()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Type* get_ListValueType();
    // System.Xml.Schema.RestrictionFlags get_ValidRestrictionFlags()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Xml::Schema::RestrictionFlags get_ValidRestrictionFlags();
    // static private System.Void .cctor()
    // Offset: 0x109E920
    static void _cctor();
    // static System.Xml.Schema.DatatypeImplementation FromXmlTokenizedType(System.Xml.XmlTokenizedType token)
    // Offset: 0x10A3A30
    static ::System::Xml::Schema::DatatypeImplementation* FromXmlTokenizedType(::System::Xml::XmlTokenizedType token);
    // static System.Xml.Schema.DatatypeImplementation FromXmlTokenizedTypeXsd(System.Xml.XmlTokenizedType token)
    // Offset: 0x10A3AC0
    static ::System::Xml::Schema::DatatypeImplementation* FromXmlTokenizedTypeXsd(::System::Xml::XmlTokenizedType token);
    // static System.Xml.Schema.DatatypeImplementation FromXdrName(System.String name)
    // Offset: 0x10A3B50
    static ::System::Xml::Schema::DatatypeImplementation* FromXdrName(::StringW name);
    // static private System.Xml.Schema.DatatypeImplementation FromTypeName(System.String name)
    // Offset: 0x10A3C2C
    static ::System::Xml::Schema::DatatypeImplementation* FromTypeName(::StringW name);
    // static System.Xml.Schema.XmlSchemaSimpleType StartBuiltinType(System.Xml.XmlQualifiedName qname, System.Xml.Schema.XmlSchemaDatatype dataType)
    // Offset: 0x10A3D08
    static ::System::Xml::Schema::XmlSchemaSimpleType* StartBuiltinType(::System::Xml::XmlQualifiedName* qname, ::System::Xml::Schema::XmlSchemaDatatype* dataType);
    // static System.Void FinishBuiltinType(System.Xml.Schema.XmlSchemaSimpleType derivedType, System.Xml.Schema.XmlSchemaSimpleType baseType)
    // Offset: 0x10A3DDC
    static void FinishBuiltinType(::System::Xml::Schema::XmlSchemaSimpleType* derivedType, ::System::Xml::Schema::XmlSchemaSimpleType* baseType);
    // static System.Void CreateBuiltinTypes()
    // Offset: 0x10A30EC
    static void CreateBuiltinTypes();
    // static System.Xml.Schema.XmlSchemaSimpleType GetSimpleTypeFromTypeCode(System.Xml.Schema.XmlTypeCode typeCode)
    // Offset: 0x10A4004
    static ::System::Xml::Schema::XmlSchemaSimpleType* GetSimpleTypeFromTypeCode(::System::Xml::Schema::XmlTypeCode typeCode);
    // static System.Xml.Schema.XmlSchemaSimpleType GetSimpleTypeFromXsdType(System.Xml.XmlQualifiedName qname)
    // Offset: 0x10A4094
    static ::System::Xml::Schema::XmlSchemaSimpleType* GetSimpleTypeFromXsdType(::System::Xml::XmlQualifiedName* qname);
    // static System.Xml.Schema.XmlSchemaSimpleType GetNormalizedStringTypeV1Compat()
    // Offset: 0x10A4160
    static ::System::Xml::Schema::XmlSchemaSimpleType* GetNormalizedStringTypeV1Compat();
    // static System.Xml.Schema.XmlSchemaSimpleType GetTokenTypeV1Compat()
    // Offset: 0x10A42F4
    static ::System::Xml::Schema::XmlSchemaSimpleType* GetTokenTypeV1Compat();
    // static System.Xml.Schema.XmlSchemaSimpleType[] GetBuiltInTypes()
    // Offset: 0x10A4488
    static ::ArrayW<::System::Xml::Schema::XmlSchemaSimpleType*> GetBuiltInTypes();
    // static System.Xml.Schema.XmlTypeCode GetPrimitiveTypeCode(System.Xml.Schema.XmlTypeCode typeCode)
    // Offset: 0x10A44EC
    static ::System::Xml::Schema::XmlTypeCode GetPrimitiveTypeCode(::System::Xml::Schema::XmlTypeCode typeCode);
    // System.Xml.Schema.XmlSchemaDatatype DeriveByList(System.Int32 minSize, System.Xml.Schema.XmlSchemaType schemaType)
    // Offset: 0x10A2488
    ::System::Xml::Schema::XmlSchemaDatatype* DeriveByList(int minSize, ::System::Xml::Schema::XmlSchemaType* schemaType);
    // static System.Xml.Schema.DatatypeImplementation DeriveByUnion(System.Xml.Schema.XmlSchemaSimpleType[] types, System.Xml.Schema.XmlSchemaType schemaType)
    // Offset: 0x10A4844
    static ::System::Xml::Schema::DatatypeImplementation* DeriveByUnion(::ArrayW<::System::Xml::Schema::XmlSchemaSimpleType*> types, ::System::Xml::Schema::XmlSchemaType* schemaType);
    // System.Xml.Schema.XmlValueConverter CreateValueConverter(System.Xml.Schema.XmlSchemaType schemaType)
    // Offset: 0x10A4D60
    ::System::Xml::Schema::XmlValueConverter* CreateValueConverter(::System::Xml::Schema::XmlSchemaType* schemaType);
    // System.String GetTypeName()
    // Offset: 0x10A5108
    ::StringW GetTypeName();
    // protected System.Int32 Compare(System.Byte[] value1, System.Byte[] value2)
    // Offset: 0x10A5724
    int Compare(::ArrayW<uint8_t> value1, ::ArrayW<uint8_t> value2);
    // override System.Xml.Schema.FacetsChecker get_FacetsChecker()
    // Offset: 0x10A4D68
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Xml.Schema.FacetsChecker XmlSchemaDatatype::get_FacetsChecker()
    ::System::Xml::Schema::FacetsChecker* get_FacetsChecker();
    // override System.Xml.Schema.XmlValueConverter get_ValueConverter()
    // Offset: 0x10A4DCC
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Xml.Schema.XmlValueConverter XmlSchemaDatatype::get_ValueConverter()
    ::System::Xml::Schema::XmlValueConverter* get_ValueConverter();
    // public override System.Xml.XmlTokenizedType get_TokenizedType()
    // Offset: 0x10A4E0C
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Xml.XmlTokenizedType XmlSchemaDatatype::get_TokenizedType()
    ::System::Xml::XmlTokenizedType get_TokenizedType();
    // public override System.Type get_ValueType()
    // Offset: 0x10A4E14
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Type XmlSchemaDatatype::get_ValueType()
    ::System::Type* get_ValueType();
    // public override System.Xml.Schema.XmlSchemaDatatypeVariety get_Variety()
    // Offset: 0x10A4E8C
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Xml.Schema.XmlSchemaDatatypeVariety XmlSchemaDatatype::get_Variety()
    ::System::Xml::Schema::XmlSchemaDatatypeVariety get_Variety();
    // public override System.Xml.Schema.XmlTypeCode get_TypeCode()
    // Offset: 0x10A4E94
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Xml.Schema.XmlTypeCode XmlSchemaDatatype::get_TypeCode()
    ::System::Xml::Schema::XmlTypeCode get_TypeCode();
    // override System.Xml.Schema.RestrictionFacets get_Restriction()
    // Offset: 0x10A4E9C
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Xml.Schema.RestrictionFacets XmlSchemaDatatype::get_Restriction()
    ::System::Xml::Schema::RestrictionFacets* get_Restriction();
    // override System.Boolean get_HasLexicalFacets()
    // Offset: 0x10A4EA4
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Boolean XmlSchemaDatatype::get_HasLexicalFacets()
    bool get_HasLexicalFacets();
    // override System.Boolean get_HasValueFacets()
    // Offset: 0x10A4ECC
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Boolean XmlSchemaDatatype::get_HasValueFacets()
    bool get_HasValueFacets();
    // override System.Xml.Schema.XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
    // Offset: 0x10A4EFC
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Xml.Schema.XmlSchemaWhiteSpace XmlSchemaDatatype::get_BuiltInWhitespaceFacet()
    ::System::Xml::Schema::XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    // protected System.Void .ctor()
    // Offset: 0x10A57A0
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Void XmlSchemaDatatype::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DatatypeImplementation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::DatatypeImplementation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DatatypeImplementation*, creationType>()));
    }
    // override System.Xml.Schema.XmlSchemaDatatype DeriveByRestriction(System.Xml.Schema.XmlSchemaObjectCollection facets, System.Xml.XmlNameTable nameTable, System.Xml.Schema.XmlSchemaType schemaType)
    // Offset: 0x10A4640
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Xml.Schema.XmlSchemaDatatype XmlSchemaDatatype::DeriveByRestriction(System.Xml.Schema.XmlSchemaObjectCollection facets, System.Xml.XmlNameTable nameTable, System.Xml.Schema.XmlSchemaType schemaType)
    ::System::Xml::Schema::XmlSchemaDatatype* DeriveByRestriction(::System::Xml::Schema::XmlSchemaObjectCollection* facets, ::System::Xml::XmlNameTable* nameTable, ::System::Xml::Schema::XmlSchemaType* schemaType);
    // override System.Xml.Schema.XmlSchemaDatatype DeriveByList(System.Xml.Schema.XmlSchemaType schemaType)
    // Offset: 0x10A4730
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Xml.Schema.XmlSchemaDatatype XmlSchemaDatatype::DeriveByList(System.Xml.Schema.XmlSchemaType schemaType)
    ::System::Xml::Schema::XmlSchemaDatatype* DeriveByList(::System::Xml::Schema::XmlSchemaType* schemaType);
    // override System.Void VerifySchemaValid(System.Xml.Schema.XmlSchemaObjectTable notations, System.Xml.Schema.XmlSchemaObject caller)
    // Offset: 0x10A4970
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Void XmlSchemaDatatype::VerifySchemaValid(System.Xml.Schema.XmlSchemaObjectTable notations, System.Xml.Schema.XmlSchemaObject caller)
    void VerifySchemaValid(::System::Xml::Schema::XmlSchemaObjectTable* notations, ::System::Xml::Schema::XmlSchemaObject* caller);
    // public override System.Boolean IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype datatype)
    // Offset: 0x10A4974
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Boolean XmlSchemaDatatype::IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype datatype)
    bool IsDerivedFrom(::System::Xml::Schema::XmlSchemaDatatype* datatype);
    // override System.Boolean IsEqual(System.Object o1, System.Object o2)
    // Offset: 0x10A4C40
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Boolean XmlSchemaDatatype::IsEqual(System.Object o1, System.Object o2)
    bool IsEqual(::Il2CppObject* o1, ::Il2CppObject* o2);
    // override System.Boolean IsComparable(System.Xml.Schema.XmlSchemaDatatype dtype)
    // Offset: 0x10A4C68
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Boolean XmlSchemaDatatype::IsComparable(System.Xml.Schema.XmlSchemaDatatype dtype)
    bool IsComparable(::System::Xml::Schema::XmlSchemaDatatype* dtype);
    // public override System.Object ParseValue(System.String s, System.Xml.XmlNameTable nameTable, System.Xml.IXmlNamespaceResolver nsmgr)
    // Offset: 0x10A4F04
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Object XmlSchemaDatatype::ParseValue(System.String s, System.Xml.XmlNameTable nameTable, System.Xml.IXmlNamespaceResolver nsmgr)
    ::Il2CppObject* ParseValue(::StringW s, ::System::Xml::XmlNameTable* nameTable, ::System::Xml::IXmlNamespaceResolver* nsmgr);
    // override System.Object ParseValue(System.String s, System.Xml.XmlNameTable nameTable, System.Xml.IXmlNamespaceResolver nsmgr, System.Boolean createAtomicValue)
    // Offset: 0x10A5178
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Object XmlSchemaDatatype::ParseValue(System.String s, System.Xml.XmlNameTable nameTable, System.Xml.IXmlNamespaceResolver nsmgr, System.Boolean createAtomicValue)
    ::Il2CppObject* ParseValue(::StringW s, ::System::Xml::XmlNameTable* nameTable, ::System::Xml::IXmlNamespaceResolver* nsmgr, bool createAtomicValue);
    // override System.Exception TryParseValue(System.Object value, System.Xml.XmlNameTable nameTable, System.Xml.IXmlNamespaceResolver namespaceResolver, out System.Object typedValue)
    // Offset: 0x10A52F8
    // Implemented from: System.Xml.Schema.XmlSchemaDatatype
    // Base method: System.Exception XmlSchemaDatatype::TryParseValue(System.Object value, System.Xml.XmlNameTable nameTable, System.Xml.IXmlNamespaceResolver namespaceResolver, out System.Object typedValue)
    ::System::Exception* TryParseValue(::Il2CppObject* value, ::System::Xml::XmlNameTable* nameTable, ::System::Xml::IXmlNamespaceResolver* namespaceResolver, ByRef<::Il2CppObject*> typedValue);
  }; // System.Xml.Schema.DatatypeImplementation
  #pragma pack(pop)
  static check_size<sizeof(DatatypeImplementation), 48 + sizeof(::System::Xml::Schema::XmlSchemaType*)> __System_Xml_Schema_DatatypeImplementationSizeCheck;
  static_assert(sizeof(DatatypeImplementation) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::get_AnySimpleType
// Il2CppName: get_AnySimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaSimpleType* (*)()>(&System::Xml::Schema::DatatypeImplementation::get_AnySimpleType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "get_AnySimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::get_UntypedAtomicType
// Il2CppName: get_UntypedAtomicType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaSimpleType* (*)()>(&System::Xml::Schema::DatatypeImplementation::get_UntypedAtomicType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "get_UntypedAtomicType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::get_Base
// Il2CppName: get_Base
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::DatatypeImplementation* (System::Xml::Schema::DatatypeImplementation::*)()>(&System::Xml::Schema::DatatypeImplementation::get_Base)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "get_Base", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::get_ListValueType
// Il2CppName: get_ListValueType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Xml::Schema::DatatypeImplementation::*)()>(&System::Xml::Schema::DatatypeImplementation::get_ListValueType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "get_ListValueType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::get_ValidRestrictionFlags
// Il2CppName: get_ValidRestrictionFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::RestrictionFlags (System::Xml::Schema::DatatypeImplementation::*)()>(&System::Xml::Schema::DatatypeImplementation::get_ValidRestrictionFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "get_ValidRestrictionFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::Schema::DatatypeImplementation::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::FromXmlTokenizedType
// Il2CppName: FromXmlTokenizedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::DatatypeImplementation* (*)(::System::Xml::XmlTokenizedType)>(&System::Xml::Schema::DatatypeImplementation::FromXmlTokenizedType)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTokenizedType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "FromXmlTokenizedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::FromXmlTokenizedTypeXsd
// Il2CppName: FromXmlTokenizedTypeXsd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::DatatypeImplementation* (*)(::System::Xml::XmlTokenizedType)>(&System::Xml::Schema::DatatypeImplementation::FromXmlTokenizedTypeXsd)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTokenizedType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "FromXmlTokenizedTypeXsd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::FromXdrName
// Il2CppName: FromXdrName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::DatatypeImplementation* (*)(::StringW)>(&System::Xml::Schema::DatatypeImplementation::FromXdrName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "FromXdrName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::FromTypeName
// Il2CppName: FromTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::DatatypeImplementation* (*)(::StringW)>(&System::Xml::Schema::DatatypeImplementation::FromTypeName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "FromTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::StartBuiltinType
// Il2CppName: StartBuiltinType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaSimpleType* (*)(::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::XmlSchemaDatatype*)>(&System::Xml::Schema::DatatypeImplementation::StartBuiltinType)> {
  static const MethodInfo* get() {
    static auto* qname = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    static auto* dataType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaDatatype")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "StartBuiltinType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qname, dataType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::FinishBuiltinType
// Il2CppName: FinishBuiltinType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::Schema::XmlSchemaSimpleType*, ::System::Xml::Schema::XmlSchemaSimpleType*)>(&System::Xml::Schema::DatatypeImplementation::FinishBuiltinType)> {
  static const MethodInfo* get() {
    static auto* derivedType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    static auto* baseType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "FinishBuiltinType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedType, baseType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::CreateBuiltinTypes
// Il2CppName: CreateBuiltinTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::Schema::DatatypeImplementation::CreateBuiltinTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "CreateBuiltinTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::GetSimpleTypeFromTypeCode
// Il2CppName: GetSimpleTypeFromTypeCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaSimpleType* (*)(::System::Xml::Schema::XmlTypeCode)>(&System::Xml::Schema::DatatypeImplementation::GetSimpleTypeFromTypeCode)> {
  static const MethodInfo* get() {
    static auto* typeCode = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlTypeCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "GetSimpleTypeFromTypeCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeCode});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::GetSimpleTypeFromXsdType
// Il2CppName: GetSimpleTypeFromXsdType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaSimpleType* (*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::DatatypeImplementation::GetSimpleTypeFromXsdType)> {
  static const MethodInfo* get() {
    static auto* qname = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "GetSimpleTypeFromXsdType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qname});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::GetNormalizedStringTypeV1Compat
// Il2CppName: GetNormalizedStringTypeV1Compat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaSimpleType* (*)()>(&System::Xml::Schema::DatatypeImplementation::GetNormalizedStringTypeV1Compat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "GetNormalizedStringTypeV1Compat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::GetTokenTypeV1Compat
// Il2CppName: GetTokenTypeV1Compat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaSimpleType* (*)()>(&System::Xml::Schema::DatatypeImplementation::GetTokenTypeV1Compat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "GetTokenTypeV1Compat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::GetBuiltInTypes
// Il2CppName: GetBuiltInTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Xml::Schema::XmlSchemaSimpleType*> (*)()>(&System::Xml::Schema::DatatypeImplementation::GetBuiltInTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "GetBuiltInTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::GetPrimitiveTypeCode
// Il2CppName: GetPrimitiveTypeCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlTypeCode (*)(::System::Xml::Schema::XmlTypeCode)>(&System::Xml::Schema::DatatypeImplementation::GetPrimitiveTypeCode)> {
  static const MethodInfo* get() {
    static auto* typeCode = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlTypeCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "GetPrimitiveTypeCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeCode});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::DeriveByList
// Il2CppName: DeriveByList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaDatatype* (System::Xml::Schema::DatatypeImplementation::*)(int, ::System::Xml::Schema::XmlSchemaType*)>(&System::Xml::Schema::DatatypeImplementation::DeriveByList)> {
  static const MethodInfo* get() {
    static auto* minSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* schemaType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "DeriveByList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minSize, schemaType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::DeriveByUnion
// Il2CppName: DeriveByUnion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::DatatypeImplementation* (*)(::ArrayW<::System::Xml::Schema::XmlSchemaSimpleType*>, ::System::Xml::Schema::XmlSchemaType*)>(&System::Xml::Schema::DatatypeImplementation::DeriveByUnion)> {
  static const MethodInfo* get() {
    static auto* types = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType"), 1)->byval_arg;
    static auto* schemaType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "DeriveByUnion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{types, schemaType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::CreateValueConverter
// Il2CppName: CreateValueConverter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlValueConverter* (System::Xml::Schema::DatatypeImplementation::*)(::System::Xml::Schema::XmlSchemaType*)>(&System::Xml::Schema::DatatypeImplementation::CreateValueConverter)> {
  static const MethodInfo* get() {
    static auto* schemaType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "CreateValueConverter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::GetTypeName
// Il2CppName: GetTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::DatatypeImplementation::*)()>(&System::Xml::Schema::DatatypeImplementation::GetTypeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "GetTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::DatatypeImplementation::*)(::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&System::Xml::Schema::DatatypeImplementation::Compare)> {
  static const MethodInfo* get() {
    static auto* value1 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* value2 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value1, value2});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::get_FacetsChecker
// Il2CppName: get_FacetsChecker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::FacetsChecker* (System::Xml::Schema::DatatypeImplementation::*)()>(&System::Xml::Schema::DatatypeImplementation::get_FacetsChecker)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "get_FacetsChecker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::get_ValueConverter
// Il2CppName: get_ValueConverter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlValueConverter* (System::Xml::Schema::DatatypeImplementation::*)()>(&System::Xml::Schema::DatatypeImplementation::get_ValueConverter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "get_ValueConverter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::get_TokenizedType
// Il2CppName: get_TokenizedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlTokenizedType (System::Xml::Schema::DatatypeImplementation::*)()>(&System::Xml::Schema::DatatypeImplementation::get_TokenizedType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "get_TokenizedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::get_ValueType
// Il2CppName: get_ValueType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Xml::Schema::DatatypeImplementation::*)()>(&System::Xml::Schema::DatatypeImplementation::get_ValueType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "get_ValueType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::get_Variety
// Il2CppName: get_Variety
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaDatatypeVariety (System::Xml::Schema::DatatypeImplementation::*)()>(&System::Xml::Schema::DatatypeImplementation::get_Variety)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "get_Variety", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::get_TypeCode
// Il2CppName: get_TypeCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlTypeCode (System::Xml::Schema::DatatypeImplementation::*)()>(&System::Xml::Schema::DatatypeImplementation::get_TypeCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "get_TypeCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::get_Restriction
// Il2CppName: get_Restriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::RestrictionFacets* (System::Xml::Schema::DatatypeImplementation::*)()>(&System::Xml::Schema::DatatypeImplementation::get_Restriction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "get_Restriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::get_HasLexicalFacets
// Il2CppName: get_HasLexicalFacets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::DatatypeImplementation::*)()>(&System::Xml::Schema::DatatypeImplementation::get_HasLexicalFacets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "get_HasLexicalFacets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::get_HasValueFacets
// Il2CppName: get_HasValueFacets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::DatatypeImplementation::*)()>(&System::Xml::Schema::DatatypeImplementation::get_HasValueFacets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "get_HasValueFacets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::get_BuiltInWhitespaceFacet
// Il2CppName: get_BuiltInWhitespaceFacet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaWhiteSpace (System::Xml::Schema::DatatypeImplementation::*)()>(&System::Xml::Schema::DatatypeImplementation::get_BuiltInWhitespaceFacet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "get_BuiltInWhitespaceFacet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::DeriveByRestriction
// Il2CppName: DeriveByRestriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaDatatype* (System::Xml::Schema::DatatypeImplementation::*)(::System::Xml::Schema::XmlSchemaObjectCollection*, ::System::Xml::XmlNameTable*, ::System::Xml::Schema::XmlSchemaType*)>(&System::Xml::Schema::DatatypeImplementation::DeriveByRestriction)> {
  static const MethodInfo* get() {
    static auto* facets = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    static auto* nameTable = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    static auto* schemaType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "DeriveByRestriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facets, nameTable, schemaType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::DeriveByList
// Il2CppName: DeriveByList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaDatatype* (System::Xml::Schema::DatatypeImplementation::*)(::System::Xml::Schema::XmlSchemaType*)>(&System::Xml::Schema::DatatypeImplementation::DeriveByList)> {
  static const MethodInfo* get() {
    static auto* schemaType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "DeriveByList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::VerifySchemaValid
// Il2CppName: VerifySchemaValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::DatatypeImplementation::*)(::System::Xml::Schema::XmlSchemaObjectTable*, ::System::Xml::Schema::XmlSchemaObject*)>(&System::Xml::Schema::DatatypeImplementation::VerifySchemaValid)> {
  static const MethodInfo* get() {
    static auto* notations = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectTable")->byval_arg;
    static auto* caller = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "VerifySchemaValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{notations, caller});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::IsDerivedFrom
// Il2CppName: IsDerivedFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::DatatypeImplementation::*)(::System::Xml::Schema::XmlSchemaDatatype*)>(&System::Xml::Schema::DatatypeImplementation::IsDerivedFrom)> {
  static const MethodInfo* get() {
    static auto* datatype = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaDatatype")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "IsDerivedFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{datatype});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::IsEqual
// Il2CppName: IsEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::DatatypeImplementation::*)(::Il2CppObject*, ::Il2CppObject*)>(&System::Xml::Schema::DatatypeImplementation::IsEqual)> {
  static const MethodInfo* get() {
    static auto* o1 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* o2 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "IsEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o1, o2});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::IsComparable
// Il2CppName: IsComparable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::DatatypeImplementation::*)(::System::Xml::Schema::XmlSchemaDatatype*)>(&System::Xml::Schema::DatatypeImplementation::IsComparable)> {
  static const MethodInfo* get() {
    static auto* dtype = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaDatatype")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "IsComparable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dtype});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::ParseValue
// Il2CppName: ParseValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::DatatypeImplementation::*)(::StringW, ::System::Xml::XmlNameTable*, ::System::Xml::IXmlNamespaceResolver*)>(&System::Xml::Schema::DatatypeImplementation::ParseValue)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* nameTable = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    static auto* nsmgr = &::il2cpp_utils::GetClassFromName("System.Xml", "IXmlNamespaceResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "ParseValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, nameTable, nsmgr});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::ParseValue
// Il2CppName: ParseValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::DatatypeImplementation::*)(::StringW, ::System::Xml::XmlNameTable*, ::System::Xml::IXmlNamespaceResolver*, bool)>(&System::Xml::Schema::DatatypeImplementation::ParseValue)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* nameTable = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    static auto* nsmgr = &::il2cpp_utils::GetClassFromName("System.Xml", "IXmlNamespaceResolver")->byval_arg;
    static auto* createAtomicValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "ParseValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, nameTable, nsmgr, createAtomicValue});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::DatatypeImplementation::TryParseValue
// Il2CppName: TryParseValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (System::Xml::Schema::DatatypeImplementation::*)(::Il2CppObject*, ::System::Xml::XmlNameTable*, ::System::Xml::IXmlNamespaceResolver*, ByRef<::Il2CppObject*>)>(&System::Xml::Schema::DatatypeImplementation::TryParseValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* nameTable = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    static auto* namespaceResolver = &::il2cpp_utils::GetClassFromName("System.Xml", "IXmlNamespaceResolver")->byval_arg;
    static auto* typedValue = &::il2cpp_utils::GetClassFromName("System", "Object")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::DatatypeImplementation*), "TryParseValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, nameTable, namespaceResolver, typedValue});
  }
};
