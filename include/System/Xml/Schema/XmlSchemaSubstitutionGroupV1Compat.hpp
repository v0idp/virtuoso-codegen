// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlSchemaSubstitutionGroup
#include "System/Xml/Schema/XmlSchemaSubstitutionGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaChoice
  class XmlSchemaChoice;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaSubstitutionGroupV1Compat
  class XmlSchemaSubstitutionGroupV1Compat;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchemaSubstitutionGroupV1Compat);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaSubstitutionGroupV1Compat*, "System.Xml.Schema", "XmlSchemaSubstitutionGroupV1Compat");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaSubstitutionGroupV1Compat
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSchemaSubstitutionGroupV1Compat : public ::System::Xml::Schema::XmlSchemaSubstitutionGroup {
    public:
    public:
    // private System.Xml.Schema.XmlSchemaChoice choice
    // Size: 0x8
    // Offset: 0x48
    ::System::Xml::Schema::XmlSchemaChoice* choice;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaChoice*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Xml::Schema::XmlSchemaChoice*
    constexpr operator ::System::Xml::Schema::XmlSchemaChoice*() const noexcept {
      return choice;
    }
    // Get instance field reference: private System.Xml.Schema.XmlSchemaChoice choice
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaChoice*& dyn_choice();
    // System.Xml.Schema.XmlSchemaChoice get_Choice()
    // Offset: 0xF3731C
    ::System::Xml::Schema::XmlSchemaChoice* get_Choice();
    // public System.Void .ctor()
    // Offset: 0xF37324
    // Implemented from: System.Xml.Schema.XmlSchemaSubstitutionGroup
    // Base method: System.Void XmlSchemaSubstitutionGroup::.ctor()
    // Base method: System.Void XmlSchemaObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaSubstitutionGroupV1Compat* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaSubstitutionGroupV1Compat::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaSubstitutionGroupV1Compat*, creationType>()));
    }
  }; // System.Xml.Schema.XmlSchemaSubstitutionGroupV1Compat
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaSubstitutionGroupV1Compat), 72 + sizeof(::System::Xml::Schema::XmlSchemaChoice*)> __System_Xml_Schema_XmlSchemaSubstitutionGroupV1CompatSizeCheck;
  static_assert(sizeof(XmlSchemaSubstitutionGroupV1Compat) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSubstitutionGroupV1Compat::get_Choice
// Il2CppName: get_Choice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaChoice* (System::Xml::Schema::XmlSchemaSubstitutionGroupV1Compat::*)()>(&System::Xml::Schema::XmlSchemaSubstitutionGroupV1Compat::get_Choice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSubstitutionGroupV1Compat*), "get_Choice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSubstitutionGroupV1Compat::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
