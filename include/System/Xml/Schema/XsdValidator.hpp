// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.BaseValidator
#include "System/Xml/Schema/BaseValidator.hpp"
// Including type: System.Xml.Schema.XmlSchemaContentProcessing
#include "System/Xml/Schema/XmlSchemaContentProcessing.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: HWStack
  class HWStack;
  // Forward declaring type: XmlNamespaceManager
  class XmlNamespaceManager;
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
  // Forward declaring type: XmlTokenizedType
  struct XmlTokenizedType;
  // Forward declaring type: XmlValidatingReaderImpl
  class XmlValidatingReaderImpl;
  // Forward declaring type: IValidationEventHandling
  class IValidationEventHandling;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: IdRefNode
  class IdRefNode;
  // Forward declaring type: Parser
  class Parser;
  // Forward declaring type: XmlSchemaDatatype
  class XmlSchemaDatatype;
  // Forward declaring type: SchemaElementDecl
  class SchemaElementDecl;
  // Forward declaring type: SchemaAttDef
  class SchemaAttDef;
  // Forward declaring type: XmlSchemaCollection
  class XmlSchemaCollection;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XsdValidator
  class XsdValidator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XsdValidator);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XsdValidator*, "System.Xml.Schema", "XsdValidator");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x100
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XsdValidator
  // [TokenAttribute] Offset: FFFFFFFF
  class XsdValidator : public ::System::Xml::Schema::BaseValidator {
    public:
    // Writing base type padding for base size: 0x7A to desired offset: 0x7C
    char ___base_padding[0x2] = {};
    public:
    // private System.Int32 startIDConstraint
    // Size: 0x4
    // Offset: 0x7C
    int startIDConstraint;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Xml.HWStack validationStack
    // Size: 0x8
    // Offset: 0x80
    ::System::Xml::HWStack* validationStack;
    // Field size check
    static_assert(sizeof(::System::Xml::HWStack*) == 0x8);
    // private System.Collections.Hashtable attPresence
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Hashtable* attPresence;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Xml.XmlNamespaceManager nsManager
    // Size: 0x8
    // Offset: 0x90
    ::System::Xml::XmlNamespaceManager* nsManager;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNamespaceManager*) == 0x8);
    // private System.Boolean bManageNamespaces
    // Size: 0x1
    // Offset: 0x98
    bool bManageNamespaces;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: bManageNamespaces and: IDs
    char __padding4[0x7] = {};
    // private System.Collections.Hashtable IDs
    // Size: 0x8
    // Offset: 0xA0
    ::System::Collections::Hashtable* IDs;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Xml.Schema.IdRefNode idRefListHead
    // Size: 0x8
    // Offset: 0xA8
    ::System::Xml::Schema::IdRefNode* idRefListHead;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::IdRefNode*) == 0x8);
    // private System.Xml.Schema.Parser inlineSchemaParser
    // Size: 0x8
    // Offset: 0xB0
    ::System::Xml::Schema::Parser* inlineSchemaParser;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::Parser*) == 0x8);
    // private System.Xml.Schema.XmlSchemaContentProcessing processContents
    // Size: 0x4
    // Offset: 0xB8
    ::System::Xml::Schema::XmlSchemaContentProcessing processContents;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaContentProcessing) == 0x4);
    // Padding between fields: processContents and: NsXmlNs
    char __padding8[0x4] = {};
    // private System.String NsXmlNs
    // Size: 0x8
    // Offset: 0xC0
    ::StringW NsXmlNs;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String NsXs
    // Size: 0x8
    // Offset: 0xC8
    ::StringW NsXs;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String NsXsi
    // Size: 0x8
    // Offset: 0xD0
    ::StringW NsXsi;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String XsiType
    // Size: 0x8
    // Offset: 0xD8
    ::StringW XsiType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String XsiNil
    // Size: 0x8
    // Offset: 0xE0
    ::StringW XsiNil;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String XsiSchemaLocation
    // Size: 0x8
    // Offset: 0xE8
    ::StringW XsiSchemaLocation;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String XsiNoNamespaceSchemaLocation
    // Size: 0x8
    // Offset: 0xF0
    ::StringW XsiNoNamespaceSchemaLocation;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String XsdSchema
    // Size: 0x8
    // Offset: 0xF8
    ::StringW XsdSchema;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get static field: static private readonly System.Xml.Schema.XmlSchemaDatatype dtCDATA
    static ::System::Xml::Schema::XmlSchemaDatatype* _get_dtCDATA();
    // Set static field: static private readonly System.Xml.Schema.XmlSchemaDatatype dtCDATA
    static void _set_dtCDATA(::System::Xml::Schema::XmlSchemaDatatype* value);
    // Get static field: static private readonly System.Xml.Schema.XmlSchemaDatatype dtQName
    static ::System::Xml::Schema::XmlSchemaDatatype* _get_dtQName();
    // Set static field: static private readonly System.Xml.Schema.XmlSchemaDatatype dtQName
    static void _set_dtQName(::System::Xml::Schema::XmlSchemaDatatype* value);
    // Get static field: static private readonly System.Xml.Schema.XmlSchemaDatatype dtStringArray
    static ::System::Xml::Schema::XmlSchemaDatatype* _get_dtStringArray();
    // Set static field: static private readonly System.Xml.Schema.XmlSchemaDatatype dtStringArray
    static void _set_dtStringArray(::System::Xml::Schema::XmlSchemaDatatype* value);
    // Get instance field reference: private System.Int32 startIDConstraint
    [[deprecated("Use field access instead!")]] int& dyn_startIDConstraint();
    // Get instance field reference: private System.Xml.HWStack validationStack
    [[deprecated("Use field access instead!")]] ::System::Xml::HWStack*& dyn_validationStack();
    // Get instance field reference: private System.Collections.Hashtable attPresence
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_attPresence();
    // Get instance field reference: private System.Xml.XmlNamespaceManager nsManager
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNamespaceManager*& dyn_nsManager();
    // Get instance field reference: private System.Boolean bManageNamespaces
    [[deprecated("Use field access instead!")]] bool& dyn_bManageNamespaces();
    // Get instance field reference: private System.Collections.Hashtable IDs
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_IDs();
    // Get instance field reference: private System.Xml.Schema.IdRefNode idRefListHead
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::IdRefNode*& dyn_idRefListHead();
    // Get instance field reference: private System.Xml.Schema.Parser inlineSchemaParser
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::Parser*& dyn_inlineSchemaParser();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaContentProcessing processContents
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaContentProcessing& dyn_processContents();
    // Get instance field reference: private System.String NsXmlNs
    [[deprecated("Use field access instead!")]] ::StringW& dyn_NsXmlNs();
    // Get instance field reference: private System.String NsXs
    [[deprecated("Use field access instead!")]] ::StringW& dyn_NsXs();
    // Get instance field reference: private System.String NsXsi
    [[deprecated("Use field access instead!")]] ::StringW& dyn_NsXsi();
    // Get instance field reference: private System.String XsiType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_XsiType();
    // Get instance field reference: private System.String XsiNil
    [[deprecated("Use field access instead!")]] ::StringW& dyn_XsiNil();
    // Get instance field reference: private System.String XsiSchemaLocation
    [[deprecated("Use field access instead!")]] ::StringW& dyn_XsiSchemaLocation();
    // Get instance field reference: private System.String XsiNoNamespaceSchemaLocation
    [[deprecated("Use field access instead!")]] ::StringW& dyn_XsiNoNamespaceSchemaLocation();
    // Get instance field reference: private System.String XsdSchema
    [[deprecated("Use field access instead!")]] ::StringW& dyn_XsdSchema();
    // private System.Boolean get_IsInlineSchemaStarted()
    // Offset: 0xC16620
    bool get_IsInlineSchemaStarted();
    // private System.Boolean get_HasSchema()
    // Offset: 0xC17F20
    bool get_HasSchema();
    // private System.Boolean get_HasIdentityConstraints()
    // Offset: 0xC19118
    bool get_HasIdentityConstraints();
    // static private System.Void .cctor()
    // Offset: 0xC1B2F4
    static void _cctor();
    // private System.Void Init()
    // Offset: 0xC160C8
    void Init();
    // private System.Void ProcessInlineSchema()
    // Offset: 0xC16630
    void ProcessInlineSchema();
    // private System.Void ValidateElement()
    // Offset: 0xC168F0
    void ValidateElement();
    // private System.Object ValidateChildElement()
    // Offset: 0xC16D68
    ::Il2CppObject* ValidateChildElement();
    // private System.Void ProcessElement(System.Object particle)
    // Offset: 0xC16FB8
    void ProcessElement(::Il2CppObject* particle);
    // private System.Void ProcessXsiAttributes(out System.Xml.XmlQualifiedName xsiType, out System.String xsiNil)
    // Offset: 0xC172F4
    void ProcessXsiAttributes(ByRef<::System::Xml::XmlQualifiedName*> xsiType, ByRef<::StringW> xsiNil);
    // private System.Void ValidateEndElement()
    // Offset: 0xC16A5C
    void ValidateEndElement();
    // private System.Xml.Schema.SchemaElementDecl FastGetElementDecl(System.Object particle)
    // Offset: 0xC1720C
    ::System::Xml::Schema::SchemaElementDecl* FastGetElementDecl(::Il2CppObject* particle);
    // private System.Xml.Schema.SchemaElementDecl ThoroughGetElementDecl(System.Xml.Schema.SchemaElementDecl elementDecl, System.Xml.XmlQualifiedName xsiType, System.String xsiNil)
    // Offset: 0xC17AE0
    ::System::Xml::Schema::SchemaElementDecl* ThoroughGetElementDecl(::System::Xml::Schema::SchemaElementDecl* elementDecl, ::System::Xml::XmlQualifiedName* xsiType, ::StringW xsiNil);
    // private System.Void ValidateStartElement()
    // Offset: 0xC17FA0
    void ValidateStartElement();
    // private System.Void ValidateEndStartElement()
    // Offset: 0xC186AC
    void ValidateEndStartElement();
    // private System.Void LoadSchemaFromLocation(System.String uri, System.String url)
    // Offset: 0xC1A244
    void LoadSchemaFromLocation(::StringW uri, ::StringW url);
    // private System.Void LoadSchema(System.String uri, System.String url)
    // Offset: 0xC18AB0
    void LoadSchema(::StringW uri, ::StringW url);
    // private System.Void ProcessTokenizedType(System.Xml.XmlTokenizedType ttype, System.String name)
    // Offset: 0xC1A8A8
    void ProcessTokenizedType(::System::Xml::XmlTokenizedType ttype, ::StringW name);
    // private System.Void CheckValue(System.String value, System.Xml.Schema.SchemaAttDef attdef)
    // Offset: 0xC18C74
    void CheckValue(::StringW value, ::System::Xml::Schema::SchemaAttDef* attdef);
    // System.Void AddID(System.String name, System.Object node)
    // Offset: 0xC1AAB0
    void AddID(::StringW name, ::Il2CppObject* node);
    // public System.Boolean IsXSDRoot(System.String localName, System.String ns)
    // Offset: 0xC16F64
    bool IsXSDRoot(::StringW localName, ::StringW ns);
    // private System.Void Push(System.Xml.XmlQualifiedName elementName)
    // Offset: 0xC1642C
    void Push(::System::Xml::XmlQualifiedName* elementName);
    // private System.Void Pop()
    // Offset: 0xC19E28
    void Pop();
    // private System.Void CheckForwardRefs()
    // Offset: 0xC16C58
    void CheckForwardRefs();
    // private System.Void ValidateStartElementIdentityConstraints()
    // Offset: 0xC17F44
    void ValidateStartElementIdentityConstraints();
    // private System.Void AddIdentityConstraints()
    // Offset: 0xC1AB60
    void AddIdentityConstraints();
    // private System.Void ElementIdentityConstraints()
    // Offset: 0xC1AF8C
    void ElementIdentityConstraints();
    // private System.Void AttributeIdentityConstraints(System.String name, System.String ns, System.Object obj, System.String sobj, System.Xml.Schema.SchemaAttDef attdef)
    // Offset: 0xC19F68
    void AttributeIdentityConstraints(::StringW name, ::StringW ns, ::Il2CppObject* obj, ::StringW sobj, ::System::Xml::Schema::SchemaAttDef* attdef);
    // private System.Object UnWrapUnion(System.Object typedValue)
    // Offset: 0xC19EE0
    ::Il2CppObject* UnWrapUnion(::Il2CppObject* typedValue);
    // private System.Void EndElementIdentityConstraints()
    // Offset: 0xC19128
    void EndElementIdentityConstraints();
    // public override System.Boolean get_PreserveWhitespace()
    // Offset: 0xC1A86C
    // Implemented from: System.Xml.Schema.BaseValidator
    // Base method: System.Boolean BaseValidator::get_PreserveWhitespace()
    bool get_PreserveWhitespace();
    // System.Void .ctor(System.Xml.Schema.BaseValidator validator)
    // Offset: 0xC16098
    // Implemented from: System.Xml.Schema.BaseValidator
    // Base method: System.Void BaseValidator::.ctor(System.Xml.Schema.BaseValidator validator)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XsdValidator* New_ctor(::System::Xml::Schema::BaseValidator* validator) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XsdValidator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XsdValidator*, creationType>(validator)));
    }
    // System.Void .ctor(System.Xml.XmlValidatingReaderImpl reader, System.Xml.Schema.XmlSchemaCollection schemaCollection, System.Xml.IValidationEventHandling eventHandling)
    // Offset: 0xC163FC
    // Implemented from: System.Xml.Schema.BaseValidator
    // Base method: System.Void BaseValidator::.ctor(System.Xml.XmlValidatingReaderImpl reader, System.Xml.Schema.XmlSchemaCollection schemaCollection, System.Xml.IValidationEventHandling eventHandling)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XsdValidator* New_ctor(::System::Xml::XmlValidatingReaderImpl* reader, ::System::Xml::Schema::XmlSchemaCollection* schemaCollection, ::System::Xml::IValidationEventHandling* eventHandling) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XsdValidator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XsdValidator*, creationType>(reader, schemaCollection, eventHandling)));
    }
    // public override System.Void Validate()
    // Offset: 0xC1654C
    // Implemented from: System.Xml.Schema.BaseValidator
    // Base method: System.Void BaseValidator::Validate()
    void Validate();
    // public override System.Void CompleteValidation()
    // Offset: 0xC16C54
    // Implemented from: System.Xml.Schema.BaseValidator
    // Base method: System.Void BaseValidator::CompleteValidation()
    void CompleteValidation();
    // public override System.Object FindId(System.String name)
    // Offset: 0xC1AB44
    // Implemented from: System.Xml.Schema.BaseValidator
    // Base method: System.Object BaseValidator::FindId(System.String name)
    ::Il2CppObject* FindId(::StringW name);
  }; // System.Xml.Schema.XsdValidator
  #pragma pack(pop)
  static check_size<sizeof(XsdValidator), 248 + sizeof(::StringW)> __System_Xml_Schema_XsdValidatorSizeCheck;
  static_assert(sizeof(XsdValidator) == 0x100);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::get_IsInlineSchemaStarted
// Il2CppName: get_IsInlineSchemaStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::get_IsInlineSchemaStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "get_IsInlineSchemaStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::get_HasSchema
// Il2CppName: get_HasSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::get_HasSchema)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "get_HasSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::get_HasIdentityConstraints
// Il2CppName: get_HasIdentityConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::get_HasIdentityConstraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "get_HasIdentityConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::Schema::XsdValidator::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::ProcessInlineSchema
// Il2CppName: ProcessInlineSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::ProcessInlineSchema)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "ProcessInlineSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::ValidateElement
// Il2CppName: ValidateElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::ValidateElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "ValidateElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::ValidateChildElement
// Il2CppName: ValidateChildElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::ValidateChildElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "ValidateChildElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::ProcessElement
// Il2CppName: ProcessElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)(::Il2CppObject*)>(&System::Xml::Schema::XsdValidator::ProcessElement)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "ProcessElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::ProcessXsiAttributes
// Il2CppName: ProcessXsiAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)(ByRef<::System::Xml::XmlQualifiedName*>, ByRef<::StringW>)>(&System::Xml::Schema::XsdValidator::ProcessXsiAttributes)> {
  static const MethodInfo* get() {
    static auto* xsiType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->this_arg;
    static auto* xsiNil = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "ProcessXsiAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xsiType, xsiNil});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::ValidateEndElement
// Il2CppName: ValidateEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::ValidateEndElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "ValidateEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::FastGetElementDecl
// Il2CppName: FastGetElementDecl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaElementDecl* (System::Xml::Schema::XsdValidator::*)(::Il2CppObject*)>(&System::Xml::Schema::XsdValidator::FastGetElementDecl)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "FastGetElementDecl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::ThoroughGetElementDecl
// Il2CppName: ThoroughGetElementDecl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaElementDecl* (System::Xml::Schema::XsdValidator::*)(::System::Xml::Schema::SchemaElementDecl*, ::System::Xml::XmlQualifiedName*, ::StringW)>(&System::Xml::Schema::XsdValidator::ThoroughGetElementDecl)> {
  static const MethodInfo* get() {
    static auto* elementDecl = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaElementDecl")->byval_arg;
    static auto* xsiType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    static auto* xsiNil = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "ThoroughGetElementDecl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementDecl, xsiType, xsiNil});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::ValidateStartElement
// Il2CppName: ValidateStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::ValidateStartElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "ValidateStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::ValidateEndStartElement
// Il2CppName: ValidateEndStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::ValidateEndStartElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "ValidateEndStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::LoadSchemaFromLocation
// Il2CppName: LoadSchemaFromLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)(::StringW, ::StringW)>(&System::Xml::Schema::XsdValidator::LoadSchemaFromLocation)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* url = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "LoadSchemaFromLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri, url});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::LoadSchema
// Il2CppName: LoadSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)(::StringW, ::StringW)>(&System::Xml::Schema::XsdValidator::LoadSchema)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* url = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "LoadSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri, url});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::ProcessTokenizedType
// Il2CppName: ProcessTokenizedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)(::System::Xml::XmlTokenizedType, ::StringW)>(&System::Xml::Schema::XsdValidator::ProcessTokenizedType)> {
  static const MethodInfo* get() {
    static auto* ttype = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTokenizedType")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "ProcessTokenizedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ttype, name});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::CheckValue
// Il2CppName: CheckValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)(::StringW, ::System::Xml::Schema::SchemaAttDef*)>(&System::Xml::Schema::XsdValidator::CheckValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attdef = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaAttDef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "CheckValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, attdef});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::AddID
// Il2CppName: AddID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)(::StringW, ::Il2CppObject*)>(&System::Xml::Schema::XsdValidator::AddID)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "AddID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, node});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::IsXSDRoot
// Il2CppName: IsXSDRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdValidator::*)(::StringW, ::StringW)>(&System::Xml::Schema::XsdValidator::IsXSDRoot)> {
  static const MethodInfo* get() {
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "IsXSDRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localName, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XsdValidator::Push)> {
  static const MethodInfo* get() {
    static auto* elementName = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementName});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::Pop
// Il2CppName: Pop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::Pop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "Pop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::CheckForwardRefs
// Il2CppName: CheckForwardRefs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::CheckForwardRefs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "CheckForwardRefs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::ValidateStartElementIdentityConstraints
// Il2CppName: ValidateStartElementIdentityConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::ValidateStartElementIdentityConstraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "ValidateStartElementIdentityConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::AddIdentityConstraints
// Il2CppName: AddIdentityConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::AddIdentityConstraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "AddIdentityConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::ElementIdentityConstraints
// Il2CppName: ElementIdentityConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::ElementIdentityConstraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "ElementIdentityConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::AttributeIdentityConstraints
// Il2CppName: AttributeIdentityConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)(::StringW, ::StringW, ::Il2CppObject*, ::StringW, ::System::Xml::Schema::SchemaAttDef*)>(&System::Xml::Schema::XsdValidator::AttributeIdentityConstraints)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* sobj = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attdef = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaAttDef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "AttributeIdentityConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns, obj, sobj, attdef});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::UnWrapUnion
// Il2CppName: UnWrapUnion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XsdValidator::*)(::Il2CppObject*)>(&System::Xml::Schema::XsdValidator::UnWrapUnion)> {
  static const MethodInfo* get() {
    static auto* typedValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "UnWrapUnion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typedValue});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::EndElementIdentityConstraints
// Il2CppName: EndElementIdentityConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::EndElementIdentityConstraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "EndElementIdentityConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::get_PreserveWhitespace
// Il2CppName: get_PreserveWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::get_PreserveWhitespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "get_PreserveWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::CompleteValidation
// Il2CppName: CompleteValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XsdValidator::*)()>(&System::Xml::Schema::XsdValidator::CompleteValidation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "CompleteValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdValidator::FindId
// Il2CppName: FindId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XsdValidator::*)(::StringW)>(&System::Xml::Schema::XsdValidator::FindId)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdValidator*), "FindId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
