// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.ActiveAxis
#include "System/Xml/Schema/ActiveAxis.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: KeySequence
  class KeySequence;
  // Forward declaring type: Asttree
  class Asttree;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: LocatedActiveAxis
  class LocatedActiveAxis;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::LocatedActiveAxis);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::LocatedActiveAxis*, "System.Xml.Schema", "LocatedActiveAxis");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.LocatedActiveAxis
  // [TokenAttribute] Offset: FFFFFFFF
  class LocatedActiveAxis : public ::System::Xml::Schema::ActiveAxis {
    public:
    public:
    // private System.Int32 column
    // Size: 0x4
    // Offset: 0x28
    int column;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean isMatched
    // Size: 0x1
    // Offset: 0x2C
    bool isMatched;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isMatched and: Ks
    char __padding1[0x3] = {};
    // System.Xml.Schema.KeySequence Ks
    // Size: 0x8
    // Offset: 0x30
    ::System::Xml::Schema::KeySequence* Ks;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::KeySequence*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 column
    [[deprecated("Use field access instead!")]] int& dyn_column();
    // Get instance field reference: System.Boolean isMatched
    [[deprecated("Use field access instead!")]] bool& dyn_isMatched();
    // Get instance field reference: System.Xml.Schema.KeySequence Ks
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::KeySequence*& dyn_Ks();
    // System.Int32 get_Column()
    // Offset: 0xAF4990
    int get_Column();
    // System.Void .ctor(System.Xml.Schema.Asttree astfield, System.Xml.Schema.KeySequence ks, System.Int32 column)
    // Offset: 0xAF4998
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocatedActiveAxis* New_ctor(::System::Xml::Schema::Asttree* astfield, ::System::Xml::Schema::KeySequence* ks, int column) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::LocatedActiveAxis::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocatedActiveAxis*, creationType>(astfield, ks, column)));
    }
    // System.Void Reactivate(System.Xml.Schema.KeySequence ks)
    // Offset: 0xAF49D8
    void Reactivate(::System::Xml::Schema::KeySequence* ks);
  }; // System.Xml.Schema.LocatedActiveAxis
  #pragma pack(pop)
  static check_size<sizeof(LocatedActiveAxis), 48 + sizeof(::System::Xml::Schema::KeySequence*)> __System_Xml_Schema_LocatedActiveAxisSizeCheck;
  static_assert(sizeof(LocatedActiveAxis) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::LocatedActiveAxis::get_Column
// Il2CppName: get_Column
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::LocatedActiveAxis::*)()>(&System::Xml::Schema::LocatedActiveAxis::get_Column)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::LocatedActiveAxis*), "get_Column", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::LocatedActiveAxis::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::LocatedActiveAxis::Reactivate
// Il2CppName: Reactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::LocatedActiveAxis::*)(::System::Xml::Schema::KeySequence*)>(&System::Xml::Schema::LocatedActiveAxis::Reactivate)> {
  static const MethodInfo* get() {
    static auto* ks = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "KeySequence")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::LocatedActiveAxis*), "Reactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ks});
  }
};
