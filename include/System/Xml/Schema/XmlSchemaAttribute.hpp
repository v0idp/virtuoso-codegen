// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlSchemaAnnotated
#include "System/Xml/Schema/XmlSchemaAnnotated.hpp"
// Including type: System.Xml.Schema.XmlSchemaForm
#include "System/Xml/Schema/XmlSchemaForm.hpp"
// Including type: System.Xml.Schema.XmlSchemaUse
#include "System/Xml/Schema/XmlSchemaUse.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaSimpleType
  class XmlSchemaSimpleType;
  // Forward declaring type: SchemaAttDef
  class SchemaAttDef;
  // Forward declaring type: XmlSchemaDatatype
  class XmlSchemaDatatype;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaAttribute
  class XmlSchemaAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchemaAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaAttribute*, "System.Xml.Schema", "XmlSchemaAttribute");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSchemaAttribute : public ::System::Xml::Schema::XmlSchemaAnnotated {
    public:
    public:
    // private System.String defaultValue
    // Size: 0x8
    // Offset: 0x50
    ::StringW defaultValue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String fixedValue
    // Size: 0x8
    // Offset: 0x58
    ::StringW fixedValue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String name
    // Size: 0x8
    // Offset: 0x60
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.Schema.XmlSchemaForm form
    // Size: 0x4
    // Offset: 0x68
    ::System::Xml::Schema::XmlSchemaForm form;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaForm) == 0x4);
    // private System.Xml.Schema.XmlSchemaUse use
    // Size: 0x4
    // Offset: 0x6C
    ::System::Xml::Schema::XmlSchemaUse use;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaUse) == 0x4);
    // private System.Xml.XmlQualifiedName refName
    // Size: 0x8
    // Offset: 0x70
    ::System::Xml::XmlQualifiedName* refName;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    // private System.Xml.XmlQualifiedName typeName
    // Size: 0x8
    // Offset: 0x78
    ::System::Xml::XmlQualifiedName* typeName;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    // private System.Xml.XmlQualifiedName qualifiedName
    // Size: 0x8
    // Offset: 0x80
    ::System::Xml::XmlQualifiedName* qualifiedName;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    // private System.Xml.Schema.XmlSchemaSimpleType type
    // Size: 0x8
    // Offset: 0x88
    ::System::Xml::Schema::XmlSchemaSimpleType* type;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaSimpleType*) == 0x8);
    // private System.Xml.Schema.XmlSchemaSimpleType attributeType
    // Size: 0x8
    // Offset: 0x90
    ::System::Xml::Schema::XmlSchemaSimpleType* attributeType;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaSimpleType*) == 0x8);
    // private System.Xml.Schema.SchemaAttDef attDef
    // Size: 0x8
    // Offset: 0x98
    ::System::Xml::Schema::SchemaAttDef* attDef;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::SchemaAttDef*) == 0x8);
    public:
    // Get instance field reference: private System.String defaultValue
    [[deprecated("Use field access instead!")]] ::StringW& dyn_defaultValue();
    // Get instance field reference: private System.String fixedValue
    [[deprecated("Use field access instead!")]] ::StringW& dyn_fixedValue();
    // Get instance field reference: private System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaForm form
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaForm& dyn_form();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaUse use
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaUse& dyn_use();
    // Get instance field reference: private System.Xml.XmlQualifiedName refName
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlQualifiedName*& dyn_refName();
    // Get instance field reference: private System.Xml.XmlQualifiedName typeName
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlQualifiedName*& dyn_typeName();
    // Get instance field reference: private System.Xml.XmlQualifiedName qualifiedName
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlQualifiedName*& dyn_qualifiedName();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaSimpleType type
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaSimpleType*& dyn_type();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaSimpleType attributeType
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaSimpleType*& dyn_attributeType();
    // Get instance field reference: private System.Xml.Schema.SchemaAttDef attDef
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::SchemaAttDef*& dyn_attDef();
    // public System.String get_DefaultValue()
    // Offset: 0x1109694
    ::StringW get_DefaultValue();
    // public System.Void set_DefaultValue(System.String value)
    // Offset: 0x110969C
    void set_DefaultValue(::StringW value);
    // public System.String get_FixedValue()
    // Offset: 0x11096A4
    ::StringW get_FixedValue();
    // public System.Void set_FixedValue(System.String value)
    // Offset: 0x11096AC
    void set_FixedValue(::StringW value);
    // public System.Xml.Schema.XmlSchemaForm get_Form()
    // Offset: 0x11096B4
    ::System::Xml::Schema::XmlSchemaForm get_Form();
    // public System.Void set_Form(System.Xml.Schema.XmlSchemaForm value)
    // Offset: 0x11096BC
    void set_Form(::System::Xml::Schema::XmlSchemaForm value);
    // public System.String get_Name()
    // Offset: 0x11096C4
    ::StringW get_Name();
    // public System.Void set_Name(System.String value)
    // Offset: 0x11096CC
    void set_Name(::StringW value);
    // public System.Xml.XmlQualifiedName get_RefName()
    // Offset: 0x11096D4
    ::System::Xml::XmlQualifiedName* get_RefName();
    // public System.Void set_RefName(System.Xml.XmlQualifiedName value)
    // Offset: 0x11096DC
    void set_RefName(::System::Xml::XmlQualifiedName* value);
    // public System.Xml.XmlQualifiedName get_SchemaTypeName()
    // Offset: 0x1109788
    ::System::Xml::XmlQualifiedName* get_SchemaTypeName();
    // public System.Void set_SchemaTypeName(System.Xml.XmlQualifiedName value)
    // Offset: 0x1109790
    void set_SchemaTypeName(::System::Xml::XmlQualifiedName* value);
    // public System.Xml.Schema.XmlSchemaSimpleType get_SchemaType()
    // Offset: 0x110983C
    ::System::Xml::Schema::XmlSchemaSimpleType* get_SchemaType();
    // public System.Void set_SchemaType(System.Xml.Schema.XmlSchemaSimpleType value)
    // Offset: 0x1109844
    void set_SchemaType(::System::Xml::Schema::XmlSchemaSimpleType* value);
    // public System.Xml.Schema.XmlSchemaUse get_Use()
    // Offset: 0x110984C
    ::System::Xml::Schema::XmlSchemaUse get_Use();
    // public System.Void set_Use(System.Xml.Schema.XmlSchemaUse value)
    // Offset: 0x1109854
    void set_Use(::System::Xml::Schema::XmlSchemaUse value);
    // public System.Xml.XmlQualifiedName get_QualifiedName()
    // Offset: 0x110985C
    ::System::Xml::XmlQualifiedName* get_QualifiedName();
    // public System.Xml.Schema.XmlSchemaSimpleType get_AttributeSchemaType()
    // Offset: 0x1109864
    ::System::Xml::Schema::XmlSchemaSimpleType* get_AttributeSchemaType();
    // System.Xml.Schema.XmlSchemaDatatype get_Datatype()
    // Offset: 0x110986C
    ::System::Xml::Schema::XmlSchemaDatatype* get_Datatype();
    // System.Xml.Schema.SchemaAttDef get_AttDef()
    // Offset: 0x1109894
    ::System::Xml::Schema::SchemaAttDef* get_AttDef();
    // System.Void set_AttDef(System.Xml.Schema.SchemaAttDef value)
    // Offset: 0x110989C
    void set_AttDef(::System::Xml::Schema::SchemaAttDef* value);
    // System.Void SetQualifiedName(System.Xml.XmlQualifiedName value)
    // Offset: 0x1109884
    void SetQualifiedName(::System::Xml::XmlQualifiedName* value);
    // System.Void SetAttributeType(System.Xml.Schema.XmlSchemaSimpleType value)
    // Offset: 0x110988C
    void SetAttributeType(::System::Xml::Schema::XmlSchemaSimpleType* value);
    // override System.String get_NameAttribute()
    // Offset: 0x11098A4
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.String XmlSchemaObject::get_NameAttribute()
    ::StringW get_NameAttribute();
    // override System.Void set_NameAttribute(System.String value)
    // Offset: 0x11098AC
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.Void XmlSchemaObject::set_NameAttribute(System.String value)
    void set_NameAttribute(::StringW value);
    // public System.Void .ctor()
    // Offset: 0x1109988
    // Implemented from: System.Xml.Schema.XmlSchemaAnnotated
    // Base method: System.Void XmlSchemaAnnotated::.ctor()
    // Base method: System.Void XmlSchemaObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaAttribute* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaAttribute*, creationType>()));
    }
    // override System.Xml.Schema.XmlSchemaObject Clone()
    // Offset: 0x11098B4
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.Xml.Schema.XmlSchemaObject XmlSchemaObject::Clone()
    ::System::Xml::Schema::XmlSchemaObject* Clone();
  }; // System.Xml.Schema.XmlSchemaAttribute
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaAttribute), 152 + sizeof(::System::Xml::Schema::SchemaAttDef*)> __System_Xml_Schema_XmlSchemaAttributeSizeCheck;
  static_assert(sizeof(XmlSchemaAttribute) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::get_DefaultValue
// Il2CppName: get_DefaultValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaAttribute::*)()>(&System::Xml::Schema::XmlSchemaAttribute::get_DefaultValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "get_DefaultValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::set_DefaultValue
// Il2CppName: set_DefaultValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaAttribute::*)(::StringW)>(&System::Xml::Schema::XmlSchemaAttribute::set_DefaultValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "set_DefaultValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::get_FixedValue
// Il2CppName: get_FixedValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaAttribute::*)()>(&System::Xml::Schema::XmlSchemaAttribute::get_FixedValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "get_FixedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::set_FixedValue
// Il2CppName: set_FixedValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaAttribute::*)(::StringW)>(&System::Xml::Schema::XmlSchemaAttribute::set_FixedValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "set_FixedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::get_Form
// Il2CppName: get_Form
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaForm (System::Xml::Schema::XmlSchemaAttribute::*)()>(&System::Xml::Schema::XmlSchemaAttribute::get_Form)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "get_Form", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::set_Form
// Il2CppName: set_Form
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaAttribute::*)(::System::Xml::Schema::XmlSchemaForm)>(&System::Xml::Schema::XmlSchemaAttribute::set_Form)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaForm")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "set_Form", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaAttribute::*)()>(&System::Xml::Schema::XmlSchemaAttribute::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaAttribute::*)(::StringW)>(&System::Xml::Schema::XmlSchemaAttribute::set_Name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::get_RefName
// Il2CppName: get_RefName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Schema::XmlSchemaAttribute::*)()>(&System::Xml::Schema::XmlSchemaAttribute::get_RefName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "get_RefName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::set_RefName
// Il2CppName: set_RefName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaAttribute::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XmlSchemaAttribute::set_RefName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "set_RefName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::get_SchemaTypeName
// Il2CppName: get_SchemaTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Schema::XmlSchemaAttribute::*)()>(&System::Xml::Schema::XmlSchemaAttribute::get_SchemaTypeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "get_SchemaTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::set_SchemaTypeName
// Il2CppName: set_SchemaTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaAttribute::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XmlSchemaAttribute::set_SchemaTypeName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "set_SchemaTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::get_SchemaType
// Il2CppName: get_SchemaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaSimpleType* (System::Xml::Schema::XmlSchemaAttribute::*)()>(&System::Xml::Schema::XmlSchemaAttribute::get_SchemaType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "get_SchemaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::set_SchemaType
// Il2CppName: set_SchemaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaAttribute::*)(::System::Xml::Schema::XmlSchemaSimpleType*)>(&System::Xml::Schema::XmlSchemaAttribute::set_SchemaType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "set_SchemaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::get_Use
// Il2CppName: get_Use
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaUse (System::Xml::Schema::XmlSchemaAttribute::*)()>(&System::Xml::Schema::XmlSchemaAttribute::get_Use)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "get_Use", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::set_Use
// Il2CppName: set_Use
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaAttribute::*)(::System::Xml::Schema::XmlSchemaUse)>(&System::Xml::Schema::XmlSchemaAttribute::set_Use)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaUse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "set_Use", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::get_QualifiedName
// Il2CppName: get_QualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Schema::XmlSchemaAttribute::*)()>(&System::Xml::Schema::XmlSchemaAttribute::get_QualifiedName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "get_QualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::get_AttributeSchemaType
// Il2CppName: get_AttributeSchemaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaSimpleType* (System::Xml::Schema::XmlSchemaAttribute::*)()>(&System::Xml::Schema::XmlSchemaAttribute::get_AttributeSchemaType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "get_AttributeSchemaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::get_Datatype
// Il2CppName: get_Datatype
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaDatatype* (System::Xml::Schema::XmlSchemaAttribute::*)()>(&System::Xml::Schema::XmlSchemaAttribute::get_Datatype)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "get_Datatype", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::get_AttDef
// Il2CppName: get_AttDef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaAttDef* (System::Xml::Schema::XmlSchemaAttribute::*)()>(&System::Xml::Schema::XmlSchemaAttribute::get_AttDef)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "get_AttDef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::set_AttDef
// Il2CppName: set_AttDef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaAttribute::*)(::System::Xml::Schema::SchemaAttDef*)>(&System::Xml::Schema::XmlSchemaAttribute::set_AttDef)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaAttDef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "set_AttDef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::SetQualifiedName
// Il2CppName: SetQualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaAttribute::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XmlSchemaAttribute::SetQualifiedName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "SetQualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::SetAttributeType
// Il2CppName: SetAttributeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaAttribute::*)(::System::Xml::Schema::XmlSchemaSimpleType*)>(&System::Xml::Schema::XmlSchemaAttribute::SetAttributeType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "SetAttributeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::get_NameAttribute
// Il2CppName: get_NameAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaAttribute::*)()>(&System::Xml::Schema::XmlSchemaAttribute::get_NameAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "get_NameAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::set_NameAttribute
// Il2CppName: set_NameAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaAttribute::*)(::StringW)>(&System::Xml::Schema::XmlSchemaAttribute::set_NameAttribute)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "set_NameAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAttribute::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObject* (System::Xml::Schema::XmlSchemaAttribute::*)()>(&System::Xml::Schema::XmlSchemaAttribute::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAttribute*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
