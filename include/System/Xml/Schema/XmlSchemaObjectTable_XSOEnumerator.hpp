// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlSchemaObjectTable
#include "System/Xml/Schema/XmlSchemaObjectTable.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.EnumeratorType
#include "System/Xml/Schema/XmlSchemaObjectTable_EnumeratorType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaObject
  class XmlSchemaObject;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchemaObjectTable::XSOEnumerator);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaObjectTable::XSOEnumerator*, "System.Xml.Schema", "XmlSchemaObjectTable/XSOEnumerator");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.XSOEnumerator
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSchemaObjectTable::XSOEnumerator : public ::Il2CppObject/*, public ::System::Collections::IEnumerator*/ {
    public:
    public:
    // private System.Collections.Generic.List`1<System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.XmlSchemaObjectEntry> entries
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::System::Xml::Schema::XmlSchemaObjectTable::XmlSchemaObjectEntry>* entries;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Xml::Schema::XmlSchemaObjectTable::XmlSchemaObjectEntry>*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.EnumeratorType enumType
    // Size: 0x4
    // Offset: 0x18
    ::System::Xml::Schema::XmlSchemaObjectTable::EnumeratorType enumType;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable::EnumeratorType) == 0x4);
    // protected System.Int32 currentIndex
    // Size: 0x4
    // Offset: 0x1C
    int currentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 size
    // Size: 0x4
    // Offset: 0x20
    int size;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: size and: currentKey
    char __padding3[0x4] = {};
    // protected System.Xml.XmlQualifiedName currentKey
    // Size: 0x8
    // Offset: 0x28
    ::System::Xml::XmlQualifiedName* currentKey;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    // protected System.Xml.Schema.XmlSchemaObject currentValue
    // Size: 0x8
    // Offset: 0x30
    ::System::Xml::Schema::XmlSchemaObject* currentValue;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObject*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::IEnumerator
    operator ::System::Collections::IEnumerator() noexcept {
      return *reinterpret_cast<::System::Collections::IEnumerator*>(this);
    }
    // Get instance field reference: private System.Collections.Generic.List`1<System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.XmlSchemaObjectEntry> entries
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Xml::Schema::XmlSchemaObjectTable::XmlSchemaObjectEntry>*& dyn_entries();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.EnumeratorType enumType
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaObjectTable::EnumeratorType& dyn_enumType();
    // Get instance field reference: protected System.Int32 currentIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentIndex();
    // Get instance field reference: protected System.Int32 size
    [[deprecated("Use field access instead!")]] int& dyn_size();
    // Get instance field reference: protected System.Xml.XmlQualifiedName currentKey
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlQualifiedName*& dyn_currentKey();
    // Get instance field reference: protected System.Xml.Schema.XmlSchemaObject currentValue
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaObject*& dyn_currentValue();
    // public System.Object get_Current()
    // Offset: 0xC21D44
    ::Il2CppObject* get_Current();
    // System.Void .ctor(System.Collections.Generic.List`1<System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.XmlSchemaObjectEntry> entries, System.Int32 size, System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.EnumeratorType enumType)
    // Offset: 0xC218FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaObjectTable::XSOEnumerator* New_ctor(::System::Collections::Generic::List_1<::System::Xml::Schema::XmlSchemaObjectTable::XmlSchemaObjectEntry>* entries, int size, ::System::Xml::Schema::XmlSchemaObjectTable::EnumeratorType enumType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaObjectTable::XSOEnumerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaObjectTable::XSOEnumerator*, creationType>(entries, size, enumType)));
    }
    // public System.Boolean MoveNext()
    // Offset: 0xC21F00
    bool MoveNext();
    // public System.Void Reset()
    // Offset: 0xC21FDC
    void Reset();
  }; // System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.XSOEnumerator
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaObjectTable::XSOEnumerator), 48 + sizeof(::System::Xml::Schema::XmlSchemaObject*)> __System_Xml_Schema_XmlSchemaObjectTable_XSOEnumeratorSizeCheck;
  static_assert(sizeof(XmlSchemaObjectTable::XSOEnumerator) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaObjectTable::XSOEnumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlSchemaObjectTable::XSOEnumerator::*)()>(&System::Xml::Schema::XmlSchemaObjectTable::XSOEnumerator::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaObjectTable::XSOEnumerator*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaObjectTable::XSOEnumerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaObjectTable::XSOEnumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaObjectTable::XSOEnumerator::*)()>(&System::Xml::Schema::XmlSchemaObjectTable::XSOEnumerator::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaObjectTable::XSOEnumerator*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaObjectTable::XSOEnumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaObjectTable::XSOEnumerator::*)()>(&System::Xml::Schema::XmlSchemaObjectTable::XSOEnumerator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaObjectTable::XSOEnumerator*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
