// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.BaseProcessor
#include "System/Xml/Schema/BaseProcessor.hpp"
// Including type: System.Xml.Schema.XmlSchemaForm
#include "System/Xml/Schema/XmlSchemaForm.hpp"
// Including type: System.Xml.Schema.XmlSchemaDerivationMethod
#include "System/Xml/Schema/XmlSchemaDerivationMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchema
  class XmlSchema;
  // Forward declaring type: XmlSchemaCollection
  class XmlSchemaCollection;
  // Forward declaring type: XmlSchemaRedefine
  class XmlSchemaRedefine;
  // Forward declaring type: XmlSchemaObjectCollection
  class XmlSchemaObjectCollection;
  // Forward declaring type: XmlSchemaGroup
  class XmlSchemaGroup;
  // Forward declaring type: XmlSchemaAttributeGroup
  class XmlSchemaAttributeGroup;
  // Forward declaring type: XmlSchemaSimpleType
  class XmlSchemaSimpleType;
  // Forward declaring type: XmlSchemaComplexType
  class XmlSchemaComplexType;
  // Forward declaring type: XmlSchemaAttribute
  class XmlSchemaAttribute;
  // Forward declaring type: XmlSchemaElement
  class XmlSchemaElement;
  // Forward declaring type: XmlSchemaIdentityConstraint
  class XmlSchemaIdentityConstraint;
  // Forward declaring type: XmlSchemaNotation
  class XmlSchemaNotation;
  // Forward declaring type: XmlSchemaParticle
  class XmlSchemaParticle;
  // Forward declaring type: XmlSchemaAnyAttribute
  class XmlSchemaAnyAttribute;
  // Forward declaring type: XmlSchemaObject
  class XmlSchemaObject;
  // Forward declaring type: SchemaNames
  class SchemaNames;
  // Forward declaring type: ValidationEventHandler
  class ValidationEventHandler;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlResolver
  class XmlResolver;
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: SchemaCollectionPreprocessor
  class SchemaCollectionPreprocessor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::SchemaCollectionPreprocessor);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::SchemaCollectionPreprocessor*, "System.Xml.Schema", "SchemaCollectionPreprocessor");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.SchemaCollectionPreprocessor
  // [TokenAttribute] Offset: FFFFFFFF
  class SchemaCollectionPreprocessor : public ::System::Xml::Schema::BaseProcessor {
    public:
    // Nested type: ::System::Xml::Schema::SchemaCollectionPreprocessor::Compositor
    struct Compositor;
    public:
    // private System.Xml.Schema.XmlSchema schema
    // Size: 0x8
    // Offset: 0x40
    ::System::Xml::Schema::XmlSchema* schema;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchema*) == 0x8);
    // private System.String targetNamespace
    // Size: 0x8
    // Offset: 0x48
    ::StringW targetNamespace;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean buildinIncluded
    // Size: 0x1
    // Offset: 0x50
    bool buildinIncluded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: buildinIncluded and: elementFormDefault
    char __padding2[0x3] = {};
    // private System.Xml.Schema.XmlSchemaForm elementFormDefault
    // Size: 0x4
    // Offset: 0x54
    ::System::Xml::Schema::XmlSchemaForm elementFormDefault;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaForm) == 0x4);
    // private System.Xml.Schema.XmlSchemaForm attributeFormDefault
    // Size: 0x4
    // Offset: 0x58
    ::System::Xml::Schema::XmlSchemaForm attributeFormDefault;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaForm) == 0x4);
    // private System.Xml.Schema.XmlSchemaDerivationMethod blockDefault
    // Size: 0x4
    // Offset: 0x5C
    ::System::Xml::Schema::XmlSchemaDerivationMethod blockDefault;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaDerivationMethod) == 0x4);
    // private System.Xml.Schema.XmlSchemaDerivationMethod finalDefault
    // Size: 0x4
    // Offset: 0x60
    ::System::Xml::Schema::XmlSchemaDerivationMethod finalDefault;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaDerivationMethod) == 0x4);
    // Padding between fields: finalDefault and: schemaLocations
    char __padding6[0x4] = {};
    // private System.Collections.Hashtable schemaLocations
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Hashtable* schemaLocations;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable referenceNamespaces
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Hashtable* referenceNamespaces;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.String Xmlns
    // Size: 0x8
    // Offset: 0x78
    ::StringW Xmlns;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.XmlResolver xmlResolver
    // Size: 0x8
    // Offset: 0x80
    ::System::Xml::XmlResolver* xmlResolver;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlResolver*) == 0x8);
    public:
    // Get instance field reference: private System.Xml.Schema.XmlSchema schema
    [[deprecated]] ::System::Xml::Schema::XmlSchema*& dyn_schema();
    // Get instance field reference: private System.String targetNamespace
    [[deprecated]] ::StringW& dyn_targetNamespace();
    // Get instance field reference: private System.Boolean buildinIncluded
    [[deprecated]] bool& dyn_buildinIncluded();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaForm elementFormDefault
    [[deprecated]] ::System::Xml::Schema::XmlSchemaForm& dyn_elementFormDefault();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaForm attributeFormDefault
    [[deprecated]] ::System::Xml::Schema::XmlSchemaForm& dyn_attributeFormDefault();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaDerivationMethod blockDefault
    [[deprecated]] ::System::Xml::Schema::XmlSchemaDerivationMethod& dyn_blockDefault();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaDerivationMethod finalDefault
    [[deprecated]] ::System::Xml::Schema::XmlSchemaDerivationMethod& dyn_finalDefault();
    // Get instance field reference: private System.Collections.Hashtable schemaLocations
    [[deprecated]] ::System::Collections::Hashtable*& dyn_schemaLocations();
    // Get instance field reference: private System.Collections.Hashtable referenceNamespaces
    [[deprecated]] ::System::Collections::Hashtable*& dyn_referenceNamespaces();
    // Get instance field reference: private System.String Xmlns
    [[deprecated]] ::StringW& dyn_Xmlns();
    // Get instance field reference: private System.Xml.XmlResolver xmlResolver
    [[deprecated]] ::System::Xml::XmlResolver*& dyn_xmlResolver();
    // System.Void set_XmlResolver(System.Xml.XmlResolver value)
    // Offset: 0xDFD1CC
    void set_XmlResolver(::System::Xml::XmlResolver* value);
    // public System.Boolean Execute(System.Xml.Schema.XmlSchema schema, System.String targetNamespace, System.Boolean loadExternals, System.Xml.Schema.XmlSchemaCollection xsc)
    // Offset: 0xDF9CF0
    bool Execute(::System::Xml::Schema::XmlSchema* schema, ::StringW targetNamespace, bool loadExternals, ::System::Xml::Schema::XmlSchemaCollection* xsc);
    // private System.Void Cleanup(System.Xml.Schema.XmlSchema schema)
    // Offset: 0xDF9F1C
    void Cleanup(::System::Xml::Schema::XmlSchema* schema);
    // private System.Void LoadExternals(System.Xml.Schema.XmlSchema schema, System.Xml.Schema.XmlSchemaCollection xsc)
    // Offset: 0xDFA13C
    void LoadExternals(::System::Xml::Schema::XmlSchema* schema, ::System::Xml::Schema::XmlSchemaCollection* xsc);
    // private System.Void BuildRefNamespaces(System.Xml.Schema.XmlSchema schema)
    // Offset: 0xDFD3AC
    void BuildRefNamespaces(::System::Xml::Schema::XmlSchema* schema);
    // private System.Void Preprocess(System.Xml.Schema.XmlSchema schema, System.String targetNamespace, System.Xml.Schema.SchemaCollectionPreprocessor/System.Xml.Schema.Compositor compositor)
    // Offset: 0xDFAE5C
    void Preprocess(::System::Xml::Schema::XmlSchema* schema, ::StringW targetNamespace, ::System::Xml::Schema::SchemaCollectionPreprocessor::Compositor compositor);
    // private System.Void PreprocessRedefine(System.Xml.Schema.XmlSchemaRedefine redefine)
    // Offset: 0xDFD6C4
    void PreprocessRedefine(::System::Xml::Schema::XmlSchemaRedefine* redefine);
    // private System.Int32 CountGroupSelfReference(System.Xml.Schema.XmlSchemaObjectCollection items, System.Xml.XmlQualifiedName name)
    // Offset: 0xE00524
    int CountGroupSelfReference(::System::Xml::Schema::XmlSchemaObjectCollection* items, ::System::Xml::XmlQualifiedName* name);
    // private System.Void CheckRefinedGroup(System.Xml.Schema.XmlSchemaGroup group)
    // Offset: 0xDFFEC4
    void CheckRefinedGroup(::System::Xml::Schema::XmlSchemaGroup* group);
    // private System.Void CheckRefinedAttributeGroup(System.Xml.Schema.XmlSchemaAttributeGroup attributeGroup)
    // Offset: 0xDFFF6C
    void CheckRefinedAttributeGroup(::System::Xml::Schema::XmlSchemaAttributeGroup* attributeGroup);
    // private System.Void CheckRefinedSimpleType(System.Xml.Schema.XmlSchemaSimpleType stype)
    // Offset: 0xE0040C
    void CheckRefinedSimpleType(::System::Xml::Schema::XmlSchemaSimpleType* stype);
    // private System.Void CheckRefinedComplexType(System.Xml.Schema.XmlSchemaComplexType ctype)
    // Offset: 0xE000E0
    void CheckRefinedComplexType(::System::Xml::Schema::XmlSchemaComplexType* ctype);
    // private System.Void PreprocessAttribute(System.Xml.Schema.XmlSchemaAttribute attribute)
    // Offset: 0xDFE700
    void PreprocessAttribute(::System::Xml::Schema::XmlSchemaAttribute* attribute);
    // private System.Void PreprocessLocalAttribute(System.Xml.Schema.XmlSchemaAttribute attribute)
    // Offset: 0xE00D54
    void PreprocessLocalAttribute(::System::Xml::Schema::XmlSchemaAttribute* attribute);
    // private System.Void PreprocessAttributeContent(System.Xml.Schema.XmlSchemaAttribute attribute)
    // Offset: 0xE00B00
    void PreprocessAttributeContent(::System::Xml::Schema::XmlSchemaAttribute* attribute);
    // private System.Void PreprocessAttributeGroup(System.Xml.Schema.XmlSchemaAttributeGroup attributeGroup)
    // Offset: 0xDFE878
    void PreprocessAttributeGroup(::System::Xml::Schema::XmlSchemaAttributeGroup* attributeGroup);
    // private System.Void PreprocessElement(System.Xml.Schema.XmlSchemaElement element)
    // Offset: 0xDFF7CC
    void PreprocessElement(::System::Xml::Schema::XmlSchemaElement* element);
    // private System.Void PreprocessLocalElement(System.Xml.Schema.XmlSchemaElement element)
    // Offset: 0xE0170C
    void PreprocessLocalElement(::System::Xml::Schema::XmlSchemaElement* element);
    // private System.Void PreprocessElementContent(System.Xml.Schema.XmlSchemaElement element)
    // Offset: 0xE013B4
    void PreprocessElementContent(::System::Xml::Schema::XmlSchemaElement* element);
    // private System.Void PreprocessIdentityConstraint(System.Xml.Schema.XmlSchemaIdentityConstraint constraint)
    // Offset: 0xE01A9C
    void PreprocessIdentityConstraint(::System::Xml::Schema::XmlSchemaIdentityConstraint* constraint);
    // private System.Void PreprocessSimpleType(System.Xml.Schema.XmlSchemaSimpleType simpleType, System.Boolean local)
    // Offset: 0xDFF21C
    void PreprocessSimpleType(::System::Xml::Schema::XmlSchemaSimpleType* simpleType, bool local);
    // private System.Void PreprocessComplexType(System.Xml.Schema.XmlSchemaComplexType complexType, System.Boolean local)
    // Offset: 0xDFE978
    void PreprocessComplexType(::System::Xml::Schema::XmlSchemaComplexType* complexType, bool local);
    // private System.Void PreprocessGroup(System.Xml.Schema.XmlSchemaGroup group)
    // Offset: 0xDFFA30
    void PreprocessGroup(::System::Xml::Schema::XmlSchemaGroup* group);
    // private System.Void PreprocessNotation(System.Xml.Schema.XmlSchemaNotation notation)
    // Offset: 0xDFFC00
    void PreprocessNotation(::System::Xml::Schema::XmlSchemaNotation* notation);
    // private System.Void PreprocessParticle(System.Xml.Schema.XmlSchemaParticle particle)
    // Offset: 0xE01DE0
    void PreprocessParticle(::System::Xml::Schema::XmlSchemaParticle* particle);
    // private System.Void PreprocessAttributes(System.Xml.Schema.XmlSchemaObjectCollection attributes, System.Xml.Schema.XmlSchemaAnyAttribute anyAttribute, System.Xml.Schema.XmlSchemaObject parent)
    // Offset: 0xE010A0
    void PreprocessAttributes(::System::Xml::Schema::XmlSchemaObjectCollection* attributes, ::System::Xml::Schema::XmlSchemaAnyAttribute* anyAttribute, ::System::Xml::Schema::XmlSchemaObject* parent);
    // private System.Void ValidateIdAttribute(System.Xml.Schema.XmlSchemaObject xso)
    // Offset: 0xDFABF4
    void ValidateIdAttribute(::System::Xml::Schema::XmlSchemaObject* xso);
    // private System.Void ValidateNameAttribute(System.Xml.Schema.XmlSchemaObject xso)
    // Offset: 0xE0084C
    void ValidateNameAttribute(::System::Xml::Schema::XmlSchemaObject* xso);
    // private System.Void ValidateQNameAttribute(System.Xml.Schema.XmlSchemaObject xso, System.String attributeName, System.Xml.XmlQualifiedName value)
    // Offset: 0xE00F08
    void ValidateQNameAttribute(::System::Xml::Schema::XmlSchemaObject* xso, ::StringW attributeName, ::System::Xml::XmlQualifiedName* value);
    // private System.Void SetParent(System.Xml.Schema.XmlSchemaObject child, System.Xml.Schema.XmlSchemaObject parent)
    // Offset: 0xDFD5C0
    void SetParent(::System::Xml::Schema::XmlSchemaObject* child, ::System::Xml::Schema::XmlSchemaObject* parent);
    // private System.Void PreprocessAnnotation(System.Xml.Schema.XmlSchemaObject schemaObject)
    // Offset: 0xDFD5D8
    void PreprocessAnnotation(::System::Xml::Schema::XmlSchemaObject* schemaObject);
    // private System.Uri ResolveSchemaLocationUri(System.Xml.Schema.XmlSchema enclosingSchema, System.String location)
    // Offset: 0xDFD1D4
    ::System::Uri* ResolveSchemaLocationUri(::System::Xml::Schema::XmlSchema* enclosingSchema, ::StringW location);
    // private System.IO.Stream GetSchemaEntity(System.Uri ruri)
    // Offset: 0xDFD28C
    ::System::IO::Stream* GetSchemaEntity(::System::Uri* ruri);
    // public System.Void .ctor(System.Xml.XmlNameTable nameTable, System.Xml.Schema.SchemaNames schemaNames, System.Xml.Schema.ValidationEventHandler eventHandler)
    // Offset: 0xDF9CE8
    // Implemented from: System.Xml.Schema.BaseProcessor
    // Base method: System.Void BaseProcessor::.ctor(System.Xml.XmlNameTable nameTable, System.Xml.Schema.SchemaNames schemaNames, System.Xml.Schema.ValidationEventHandler eventHandler)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SchemaCollectionPreprocessor* New_ctor(::System::Xml::XmlNameTable* nameTable, ::System::Xml::Schema::SchemaNames* schemaNames, ::System::Xml::Schema::ValidationEventHandler* eventHandler) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::SchemaCollectionPreprocessor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SchemaCollectionPreprocessor*, creationType>(nameTable, schemaNames, eventHandler)));
    }
  }; // System.Xml.Schema.SchemaCollectionPreprocessor
  #pragma pack(pop)
  static check_size<sizeof(SchemaCollectionPreprocessor), 128 + sizeof(::System::Xml::XmlResolver*)> __System_Xml_Schema_SchemaCollectionPreprocessorSizeCheck;
  static_assert(sizeof(SchemaCollectionPreprocessor) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::set_XmlResolver
// Il2CppName: set_XmlResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::XmlResolver*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::set_XmlResolver)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "set_XmlResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchema*, ::StringW, bool, ::System::Xml::Schema::XmlSchemaCollection*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::Execute)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* targetNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* loadExternals = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* xsc = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema, targetNamespace, loadExternals, xsc});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::Cleanup)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::LoadExternals
// Il2CppName: LoadExternals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchema*, ::System::Xml::Schema::XmlSchemaCollection*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::LoadExternals)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* xsc = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "LoadExternals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema, xsc});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::BuildRefNamespaces
// Il2CppName: BuildRefNamespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::BuildRefNamespaces)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "BuildRefNamespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::Preprocess
// Il2CppName: Preprocess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchema*, ::StringW, ::System::Xml::Schema::SchemaCollectionPreprocessor::Compositor)>(&System::Xml::Schema::SchemaCollectionPreprocessor::Preprocess)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* targetNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* compositor = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaCollectionPreprocessor/Compositor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "Preprocess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema, targetNamespace, compositor});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessRedefine
// Il2CppName: PreprocessRedefine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaRedefine*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessRedefine)> {
  static const MethodInfo* get() {
    static auto* redefine = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaRedefine")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "PreprocessRedefine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{redefine});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::CountGroupSelfReference
// Il2CppName: CountGroupSelfReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaObjectCollection*, ::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::CountGroupSelfReference)> {
  static const MethodInfo* get() {
    static auto* items = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "CountGroupSelfReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{items, name});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::CheckRefinedGroup
// Il2CppName: CheckRefinedGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaGroup*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::CheckRefinedGroup)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "CheckRefinedGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::CheckRefinedAttributeGroup
// Il2CppName: CheckRefinedAttributeGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaAttributeGroup*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::CheckRefinedAttributeGroup)> {
  static const MethodInfo* get() {
    static auto* attributeGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttributeGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "CheckRefinedAttributeGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeGroup});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::CheckRefinedSimpleType
// Il2CppName: CheckRefinedSimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaSimpleType*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::CheckRefinedSimpleType)> {
  static const MethodInfo* get() {
    static auto* stype = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "CheckRefinedSimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stype});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::CheckRefinedComplexType
// Il2CppName: CheckRefinedComplexType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaComplexType*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::CheckRefinedComplexType)> {
  static const MethodInfo* get() {
    static auto* ctype = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "CheckRefinedComplexType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctype});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessAttribute
// Il2CppName: PreprocessAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaAttribute*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessAttribute)> {
  static const MethodInfo* get() {
    static auto* attribute = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "PreprocessAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attribute});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessLocalAttribute
// Il2CppName: PreprocessLocalAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaAttribute*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessLocalAttribute)> {
  static const MethodInfo* get() {
    static auto* attribute = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "PreprocessLocalAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attribute});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessAttributeContent
// Il2CppName: PreprocessAttributeContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaAttribute*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessAttributeContent)> {
  static const MethodInfo* get() {
    static auto* attribute = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "PreprocessAttributeContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attribute});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessAttributeGroup
// Il2CppName: PreprocessAttributeGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaAttributeGroup*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessAttributeGroup)> {
  static const MethodInfo* get() {
    static auto* attributeGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttributeGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "PreprocessAttributeGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeGroup});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessElement
// Il2CppName: PreprocessElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaElement*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessElement)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "PreprocessElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessLocalElement
// Il2CppName: PreprocessLocalElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaElement*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessLocalElement)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "PreprocessLocalElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessElementContent
// Il2CppName: PreprocessElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaElement*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessElementContent)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "PreprocessElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessIdentityConstraint
// Il2CppName: PreprocessIdentityConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaIdentityConstraint*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessIdentityConstraint)> {
  static const MethodInfo* get() {
    static auto* constraint = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaIdentityConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "PreprocessIdentityConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{constraint});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessSimpleType
// Il2CppName: PreprocessSimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaSimpleType*, bool)>(&System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessSimpleType)> {
  static const MethodInfo* get() {
    static auto* simpleType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    static auto* local = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "PreprocessSimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{simpleType, local});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessComplexType
// Il2CppName: PreprocessComplexType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaComplexType*, bool)>(&System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessComplexType)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* local = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "PreprocessComplexType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType, local});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessGroup
// Il2CppName: PreprocessGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaGroup*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessGroup)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "PreprocessGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessNotation
// Il2CppName: PreprocessNotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaNotation*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessNotation)> {
  static const MethodInfo* get() {
    static auto* notation = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaNotation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "PreprocessNotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{notation});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessParticle
// Il2CppName: PreprocessParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessParticle)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "PreprocessParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessAttributes
// Il2CppName: PreprocessAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaObjectCollection*, ::System::Xml::Schema::XmlSchemaAnyAttribute*, ::System::Xml::Schema::XmlSchemaObject*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessAttributes)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    static auto* anyAttribute = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnyAttribute")->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "PreprocessAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes, anyAttribute, parent});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::ValidateIdAttribute
// Il2CppName: ValidateIdAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaObject*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::ValidateIdAttribute)> {
  static const MethodInfo* get() {
    static auto* xso = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "ValidateIdAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xso});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::ValidateNameAttribute
// Il2CppName: ValidateNameAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaObject*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::ValidateNameAttribute)> {
  static const MethodInfo* get() {
    static auto* xso = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "ValidateNameAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xso});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::ValidateQNameAttribute
// Il2CppName: ValidateQNameAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaObject*, ::StringW, ::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::ValidateQNameAttribute)> {
  static const MethodInfo* get() {
    static auto* xso = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    static auto* attributeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "ValidateQNameAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xso, attributeName, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::SetParent
// Il2CppName: SetParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaObject*, ::System::Xml::Schema::XmlSchemaObject*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::SetParent)> {
  static const MethodInfo* get() {
    static auto* child = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "SetParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{child, parent});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessAnnotation
// Il2CppName: PreprocessAnnotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchemaObject*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::PreprocessAnnotation)> {
  static const MethodInfo* get() {
    static auto* schemaObject = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "PreprocessAnnotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaObject});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::ResolveSchemaLocationUri
// Il2CppName: ResolveSchemaLocationUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Xml::Schema::XmlSchema*, ::StringW)>(&System::Xml::Schema::SchemaCollectionPreprocessor::ResolveSchemaLocationUri)> {
  static const MethodInfo* get() {
    static auto* enclosingSchema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* location = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "ResolveSchemaLocationUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enclosingSchema, location});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::GetSchemaEntity
// Il2CppName: GetSchemaEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Xml::Schema::SchemaCollectionPreprocessor::*)(::System::Uri*)>(&System::Xml::Schema::SchemaCollectionPreprocessor::GetSchemaEntity)> {
  static const MethodInfo* get() {
    static auto* ruri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaCollectionPreprocessor*), "GetSchemaEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ruri});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaCollectionPreprocessor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
