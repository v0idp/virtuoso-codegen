// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: TypedObject
  class TypedObject;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: KeySequence
  class KeySequence;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::KeySequence);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::KeySequence*, "System.Xml.Schema", "KeySequence");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.KeySequence
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 6A4728
  class KeySequence : public ::Il2CppObject {
    public:
    public:
    // private System.Xml.Schema.TypedObject[] ks
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::System::Xml::Schema::TypedObject*> ks;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::Schema::TypedObject*>) == 0x8);
    // private System.Int32 dim
    // Size: 0x4
    // Offset: 0x18
    int dim;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 hashcode
    // Size: 0x4
    // Offset: 0x1C
    int hashcode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 posline
    // Size: 0x4
    // Offset: 0x20
    int posline;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 poscol
    // Size: 0x4
    // Offset: 0x24
    int poscol;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Xml.Schema.TypedObject[] ks
    [[deprecated]] ::ArrayW<::System::Xml::Schema::TypedObject*>& dyn_ks();
    // Get instance field reference: private System.Int32 dim
    [[deprecated]] int& dyn_dim();
    // Get instance field reference: private System.Int32 hashcode
    [[deprecated]] int& dyn_hashcode();
    // Get instance field reference: private System.Int32 posline
    [[deprecated]] int& dyn_posline();
    // Get instance field reference: private System.Int32 poscol
    [[deprecated]] int& dyn_poscol();
    // public System.Int32 get_PosLine()
    // Offset: 0xAF2B80
    int get_PosLine();
    // public System.Int32 get_PosCol()
    // Offset: 0xAF2B88
    int get_PosCol();
    // public System.Object get_Item(System.Int32 index)
    // Offset: 0xAF2B90
    ::Il2CppObject* get_Item(int index);
    // public System.Void set_Item(System.Int32 index, System.Object value)
    // Offset: 0xAF2BCC
    void set_Item(int index, ::Il2CppObject* value);
    // System.Void .ctor(System.Int32 dim, System.Int32 line, System.Int32 col)
    // Offset: 0xAF2AF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static KeySequence* New_ctor(int dim, int line, int col) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::KeySequence::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<KeySequence*, creationType>(dim, line, col)));
    }
    // System.Boolean IsQualified()
    // Offset: 0xAF2CD0
    bool IsQualified();
    // public override System.Int32 GetHashCode()
    // Offset: 0xAF2D3C
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object other)
    // Offset: 0xAF30BC
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object other)
    bool Equals(::Il2CppObject* other);
    // public override System.String ToString()
    // Offset: 0xAF31C0
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // System.Xml.Schema.KeySequence
  #pragma pack(pop)
  static check_size<sizeof(KeySequence), 36 + sizeof(int)> __System_Xml_Schema_KeySequenceSizeCheck;
  static_assert(sizeof(KeySequence) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::KeySequence::get_PosLine
// Il2CppName: get_PosLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::KeySequence::*)()>(&System::Xml::Schema::KeySequence::get_PosLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::KeySequence*), "get_PosLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::KeySequence::get_PosCol
// Il2CppName: get_PosCol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::KeySequence::*)()>(&System::Xml::Schema::KeySequence::get_PosCol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::KeySequence*), "get_PosCol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::KeySequence::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::KeySequence::*)(int)>(&System::Xml::Schema::KeySequence::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::KeySequence*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::KeySequence::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::KeySequence::*)(int, ::Il2CppObject*)>(&System::Xml::Schema::KeySequence::set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::KeySequence*), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::KeySequence::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::KeySequence::IsQualified
// Il2CppName: IsQualified
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::KeySequence::*)()>(&System::Xml::Schema::KeySequence::IsQualified)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::KeySequence*), "IsQualified", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::KeySequence::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::KeySequence::*)()>(&System::Xml::Schema::KeySequence::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::KeySequence*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::KeySequence::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::KeySequence::*)(::Il2CppObject*)>(&System::Xml::Schema::KeySequence::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::KeySequence*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::KeySequence::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::KeySequence::*)()>(&System::Xml::Schema::KeySequence::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::KeySequence*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
