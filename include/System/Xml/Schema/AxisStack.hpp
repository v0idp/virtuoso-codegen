// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: ForwardAxis
  class ForwardAxis;
  // Forward declaring type: ActiveAxis
  class ActiveAxis;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: AxisStack
  class AxisStack;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::AxisStack);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::AxisStack*, "System.Xml.Schema", "AxisStack");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.AxisStack
  // [TokenAttribute] Offset: FFFFFFFF
  class AxisStack : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.ArrayList stack
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::ArrayList* stack;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Xml.Schema.ForwardAxis subtree
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::Schema::ForwardAxis* subtree;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::ForwardAxis*) == 0x8);
    // private System.Xml.Schema.ActiveAxis parent
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::Schema::ActiveAxis* parent;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::ActiveAxis*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.ArrayList stack
    [[deprecated]] ::System::Collections::ArrayList*& dyn_stack();
    // Get instance field reference: private System.Xml.Schema.ForwardAxis subtree
    [[deprecated]] ::System::Xml::Schema::ForwardAxis*& dyn_subtree();
    // Get instance field reference: private System.Xml.Schema.ActiveAxis parent
    [[deprecated]] ::System::Xml::Schema::ActiveAxis*& dyn_parent();
    // System.Xml.Schema.ForwardAxis get_Subtree()
    // Offset: 0xB5C818
    ::System::Xml::Schema::ForwardAxis* get_Subtree();
    // System.Int32 get_Length()
    // Offset: 0xB5C820
    int get_Length();
    // public System.Void .ctor(System.Xml.Schema.ForwardAxis faxis, System.Xml.Schema.ActiveAxis parent)
    // Offset: 0xB59A90
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AxisStack* New_ctor(::System::Xml::Schema::ForwardAxis* faxis, ::System::Xml::Schema::ActiveAxis* parent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::AxisStack::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AxisStack*, creationType>(faxis, parent)));
    }
    // System.Void Push(System.Int32 depth)
    // Offset: 0xB5C844
    void Push(int depth);
    // System.Void Pop()
    // Offset: 0xB5C8DC
    void Pop();
    // static System.Boolean Equal(System.String thisname, System.String thisURN, System.String name, System.String URN)
    // Offset: 0xB5C798
    static bool Equal(::StringW thisname, ::StringW thisURN, ::StringW name, ::StringW URN);
    // System.Void MoveToParent(System.String name, System.String URN, System.Int32 depth)
    // Offset: 0xB59EE4
    void MoveToParent(::StringW name, ::StringW URN, int depth);
    // System.Boolean MoveToChild(System.String name, System.String URN, System.Int32 depth)
    // Offset: 0xB59C7C
    bool MoveToChild(::StringW name, ::StringW URN, int depth);
    // System.Boolean MoveToAttribute(System.String name, System.String URN, System.Int32 depth)
    // Offset: 0xB5A140
    bool MoveToAttribute(::StringW name, ::StringW URN, int depth);
  }; // System.Xml.Schema.AxisStack
  #pragma pack(pop)
  static check_size<sizeof(AxisStack), 32 + sizeof(::System::Xml::Schema::ActiveAxis*)> __System_Xml_Schema_AxisStackSizeCheck;
  static_assert(sizeof(AxisStack) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::AxisStack::get_Subtree
// Il2CppName: get_Subtree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::ForwardAxis* (System::Xml::Schema::AxisStack::*)()>(&System::Xml::Schema::AxisStack::get_Subtree)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::AxisStack*), "get_Subtree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::AxisStack::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::AxisStack::*)()>(&System::Xml::Schema::AxisStack::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::AxisStack*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::AxisStack::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::AxisStack::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::AxisStack::*)(int)>(&System::Xml::Schema::AxisStack::Push)> {
  static const MethodInfo* get() {
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::AxisStack*), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{depth});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::AxisStack::Pop
// Il2CppName: Pop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::AxisStack::*)()>(&System::Xml::Schema::AxisStack::Pop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::AxisStack*), "Pop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::AxisStack::Equal
// Il2CppName: Equal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, ::StringW, ::StringW)>(&System::Xml::Schema::AxisStack::Equal)> {
  static const MethodInfo* get() {
    static auto* thisname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* thisURN = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* URN = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::AxisStack*), "Equal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{thisname, thisURN, name, URN});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::AxisStack::MoveToParent
// Il2CppName: MoveToParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::AxisStack::*)(::StringW, ::StringW, int)>(&System::Xml::Schema::AxisStack::MoveToParent)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* URN = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::AxisStack*), "MoveToParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, URN, depth});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::AxisStack::MoveToChild
// Il2CppName: MoveToChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::AxisStack::*)(::StringW, ::StringW, int)>(&System::Xml::Schema::AxisStack::MoveToChild)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* URN = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::AxisStack*), "MoveToChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, URN, depth});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::AxisStack::MoveToAttribute
// Il2CppName: MoveToAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::AxisStack::*)(::StringW, ::StringW, int)>(&System::Xml::Schema::AxisStack::MoveToAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* URN = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::AxisStack*), "MoveToAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, URN, depth});
  }
};
