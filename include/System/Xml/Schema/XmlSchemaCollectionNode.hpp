// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: SchemaInfo
  class SchemaInfo;
  // Forward declaring type: XmlSchema
  class XmlSchema;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaCollectionNode
  class XmlSchemaCollectionNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchemaCollectionNode);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaCollectionNode*, "System.Xml.Schema", "XmlSchemaCollectionNode");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaCollectionNode
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSchemaCollectionNode : public ::Il2CppObject {
    public:
    public:
    // private System.String namespaceUri
    // Size: 0x8
    // Offset: 0x10
    ::StringW namespaceUri;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.Schema.SchemaInfo schemaInfo
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::Schema::SchemaInfo* schemaInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::SchemaInfo*) == 0x8);
    // private System.Xml.Schema.XmlSchema schema
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::Schema::XmlSchema* schema;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchema*) == 0x8);
    public:
    // Get instance field reference: private System.String namespaceUri
    [[deprecated("Use field access instead!")]] ::StringW& dyn_namespaceUri();
    // Get instance field reference: private System.Xml.Schema.SchemaInfo schemaInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::SchemaInfo*& dyn_schemaInfo();
    // Get instance field reference: private System.Xml.Schema.XmlSchema schema
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchema*& dyn_schema();
    // System.Void set_NamespaceURI(System.String value)
    // Offset: 0x110AE0C
    void set_NamespaceURI(::StringW value);
    // System.Xml.Schema.SchemaInfo get_SchemaInfo()
    // Offset: 0x110AE14
    ::System::Xml::Schema::SchemaInfo* get_SchemaInfo();
    // System.Void set_SchemaInfo(System.Xml.Schema.SchemaInfo value)
    // Offset: 0x110AE1C
    void set_SchemaInfo(::System::Xml::Schema::SchemaInfo* value);
    // System.Xml.Schema.XmlSchema get_Schema()
    // Offset: 0x110AE24
    ::System::Xml::Schema::XmlSchema* get_Schema();
    // System.Void set_Schema(System.Xml.Schema.XmlSchema value)
    // Offset: 0x110AE2C
    void set_Schema(::System::Xml::Schema::XmlSchema* value);
    // public System.Void .ctor()
    // Offset: 0x110AA78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaCollectionNode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaCollectionNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaCollectionNode*, creationType>()));
    }
  }; // System.Xml.Schema.XmlSchemaCollectionNode
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaCollectionNode), 32 + sizeof(::System::Xml::Schema::XmlSchema*)> __System_Xml_Schema_XmlSchemaCollectionNodeSizeCheck;
  static_assert(sizeof(XmlSchemaCollectionNode) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollectionNode::set_NamespaceURI
// Il2CppName: set_NamespaceURI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaCollectionNode::*)(::StringW)>(&System::Xml::Schema::XmlSchemaCollectionNode::set_NamespaceURI)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollectionNode*), "set_NamespaceURI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollectionNode::get_SchemaInfo
// Il2CppName: get_SchemaInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaInfo* (System::Xml::Schema::XmlSchemaCollectionNode::*)()>(&System::Xml::Schema::XmlSchemaCollectionNode::get_SchemaInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollectionNode*), "get_SchemaInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollectionNode::set_SchemaInfo
// Il2CppName: set_SchemaInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaCollectionNode::*)(::System::Xml::Schema::SchemaInfo*)>(&System::Xml::Schema::XmlSchemaCollectionNode::set_SchemaInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollectionNode*), "set_SchemaInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollectionNode::get_Schema
// Il2CppName: get_Schema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Xml::Schema::XmlSchemaCollectionNode::*)()>(&System::Xml::Schema::XmlSchemaCollectionNode::get_Schema)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollectionNode*), "get_Schema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollectionNode::set_Schema
// Il2CppName: set_Schema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaCollectionNode::*)(::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchemaCollectionNode::set_Schema)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaCollectionNode*), "set_Schema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaCollectionNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
