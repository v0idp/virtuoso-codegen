// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlSchemaObjectTable
#include "System/Xml/Schema/XmlSchemaObjectTable.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaObjectTable::EnumeratorType, "System.Xml.Schema", "XmlSchemaObjectTable/EnumeratorType");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.EnumeratorType
  // [TokenAttribute] Offset: FFFFFFFF
  struct XmlSchemaObjectTable::EnumeratorType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: EnumeratorType
    constexpr EnumeratorType(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.EnumeratorType Keys
    static constexpr const int Keys = 0;
    // Get static field: static public System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.EnumeratorType Keys
    static ::System::Xml::Schema::XmlSchemaObjectTable::EnumeratorType _get_Keys();
    // Set static field: static public System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.EnumeratorType Keys
    static void _set_Keys(::System::Xml::Schema::XmlSchemaObjectTable::EnumeratorType value);
    // static field const value: static public System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.EnumeratorType Values
    static constexpr const int Values = 1;
    // Get static field: static public System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.EnumeratorType Values
    static ::System::Xml::Schema::XmlSchemaObjectTable::EnumeratorType _get_Values();
    // Set static field: static public System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.EnumeratorType Values
    static void _set_Values(::System::Xml::Schema::XmlSchemaObjectTable::EnumeratorType value);
    // static field const value: static public System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.EnumeratorType DictionaryEntry
    static constexpr const int DictionaryEntry = 2;
    // Get static field: static public System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.EnumeratorType DictionaryEntry
    static ::System::Xml::Schema::XmlSchemaObjectTable::EnumeratorType _get_DictionaryEntry();
    // Set static field: static public System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.EnumeratorType DictionaryEntry
    static void _set_DictionaryEntry(::System::Xml::Schema::XmlSchemaObjectTable::EnumeratorType value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated]] int& dyn_value__();
  }; // System.Xml.Schema.XmlSchemaObjectTable/System.Xml.Schema.EnumeratorType
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaObjectTable::EnumeratorType), 0 + sizeof(int)> __System_Xml_Schema_XmlSchemaObjectTable_EnumeratorTypeSizeCheck;
  static_assert(sizeof(XmlSchemaObjectTable::EnumeratorType) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
