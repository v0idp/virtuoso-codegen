// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: CompiledIdentityConstraint
  class CompiledIdentityConstraint;
  // Forward declaring type: SelectorActiveAxis
  class SelectorActiveAxis;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: ConstraintStruct
  class ConstraintStruct;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::ConstraintStruct);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::ConstraintStruct*, "System.Xml.Schema", "ConstraintStruct");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.ConstraintStruct
  // [TokenAttribute] Offset: FFFFFFFF
  class ConstraintStruct : public ::Il2CppObject {
    public:
    public:
    // System.Xml.Schema.CompiledIdentityConstraint constraint
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::Schema::CompiledIdentityConstraint* constraint;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::CompiledIdentityConstraint*) == 0x8);
    // System.Xml.Schema.SelectorActiveAxis axisSelector
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::Schema::SelectorActiveAxis* axisSelector;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::SelectorActiveAxis*) == 0x8);
    // System.Collections.ArrayList axisFields
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::ArrayList* axisFields;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // System.Collections.Hashtable qualifiedTable
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Hashtable* qualifiedTable;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // System.Collections.Hashtable keyrefTable
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Hashtable* keyrefTable;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Int32 tableDim
    // Size: 0x4
    // Offset: 0x38
    int tableDim;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: System.Xml.Schema.CompiledIdentityConstraint constraint
    [[deprecated]] ::System::Xml::Schema::CompiledIdentityConstraint*& dyn_constraint();
    // Get instance field reference: System.Xml.Schema.SelectorActiveAxis axisSelector
    [[deprecated]] ::System::Xml::Schema::SelectorActiveAxis*& dyn_axisSelector();
    // Get instance field reference: System.Collections.ArrayList axisFields
    [[deprecated]] ::System::Collections::ArrayList*& dyn_axisFields();
    // Get instance field reference: System.Collections.Hashtable qualifiedTable
    [[deprecated]] ::System::Collections::Hashtable*& dyn_qualifiedTable();
    // Get instance field reference: System.Collections.Hashtable keyrefTable
    [[deprecated]] ::System::Collections::Hashtable*& dyn_keyrefTable();
    // Get instance field reference: private System.Int32 tableDim
    [[deprecated]] int& dyn_tableDim();
    // System.Int32 get_TableDim()
    // Offset: 0x109E348
    int get_TableDim();
    // System.Void .ctor(System.Xml.Schema.CompiledIdentityConstraint constraint)
    // Offset: 0x109E350
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConstraintStruct* New_ctor(::System::Xml::Schema::CompiledIdentityConstraint* constraint) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::ConstraintStruct::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConstraintStruct*, creationType>(constraint)));
    }
  }; // System.Xml.Schema.ConstraintStruct
  #pragma pack(pop)
  static check_size<sizeof(ConstraintStruct), 56 + sizeof(int)> __System_Xml_Schema_ConstraintStructSizeCheck;
  static_assert(sizeof(ConstraintStruct) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::ConstraintStruct::get_TableDim
// Il2CppName: get_TableDim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::ConstraintStruct::*)()>(&System::Xml::Schema::ConstraintStruct::get_TableDim)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ConstraintStruct*), "get_TableDim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ConstraintStruct::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
