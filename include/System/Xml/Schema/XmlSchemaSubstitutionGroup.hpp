// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlSchemaObject
#include "System/Xml/Schema/XmlSchemaObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaSubstitutionGroup
  class XmlSchemaSubstitutionGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchemaSubstitutionGroup);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaSubstitutionGroup*, "System.Xml.Schema", "XmlSchemaSubstitutionGroup");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaSubstitutionGroup
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSchemaSubstitutionGroup : public ::System::Xml::Schema::XmlSchemaObject {
    public:
    // Writing base type padding for base size: 0x31 to desired offset: 0x38
    char ___base_padding[0x7] = {};
    public:
    // private System.Collections.ArrayList membersList
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::ArrayList* membersList;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Xml.XmlQualifiedName examplar
    // Size: 0x8
    // Offset: 0x40
    ::System::Xml::XmlQualifiedName* examplar;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.ArrayList membersList
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_membersList();
    // Get instance field reference: private System.Xml.XmlQualifiedName examplar
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlQualifiedName*& dyn_examplar();
    // System.Collections.ArrayList get_Members()
    // Offset: 0xF37264
    ::System::Collections::ArrayList* get_Members();
    // System.Xml.XmlQualifiedName get_Examplar()
    // Offset: 0xF3726C
    ::System::Xml::XmlQualifiedName* get_Examplar();
    // System.Void set_Examplar(System.Xml.XmlQualifiedName value)
    // Offset: 0xF37274
    void set_Examplar(::System::Xml::XmlQualifiedName* value);
    // public System.Void .ctor()
    // Offset: 0xF3727C
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.Void XmlSchemaObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaSubstitutionGroup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaSubstitutionGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaSubstitutionGroup*, creationType>()));
    }
  }; // System.Xml.Schema.XmlSchemaSubstitutionGroup
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaSubstitutionGroup), 64 + sizeof(::System::Xml::XmlQualifiedName*)> __System_Xml_Schema_XmlSchemaSubstitutionGroupSizeCheck;
  static_assert(sizeof(XmlSchemaSubstitutionGroup) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSubstitutionGroup::get_Members
// Il2CppName: get_Members
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ArrayList* (System::Xml::Schema::XmlSchemaSubstitutionGroup::*)()>(&System::Xml::Schema::XmlSchemaSubstitutionGroup::get_Members)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSubstitutionGroup*), "get_Members", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSubstitutionGroup::get_Examplar
// Il2CppName: get_Examplar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Schema::XmlSchemaSubstitutionGroup::*)()>(&System::Xml::Schema::XmlSchemaSubstitutionGroup::get_Examplar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSubstitutionGroup*), "get_Examplar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSubstitutionGroup::set_Examplar
// Il2CppName: set_Examplar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaSubstitutionGroup::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XmlSchemaSubstitutionGroup::set_Examplar)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaSubstitutionGroup*), "set_Examplar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaSubstitutionGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
