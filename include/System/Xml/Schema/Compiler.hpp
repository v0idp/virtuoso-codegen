// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.BaseProcessor
#include "System/Xml/Schema/BaseProcessor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaObjectTable
  class XmlSchemaObjectTable;
  // Forward declaring type: XmlSchema
  class XmlSchema;
  // Forward declaring type: ValidationEventHandler
  class ValidationEventHandler;
  // Forward declaring type: XmlSchemaCompilationSettings
  class XmlSchemaCompilationSettings;
  // Forward declaring type: XmlSchemaSet
  class XmlSchemaSet;
  // Forward declaring type: SchemaInfo
  class SchemaInfo;
  // Forward declaring type: XmlSchemaAttribute
  class XmlSchemaAttribute;
  // Forward declaring type: XmlSchemaAttributeGroup
  class XmlSchemaAttributeGroup;
  // Forward declaring type: XmlSchemaComplexType
  class XmlSchemaComplexType;
  // Forward declaring type: XmlSchemaSimpleType
  class XmlSchemaSimpleType;
  // Forward declaring type: XmlSchemaElement
  class XmlSchemaElement;
  // Forward declaring type: XmlSchemaObjectCollection
  class XmlSchemaObjectCollection;
  // Forward declaring type: XmlSchemaGroup
  class XmlSchemaGroup;
  // Forward declaring type: XmlSchemaParticle
  class XmlSchemaParticle;
  // Forward declaring type: XmlSchemaSubstitutionGroup
  class XmlSchemaSubstitutionGroup;
  // Forward declaring type: XmlSchemaSimpleContentExtension
  class XmlSchemaSimpleContentExtension;
  // Forward declaring type: XmlSchemaSimpleContentRestriction
  class XmlSchemaSimpleContentRestriction;
  // Forward declaring type: XmlSchemaComplexContent
  class XmlSchemaComplexContent;
  // Forward declaring type: XmlSchemaComplexContentExtension
  class XmlSchemaComplexContentExtension;
  // Forward declaring type: XmlSchemaComplexContentRestriction
  class XmlSchemaComplexContentRestriction;
  // Forward declaring type: XmlSchemaGroupRef
  class XmlSchemaGroupRef;
  // Forward declaring type: XmlSchemaAll
  class XmlSchemaAll;
  // Forward declaring type: XmlSchemaChoice
  class XmlSchemaChoice;
  // Forward declaring type: XmlSchemaSequence
  class XmlSchemaSequence;
  // Forward declaring type: XmlSchemaAny
  class XmlSchemaAny;
  // Forward declaring type: XmlSchemaGroupBase
  class XmlSchemaGroupBase;
  // Forward declaring type: XmlSchemaContentType
  struct XmlSchemaContentType;
  // Forward declaring type: XmlSchemaAnyAttribute
  class XmlSchemaAnyAttribute;
  // Forward declaring type: XmlSchemaDerivationMethod
  struct XmlSchemaDerivationMethod;
  // Forward declaring type: SchemaAttDef
  class SchemaAttDef;
  // Forward declaring type: XmlSchemaIdentityConstraint
  class XmlSchemaIdentityConstraint;
  // Forward declaring type: ContentValidator
  class ContentValidator;
  // Forward declaring type: ParticleContentValidator
  class ParticleContentValidator;
  // Forward declaring type: XmlSchemaType
  class XmlSchemaType;
  // Forward declaring type: XmlSchemaAnnotated
  class XmlSchemaAnnotated;
  // Forward declaring type: SchemaDeclBase
  class SchemaDeclBase;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Stack
  class Stack;
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Decimal
  struct Decimal;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: Compiler
  class Compiler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::Compiler);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::Compiler*, "System.Xml.Schema", "Compiler");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.Compiler
  // [TokenAttribute] Offset: FFFFFFFF
  class Compiler : public ::System::Xml::Schema::BaseProcessor {
    public:
    public:
    // private System.String restrictionErrorMsg
    // Size: 0x8
    // Offset: 0x40
    ::StringW restrictionErrorMsg;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectTable attributes
    // Size: 0x8
    // Offset: 0x48
    ::System::Xml::Schema::XmlSchemaObjectTable* attributes;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectTable attributeGroups
    // Size: 0x8
    // Offset: 0x50
    ::System::Xml::Schema::XmlSchemaObjectTable* attributeGroups;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectTable elements
    // Size: 0x8
    // Offset: 0x58
    ::System::Xml::Schema::XmlSchemaObjectTable* elements;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectTable schemaTypes
    // Size: 0x8
    // Offset: 0x60
    ::System::Xml::Schema::XmlSchemaObjectTable* schemaTypes;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectTable groups
    // Size: 0x8
    // Offset: 0x68
    ::System::Xml::Schema::XmlSchemaObjectTable* groups;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectTable notations
    // Size: 0x8
    // Offset: 0x70
    ::System::Xml::Schema::XmlSchemaObjectTable* notations;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectTable examplars
    // Size: 0x8
    // Offset: 0x78
    ::System::Xml::Schema::XmlSchemaObjectTable* examplars;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectTable identityConstraints
    // Size: 0x8
    // Offset: 0x80
    ::System::Xml::Schema::XmlSchemaObjectTable* identityConstraints;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Collections.Stack complexTypeStack
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Stack* complexTypeStack;
    // Field size check
    static_assert(sizeof(::System::Collections::Stack*) == 0x8);
    // private System.Collections.Hashtable schemasToCompile
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Hashtable* schemasToCompile;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable importedSchemas
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::Hashtable* importedSchemas;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Xml.Schema.XmlSchema schemaForSchema
    // Size: 0x8
    // Offset: 0xA0
    ::System::Xml::Schema::XmlSchema* schemaForSchema;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchema*) == 0x8);
    public:
    // Get instance field reference: private System.String restrictionErrorMsg
    [[deprecated("Use field access instead!")]] ::StringW& dyn_restrictionErrorMsg();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable attributes
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_attributes();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable attributeGroups
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_attributeGroups();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable elements
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_elements();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable schemaTypes
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_schemaTypes();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable groups
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_groups();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable notations
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_notations();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable examplars
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_examplars();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable identityConstraints
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_identityConstraints();
    // Get instance field reference: private System.Collections.Stack complexTypeStack
    [[deprecated("Use field access instead!")]] ::System::Collections::Stack*& dyn_complexTypeStack();
    // Get instance field reference: private System.Collections.Hashtable schemasToCompile
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_schemasToCompile();
    // Get instance field reference: private System.Collections.Hashtable importedSchemas
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_importedSchemas();
    // Get instance field reference: private System.Xml.Schema.XmlSchema schemaForSchema
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchema*& dyn_schemaForSchema();
    // public System.Void .ctor(System.Xml.XmlNameTable nameTable, System.Xml.Schema.ValidationEventHandler eventHandler, System.Xml.Schema.XmlSchema schemaForSchema, System.Xml.Schema.XmlSchemaCompilationSettings compilationSettings)
    // Offset: 0xB6760C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Compiler* New_ctor(::System::Xml::XmlNameTable* nameTable, ::System::Xml::Schema::ValidationEventHandler* eventHandler, ::System::Xml::Schema::XmlSchema* schemaForSchema, ::System::Xml::Schema::XmlSchemaCompilationSettings* compilationSettings) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::Compiler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Compiler*, creationType>(nameTable, eventHandler, schemaForSchema, compilationSettings)));
    }
    // public System.Boolean Execute(System.Xml.Schema.XmlSchemaSet schemaSet, System.Xml.Schema.SchemaInfo schemaCompiledInfo)
    // Offset: 0xB677C4
    bool Execute(::System::Xml::Schema::XmlSchemaSet* schemaSet, ::System::Xml::Schema::SchemaInfo* schemaCompiledInfo);
    // System.Void Prepare(System.Xml.Schema.XmlSchema schema, System.Boolean cleanup)
    // Offset: 0xB6A5E0
    void Prepare(::System::Xml::Schema::XmlSchema* schema, bool cleanup);
    // private System.Void UpdateSForSSimpleTypes()
    // Offset: 0xB6C248
    void UpdateSForSSimpleTypes();
    // private System.Void Output(System.Xml.Schema.SchemaInfo schemaInfo)
    // Offset: 0xB695F0
    void Output(::System::Xml::Schema::SchemaInfo* schemaInfo);
    // System.Void ImportAllCompiledSchemas(System.Xml.Schema.XmlSchemaSet schemaSet)
    // Offset: 0xB6C3AC
    void ImportAllCompiledSchemas(::System::Xml::Schema::XmlSchemaSet* schemaSet);
    // System.Boolean Compile()
    // Offset: 0xB6783C
    bool Compile();
    // private System.Void CleanupAttribute(System.Xml.Schema.XmlSchemaAttribute attribute)
    // Offset: 0xB6BC7C
    void CleanupAttribute(::System::Xml::Schema::XmlSchemaAttribute* attribute);
    // private System.Void CleanupAttributeGroup(System.Xml.Schema.XmlSchemaAttributeGroup attributeGroup)
    // Offset: 0xB6BCF0
    void CleanupAttributeGroup(::System::Xml::Schema::XmlSchemaAttributeGroup* attributeGroup);
    // private System.Void CleanupComplexType(System.Xml.Schema.XmlSchemaComplexType complexType)
    // Offset: 0xB6BD48
    void CleanupComplexType(::System::Xml::Schema::XmlSchemaComplexType* complexType);
    // private System.Void CleanupSimpleType(System.Xml.Schema.XmlSchemaSimpleType simpleType)
    // Offset: 0xB6C190
    void CleanupSimpleType(::System::Xml::Schema::XmlSchemaSimpleType* simpleType);
    // private System.Void CleanupElement(System.Xml.Schema.XmlSchemaElement element)
    // Offset: 0xB6BAEC
    void CleanupElement(::System::Xml::Schema::XmlSchemaElement* element);
    // private System.Void CleanupAttributes(System.Xml.Schema.XmlSchemaObjectCollection attributes)
    // Offset: 0xB70E18
    void CleanupAttributes(::System::Xml::Schema::XmlSchemaObjectCollection* attributes);
    // private System.Void CleanupGroup(System.Xml.Schema.XmlSchemaGroup group)
    // Offset: 0xB6BCB0
    void CleanupGroup(::System::Xml::Schema::XmlSchemaGroup* group);
    // private System.Void CleanupParticle(System.Xml.Schema.XmlSchemaParticle particle)
    // Offset: 0xB70EF4
    void CleanupParticle(::System::Xml::Schema::XmlSchemaParticle* particle);
    // private System.Void ProcessSubstitutionGroups()
    // Offset: 0xB6FF18
    void ProcessSubstitutionGroups();
    // private System.Void CompileSubstitutionGroup(System.Xml.Schema.XmlSchemaSubstitutionGroup substitutionGroup)
    // Offset: 0xB710A0
    void CompileSubstitutionGroup(::System::Xml::Schema::XmlSchemaSubstitutionGroup* substitutionGroup);
    // private System.Void RecursivelyCheckRedefinedGroups(System.Xml.Schema.XmlSchemaGroup redefinedGroup, System.Xml.Schema.XmlSchemaGroup baseGroup)
    // Offset: 0xB70CD0
    void RecursivelyCheckRedefinedGroups(::System::Xml::Schema::XmlSchemaGroup* redefinedGroup, ::System::Xml::Schema::XmlSchemaGroup* baseGroup);
    // private System.Void RecursivelyCheckRedefinedAttributeGroups(System.Xml.Schema.XmlSchemaAttributeGroup attributeGroup, System.Xml.Schema.XmlSchemaAttributeGroup baseAttributeGroup)
    // Offset: 0xB70D90
    void RecursivelyCheckRedefinedAttributeGroups(::System::Xml::Schema::XmlSchemaAttributeGroup* attributeGroup, ::System::Xml::Schema::XmlSchemaAttributeGroup* baseAttributeGroup);
    // private System.Void CompileGroup(System.Xml.Schema.XmlSchemaGroup group)
    // Offset: 0xB6C4B8
    void CompileGroup(::System::Xml::Schema::XmlSchemaGroup* group);
    // private System.Void CompileSimpleType(System.Xml.Schema.XmlSchemaSimpleType simpleType)
    // Offset: 0xB6D898
    void CompileSimpleType(::System::Xml::Schema::XmlSchemaSimpleType* simpleType);
    // private System.Xml.Schema.XmlSchemaSimpleType[] CompileBaseMemberTypes(System.Xml.Schema.XmlSchemaSimpleType simpleType)
    // Offset: 0xB723FC
    ::ArrayW<::System::Xml::Schema::XmlSchemaSimpleType*> CompileBaseMemberTypes(::System::Xml::Schema::XmlSchemaSimpleType* simpleType);
    // private System.Void CheckUnionType(System.Xml.Schema.XmlSchemaSimpleType unionMember, System.Collections.ArrayList memberTypeDefinitions, System.Xml.Schema.XmlSchemaSimpleType parentType)
    // Offset: 0xB727B4
    void CheckUnionType(::System::Xml::Schema::XmlSchemaSimpleType* unionMember, ::System::Collections::ArrayList* memberTypeDefinitions, ::System::Xml::Schema::XmlSchemaSimpleType* parentType);
    // private System.Void CompileComplexType(System.Xml.Schema.XmlSchemaComplexType complexType)
    // Offset: 0xB6CE08
    void CompileComplexType(::System::Xml::Schema::XmlSchemaComplexType* complexType);
    // private System.Void CompileSimpleContentExtension(System.Xml.Schema.XmlSchemaComplexType complexType, System.Xml.Schema.XmlSchemaSimpleContentExtension simpleExtension)
    // Offset: 0xB728D8
    void CompileSimpleContentExtension(::System::Xml::Schema::XmlSchemaComplexType* complexType, ::System::Xml::Schema::XmlSchemaSimpleContentExtension* simpleExtension);
    // private System.Void CompileSimpleContentRestriction(System.Xml.Schema.XmlSchemaComplexType complexType, System.Xml.Schema.XmlSchemaSimpleContentRestriction simpleRestriction)
    // Offset: 0xB72B20
    void CompileSimpleContentRestriction(::System::Xml::Schema::XmlSchemaComplexType* complexType, ::System::Xml::Schema::XmlSchemaSimpleContentRestriction* simpleRestriction);
    // private System.Void CompileComplexContentExtension(System.Xml.Schema.XmlSchemaComplexType complexType, System.Xml.Schema.XmlSchemaComplexContent complexContent, System.Xml.Schema.XmlSchemaComplexContentExtension complexExtension)
    // Offset: 0xB72F74
    void CompileComplexContentExtension(::System::Xml::Schema::XmlSchemaComplexType* complexType, ::System::Xml::Schema::XmlSchemaComplexContent* complexContent, ::System::Xml::Schema::XmlSchemaComplexContentExtension* complexExtension);
    // private System.Void CompileComplexContentRestriction(System.Xml.Schema.XmlSchemaComplexType complexType, System.Xml.Schema.XmlSchemaComplexContent complexContent, System.Xml.Schema.XmlSchemaComplexContentRestriction complexRestriction)
    // Offset: 0xB73308
    void CompileComplexContentRestriction(::System::Xml::Schema::XmlSchemaComplexType* complexType, ::System::Xml::Schema::XmlSchemaComplexContent* complexContent, ::System::Xml::Schema::XmlSchemaComplexContentRestriction* complexRestriction);
    // private System.Void CheckParticleDerivation(System.Xml.Schema.XmlSchemaComplexType complexType)
    // Offset: 0xB70710
    void CheckParticleDerivation(::System::Xml::Schema::XmlSchemaComplexType* complexType);
    // private System.Void CheckParticleDerivation(System.Xml.Schema.XmlSchemaParticle derivedParticle, System.Xml.Schema.XmlSchemaParticle baseParticle)
    // Offset: 0xB71948
    void CheckParticleDerivation(::System::Xml::Schema::XmlSchemaParticle* derivedParticle, ::System::Xml::Schema::XmlSchemaParticle* baseParticle);
    // private System.Xml.Schema.XmlSchemaParticle CompileContentTypeParticle(System.Xml.Schema.XmlSchemaParticle particle)
    // Offset: 0xB749E0
    ::System::Xml::Schema::XmlSchemaParticle* CompileContentTypeParticle(::System::Xml::Schema::XmlSchemaParticle* particle);
    // private System.Xml.Schema.XmlSchemaParticle CannonicalizeParticle(System.Xml.Schema.XmlSchemaParticle particle, System.Boolean root)
    // Offset: 0xB71594
    ::System::Xml::Schema::XmlSchemaParticle* CannonicalizeParticle(::System::Xml::Schema::XmlSchemaParticle* particle, bool root);
    // private System.Xml.Schema.XmlSchemaParticle CannonicalizeElement(System.Xml.Schema.XmlSchemaElement element)
    // Offset: 0xB77894
    ::System::Xml::Schema::XmlSchemaParticle* CannonicalizeElement(::System::Xml::Schema::XmlSchemaElement* element);
    // private System.Xml.Schema.XmlSchemaParticle CannonicalizeGroupRef(System.Xml.Schema.XmlSchemaGroupRef groupRef, System.Boolean root)
    // Offset: 0xB765FC
    ::System::Xml::Schema::XmlSchemaParticle* CannonicalizeGroupRef(::System::Xml::Schema::XmlSchemaGroupRef* groupRef, bool root);
    // private System.Xml.Schema.XmlSchemaParticle CannonicalizeAll(System.Xml.Schema.XmlSchemaAll all, System.Boolean root)
    // Offset: 0xB76B90
    ::System::Xml::Schema::XmlSchemaParticle* CannonicalizeAll(::System::Xml::Schema::XmlSchemaAll* all, bool root);
    // private System.Xml.Schema.XmlSchemaParticle CannonicalizeChoice(System.Xml.Schema.XmlSchemaChoice choice, System.Boolean root)
    // Offset: 0xB76E2C
    ::System::Xml::Schema::XmlSchemaParticle* CannonicalizeChoice(::System::Xml::Schema::XmlSchemaChoice* choice, bool root);
    // private System.Xml.Schema.XmlSchemaParticle CannonicalizeSequence(System.Xml.Schema.XmlSchemaSequence sequence, System.Boolean root)
    // Offset: 0xB7738C
    ::System::Xml::Schema::XmlSchemaParticle* CannonicalizeSequence(::System::Xml::Schema::XmlSchemaSequence* sequence, bool root);
    // private System.Xml.Schema.XmlSchemaParticle CannonicalizePointlessRoot(System.Xml.Schema.XmlSchemaParticle particle)
    // Offset: 0xB758A0
    ::System::Xml::Schema::XmlSchemaParticle* CannonicalizePointlessRoot(::System::Xml::Schema::XmlSchemaParticle* particle);
    // private System.Boolean IsValidRestriction(System.Xml.Schema.XmlSchemaParticle derivedParticle, System.Xml.Schema.XmlSchemaParticle baseParticle)
    // Offset: 0xB75BA8
    bool IsValidRestriction(::System::Xml::Schema::XmlSchemaParticle* derivedParticle, ::System::Xml::Schema::XmlSchemaParticle* baseParticle);
    // private System.Boolean IsElementFromElement(System.Xml.Schema.XmlSchemaElement derivedElement, System.Xml.Schema.XmlSchemaElement baseElement)
    // Offset: 0xB77BBC
    bool IsElementFromElement(::System::Xml::Schema::XmlSchemaElement* derivedElement, ::System::Xml::Schema::XmlSchemaElement* baseElement);
    // private System.Boolean IsElementFromAny(System.Xml.Schema.XmlSchemaElement derivedElement, System.Xml.Schema.XmlSchemaAny baseAny)
    // Offset: 0xB77DD8
    bool IsElementFromAny(::System::Xml::Schema::XmlSchemaElement* derivedElement, ::System::Xml::Schema::XmlSchemaAny* baseAny);
    // private System.Boolean IsAnyFromAny(System.Xml.Schema.XmlSchemaAny derivedAny, System.Xml.Schema.XmlSchemaAny baseAny)
    // Offset: 0xB77F74
    bool IsAnyFromAny(::System::Xml::Schema::XmlSchemaAny* derivedAny, ::System::Xml::Schema::XmlSchemaAny* baseAny);
    // private System.Boolean IsGroupBaseFromAny(System.Xml.Schema.XmlSchemaGroupBase derivedGroupBase, System.Xml.Schema.XmlSchemaAny baseAny)
    // Offset: 0xB78070
    bool IsGroupBaseFromAny(::System::Xml::Schema::XmlSchemaGroupBase* derivedGroupBase, ::System::Xml::Schema::XmlSchemaAny* baseAny);
    // private System.Boolean IsElementFromGroupBase(System.Xml.Schema.XmlSchemaElement derivedElement, System.Xml.Schema.XmlSchemaGroupBase baseGroupBase)
    // Offset: 0xB7842C
    bool IsElementFromGroupBase(::System::Xml::Schema::XmlSchemaElement* derivedElement, ::System::Xml::Schema::XmlSchemaGroupBase* baseGroupBase);
    // private System.Boolean IsChoiceFromChoiceSubstGroup(System.Xml.Schema.XmlSchemaChoice derivedChoice, System.Xml.Schema.XmlSchemaChoice baseChoice)
    // Offset: 0xB79230
    bool IsChoiceFromChoiceSubstGroup(::System::Xml::Schema::XmlSchemaChoice* derivedChoice, ::System::Xml::Schema::XmlSchemaChoice* baseChoice);
    // private System.Boolean IsGroupBaseFromGroupBase(System.Xml.Schema.XmlSchemaGroupBase derivedGroupBase, System.Xml.Schema.XmlSchemaGroupBase baseGroupBase, System.Boolean skipEmptableOnly)
    // Offset: 0xB78C5C
    bool IsGroupBaseFromGroupBase(::System::Xml::Schema::XmlSchemaGroupBase* derivedGroupBase, ::System::Xml::Schema::XmlSchemaGroupBase* baseGroupBase, bool skipEmptableOnly);
    // private System.Boolean IsSequenceFromAll(System.Xml.Schema.XmlSchemaSequence derivedSequence, System.Xml.Schema.XmlSchemaAll baseAll)
    // Offset: 0xB78F30
    bool IsSequenceFromAll(::System::Xml::Schema::XmlSchemaSequence* derivedSequence, ::System::Xml::Schema::XmlSchemaAll* baseAll);
    // private System.Boolean IsSequenceFromChoice(System.Xml.Schema.XmlSchemaSequence derivedSequence, System.Xml.Schema.XmlSchemaChoice baseChoice)
    // Offset: 0xB793C0
    bool IsSequenceFromChoice(::System::Xml::Schema::XmlSchemaSequence* derivedSequence, ::System::Xml::Schema::XmlSchemaChoice* baseChoice);
    // private System.Boolean IsValidOccurrenceRangeRestriction(System.Xml.Schema.XmlSchemaParticle derivedParticle, System.Xml.Schema.XmlSchemaParticle baseParticle)
    // Offset: 0xB796E4
    bool IsValidOccurrenceRangeRestriction(::System::Xml::Schema::XmlSchemaParticle* derivedParticle, ::System::Xml::Schema::XmlSchemaParticle* baseParticle);
    // private System.Boolean IsValidOccurrenceRangeRestriction(System.Decimal minOccurs, System.Decimal maxOccurs, System.Decimal baseMinOccurs, System.Decimal baseMaxOccurs)
    // Offset: 0xB79F9C
    bool IsValidOccurrenceRangeRestriction(::System::Decimal minOccurs, ::System::Decimal maxOccurs, ::System::Decimal baseMinOccurs, ::System::Decimal baseMaxOccurs);
    // private System.Int32 GetMappingParticle(System.Xml.Schema.XmlSchemaParticle particle, System.Xml.Schema.XmlSchemaObjectCollection collection)
    // Offset: 0xB7A098
    int GetMappingParticle(::System::Xml::Schema::XmlSchemaParticle* particle, ::System::Xml::Schema::XmlSchemaObjectCollection* collection);
    // private System.Boolean IsParticleEmptiable(System.Xml.Schema.XmlSchemaParticle particle)
    // Offset: 0xB77B0C
    bool IsParticleEmptiable(::System::Xml::Schema::XmlSchemaParticle* particle);
    // private System.Void CalculateEffectiveTotalRange(System.Xml.Schema.XmlSchemaParticle particle, out System.Decimal minOccurs, out System.Decimal maxOccurs)
    // Offset: 0xB7988C
    void CalculateEffectiveTotalRange(::System::Xml::Schema::XmlSchemaParticle* particle, ByRef<::System::Decimal> minOccurs, ByRef<::System::Decimal> maxOccurs);
    // private System.Void PushComplexType(System.Xml.Schema.XmlSchemaComplexType complexType)
    // Offset: 0xB7A198
    void PushComplexType(::System::Xml::Schema::XmlSchemaComplexType* complexType);
    // private System.Xml.Schema.XmlSchemaContentType GetSchemaContentType(System.Xml.Schema.XmlSchemaComplexType complexType, System.Xml.Schema.XmlSchemaComplexContent complexContent, System.Xml.Schema.XmlSchemaParticle particle)
    // Offset: 0xB74B60
    ::System::Xml::Schema::XmlSchemaContentType GetSchemaContentType(::System::Xml::Schema::XmlSchemaComplexType* complexType, ::System::Xml::Schema::XmlSchemaComplexContent* complexContent, ::System::Xml::Schema::XmlSchemaParticle* particle);
    // private System.Void CompileAttributeGroup(System.Xml.Schema.XmlSchemaAttributeGroup attributeGroup)
    // Offset: 0xB6C590
    void CompileAttributeGroup(::System::Xml::Schema::XmlSchemaAttributeGroup* attributeGroup);
    // private System.Void CompileLocalAttributes(System.Xml.Schema.XmlSchemaComplexType baseType, System.Xml.Schema.XmlSchemaComplexType derivedType, System.Xml.Schema.XmlSchemaObjectCollection attributes, System.Xml.Schema.XmlSchemaAnyAttribute anyAttribute, System.Xml.Schema.XmlSchemaDerivationMethod derivedBy)
    // Offset: 0xB735B8
    void CompileLocalAttributes(::System::Xml::Schema::XmlSchemaComplexType* baseType, ::System::Xml::Schema::XmlSchemaComplexType* derivedType, ::System::Xml::Schema::XmlSchemaObjectCollection* attributes, ::System::Xml::Schema::XmlSchemaAnyAttribute* anyAttribute, ::System::Xml::Schema::XmlSchemaDerivationMethod derivedBy);
    // private System.Void CheckAtrributeGroupRestriction(System.Xml.Schema.XmlSchemaAttributeGroup baseAttributeGroup, System.Xml.Schema.XmlSchemaAttributeGroup derivedAttributeGroup)
    // Offset: 0xB71A1C
    void CheckAtrributeGroupRestriction(::System::Xml::Schema::XmlSchemaAttributeGroup* baseAttributeGroup, ::System::Xml::Schema::XmlSchemaAttributeGroup* derivedAttributeGroup);
    // private System.Boolean IsProcessContentsRestricted(System.Xml.Schema.XmlSchemaComplexType baseType, System.Xml.Schema.XmlSchemaAnyAttribute derivedAttributeWildcard, System.Xml.Schema.XmlSchemaAnyAttribute baseAttributeWildcard)
    // Offset: 0xB7A2E4
    bool IsProcessContentsRestricted(::System::Xml::Schema::XmlSchemaComplexType* baseType, ::System::Xml::Schema::XmlSchemaAnyAttribute* derivedAttributeWildcard, ::System::Xml::Schema::XmlSchemaAnyAttribute* baseAttributeWildcard);
    // private System.Xml.Schema.XmlSchemaAnyAttribute CompileAnyAttributeUnion(System.Xml.Schema.XmlSchemaAnyAttribute a, System.Xml.Schema.XmlSchemaAnyAttribute b)
    // Offset: 0xB7A250
    ::System::Xml::Schema::XmlSchemaAnyAttribute* CompileAnyAttributeUnion(::System::Xml::Schema::XmlSchemaAnyAttribute* a, ::System::Xml::Schema::XmlSchemaAnyAttribute* b);
    // private System.Xml.Schema.XmlSchemaAnyAttribute CompileAnyAttributeIntersection(System.Xml.Schema.XmlSchemaAnyAttribute a, System.Xml.Schema.XmlSchemaAnyAttribute b)
    // Offset: 0xB7A1BC
    ::System::Xml::Schema::XmlSchemaAnyAttribute* CompileAnyAttributeIntersection(::System::Xml::Schema::XmlSchemaAnyAttribute* a, ::System::Xml::Schema::XmlSchemaAnyAttribute* b);
    // private System.Void CompileAttribute(System.Xml.Schema.XmlSchemaAttribute xa)
    // Offset: 0xB6EF84
    void CompileAttribute(::System::Xml::Schema::XmlSchemaAttribute* xa);
    // private System.Void SetDefaultFixed(System.Xml.Schema.XmlSchemaAttribute xa, System.Xml.Schema.SchemaAttDef decl)
    // Offset: 0xB7A3DC
    void SetDefaultFixed(::System::Xml::Schema::XmlSchemaAttribute* xa, ::System::Xml::Schema::SchemaAttDef* decl);
    // private System.Void CompileIdentityConstraint(System.Xml.Schema.XmlSchemaIdentityConstraint xi)
    // Offset: 0xB6F788
    void CompileIdentityConstraint(::System::Xml::Schema::XmlSchemaIdentityConstraint* xi);
    // private System.Void CompileElement(System.Xml.Schema.XmlSchemaElement xe)
    // Offset: 0xB6E1C4
    void CompileElement(::System::Xml::Schema::XmlSchemaElement* xe);
    // private System.Xml.Schema.ContentValidator CompileComplexContent(System.Xml.Schema.XmlSchemaComplexType complexType)
    // Offset: 0xB74BDC
    ::System::Xml::Schema::ContentValidator* CompileComplexContent(::System::Xml::Schema::XmlSchemaComplexType* complexType);
    // private System.Boolean BuildParticleContentModel(System.Xml.Schema.ParticleContentValidator contentValidator, System.Xml.Schema.XmlSchemaParticle particle)
    // Offset: 0xB7A564
    bool BuildParticleContentModel(::System::Xml::Schema::ParticleContentValidator* contentValidator, ::System::Xml::Schema::XmlSchemaParticle* particle);
    // private System.Void CompileParticleElements(System.Xml.Schema.XmlSchemaComplexType complexType, System.Xml.Schema.XmlSchemaParticle particle)
    // Offset: 0xB7AA8C
    void CompileParticleElements(::System::Xml::Schema::XmlSchemaComplexType* complexType, ::System::Xml::Schema::XmlSchemaParticle* particle);
    // private System.Void CompileParticleElements(System.Xml.Schema.XmlSchemaParticle particle)
    // Offset: 0xB717BC
    void CompileParticleElements(::System::Xml::Schema::XmlSchemaParticle* particle);
    // private System.Void CompileComplexTypeElements(System.Xml.Schema.XmlSchemaComplexType complexType)
    // Offset: 0xB6FE0C
    void CompileComplexTypeElements(::System::Xml::Schema::XmlSchemaComplexType* complexType);
    // private System.Xml.Schema.XmlSchemaSimpleType GetSimpleType(System.Xml.XmlQualifiedName name)
    // Offset: 0xB7230C
    ::System::Xml::Schema::XmlSchemaSimpleType* GetSimpleType(::System::Xml::XmlQualifiedName* name);
    // private System.Xml.Schema.XmlSchemaComplexType GetComplexType(System.Xml.XmlQualifiedName name)
    // Offset: 0xB757EC
    ::System::Xml::Schema::XmlSchemaComplexType* GetComplexType(::System::Xml::XmlQualifiedName* name);
    // private System.Xml.Schema.XmlSchemaType GetAnySchemaType(System.Xml.XmlQualifiedName name)
    // Offset: 0xB75680
    ::System::Xml::Schema::XmlSchemaType* GetAnySchemaType(::System::Xml::XmlQualifiedName* name);
    // private System.Void CopyPosition(System.Xml.Schema.XmlSchemaAnnotated to, System.Xml.Schema.XmlSchemaAnnotated from, System.Boolean copyParent)
    // Offset: 0xB77A9C
    void CopyPosition(::System::Xml::Schema::XmlSchemaAnnotated* to, ::System::Xml::Schema::XmlSchemaAnnotated* from, bool copyParent);
    // private System.Boolean IsFixedEqual(System.Xml.Schema.SchemaDeclBase baseDecl, System.Xml.Schema.SchemaDeclBase derivedDecl)
    // Offset: 0xB7972C
    bool IsFixedEqual(::System::Xml::Schema::SchemaDeclBase* baseDecl, ::System::Xml::Schema::SchemaDeclBase* derivedDecl);
  }; // System.Xml.Schema.Compiler
  #pragma pack(pop)
  static check_size<sizeof(Compiler), 160 + sizeof(::System::Xml::Schema::XmlSchema*)> __System_Xml_Schema_CompilerSizeCheck;
  static_assert(sizeof(Compiler) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaSet*, ::System::Xml::Schema::SchemaInfo*)>(&System::Xml::Schema::Compiler::Execute)> {
  static const MethodInfo* get() {
    static auto* schemaSet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSet")->byval_arg;
    static auto* schemaCompiledInfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaSet, schemaCompiledInfo});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::Prepare
// Il2CppName: Prepare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchema*, bool)>(&System::Xml::Schema::Compiler::Prepare)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* cleanup = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "Prepare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema, cleanup});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::UpdateSForSSimpleTypes
// Il2CppName: UpdateSForSSimpleTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)()>(&System::Xml::Schema::Compiler::UpdateSForSSimpleTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "UpdateSForSSimpleTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::Output
// Il2CppName: Output
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::SchemaInfo*)>(&System::Xml::Schema::Compiler::Output)> {
  static const MethodInfo* get() {
    static auto* schemaInfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "Output", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaInfo});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::ImportAllCompiledSchemas
// Il2CppName: ImportAllCompiledSchemas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaSet*)>(&System::Xml::Schema::Compiler::ImportAllCompiledSchemas)> {
  static const MethodInfo* get() {
    static auto* schemaSet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "ImportAllCompiledSchemas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaSet});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::Compile
// Il2CppName: Compile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Compiler::*)()>(&System::Xml::Schema::Compiler::Compile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "Compile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CleanupAttribute
// Il2CppName: CleanupAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaAttribute*)>(&System::Xml::Schema::Compiler::CleanupAttribute)> {
  static const MethodInfo* get() {
    static auto* attribute = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CleanupAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attribute});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CleanupAttributeGroup
// Il2CppName: CleanupAttributeGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaAttributeGroup*)>(&System::Xml::Schema::Compiler::CleanupAttributeGroup)> {
  static const MethodInfo* get() {
    static auto* attributeGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttributeGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CleanupAttributeGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeGroup});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CleanupComplexType
// Il2CppName: CleanupComplexType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaComplexType*)>(&System::Xml::Schema::Compiler::CleanupComplexType)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CleanupComplexType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CleanupSimpleType
// Il2CppName: CleanupSimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaSimpleType*)>(&System::Xml::Schema::Compiler::CleanupSimpleType)> {
  static const MethodInfo* get() {
    static auto* simpleType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CleanupSimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{simpleType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CleanupElement
// Il2CppName: CleanupElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaElement*)>(&System::Xml::Schema::Compiler::CleanupElement)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CleanupElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CleanupAttributes
// Il2CppName: CleanupAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaObjectCollection*)>(&System::Xml::Schema::Compiler::CleanupAttributes)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CleanupAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CleanupGroup
// Il2CppName: CleanupGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaGroup*)>(&System::Xml::Schema::Compiler::CleanupGroup)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CleanupGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CleanupParticle
// Il2CppName: CleanupParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::Compiler::CleanupParticle)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CleanupParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::ProcessSubstitutionGroups
// Il2CppName: ProcessSubstitutionGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)()>(&System::Xml::Schema::Compiler::ProcessSubstitutionGroups)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "ProcessSubstitutionGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileSubstitutionGroup
// Il2CppName: CompileSubstitutionGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaSubstitutionGroup*)>(&System::Xml::Schema::Compiler::CompileSubstitutionGroup)> {
  static const MethodInfo* get() {
    static auto* substitutionGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSubstitutionGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileSubstitutionGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{substitutionGroup});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::RecursivelyCheckRedefinedGroups
// Il2CppName: RecursivelyCheckRedefinedGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaGroup*, ::System::Xml::Schema::XmlSchemaGroup*)>(&System::Xml::Schema::Compiler::RecursivelyCheckRedefinedGroups)> {
  static const MethodInfo* get() {
    static auto* redefinedGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroup")->byval_arg;
    static auto* baseGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "RecursivelyCheckRedefinedGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{redefinedGroup, baseGroup});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::RecursivelyCheckRedefinedAttributeGroups
// Il2CppName: RecursivelyCheckRedefinedAttributeGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaAttributeGroup*, ::System::Xml::Schema::XmlSchemaAttributeGroup*)>(&System::Xml::Schema::Compiler::RecursivelyCheckRedefinedAttributeGroups)> {
  static const MethodInfo* get() {
    static auto* attributeGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttributeGroup")->byval_arg;
    static auto* baseAttributeGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttributeGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "RecursivelyCheckRedefinedAttributeGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeGroup, baseAttributeGroup});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileGroup
// Il2CppName: CompileGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaGroup*)>(&System::Xml::Schema::Compiler::CompileGroup)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileSimpleType
// Il2CppName: CompileSimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaSimpleType*)>(&System::Xml::Schema::Compiler::CompileSimpleType)> {
  static const MethodInfo* get() {
    static auto* simpleType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileSimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{simpleType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileBaseMemberTypes
// Il2CppName: CompileBaseMemberTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Xml::Schema::XmlSchemaSimpleType*> (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaSimpleType*)>(&System::Xml::Schema::Compiler::CompileBaseMemberTypes)> {
  static const MethodInfo* get() {
    static auto* simpleType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileBaseMemberTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{simpleType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CheckUnionType
// Il2CppName: CheckUnionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaSimpleType*, ::System::Collections::ArrayList*, ::System::Xml::Schema::XmlSchemaSimpleType*)>(&System::Xml::Schema::Compiler::CheckUnionType)> {
  static const MethodInfo* get() {
    static auto* unionMember = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    static auto* memberTypeDefinitions = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    static auto* parentType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CheckUnionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unionMember, memberTypeDefinitions, parentType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileComplexType
// Il2CppName: CompileComplexType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaComplexType*)>(&System::Xml::Schema::Compiler::CompileComplexType)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileComplexType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileSimpleContentExtension
// Il2CppName: CompileSimpleContentExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaSimpleContentExtension*)>(&System::Xml::Schema::Compiler::CompileSimpleContentExtension)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* simpleExtension = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleContentExtension")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileSimpleContentExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType, simpleExtension});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileSimpleContentRestriction
// Il2CppName: CompileSimpleContentRestriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaSimpleContentRestriction*)>(&System::Xml::Schema::Compiler::CompileSimpleContentRestriction)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* simpleRestriction = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleContentRestriction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileSimpleContentRestriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType, simpleRestriction});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileComplexContentExtension
// Il2CppName: CompileComplexContentExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaComplexContent*, ::System::Xml::Schema::XmlSchemaComplexContentExtension*)>(&System::Xml::Schema::Compiler::CompileComplexContentExtension)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* complexContent = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexContent")->byval_arg;
    static auto* complexExtension = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexContentExtension")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileComplexContentExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType, complexContent, complexExtension});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileComplexContentRestriction
// Il2CppName: CompileComplexContentRestriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaComplexContent*, ::System::Xml::Schema::XmlSchemaComplexContentRestriction*)>(&System::Xml::Schema::Compiler::CompileComplexContentRestriction)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* complexContent = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexContent")->byval_arg;
    static auto* complexRestriction = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexContentRestriction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileComplexContentRestriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType, complexContent, complexRestriction});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CheckParticleDerivation
// Il2CppName: CheckParticleDerivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaComplexType*)>(&System::Xml::Schema::Compiler::CheckParticleDerivation)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CheckParticleDerivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CheckParticleDerivation
// Il2CppName: CheckParticleDerivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaParticle*, ::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::Compiler::CheckParticleDerivation)> {
  static const MethodInfo* get() {
    static auto* derivedParticle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* baseParticle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CheckParticleDerivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedParticle, baseParticle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileContentTypeParticle
// Il2CppName: CompileContentTypeParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::Compiler::CompileContentTypeParticle)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileContentTypeParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CannonicalizeParticle
// Il2CppName: CannonicalizeParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaParticle*, bool)>(&System::Xml::Schema::Compiler::CannonicalizeParticle)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CannonicalizeParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle, root});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CannonicalizeElement
// Il2CppName: CannonicalizeElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaElement*)>(&System::Xml::Schema::Compiler::CannonicalizeElement)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CannonicalizeElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CannonicalizeGroupRef
// Il2CppName: CannonicalizeGroupRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaGroupRef*, bool)>(&System::Xml::Schema::Compiler::CannonicalizeGroupRef)> {
  static const MethodInfo* get() {
    static auto* groupRef = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroupRef")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CannonicalizeGroupRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupRef, root});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CannonicalizeAll
// Il2CppName: CannonicalizeAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaAll*, bool)>(&System::Xml::Schema::Compiler::CannonicalizeAll)> {
  static const MethodInfo* get() {
    static auto* all = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAll")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CannonicalizeAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{all, root});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CannonicalizeChoice
// Il2CppName: CannonicalizeChoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaChoice*, bool)>(&System::Xml::Schema::Compiler::CannonicalizeChoice)> {
  static const MethodInfo* get() {
    static auto* choice = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaChoice")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CannonicalizeChoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{choice, root});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CannonicalizeSequence
// Il2CppName: CannonicalizeSequence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaSequence*, bool)>(&System::Xml::Schema::Compiler::CannonicalizeSequence)> {
  static const MethodInfo* get() {
    static auto* sequence = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSequence")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CannonicalizeSequence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sequence, root});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CannonicalizePointlessRoot
// Il2CppName: CannonicalizePointlessRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::Compiler::CannonicalizePointlessRoot)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CannonicalizePointlessRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::IsValidRestriction
// Il2CppName: IsValidRestriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaParticle*, ::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::Compiler::IsValidRestriction)> {
  static const MethodInfo* get() {
    static auto* derivedParticle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* baseParticle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "IsValidRestriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedParticle, baseParticle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::IsElementFromElement
// Il2CppName: IsElementFromElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaElement*, ::System::Xml::Schema::XmlSchemaElement*)>(&System::Xml::Schema::Compiler::IsElementFromElement)> {
  static const MethodInfo* get() {
    static auto* derivedElement = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    static auto* baseElement = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "IsElementFromElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedElement, baseElement});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::IsElementFromAny
// Il2CppName: IsElementFromAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaElement*, ::System::Xml::Schema::XmlSchemaAny*)>(&System::Xml::Schema::Compiler::IsElementFromAny)> {
  static const MethodInfo* get() {
    static auto* derivedElement = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    static auto* baseAny = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAny")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "IsElementFromAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedElement, baseAny});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::IsAnyFromAny
// Il2CppName: IsAnyFromAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaAny*, ::System::Xml::Schema::XmlSchemaAny*)>(&System::Xml::Schema::Compiler::IsAnyFromAny)> {
  static const MethodInfo* get() {
    static auto* derivedAny = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAny")->byval_arg;
    static auto* baseAny = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAny")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "IsAnyFromAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedAny, baseAny});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::IsGroupBaseFromAny
// Il2CppName: IsGroupBaseFromAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaGroupBase*, ::System::Xml::Schema::XmlSchemaAny*)>(&System::Xml::Schema::Compiler::IsGroupBaseFromAny)> {
  static const MethodInfo* get() {
    static auto* derivedGroupBase = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroupBase")->byval_arg;
    static auto* baseAny = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAny")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "IsGroupBaseFromAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedGroupBase, baseAny});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::IsElementFromGroupBase
// Il2CppName: IsElementFromGroupBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaElement*, ::System::Xml::Schema::XmlSchemaGroupBase*)>(&System::Xml::Schema::Compiler::IsElementFromGroupBase)> {
  static const MethodInfo* get() {
    static auto* derivedElement = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    static auto* baseGroupBase = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroupBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "IsElementFromGroupBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedElement, baseGroupBase});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::IsChoiceFromChoiceSubstGroup
// Il2CppName: IsChoiceFromChoiceSubstGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaChoice*, ::System::Xml::Schema::XmlSchemaChoice*)>(&System::Xml::Schema::Compiler::IsChoiceFromChoiceSubstGroup)> {
  static const MethodInfo* get() {
    static auto* derivedChoice = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaChoice")->byval_arg;
    static auto* baseChoice = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaChoice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "IsChoiceFromChoiceSubstGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedChoice, baseChoice});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::IsGroupBaseFromGroupBase
// Il2CppName: IsGroupBaseFromGroupBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaGroupBase*, ::System::Xml::Schema::XmlSchemaGroupBase*, bool)>(&System::Xml::Schema::Compiler::IsGroupBaseFromGroupBase)> {
  static const MethodInfo* get() {
    static auto* derivedGroupBase = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroupBase")->byval_arg;
    static auto* baseGroupBase = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaGroupBase")->byval_arg;
    static auto* skipEmptableOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "IsGroupBaseFromGroupBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedGroupBase, baseGroupBase, skipEmptableOnly});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::IsSequenceFromAll
// Il2CppName: IsSequenceFromAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaSequence*, ::System::Xml::Schema::XmlSchemaAll*)>(&System::Xml::Schema::Compiler::IsSequenceFromAll)> {
  static const MethodInfo* get() {
    static auto* derivedSequence = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSequence")->byval_arg;
    static auto* baseAll = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAll")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "IsSequenceFromAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedSequence, baseAll});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::IsSequenceFromChoice
// Il2CppName: IsSequenceFromChoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaSequence*, ::System::Xml::Schema::XmlSchemaChoice*)>(&System::Xml::Schema::Compiler::IsSequenceFromChoice)> {
  static const MethodInfo* get() {
    static auto* derivedSequence = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSequence")->byval_arg;
    static auto* baseChoice = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaChoice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "IsSequenceFromChoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedSequence, baseChoice});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::IsValidOccurrenceRangeRestriction
// Il2CppName: IsValidOccurrenceRangeRestriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaParticle*, ::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::Compiler::IsValidOccurrenceRangeRestriction)> {
  static const MethodInfo* get() {
    static auto* derivedParticle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* baseParticle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "IsValidOccurrenceRangeRestriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedParticle, baseParticle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::IsValidOccurrenceRangeRestriction
// Il2CppName: IsValidOccurrenceRangeRestriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Compiler::*)(::System::Decimal, ::System::Decimal, ::System::Decimal, ::System::Decimal)>(&System::Xml::Schema::Compiler::IsValidOccurrenceRangeRestriction)> {
  static const MethodInfo* get() {
    static auto* minOccurs = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* maxOccurs = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* baseMinOccurs = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* baseMaxOccurs = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "IsValidOccurrenceRangeRestriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minOccurs, maxOccurs, baseMinOccurs, baseMaxOccurs});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::GetMappingParticle
// Il2CppName: GetMappingParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaParticle*, ::System::Xml::Schema::XmlSchemaObjectCollection*)>(&System::Xml::Schema::Compiler::GetMappingParticle)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* collection = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "GetMappingParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle, collection});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::IsParticleEmptiable
// Il2CppName: IsParticleEmptiable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::Compiler::IsParticleEmptiable)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "IsParticleEmptiable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CalculateEffectiveTotalRange
// Il2CppName: CalculateEffectiveTotalRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaParticle*, ByRef<::System::Decimal>, ByRef<::System::Decimal>)>(&System::Xml::Schema::Compiler::CalculateEffectiveTotalRange)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* minOccurs = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    static auto* maxOccurs = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CalculateEffectiveTotalRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle, minOccurs, maxOccurs});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::PushComplexType
// Il2CppName: PushComplexType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaComplexType*)>(&System::Xml::Schema::Compiler::PushComplexType)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "PushComplexType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::GetSchemaContentType
// Il2CppName: GetSchemaContentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaContentType (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaComplexContent*, ::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::Compiler::GetSchemaContentType)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* complexContent = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexContent")->byval_arg;
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "GetSchemaContentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType, complexContent, particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileAttributeGroup
// Il2CppName: CompileAttributeGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaAttributeGroup*)>(&System::Xml::Schema::Compiler::CompileAttributeGroup)> {
  static const MethodInfo* get() {
    static auto* attributeGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttributeGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileAttributeGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeGroup});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileLocalAttributes
// Il2CppName: CompileLocalAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaObjectCollection*, ::System::Xml::Schema::XmlSchemaAnyAttribute*, ::System::Xml::Schema::XmlSchemaDerivationMethod)>(&System::Xml::Schema::Compiler::CompileLocalAttributes)> {
  static const MethodInfo* get() {
    static auto* baseType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* derivedType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* attributes = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    static auto* anyAttribute = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnyAttribute")->byval_arg;
    static auto* derivedBy = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaDerivationMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileLocalAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseType, derivedType, attributes, anyAttribute, derivedBy});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CheckAtrributeGroupRestriction
// Il2CppName: CheckAtrributeGroupRestriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaAttributeGroup*, ::System::Xml::Schema::XmlSchemaAttributeGroup*)>(&System::Xml::Schema::Compiler::CheckAtrributeGroupRestriction)> {
  static const MethodInfo* get() {
    static auto* baseAttributeGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttributeGroup")->byval_arg;
    static auto* derivedAttributeGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttributeGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CheckAtrributeGroupRestriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseAttributeGroup, derivedAttributeGroup});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::IsProcessContentsRestricted
// Il2CppName: IsProcessContentsRestricted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaAnyAttribute*, ::System::Xml::Schema::XmlSchemaAnyAttribute*)>(&System::Xml::Schema::Compiler::IsProcessContentsRestricted)> {
  static const MethodInfo* get() {
    static auto* baseType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* derivedAttributeWildcard = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnyAttribute")->byval_arg;
    static auto* baseAttributeWildcard = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnyAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "IsProcessContentsRestricted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseType, derivedAttributeWildcard, baseAttributeWildcard});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileAnyAttributeUnion
// Il2CppName: CompileAnyAttributeUnion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaAnyAttribute* (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaAnyAttribute*, ::System::Xml::Schema::XmlSchemaAnyAttribute*)>(&System::Xml::Schema::Compiler::CompileAnyAttributeUnion)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnyAttribute")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnyAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileAnyAttributeUnion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileAnyAttributeIntersection
// Il2CppName: CompileAnyAttributeIntersection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaAnyAttribute* (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaAnyAttribute*, ::System::Xml::Schema::XmlSchemaAnyAttribute*)>(&System::Xml::Schema::Compiler::CompileAnyAttributeIntersection)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnyAttribute")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnyAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileAnyAttributeIntersection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileAttribute
// Il2CppName: CompileAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaAttribute*)>(&System::Xml::Schema::Compiler::CompileAttribute)> {
  static const MethodInfo* get() {
    static auto* xa = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xa});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::SetDefaultFixed
// Il2CppName: SetDefaultFixed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaAttribute*, ::System::Xml::Schema::SchemaAttDef*)>(&System::Xml::Schema::Compiler::SetDefaultFixed)> {
  static const MethodInfo* get() {
    static auto* xa = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttribute")->byval_arg;
    static auto* decl = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaAttDef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "SetDefaultFixed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xa, decl});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileIdentityConstraint
// Il2CppName: CompileIdentityConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaIdentityConstraint*)>(&System::Xml::Schema::Compiler::CompileIdentityConstraint)> {
  static const MethodInfo* get() {
    static auto* xi = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaIdentityConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileIdentityConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xi});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileElement
// Il2CppName: CompileElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaElement*)>(&System::Xml::Schema::Compiler::CompileElement)> {
  static const MethodInfo* get() {
    static auto* xe = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xe});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileComplexContent
// Il2CppName: CompileComplexContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::ContentValidator* (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaComplexType*)>(&System::Xml::Schema::Compiler::CompileComplexContent)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileComplexContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::BuildParticleContentModel
// Il2CppName: BuildParticleContentModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::ParticleContentValidator*, ::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::Compiler::BuildParticleContentModel)> {
  static const MethodInfo* get() {
    static auto* contentValidator = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ParticleContentValidator")->byval_arg;
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "BuildParticleContentModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contentValidator, particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileParticleElements
// Il2CppName: CompileParticleElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaComplexType*, ::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::Compiler::CompileParticleElements)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileParticleElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType, particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileParticleElements
// Il2CppName: CompileParticleElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaParticle*)>(&System::Xml::Schema::Compiler::CompileParticleElements)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileParticleElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CompileComplexTypeElements
// Il2CppName: CompileComplexTypeElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaComplexType*)>(&System::Xml::Schema::Compiler::CompileComplexTypeElements)> {
  static const MethodInfo* get() {
    static auto* complexType = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CompileComplexTypeElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::GetSimpleType
// Il2CppName: GetSimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaSimpleType* (System::Xml::Schema::Compiler::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::Compiler::GetSimpleType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "GetSimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::GetComplexType
// Il2CppName: GetComplexType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaComplexType* (System::Xml::Schema::Compiler::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::Compiler::GetComplexType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "GetComplexType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::GetAnySchemaType
// Il2CppName: GetAnySchemaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaType* (System::Xml::Schema::Compiler::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::Compiler::GetAnySchemaType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "GetAnySchemaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::CopyPosition
// Il2CppName: CopyPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::XmlSchemaAnnotated*, ::System::Xml::Schema::XmlSchemaAnnotated*, bool)>(&System::Xml::Schema::Compiler::CopyPosition)> {
  static const MethodInfo* get() {
    static auto* to = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnnotated")->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnnotated")->byval_arg;
    static auto* copyParent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "CopyPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{to, from, copyParent});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::Compiler::IsFixedEqual
// Il2CppName: IsFixedEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::Compiler::*)(::System::Xml::Schema::SchemaDeclBase*, ::System::Xml::Schema::SchemaDeclBase*)>(&System::Xml::Schema::Compiler::IsFixedEqual)> {
  static const MethodInfo* get() {
    static auto* baseDecl = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaDeclBase")->byval_arg;
    static auto* derivedDecl = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaDeclBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::Compiler*), "IsFixedEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseDecl, derivedDecl});
  }
};
