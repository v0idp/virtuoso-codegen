// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.FacetsChecker
#include "System/Xml/Schema/FacetsChecker.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Xml.Schema.RestrictionFlags
#include "System/Xml/Schema/RestrictionFlags.hpp"
// Including type: System.Xml.Schema.XmlTypeCode
#include "System/Xml/Schema/XmlTypeCode.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaFacet
  class XmlSchemaFacet;
  // Forward declaring type: DatatypeImplementation
  class DatatypeImplementation;
  // Forward declaring type: RestrictionFacets
  class RestrictionFacets;
  // Forward declaring type: XmlSchemaDatatype
  class XmlSchemaDatatype;
  // Forward declaring type: XmlSchemaPatternFacet
  class XmlSchemaPatternFacet;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: IXmlNamespaceResolver
  class IXmlNamespaceResolver;
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::FacetsChecker::FacetsCompiler, "System.Xml.Schema", "FacetsChecker/FacetsCompiler");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x48
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Xml.Schema.FacetsChecker/System.Xml.Schema.FacetsCompiler
  // [TokenAttribute] Offset: FFFFFFFF
  struct FacetsChecker::FacetsCompiler/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::System::Xml::Schema::FacetsChecker::FacetsCompiler::Map
    struct Map;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Xml.Schema.FacetsChecker/System.Xml.Schema.FacetsCompiler/System.Xml.Schema.Map
    // [TokenAttribute] Offset: FFFFFFFF
    struct Map/*, public ::System::ValueType*/ {
      public:
      public:
      // System.Char match
      // Size: 0x2
      // Offset: 0x0
      ::Il2CppChar match;
      // Field size check
      static_assert(sizeof(::Il2CppChar) == 0x2);
      // Padding between fields: match and: replacement
      char __padding0[0x6] = {};
      // System.String replacement
      // Size: 0x8
      // Offset: 0x8
      ::StringW replacement;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      public:
      // Creating value type constructor for type: Map
      constexpr Map(::Il2CppChar match_ = {}, ::StringW replacement_ = {}) noexcept : match{match_}, replacement{replacement_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: System.Char match
      [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn_match();
      // Get instance field reference: System.String replacement
      [[deprecated("Use field access instead!")]] ::StringW& dyn_replacement();
      // System.Void .ctor(System.Char m, System.String r)
      // Offset: 0xC1E79C
      // ABORTED: conflicts with another method.  Map(::Il2CppChar m, ::StringW r);
    }; // System.Xml.Schema.FacetsChecker/System.Xml.Schema.FacetsCompiler/System.Xml.Schema.Map
    #pragma pack(pop)
    static check_size<sizeof(FacetsChecker::FacetsCompiler::Map), 8 + sizeof(::StringW)> __System_Xml_Schema_FacetsChecker_FacetsCompiler_MapSizeCheck;
    static_assert(sizeof(FacetsChecker::FacetsCompiler::Map) == 0x10);
    public:
    // private System.Xml.Schema.DatatypeImplementation datatype
    // Size: 0x8
    // Offset: 0x0
    ::System::Xml::Schema::DatatypeImplementation* datatype;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::DatatypeImplementation*) == 0x8);
    // private System.Xml.Schema.RestrictionFacets derivedRestriction
    // Size: 0x8
    // Offset: 0x8
    ::System::Xml::Schema::RestrictionFacets* derivedRestriction;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::RestrictionFacets*) == 0x8);
    // private System.Xml.Schema.RestrictionFlags baseFlags
    // Size: 0x4
    // Offset: 0x10
    ::System::Xml::Schema::RestrictionFlags baseFlags;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::RestrictionFlags) == 0x4);
    // private System.Xml.Schema.RestrictionFlags baseFixedFlags
    // Size: 0x4
    // Offset: 0x14
    ::System::Xml::Schema::RestrictionFlags baseFixedFlags;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::RestrictionFlags) == 0x4);
    // private System.Xml.Schema.RestrictionFlags validRestrictionFlags
    // Size: 0x4
    // Offset: 0x18
    ::System::Xml::Schema::RestrictionFlags validRestrictionFlags;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::RestrictionFlags) == 0x4);
    // Padding between fields: validRestrictionFlags and: nonNegativeInt
    char __padding4[0x4] = {};
    // private System.Xml.Schema.XmlSchemaDatatype nonNegativeInt
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::Schema::XmlSchemaDatatype* nonNegativeInt;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaDatatype*) == 0x8);
    // private System.Xml.Schema.XmlSchemaDatatype builtInType
    // Size: 0x8
    // Offset: 0x28
    ::System::Xml::Schema::XmlSchemaDatatype* builtInType;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaDatatype*) == 0x8);
    // private System.Xml.Schema.XmlTypeCode builtInEnum
    // Size: 0x4
    // Offset: 0x30
    ::System::Xml::Schema::XmlTypeCode builtInEnum;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlTypeCode) == 0x4);
    // private System.Boolean firstPattern
    // Size: 0x1
    // Offset: 0x34
    bool firstPattern;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: firstPattern and: regStr
    char __padding8[0x3] = {};
    // private System.Text.StringBuilder regStr
    // Size: 0x8
    // Offset: 0x38
    ::System::Text::StringBuilder* regStr;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // private System.Xml.Schema.XmlSchemaPatternFacet pattern_facet
    // Size: 0x8
    // Offset: 0x40
    ::System::Xml::Schema::XmlSchemaPatternFacet* pattern_facet;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaPatternFacet*) == 0x8);
    public:
    // Creating value type constructor for type: FacetsCompiler
    constexpr FacetsCompiler(::System::Xml::Schema::DatatypeImplementation* datatype_ = {}, ::System::Xml::Schema::RestrictionFacets* derivedRestriction_ = {}, ::System::Xml::Schema::RestrictionFlags baseFlags_ = {}, ::System::Xml::Schema::RestrictionFlags baseFixedFlags_ = {}, ::System::Xml::Schema::RestrictionFlags validRestrictionFlags_ = {}, ::System::Xml::Schema::XmlSchemaDatatype* nonNegativeInt_ = {}, ::System::Xml::Schema::XmlSchemaDatatype* builtInType_ = {}, ::System::Xml::Schema::XmlTypeCode builtInEnum_ = {}, bool firstPattern_ = {}, ::System::Text::StringBuilder* regStr_ = {}, ::System::Xml::Schema::XmlSchemaPatternFacet* pattern_facet_ = {}) noexcept : datatype{datatype_}, derivedRestriction{derivedRestriction_}, baseFlags{baseFlags_}, baseFixedFlags{baseFixedFlags_}, validRestrictionFlags{validRestrictionFlags_}, nonNegativeInt{nonNegativeInt_}, builtInType{builtInType_}, builtInEnum{builtInEnum_}, firstPattern{firstPattern_}, regStr{regStr_}, pattern_facet{pattern_facet_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static private readonly System.Xml.Schema.FacetsChecker/System.Xml.Schema.FacetsCompiler/System.Xml.Schema.Map[] c_map
    static ::ArrayW<::System::Xml::Schema::FacetsChecker::FacetsCompiler::Map> _get_c_map();
    // Set static field: static private readonly System.Xml.Schema.FacetsChecker/System.Xml.Schema.FacetsCompiler/System.Xml.Schema.Map[] c_map
    static void _set_c_map(::ArrayW<::System::Xml::Schema::FacetsChecker::FacetsCompiler::Map> value);
    // Get instance field reference: private System.Xml.Schema.DatatypeImplementation datatype
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::DatatypeImplementation*& dyn_datatype();
    // Get instance field reference: private System.Xml.Schema.RestrictionFacets derivedRestriction
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::RestrictionFacets*& dyn_derivedRestriction();
    // Get instance field reference: private System.Xml.Schema.RestrictionFlags baseFlags
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::RestrictionFlags& dyn_baseFlags();
    // Get instance field reference: private System.Xml.Schema.RestrictionFlags baseFixedFlags
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::RestrictionFlags& dyn_baseFixedFlags();
    // Get instance field reference: private System.Xml.Schema.RestrictionFlags validRestrictionFlags
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::RestrictionFlags& dyn_validRestrictionFlags();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaDatatype nonNegativeInt
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaDatatype*& dyn_nonNegativeInt();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaDatatype builtInType
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaDatatype*& dyn_builtInType();
    // Get instance field reference: private System.Xml.Schema.XmlTypeCode builtInEnum
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlTypeCode& dyn_builtInEnum();
    // Get instance field reference: private System.Boolean firstPattern
    [[deprecated("Use field access instead!")]] bool& dyn_firstPattern();
    // Get instance field reference: private System.Text.StringBuilder regStr
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn_regStr();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaPatternFacet pattern_facet
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaPatternFacet*& dyn_pattern_facet();
    // public System.Void .ctor(System.Xml.Schema.DatatypeImplementation baseDatatype, System.Xml.Schema.RestrictionFacets restriction)
    // Offset: 0xC1B58C
    FacetsCompiler(::System::Xml::Schema::DatatypeImplementation* baseDatatype, ::System::Xml::Schema::RestrictionFacets* restriction);
    // static private System.Void .cctor()
    // Offset: 0xC1E5DC
    static void _cctor();
    // System.Void CompileLengthFacet(System.Xml.Schema.XmlSchemaFacet facet)
    // Offset: 0xC1B7A8
    void CompileLengthFacet(::System::Xml::Schema::XmlSchemaFacet* facet);
    // System.Void CompileMinLengthFacet(System.Xml.Schema.XmlSchemaFacet facet)
    // Offset: 0xC1BD98
    void CompileMinLengthFacet(::System::Xml::Schema::XmlSchemaFacet* facet);
    // System.Void CompileMaxLengthFacet(System.Xml.Schema.XmlSchemaFacet facet)
    // Offset: 0xC1C08C
    void CompileMaxLengthFacet(::System::Xml::Schema::XmlSchemaFacet* facet);
    // System.Void CompilePatternFacet(System.Xml.Schema.XmlSchemaPatternFacet facet)
    // Offset: 0xC1C380
    void CompilePatternFacet(::System::Xml::Schema::XmlSchemaPatternFacet* facet);
    // System.Void CompileEnumerationFacet(System.Xml.Schema.XmlSchemaFacet facet, System.Xml.IXmlNamespaceResolver nsmgr, System.Xml.XmlNameTable nameTable)
    // Offset: 0xC1C4B4
    void CompileEnumerationFacet(::System::Xml::Schema::XmlSchemaFacet* facet, ::System::Xml::IXmlNamespaceResolver* nsmgr, ::System::Xml::XmlNameTable* nameTable);
    // System.Void CompileWhitespaceFacet(System.Xml.Schema.XmlSchemaFacet facet)
    // Offset: 0xC1C5C8
    void CompileWhitespaceFacet(::System::Xml::Schema::XmlSchemaFacet* facet);
    // System.Void CompileMaxInclusiveFacet(System.Xml.Schema.XmlSchemaFacet facet)
    // Offset: 0xC1C900
    void CompileMaxInclusiveFacet(::System::Xml::Schema::XmlSchemaFacet* facet);
    // System.Void CompileMaxExclusiveFacet(System.Xml.Schema.XmlSchemaFacet facet)
    // Offset: 0xC1CF1C
    void CompileMaxExclusiveFacet(::System::Xml::Schema::XmlSchemaFacet* facet);
    // System.Void CompileMinInclusiveFacet(System.Xml.Schema.XmlSchemaFacet facet)
    // Offset: 0xC1D0A4
    void CompileMinInclusiveFacet(::System::Xml::Schema::XmlSchemaFacet* facet);
    // System.Void CompileMinExclusiveFacet(System.Xml.Schema.XmlSchemaFacet facet)
    // Offset: 0xC1D22C
    void CompileMinExclusiveFacet(::System::Xml::Schema::XmlSchemaFacet* facet);
    // System.Void CompileTotalDigitsFacet(System.Xml.Schema.XmlSchemaFacet facet)
    // Offset: 0xC1D3B4
    void CompileTotalDigitsFacet(::System::Xml::Schema::XmlSchemaFacet* facet);
    // System.Void CompileFractionDigitsFacet(System.Xml.Schema.XmlSchemaFacet facet)
    // Offset: 0xC1D6B4
    void CompileFractionDigitsFacet(::System::Xml::Schema::XmlSchemaFacet* facet);
    // System.Void FinishFacetCompile()
    // Offset: 0xC1D938
    void FinishFacetCompile();
    // private System.Void CheckValue(System.Object value, System.Xml.Schema.XmlSchemaFacet facet)
    // Offset: 0xC1CA88
    void CheckValue(::Il2CppObject* value, ::System::Xml::Schema::XmlSchemaFacet* facet);
    // System.Void CompileFacetCombinations()
    // Offset: 0xC1DF50
    void CompileFacetCombinations();
    // private System.Void CopyFacetsFromBaseType()
    // Offset: 0xC1E2F4
    void CopyFacetsFromBaseType();
    // private System.Object ParseFacetValue(System.Xml.Schema.XmlSchemaDatatype datatype, System.Xml.Schema.XmlSchemaFacet facet, System.String code, System.Xml.IXmlNamespaceResolver nsmgr, System.Xml.XmlNameTable nameTable)
    // Offset: 0xC1BBD8
    ::Il2CppObject* ParseFacetValue(::System::Xml::Schema::XmlSchemaDatatype* datatype, ::System::Xml::Schema::XmlSchemaFacet* facet, ::StringW code, ::System::Xml::IXmlNamespaceResolver* nsmgr, ::System::Xml::XmlNameTable* nameTable);
    // static private System.String Preprocess(System.String pattern)
    // Offset: 0xC1DCC0
    static ::StringW Preprocess(::StringW pattern);
    // private System.Void CheckProhibitedFlag(System.Xml.Schema.XmlSchemaFacet facet, System.Xml.Schema.RestrictionFlags flag, System.String errorCode)
    // Offset: 0xC1BAD8
    void CheckProhibitedFlag(::System::Xml::Schema::XmlSchemaFacet* facet, ::System::Xml::Schema::RestrictionFlags flag, ::StringW errorCode);
    // private System.Void CheckDupFlag(System.Xml.Schema.XmlSchemaFacet facet, System.Xml.Schema.RestrictionFlags flag, System.String errorCode)
    // Offset: 0xC1BB5C
    void CheckDupFlag(::System::Xml::Schema::XmlSchemaFacet* facet, ::System::Xml::Schema::RestrictionFlags flag, ::StringW errorCode);
    // private System.Void SetFlag(System.Xml.Schema.XmlSchemaFacet facet, System.Xml.Schema.RestrictionFlags flag)
    // Offset: 0xC1BD30
    void SetFlag(::System::Xml::Schema::XmlSchemaFacet* facet, ::System::Xml::Schema::RestrictionFlags flag);
    // private System.Void SetFlag(System.Xml.Schema.RestrictionFlags flag)
    // Offset: 0xC1E594
    void SetFlag(::System::Xml::Schema::RestrictionFlags flag);
  }; // System.Xml.Schema.FacetsChecker/System.Xml.Schema.FacetsCompiler
  #pragma pack(pop)
  static check_size<sizeof(FacetsChecker::FacetsCompiler), 64 + sizeof(::System::Xml::Schema::XmlSchemaPatternFacet*)> __System_Xml_Schema_FacetsChecker_FacetsCompilerSizeCheck;
  static_assert(sizeof(FacetsChecker::FacetsCompiler) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::FacetsChecker::FacetsCompiler::Map, "System.Xml.Schema", "FacetsChecker/FacetsCompiler/Map");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::FacetsCompiler
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileLengthFacet
// Il2CppName: CompileLengthFacet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)(::System::Xml::Schema::XmlSchemaFacet*)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileLengthFacet)> {
  static const MethodInfo* get() {
    static auto* facet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaFacet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "CompileLengthFacet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facet});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileMinLengthFacet
// Il2CppName: CompileMinLengthFacet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)(::System::Xml::Schema::XmlSchemaFacet*)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileMinLengthFacet)> {
  static const MethodInfo* get() {
    static auto* facet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaFacet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "CompileMinLengthFacet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facet});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileMaxLengthFacet
// Il2CppName: CompileMaxLengthFacet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)(::System::Xml::Schema::XmlSchemaFacet*)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileMaxLengthFacet)> {
  static const MethodInfo* get() {
    static auto* facet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaFacet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "CompileMaxLengthFacet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facet});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::CompilePatternFacet
// Il2CppName: CompilePatternFacet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)(::System::Xml::Schema::XmlSchemaPatternFacet*)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::CompilePatternFacet)> {
  static const MethodInfo* get() {
    static auto* facet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaPatternFacet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "CompilePatternFacet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facet});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileEnumerationFacet
// Il2CppName: CompileEnumerationFacet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)(::System::Xml::Schema::XmlSchemaFacet*, ::System::Xml::IXmlNamespaceResolver*, ::System::Xml::XmlNameTable*)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileEnumerationFacet)> {
  static const MethodInfo* get() {
    static auto* facet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaFacet")->byval_arg;
    static auto* nsmgr = &::il2cpp_utils::GetClassFromName("System.Xml", "IXmlNamespaceResolver")->byval_arg;
    static auto* nameTable = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "CompileEnumerationFacet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facet, nsmgr, nameTable});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileWhitespaceFacet
// Il2CppName: CompileWhitespaceFacet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)(::System::Xml::Schema::XmlSchemaFacet*)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileWhitespaceFacet)> {
  static const MethodInfo* get() {
    static auto* facet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaFacet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "CompileWhitespaceFacet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facet});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileMaxInclusiveFacet
// Il2CppName: CompileMaxInclusiveFacet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)(::System::Xml::Schema::XmlSchemaFacet*)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileMaxInclusiveFacet)> {
  static const MethodInfo* get() {
    static auto* facet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaFacet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "CompileMaxInclusiveFacet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facet});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileMaxExclusiveFacet
// Il2CppName: CompileMaxExclusiveFacet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)(::System::Xml::Schema::XmlSchemaFacet*)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileMaxExclusiveFacet)> {
  static const MethodInfo* get() {
    static auto* facet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaFacet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "CompileMaxExclusiveFacet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facet});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileMinInclusiveFacet
// Il2CppName: CompileMinInclusiveFacet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)(::System::Xml::Schema::XmlSchemaFacet*)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileMinInclusiveFacet)> {
  static const MethodInfo* get() {
    static auto* facet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaFacet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "CompileMinInclusiveFacet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facet});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileMinExclusiveFacet
// Il2CppName: CompileMinExclusiveFacet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)(::System::Xml::Schema::XmlSchemaFacet*)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileMinExclusiveFacet)> {
  static const MethodInfo* get() {
    static auto* facet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaFacet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "CompileMinExclusiveFacet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facet});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileTotalDigitsFacet
// Il2CppName: CompileTotalDigitsFacet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)(::System::Xml::Schema::XmlSchemaFacet*)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileTotalDigitsFacet)> {
  static const MethodInfo* get() {
    static auto* facet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaFacet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "CompileTotalDigitsFacet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facet});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileFractionDigitsFacet
// Il2CppName: CompileFractionDigitsFacet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)(::System::Xml::Schema::XmlSchemaFacet*)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileFractionDigitsFacet)> {
  static const MethodInfo* get() {
    static auto* facet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaFacet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "CompileFractionDigitsFacet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facet});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::FinishFacetCompile
// Il2CppName: FinishFacetCompile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)()>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::FinishFacetCompile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "FinishFacetCompile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::CheckValue
// Il2CppName: CheckValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)(::Il2CppObject*, ::System::Xml::Schema::XmlSchemaFacet*)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::CheckValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* facet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaFacet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "CheckValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, facet});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileFacetCombinations
// Il2CppName: CompileFacetCombinations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)()>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::CompileFacetCombinations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "CompileFacetCombinations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::CopyFacetsFromBaseType
// Il2CppName: CopyFacetsFromBaseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)()>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::CopyFacetsFromBaseType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "CopyFacetsFromBaseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::ParseFacetValue
// Il2CppName: ParseFacetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)(::System::Xml::Schema::XmlSchemaDatatype*, ::System::Xml::Schema::XmlSchemaFacet*, ::StringW, ::System::Xml::IXmlNamespaceResolver*, ::System::Xml::XmlNameTable*)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::ParseFacetValue)> {
  static const MethodInfo* get() {
    static auto* datatype = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaDatatype")->byval_arg;
    static auto* facet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaFacet")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* nsmgr = &::il2cpp_utils::GetClassFromName("System.Xml", "IXmlNamespaceResolver")->byval_arg;
    static auto* nameTable = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "ParseFacetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{datatype, facet, code, nsmgr, nameTable});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::Preprocess
// Il2CppName: Preprocess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::Preprocess)> {
  static const MethodInfo* get() {
    static auto* pattern = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "Preprocess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pattern});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::CheckProhibitedFlag
// Il2CppName: CheckProhibitedFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)(::System::Xml::Schema::XmlSchemaFacet*, ::System::Xml::Schema::RestrictionFlags, ::StringW)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::CheckProhibitedFlag)> {
  static const MethodInfo* get() {
    static auto* facet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaFacet")->byval_arg;
    static auto* flag = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "RestrictionFlags")->byval_arg;
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "CheckProhibitedFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facet, flag, errorCode});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::CheckDupFlag
// Il2CppName: CheckDupFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)(::System::Xml::Schema::XmlSchemaFacet*, ::System::Xml::Schema::RestrictionFlags, ::StringW)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::CheckDupFlag)> {
  static const MethodInfo* get() {
    static auto* facet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaFacet")->byval_arg;
    static auto* flag = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "RestrictionFlags")->byval_arg;
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "CheckDupFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facet, flag, errorCode});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::SetFlag
// Il2CppName: SetFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)(::System::Xml::Schema::XmlSchemaFacet*, ::System::Xml::Schema::RestrictionFlags)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::SetFlag)> {
  static const MethodInfo* get() {
    static auto* facet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaFacet")->byval_arg;
    static auto* flag = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "RestrictionFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "SetFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facet, flag});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::FacetsChecker::FacetsCompiler::SetFlag
// Il2CppName: SetFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::FacetsChecker::FacetsCompiler::*)(::System::Xml::Schema::RestrictionFlags)>(&System::Xml::Schema::FacetsChecker::FacetsCompiler::SetFlag)> {
  static const MethodInfo* get() {
    static auto* flag = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "RestrictionFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::FacetsChecker::FacetsCompiler), "SetFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flag});
  }
};
