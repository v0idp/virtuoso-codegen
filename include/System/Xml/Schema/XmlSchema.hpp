// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlSchemaObject
#include "System/Xml/Schema/XmlSchemaObject.hpp"
// Including type: System.Xml.Schema.XmlSchemaForm
#include "System/Xml/Schema/XmlSchemaForm.hpp"
// Including type: System.Xml.Schema.XmlSchemaDerivationMethod
#include "System/Xml/Schema/XmlSchemaDerivationMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaObjectCollection
  class XmlSchemaObjectCollection;
  // Forward declaring type: XmlSchemaObjectTable
  class XmlSchemaObjectTable;
  // Forward declaring type: ValidationEventHandler
  class ValidationEventHandler;
  // Forward declaring type: XmlSchemaCollection
  class XmlSchemaCollection;
  // Forward declaring type: SchemaInfo
  class SchemaInfo;
  // Forward declaring type: XmlSchemaCompilationSettings
  class XmlSchemaCompilationSettings;
  // Forward declaring type: XmlSchemaAnnotation
  class XmlSchemaAnnotation;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlAttribute
  class XmlAttribute;
  // Forward declaring type: XmlDocument
  class XmlDocument;
  // Forward declaring type: XmlReader
  class XmlReader;
  // Forward declaring type: XmlResolver
  class XmlResolver;
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: IList
  class IList;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchema
  class XmlSchema;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchema);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchema*, "System.Xml.Schema", "XmlSchema");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0xF0
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchema
  // [TokenAttribute] Offset: FFFFFFFF
  // [XmlRootAttribute] Offset: 6A47E0
  class XmlSchema : public ::System::Xml::Schema::XmlSchemaObject {
    public:
    // Writing base type padding for base size: 0x31 to desired offset: 0x34
    char ___base_padding[0x3] = {};
    public:
    // private System.Xml.Schema.XmlSchemaForm attributeFormDefault
    // Size: 0x4
    // Offset: 0x34
    ::System::Xml::Schema::XmlSchemaForm attributeFormDefault;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaForm) == 0x4);
    // private System.Xml.Schema.XmlSchemaForm elementFormDefault
    // Size: 0x4
    // Offset: 0x38
    ::System::Xml::Schema::XmlSchemaForm elementFormDefault;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaForm) == 0x4);
    // private System.Xml.Schema.XmlSchemaDerivationMethod blockDefault
    // Size: 0x4
    // Offset: 0x3C
    ::System::Xml::Schema::XmlSchemaDerivationMethod blockDefault;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaDerivationMethod) == 0x4);
    // private System.Xml.Schema.XmlSchemaDerivationMethod finalDefault
    // Size: 0x4
    // Offset: 0x40
    ::System::Xml::Schema::XmlSchemaDerivationMethod finalDefault;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaDerivationMethod) == 0x4);
    // Padding between fields: finalDefault and: targetNs
    char __padding3[0x4] = {};
    // private System.String targetNs
    // Size: 0x8
    // Offset: 0x48
    ::StringW targetNs;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String version
    // Size: 0x8
    // Offset: 0x50
    ::StringW version;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectCollection includes
    // Size: 0x8
    // Offset: 0x58
    ::System::Xml::Schema::XmlSchemaObjectCollection* includes;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectCollection*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectCollection items
    // Size: 0x8
    // Offset: 0x60
    ::System::Xml::Schema::XmlSchemaObjectCollection* items;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectCollection*) == 0x8);
    // private System.String id
    // Size: 0x8
    // Offset: 0x68
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.XmlAttribute[] moreAttributes
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::System::Xml::XmlAttribute*> moreAttributes;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::XmlAttribute*>) == 0x8);
    // private System.Boolean isCompiled
    // Size: 0x1
    // Offset: 0x78
    bool isCompiled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isCompiledBySet
    // Size: 0x1
    // Offset: 0x79
    bool isCompiledBySet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isPreprocessed
    // Size: 0x1
    // Offset: 0x7A
    bool isPreprocessed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isRedefined
    // Size: 0x1
    // Offset: 0x7B
    bool isRedefined;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 errorCount
    // Size: 0x4
    // Offset: 0x7C
    int errorCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Xml.Schema.XmlSchemaObjectTable attributes
    // Size: 0x8
    // Offset: 0x80
    ::System::Xml::Schema::XmlSchemaObjectTable* attributes;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectTable attributeGroups
    // Size: 0x8
    // Offset: 0x88
    ::System::Xml::Schema::XmlSchemaObjectTable* attributeGroups;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectTable elements
    // Size: 0x8
    // Offset: 0x90
    ::System::Xml::Schema::XmlSchemaObjectTable* elements;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectTable types
    // Size: 0x8
    // Offset: 0x98
    ::System::Xml::Schema::XmlSchemaObjectTable* types;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectTable groups
    // Size: 0x8
    // Offset: 0xA0
    ::System::Xml::Schema::XmlSchemaObjectTable* groups;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectTable notations
    // Size: 0x8
    // Offset: 0xA8
    ::System::Xml::Schema::XmlSchemaObjectTable* notations;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectTable identityConstraints
    // Size: 0x8
    // Offset: 0xB0
    ::System::Xml::Schema::XmlSchemaObjectTable* identityConstraints;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectTable*) == 0x8);
    // private System.Collections.ArrayList importedSchemas
    // Size: 0x8
    // Offset: 0xB8
    ::System::Collections::ArrayList* importedSchemas;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Collections.ArrayList importedNamespaces
    // Size: 0x8
    // Offset: 0xC0
    ::System::Collections::ArrayList* importedNamespaces;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Int32 schemaId
    // Size: 0x4
    // Offset: 0xC8
    int schemaId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: schemaId and: baseUri
    char __padding24[0x4] = {};
    // private System.Uri baseUri
    // Size: 0x8
    // Offset: 0xD0
    ::System::Uri* baseUri;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // private System.Boolean isChameleon
    // Size: 0x1
    // Offset: 0xD8
    bool isChameleon;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isChameleon and: ids
    char __padding26[0x7] = {};
    // private System.Collections.Hashtable ids
    // Size: 0x8
    // Offset: 0xE0
    ::System::Collections::Hashtable* ids;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Xml.XmlDocument document
    // Size: 0x8
    // Offset: 0xE8
    ::System::Xml::XmlDocument* document;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlDocument*) == 0x8);
    public:
    // Get static field: static private System.Int32 globalIdCounter
    static int _get_globalIdCounter();
    // Set static field: static private System.Int32 globalIdCounter
    static void _set_globalIdCounter(int value);
    // Get instance field reference: private System.Xml.Schema.XmlSchemaForm attributeFormDefault
    [[deprecated]] ::System::Xml::Schema::XmlSchemaForm& dyn_attributeFormDefault();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaForm elementFormDefault
    [[deprecated]] ::System::Xml::Schema::XmlSchemaForm& dyn_elementFormDefault();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaDerivationMethod blockDefault
    [[deprecated]] ::System::Xml::Schema::XmlSchemaDerivationMethod& dyn_blockDefault();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaDerivationMethod finalDefault
    [[deprecated]] ::System::Xml::Schema::XmlSchemaDerivationMethod& dyn_finalDefault();
    // Get instance field reference: private System.String targetNs
    [[deprecated]] ::StringW& dyn_targetNs();
    // Get instance field reference: private System.String version
    [[deprecated]] ::StringW& dyn_version();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectCollection includes
    [[deprecated]] ::System::Xml::Schema::XmlSchemaObjectCollection*& dyn_includes();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectCollection items
    [[deprecated]] ::System::Xml::Schema::XmlSchemaObjectCollection*& dyn_items();
    // Get instance field reference: private System.String id
    [[deprecated]] ::StringW& dyn_id();
    // Get instance field reference: private System.Xml.XmlAttribute[] moreAttributes
    [[deprecated]] ::ArrayW<::System::Xml::XmlAttribute*>& dyn_moreAttributes();
    // Get instance field reference: private System.Boolean isCompiled
    [[deprecated]] bool& dyn_isCompiled();
    // Get instance field reference: private System.Boolean isCompiledBySet
    [[deprecated]] bool& dyn_isCompiledBySet();
    // Get instance field reference: private System.Boolean isPreprocessed
    [[deprecated]] bool& dyn_isPreprocessed();
    // Get instance field reference: private System.Boolean isRedefined
    [[deprecated]] bool& dyn_isRedefined();
    // Get instance field reference: private System.Int32 errorCount
    [[deprecated]] int& dyn_errorCount();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable attributes
    [[deprecated]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_attributes();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable attributeGroups
    [[deprecated]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_attributeGroups();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable elements
    [[deprecated]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_elements();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable types
    [[deprecated]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_types();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable groups
    [[deprecated]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_groups();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable notations
    [[deprecated]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_notations();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectTable identityConstraints
    [[deprecated]] ::System::Xml::Schema::XmlSchemaObjectTable*& dyn_identityConstraints();
    // Get instance field reference: private System.Collections.ArrayList importedSchemas
    [[deprecated]] ::System::Collections::ArrayList*& dyn_importedSchemas();
    // Get instance field reference: private System.Collections.ArrayList importedNamespaces
    [[deprecated]] ::System::Collections::ArrayList*& dyn_importedNamespaces();
    // Get instance field reference: private System.Int32 schemaId
    [[deprecated]] int& dyn_schemaId();
    // Get instance field reference: private System.Uri baseUri
    [[deprecated]] ::System::Uri*& dyn_baseUri();
    // Get instance field reference: private System.Boolean isChameleon
    [[deprecated]] bool& dyn_isChameleon();
    // Get instance field reference: private System.Collections.Hashtable ids
    [[deprecated]] ::System::Collections::Hashtable*& dyn_ids();
    // Get instance field reference: private System.Xml.XmlDocument document
    [[deprecated]] ::System::Xml::XmlDocument*& dyn_document();
    // public System.Xml.Schema.XmlSchemaForm get_AttributeFormDefault()
    // Offset: 0x110736C
    ::System::Xml::Schema::XmlSchemaForm get_AttributeFormDefault();
    // public System.Void set_AttributeFormDefault(System.Xml.Schema.XmlSchemaForm value)
    // Offset: 0x1107374
    void set_AttributeFormDefault(::System::Xml::Schema::XmlSchemaForm value);
    // public System.Xml.Schema.XmlSchemaDerivationMethod get_BlockDefault()
    // Offset: 0x110737C
    ::System::Xml::Schema::XmlSchemaDerivationMethod get_BlockDefault();
    // public System.Void set_BlockDefault(System.Xml.Schema.XmlSchemaDerivationMethod value)
    // Offset: 0x1107384
    void set_BlockDefault(::System::Xml::Schema::XmlSchemaDerivationMethod value);
    // public System.Xml.Schema.XmlSchemaDerivationMethod get_FinalDefault()
    // Offset: 0x110738C
    ::System::Xml::Schema::XmlSchemaDerivationMethod get_FinalDefault();
    // public System.Void set_FinalDefault(System.Xml.Schema.XmlSchemaDerivationMethod value)
    // Offset: 0x1107394
    void set_FinalDefault(::System::Xml::Schema::XmlSchemaDerivationMethod value);
    // public System.Xml.Schema.XmlSchemaForm get_ElementFormDefault()
    // Offset: 0x110739C
    ::System::Xml::Schema::XmlSchemaForm get_ElementFormDefault();
    // public System.Void set_ElementFormDefault(System.Xml.Schema.XmlSchemaForm value)
    // Offset: 0x11073A4
    void set_ElementFormDefault(::System::Xml::Schema::XmlSchemaForm value);
    // public System.String get_TargetNamespace()
    // Offset: 0x11073AC
    ::StringW get_TargetNamespace();
    // public System.Void set_TargetNamespace(System.String value)
    // Offset: 0x11073B4
    void set_TargetNamespace(::StringW value);
    // public System.String get_Version()
    // Offset: 0x11073BC
    ::StringW get_Version();
    // public System.Void set_Version(System.String value)
    // Offset: 0x11073C4
    void set_Version(::StringW value);
    // public System.Xml.Schema.XmlSchemaObjectCollection get_Includes()
    // Offset: 0x11073CC
    ::System::Xml::Schema::XmlSchemaObjectCollection* get_Includes();
    // public System.Xml.Schema.XmlSchemaObjectCollection get_Items()
    // Offset: 0x11073D4
    ::System::Xml::Schema::XmlSchemaObjectCollection* get_Items();
    // System.Boolean get_IsCompiledBySet()
    // Offset: 0x11073DC
    bool get_IsCompiledBySet();
    // System.Void set_IsCompiledBySet(System.Boolean value)
    // Offset: 0x11073E4
    void set_IsCompiledBySet(bool value);
    // System.Boolean get_IsPreprocessed()
    // Offset: 0x11073F0
    bool get_IsPreprocessed();
    // System.Void set_IsPreprocessed(System.Boolean value)
    // Offset: 0x11073F8
    void set_IsPreprocessed(bool value);
    // System.Boolean get_IsRedefined()
    // Offset: 0x1107404
    bool get_IsRedefined();
    // System.Void set_IsRedefined(System.Boolean value)
    // Offset: 0x110740C
    void set_IsRedefined(bool value);
    // public System.Xml.Schema.XmlSchemaObjectTable get_Attributes()
    // Offset: 0x1107418
    ::System::Xml::Schema::XmlSchemaObjectTable* get_Attributes();
    // public System.Xml.Schema.XmlSchemaObjectTable get_AttributeGroups()
    // Offset: 0x110747C
    ::System::Xml::Schema::XmlSchemaObjectTable* get_AttributeGroups();
    // public System.Xml.Schema.XmlSchemaObjectTable get_SchemaTypes()
    // Offset: 0x11074E0
    ::System::Xml::Schema::XmlSchemaObjectTable* get_SchemaTypes();
    // public System.Xml.Schema.XmlSchemaObjectTable get_Elements()
    // Offset: 0x1107544
    ::System::Xml::Schema::XmlSchemaObjectTable* get_Elements();
    // public System.String get_Id()
    // Offset: 0x11075A8
    ::StringW get_Id();
    // public System.Void set_Id(System.String value)
    // Offset: 0x11075B0
    void set_Id(::StringW value);
    // public System.Xml.Schema.XmlSchemaObjectTable get_Groups()
    // Offset: 0x11075B8
    ::System::Xml::Schema::XmlSchemaObjectTable* get_Groups();
    // public System.Xml.Schema.XmlSchemaObjectTable get_Notations()
    // Offset: 0x11075C0
    ::System::Xml::Schema::XmlSchemaObjectTable* get_Notations();
    // System.Xml.Schema.XmlSchemaObjectTable get_IdentityConstraints()
    // Offset: 0x11075C8
    ::System::Xml::Schema::XmlSchemaObjectTable* get_IdentityConstraints();
    // System.Uri get_BaseUri()
    // Offset: 0x11075D0
    ::System::Uri* get_BaseUri();
    // System.Void set_BaseUri(System.Uri value)
    // Offset: 0x11075D8
    void set_BaseUri(::System::Uri* value);
    // System.Int32 get_SchemaId()
    // Offset: 0x11075E0
    int get_SchemaId();
    // System.Boolean get_IsChameleon()
    // Offset: 0x110765C
    bool get_IsChameleon();
    // System.Void set_IsChameleon(System.Boolean value)
    // Offset: 0x1107664
    void set_IsChameleon(bool value);
    // System.Collections.Hashtable get_Ids()
    // Offset: 0x1107670
    ::System::Collections::Hashtable* get_Ids();
    // System.Xml.XmlDocument get_Document()
    // Offset: 0x1107678
    ::System::Xml::XmlDocument* get_Document();
    // System.Int32 get_ErrorCount()
    // Offset: 0x11076E0
    int get_ErrorCount();
    // System.Void set_ErrorCount(System.Int32 value)
    // Offset: 0x11076E8
    void set_ErrorCount(int value);
    // System.Collections.ArrayList get_ImportedSchemas()
    // Offset: 0x1108654
    ::System::Collections::ArrayList* get_ImportedSchemas();
    // System.Collections.ArrayList get_ImportedNamespaces()
    // Offset: 0x11086BC
    ::System::Collections::ArrayList* get_ImportedNamespaces();
    // static private System.Void .cctor()
    // Offset: 0x1108900
    static void _cctor();
    // static public System.Xml.Schema.XmlSchema Read(System.Xml.XmlReader reader, System.Xml.Schema.ValidationEventHandler validationEventHandler)
    // Offset: 0x1106F0C
    static ::System::Xml::Schema::XmlSchema* Read(::System::Xml::XmlReader* reader, ::System::Xml::Schema::ValidationEventHandler* validationEventHandler);
    // System.Boolean CompileSchema(System.Xml.Schema.XmlSchemaCollection xsc, System.Xml.XmlResolver resolver, System.Xml.Schema.SchemaInfo schemaInfo, System.String ns, System.Xml.Schema.ValidationEventHandler validationEventHandler, System.Xml.XmlNameTable nameTable, System.Boolean CompileContentModel)
    // Offset: 0x11070C4
    bool CompileSchema(::System::Xml::Schema::XmlSchemaCollection* xsc, ::System::Xml::XmlResolver* resolver, ::System::Xml::Schema::SchemaInfo* schemaInfo, ::StringW ns, ::System::Xml::Schema::ValidationEventHandler* validationEventHandler, ::System::Xml::XmlNameTable* nameTable, bool CompileContentModel);
    // System.Void CompileSchemaInSet(System.Xml.XmlNameTable nameTable, System.Xml.Schema.ValidationEventHandler eventHandler, System.Xml.Schema.XmlSchemaCompilationSettings compilationSettings)
    // Offset: 0x11072B8
    void CompileSchemaInSet(::System::Xml::XmlNameTable* nameTable, ::System::Xml::Schema::ValidationEventHandler* eventHandler, ::System::Xml::Schema::XmlSchemaCompilationSettings* compilationSettings);
    // System.Xml.Schema.XmlSchema Clone()
    // Offset: 0x11076F0
    ::System::Xml::Schema::XmlSchema* Clone();
    // System.Xml.Schema.XmlSchema DeepClone()
    // Offset: 0x1107818
    ::System::Xml::Schema::XmlSchema* DeepClone();
    // System.Void SetIsCompiled(System.Boolean isCompiled)
    // Offset: 0x1108628
    void SetIsCompiled(bool isCompiled);
    // System.Void GetExternalSchemasList(System.Collections.IList extList, System.Xml.Schema.XmlSchema schema)
    // Offset: 0x1108724
    void GetExternalSchemasList(::System::Collections::IList* extList, ::System::Xml::Schema::XmlSchema* schema);
    // override System.String get_IdAttribute()
    // Offset: 0x1108618
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.String XmlSchemaObject::get_IdAttribute()
    ::StringW get_IdAttribute();
    // override System.Void set_IdAttribute(System.String value)
    // Offset: 0x1108620
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.Void XmlSchemaObject::set_IdAttribute(System.String value)
    void set_IdAttribute(::StringW value);
    // public System.Void .ctor()
    // Offset: 0x1106CF8
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.Void XmlSchemaObject::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchema* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchema::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchema*, creationType>()));
    }
    // override System.Void SetUnhandledAttributes(System.Xml.XmlAttribute[] moreAttributes)
    // Offset: 0x1108634
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.Void XmlSchemaObject::SetUnhandledAttributes(System.Xml.XmlAttribute[] moreAttributes)
    void SetUnhandledAttributes(::ArrayW<::System::Xml::XmlAttribute*> moreAttributes);
    // override System.Void AddAnnotation(System.Xml.Schema.XmlSchemaAnnotation annotation)
    // Offset: 0x110863C
    // Implemented from: System.Xml.Schema.XmlSchemaObject
    // Base method: System.Void XmlSchemaObject::AddAnnotation(System.Xml.Schema.XmlSchemaAnnotation annotation)
    void AddAnnotation(::System::Xml::Schema::XmlSchemaAnnotation* annotation);
  }; // System.Xml.Schema.XmlSchema
  #pragma pack(pop)
  static check_size<sizeof(XmlSchema), 232 + sizeof(::System::Xml::XmlDocument*)> __System_Xml_Schema_XmlSchemaSizeCheck;
  static_assert(sizeof(XmlSchema) == 0xF0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_AttributeFormDefault
// Il2CppName: get_AttributeFormDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaForm (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_AttributeFormDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_AttributeFormDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::set_AttributeFormDefault
// Il2CppName: set_AttributeFormDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(::System::Xml::Schema::XmlSchemaForm)>(&System::Xml::Schema::XmlSchema::set_AttributeFormDefault)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaForm")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "set_AttributeFormDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_BlockDefault
// Il2CppName: get_BlockDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaDerivationMethod (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_BlockDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_BlockDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::set_BlockDefault
// Il2CppName: set_BlockDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(::System::Xml::Schema::XmlSchemaDerivationMethod)>(&System::Xml::Schema::XmlSchema::set_BlockDefault)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaDerivationMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "set_BlockDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_FinalDefault
// Il2CppName: get_FinalDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaDerivationMethod (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_FinalDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_FinalDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::set_FinalDefault
// Il2CppName: set_FinalDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(::System::Xml::Schema::XmlSchemaDerivationMethod)>(&System::Xml::Schema::XmlSchema::set_FinalDefault)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaDerivationMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "set_FinalDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_ElementFormDefault
// Il2CppName: get_ElementFormDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaForm (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_ElementFormDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_ElementFormDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::set_ElementFormDefault
// Il2CppName: set_ElementFormDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(::System::Xml::Schema::XmlSchemaForm)>(&System::Xml::Schema::XmlSchema::set_ElementFormDefault)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaForm")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "set_ElementFormDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_TargetNamespace
// Il2CppName: get_TargetNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_TargetNamespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_TargetNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::set_TargetNamespace
// Il2CppName: set_TargetNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(::StringW)>(&System::Xml::Schema::XmlSchema::set_TargetNamespace)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "set_TargetNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_Version
// Il2CppName: get_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_Version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::set_Version
// Il2CppName: set_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(::StringW)>(&System::Xml::Schema::XmlSchema::set_Version)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "set_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_Includes
// Il2CppName: get_Includes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectCollection* (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_Includes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_Includes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_Items
// Il2CppName: get_Items
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectCollection* (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_Items)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_Items", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_IsCompiledBySet
// Il2CppName: get_IsCompiledBySet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_IsCompiledBySet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_IsCompiledBySet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::set_IsCompiledBySet
// Il2CppName: set_IsCompiledBySet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(bool)>(&System::Xml::Schema::XmlSchema::set_IsCompiledBySet)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "set_IsCompiledBySet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_IsPreprocessed
// Il2CppName: get_IsPreprocessed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_IsPreprocessed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_IsPreprocessed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::set_IsPreprocessed
// Il2CppName: set_IsPreprocessed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(bool)>(&System::Xml::Schema::XmlSchema::set_IsPreprocessed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "set_IsPreprocessed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_IsRedefined
// Il2CppName: get_IsRedefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_IsRedefined)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_IsRedefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::set_IsRedefined
// Il2CppName: set_IsRedefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(bool)>(&System::Xml::Schema::XmlSchema::set_IsRedefined)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "set_IsRedefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectTable* (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_Attributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_AttributeGroups
// Il2CppName: get_AttributeGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectTable* (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_AttributeGroups)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_AttributeGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_SchemaTypes
// Il2CppName: get_SchemaTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectTable* (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_SchemaTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_SchemaTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_Elements
// Il2CppName: get_Elements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectTable* (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_Elements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_Elements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_Id
// Il2CppName: get_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_Id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::set_Id
// Il2CppName: set_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(::StringW)>(&System::Xml::Schema::XmlSchema::set_Id)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "set_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_Groups
// Il2CppName: get_Groups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectTable* (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_Groups)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_Groups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_Notations
// Il2CppName: get_Notations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectTable* (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_Notations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_Notations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_IdentityConstraints
// Il2CppName: get_IdentityConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectTable* (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_IdentityConstraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_IdentityConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_BaseUri
// Il2CppName: get_BaseUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_BaseUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_BaseUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::set_BaseUri
// Il2CppName: set_BaseUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(::System::Uri*)>(&System::Xml::Schema::XmlSchema::set_BaseUri)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "set_BaseUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_SchemaId
// Il2CppName: get_SchemaId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_SchemaId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_SchemaId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_IsChameleon
// Il2CppName: get_IsChameleon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_IsChameleon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_IsChameleon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::set_IsChameleon
// Il2CppName: set_IsChameleon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(bool)>(&System::Xml::Schema::XmlSchema::set_IsChameleon)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "set_IsChameleon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_Ids
// Il2CppName: get_Ids
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Hashtable* (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_Ids)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_Ids", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_Document
// Il2CppName: get_Document
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlDocument* (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_Document)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_Document", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_ErrorCount
// Il2CppName: get_ErrorCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_ErrorCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_ErrorCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::set_ErrorCount
// Il2CppName: set_ErrorCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(int)>(&System::Xml::Schema::XmlSchema::set_ErrorCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "set_ErrorCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_ImportedSchemas
// Il2CppName: get_ImportedSchemas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ArrayList* (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_ImportedSchemas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_ImportedSchemas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_ImportedNamespaces
// Il2CppName: get_ImportedNamespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ArrayList* (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_ImportedNamespaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_ImportedNamespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::Schema::XmlSchema::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (*)(::System::Xml::XmlReader*, ::System::Xml::Schema::ValidationEventHandler*)>(&System::Xml::Schema::XmlSchema::Read)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    static auto* validationEventHandler = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, validationEventHandler});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::CompileSchema
// Il2CppName: CompileSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchema::*)(::System::Xml::Schema::XmlSchemaCollection*, ::System::Xml::XmlResolver*, ::System::Xml::Schema::SchemaInfo*, ::StringW, ::System::Xml::Schema::ValidationEventHandler*, ::System::Xml::XmlNameTable*, bool)>(&System::Xml::Schema::XmlSchema::CompileSchema)> {
  static const MethodInfo* get() {
    static auto* xsc = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaCollection")->byval_arg;
    static auto* resolver = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlResolver")->byval_arg;
    static auto* schemaInfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaInfo")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* validationEventHandler = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationEventHandler")->byval_arg;
    static auto* nameTable = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    static auto* CompileContentModel = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "CompileSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xsc, resolver, schemaInfo, ns, validationEventHandler, nameTable, CompileContentModel});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::CompileSchemaInSet
// Il2CppName: CompileSchemaInSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(::System::Xml::XmlNameTable*, ::System::Xml::Schema::ValidationEventHandler*, ::System::Xml::Schema::XmlSchemaCompilationSettings*)>(&System::Xml::Schema::XmlSchema::CompileSchemaInSet)> {
  static const MethodInfo* get() {
    static auto* nameTable = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    static auto* eventHandler = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ValidationEventHandler")->byval_arg;
    static auto* compilationSettings = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaCompilationSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "CompileSchemaInSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameTable, eventHandler, compilationSettings});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::DeepClone
// Il2CppName: DeepClone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::DeepClone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "DeepClone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::SetIsCompiled
// Il2CppName: SetIsCompiled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(bool)>(&System::Xml::Schema::XmlSchema::SetIsCompiled)> {
  static const MethodInfo* get() {
    static auto* isCompiled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "SetIsCompiled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isCompiled});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::GetExternalSchemasList
// Il2CppName: GetExternalSchemasList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(::System::Collections::IList*, ::System::Xml::Schema::XmlSchema*)>(&System::Xml::Schema::XmlSchema::GetExternalSchemasList)> {
  static const MethodInfo* get() {
    static auto* extList = &::il2cpp_utils::GetClassFromName("System.Collections", "IList")->byval_arg;
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "GetExternalSchemasList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{extList, schema});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::get_IdAttribute
// Il2CppName: get_IdAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchema::*)()>(&System::Xml::Schema::XmlSchema::get_IdAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "get_IdAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::set_IdAttribute
// Il2CppName: set_IdAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(::StringW)>(&System::Xml::Schema::XmlSchema::set_IdAttribute)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "set_IdAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::SetUnhandledAttributes
// Il2CppName: SetUnhandledAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(::ArrayW<::System::Xml::XmlAttribute*>)>(&System::Xml::Schema::XmlSchema::SetUnhandledAttributes)> {
  static const MethodInfo* get() {
    static auto* moreAttributes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Xml", "XmlAttribute"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "SetUnhandledAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{moreAttributes});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchema::AddAnnotation
// Il2CppName: AddAnnotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchema::*)(::System::Xml::Schema::XmlSchemaAnnotation*)>(&System::Xml::Schema::XmlSchema::AddAnnotation)> {
  static const MethodInfo* get() {
    static auto* annotation = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnnotation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchema*), "AddAnnotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{annotation});
  }
};
