// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlNode
  class XmlNode;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: SchemaBuilder
  class SchemaBuilder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::SchemaBuilder);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::SchemaBuilder*, "System.Xml.Schema", "SchemaBuilder");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.SchemaBuilder
  // [TokenAttribute] Offset: FFFFFFFF
  class SchemaBuilder : public ::Il2CppObject {
    public:
    // System.Boolean ProcessElement(System.String prefix, System.String name, System.String ns)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ProcessElement(::StringW prefix, ::StringW name, ::StringW ns);
    // System.Void ProcessAttribute(System.String prefix, System.String name, System.String ns, System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ProcessAttribute(::StringW prefix, ::StringW name, ::StringW ns, ::StringW value);
    // System.Boolean IsContentParsed()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool IsContentParsed();
    // System.Void ProcessMarkup(System.Xml.XmlNode[] markup)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ProcessMarkup(::ArrayW<::System::Xml::XmlNode*> markup);
    // System.Void ProcessCData(System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ProcessCData(::StringW value);
    // System.Void StartChildren()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void StartChildren();
    // System.Void EndChildren()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void EndChildren();
    // protected System.Void .ctor()
    // Offset: 0xDE9070
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SchemaBuilder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::SchemaBuilder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SchemaBuilder*, creationType>()));
    }
  }; // System.Xml.Schema.SchemaBuilder
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::SchemaBuilder::ProcessElement
// Il2CppName: ProcessElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::SchemaBuilder::*)(::StringW, ::StringW, ::StringW)>(&System::Xml::Schema::SchemaBuilder::ProcessElement)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaBuilder*), "ProcessElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, name, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaBuilder::ProcessAttribute
// Il2CppName: ProcessAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaBuilder::*)(::StringW, ::StringW, ::StringW, ::StringW)>(&System::Xml::Schema::SchemaBuilder::ProcessAttribute)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaBuilder*), "ProcessAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, name, ns, value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaBuilder::IsContentParsed
// Il2CppName: IsContentParsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::SchemaBuilder::*)()>(&System::Xml::Schema::SchemaBuilder::IsContentParsed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaBuilder*), "IsContentParsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaBuilder::ProcessMarkup
// Il2CppName: ProcessMarkup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaBuilder::*)(::ArrayW<::System::Xml::XmlNode*>)>(&System::Xml::Schema::SchemaBuilder::ProcessMarkup)> {
  static const MethodInfo* get() {
    static auto* markup = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaBuilder*), "ProcessMarkup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{markup});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaBuilder::ProcessCData
// Il2CppName: ProcessCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaBuilder::*)(::StringW)>(&System::Xml::Schema::SchemaBuilder::ProcessCData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaBuilder*), "ProcessCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaBuilder::StartChildren
// Il2CppName: StartChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaBuilder::*)()>(&System::Xml::Schema::SchemaBuilder::StartChildren)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaBuilder*), "StartChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaBuilder::EndChildren
// Il2CppName: EndChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaBuilder::*)()>(&System::Xml::Schema::SchemaBuilder::EndChildren)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaBuilder*), "EndChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaBuilder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
