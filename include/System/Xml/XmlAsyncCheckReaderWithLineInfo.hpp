// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.XmlAsyncCheckReader
#include "System/Xml/XmlAsyncCheckReader.hpp"
// Including type: System.Xml.IXmlLineInfo
#include "System/Xml/IXmlLineInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Skipping declaration: XmlReader because it is already included!
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XmlAsyncCheckReaderWithLineInfo
  class XmlAsyncCheckReaderWithLineInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XmlAsyncCheckReaderWithLineInfo);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlAsyncCheckReaderWithLineInfo*, "System.Xml", "XmlAsyncCheckReaderWithLineInfo");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlAsyncCheckReaderWithLineInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlAsyncCheckReaderWithLineInfo : public ::System::Xml::XmlAsyncCheckReader/*, public ::System::Xml::IXmlLineInfo*/ {
    public:
    public:
    // private readonly System.Xml.IXmlLineInfo readerAsIXmlLineInfo
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::IXmlLineInfo* readerAsIXmlLineInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::IXmlLineInfo*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Xml::IXmlLineInfo
    operator ::System::Xml::IXmlLineInfo() noexcept {
      return *reinterpret_cast<::System::Xml::IXmlLineInfo*>(this);
    }
    // Creating conversion operator: operator ::System::Xml::IXmlLineInfo*
    constexpr operator ::System::Xml::IXmlLineInfo*() const noexcept {
      return readerAsIXmlLineInfo;
    }
    // Get instance field reference: private readonly System.Xml.IXmlLineInfo readerAsIXmlLineInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::IXmlLineInfo*& dyn_readerAsIXmlLineInfo();
    // public System.Int32 get_LineNumber()
    // Offset: 0x11B5018
    int get_LineNumber();
    // public System.Int32 get_LinePosition()
    // Offset: 0x11B50C8
    int get_LinePosition();
    // public System.Boolean HasLineInfo()
    // Offset: 0x11B4F6C
    bool HasLineInfo();
    // public System.Void .ctor(System.Xml.XmlReader reader)
    // Offset: 0x11B41E8
    // Implemented from: System.Xml.XmlAsyncCheckReader
    // Base method: System.Void XmlAsyncCheckReader::.ctor(System.Xml.XmlReader reader)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlAsyncCheckReaderWithLineInfo* New_ctor(::System::Xml::XmlReader* reader) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlAsyncCheckReaderWithLineInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlAsyncCheckReaderWithLineInfo*, creationType>(reader)));
    }
  }; // System.Xml.XmlAsyncCheckReaderWithLineInfo
  #pragma pack(pop)
  static check_size<sizeof(XmlAsyncCheckReaderWithLineInfo), 32 + sizeof(::System::Xml::IXmlLineInfo*)> __System_Xml_XmlAsyncCheckReaderWithLineInfoSizeCheck;
  static_assert(sizeof(XmlAsyncCheckReaderWithLineInfo) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlAsyncCheckReaderWithLineInfo::get_LineNumber
// Il2CppName: get_LineNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlAsyncCheckReaderWithLineInfo::*)()>(&System::Xml::XmlAsyncCheckReaderWithLineInfo::get_LineNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlAsyncCheckReaderWithLineInfo*), "get_LineNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlAsyncCheckReaderWithLineInfo::get_LinePosition
// Il2CppName: get_LinePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlAsyncCheckReaderWithLineInfo::*)()>(&System::Xml::XmlAsyncCheckReaderWithLineInfo::get_LinePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlAsyncCheckReaderWithLineInfo*), "get_LinePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlAsyncCheckReaderWithLineInfo::HasLineInfo
// Il2CppName: HasLineInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlAsyncCheckReaderWithLineInfo::*)()>(&System::Xml::XmlAsyncCheckReaderWithLineInfo::HasLineInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlAsyncCheckReaderWithLineInfo*), "HasLineInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlAsyncCheckReaderWithLineInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
