// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Linq.XContainer
#include "System/Xml/Linq/XContainer.hpp"
// Including type: System.Xml.Serialization.IXmlSerializable
#include "System/Xml/Serialization/IXmlSerializable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Linq
namespace System::Xml::Linq {
  // Forward declaring type: XName
  class XName;
  // Forward declaring type: XAttribute
  class XAttribute;
  // Forward declaring type: XStreamingElement
  class XStreamingElement;
  // Forward declaring type: XNamespace
  class XNamespace;
  // Forward declaring type: LoadOptions
  struct LoadOptions;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchema
  class XmlSchema;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlReader
  class XmlReader;
  // Forward declaring type: XmlWriter
  class XmlWriter;
  // Forward declaring type: XmlNodeType
  struct XmlNodeType;
}
// Completed forward declares
// Type namespace: System.Xml.Linq
namespace System::Xml::Linq {
  // Forward declaring type: XElement
  class XElement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Linq::XElement);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Linq::XElement*, "System.Xml.Linq", "XElement");
// Type namespace: System.Xml.Linq
namespace System::Xml::Linq {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Linq.XElement
  // [TokenAttribute] Offset: FFFFFFFF
  // [XmlSchemaProviderAttribute] Offset: 6E59E8
  // [TypeDescriptionProviderAttribute] Offset: 6E59E8
  // [XmlTypeConvertorAttribute] Offset: 6E59E8
  class XElement : public ::System::Xml::Linq::XContainer/*, public ::System::Xml::Serialization::IXmlSerializable*/ {
    public:
    // Nested type: ::System::Xml::Linq::XElement::$GetAttributes$d__105
    class $GetAttributes$d__105;
    public:
    // System.Xml.Linq.XName name
    // Size: 0x8
    // Offset: 0x30
    ::System::Xml::Linq::XName* name;
    // Field size check
    static_assert(sizeof(::System::Xml::Linq::XName*) == 0x8);
    // System.Xml.Linq.XAttribute lastAttr
    // Size: 0x8
    // Offset: 0x38
    ::System::Xml::Linq::XAttribute* lastAttr;
    // Field size check
    static_assert(sizeof(::System::Xml::Linq::XAttribute*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Xml::Serialization::IXmlSerializable
    operator ::System::Xml::Serialization::IXmlSerializable() noexcept {
      return *reinterpret_cast<::System::Xml::Serialization::IXmlSerializable*>(this);
    }
    // Get static field: static private System.Collections.Generic.IEnumerable`1<System.Xml.Linq.XElement> emptySequence
    static ::System::Collections::Generic::IEnumerable_1<::System::Xml::Linq::XElement*>* _get_emptySequence();
    // Set static field: static private System.Collections.Generic.IEnumerable`1<System.Xml.Linq.XElement> emptySequence
    static void _set_emptySequence(::System::Collections::Generic::IEnumerable_1<::System::Xml::Linq::XElement*>* value);
    // Get instance field reference: System.Xml.Linq.XName name
    [[deprecated("Use field access instead!")]] ::System::Xml::Linq::XName*& dyn_name();
    // Get instance field reference: System.Xml.Linq.XAttribute lastAttr
    [[deprecated("Use field access instead!")]] ::System::Xml::Linq::XAttribute*& dyn_lastAttr();
    // static public System.Collections.Generic.IEnumerable`1<System.Xml.Linq.XElement> get_EmptySequence()
    // Offset: 0x18575C4
    static ::System::Collections::Generic::IEnumerable_1<::System::Xml::Linq::XElement*>* get_EmptySequence();
    // public System.Boolean get_HasAttributes()
    // Offset: 0x185AA44
    bool get_HasAttributes();
    // public System.Boolean get_IsEmpty()
    // Offset: 0x185AA54
    bool get_IsEmpty();
    // public System.Xml.Linq.XName get_Name()
    // Offset: 0x185AA64
    ::System::Xml::Linq::XName* get_Name();
    // public System.String get_Value()
    // Offset: 0x185AA74
    ::StringW get_Value();
    // public System.Void set_Value(System.String value)
    // Offset: 0x185AB38
    void set_Value(::StringW value);
    // public System.Void .ctor(System.Xml.Linq.XName name)
    // Offset: 0x1858910
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XElement* New_ctor(::System::Xml::Linq::XName* name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Linq::XElement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XElement*, creationType>(name)));
    }
    // public System.Void .ctor(System.Xml.Linq.XElement other)
    // Offset: 0x185A994
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XElement* New_ctor(::System::Xml::Linq::XElement* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Linq::XElement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XElement*, creationType>(other)));
    }
    // public System.Void .ctor(System.Xml.Linq.XStreamingElement other)
    // Offset: 0x1857480
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XElement* New_ctor(::System::Xml::Linq::XStreamingElement* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Linq::XElement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XElement*, creationType>(other)));
    }
    // public System.Xml.Linq.XAttribute Attribute(System.Xml.Linq.XName name)
    // Offset: 0x185ABB0
    ::System::Xml::Linq::XAttribute* Attribute(::System::Xml::Linq::XName* name);
    // public System.Collections.Generic.IEnumerable`1<System.Xml.Linq.XAttribute> Attributes()
    // Offset: 0x185ABEC
    ::System::Collections::Generic::IEnumerable_1<::System::Xml::Linq::XAttribute*>* Attributes();
    // public System.String GetPrefixOfNamespace(System.Xml.Linq.XNamespace ns)
    // Offset: 0x1855CD4
    ::StringW GetPrefixOfNamespace(::System::Xml::Linq::XNamespace* ns);
    // private System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
    // Offset: 0x185AE0C
    ::System::Xml::Schema::XmlSchema* System_Xml_Serialization_IXmlSerializable_GetSchema();
    // private System.Void System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader reader)
    // Offset: 0x185AE14
    void System_Xml_Serialization_IXmlSerializable_ReadXml(::System::Xml::XmlReader* reader);
    // private System.Void System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter writer)
    // Offset: 0x185B544
    void System_Xml_Serialization_IXmlSerializable_WriteXml(::System::Xml::XmlWriter* writer);
    // System.Void AppendAttribute(System.Xml.Linq.XAttribute a)
    // Offset: 0x185B648
    void AppendAttribute(::System::Xml::Linq::XAttribute* a);
    // System.Void AppendAttributeSkipNotify(System.Xml.Linq.XAttribute a)
    // Offset: 0x1858988
    void AppendAttributeSkipNotify(::System::Xml::Linq::XAttribute* a);
    // private System.Collections.Generic.IEnumerable`1<System.Xml.Linq.XAttribute> GetAttributes(System.Xml.Linq.XName name)
    // Offset: 0x185ABF4
    ::System::Collections::Generic::IEnumerable_1<::System::Xml::Linq::XAttribute*>* GetAttributes(::System::Xml::Linq::XName* name);
    // private System.String GetNamespaceOfPrefixInScope(System.String prefix, System.Xml.Linq.XElement outOfScope)
    // Offset: 0x185AC80
    ::StringW GetNamespaceOfPrefixInScope(::StringW prefix, ::System::Xml::Linq::XElement* outOfScope);
    // private System.Void ReadElementFrom(System.Xml.XmlReader r, System.Xml.Linq.LoadOptions o)
    // Offset: 0x185AFF0
    void ReadElementFrom(::System::Xml::XmlReader* r, ::System::Xml::Linq::LoadOptions o);
    // System.Void SetEndElementLineInfo(System.Int32 lineNumber, System.Int32 linePosition)
    // Offset: 0x18598D4
    void SetEndElementLineInfo(int lineNumber, int linePosition);
    // public override System.Xml.XmlNodeType get_NodeType()
    // Offset: 0x185AA6C
    // Implemented from: System.Xml.Linq.XObject
    // Base method: System.Xml.XmlNodeType XObject::get_NodeType()
    ::System::Xml::XmlNodeType get_NodeType();
    // public override System.Void WriteTo(System.Xml.XmlWriter writer)
    // Offset: 0x185AD80
    // Implemented from: System.Xml.Linq.XNode
    // Base method: System.Void XNode::WriteTo(System.Xml.XmlWriter writer)
    void WriteTo(::System::Xml::XmlWriter* writer);
    // override System.Void AddAttribute(System.Xml.Linq.XAttribute a)
    // Offset: 0x185B550
    // Implemented from: System.Xml.Linq.XContainer
    // Base method: System.Void XContainer::AddAttribute(System.Xml.Linq.XAttribute a)
    void AddAttribute(::System::Xml::Linq::XAttribute* a);
    // override System.Void AddAttributeSkipNotify(System.Xml.Linq.XAttribute a)
    // Offset: 0x185B774
    // Implemented from: System.Xml.Linq.XContainer
    // Base method: System.Void XContainer::AddAttributeSkipNotify(System.Xml.Linq.XAttribute a)
    void AddAttributeSkipNotify(::System::Xml::Linq::XAttribute* a);
    // override System.Xml.Linq.XNode CloneNode()
    // Offset: 0x185B86C
    // Implemented from: System.Xml.Linq.XNode
    // Base method: System.Xml.Linq.XNode XNode::CloneNode()
    ::System::Xml::Linq::XNode* CloneNode();
    // override System.Void ValidateNode(System.Xml.Linq.XNode node, System.Xml.Linq.XNode previous)
    // Offset: 0x185BB2C
    // Implemented from: System.Xml.Linq.XContainer
    // Base method: System.Void XContainer::ValidateNode(System.Xml.Linq.XNode node, System.Xml.Linq.XNode previous)
    void ValidateNode(::System::Xml::Linq::XNode* node, ::System::Xml::Linq::XNode* previous);
  }; // System.Xml.Linq.XElement
  #pragma pack(pop)
  static check_size<sizeof(XElement), 56 + sizeof(::System::Xml::Linq::XAttribute*)> __System_Xml_Linq_XElementSizeCheck;
  static_assert(sizeof(XElement) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Linq::XElement::get_EmptySequence
// Il2CppName: get_EmptySequence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::System::Xml::Linq::XElement*>* (*)()>(&System::Xml::Linq::XElement::get_EmptySequence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "get_EmptySequence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::get_HasAttributes
// Il2CppName: get_HasAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Linq::XElement::*)()>(&System::Xml::Linq::XElement::get_HasAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "get_HasAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::get_IsEmpty
// Il2CppName: get_IsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Linq::XElement::*)()>(&System::Xml::Linq::XElement::get_IsEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "get_IsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Linq::XName* (System::Xml::Linq::XElement::*)()>(&System::Xml::Linq::XElement::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Linq::XElement::*)()>(&System::Xml::Linq::XElement::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::set_Value
// Il2CppName: set_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::XElement::*)(::StringW)>(&System::Xml::Linq::XElement::set_Value)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "set_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Linq::XElement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Linq::XElement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Linq::XElement::Attribute
// Il2CppName: Attribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Linq::XAttribute* (System::Xml::Linq::XElement::*)(::System::Xml::Linq::XName*)>(&System::Xml::Linq::XElement::Attribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "Attribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::Attributes
// Il2CppName: Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::System::Xml::Linq::XAttribute*>* (System::Xml::Linq::XElement::*)()>(&System::Xml::Linq::XElement::Attributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::GetPrefixOfNamespace
// Il2CppName: GetPrefixOfNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Linq::XElement::*)(::System::Xml::Linq::XNamespace*)>(&System::Xml::Linq::XElement::GetPrefixOfNamespace)> {
  static const MethodInfo* get() {
    static auto* ns = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XNamespace")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "GetPrefixOfNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::System_Xml_Serialization_IXmlSerializable_GetSchema
// Il2CppName: System.Xml.Serialization.IXmlSerializable.GetSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Xml::Linq::XElement::*)()>(&System::Xml::Linq::XElement::System_Xml_Serialization_IXmlSerializable_GetSchema)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "System.Xml.Serialization.IXmlSerializable.GetSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::System_Xml_Serialization_IXmlSerializable_ReadXml
// Il2CppName: System.Xml.Serialization.IXmlSerializable.ReadXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::XElement::*)(::System::Xml::XmlReader*)>(&System::Xml::Linq::XElement::System_Xml_Serialization_IXmlSerializable_ReadXml)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "System.Xml.Serialization.IXmlSerializable.ReadXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::System_Xml_Serialization_IXmlSerializable_WriteXml
// Il2CppName: System.Xml.Serialization.IXmlSerializable.WriteXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::XElement::*)(::System::Xml::XmlWriter*)>(&System::Xml::Linq::XElement::System_Xml_Serialization_IXmlSerializable_WriteXml)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "System.Xml.Serialization.IXmlSerializable.WriteXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::AppendAttribute
// Il2CppName: AppendAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::XElement::*)(::System::Xml::Linq::XAttribute*)>(&System::Xml::Linq::XElement::AppendAttribute)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "AppendAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::AppendAttributeSkipNotify
// Il2CppName: AppendAttributeSkipNotify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::XElement::*)(::System::Xml::Linq::XAttribute*)>(&System::Xml::Linq::XElement::AppendAttributeSkipNotify)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "AppendAttributeSkipNotify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::GetAttributes
// Il2CppName: GetAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::System::Xml::Linq::XAttribute*>* (System::Xml::Linq::XElement::*)(::System::Xml::Linq::XName*)>(&System::Xml::Linq::XElement::GetAttributes)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "GetAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::GetNamespaceOfPrefixInScope
// Il2CppName: GetNamespaceOfPrefixInScope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Linq::XElement::*)(::StringW, ::System::Xml::Linq::XElement*)>(&System::Xml::Linq::XElement::GetNamespaceOfPrefixInScope)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* outOfScope = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "GetNamespaceOfPrefixInScope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, outOfScope});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::ReadElementFrom
// Il2CppName: ReadElementFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::XElement::*)(::System::Xml::XmlReader*, ::System::Xml::Linq::LoadOptions)>(&System::Xml::Linq::XElement::ReadElementFrom)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    static auto* o = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "LoadOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "ReadElementFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r, o});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::SetEndElementLineInfo
// Il2CppName: SetEndElementLineInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::XElement::*)(int, int)>(&System::Xml::Linq::XElement::SetEndElementLineInfo)> {
  static const MethodInfo* get() {
    static auto* lineNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* linePosition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "SetEndElementLineInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineNumber, linePosition});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::get_NodeType
// Il2CppName: get_NodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeType (System::Xml::Linq::XElement::*)()>(&System::Xml::Linq::XElement::get_NodeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "get_NodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::WriteTo
// Il2CppName: WriteTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::XElement::*)(::System::Xml::XmlWriter*)>(&System::Xml::Linq::XElement::WriteTo)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "WriteTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::AddAttribute
// Il2CppName: AddAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::XElement::*)(::System::Xml::Linq::XAttribute*)>(&System::Xml::Linq::XElement::AddAttribute)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "AddAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::AddAttributeSkipNotify
// Il2CppName: AddAttributeSkipNotify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::XElement::*)(::System::Xml::Linq::XAttribute*)>(&System::Xml::Linq::XElement::AddAttributeSkipNotify)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "AddAttributeSkipNotify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::CloneNode
// Il2CppName: CloneNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Linq::XNode* (System::Xml::Linq::XElement::*)()>(&System::Xml::Linq::XElement::CloneNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "CloneNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XElement::ValidateNode
// Il2CppName: ValidateNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::XElement::*)(::System::Xml::Linq::XNode*, ::System::Xml::Linq::XNode*)>(&System::Xml::Linq::XElement::ValidateNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XNode")->byval_arg;
    static auto* previous = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XElement*), "ValidateNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, previous});
  }
};
