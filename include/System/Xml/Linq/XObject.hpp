// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.IXmlLineInfo
#include "System/Xml/IXmlLineInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Linq
namespace System::Xml::Linq {
  // Forward declaring type: XContainer
  class XContainer;
  // Forward declaring type: XElement
  class XElement;
  // Forward declaring type: XObjectChangeEventArgs
  class XObjectChangeEventArgs;
  // Forward declaring type: SaveOptions
  struct SaveOptions;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlNodeType
  struct XmlNodeType;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: System.Xml.Linq
namespace System::Xml::Linq {
  // Forward declaring type: XObject
  class XObject;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Linq::XObject);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Linq::XObject*, "System.Xml.Linq", "XObject");
// Type namespace: System.Xml.Linq
namespace System::Xml::Linq {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Linq.XObject
  // [TokenAttribute] Offset: FFFFFFFF
  class XObject : public ::Il2CppObject/*, public ::System::Xml::IXmlLineInfo*/ {
    public:
    // Nested type: ::System::Xml::Linq::XObject::$Annotations$d__16_1<T>
    template<typename T>
    class $Annotations$d__16_1;
    public:
    // System.Xml.Linq.XContainer parent
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::Linq::XContainer* parent;
    // Field size check
    static_assert(sizeof(::System::Xml::Linq::XContainer*) == 0x8);
    // System.Object annotations
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* annotations;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Xml::IXmlLineInfo
    operator ::System::Xml::IXmlLineInfo() noexcept {
      return *reinterpret_cast<::System::Xml::IXmlLineInfo*>(this);
    }
    // Get instance field reference: System.Xml.Linq.XContainer parent
    [[deprecated("Use field access instead!")]] ::System::Xml::Linq::XContainer*& dyn_parent();
    // Get instance field reference: System.Object annotations
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_annotations();
    // public System.String get_BaseUri()
    // Offset: 0x18599A0
    ::StringW get_BaseUri();
    // public System.Xml.XmlNodeType get_NodeType()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Xml::XmlNodeType get_NodeType();
    // public System.Xml.Linq.XElement get_Parent()
    // Offset: 0x185D880
    ::System::Xml::Linq::XElement* get_Parent();
    // private System.Int32 System.Xml.IXmlLineInfo.get_LineNumber()
    // Offset: 0x185DAE8
    int System_Xml_IXmlLineInfo_get_LineNumber();
    // private System.Int32 System.Xml.IXmlLineInfo.get_LinePosition()
    // Offset: 0x185DB40
    int System_Xml_IXmlLineInfo_get_LinePosition();
    // System.Boolean get_HasBaseUri()
    // Offset: 0x1859948
    bool get_HasBaseUri();
    // System.Void .ctor()
    // Offset: 0x1854E58
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XObject* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Linq::XObject::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XObject*, creationType>()));
    }
    // public System.Void AddAnnotation(System.Object annotation)
    // Offset: 0x185B900
    void AddAnnotation(::Il2CppObject* annotation);
    // public System.Object Annotation(System.Type type)
    // Offset: 0x185D900
    ::Il2CppObject* Annotation(::System::Type* type);
    // public T Annotation()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T Annotation() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Linq::XObject::Annotation");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Annotation", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method);
    }
    // public System.Collections.Generic.IEnumerable`1<T> Annotations()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Collections::Generic::IEnumerable_1<T>* Annotations() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Linq::XObject::Annotations");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Annotations", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<T>*, false>(this, ___generic__method);
    }
    // private System.Boolean System.Xml.IXmlLineInfo.HasLineInfo()
    // Offset: 0x185DA90
    bool System_Xml_IXmlLineInfo_HasLineInfo();
    // System.Boolean NotifyChanged(System.Object sender, System.Xml.Linq.XObjectChangeEventArgs e)
    // Offset: 0x1855754
    bool NotifyChanged(::Il2CppObject* sender, ::System::Xml::Linq::XObjectChangeEventArgs* e);
    // System.Boolean NotifyChanging(System.Object sender, System.Xml.Linq.XObjectChangeEventArgs e)
    // Offset: 0x1855694
    bool NotifyChanging(::Il2CppObject* sender, ::System::Xml::Linq::XObjectChangeEventArgs* e);
    // System.Void SetBaseUri(System.String baseUri)
    // Offset: 0x18597F0
    void SetBaseUri(::StringW baseUri);
    // System.Void SetLineInfo(System.Int32 lineNumber, System.Int32 linePosition)
    // Offset: 0x1859860
    void SetLineInfo(int lineNumber, int linePosition);
    // System.Boolean SkipNotify()
    // Offset: 0x1856C94
    bool SkipNotify();
    // System.Xml.Linq.SaveOptions GetSaveOptionsFromAnnotations()
    // Offset: 0x185D3AC
    ::System::Xml::Linq::SaveOptions GetSaveOptionsFromAnnotations();
  }; // System.Xml.Linq.XObject
  #pragma pack(pop)
  static check_size<sizeof(XObject), 24 + sizeof(::Il2CppObject*)> __System_Xml_Linq_XObjectSizeCheck;
  static_assert(sizeof(XObject) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Linq::XObject::get_BaseUri
// Il2CppName: get_BaseUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Linq::XObject::*)()>(&System::Xml::Linq::XObject::get_BaseUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XObject*), "get_BaseUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XObject::get_NodeType
// Il2CppName: get_NodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeType (System::Xml::Linq::XObject::*)()>(&System::Xml::Linq::XObject::get_NodeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XObject*), "get_NodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XObject::get_Parent
// Il2CppName: get_Parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Linq::XElement* (System::Xml::Linq::XObject::*)()>(&System::Xml::Linq::XObject::get_Parent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XObject*), "get_Parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XObject::System_Xml_IXmlLineInfo_get_LineNumber
// Il2CppName: System.Xml.IXmlLineInfo.get_LineNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Linq::XObject::*)()>(&System::Xml::Linq::XObject::System_Xml_IXmlLineInfo_get_LineNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XObject*), "System.Xml.IXmlLineInfo.get_LineNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XObject::System_Xml_IXmlLineInfo_get_LinePosition
// Il2CppName: System.Xml.IXmlLineInfo.get_LinePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Linq::XObject::*)()>(&System::Xml::Linq::XObject::System_Xml_IXmlLineInfo_get_LinePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XObject*), "System.Xml.IXmlLineInfo.get_LinePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XObject::get_HasBaseUri
// Il2CppName: get_HasBaseUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Linq::XObject::*)()>(&System::Xml::Linq::XObject::get_HasBaseUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XObject*), "get_HasBaseUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XObject::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Linq::XObject::AddAnnotation
// Il2CppName: AddAnnotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::XObject::*)(::Il2CppObject*)>(&System::Xml::Linq::XObject::AddAnnotation)> {
  static const MethodInfo* get() {
    static auto* annotation = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XObject*), "AddAnnotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{annotation});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XObject::Annotation
// Il2CppName: Annotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Linq::XObject::*)(::System::Type*)>(&System::Xml::Linq::XObject::Annotation)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XObject*), "Annotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XObject::Annotation
// Il2CppName: Annotation
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Xml::Linq::XObject::Annotations
// Il2CppName: Annotations
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Xml::Linq::XObject::System_Xml_IXmlLineInfo_HasLineInfo
// Il2CppName: System.Xml.IXmlLineInfo.HasLineInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Linq::XObject::*)()>(&System::Xml::Linq::XObject::System_Xml_IXmlLineInfo_HasLineInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XObject*), "System.Xml.IXmlLineInfo.HasLineInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XObject::NotifyChanged
// Il2CppName: NotifyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Linq::XObject::*)(::Il2CppObject*, ::System::Xml::Linq::XObjectChangeEventArgs*)>(&System::Xml::Linq::XObject::NotifyChanged)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XObjectChangeEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XObject*), "NotifyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, e});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XObject::NotifyChanging
// Il2CppName: NotifyChanging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Linq::XObject::*)(::Il2CppObject*, ::System::Xml::Linq::XObjectChangeEventArgs*)>(&System::Xml::Linq::XObject::NotifyChanging)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XObjectChangeEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XObject*), "NotifyChanging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, e});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XObject::SetBaseUri
// Il2CppName: SetBaseUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::XObject::*)(::StringW)>(&System::Xml::Linq::XObject::SetBaseUri)> {
  static const MethodInfo* get() {
    static auto* baseUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XObject*), "SetBaseUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUri});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XObject::SetLineInfo
// Il2CppName: SetLineInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::XObject::*)(int, int)>(&System::Xml::Linq::XObject::SetLineInfo)> {
  static const MethodInfo* get() {
    static auto* lineNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* linePosition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XObject*), "SetLineInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineNumber, linePosition});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XObject::SkipNotify
// Il2CppName: SkipNotify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Linq::XObject::*)()>(&System::Xml::Linq::XObject::SkipNotify)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XObject*), "SkipNotify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XObject::GetSaveOptionsFromAnnotations
// Il2CppName: GetSaveOptionsFromAnnotations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Linq::SaveOptions (System::Xml::Linq::XObject::*)()>(&System::Xml::Linq::XObject::GetSaveOptionsFromAnnotations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XObject*), "GetSaveOptionsFromAnnotations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
