// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Linq
namespace System::Xml::Linq {
  // Forward declaring type: XNamespace
  class XNamespace;
}
// Completed forward declares
// Type namespace: System.Xml.Linq
namespace System::Xml::Linq {
  // Forward declaring type: NamespaceCache
  struct NamespaceCache;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Linq::NamespaceCache, "System.Xml.Linq", "NamespaceCache");
// Type namespace: System.Xml.Linq
namespace System::Xml::Linq {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Xml.Linq.NamespaceCache
  // [TokenAttribute] Offset: FFFFFFFF
  struct NamespaceCache/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Xml.Linq.XNamespace ns
    // Size: 0x8
    // Offset: 0x0
    ::System::Xml::Linq::XNamespace* ns;
    // Field size check
    static_assert(sizeof(::System::Xml::Linq::XNamespace*) == 0x8);
    // private System.String namespaceName
    // Size: 0x8
    // Offset: 0x8
    ::StringW namespaceName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: NamespaceCache
    constexpr NamespaceCache(::System::Xml::Linq::XNamespace* ns_ = {}, ::StringW namespaceName_ = {}) noexcept : ns{ns_}, namespaceName{namespaceName_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Xml.Linq.XNamespace ns
    [[deprecated("Use field access instead!")]] ::System::Xml::Linq::XNamespace*& dyn_ns();
    // Get instance field reference: private System.String namespaceName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_namespaceName();
    // public System.Xml.Linq.XNamespace Get(System.String namespaceName)
    // Offset: 0x18541A4
    ::System::Xml::Linq::XNamespace* Get(::StringW namespaceName);
  }; // System.Xml.Linq.NamespaceCache
  #pragma pack(pop)
  static check_size<sizeof(NamespaceCache), 8 + sizeof(::StringW)> __System_Xml_Linq_NamespaceCacheSizeCheck;
  static_assert(sizeof(NamespaceCache) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Linq::NamespaceCache::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Linq::XNamespace* (System::Xml::Linq::NamespaceCache::*)(::StringW)>(&System::Xml::Linq::NamespaceCache::Get)> {
  static const MethodInfo* get() {
    static auto* namespaceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::NamespaceCache), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{namespaceName});
  }
};
