// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.IDtdParserAdapterWithValidation
#include "System/Xml/IDtdParserAdapterWithValidation.hpp"
// Completed includes
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: IDtdParserAdapterV1
  class IDtdParserAdapterV1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::IDtdParserAdapterV1);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::IDtdParserAdapterV1*, "System.Xml", "IDtdParserAdapterV1");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.IDtdParserAdapterV1
  // [TokenAttribute] Offset: FFFFFFFF
  class IDtdParserAdapterV1/*, public ::System::Xml::IDtdParserAdapterWithValidation*/ {
    public:
    // Creating interface conversion operator: operator ::System::Xml::IDtdParserAdapterWithValidation
    operator ::System::Xml::IDtdParserAdapterWithValidation() noexcept {
      return *reinterpret_cast<::System::Xml::IDtdParserAdapterWithValidation*>(this);
    }
    // public System.Boolean get_V1CompatibilityMode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_V1CompatibilityMode();
    // public System.Boolean get_Normalization()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_Normalization();
    // public System.Boolean get_Namespaces()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_Namespaces();
  }; // System.Xml.IDtdParserAdapterV1
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapterV1::get_V1CompatibilityMode
// Il2CppName: get_V1CompatibilityMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::IDtdParserAdapterV1::*)()>(&System::Xml::IDtdParserAdapterV1::get_V1CompatibilityMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapterV1*), "get_V1CompatibilityMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapterV1::get_Normalization
// Il2CppName: get_Normalization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::IDtdParserAdapterV1::*)()>(&System::Xml::IDtdParserAdapterV1::get_Normalization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapterV1*), "get_Normalization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::IDtdParserAdapterV1::get_Namespaces
// Il2CppName: get_Namespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::IDtdParserAdapterV1::*)()>(&System::Xml::IDtdParserAdapterV1::get_Namespaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::IDtdParserAdapterV1*), "get_Namespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
