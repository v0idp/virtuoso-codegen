// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlReader
  class XmlReader;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: ReadContentAsBinaryHelper
  class ReadContentAsBinaryHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::ReadContentAsBinaryHelper);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::ReadContentAsBinaryHelper*, "System.Xml", "ReadContentAsBinaryHelper");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.ReadContentAsBinaryHelper
  // [TokenAttribute] Offset: FFFFFFFF
  class ReadContentAsBinaryHelper : public ::Il2CppObject {
    public:
    // Nested type: ::System::Xml::ReadContentAsBinaryHelper::State
    struct State;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.ReadContentAsBinaryHelper/System.Xml.State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.ReadContentAsBinaryHelper/System.Xml.State None
      static constexpr const int None = 0;
      // Get static field: static public System.Xml.ReadContentAsBinaryHelper/System.Xml.State None
      static ::System::Xml::ReadContentAsBinaryHelper::State _get_None();
      // Set static field: static public System.Xml.ReadContentAsBinaryHelper/System.Xml.State None
      static void _set_None(::System::Xml::ReadContentAsBinaryHelper::State value);
      // static field const value: static public System.Xml.ReadContentAsBinaryHelper/System.Xml.State InReadContent
      static constexpr const int InReadContent = 1;
      // Get static field: static public System.Xml.ReadContentAsBinaryHelper/System.Xml.State InReadContent
      static ::System::Xml::ReadContentAsBinaryHelper::State _get_InReadContent();
      // Set static field: static public System.Xml.ReadContentAsBinaryHelper/System.Xml.State InReadContent
      static void _set_InReadContent(::System::Xml::ReadContentAsBinaryHelper::State value);
      // static field const value: static public System.Xml.ReadContentAsBinaryHelper/System.Xml.State InReadElementContent
      static constexpr const int InReadElementContent = 2;
      // Get static field: static public System.Xml.ReadContentAsBinaryHelper/System.Xml.State InReadElementContent
      static ::System::Xml::ReadContentAsBinaryHelper::State _get_InReadElementContent();
      // Set static field: static public System.Xml.ReadContentAsBinaryHelper/System.Xml.State InReadElementContent
      static void _set_InReadElementContent(::System::Xml::ReadContentAsBinaryHelper::State value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Xml.ReadContentAsBinaryHelper/System.Xml.State
    #pragma pack(pop)
    static check_size<sizeof(ReadContentAsBinaryHelper::State), 0 + sizeof(int)> __System_Xml_ReadContentAsBinaryHelper_StateSizeCheck;
    static_assert(sizeof(ReadContentAsBinaryHelper::State) == 0x4);
    public:
    // private System.Xml.XmlReader reader
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::XmlReader* reader;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlReader*) == 0x8);
    // private System.Xml.ReadContentAsBinaryHelper/System.Xml.State state
    // Size: 0x4
    // Offset: 0x18
    ::System::Xml::ReadContentAsBinaryHelper::State state;
    // Field size check
    static_assert(sizeof(::System::Xml::ReadContentAsBinaryHelper::State) == 0x4);
    // private System.Int32 valueOffset
    // Size: 0x4
    // Offset: 0x1C
    int valueOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean isEnd
    // Size: 0x1
    // Offset: 0x20
    bool isEnd;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Xml.XmlReader reader
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlReader*& dyn_reader();
    // Get instance field reference: private System.Xml.ReadContentAsBinaryHelper/System.Xml.State state
    [[deprecated("Use field access instead!")]] ::System::Xml::ReadContentAsBinaryHelper::State& dyn_state();
    // Get instance field reference: private System.Int32 valueOffset
    [[deprecated("Use field access instead!")]] int& dyn_valueOffset();
    // Get instance field reference: private System.Boolean isEnd
    [[deprecated("Use field access instead!")]] bool& dyn_isEnd();
    // System.Void Finish()
    // Offset: 0xDE7BE4
    void Finish();
    // System.Void Reset()
    // Offset: 0xDE7E24
    void Reset();
    // private System.Boolean MoveToNextContentNode(System.Boolean moveIfOnContentNode)
    // Offset: 0xDE7D40
    bool MoveToNextContentNode(bool moveIfOnContentNode);
  }; // System.Xml.ReadContentAsBinaryHelper
  #pragma pack(pop)
  static check_size<sizeof(ReadContentAsBinaryHelper), 32 + sizeof(bool)> __System_Xml_ReadContentAsBinaryHelperSizeCheck;
  static_assert(sizeof(ReadContentAsBinaryHelper) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::ReadContentAsBinaryHelper::State, "System.Xml", "ReadContentAsBinaryHelper/State");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::ReadContentAsBinaryHelper::Finish
// Il2CppName: Finish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::ReadContentAsBinaryHelper::*)()>(&System::Xml::ReadContentAsBinaryHelper::Finish)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::ReadContentAsBinaryHelper*), "Finish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::ReadContentAsBinaryHelper::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::ReadContentAsBinaryHelper::*)()>(&System::Xml::ReadContentAsBinaryHelper::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::ReadContentAsBinaryHelper*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::ReadContentAsBinaryHelper::MoveToNextContentNode
// Il2CppName: MoveToNextContentNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::ReadContentAsBinaryHelper::*)(bool)>(&System::Xml::ReadContentAsBinaryHelper::MoveToNextContentNode)> {
  static const MethodInfo* get() {
    static auto* moveIfOnContentNode = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::ReadContentAsBinaryHelper*), "MoveToNextContentNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{moveIfOnContentNode});
  }
};
