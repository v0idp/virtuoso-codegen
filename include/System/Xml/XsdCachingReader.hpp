// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.XmlReader
#include "System/Xml/XmlReader.hpp"
// Including type: System.Xml.IXmlLineInfo
#include "System/Xml/IXmlLineInfo.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: CachingEventHandler
  class CachingEventHandler;
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: ValidatingReaderNodeData
  class ValidatingReaderNodeData;
  // Forward declaring type: XmlNodeType
  struct XmlNodeType;
  // Forward declaring type: XmlReaderSettings
  class XmlReaderSettings;
  // Forward declaring type: XmlSpace
  struct XmlSpace;
  // Forward declaring type: ReadState
  struct ReadState;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XsdCachingReader
  class XsdCachingReader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XsdCachingReader);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XsdCachingReader*, "System.Xml", "XsdCachingReader");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XsdCachingReader
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 6A41E8
  class XsdCachingReader : public ::System::Xml::XmlReader/*, public ::System::Xml::IXmlLineInfo*/ {
    public:
    // Nested type: ::System::Xml::XsdCachingReader::CachingReaderState
    struct CachingReaderState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.XsdCachingReader/System.Xml.CachingReaderState
    // [TokenAttribute] Offset: FFFFFFFF
    struct CachingReaderState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: CachingReaderState
      constexpr CachingReaderState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.XsdCachingReader/System.Xml.CachingReaderState None
      static constexpr const int None = 0;
      // Get static field: static public System.Xml.XsdCachingReader/System.Xml.CachingReaderState None
      static ::System::Xml::XsdCachingReader::CachingReaderState _get_None();
      // Set static field: static public System.Xml.XsdCachingReader/System.Xml.CachingReaderState None
      static void _set_None(::System::Xml::XsdCachingReader::CachingReaderState value);
      // static field const value: static public System.Xml.XsdCachingReader/System.Xml.CachingReaderState Init
      static constexpr const int Init = 1;
      // Get static field: static public System.Xml.XsdCachingReader/System.Xml.CachingReaderState Init
      static ::System::Xml::XsdCachingReader::CachingReaderState _get_Init();
      // Set static field: static public System.Xml.XsdCachingReader/System.Xml.CachingReaderState Init
      static void _set_Init(::System::Xml::XsdCachingReader::CachingReaderState value);
      // static field const value: static public System.Xml.XsdCachingReader/System.Xml.CachingReaderState Record
      static constexpr const int Record = 2;
      // Get static field: static public System.Xml.XsdCachingReader/System.Xml.CachingReaderState Record
      static ::System::Xml::XsdCachingReader::CachingReaderState _get_Record();
      // Set static field: static public System.Xml.XsdCachingReader/System.Xml.CachingReaderState Record
      static void _set_Record(::System::Xml::XsdCachingReader::CachingReaderState value);
      // static field const value: static public System.Xml.XsdCachingReader/System.Xml.CachingReaderState Replay
      static constexpr const int Replay = 3;
      // Get static field: static public System.Xml.XsdCachingReader/System.Xml.CachingReaderState Replay
      static ::System::Xml::XsdCachingReader::CachingReaderState _get_Replay();
      // Set static field: static public System.Xml.XsdCachingReader/System.Xml.CachingReaderState Replay
      static void _set_Replay(::System::Xml::XsdCachingReader::CachingReaderState value);
      // static field const value: static public System.Xml.XsdCachingReader/System.Xml.CachingReaderState ReaderClosed
      static constexpr const int ReaderClosed = 4;
      // Get static field: static public System.Xml.XsdCachingReader/System.Xml.CachingReaderState ReaderClosed
      static ::System::Xml::XsdCachingReader::CachingReaderState _get_ReaderClosed();
      // Set static field: static public System.Xml.XsdCachingReader/System.Xml.CachingReaderState ReaderClosed
      static void _set_ReaderClosed(::System::Xml::XsdCachingReader::CachingReaderState value);
      // static field const value: static public System.Xml.XsdCachingReader/System.Xml.CachingReaderState Error
      static constexpr const int Error = 5;
      // Get static field: static public System.Xml.XsdCachingReader/System.Xml.CachingReaderState Error
      static ::System::Xml::XsdCachingReader::CachingReaderState _get_Error();
      // Set static field: static public System.Xml.XsdCachingReader/System.Xml.CachingReaderState Error
      static void _set_Error(::System::Xml::XsdCachingReader::CachingReaderState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Xml.XsdCachingReader/System.Xml.CachingReaderState
    #pragma pack(pop)
    static check_size<sizeof(XsdCachingReader::CachingReaderState), 0 + sizeof(int)> __System_Xml_XsdCachingReader_CachingReaderStateSizeCheck;
    static_assert(sizeof(XsdCachingReader::CachingReaderState) == 0x4);
    public:
    // private System.Xml.XmlReader coreReader
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::XmlReader* coreReader;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlReader*) == 0x8);
    // private System.Xml.XmlNameTable coreReaderNameTable
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::XmlNameTable* coreReaderNameTable;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNameTable*) == 0x8);
    // private System.Xml.ValidatingReaderNodeData[] contentEvents
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::System::Xml::ValidatingReaderNodeData*> contentEvents;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::ValidatingReaderNodeData*>) == 0x8);
    // private System.Xml.ValidatingReaderNodeData[] attributeEvents
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::System::Xml::ValidatingReaderNodeData*> attributeEvents;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::ValidatingReaderNodeData*>) == 0x8);
    // private System.Xml.ValidatingReaderNodeData cachedNode
    // Size: 0x8
    // Offset: 0x30
    ::System::Xml::ValidatingReaderNodeData* cachedNode;
    // Field size check
    static_assert(sizeof(::System::Xml::ValidatingReaderNodeData*) == 0x8);
    // private System.Xml.XsdCachingReader/System.Xml.CachingReaderState cacheState
    // Size: 0x4
    // Offset: 0x38
    ::System::Xml::XsdCachingReader::CachingReaderState cacheState;
    // Field size check
    static_assert(sizeof(::System::Xml::XsdCachingReader::CachingReaderState) == 0x4);
    // private System.Int32 contentIndex
    // Size: 0x4
    // Offset: 0x3C
    int contentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 attributeCount
    // Size: 0x4
    // Offset: 0x40
    int attributeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean returnOriginalStringValues
    // Size: 0x1
    // Offset: 0x44
    bool returnOriginalStringValues;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: returnOriginalStringValues and: cacheHandler
    char __padding8[0x3] = {};
    // private System.Xml.CachingEventHandler cacheHandler
    // Size: 0x8
    // Offset: 0x48
    ::System::Xml::CachingEventHandler* cacheHandler;
    // Field size check
    static_assert(sizeof(::System::Xml::CachingEventHandler*) == 0x8);
    // private System.Int32 currentAttrIndex
    // Size: 0x4
    // Offset: 0x50
    int currentAttrIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 currentContentIndex
    // Size: 0x4
    // Offset: 0x54
    int currentContentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean readAhead
    // Size: 0x1
    // Offset: 0x58
    bool readAhead;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: readAhead and: lineInfo
    char __padding12[0x7] = {};
    // private System.Xml.IXmlLineInfo lineInfo
    // Size: 0x8
    // Offset: 0x60
    ::System::Xml::IXmlLineInfo* lineInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::IXmlLineInfo*) == 0x8);
    // private System.Xml.ValidatingReaderNodeData textNode
    // Size: 0x8
    // Offset: 0x68
    ::System::Xml::ValidatingReaderNodeData* textNode;
    // Field size check
    static_assert(sizeof(::System::Xml::ValidatingReaderNodeData*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Xml::IXmlLineInfo
    operator ::System::Xml::IXmlLineInfo() noexcept {
      return *reinterpret_cast<::System::Xml::IXmlLineInfo*>(this);
    }
    // Get instance field reference: private System.Xml.XmlReader coreReader
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlReader*& dyn_coreReader();
    // Get instance field reference: private System.Xml.XmlNameTable coreReaderNameTable
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNameTable*& dyn_coreReaderNameTable();
    // Get instance field reference: private System.Xml.ValidatingReaderNodeData[] contentEvents
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Xml::ValidatingReaderNodeData*>& dyn_contentEvents();
    // Get instance field reference: private System.Xml.ValidatingReaderNodeData[] attributeEvents
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Xml::ValidatingReaderNodeData*>& dyn_attributeEvents();
    // Get instance field reference: private System.Xml.ValidatingReaderNodeData cachedNode
    [[deprecated("Use field access instead!")]] ::System::Xml::ValidatingReaderNodeData*& dyn_cachedNode();
    // Get instance field reference: private System.Xml.XsdCachingReader/System.Xml.CachingReaderState cacheState
    [[deprecated("Use field access instead!")]] ::System::Xml::XsdCachingReader::CachingReaderState& dyn_cacheState();
    // Get instance field reference: private System.Int32 contentIndex
    [[deprecated("Use field access instead!")]] int& dyn_contentIndex();
    // Get instance field reference: private System.Int32 attributeCount
    [[deprecated("Use field access instead!")]] int& dyn_attributeCount();
    // Get instance field reference: private System.Boolean returnOriginalStringValues
    [[deprecated("Use field access instead!")]] bool& dyn_returnOriginalStringValues();
    // Get instance field reference: private System.Xml.CachingEventHandler cacheHandler
    [[deprecated("Use field access instead!")]] ::System::Xml::CachingEventHandler*& dyn_cacheHandler();
    // Get instance field reference: private System.Int32 currentAttrIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentAttrIndex();
    // Get instance field reference: private System.Int32 currentContentIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentContentIndex();
    // Get instance field reference: private System.Boolean readAhead
    [[deprecated("Use field access instead!")]] bool& dyn_readAhead();
    // Get instance field reference: private System.Xml.IXmlLineInfo lineInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::IXmlLineInfo*& dyn_lineInfo();
    // Get instance field reference: private System.Xml.ValidatingReaderNodeData textNode
    [[deprecated("Use field access instead!")]] ::System::Xml::ValidatingReaderNodeData*& dyn_textNode();
    // private System.Int32 System.Xml.IXmlLineInfo.get_LineNumber()
    // Offset: 0xED1230
    int System_Xml_IXmlLineInfo_get_LineNumber();
    // private System.Int32 System.Xml.IXmlLineInfo.get_LinePosition()
    // Offset: 0xED124C
    int System_Xml_IXmlLineInfo_get_LinePosition();
    // System.Void .ctor(System.Xml.XmlReader reader, System.Xml.IXmlLineInfo lineInfo, System.Xml.CachingEventHandler handlerMethod)
    // Offset: 0xECFC88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XsdCachingReader* New_ctor(::System::Xml::XmlReader* reader, ::System::Xml::IXmlLineInfo* lineInfo, ::System::Xml::CachingEventHandler* handlerMethod) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XsdCachingReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XsdCachingReader*, creationType>(reader, lineInfo, handlerMethod)));
    }
    // private System.Void Init()
    // Offset: 0xECFD50
    void Init();
    // System.Void Reset(System.Xml.XmlReader reader)
    // Offset: 0xED01AC
    void Reset(::System::Xml::XmlReader* reader);
    // System.Xml.ValidatingReaderNodeData RecordTextNode(System.String textValue, System.String originalStringValue, System.Int32 depth, System.Int32 lineNo, System.Int32 linePos)
    // Offset: 0xED0C6C
    ::System::Xml::ValidatingReaderNodeData* RecordTextNode(::StringW textValue, ::StringW originalStringValue, int depth, int lineNo, int linePos);
    // System.Void SwitchTextNodeAndEndElement(System.String textValue, System.String originalStringValue)
    // Offset: 0xED0CE8
    void SwitchTextNodeAndEndElement(::StringW textValue, ::StringW originalStringValue);
    // System.Void RecordEndElementNode()
    // Offset: 0xED0DF4
    void RecordEndElementNode();
    // private System.Boolean System.Xml.IXmlLineInfo.HasLineInfo()
    // Offset: 0xED1228
    bool System_Xml_IXmlLineInfo_HasLineInfo();
    // System.Void SetToReplayMode()
    // Offset: 0xED1268
    void SetToReplayMode();
    // System.Xml.XmlReader GetCoreReader()
    // Offset: 0xED1288
    ::System::Xml::XmlReader* GetCoreReader();
    // System.Xml.IXmlLineInfo GetLineInfo()
    // Offset: 0xED1290
    ::System::Xml::IXmlLineInfo* GetLineInfo();
    // private System.Void ClearAttributesInfo()
    // Offset: 0xED0C5C
    void ClearAttributesInfo();
    // private System.Xml.ValidatingReaderNodeData AddAttribute(System.Int32 attIndex)
    // Offset: 0xED1298
    ::System::Xml::ValidatingReaderNodeData* AddAttribute(int attIndex);
    // private System.Xml.ValidatingReaderNodeData AddContent(System.Xml.XmlNodeType nodeType)
    // Offset: 0xECFEB0
    ::System::Xml::ValidatingReaderNodeData* AddContent(::System::Xml::XmlNodeType nodeType);
    // private System.Void RecordAttributes()
    // Offset: 0xED0030
    void RecordAttributes();
    // private System.Int32 GetAttributeIndexWithoutPrefix(System.String name)
    // Offset: 0xED03F4
    int GetAttributeIndexWithoutPrefix(::StringW name);
    // private System.Int32 GetAttributeIndexWithPrefix(System.String name)
    // Offset: 0xED04B0
    int GetAttributeIndexWithPrefix(::StringW name);
    // private System.Xml.ValidatingReaderNodeData CreateDummyTextNode(System.String attributeValue, System.Int32 depth)
    // Offset: 0xED1194
    ::System::Xml::ValidatingReaderNodeData* CreateDummyTextNode(::StringW attributeValue, int depth);
    // public override System.Xml.XmlReaderSettings get_Settings()
    // Offset: 0xED01B4
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.XmlReaderSettings XmlReader::get_Settings()
    ::System::Xml::XmlReaderSettings* get_Settings();
    // public override System.Xml.XmlNodeType get_NodeType()
    // Offset: 0xED01D4
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.XmlNodeType XmlReader::get_NodeType()
    ::System::Xml::XmlNodeType get_NodeType();
    // public override System.String get_Name()
    // Offset: 0xED01F0
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_Name()
    ::StringW get_Name();
    // public override System.String get_LocalName()
    // Offset: 0xED0214
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_LocalName()
    ::StringW get_LocalName();
    // public override System.String get_NamespaceURI()
    // Offset: 0xED0230
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_NamespaceURI()
    ::StringW get_NamespaceURI();
    // public override System.String get_Prefix()
    // Offset: 0xED024C
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_Prefix()
    ::StringW get_Prefix();
    // public override System.String get_Value()
    // Offset: 0xED0268
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_Value()
    ::StringW get_Value();
    // public override System.Int32 get_Depth()
    // Offset: 0xED0298
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Int32 XmlReader::get_Depth()
    int get_Depth();
    // public override System.String get_BaseURI()
    // Offset: 0xED02B4
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_BaseURI()
    ::StringW get_BaseURI();
    // public override System.Boolean get_IsEmptyElement()
    // Offset: 0xED02D8
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::get_IsEmptyElement()
    bool get_IsEmptyElement();
    // public override System.Boolean get_IsDefault()
    // Offset: 0xED02E0
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::get_IsDefault()
    bool get_IsDefault();
    // public override System.Char get_QuoteChar()
    // Offset: 0xED02E8
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Char XmlReader::get_QuoteChar()
    ::Il2CppChar get_QuoteChar();
    // public override System.Xml.XmlSpace get_XmlSpace()
    // Offset: 0xED030C
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.XmlSpace XmlReader::get_XmlSpace()
    ::System::Xml::XmlSpace get_XmlSpace();
    // public override System.String get_XmlLang()
    // Offset: 0xED0330
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_XmlLang()
    ::StringW get_XmlLang();
    // public override System.Int32 get_AttributeCount()
    // Offset: 0xED0354
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Int32 XmlReader::get_AttributeCount()
    int get_AttributeCount();
    // public override System.Boolean get_EOF()
    // Offset: 0xED0F28
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::get_EOF()
    bool get_EOF();
    // public override System.Xml.ReadState get_ReadState()
    // Offset: 0xED0FA0
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.ReadState XmlReader::get_ReadState()
    ::System::Xml::ReadState get_ReadState();
    // public override System.Xml.XmlNameTable get_NameTable()
    // Offset: 0xED10D4
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.XmlNameTable XmlReader::get_NameTable()
    ::System::Xml::XmlNameTable* get_NameTable();
    // public override System.String GetAttribute(System.String name)
    // Offset: 0xED035C
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::GetAttribute(System.String name)
    ::StringW GetAttribute(::StringW name);
    // public override System.String GetAttribute(System.String name, System.String namespaceURI)
    // Offset: 0xED0564
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::GetAttribute(System.String name, System.String namespaceURI)
    ::StringW GetAttribute(::StringW name, ::StringW namespaceURI);
    // public override System.String GetAttribute(System.Int32 i)
    // Offset: 0xED0698
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::GetAttribute(System.Int32 i)
    ::StringW GetAttribute(int i);
    // public override System.Boolean MoveToAttribute(System.String name)
    // Offset: 0xED073C
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::MoveToAttribute(System.String name)
    bool MoveToAttribute(::StringW name);
    // public override System.Void MoveToAttribute(System.Int32 i)
    // Offset: 0xED07D8
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Void XmlReader::MoveToAttribute(System.Int32 i)
    void MoveToAttribute(int i);
    // public override System.Boolean MoveToFirstAttribute()
    // Offset: 0xED087C
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::MoveToFirstAttribute()
    bool MoveToFirstAttribute();
    // public override System.Boolean MoveToNextAttribute()
    // Offset: 0xED08CC
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::MoveToNextAttribute()
    bool MoveToNextAttribute();
    // public override System.Boolean MoveToElement()
    // Offset: 0xED0930
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::MoveToElement()
    bool MoveToElement();
    // public override System.Boolean Read()
    // Offset: 0xED0988
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::Read()
    bool Read();
    // public override System.Void Close()
    // Offset: 0xED0F60
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Void XmlReader::Close()
    void Close();
    // public override System.Void Skip()
    // Offset: 0xED0FC4
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Void XmlReader::Skip()
    void Skip();
    // public override System.String LookupNamespace(System.String prefix)
    // Offset: 0xED10DC
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::LookupNamespace(System.String prefix)
    ::StringW LookupNamespace(::StringW prefix);
    // public override System.Void ResolveEntity()
    // Offset: 0xED1100
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Void XmlReader::ResolveEntity()
    void ResolveEntity();
    // public override System.Boolean ReadAttributeValue()
    // Offset: 0xED1140
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::ReadAttributeValue()
    bool ReadAttributeValue();
  }; // System.Xml.XsdCachingReader
  #pragma pack(pop)
  static check_size<sizeof(XsdCachingReader), 104 + sizeof(::System::Xml::ValidatingReaderNodeData*)> __System_Xml_XsdCachingReaderSizeCheck;
  static_assert(sizeof(XsdCachingReader) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XsdCachingReader::CachingReaderState, "System.Xml", "XsdCachingReader/CachingReaderState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::System_Xml_IXmlLineInfo_get_LineNumber
// Il2CppName: System.Xml.IXmlLineInfo.get_LineNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::System_Xml_IXmlLineInfo_get_LineNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "System.Xml.IXmlLineInfo.get_LineNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::System_Xml_IXmlLineInfo_get_LinePosition
// Il2CppName: System.Xml.IXmlLineInfo.get_LinePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::System_Xml_IXmlLineInfo_get_LinePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "System.Xml.IXmlLineInfo.get_LinePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XsdCachingReader::*)(::System::Xml::XmlReader*)>(&System::Xml::XsdCachingReader::Reset)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::RecordTextNode
// Il2CppName: RecordTextNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::ValidatingReaderNodeData* (System::Xml::XsdCachingReader::*)(::StringW, ::StringW, int, int, int)>(&System::Xml::XsdCachingReader::RecordTextNode)> {
  static const MethodInfo* get() {
    static auto* textValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* originalStringValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lineNo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* linePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "RecordTextNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textValue, originalStringValue, depth, lineNo, linePos});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::SwitchTextNodeAndEndElement
// Il2CppName: SwitchTextNodeAndEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XsdCachingReader::*)(::StringW, ::StringW)>(&System::Xml::XsdCachingReader::SwitchTextNodeAndEndElement)> {
  static const MethodInfo* get() {
    static auto* textValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* originalStringValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "SwitchTextNodeAndEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textValue, originalStringValue});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::RecordEndElementNode
// Il2CppName: RecordEndElementNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::RecordEndElementNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "RecordEndElementNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::System_Xml_IXmlLineInfo_HasLineInfo
// Il2CppName: System.Xml.IXmlLineInfo.HasLineInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::System_Xml_IXmlLineInfo_HasLineInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "System.Xml.IXmlLineInfo.HasLineInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::SetToReplayMode
// Il2CppName: SetToReplayMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::SetToReplayMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "SetToReplayMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::GetCoreReader
// Il2CppName: GetCoreReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlReader* (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::GetCoreReader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "GetCoreReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::GetLineInfo
// Il2CppName: GetLineInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::IXmlLineInfo* (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::GetLineInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "GetLineInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::ClearAttributesInfo
// Il2CppName: ClearAttributesInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::ClearAttributesInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "ClearAttributesInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::AddAttribute
// Il2CppName: AddAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::ValidatingReaderNodeData* (System::Xml::XsdCachingReader::*)(int)>(&System::Xml::XsdCachingReader::AddAttribute)> {
  static const MethodInfo* get() {
    static auto* attIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "AddAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attIndex});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::AddContent
// Il2CppName: AddContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::ValidatingReaderNodeData* (System::Xml::XsdCachingReader::*)(::System::Xml::XmlNodeType)>(&System::Xml::XsdCachingReader::AddContent)> {
  static const MethodInfo* get() {
    static auto* nodeType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "AddContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeType});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::RecordAttributes
// Il2CppName: RecordAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::RecordAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "RecordAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::GetAttributeIndexWithoutPrefix
// Il2CppName: GetAttributeIndexWithoutPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XsdCachingReader::*)(::StringW)>(&System::Xml::XsdCachingReader::GetAttributeIndexWithoutPrefix)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "GetAttributeIndexWithoutPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::GetAttributeIndexWithPrefix
// Il2CppName: GetAttributeIndexWithPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XsdCachingReader::*)(::StringW)>(&System::Xml::XsdCachingReader::GetAttributeIndexWithPrefix)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "GetAttributeIndexWithPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::CreateDummyTextNode
// Il2CppName: CreateDummyTextNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::ValidatingReaderNodeData* (System::Xml::XsdCachingReader::*)(::StringW, int)>(&System::Xml::XsdCachingReader::CreateDummyTextNode)> {
  static const MethodInfo* get() {
    static auto* attributeValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "CreateDummyTextNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeValue, depth});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::get_Settings
// Il2CppName: get_Settings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlReaderSettings* (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::get_Settings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "get_Settings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::get_NodeType
// Il2CppName: get_NodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeType (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::get_NodeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "get_NodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::get_LocalName
// Il2CppName: get_LocalName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::get_LocalName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "get_LocalName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::get_NamespaceURI
// Il2CppName: get_NamespaceURI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::get_NamespaceURI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "get_NamespaceURI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::get_Prefix
// Il2CppName: get_Prefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::get_Prefix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "get_Prefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::get_Depth
// Il2CppName: get_Depth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::get_Depth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "get_Depth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::get_BaseURI
// Il2CppName: get_BaseURI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::get_BaseURI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "get_BaseURI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::get_IsEmptyElement
// Il2CppName: get_IsEmptyElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::get_IsEmptyElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "get_IsEmptyElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::get_IsDefault
// Il2CppName: get_IsDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::get_IsDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "get_IsDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::get_QuoteChar
// Il2CppName: get_QuoteChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::get_QuoteChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "get_QuoteChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::get_XmlSpace
// Il2CppName: get_XmlSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlSpace (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::get_XmlSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "get_XmlSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::get_XmlLang
// Il2CppName: get_XmlLang
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::get_XmlLang)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "get_XmlLang", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::get_AttributeCount
// Il2CppName: get_AttributeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::get_AttributeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "get_AttributeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::get_EOF
// Il2CppName: get_EOF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::get_EOF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "get_EOF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::get_ReadState
// Il2CppName: get_ReadState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::ReadState (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::get_ReadState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "get_ReadState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::get_NameTable
// Il2CppName: get_NameTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNameTable* (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::get_NameTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "get_NameTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::GetAttribute
// Il2CppName: GetAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XsdCachingReader::*)(::StringW)>(&System::Xml::XsdCachingReader::GetAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "GetAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::GetAttribute
// Il2CppName: GetAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XsdCachingReader::*)(::StringW, ::StringW)>(&System::Xml::XsdCachingReader::GetAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "GetAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, namespaceURI});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::GetAttribute
// Il2CppName: GetAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XsdCachingReader::*)(int)>(&System::Xml::XsdCachingReader::GetAttribute)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "GetAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::MoveToAttribute
// Il2CppName: MoveToAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XsdCachingReader::*)(::StringW)>(&System::Xml::XsdCachingReader::MoveToAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "MoveToAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::MoveToAttribute
// Il2CppName: MoveToAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XsdCachingReader::*)(int)>(&System::Xml::XsdCachingReader::MoveToAttribute)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "MoveToAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::MoveToFirstAttribute
// Il2CppName: MoveToFirstAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::MoveToFirstAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "MoveToFirstAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::MoveToNextAttribute
// Il2CppName: MoveToNextAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::MoveToNextAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "MoveToNextAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::MoveToElement
// Il2CppName: MoveToElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::MoveToElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "MoveToElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::Read)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::Skip
// Il2CppName: Skip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::Skip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "Skip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::LookupNamespace
// Il2CppName: LookupNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XsdCachingReader::*)(::StringW)>(&System::Xml::XsdCachingReader::LookupNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "LookupNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::ResolveEntity
// Il2CppName: ResolveEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::ResolveEntity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "ResolveEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XsdCachingReader::ReadAttributeValue
// Il2CppName: ReadAttributeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XsdCachingReader::*)()>(&System::Xml::XsdCachingReader::ReadAttributeValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XsdCachingReader*), "ReadAttributeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
