// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlReaderSettings
  class XmlReaderSettings;
  // Forward declaring type: XmlNodeType
  struct XmlNodeType;
  // Forward declaring type: XmlSpace
  struct XmlSpace;
  // Forward declaring type: ReadState
  struct ReadState;
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: XmlNamespaceManager
  class XmlNamespaceManager;
  // Forward declaring type: IDtdInfo
  class IDtdInfo;
  // Forward declaring type: XmlWriter
  class XmlWriter;
  // Forward declaring type: XmlTextWriter
  class XmlTextWriter;
  // Forward declaring type: XmlParserContext
  class XmlParserContext;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: IXmlSchemaInfo
  class IXmlSchemaInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: StringWriter
  class StringWriter;
  // Forward declaring type: Stream
  class Stream;
  // Forward declaring type: TextReader
  class TextReader;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XmlReader
  class XmlReader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XmlReader);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlReader*, "System.Xml", "XmlReader");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlReader
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: 6A40FC
  // [DebuggerDisplayAttribute] Offset: 6A40FC
  // [DefaultMemberAttribute] Offset: 6A40FC
  class XmlReader : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private System.UInt32 IsTextualNodeBitmap
    static uint _get_IsTextualNodeBitmap();
    // Set static field: static private System.UInt32 IsTextualNodeBitmap
    static void _set_IsTextualNodeBitmap(uint value);
    // Get static field: static private System.UInt32 CanReadContentAsBitmap
    static uint _get_CanReadContentAsBitmap();
    // Set static field: static private System.UInt32 CanReadContentAsBitmap
    static void _set_CanReadContentAsBitmap(uint value);
    // Get static field: static private System.UInt32 HasValueBitmap
    static uint _get_HasValueBitmap();
    // Set static field: static private System.UInt32 HasValueBitmap
    static void _set_HasValueBitmap(uint value);
    // public System.Xml.XmlReaderSettings get_Settings()
    // Offset: 0x10255D4
    ::System::Xml::XmlReaderSettings* get_Settings();
    // public System.Xml.XmlNodeType get_NodeType()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Xml::XmlNodeType get_NodeType();
    // public System.String get_Name()
    // Offset: 0x10255DC
    ::StringW get_Name();
    // public System.String get_LocalName()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_LocalName();
    // public System.String get_NamespaceURI()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_NamespaceURI();
    // public System.String get_Prefix()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_Prefix();
    // public System.String get_Value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_Value();
    // public System.Int32 get_Depth()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Depth();
    // public System.String get_BaseURI()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_BaseURI();
    // public System.Boolean get_IsEmptyElement()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsEmptyElement();
    // public System.Boolean get_IsDefault()
    // Offset: 0x10256C4
    bool get_IsDefault();
    // public System.Char get_QuoteChar()
    // Offset: 0x10256CC
    ::Il2CppChar get_QuoteChar();
    // public System.Xml.XmlSpace get_XmlSpace()
    // Offset: 0x10256D4
    ::System::Xml::XmlSpace get_XmlSpace();
    // public System.String get_XmlLang()
    // Offset: 0x10256DC
    ::StringW get_XmlLang();
    // public System.Xml.Schema.IXmlSchemaInfo get_SchemaInfo()
    // Offset: 0x1025728
    ::System::Xml::Schema::IXmlSchemaInfo* get_SchemaInfo();
    // public System.Type get_ValueType()
    // Offset: 0x1025774
    ::System::Type* get_ValueType();
    // public System.Int32 get_AttributeCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_AttributeCount();
    // public System.Boolean get_EOF()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_EOF();
    // public System.Xml.ReadState get_ReadState()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Xml::ReadState get_ReadState();
    // public System.Xml.XmlNameTable get_NameTable()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Xml::XmlNameTable* get_NameTable();
    // public System.Boolean get_CanResolveEntity()
    // Offset: 0x10259DC
    bool get_CanResolveEntity();
    // public System.Boolean get_CanReadValueChunk()
    // Offset: 0x10259E4
    bool get_CanReadValueChunk();
    // public System.Boolean get_HasAttributes()
    // Offset: 0x1026A48
    bool get_HasAttributes();
    // System.Xml.XmlNamespaceManager get_NamespaceManager()
    // Offset: 0x1026AD8
    ::System::Xml::XmlNamespaceManager* get_NamespaceManager();
    // System.Boolean get_IsDefaultInternal()
    // Offset: 0x1026B5C
    bool get_IsDefaultInternal();
    // System.Xml.IDtdInfo get_DtdInfo()
    // Offset: 0x1026C48
    ::System::Xml::IDtdInfo* get_DtdInfo();
    // protected System.Void .ctor()
    // Offset: 0x1019378
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlReader* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlReader*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x102750C
    static void _cctor();
    // public System.String GetAttribute(System.String name)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW GetAttribute(::StringW name);
    // public System.String GetAttribute(System.String name, System.String namespaceURI)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW GetAttribute(::StringW name, ::StringW namespaceURI);
    // public System.String GetAttribute(System.Int32 i)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW GetAttribute(int i);
    // public System.Boolean MoveToAttribute(System.String name)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool MoveToAttribute(::StringW name);
    // public System.Void MoveToAttribute(System.Int32 i)
    // Offset: 0x10257EC
    void MoveToAttribute(int i);
    // public System.Boolean MoveToFirstAttribute()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool MoveToFirstAttribute();
    // public System.Boolean MoveToNextAttribute()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool MoveToNextAttribute();
    // public System.Boolean MoveToElement()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool MoveToElement();
    // public System.Boolean ReadAttributeValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ReadAttributeValue();
    // public System.Boolean Read()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Read();
    // public System.Void Close()
    // Offset: 0x10258BC
    void Close();
    // public System.Void Skip()
    // Offset: 0x10258C0
    void Skip();
    // public System.String LookupNamespace(System.String prefix)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW LookupNamespace(::StringW prefix);
    // public System.Void ResolveEntity()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ResolveEntity();
    // public System.Int32 ReadValueChunk(System.Char[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x10259EC
    int ReadValueChunk(::ArrayW<::Il2CppChar> buffer, int index, int count);
    // public System.String ReadString()
    // Offset: 0x101BC8C
    ::StringW ReadString();
    // public System.Xml.XmlNodeType MoveToContent()
    // Offset: 0x1025AC4
    ::System::Xml::XmlNodeType MoveToContent();
    // public System.Void ReadStartElement()
    // Offset: 0x1025B54
    void ReadStartElement();
    // public System.String ReadElementString()
    // Offset: 0x1025C6C
    ::StringW ReadElementString();
    // public System.Void ReadEndElement()
    // Offset: 0x1025F58
    void ReadEndElement();
    // public System.Boolean IsStartElement(System.String localname, System.String ns)
    // Offset: 0x1026070
    bool IsStartElement(::StringW localname, ::StringW ns);
    // public System.String ReadInnerXml()
    // Offset: 0x1026104
    ::StringW ReadInnerXml();
    // private System.Void WriteNode(System.Xml.XmlWriter xtw, System.Boolean defattr)
    // Offset: 0x1026500
    void WriteNode(::System::Xml::XmlWriter* xtw, bool defattr);
    // private System.Void WriteAttributeValue(System.Xml.XmlWriter xtw)
    // Offset: 0x1026420
    void WriteAttributeValue(::System::Xml::XmlWriter* xtw);
    // private System.Xml.XmlWriter CreateWriterForInnerOuterXml(System.IO.StringWriter sw)
    // Offset: 0x10263A8
    ::System::Xml::XmlWriter* CreateWriterForInnerOuterXml(::System::IO::StringWriter* sw);
    // private System.Void SetNamespacesFlag(System.Xml.XmlTextWriter xtw)
    // Offset: 0x1026948
    void SetNamespacesFlag(::System::Xml::XmlTextWriter* xtw);
    // public System.Void Dispose()
    // Offset: 0x1026A70
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1026A84
    void Dispose(bool disposing);
    // static System.Boolean IsTextualNode(System.Xml.XmlNodeType nodeType)
    // Offset: 0x1025A48
    static bool IsTextualNode(::System::Xml::XmlNodeType nodeType);
    // static System.Boolean HasValueInternal(System.Xml.XmlNodeType nodeType)
    // Offset: 0x1026AE0
    static bool HasValueInternal(::System::Xml::XmlNodeType nodeType);
    // private System.Boolean SkipSubtree()
    // Offset: 0x1025904
    bool SkipSubtree();
    // static public System.Xml.XmlReader Create(System.IO.Stream input, System.Xml.XmlReaderSettings settings, System.String baseUri)
    // Offset: 0x1026C50
    static ::System::Xml::XmlReader* Create(::System::IO::Stream* input, ::System::Xml::XmlReaderSettings* settings, ::StringW baseUri);
    // static public System.Xml.XmlReader Create(System.IO.TextReader input, System.Xml.XmlReaderSettings settings, System.String baseUri)
    // Offset: 0x1026EC0
    static ::System::Xml::XmlReader* Create(::System::IO::TextReader* input, ::System::Xml::XmlReaderSettings* settings, ::StringW baseUri);
    // static System.Xml.XmlReader CreateSqlReader(System.IO.Stream input, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext)
    // Offset: 0x1027078
    static ::System::Xml::XmlReader* CreateSqlReader(::System::IO::Stream* input, ::System::Xml::XmlReaderSettings* settings, ::System::Xml::XmlParserContext* inputContext);
    // static System.Int32 CalcBufferSize(System.IO.Stream input)
    // Offset: 0x102739C
    static int CalcBufferSize(::System::IO::Stream* input);
  }; // System.Xml.XmlReader
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlReader::get_Settings
// Il2CppName: get_Settings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlReaderSettings* (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_Settings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_Settings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_NodeType
// Il2CppName: get_NodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeType (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_NodeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_NodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_LocalName
// Il2CppName: get_LocalName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_LocalName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_LocalName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_NamespaceURI
// Il2CppName: get_NamespaceURI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_NamespaceURI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_NamespaceURI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_Prefix
// Il2CppName: get_Prefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_Prefix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_Prefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_Depth
// Il2CppName: get_Depth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_Depth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_Depth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_BaseURI
// Il2CppName: get_BaseURI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_BaseURI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_BaseURI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_IsEmptyElement
// Il2CppName: get_IsEmptyElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_IsEmptyElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_IsEmptyElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_IsDefault
// Il2CppName: get_IsDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_IsDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_IsDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_QuoteChar
// Il2CppName: get_QuoteChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_QuoteChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_QuoteChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_XmlSpace
// Il2CppName: get_XmlSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlSpace (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_XmlSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_XmlSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_XmlLang
// Il2CppName: get_XmlLang
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_XmlLang)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_XmlLang", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_SchemaInfo
// Il2CppName: get_SchemaInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::IXmlSchemaInfo* (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_SchemaInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_SchemaInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_ValueType
// Il2CppName: get_ValueType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_ValueType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_ValueType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_AttributeCount
// Il2CppName: get_AttributeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_AttributeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_AttributeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_EOF
// Il2CppName: get_EOF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_EOF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_EOF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_ReadState
// Il2CppName: get_ReadState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::ReadState (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_ReadState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_ReadState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_NameTable
// Il2CppName: get_NameTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNameTable* (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_NameTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_NameTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_CanResolveEntity
// Il2CppName: get_CanResolveEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_CanResolveEntity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_CanResolveEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_CanReadValueChunk
// Il2CppName: get_CanReadValueChunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_CanReadValueChunk)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_CanReadValueChunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_HasAttributes
// Il2CppName: get_HasAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_HasAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_HasAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_NamespaceManager
// Il2CppName: get_NamespaceManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNamespaceManager* (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_NamespaceManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_NamespaceManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_IsDefaultInternal
// Il2CppName: get_IsDefaultInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_IsDefaultInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_IsDefaultInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::get_DtdInfo
// Il2CppName: get_DtdInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::IDtdInfo* (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::get_DtdInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "get_DtdInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlReader::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::XmlReader::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::GetAttribute
// Il2CppName: GetAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlReader::*)(::StringW)>(&System::Xml::XmlReader::GetAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "GetAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::GetAttribute
// Il2CppName: GetAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlReader::*)(::StringW, ::StringW)>(&System::Xml::XmlReader::GetAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "GetAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, namespaceURI});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::GetAttribute
// Il2CppName: GetAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlReader::*)(int)>(&System::Xml::XmlReader::GetAttribute)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "GetAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::MoveToAttribute
// Il2CppName: MoveToAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReader::*)(::StringW)>(&System::Xml::XmlReader::MoveToAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "MoveToAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::MoveToAttribute
// Il2CppName: MoveToAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReader::*)(int)>(&System::Xml::XmlReader::MoveToAttribute)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "MoveToAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::MoveToFirstAttribute
// Il2CppName: MoveToFirstAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::MoveToFirstAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "MoveToFirstAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::MoveToNextAttribute
// Il2CppName: MoveToNextAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::MoveToNextAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "MoveToNextAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::MoveToElement
// Il2CppName: MoveToElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::MoveToElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "MoveToElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::ReadAttributeValue
// Il2CppName: ReadAttributeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::ReadAttributeValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "ReadAttributeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::Read)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::Skip
// Il2CppName: Skip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::Skip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "Skip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::LookupNamespace
// Il2CppName: LookupNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlReader::*)(::StringW)>(&System::Xml::XmlReader::LookupNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "LookupNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::ResolveEntity
// Il2CppName: ResolveEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::ResolveEntity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "ResolveEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::ReadValueChunk
// Il2CppName: ReadValueChunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlReader::*)(::ArrayW<::Il2CppChar>, int, int)>(&System::Xml::XmlReader::ReadValueChunk)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "ReadValueChunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::ReadString
// Il2CppName: ReadString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::ReadString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "ReadString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::MoveToContent
// Il2CppName: MoveToContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeType (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::MoveToContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "MoveToContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::ReadStartElement
// Il2CppName: ReadStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::ReadStartElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "ReadStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::ReadElementString
// Il2CppName: ReadElementString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::ReadElementString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "ReadElementString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::ReadEndElement
// Il2CppName: ReadEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::ReadEndElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "ReadEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::IsStartElement
// Il2CppName: IsStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReader::*)(::StringW, ::StringW)>(&System::Xml::XmlReader::IsStartElement)> {
  static const MethodInfo* get() {
    static auto* localname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "IsStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localname, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::ReadInnerXml
// Il2CppName: ReadInnerXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::ReadInnerXml)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "ReadInnerXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::WriteNode
// Il2CppName: WriteNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReader::*)(::System::Xml::XmlWriter*, bool)>(&System::Xml::XmlReader::WriteNode)> {
  static const MethodInfo* get() {
    static auto* xtw = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    static auto* defattr = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "WriteNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xtw, defattr});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::WriteAttributeValue
// Il2CppName: WriteAttributeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReader::*)(::System::Xml::XmlWriter*)>(&System::Xml::XmlReader::WriteAttributeValue)> {
  static const MethodInfo* get() {
    static auto* xtw = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "WriteAttributeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xtw});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::CreateWriterForInnerOuterXml
// Il2CppName: CreateWriterForInnerOuterXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlWriter* (System::Xml::XmlReader::*)(::System::IO::StringWriter*)>(&System::Xml::XmlReader::CreateWriterForInnerOuterXml)> {
  static const MethodInfo* get() {
    static auto* sw = &::il2cpp_utils::GetClassFromName("System.IO", "StringWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "CreateWriterForInnerOuterXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sw});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::SetNamespacesFlag
// Il2CppName: SetNamespacesFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReader::*)(::System::Xml::XmlTextWriter*)>(&System::Xml::XmlReader::SetNamespacesFlag)> {
  static const MethodInfo* get() {
    static auto* xtw = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTextWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "SetNamespacesFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xtw});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlReader::*)(bool)>(&System::Xml::XmlReader::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::IsTextualNode
// Il2CppName: IsTextualNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Xml::XmlNodeType)>(&System::Xml::XmlReader::IsTextualNode)> {
  static const MethodInfo* get() {
    static auto* nodeType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "IsTextualNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeType});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::HasValueInternal
// Il2CppName: HasValueInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Xml::XmlNodeType)>(&System::Xml::XmlReader::HasValueInternal)> {
  static const MethodInfo* get() {
    static auto* nodeType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "HasValueInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeType});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::SkipSubtree
// Il2CppName: SkipSubtree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlReader::*)()>(&System::Xml::XmlReader::SkipSubtree)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "SkipSubtree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlReader* (*)(::System::IO::Stream*, ::System::Xml::XmlReaderSettings*, ::StringW)>(&System::Xml::XmlReader::Create)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReaderSettings")->byval_arg;
    static auto* baseUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, settings, baseUri});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlReader* (*)(::System::IO::TextReader*, ::System::Xml::XmlReaderSettings*, ::StringW)>(&System::Xml::XmlReader::Create)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System.IO", "TextReader")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReaderSettings")->byval_arg;
    static auto* baseUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, settings, baseUri});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::CreateSqlReader
// Il2CppName: CreateSqlReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlReader* (*)(::System::IO::Stream*, ::System::Xml::XmlReaderSettings*, ::System::Xml::XmlParserContext*)>(&System::Xml::XmlReader::CreateSqlReader)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReaderSettings")->byval_arg;
    static auto* inputContext = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlParserContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "CreateSqlReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, settings, inputContext});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlReader::CalcBufferSize
// Il2CppName: CalcBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IO::Stream*)>(&System::Xml::XmlReader::CalcBufferSize)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlReader*), "CalcBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
