// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Decimal
  struct Decimal;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: BinXmlSqlMoney
  struct BinXmlSqlMoney;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::BinXmlSqlMoney, "System.Xml", "BinXmlSqlMoney");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Xml.BinXmlSqlMoney
  // [TokenAttribute] Offset: FFFFFFFF
  struct BinXmlSqlMoney/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int64 data
    // Size: 0x8
    // Offset: 0x0
    int64_t data;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Creating value type constructor for type: BinXmlSqlMoney
    constexpr BinXmlSqlMoney(int64_t data_ = {}) noexcept : data{data_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator int64_t
    constexpr operator int64_t() const noexcept {
      return data;
    }
    // Get instance field reference: private System.Int64 data
    [[deprecated("Use field access instead!")]] int64_t& dyn_data();
    // public System.Void .ctor(System.Int32 v)
    // Offset: 0xB62700
    BinXmlSqlMoney(int v);
    // public System.Void .ctor(System.Int64 v)
    // Offset: 0xB6270C
    // ABORTED: conflicts with another method.  BinXmlSqlMoney(int64_t v);
    // public System.Decimal ToDecimal()
    // Offset: 0xB62714
    ::System::Decimal ToDecimal();
    // public override System.String ToString()
    // Offset: 0xB6275C
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // System.Xml.BinXmlSqlMoney
  #pragma pack(pop)
  static check_size<sizeof(BinXmlSqlMoney), 0 + sizeof(int64_t)> __System_Xml_BinXmlSqlMoneySizeCheck;
  static_assert(sizeof(BinXmlSqlMoney) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::BinXmlSqlMoney::BinXmlSqlMoney
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::BinXmlSqlMoney::BinXmlSqlMoney
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::BinXmlSqlMoney::ToDecimal
// Il2CppName: ToDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (System::Xml::BinXmlSqlMoney::*)()>(&System::Xml::BinXmlSqlMoney::ToDecimal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::BinXmlSqlMoney), "ToDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::BinXmlSqlMoney::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::BinXmlSqlMoney::*)()>(&System::Xml::BinXmlSqlMoney::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::BinXmlSqlMoney), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
