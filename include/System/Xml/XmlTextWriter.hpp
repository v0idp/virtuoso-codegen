// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.XmlWriter
#include "System/Xml/XmlWriter.hpp"
// Including type: System.Xml.Formatting
#include "System/Xml/Formatting.hpp"
// Including type: System.Xml.XmlCharType
#include "System/Xml/XmlCharType.hpp"
// Including type: System.Xml.XmlSpace
#include "System/Xml/XmlSpace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Skipping declaration: NamespaceState because it is already included!
  // Forward declaring type: WriteState
  struct WriteState;
  // Skipping declaration: Token because it is already included!
  // Forward declaring type: XmlTextWriterBase64Encoder
  class XmlTextWriterBase64Encoder;
  // Forward declaring type: XmlTextEncoder
  class XmlTextEncoder;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
  // Forward declaring type: TextWriter
  class TextWriter;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XmlTextWriter
  class XmlTextWriter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XmlTextWriter);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlTextWriter*, "System.Xml", "XmlTextWriter");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlTextWriter
  // [TokenAttribute] Offset: FFFFFFFF
  // [EditorBrowsableAttribute] Offset: 6A419C
  class XmlTextWriter : public ::System::Xml::XmlWriter {
    public:
    // Nested type: ::System::Xml::XmlTextWriter::NamespaceState
    struct NamespaceState;
    // Nested type: ::System::Xml::XmlTextWriter::TagInfo
    struct TagInfo;
    // Nested type: ::System::Xml::XmlTextWriter::Namespace
    struct Namespace;
    // Nested type: ::System::Xml::XmlTextWriter::SpecialAttr
    struct SpecialAttr;
    // Nested type: ::System::Xml::XmlTextWriter::State
    struct State;
    // Nested type: ::System::Xml::XmlTextWriter::Token
    struct Token;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.XmlTextWriter/System.Xml.NamespaceState
    // [TokenAttribute] Offset: FFFFFFFF
    struct NamespaceState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: NamespaceState
      constexpr NamespaceState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.NamespaceState Uninitialized
      static constexpr const int Uninitialized = 0;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.NamespaceState Uninitialized
      static ::System::Xml::XmlTextWriter::NamespaceState _get_Uninitialized();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.NamespaceState Uninitialized
      static void _set_Uninitialized(::System::Xml::XmlTextWriter::NamespaceState value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.NamespaceState NotDeclaredButInScope
      static constexpr const int NotDeclaredButInScope = 1;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.NamespaceState NotDeclaredButInScope
      static ::System::Xml::XmlTextWriter::NamespaceState _get_NotDeclaredButInScope();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.NamespaceState NotDeclaredButInScope
      static void _set_NotDeclaredButInScope(::System::Xml::XmlTextWriter::NamespaceState value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.NamespaceState DeclaredButNotWrittenOut
      static constexpr const int DeclaredButNotWrittenOut = 2;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.NamespaceState DeclaredButNotWrittenOut
      static ::System::Xml::XmlTextWriter::NamespaceState _get_DeclaredButNotWrittenOut();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.NamespaceState DeclaredButNotWrittenOut
      static void _set_DeclaredButNotWrittenOut(::System::Xml::XmlTextWriter::NamespaceState value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.NamespaceState DeclaredAndWrittenOut
      static constexpr const int DeclaredAndWrittenOut = 3;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.NamespaceState DeclaredAndWrittenOut
      static ::System::Xml::XmlTextWriter::NamespaceState _get_DeclaredAndWrittenOut();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.NamespaceState DeclaredAndWrittenOut
      static void _set_DeclaredAndWrittenOut(::System::Xml::XmlTextWriter::NamespaceState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Xml.XmlTextWriter/System.Xml.NamespaceState
    #pragma pack(pop)
    static check_size<sizeof(XmlTextWriter::NamespaceState), 0 + sizeof(int)> __System_Xml_XmlTextWriter_NamespaceStateSizeCheck;
    static_assert(sizeof(XmlTextWriter::NamespaceState) == 0x4);
    // Size: 0x31
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Xml.XmlTextWriter/System.Xml.TagInfo
    // [TokenAttribute] Offset: FFFFFFFF
    struct TagInfo/*, public ::System::ValueType*/ {
      public:
      public:
      // System.String name
      // Size: 0x8
      // Offset: 0x0
      ::StringW name;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // System.String prefix
      // Size: 0x8
      // Offset: 0x8
      ::StringW prefix;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // System.String defaultNs
      // Size: 0x8
      // Offset: 0x10
      ::StringW defaultNs;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // System.Xml.XmlTextWriter/System.Xml.NamespaceState defaultNsState
      // Size: 0x4
      // Offset: 0x18
      ::System::Xml::XmlTextWriter::NamespaceState defaultNsState;
      // Field size check
      static_assert(sizeof(::System::Xml::XmlTextWriter::NamespaceState) == 0x4);
      // System.Xml.XmlSpace xmlSpace
      // Size: 0x4
      // Offset: 0x1C
      ::System::Xml::XmlSpace xmlSpace;
      // Field size check
      static_assert(sizeof(::System::Xml::XmlSpace) == 0x4);
      // System.String xmlLang
      // Size: 0x8
      // Offset: 0x20
      ::StringW xmlLang;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // System.Int32 prevNsTop
      // Size: 0x4
      // Offset: 0x28
      int prevNsTop;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.Int32 prefixCount
      // Size: 0x4
      // Offset: 0x2C
      int prefixCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.Boolean mixed
      // Size: 0x1
      // Offset: 0x30
      bool mixed;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: TagInfo
      constexpr TagInfo(::StringW name_ = {}, ::StringW prefix_ = {}, ::StringW defaultNs_ = {}, ::System::Xml::XmlTextWriter::NamespaceState defaultNsState_ = {}, ::System::Xml::XmlSpace xmlSpace_ = {}, ::StringW xmlLang_ = {}, int prevNsTop_ = {}, int prefixCount_ = {}, bool mixed_ = {}) noexcept : name{name_}, prefix{prefix_}, defaultNs{defaultNs_}, defaultNsState{defaultNsState_}, xmlSpace{xmlSpace_}, xmlLang{xmlLang_}, prevNsTop{prevNsTop_}, prefixCount{prefixCount_}, mixed{mixed_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: System.String name
      [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
      // Get instance field reference: System.String prefix
      [[deprecated("Use field access instead!")]] ::StringW& dyn_prefix();
      // Get instance field reference: System.String defaultNs
      [[deprecated("Use field access instead!")]] ::StringW& dyn_defaultNs();
      // Get instance field reference: System.Xml.XmlTextWriter/System.Xml.NamespaceState defaultNsState
      [[deprecated("Use field access instead!")]] ::System::Xml::XmlTextWriter::NamespaceState& dyn_defaultNsState();
      // Get instance field reference: System.Xml.XmlSpace xmlSpace
      [[deprecated("Use field access instead!")]] ::System::Xml::XmlSpace& dyn_xmlSpace();
      // Get instance field reference: System.String xmlLang
      [[deprecated("Use field access instead!")]] ::StringW& dyn_xmlLang();
      // Get instance field reference: System.Int32 prevNsTop
      [[deprecated("Use field access instead!")]] int& dyn_prevNsTop();
      // Get instance field reference: System.Int32 prefixCount
      [[deprecated("Use field access instead!")]] int& dyn_prefixCount();
      // Get instance field reference: System.Boolean mixed
      [[deprecated("Use field access instead!")]] bool& dyn_mixed();
      // System.Void Init(System.Int32 nsTop)
      // Offset: 0xC240C4
      void Init(int nsTop);
    }; // System.Xml.XmlTextWriter/System.Xml.TagInfo
    #pragma pack(pop)
    static check_size<sizeof(XmlTextWriter::TagInfo), 48 + sizeof(bool)> __System_Xml_XmlTextWriter_TagInfoSizeCheck;
    static_assert(sizeof(XmlTextWriter::TagInfo) == 0x31);
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Xml.XmlTextWriter/System.Xml.Namespace
    // [TokenAttribute] Offset: FFFFFFFF
    struct Namespace/*, public ::System::ValueType*/ {
      public:
      public:
      // System.String prefix
      // Size: 0x8
      // Offset: 0x0
      ::StringW prefix;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // System.String ns
      // Size: 0x8
      // Offset: 0x8
      ::StringW ns;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // System.Boolean declared
      // Size: 0x1
      // Offset: 0x10
      bool declared;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: declared and: prevNsIndex
      char __padding2[0x3] = {};
      // System.Int32 prevNsIndex
      // Size: 0x4
      // Offset: 0x14
      int prevNsIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Namespace
      constexpr Namespace(::StringW prefix_ = {}, ::StringW ns_ = {}, bool declared_ = {}, int prevNsIndex_ = {}) noexcept : prefix{prefix_}, ns{ns_}, declared{declared_}, prevNsIndex{prevNsIndex_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: System.String prefix
      [[deprecated("Use field access instead!")]] ::StringW& dyn_prefix();
      // Get instance field reference: System.String ns
      [[deprecated("Use field access instead!")]] ::StringW& dyn_ns();
      // Get instance field reference: System.Boolean declared
      [[deprecated("Use field access instead!")]] bool& dyn_declared();
      // Get instance field reference: System.Int32 prevNsIndex
      [[deprecated("Use field access instead!")]] int& dyn_prevNsIndex();
      // System.Void Set(System.String prefix, System.String ns, System.Boolean declared)
      // Offset: 0xC240AC
      void Set(::StringW prefix, ::StringW ns, bool declared);
    }; // System.Xml.XmlTextWriter/System.Xml.Namespace
    #pragma pack(pop)
    static check_size<sizeof(XmlTextWriter::Namespace), 20 + sizeof(int)> __System_Xml_XmlTextWriter_NamespaceSizeCheck;
    static_assert(sizeof(XmlTextWriter::Namespace) == 0x18);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.XmlTextWriter/System.Xml.SpecialAttr
    // [TokenAttribute] Offset: FFFFFFFF
    struct SpecialAttr/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SpecialAttr
      constexpr SpecialAttr(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.SpecialAttr None
      static constexpr const int None = 0;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.SpecialAttr None
      static ::System::Xml::XmlTextWriter::SpecialAttr _get_None();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.SpecialAttr None
      static void _set_None(::System::Xml::XmlTextWriter::SpecialAttr value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.SpecialAttr XmlSpace
      static constexpr const int XmlSpace = 1;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.SpecialAttr XmlSpace
      static ::System::Xml::XmlTextWriter::SpecialAttr _get_XmlSpace();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.SpecialAttr XmlSpace
      static void _set_XmlSpace(::System::Xml::XmlTextWriter::SpecialAttr value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.SpecialAttr XmlLang
      static constexpr const int XmlLang = 2;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.SpecialAttr XmlLang
      static ::System::Xml::XmlTextWriter::SpecialAttr _get_XmlLang();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.SpecialAttr XmlLang
      static void _set_XmlLang(::System::Xml::XmlTextWriter::SpecialAttr value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.SpecialAttr XmlNs
      static constexpr const int XmlNs = 3;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.SpecialAttr XmlNs
      static ::System::Xml::XmlTextWriter::SpecialAttr _get_XmlNs();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.SpecialAttr XmlNs
      static void _set_XmlNs(::System::Xml::XmlTextWriter::SpecialAttr value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Xml.XmlTextWriter/System.Xml.SpecialAttr
    #pragma pack(pop)
    static check_size<sizeof(XmlTextWriter::SpecialAttr), 0 + sizeof(int)> __System_Xml_XmlTextWriter_SpecialAttrSizeCheck;
    static_assert(sizeof(XmlTextWriter::SpecialAttr) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.XmlTextWriter/System.Xml.State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.State Start
      static constexpr const int Start = 0;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.State Start
      static ::System::Xml::XmlTextWriter::State _get_Start();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.State Start
      static void _set_Start(::System::Xml::XmlTextWriter::State value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.State Prolog
      static constexpr const int Prolog = 1;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.State Prolog
      static ::System::Xml::XmlTextWriter::State _get_Prolog();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.State Prolog
      static void _set_Prolog(::System::Xml::XmlTextWriter::State value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.State PostDTD
      static constexpr const int PostDTD = 2;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.State PostDTD
      static ::System::Xml::XmlTextWriter::State _get_PostDTD();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.State PostDTD
      static void _set_PostDTD(::System::Xml::XmlTextWriter::State value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.State Element
      static constexpr const int Element = 3;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.State Element
      static ::System::Xml::XmlTextWriter::State _get_Element();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.State Element
      static void _set_Element(::System::Xml::XmlTextWriter::State value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.State Attribute
      static constexpr const int Attribute = 4;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.State Attribute
      static ::System::Xml::XmlTextWriter::State _get_Attribute();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.State Attribute
      static void _set_Attribute(::System::Xml::XmlTextWriter::State value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.State Content
      static constexpr const int Content = 5;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.State Content
      static ::System::Xml::XmlTextWriter::State _get_Content();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.State Content
      static void _set_Content(::System::Xml::XmlTextWriter::State value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.State AttrOnly
      static constexpr const int AttrOnly = 6;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.State AttrOnly
      static ::System::Xml::XmlTextWriter::State _get_AttrOnly();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.State AttrOnly
      static void _set_AttrOnly(::System::Xml::XmlTextWriter::State value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.State Epilog
      static constexpr const int Epilog = 7;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.State Epilog
      static ::System::Xml::XmlTextWriter::State _get_Epilog();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.State Epilog
      static void _set_Epilog(::System::Xml::XmlTextWriter::State value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.State Error
      static constexpr const int Error = 8;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.State Error
      static ::System::Xml::XmlTextWriter::State _get_Error();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.State Error
      static void _set_Error(::System::Xml::XmlTextWriter::State value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.State Closed
      static constexpr const int Closed = 9;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.State Closed
      static ::System::Xml::XmlTextWriter::State _get_Closed();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.State Closed
      static void _set_Closed(::System::Xml::XmlTextWriter::State value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Xml.XmlTextWriter/System.Xml.State
    #pragma pack(pop)
    static check_size<sizeof(XmlTextWriter::State), 0 + sizeof(int)> __System_Xml_XmlTextWriter_StateSizeCheck;
    static_assert(sizeof(XmlTextWriter::State) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.XmlTextWriter/System.Xml.Token
    // [TokenAttribute] Offset: FFFFFFFF
    struct Token/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Token
      constexpr Token(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.Token PI
      static constexpr const int PI = 0;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.Token PI
      static ::System::Xml::XmlTextWriter::Token _get_PI();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.Token PI
      static void _set_PI(::System::Xml::XmlTextWriter::Token value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.Token Doctype
      static constexpr const int Doctype = 1;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.Token Doctype
      static ::System::Xml::XmlTextWriter::Token _get_Doctype();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.Token Doctype
      static void _set_Doctype(::System::Xml::XmlTextWriter::Token value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.Token Comment
      static constexpr const int Comment = 2;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.Token Comment
      static ::System::Xml::XmlTextWriter::Token _get_Comment();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.Token Comment
      static void _set_Comment(::System::Xml::XmlTextWriter::Token value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.Token CData
      static constexpr const int CData = 3;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.Token CData
      static ::System::Xml::XmlTextWriter::Token _get_CData();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.Token CData
      static void _set_CData(::System::Xml::XmlTextWriter::Token value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.Token StartElement
      static constexpr const int StartElement = 4;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.Token StartElement
      static ::System::Xml::XmlTextWriter::Token _get_StartElement();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.Token StartElement
      static void _set_StartElement(::System::Xml::XmlTextWriter::Token value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.Token EndElement
      static constexpr const int EndElement = 5;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.Token EndElement
      static ::System::Xml::XmlTextWriter::Token _get_EndElement();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.Token EndElement
      static void _set_EndElement(::System::Xml::XmlTextWriter::Token value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.Token LongEndElement
      static constexpr const int LongEndElement = 6;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.Token LongEndElement
      static ::System::Xml::XmlTextWriter::Token _get_LongEndElement();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.Token LongEndElement
      static void _set_LongEndElement(::System::Xml::XmlTextWriter::Token value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.Token StartAttribute
      static constexpr const int StartAttribute = 7;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.Token StartAttribute
      static ::System::Xml::XmlTextWriter::Token _get_StartAttribute();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.Token StartAttribute
      static void _set_StartAttribute(::System::Xml::XmlTextWriter::Token value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.Token EndAttribute
      static constexpr const int EndAttribute = 8;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.Token EndAttribute
      static ::System::Xml::XmlTextWriter::Token _get_EndAttribute();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.Token EndAttribute
      static void _set_EndAttribute(::System::Xml::XmlTextWriter::Token value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.Token Content
      static constexpr const int Content = 9;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.Token Content
      static ::System::Xml::XmlTextWriter::Token _get_Content();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.Token Content
      static void _set_Content(::System::Xml::XmlTextWriter::Token value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.Token Base64
      static constexpr const int Base64 = 10;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.Token Base64
      static ::System::Xml::XmlTextWriter::Token _get_Base64();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.Token Base64
      static void _set_Base64(::System::Xml::XmlTextWriter::Token value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.Token RawData
      static constexpr const int RawData = 11;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.Token RawData
      static ::System::Xml::XmlTextWriter::Token _get_RawData();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.Token RawData
      static void _set_RawData(::System::Xml::XmlTextWriter::Token value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.Token Whitespace
      static constexpr const int Whitespace = 12;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.Token Whitespace
      static ::System::Xml::XmlTextWriter::Token _get_Whitespace();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.Token Whitespace
      static void _set_Whitespace(::System::Xml::XmlTextWriter::Token value);
      // static field const value: static public System.Xml.XmlTextWriter/System.Xml.Token Empty
      static constexpr const int Empty = 13;
      // Get static field: static public System.Xml.XmlTextWriter/System.Xml.Token Empty
      static ::System::Xml::XmlTextWriter::Token _get_Empty();
      // Set static field: static public System.Xml.XmlTextWriter/System.Xml.Token Empty
      static void _set_Empty(::System::Xml::XmlTextWriter::Token value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Xml.XmlTextWriter/System.Xml.Token
    #pragma pack(pop)
    static check_size<sizeof(XmlTextWriter::Token), 0 + sizeof(int)> __System_Xml_XmlTextWriter_TokenSizeCheck;
    static_assert(sizeof(XmlTextWriter::Token) == 0x4);
    public:
    // private System.IO.TextWriter textWriter
    // Size: 0x8
    // Offset: 0x18
    ::System::IO::TextWriter* textWriter;
    // Field size check
    static_assert(sizeof(::System::IO::TextWriter*) == 0x8);
    // private System.Xml.XmlTextEncoder xmlEncoder
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::XmlTextEncoder* xmlEncoder;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlTextEncoder*) == 0x8);
    // private System.Text.Encoding encoding
    // Size: 0x8
    // Offset: 0x28
    ::System::Text::Encoding* encoding;
    // Field size check
    static_assert(sizeof(::System::Text::Encoding*) == 0x8);
    // private System.Xml.Formatting formatting
    // Size: 0x4
    // Offset: 0x30
    ::System::Xml::Formatting formatting;
    // Field size check
    static_assert(sizeof(::System::Xml::Formatting) == 0x4);
    // private System.Boolean indented
    // Size: 0x1
    // Offset: 0x34
    bool indented;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: indented and: indentation
    char __padding4[0x3] = {};
    // private System.Int32 indentation
    // Size: 0x4
    // Offset: 0x38
    int indentation;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Char indentChar
    // Size: 0x2
    // Offset: 0x3C
    ::Il2CppChar indentChar;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // Padding between fields: indentChar and: stack
    char __padding6[0x2] = {};
    // private System.Xml.XmlTextWriter/System.Xml.TagInfo[] stack
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::System::Xml::XmlTextWriter::TagInfo> stack;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::XmlTextWriter::TagInfo>) == 0x8);
    // private System.Int32 top
    // Size: 0x4
    // Offset: 0x48
    int top;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: top and: stateTable
    char __padding8[0x4] = {};
    // private System.Xml.XmlTextWriter/System.Xml.State[] stateTable
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::System::Xml::XmlTextWriter::State> stateTable;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::XmlTextWriter::State>) == 0x8);
    // private System.Xml.XmlTextWriter/System.Xml.State currentState
    // Size: 0x4
    // Offset: 0x58
    ::System::Xml::XmlTextWriter::State currentState;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlTextWriter::State) == 0x4);
    // private System.Xml.XmlTextWriter/System.Xml.Token lastToken
    // Size: 0x4
    // Offset: 0x5C
    ::System::Xml::XmlTextWriter::Token lastToken;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlTextWriter::Token) == 0x4);
    // private System.Xml.XmlTextWriterBase64Encoder base64Encoder
    // Size: 0x8
    // Offset: 0x60
    ::System::Xml::XmlTextWriterBase64Encoder* base64Encoder;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlTextWriterBase64Encoder*) == 0x8);
    // private System.Char quoteChar
    // Size: 0x2
    // Offset: 0x68
    ::Il2CppChar quoteChar;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // private System.Char curQuoteChar
    // Size: 0x2
    // Offset: 0x6A
    ::Il2CppChar curQuoteChar;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // private System.Boolean namespaces
    // Size: 0x1
    // Offset: 0x6C
    bool namespaces;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: namespaces and: specialAttr
    char __padding15[0x3] = {};
    // private System.Xml.XmlTextWriter/System.Xml.SpecialAttr specialAttr
    // Size: 0x4
    // Offset: 0x70
    ::System::Xml::XmlTextWriter::SpecialAttr specialAttr;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlTextWriter::SpecialAttr) == 0x4);
    // Padding between fields: specialAttr and: prefixForXmlNs
    char __padding16[0x4] = {};
    // private System.String prefixForXmlNs
    // Size: 0x8
    // Offset: 0x78
    ::StringW prefixForXmlNs;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean flush
    // Size: 0x1
    // Offset: 0x80
    bool flush;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: flush and: nsStack
    char __padding18[0x7] = {};
    // private System.Xml.XmlTextWriter/System.Xml.Namespace[] nsStack
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<::System::Xml::XmlTextWriter::Namespace> nsStack;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::XmlTextWriter::Namespace>) == 0x8);
    // private System.Int32 nsTop
    // Size: 0x4
    // Offset: 0x90
    int nsTop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: nsTop and: nsHashtable
    char __padding20[0x4] = {};
    // private System.Collections.Generic.Dictionary`2<System.String,System.Int32> nsHashtable
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::Generic::Dictionary_2<::StringW, int>* nsHashtable;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, int>*) == 0x8);
    // private System.Boolean useNsHashtable
    // Size: 0x1
    // Offset: 0xA0
    bool useNsHashtable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useNsHashtable and: xmlCharType
    char __padding22[0x7] = {};
    // private System.Xml.XmlCharType xmlCharType
    // Size: 0x8
    // Offset: 0xA8
    ::System::Xml::XmlCharType xmlCharType;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlCharType) == 0x8);
    public:
    // Deleting conversion operator: operator ::ArrayW<::Il2CppChar>
    constexpr operator ::ArrayW<::Il2CppChar>() const noexcept = delete;
    // Get static field: static private System.String[] stateName
    static ::ArrayW<::StringW> _get_stateName();
    // Set static field: static private System.String[] stateName
    static void _set_stateName(::ArrayW<::StringW> value);
    // Get static field: static private System.String[] tokenName
    static ::ArrayW<::StringW> _get_tokenName();
    // Set static field: static private System.String[] tokenName
    static void _set_tokenName(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.Xml.XmlTextWriter/System.Xml.State[] stateTableDefault
    static ::ArrayW<::System::Xml::XmlTextWriter::State> _get_stateTableDefault();
    // Set static field: static private readonly System.Xml.XmlTextWriter/System.Xml.State[] stateTableDefault
    static void _set_stateTableDefault(::ArrayW<::System::Xml::XmlTextWriter::State> value);
    // Get static field: static private readonly System.Xml.XmlTextWriter/System.Xml.State[] stateTableDocument
    static ::ArrayW<::System::Xml::XmlTextWriter::State> _get_stateTableDocument();
    // Set static field: static private readonly System.Xml.XmlTextWriter/System.Xml.State[] stateTableDocument
    static void _set_stateTableDocument(::ArrayW<::System::Xml::XmlTextWriter::State> value);
    // Get instance field reference: private System.IO.TextWriter textWriter
    [[deprecated("Use field access instead!")]] ::System::IO::TextWriter*& dyn_textWriter();
    // Get instance field reference: private System.Xml.XmlTextEncoder xmlEncoder
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlTextEncoder*& dyn_xmlEncoder();
    // Get instance field reference: private System.Text.Encoding encoding
    [[deprecated("Use field access instead!")]] ::System::Text::Encoding*& dyn_encoding();
    // Get instance field reference: private System.Xml.Formatting formatting
    [[deprecated("Use field access instead!")]] ::System::Xml::Formatting& dyn_formatting();
    // Get instance field reference: private System.Boolean indented
    [[deprecated("Use field access instead!")]] bool& dyn_indented();
    // Get instance field reference: private System.Int32 indentation
    [[deprecated("Use field access instead!")]] int& dyn_indentation();
    // Get instance field reference: private System.Char indentChar
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn_indentChar();
    // Get instance field reference: private System.Xml.XmlTextWriter/System.Xml.TagInfo[] stack
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Xml::XmlTextWriter::TagInfo>& dyn_stack();
    // Get instance field reference: private System.Int32 top
    [[deprecated("Use field access instead!")]] int& dyn_top();
    // Get instance field reference: private System.Xml.XmlTextWriter/System.Xml.State[] stateTable
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Xml::XmlTextWriter::State>& dyn_stateTable();
    // Get instance field reference: private System.Xml.XmlTextWriter/System.Xml.State currentState
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlTextWriter::State& dyn_currentState();
    // Get instance field reference: private System.Xml.XmlTextWriter/System.Xml.Token lastToken
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlTextWriter::Token& dyn_lastToken();
    // Get instance field reference: private System.Xml.XmlTextWriterBase64Encoder base64Encoder
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlTextWriterBase64Encoder*& dyn_base64Encoder();
    // Get instance field reference: private System.Char quoteChar
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn_quoteChar();
    // Get instance field reference: private System.Char curQuoteChar
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn_curQuoteChar();
    // Get instance field reference: private System.Boolean namespaces
    [[deprecated("Use field access instead!")]] bool& dyn_namespaces();
    // Get instance field reference: private System.Xml.XmlTextWriter/System.Xml.SpecialAttr specialAttr
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlTextWriter::SpecialAttr& dyn_specialAttr();
    // Get instance field reference: private System.String prefixForXmlNs
    [[deprecated("Use field access instead!")]] ::StringW& dyn_prefixForXmlNs();
    // Get instance field reference: private System.Boolean flush
    [[deprecated("Use field access instead!")]] bool& dyn_flush();
    // Get instance field reference: private System.Xml.XmlTextWriter/System.Xml.Namespace[] nsStack
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Xml::XmlTextWriter::Namespace>& dyn_nsStack();
    // Get instance field reference: private System.Int32 nsTop
    [[deprecated("Use field access instead!")]] int& dyn_nsTop();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.Int32> nsHashtable
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, int>*& dyn_nsHashtable();
    // Get instance field reference: private System.Boolean useNsHashtable
    [[deprecated("Use field access instead!")]] bool& dyn_useNsHashtable();
    // Get instance field reference: private System.Xml.XmlCharType xmlCharType
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlCharType& dyn_xmlCharType();
    // public System.IO.Stream get_BaseStream()
    // Offset: 0x10815F4
    ::System::IO::Stream* get_BaseStream();
    // public System.Void set_Namespaces(System.Boolean value)
    // Offset: 0x1081694
    void set_Namespaces(bool value);
    // public System.Void set_Formatting(System.Xml.Formatting value)
    // Offset: 0x1081704
    void set_Formatting(::System::Xml::Formatting value);
    // public System.Void set_QuoteChar(System.Char value)
    // Offset: 0x1081718
    void set_QuoteChar(::Il2CppChar value);
    // public System.Void .ctor(System.IO.Stream w, System.Text.Encoding encoding)
    // Offset: 0x1081400
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlTextWriter* New_ctor(::System::IO::Stream* w, ::System::Text::Encoding* encoding) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlTextWriter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlTextWriter*, creationType>(w, encoding)));
    }
    // public System.Void .ctor(System.String filename, System.Text.Encoding encoding)
    // Offset: 0x10814D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlTextWriter* New_ctor(::StringW filename, ::System::Text::Encoding* encoding) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlTextWriter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlTextWriter*, creationType>(filename, encoding)));
    }
    // public System.Void .ctor(System.IO.TextWriter w)
    // Offset: 0x1081554
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlTextWriter* New_ctor(::System::IO::TextWriter* w) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlTextWriter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlTextWriter*, creationType>(w)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1085F88
    static void _cctor();
    // private System.Void StartDocument(System.Int32 standalone)
    // Offset: 0x10817B0
    void StartDocument(int standalone);
    // private System.Void AutoComplete(System.Xml.XmlTextWriter/System.Xml.Token token)
    // Offset: 0x108237C
    void AutoComplete(::System::Xml::XmlTextWriter::Token token);
    // private System.Void AutoCompleteAll()
    // Offset: 0x1081D30
    void AutoCompleteAll();
    // private System.Void InternalWriteEndElement(System.Boolean longFormat)
    // Offset: 0x1083440
    void InternalWriteEndElement(bool longFormat);
    // private System.Void WriteEndStartTag(System.Boolean empty)
    // Offset: 0x1085650
    void WriteEndStartTag(bool empty);
    // private System.Void WriteEndAttributeQuote()
    // Offset: 0x10855F8
    void WriteEndAttributeQuote();
    // private System.Void Indent(System.Boolean beforeEndElement)
    // Offset: 0x108551C
    void Indent(bool beforeEndElement);
    // private System.Void PushNamespace(System.String prefix, System.String ns, System.Boolean declared)
    // Offset: 0x1083070
    void PushNamespace(::StringW prefix, ::StringW ns, bool declared);
    // private System.Void AddNamespace(System.String prefix, System.String ns, System.Boolean declared)
    // Offset: 0x1085CE4
    void AddNamespace(::StringW prefix, ::StringW ns, bool declared);
    // private System.Void AddToNamespaceHashtable(System.Int32 namespaceIndex)
    // Offset: 0x1085E8C
    void AddToNamespaceHashtable(int namespaceIndex);
    // private System.Void PopNamespaces(System.Int32 indexFrom, System.Int32 indexTo)
    // Offset: 0x10859E0
    void PopNamespaces(int indexFrom, int indexTo);
    // private System.String GeneratePrefix()
    // Offset: 0x1083F40
    ::StringW GeneratePrefix();
    // private System.Void InternalWriteProcessingInstruction(System.String name, System.String text)
    // Offset: 0x1084774
    void InternalWriteProcessingInstruction(::StringW name, ::StringW text);
    // private System.Int32 LookupNamespace(System.String prefix)
    // Offset: 0x1082EA0
    int LookupNamespace(::StringW prefix);
    // private System.Int32 LookupNamespaceInCurrentScope(System.String prefix)
    // Offset: 0x1083E08
    int LookupNamespaceInCurrentScope(::StringW prefix);
    // private System.String FindPrefix(System.String ns)
    // Offset: 0x1082F9C
    ::StringW FindPrefix(::StringW ns);
    // private System.Void ValidateName(System.String name, System.Boolean isNCName)
    // Offset: 0x1082198
    void ValidateName(::StringW name, bool isNCName);
    // private System.Void HandleSpecialAttribute()
    // Offset: 0x1085AC0
    void HandleSpecialAttribute();
    // private System.Void VerifyPrefixXml(System.String prefix, System.String ns)
    // Offset: 0x10832CC
    void VerifyPrefixXml(::StringW prefix, ::StringW ns);
    // private System.Void PushStack()
    // Offset: 0x1082DC4
    void PushStack();
    // private System.Void FlushEncoders()
    // Offset: 0x10859B0
    void FlushEncoders();
    // public override System.Xml.WriteState get_WriteState()
    // Offset: 0x108528C
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Xml.WriteState XmlWriter::get_WriteState()
    ::System::Xml::WriteState get_WriteState();
    // System.Void .ctor()
    // Offset: 0x10812CC
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlTextWriter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlTextWriter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlTextWriter*, creationType>()));
    }
    // public override System.Void WriteStartDocument()
    // Offset: 0x10817A8
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteStartDocument()
    void WriteStartDocument();
    // public override System.Void WriteStartDocument(System.Boolean standalone)
    // Offset: 0x1081B3C
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteStartDocument(System.Boolean standalone)
    void WriteStartDocument(bool standalone);
    // public override System.Void WriteEndDocument()
    // Offset: 0x1081B54
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteEndDocument()
    void WriteEndDocument();
    // public override System.Void WriteDocType(System.String name, System.String pubid, System.String sysid, System.String subset)
    // Offset: 0x1081D90
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteDocType(System.String name, System.String pubid, System.String sysid, System.String subset)
    void WriteDocType(::StringW name, ::StringW pubid, ::StringW sysid, ::StringW subset);
    // public override System.Void WriteStartElement(System.String prefix, System.String localName, System.String ns)
    // Offset: 0x10828E8
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteStartElement(System.String prefix, System.String localName, System.String ns)
    void WriteStartElement(::StringW prefix, ::StringW localName, ::StringW ns);
    // public override System.Void WriteEndElement()
    // Offset: 0x1083438
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteEndElement()
    void WriteEndElement();
    // public override System.Void WriteFullEndElement()
    // Offset: 0x1083750
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteFullEndElement()
    void WriteFullEndElement();
    // public override System.Void WriteStartAttribute(System.String prefix, System.String localName, System.String ns)
    // Offset: 0x1083758
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteStartAttribute(System.String prefix, System.String localName, System.String ns)
    void WriteStartAttribute(::StringW prefix, ::StringW localName, ::StringW ns);
    // public override System.Void WriteEndAttribute()
    // Offset: 0x1084068
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteEndAttribute()
    void WriteEndAttribute();
    // public override System.Void WriteCData(System.String text)
    // Offset: 0x108411C
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteCData(System.String text)
    void WriteCData(::StringW text);
    // public override System.Void WriteComment(System.String text)
    // Offset: 0x1084304
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteComment(System.String text)
    void WriteComment(::StringW text);
    // public override System.Void WriteProcessingInstruction(System.String name, System.String text)
    // Offset: 0x1084520
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteProcessingInstruction(System.String name, System.String text)
    void WriteProcessingInstruction(::StringW name, ::StringW text);
    // public override System.Void WriteEntityRef(System.String name)
    // Offset: 0x1084874
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteEntityRef(System.String name)
    void WriteEntityRef(::StringW name);
    // public override System.Void WriteCharEntity(System.Char ch)
    // Offset: 0x1084954
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteCharEntity(System.Char ch)
    void WriteCharEntity(::Il2CppChar ch);
    // public override System.Void WriteWhitespace(System.String ws)
    // Offset: 0x1084A28
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteWhitespace(System.String ws)
    void WriteWhitespace(::StringW ws);
    // public override System.Void WriteString(System.String text)
    // Offset: 0x1084BB0
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteString(System.String text)
    void WriteString(::StringW text);
    // public override System.Void WriteSurrogateCharEntity(System.Char lowChar, System.Char highChar)
    // Offset: 0x1084C90
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteSurrogateCharEntity(System.Char lowChar, System.Char highChar)
    void WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar);
    // public override System.Void WriteChars(System.Char[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x1084D74
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteChars(System.Char[] buffer, System.Int32 index, System.Int32 count)
    void WriteChars(::ArrayW<::Il2CppChar> buffer, int index, int count);
    // public override System.Void WriteRaw(System.Char[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x1084E60
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteRaw(System.Char[] buffer, System.Int32 index, System.Int32 count)
    void WriteRaw(::ArrayW<::Il2CppChar> buffer, int index, int count);
    // public override System.Void WriteRaw(System.String data)
    // Offset: 0x1084F4C
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteRaw(System.String data)
    void WriteRaw(::StringW data);
    // public override System.Void WriteBase64(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x1085020
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteBase64(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    void WriteBase64(::ArrayW<uint8_t> buffer, int index, int count);
    // public override System.Void WriteBinHex(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x10851A8
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteBinHex(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    void WriteBinHex(::ArrayW<uint8_t> buffer, int index, int count);
    // public override System.Void Close()
    // Offset: 0x10852B0
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::Close()
    void Close();
    // public override System.Void Flush()
    // Offset: 0x10853E8
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::Flush()
    void Flush();
    // public override System.String LookupPrefix(System.String ns)
    // Offset: 0x1085408
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.String XmlWriter::LookupPrefix(System.String ns)
    ::StringW LookupPrefix(::StringW ns);
  }; // System.Xml.XmlTextWriter
  #pragma pack(pop)
  static check_size<sizeof(XmlTextWriter), 168 + sizeof(::System::Xml::XmlCharType)> __System_Xml_XmlTextWriterSizeCheck;
  static_assert(sizeof(XmlTextWriter) == 0xB0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlTextWriter::Token, "System.Xml", "XmlTextWriter/Token");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlTextWriter::State, "System.Xml", "XmlTextWriter/State");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlTextWriter::SpecialAttr, "System.Xml", "XmlTextWriter/SpecialAttr");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlTextWriter::Namespace, "System.Xml", "XmlTextWriter/Namespace");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlTextWriter::TagInfo, "System.Xml", "XmlTextWriter/TagInfo");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlTextWriter::NamespaceState, "System.Xml", "XmlTextWriter/NamespaceState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::get_BaseStream
// Il2CppName: get_BaseStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Xml::XmlTextWriter::*)()>(&System::Xml::XmlTextWriter::get_BaseStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "get_BaseStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::set_Namespaces
// Il2CppName: set_Namespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(bool)>(&System::Xml::XmlTextWriter::set_Namespaces)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "set_Namespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::set_Formatting
// Il2CppName: set_Formatting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::System::Xml::Formatting)>(&System::Xml::XmlTextWriter::set_Formatting)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "Formatting")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "set_Formatting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::set_QuoteChar
// Il2CppName: set_QuoteChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::Il2CppChar)>(&System::Xml::XmlTextWriter::set_QuoteChar)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "set_QuoteChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::XmlTextWriter::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::StartDocument
// Il2CppName: StartDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(int)>(&System::Xml::XmlTextWriter::StartDocument)> {
  static const MethodInfo* get() {
    static auto* standalone = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "StartDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{standalone});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::AutoComplete
// Il2CppName: AutoComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::System::Xml::XmlTextWriter::Token)>(&System::Xml::XmlTextWriter::AutoComplete)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTextWriter/Token")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "AutoComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::AutoCompleteAll
// Il2CppName: AutoCompleteAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)()>(&System::Xml::XmlTextWriter::AutoCompleteAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "AutoCompleteAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::InternalWriteEndElement
// Il2CppName: InternalWriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(bool)>(&System::Xml::XmlTextWriter::InternalWriteEndElement)> {
  static const MethodInfo* get() {
    static auto* longFormat = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "InternalWriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{longFormat});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteEndStartTag
// Il2CppName: WriteEndStartTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(bool)>(&System::Xml::XmlTextWriter::WriteEndStartTag)> {
  static const MethodInfo* get() {
    static auto* empty = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteEndStartTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{empty});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteEndAttributeQuote
// Il2CppName: WriteEndAttributeQuote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)()>(&System::Xml::XmlTextWriter::WriteEndAttributeQuote)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteEndAttributeQuote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::Indent
// Il2CppName: Indent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(bool)>(&System::Xml::XmlTextWriter::Indent)> {
  static const MethodInfo* get() {
    static auto* beforeEndElement = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "Indent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beforeEndElement});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::PushNamespace
// Il2CppName: PushNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::StringW, ::StringW, bool)>(&System::Xml::XmlTextWriter::PushNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* declared = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "PushNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, ns, declared});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::AddNamespace
// Il2CppName: AddNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::StringW, ::StringW, bool)>(&System::Xml::XmlTextWriter::AddNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* declared = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "AddNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, ns, declared});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::AddToNamespaceHashtable
// Il2CppName: AddToNamespaceHashtable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(int)>(&System::Xml::XmlTextWriter::AddToNamespaceHashtable)> {
  static const MethodInfo* get() {
    static auto* namespaceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "AddToNamespaceHashtable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{namespaceIndex});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::PopNamespaces
// Il2CppName: PopNamespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(int, int)>(&System::Xml::XmlTextWriter::PopNamespaces)> {
  static const MethodInfo* get() {
    static auto* indexFrom = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indexTo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "PopNamespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indexFrom, indexTo});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::GeneratePrefix
// Il2CppName: GeneratePrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextWriter::*)()>(&System::Xml::XmlTextWriter::GeneratePrefix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "GeneratePrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::InternalWriteProcessingInstruction
// Il2CppName: InternalWriteProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::StringW, ::StringW)>(&System::Xml::XmlTextWriter::InternalWriteProcessingInstruction)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "InternalWriteProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, text});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::LookupNamespace
// Il2CppName: LookupNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextWriter::*)(::StringW)>(&System::Xml::XmlTextWriter::LookupNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "LookupNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::LookupNamespaceInCurrentScope
// Il2CppName: LookupNamespaceInCurrentScope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextWriter::*)(::StringW)>(&System::Xml::XmlTextWriter::LookupNamespaceInCurrentScope)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "LookupNamespaceInCurrentScope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::FindPrefix
// Il2CppName: FindPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextWriter::*)(::StringW)>(&System::Xml::XmlTextWriter::FindPrefix)> {
  static const MethodInfo* get() {
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "FindPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::ValidateName
// Il2CppName: ValidateName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::StringW, bool)>(&System::Xml::XmlTextWriter::ValidateName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isNCName = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "ValidateName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, isNCName});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::HandleSpecialAttribute
// Il2CppName: HandleSpecialAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)()>(&System::Xml::XmlTextWriter::HandleSpecialAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "HandleSpecialAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::VerifyPrefixXml
// Il2CppName: VerifyPrefixXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::StringW, ::StringW)>(&System::Xml::XmlTextWriter::VerifyPrefixXml)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "VerifyPrefixXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::PushStack
// Il2CppName: PushStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)()>(&System::Xml::XmlTextWriter::PushStack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "PushStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::FlushEncoders
// Il2CppName: FlushEncoders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)()>(&System::Xml::XmlTextWriter::FlushEncoders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "FlushEncoders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::get_WriteState
// Il2CppName: get_WriteState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::WriteState (System::Xml::XmlTextWriter::*)()>(&System::Xml::XmlTextWriter::get_WriteState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "get_WriteState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteStartDocument
// Il2CppName: WriteStartDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)()>(&System::Xml::XmlTextWriter::WriteStartDocument)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteStartDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteStartDocument
// Il2CppName: WriteStartDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(bool)>(&System::Xml::XmlTextWriter::WriteStartDocument)> {
  static const MethodInfo* get() {
    static auto* standalone = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteStartDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{standalone});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteEndDocument
// Il2CppName: WriteEndDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)()>(&System::Xml::XmlTextWriter::WriteEndDocument)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteEndDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::StringW, ::StringW, ::StringW, ::StringW)>(&System::Xml::XmlTextWriter::WriteDocType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pubid = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sysid = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* subset = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, pubid, sysid, subset});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::StringW, ::StringW, ::StringW)>(&System::Xml::XmlTextWriter::WriteStartElement)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)()>(&System::Xml::XmlTextWriter::WriteEndElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)()>(&System::Xml::XmlTextWriter::WriteFullEndElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::StringW, ::StringW, ::StringW)>(&System::Xml::XmlTextWriter::WriteStartAttribute)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteEndAttribute
// Il2CppName: WriteEndAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)()>(&System::Xml::XmlTextWriter::WriteEndAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteEndAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteCData
// Il2CppName: WriteCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::StringW)>(&System::Xml::XmlTextWriter::WriteCData)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteComment
// Il2CppName: WriteComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::StringW)>(&System::Xml::XmlTextWriter::WriteComment)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteProcessingInstruction
// Il2CppName: WriteProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::StringW, ::StringW)>(&System::Xml::XmlTextWriter::WriteProcessingInstruction)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, text});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteEntityRef
// Il2CppName: WriteEntityRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::StringW)>(&System::Xml::XmlTextWriter::WriteEntityRef)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteEntityRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::Il2CppChar)>(&System::Xml::XmlTextWriter::WriteCharEntity)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteWhitespace
// Il2CppName: WriteWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::StringW)>(&System::Xml::XmlTextWriter::WriteWhitespace)> {
  static const MethodInfo* get() {
    static auto* ws = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ws});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::StringW)>(&System::Xml::XmlTextWriter::WriteString)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::Il2CppChar, ::Il2CppChar)>(&System::Xml::XmlTextWriter::WriteSurrogateCharEntity)> {
  static const MethodInfo* get() {
    static auto* lowChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* highChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lowChar, highChar});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::ArrayW<::Il2CppChar>, int, int)>(&System::Xml::XmlTextWriter::WriteChars)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::ArrayW<::Il2CppChar>, int, int)>(&System::Xml::XmlTextWriter::WriteRaw)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::StringW)>(&System::Xml::XmlTextWriter::WriteRaw)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteBase64
// Il2CppName: WriteBase64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::ArrayW<uint8_t>, int, int)>(&System::Xml::XmlTextWriter::WriteBase64)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteBase64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::WriteBinHex
// Il2CppName: WriteBinHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)(::ArrayW<uint8_t>, int, int)>(&System::Xml::XmlTextWriter::WriteBinHex)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "WriteBinHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)()>(&System::Xml::XmlTextWriter::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextWriter::*)()>(&System::Xml::XmlTextWriter::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextWriter::LookupPrefix
// Il2CppName: LookupPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextWriter::*)(::StringW)>(&System::Xml::XmlTextWriter::LookupPrefix)> {
  static const MethodInfo* get() {
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextWriter*), "LookupPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ns});
  }
};
