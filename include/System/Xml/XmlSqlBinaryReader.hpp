// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.XmlReader
#include "System/Xml/XmlReader.hpp"
// Including type: System.Xml.IXmlNamespaceResolver
#include "System/Xml/IXmlNamespaceResolver.hpp"
// Including type: System.Xml.XmlNodeType
#include "System/Xml/XmlNodeType.hpp"
// Including type: System.Xml.BinXmlToken
#include "System/Xml/BinXmlToken.hpp"
// Including type: System.Xml.DtdProcessing
#include "System/Xml/DtdProcessing.hpp"
// Including type: System.Xml.XmlCharType
#include "System/Xml/XmlCharType.hpp"
// Including type: System.Xml.ReadState
#include "System/Xml/ReadState.hpp"
// Including type: System.Xml.XmlSpace
#include "System/Xml/XmlSpace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: SecureStringHasher
  class SecureStringHasher;
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: XmlReaderSettings
  class XmlReaderSettings;
  // Forward declaring type: XmlNamespaceScope
  struct XmlNamespaceScope;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XmlSqlBinaryReader
  class XmlSqlBinaryReader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XmlSqlBinaryReader);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlSqlBinaryReader*, "System.Xml", "XmlSqlBinaryReader");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x161
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlSqlBinaryReader
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSqlBinaryReader : public ::System::Xml::XmlReader/*, public ::System::Xml::IXmlNamespaceResolver*/ {
    public:
    // Nested type: ::System::Xml::XmlSqlBinaryReader::ScanState
    struct ScanState;
    // Nested type: ::System::Xml::XmlSqlBinaryReader::QName
    struct QName;
    // Nested type: ::System::Xml::XmlSqlBinaryReader::ElemInfo
    struct ElemInfo;
    // Nested type: ::System::Xml::XmlSqlBinaryReader::AttrInfo
    struct AttrInfo;
    // Nested type: ::System::Xml::XmlSqlBinaryReader::NamespaceDecl
    class NamespaceDecl;
    // Nested type: ::System::Xml::XmlSqlBinaryReader::SymbolTables
    struct SymbolTables;
    // Nested type: ::System::Xml::XmlSqlBinaryReader::NestedBinXml
    class NestedBinXml;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.XmlSqlBinaryReader/System.Xml.ScanState
    // [TokenAttribute] Offset: FFFFFFFF
    struct ScanState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ScanState
      constexpr ScanState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState Doc
      static constexpr const int Doc = 0;
      // Get static field: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState Doc
      static ::System::Xml::XmlSqlBinaryReader::ScanState _get_Doc();
      // Set static field: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState Doc
      static void _set_Doc(::System::Xml::XmlSqlBinaryReader::ScanState value);
      // static field const value: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState XmlText
      static constexpr const int XmlText = 1;
      // Get static field: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState XmlText
      static ::System::Xml::XmlSqlBinaryReader::ScanState _get_XmlText();
      // Set static field: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState XmlText
      static void _set_XmlText(::System::Xml::XmlSqlBinaryReader::ScanState value);
      // static field const value: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState Attr
      static constexpr const int Attr = 2;
      // Get static field: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState Attr
      static ::System::Xml::XmlSqlBinaryReader::ScanState _get_Attr();
      // Set static field: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState Attr
      static void _set_Attr(::System::Xml::XmlSqlBinaryReader::ScanState value);
      // static field const value: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState AttrVal
      static constexpr const int AttrVal = 3;
      // Get static field: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState AttrVal
      static ::System::Xml::XmlSqlBinaryReader::ScanState _get_AttrVal();
      // Set static field: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState AttrVal
      static void _set_AttrVal(::System::Xml::XmlSqlBinaryReader::ScanState value);
      // static field const value: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState AttrValPseudoValue
      static constexpr const int AttrValPseudoValue = 4;
      // Get static field: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState AttrValPseudoValue
      static ::System::Xml::XmlSqlBinaryReader::ScanState _get_AttrValPseudoValue();
      // Set static field: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState AttrValPseudoValue
      static void _set_AttrValPseudoValue(::System::Xml::XmlSqlBinaryReader::ScanState value);
      // static field const value: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState Init
      static constexpr const int Init = 5;
      // Get static field: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState Init
      static ::System::Xml::XmlSqlBinaryReader::ScanState _get_Init();
      // Set static field: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState Init
      static void _set_Init(::System::Xml::XmlSqlBinaryReader::ScanState value);
      // static field const value: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState Error
      static constexpr const int Error = 6;
      // Get static field: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState Error
      static ::System::Xml::XmlSqlBinaryReader::ScanState _get_Error();
      // Set static field: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState Error
      static void _set_Error(::System::Xml::XmlSqlBinaryReader::ScanState value);
      // static field const value: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState EOF
      static constexpr const int _EOF = 7;
      // Get static field: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState EOF
      static ::System::Xml::XmlSqlBinaryReader::ScanState _get_EOF();
      // Set static field: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState EOF
      static void _set_EOF(::System::Xml::XmlSqlBinaryReader::ScanState value);
      // static field const value: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState Closed
      static constexpr const int Closed = 8;
      // Get static field: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState Closed
      static ::System::Xml::XmlSqlBinaryReader::ScanState _get_Closed();
      // Set static field: static public System.Xml.XmlSqlBinaryReader/System.Xml.ScanState Closed
      static void _set_Closed(::System::Xml::XmlSqlBinaryReader::ScanState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Xml.XmlSqlBinaryReader/System.Xml.ScanState
    #pragma pack(pop)
    static check_size<sizeof(XmlSqlBinaryReader::ScanState), 0 + sizeof(int)> __System_Xml_XmlSqlBinaryReader_ScanStateSizeCheck;
    static_assert(sizeof(XmlSqlBinaryReader::ScanState) == 0x4);
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Xml.XmlSqlBinaryReader/System.Xml.QName
    // [TokenAttribute] Offset: FFFFFFFF
    struct QName/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String prefix
      // Size: 0x8
      // Offset: 0x0
      ::StringW prefix;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.String localname
      // Size: 0x8
      // Offset: 0x8
      ::StringW localname;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.String namespaceUri
      // Size: 0x8
      // Offset: 0x10
      ::StringW namespaceUri;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      public:
      // Creating value type constructor for type: QName
      constexpr QName(::StringW prefix_ = {}, ::StringW localname_ = {}, ::StringW namespaceUri_ = {}) noexcept : prefix{prefix_}, localname{localname_}, namespaceUri{namespaceUri_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String prefix
      [[deprecated("Use field access instead!")]] ::StringW& dyn_prefix();
      // Get instance field reference: public System.String localname
      [[deprecated("Use field access instead!")]] ::StringW& dyn_localname();
      // Get instance field reference: public System.String namespaceUri
      [[deprecated("Use field access instead!")]] ::StringW& dyn_namespaceUri();
      // public System.Void .ctor(System.String prefix, System.String lname, System.String nsUri)
      // Offset: 0xC226A8
      // ABORTED: conflicts with another method.  QName(::StringW prefix, ::StringW lname, ::StringW nsUri);
      // public System.Void Set(System.String prefix, System.String lname, System.String nsUri)
      // Offset: 0xC226B4
      void Set(::StringW prefix, ::StringW lname, ::StringW nsUri);
      // public System.Void Clear()
      // Offset: 0xC226C0
      void Clear();
      // public System.Boolean MatchNs(System.String lname, System.String nsUri)
      // Offset: 0xC22540
      bool MatchNs(::StringW lname, ::StringW nsUri);
      // public System.Boolean MatchPrefix(System.String prefix, System.String lname)
      // Offset: 0xC22718
      bool MatchPrefix(::StringW prefix, ::StringW lname);
      // public System.Void CheckPrefixNS(System.String prefix, System.String namespaceUri)
      // Offset: 0xC2276C
      void CheckPrefixNS(::StringW prefix, ::StringW namespaceUri);
      // public System.Int32 GetNSHashCode(System.Xml.SecureStringHasher hasher)
      // Offset: 0xC224EC
      int GetNSHashCode(::System::Xml::SecureStringHasher* hasher);
      // public override System.Int32 GetHashCode()
      // Offset: 0xC22890
      // Implemented from: System.ValueType
      // Base method: System.Int32 ValueType::GetHashCode()
      int GetHashCode();
      // public override System.Boolean Equals(System.Object other)
      // Offset: 0xC228E4
      // Implemented from: System.ValueType
      // Base method: System.Boolean ValueType::Equals(System.Object other)
      bool Equals(::Il2CppObject* other);
      // public override System.String ToString()
      // Offset: 0xC22A0C
      // Implemented from: System.ValueType
      // Base method: System.String ValueType::ToString()
      ::StringW ToString();
    }; // System.Xml.XmlSqlBinaryReader/System.Xml.QName
    #pragma pack(pop)
    static check_size<sizeof(XmlSqlBinaryReader::QName), 16 + sizeof(::StringW)> __System_Xml_XmlSqlBinaryReader_QNameSizeCheck;
    static_assert(sizeof(XmlSqlBinaryReader::QName) == 0x18);
    // Size: 0x30
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Xml.XmlSqlBinaryReader/System.Xml.ElemInfo
    // [TokenAttribute] Offset: FFFFFFFF
    struct ElemInfo/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Xml.XmlSqlBinaryReader/System.Xml.QName name
      // Size: 0x18
      // Offset: 0x0
      ::System::Xml::XmlSqlBinaryReader::QName name;
      // Field size check
      static_assert(sizeof(::System::Xml::XmlSqlBinaryReader::QName) == 0x18);
      // public System.String xmlLang
      // Size: 0x8
      // Offset: 0x18
      ::StringW xmlLang;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.Xml.XmlSpace xmlSpace
      // Size: 0x4
      // Offset: 0x20
      ::System::Xml::XmlSpace xmlSpace;
      // Field size check
      static_assert(sizeof(::System::Xml::XmlSpace) == 0x4);
      // public System.Boolean xmlspacePreserve
      // Size: 0x1
      // Offset: 0x24
      bool xmlspacePreserve;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: xmlspacePreserve and: nsdecls
      char __padding3[0x3] = {};
      // public System.Xml.XmlSqlBinaryReader/System.Xml.NamespaceDecl nsdecls
      // Size: 0x8
      // Offset: 0x28
      ::System::Xml::XmlSqlBinaryReader::NamespaceDecl* nsdecls;
      // Field size check
      static_assert(sizeof(::System::Xml::XmlSqlBinaryReader::NamespaceDecl*) == 0x8);
      public:
      // Creating value type constructor for type: ElemInfo
      constexpr ElemInfo(::System::Xml::XmlSqlBinaryReader::QName name_ = {}, ::StringW xmlLang_ = {}, ::System::Xml::XmlSpace xmlSpace_ = {}, bool xmlspacePreserve_ = {}, ::System::Xml::XmlSqlBinaryReader::NamespaceDecl* nsdecls_ = {}) noexcept : name{name_}, xmlLang{xmlLang_}, xmlSpace{xmlSpace_}, xmlspacePreserve{xmlspacePreserve_}, nsdecls{nsdecls_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Xml.XmlSqlBinaryReader/System.Xml.QName name
      [[deprecated("Use field access instead!")]] ::System::Xml::XmlSqlBinaryReader::QName& dyn_name();
      // Get instance field reference: public System.String xmlLang
      [[deprecated("Use field access instead!")]] ::StringW& dyn_xmlLang();
      // Get instance field reference: public System.Xml.XmlSpace xmlSpace
      [[deprecated("Use field access instead!")]] ::System::Xml::XmlSpace& dyn_xmlSpace();
      // Get instance field reference: public System.Boolean xmlspacePreserve
      [[deprecated("Use field access instead!")]] bool& dyn_xmlspacePreserve();
      // Get instance field reference: public System.Xml.XmlSqlBinaryReader/System.Xml.NamespaceDecl nsdecls
      [[deprecated("Use field access instead!")]] ::System::Xml::XmlSqlBinaryReader::NamespaceDecl*& dyn_nsdecls();
      // public System.Void Set(System.Xml.XmlSqlBinaryReader/System.Xml.QName name, System.Boolean xmlspacePreserve)
      // Offset: 0xC225C8
      void Set(::System::Xml::XmlSqlBinaryReader::QName name, bool xmlspacePreserve);
      // public System.Xml.XmlSqlBinaryReader/System.Xml.NamespaceDecl Clear()
      // Offset: 0xC225E8
      ::System::Xml::XmlSqlBinaryReader::NamespaceDecl* Clear();
    }; // System.Xml.XmlSqlBinaryReader/System.Xml.ElemInfo
    #pragma pack(pop)
    static check_size<sizeof(XmlSqlBinaryReader::ElemInfo), 40 + sizeof(::System::Xml::XmlSqlBinaryReader::NamespaceDecl*)> __System_Xml_XmlSqlBinaryReader_ElemInfoSizeCheck;
    static_assert(sizeof(XmlSqlBinaryReader::ElemInfo) == 0x30);
    // Size: 0x2C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Xml.XmlSqlBinaryReader/System.Xml.AttrInfo
    // [TokenAttribute] Offset: FFFFFFFF
    struct AttrInfo/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Xml.XmlSqlBinaryReader/System.Xml.QName name
      // Size: 0x18
      // Offset: 0x0
      ::System::Xml::XmlSqlBinaryReader::QName name;
      // Field size check
      static_assert(sizeof(::System::Xml::XmlSqlBinaryReader::QName) == 0x18);
      // public System.String val
      // Size: 0x8
      // Offset: 0x18
      ::StringW val;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.Int32 contentPos
      // Size: 0x4
      // Offset: 0x20
      int contentPos;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 hashCode
      // Size: 0x4
      // Offset: 0x24
      int hashCode;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 prevHash
      // Size: 0x4
      // Offset: 0x28
      int prevHash;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: AttrInfo
      constexpr AttrInfo(::System::Xml::XmlSqlBinaryReader::QName name_ = {}, ::StringW val_ = {}, int contentPos_ = {}, int hashCode_ = {}, int prevHash_ = {}) noexcept : name{name_}, val{val_}, contentPos{contentPos_}, hashCode{hashCode_}, prevHash{prevHash_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Xml.XmlSqlBinaryReader/System.Xml.QName name
      [[deprecated("Use field access instead!")]] ::System::Xml::XmlSqlBinaryReader::QName& dyn_name();
      // Get instance field reference: public System.String val
      [[deprecated("Use field access instead!")]] ::StringW& dyn_val();
      // Get instance field reference: public System.Int32 contentPos
      [[deprecated("Use field access instead!")]] int& dyn_contentPos();
      // Get instance field reference: public System.Int32 hashCode
      [[deprecated("Use field access instead!")]] int& dyn_hashCode();
      // Get instance field reference: public System.Int32 prevHash
      [[deprecated("Use field access instead!")]] int& dyn_prevHash();
      // public System.Void Set(System.Xml.XmlSqlBinaryReader/System.Xml.QName n, System.String v)
      // Offset: 0xC2246C
      void Set(::System::Xml::XmlSqlBinaryReader::QName n, ::StringW v);
      // public System.Void Set(System.Xml.XmlSqlBinaryReader/System.Xml.QName n, System.Int32 pos)
      // Offset: 0xC22488
      void Set(::System::Xml::XmlSqlBinaryReader::QName n, int pos);
      // public System.Void GetLocalnameAndNamespaceUri(out System.String localname, out System.String namespaceUri)
      // Offset: 0xC224A4
      void GetLocalnameAndNamespaceUri(ByRef<::StringW> localname, ByRef<::StringW> namespaceUri);
      // public System.Int32 GetLocalnameAndNamespaceUriAndHash(System.Xml.SecureStringHasher hasher, out System.String localname, out System.String namespaceUri)
      // Offset: 0xC224B8
      int GetLocalnameAndNamespaceUriAndHash(::System::Xml::SecureStringHasher* hasher, ByRef<::StringW> localname, ByRef<::StringW> namespaceUri);
      // public System.Boolean MatchNS(System.String localname, System.String namespaceUri)
      // Offset: 0xC2253C
      bool MatchNS(::StringW localname, ::StringW namespaceUri);
      // public System.Boolean MatchHashNS(System.Int32 hash, System.String localname, System.String namespaceUri)
      // Offset: 0xC22594
      bool MatchHashNS(int hash, ::StringW localname, ::StringW namespaceUri);
      // public System.Void AdjustPosition(System.Int32 adj)
      // Offset: 0xC225B4
      void AdjustPosition(int adj);
    }; // System.Xml.XmlSqlBinaryReader/System.Xml.AttrInfo
    #pragma pack(pop)
    static check_size<sizeof(XmlSqlBinaryReader::AttrInfo), 40 + sizeof(int)> __System_Xml_XmlSqlBinaryReader_AttrInfoSizeCheck;
    static_assert(sizeof(XmlSqlBinaryReader::AttrInfo) == 0x2C);
    // Size: 0x1C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Xml.XmlSqlBinaryReader/System.Xml.SymbolTables
    // [TokenAttribute] Offset: FFFFFFFF
    struct SymbolTables/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String[] symtable
      // Size: 0x8
      // Offset: 0x0
      ::ArrayW<::StringW> symtable;
      // Field size check
      static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
      // public System.Int32 symCount
      // Size: 0x4
      // Offset: 0x8
      int symCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Padding between fields: symCount and: qnametable
      char __padding1[0x4] = {};
      // public System.Xml.XmlSqlBinaryReader/System.Xml.QName[] qnametable
      // Size: 0x8
      // Offset: 0x10
      ::ArrayW<::System::Xml::XmlSqlBinaryReader::QName> qnametable;
      // Field size check
      static_assert(sizeof(::ArrayW<::System::Xml::XmlSqlBinaryReader::QName>) == 0x8);
      // public System.Int32 qnameCount
      // Size: 0x4
      // Offset: 0x18
      int qnameCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SymbolTables
      constexpr SymbolTables(::ArrayW<::StringW> symtable_ = ::ArrayW<::StringW>(static_cast<void*>(nullptr)), int symCount_ = {}, ::ArrayW<::System::Xml::XmlSqlBinaryReader::QName> qnametable_ = ::ArrayW<::System::Xml::XmlSqlBinaryReader::QName>(static_cast<void*>(nullptr)), int qnameCount_ = {}) noexcept : symtable{symtable_}, symCount{symCount_}, qnametable{qnametable_}, qnameCount{qnameCount_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String[] symtable
      [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_symtable();
      // Get instance field reference: public System.Int32 symCount
      [[deprecated("Use field access instead!")]] int& dyn_symCount();
      // Get instance field reference: public System.Xml.XmlSqlBinaryReader/System.Xml.QName[] qnametable
      [[deprecated("Use field access instead!")]] ::ArrayW<::System::Xml::XmlSqlBinaryReader::QName>& dyn_qnametable();
      // Get instance field reference: public System.Int32 qnameCount
      [[deprecated("Use field access instead!")]] int& dyn_qnameCount();
      // public System.Void Init()
      // Offset: 0xC22A80
      void Init();
    }; // System.Xml.XmlSqlBinaryReader/System.Xml.SymbolTables
    #pragma pack(pop)
    static check_size<sizeof(XmlSqlBinaryReader::SymbolTables), 24 + sizeof(int)> __System_Xml_XmlSqlBinaryReader_SymbolTablesSizeCheck;
    static_assert(sizeof(XmlSqlBinaryReader::SymbolTables) == 0x1C);
    public:
    // private System.IO.Stream inStrm
    // Size: 0x8
    // Offset: 0x10
    ::System::IO::Stream* inStrm;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.Byte[] data
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<uint8_t> data;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Int32 pos
    // Size: 0x4
    // Offset: 0x20
    int pos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 mark
    // Size: 0x4
    // Offset: 0x24
    int mark;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 end
    // Size: 0x4
    // Offset: 0x28
    int end;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: end and: offset
    char __padding4[0x4] = {};
    // private System.Int64 offset
    // Size: 0x8
    // Offset: 0x30
    int64_t offset;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Boolean eof
    // Size: 0x1
    // Offset: 0x38
    bool eof;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean sniffed
    // Size: 0x1
    // Offset: 0x39
    bool sniffed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isEmpty
    // Size: 0x1
    // Offset: 0x3A
    bool isEmpty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isEmpty and: docState
    char __padding8[0x1] = {};
    // private System.Int32 docState
    // Size: 0x4
    // Offset: 0x3C
    int docState;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Xml.XmlSqlBinaryReader/System.Xml.SymbolTables symbolTables
    // Size: 0x1C
    // Offset: 0x40
    ::System::Xml::XmlSqlBinaryReader::SymbolTables symbolTables;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlSqlBinaryReader::SymbolTables) == 0x1C);
    // Padding between fields: symbolTables and: xnt
    char __padding10[0x4] = {};
    // private System.Xml.XmlNameTable xnt
    // Size: 0x8
    // Offset: 0x60
    ::System::Xml::XmlNameTable* xnt;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNameTable*) == 0x8);
    // private System.Boolean xntFromSettings
    // Size: 0x1
    // Offset: 0x68
    bool xntFromSettings;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: xntFromSettings and: xml
    char __padding12[0x7] = {};
    // private System.String xml
    // Size: 0x8
    // Offset: 0x70
    ::StringW xml;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String xmlns
    // Size: 0x8
    // Offset: 0x78
    ::StringW xmlns;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String nsxmlns
    // Size: 0x8
    // Offset: 0x80
    ::StringW nsxmlns;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String baseUri
    // Size: 0x8
    // Offset: 0x88
    ::StringW baseUri;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.XmlSqlBinaryReader/System.Xml.ScanState state
    // Size: 0x4
    // Offset: 0x90
    ::System::Xml::XmlSqlBinaryReader::ScanState state;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlSqlBinaryReader::ScanState) == 0x4);
    // private System.Xml.XmlNodeType nodetype
    // Size: 0x4
    // Offset: 0x94
    ::System::Xml::XmlNodeType nodetype;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNodeType) == 0x4);
    // private System.Xml.BinXmlToken token
    // Size: 0x4
    // Offset: 0x98
    ::System::Xml::BinXmlToken token;
    // Field size check
    static_assert(sizeof(::System::Xml::BinXmlToken) == 0x4);
    // private System.Int32 attrIndex
    // Size: 0x4
    // Offset: 0x9C
    int attrIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Xml.XmlSqlBinaryReader/System.Xml.QName qnameOther
    // Size: 0x18
    // Offset: 0xA0
    ::System::Xml::XmlSqlBinaryReader::QName qnameOther;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlSqlBinaryReader::QName) == 0x18);
    // private System.Xml.XmlSqlBinaryReader/System.Xml.QName qnameElement
    // Size: 0x18
    // Offset: 0xB8
    ::System::Xml::XmlSqlBinaryReader::QName qnameElement;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlSqlBinaryReader::QName) == 0x18);
    // private System.Xml.XmlNodeType parentNodeType
    // Size: 0x4
    // Offset: 0xD0
    ::System::Xml::XmlNodeType parentNodeType;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNodeType) == 0x4);
    // Padding between fields: parentNodeType and: elementStack
    char __padding23[0x4] = {};
    // private System.Xml.XmlSqlBinaryReader/System.Xml.ElemInfo[] elementStack
    // Size: 0x8
    // Offset: 0xD8
    ::ArrayW<::System::Xml::XmlSqlBinaryReader::ElemInfo> elementStack;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::XmlSqlBinaryReader::ElemInfo>) == 0x8);
    // private System.Int32 elemDepth
    // Size: 0x4
    // Offset: 0xE0
    int elemDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: elemDepth and: attributes
    char __padding25[0x4] = {};
    // private System.Xml.XmlSqlBinaryReader/System.Xml.AttrInfo[] attributes
    // Size: 0x8
    // Offset: 0xE8
    ::ArrayW<::System::Xml::XmlSqlBinaryReader::AttrInfo> attributes;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::XmlSqlBinaryReader::AttrInfo>) == 0x8);
    // private System.Int32[] attrHashTbl
    // Size: 0x8
    // Offset: 0xF0
    ::ArrayW<int> attrHashTbl;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int32 attrCount
    // Size: 0x4
    // Offset: 0xF8
    int attrCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 posAfterAttrs
    // Size: 0x4
    // Offset: 0xFC
    int posAfterAttrs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean xmlspacePreserve
    // Size: 0x1
    // Offset: 0x100
    bool xmlspacePreserve;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: xmlspacePreserve and: tokLen
    char __padding30[0x3] = {};
    // private System.Int32 tokLen
    // Size: 0x4
    // Offset: 0x104
    int tokLen;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 tokDataPos
    // Size: 0x4
    // Offset: 0x108
    int tokDataPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean hasTypedValue
    // Size: 0x1
    // Offset: 0x10C
    bool hasTypedValue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasTypedValue and: valueType
    char __padding33[0x3] = {};
    // private System.Type valueType
    // Size: 0x8
    // Offset: 0x110
    ::System::Type* valueType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private System.String stringValue
    // Size: 0x8
    // Offset: 0x118
    ::StringW stringValue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,System.Xml.XmlSqlBinaryReader/System.Xml.NamespaceDecl> namespaces
    // Size: 0x8
    // Offset: 0x120
    ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Xml::XmlSqlBinaryReader::NamespaceDecl*>* namespaces;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Xml::XmlSqlBinaryReader::NamespaceDecl*>*) == 0x8);
    // private System.Xml.XmlSqlBinaryReader/System.Xml.NestedBinXml prevNameInfo
    // Size: 0x8
    // Offset: 0x128
    ::System::Xml::XmlSqlBinaryReader::NestedBinXml* prevNameInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlSqlBinaryReader::NestedBinXml*) == 0x8);
    // private System.Xml.XmlReader textXmlReader
    // Size: 0x8
    // Offset: 0x130
    ::System::Xml::XmlReader* textXmlReader;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlReader*) == 0x8);
    // private System.Boolean closeInput
    // Size: 0x1
    // Offset: 0x138
    bool closeInput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean checkCharacters
    // Size: 0x1
    // Offset: 0x139
    bool checkCharacters;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean ignoreWhitespace
    // Size: 0x1
    // Offset: 0x13A
    bool ignoreWhitespace;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean ignorePIs
    // Size: 0x1
    // Offset: 0x13B
    bool ignorePIs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean ignoreComments
    // Size: 0x1
    // Offset: 0x13C
    bool ignoreComments;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ignoreComments and: dtdProcessing
    char __padding43[0x3] = {};
    // private System.Xml.DtdProcessing dtdProcessing
    // Size: 0x4
    // Offset: 0x140
    ::System::Xml::DtdProcessing dtdProcessing;
    // Field size check
    static_assert(sizeof(::System::Xml::DtdProcessing) == 0x4);
    // Padding between fields: dtdProcessing and: hasher
    char __padding44[0x4] = {};
    // private System.Xml.SecureStringHasher hasher
    // Size: 0x8
    // Offset: 0x148
    ::System::Xml::SecureStringHasher* hasher;
    // Field size check
    static_assert(sizeof(::System::Xml::SecureStringHasher*) == 0x8);
    // private System.Xml.XmlCharType xmlCharType
    // Size: 0x8
    // Offset: 0x150
    ::System::Xml::XmlCharType xmlCharType;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlCharType) == 0x8);
    // private System.Text.Encoding unicode
    // Size: 0x8
    // Offset: 0x158
    ::System::Text::Encoding* unicode;
    // Field size check
    static_assert(sizeof(::System::Text::Encoding*) == 0x8);
    // private System.Byte version
    // Size: 0x1
    // Offset: 0x160
    uint8_t version;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::Xml::IXmlNamespaceResolver
    operator ::System::Xml::IXmlNamespaceResolver() noexcept {
      return *reinterpret_cast<::System::Xml::IXmlNamespaceResolver*>(this);
    }
    // Get static field: static readonly System.Type TypeOfObject
    static ::System::Type* _get_TypeOfObject();
    // Set static field: static readonly System.Type TypeOfObject
    static void _set_TypeOfObject(::System::Type* value);
    // Get static field: static readonly System.Type TypeOfString
    static ::System::Type* _get_TypeOfString();
    // Set static field: static readonly System.Type TypeOfString
    static void _set_TypeOfString(::System::Type* value);
    // Get static field: static private System.Type[] TokenTypeMap
    static ::ArrayW<::System::Type*> _get_TokenTypeMap();
    // Set static field: static private System.Type[] TokenTypeMap
    static void _set_TokenTypeMap(::ArrayW<::System::Type*> value);
    // Get static field: static private System.Byte[] XsdKatmaiTimeScaleToValueLengthMap
    static ::ArrayW<uint8_t> _get_XsdKatmaiTimeScaleToValueLengthMap();
    // Set static field: static private System.Byte[] XsdKatmaiTimeScaleToValueLengthMap
    static void _set_XsdKatmaiTimeScaleToValueLengthMap(::ArrayW<uint8_t> value);
    // Get static field: static private System.Xml.ReadState[] ScanState2ReadState
    static ::ArrayW<::System::Xml::ReadState> _get_ScanState2ReadState();
    // Set static field: static private System.Xml.ReadState[] ScanState2ReadState
    static void _set_ScanState2ReadState(::ArrayW<::System::Xml::ReadState> value);
    // Get instance field reference: private System.IO.Stream inStrm
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn_inStrm();
    // Get instance field reference: private System.Byte[] data
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_data();
    // Get instance field reference: private System.Int32 pos
    [[deprecated("Use field access instead!")]] int& dyn_pos();
    // Get instance field reference: private System.Int32 mark
    [[deprecated("Use field access instead!")]] int& dyn_mark();
    // Get instance field reference: private System.Int32 end
    [[deprecated("Use field access instead!")]] int& dyn_end();
    // Get instance field reference: private System.Int64 offset
    [[deprecated("Use field access instead!")]] int64_t& dyn_offset();
    // Get instance field reference: private System.Boolean eof
    [[deprecated("Use field access instead!")]] bool& dyn_eof();
    // Get instance field reference: private System.Boolean sniffed
    [[deprecated("Use field access instead!")]] bool& dyn_sniffed();
    // Get instance field reference: private System.Boolean isEmpty
    [[deprecated("Use field access instead!")]] bool& dyn_isEmpty();
    // Get instance field reference: private System.Int32 docState
    [[deprecated("Use field access instead!")]] int& dyn_docState();
    // Get instance field reference: private System.Xml.XmlSqlBinaryReader/System.Xml.SymbolTables symbolTables
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlSqlBinaryReader::SymbolTables& dyn_symbolTables();
    // Get instance field reference: private System.Xml.XmlNameTable xnt
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNameTable*& dyn_xnt();
    // Get instance field reference: private System.Boolean xntFromSettings
    [[deprecated("Use field access instead!")]] bool& dyn_xntFromSettings();
    // Get instance field reference: private System.String xml
    [[deprecated("Use field access instead!")]] ::StringW& dyn_xml();
    // Get instance field reference: private System.String xmlns
    [[deprecated("Use field access instead!")]] ::StringW& dyn_xmlns();
    // Get instance field reference: private System.String nsxmlns
    [[deprecated("Use field access instead!")]] ::StringW& dyn_nsxmlns();
    // Get instance field reference: private System.String baseUri
    [[deprecated("Use field access instead!")]] ::StringW& dyn_baseUri();
    // Get instance field reference: private System.Xml.XmlSqlBinaryReader/System.Xml.ScanState state
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlSqlBinaryReader::ScanState& dyn_state();
    // Get instance field reference: private System.Xml.XmlNodeType nodetype
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNodeType& dyn_nodetype();
    // Get instance field reference: private System.Xml.BinXmlToken token
    [[deprecated("Use field access instead!")]] ::System::Xml::BinXmlToken& dyn_token();
    // Get instance field reference: private System.Int32 attrIndex
    [[deprecated("Use field access instead!")]] int& dyn_attrIndex();
    // Get instance field reference: private System.Xml.XmlSqlBinaryReader/System.Xml.QName qnameOther
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlSqlBinaryReader::QName& dyn_qnameOther();
    // Get instance field reference: private System.Xml.XmlSqlBinaryReader/System.Xml.QName qnameElement
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlSqlBinaryReader::QName& dyn_qnameElement();
    // Get instance field reference: private System.Xml.XmlNodeType parentNodeType
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNodeType& dyn_parentNodeType();
    // Get instance field reference: private System.Xml.XmlSqlBinaryReader/System.Xml.ElemInfo[] elementStack
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Xml::XmlSqlBinaryReader::ElemInfo>& dyn_elementStack();
    // Get instance field reference: private System.Int32 elemDepth
    [[deprecated("Use field access instead!")]] int& dyn_elemDepth();
    // Get instance field reference: private System.Xml.XmlSqlBinaryReader/System.Xml.AttrInfo[] attributes
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Xml::XmlSqlBinaryReader::AttrInfo>& dyn_attributes();
    // Get instance field reference: private System.Int32[] attrHashTbl
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_attrHashTbl();
    // Get instance field reference: private System.Int32 attrCount
    [[deprecated("Use field access instead!")]] int& dyn_attrCount();
    // Get instance field reference: private System.Int32 posAfterAttrs
    [[deprecated("Use field access instead!")]] int& dyn_posAfterAttrs();
    // Get instance field reference: private System.Boolean xmlspacePreserve
    [[deprecated("Use field access instead!")]] bool& dyn_xmlspacePreserve();
    // Get instance field reference: private System.Int32 tokLen
    [[deprecated("Use field access instead!")]] int& dyn_tokLen();
    // Get instance field reference: private System.Int32 tokDataPos
    [[deprecated("Use field access instead!")]] int& dyn_tokDataPos();
    // Get instance field reference: private System.Boolean hasTypedValue
    [[deprecated("Use field access instead!")]] bool& dyn_hasTypedValue();
    // Get instance field reference: private System.Type valueType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_valueType();
    // Get instance field reference: private System.String stringValue
    [[deprecated("Use field access instead!")]] ::StringW& dyn_stringValue();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.Xml.XmlSqlBinaryReader/System.Xml.NamespaceDecl> namespaces
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Xml::XmlSqlBinaryReader::NamespaceDecl*>*& dyn_namespaces();
    // Get instance field reference: private System.Xml.XmlSqlBinaryReader/System.Xml.NestedBinXml prevNameInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlSqlBinaryReader::NestedBinXml*& dyn_prevNameInfo();
    // Get instance field reference: private System.Xml.XmlReader textXmlReader
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlReader*& dyn_textXmlReader();
    // Get instance field reference: private System.Boolean closeInput
    [[deprecated("Use field access instead!")]] bool& dyn_closeInput();
    // Get instance field reference: private System.Boolean checkCharacters
    [[deprecated("Use field access instead!")]] bool& dyn_checkCharacters();
    // Get instance field reference: private System.Boolean ignoreWhitespace
    [[deprecated("Use field access instead!")]] bool& dyn_ignoreWhitespace();
    // Get instance field reference: private System.Boolean ignorePIs
    [[deprecated("Use field access instead!")]] bool& dyn_ignorePIs();
    // Get instance field reference: private System.Boolean ignoreComments
    [[deprecated("Use field access instead!")]] bool& dyn_ignoreComments();
    // Get instance field reference: private System.Xml.DtdProcessing dtdProcessing
    [[deprecated("Use field access instead!")]] ::System::Xml::DtdProcessing& dyn_dtdProcessing();
    // Get instance field reference: private System.Xml.SecureStringHasher hasher
    [[deprecated("Use field access instead!")]] ::System::Xml::SecureStringHasher*& dyn_hasher();
    // Get instance field reference: private System.Xml.XmlCharType xmlCharType
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlCharType& dyn_xmlCharType();
    // Get instance field reference: private System.Text.Encoding unicode
    [[deprecated("Use field access instead!")]] ::System::Text::Encoding*& dyn_unicode();
    // Get instance field reference: private System.Byte version
    [[deprecated("Use field access instead!")]] uint8_t& dyn_version();
    // public System.Void .ctor(System.IO.Stream stream, System.Byte[] data, System.Int32 len, System.String baseUri, System.Boolean closeInput, System.Xml.XmlReaderSettings settings)
    // Offset: 0x132D944
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSqlBinaryReader* New_ctor(::System::IO::Stream* stream, ::ArrayW<uint8_t> data, int len, ::StringW baseUri, bool closeInput, ::System::Xml::XmlReaderSettings* settings) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlSqlBinaryReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSqlBinaryReader*, creationType>(stream, data, len, baseUri, closeInput, settings)));
    }
    // private System.Collections.Generic.IDictionary`2<System.String,System.String> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope scope)
    // Offset: 0x13311B8
    ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* System_Xml_IXmlNamespaceResolver_GetNamespacesInScope(::System::Xml::XmlNamespaceScope scope);
    // private System.String System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String namespaceName)
    // Offset: 0x133154C
    ::StringW System_Xml_IXmlNamespaceResolver_LookupPrefix(::StringW namespaceName);
    // private System.Void VerifyVersion(System.Int32 requiredVersion, System.Xml.BinXmlToken token)
    // Offset: 0x13316FC
    void VerifyVersion(int requiredVersion, ::System::Xml::BinXmlToken token);
    // private System.Void AddInitNamespace(System.String prefix, System.String uri)
    // Offset: 0x132DDC0
    void AddInitNamespace(::StringW prefix, ::StringW uri);
    // private System.Void AddName()
    // Offset: 0x1331784
    void AddName();
    // private System.Void AddQName()
    // Offset: 0x13319A8
    void AddQName();
    // private System.Void NameFlush()
    // Offset: 0x1331CE0
    void NameFlush();
    // private System.Void SkipExtn()
    // Offset: 0x1331D3C
    void SkipExtn();
    // private System.Int32 ReadQNameRef()
    // Offset: 0x1331E28
    int ReadQNameRef();
    // private System.Int32 ReadNameRef()
    // Offset: 0x1331C50
    int ReadNameRef();
    // private System.Boolean FillAllowEOF()
    // Offset: 0x1331EB8
    bool FillAllowEOF();
    // private System.Void Fill_(System.Int32 require)
    // Offset: 0x13320F8
    void Fill_(int require);
    // private System.Void Fill(System.Int32 require)
    // Offset: 0x1331E0C
    void Fill(int require);
    // private System.Byte ReadByte()
    // Offset: 0x13321EC
    uint8_t ReadByte();
    // private System.UInt16 ReadUShort()
    // Offset: 0x133225C
    uint16_t ReadUShort();
    // private System.Int32 ParseMB32()
    // Offset: 0x1331DCC
    int ParseMB32();
    // private System.Int32 ParseMB32_(System.Byte b)
    // Offset: 0x13322E4
    int ParseMB32_(uint8_t b);
    // private System.Int32 ParseMB32(System.Int32 pos)
    // Offset: 0x133238C
    int ParseMB32(int pos);
    // private System.Int32 ParseMB64()
    // Offset: 0x1332490
    int ParseMB64();
    // private System.Xml.BinXmlToken PeekToken()
    // Offset: 0x13324D0
    ::System::Xml::BinXmlToken PeekToken();
    // private System.Xml.BinXmlToken ReadToken()
    // Offset: 0x133254C
    ::System::Xml::BinXmlToken ReadToken();
    // private System.Xml.BinXmlToken NextToken2(System.Xml.BinXmlToken token)
    // Offset: 0x13325D0
    ::System::Xml::BinXmlToken NextToken2(::System::Xml::BinXmlToken token);
    // private System.Xml.BinXmlToken NextToken1()
    // Offset: 0x1332654
    ::System::Xml::BinXmlToken NextToken1();
    // private System.Xml.BinXmlToken NextToken()
    // Offset: 0x13326E4
    ::System::Xml::BinXmlToken NextToken();
    // private System.Xml.BinXmlToken PeekNextToken()
    // Offset: 0x1332754
    ::System::Xml::BinXmlToken PeekNextToken();
    // private System.Xml.BinXmlToken RescanNextToken()
    // Offset: 0x1330390
    ::System::Xml::BinXmlToken RescanNextToken();
    // private System.String ParseText()
    // Offset: 0x13318CC
    ::StringW ParseText();
    // private System.Int32 ScanText(out System.Int32 start)
    // Offset: 0x1332788
    int ScanText(ByRef<int> start);
    // private System.String GetString(System.Int32 pos, System.Int32 cch)
    // Offset: 0x132EB48
    ::StringW GetString(int pos, int cch);
    // private System.String GetStringAligned(System.Byte[] data, System.Int32 offset, System.Int32 cch)
    // Offset: 0x1332860
    ::StringW GetStringAligned(::ArrayW<uint8_t> data, int offset, int cch);
    // private System.String GetAttributeText(System.Int32 i)
    // Offset: 0x132F674
    ::StringW GetAttributeText(int i);
    // private System.Int32 LocateAttribute(System.String name, System.String ns)
    // Offset: 0x132FB48
    int LocateAttribute(::StringW name, ::StringW ns);
    // private System.Int32 LocateAttribute(System.String name)
    // Offset: 0x132FC68
    int LocateAttribute(::StringW name);
    // private System.Void PositionOnAttribute(System.Int32 i)
    // Offset: 0x132FEB0
    void PositionOnAttribute(int i);
    // private System.Void GrowElements()
    // Offset: 0x133288C
    void GrowElements();
    // private System.Void GrowAttributes()
    // Offset: 0x1332918
    void GrowAttributes();
    // private System.Void ClearAttributes()
    // Offset: 0x13329A0
    void ClearAttributes();
    // private System.Void PushNamespace(System.String prefix, System.String ns, System.Boolean implied)
    // Offset: 0x13329B0
    void PushNamespace(::StringW prefix, ::StringW ns, bool implied);
    // private System.Void PopNamespaces(System.Xml.XmlSqlBinaryReader/System.Xml.NamespaceDecl firstInScopeChain)
    // Offset: 0x1332BEC
    void PopNamespaces(::System::Xml::XmlSqlBinaryReader::NamespaceDecl* firstInScopeChain);
    // private System.Void GenerateImpliedXmlnsAttrs()
    // Offset: 0x1332C94
    void GenerateImpliedXmlnsAttrs();
    // private System.Boolean ReadInit(System.Boolean skipXmlDecl)
    // Offset: 0x133097C
    bool ReadInit(bool skipXmlDecl);
    // private System.Void ScanAttributes()
    // Offset: 0x1332E1C
    void ScanAttributes();
    // private System.Void SimpleCheckForDuplicateAttributes()
    // Offset: 0x13335D0
    void SimpleCheckForDuplicateAttributes();
    // private System.Void HashCheckForDuplicateAttributes()
    // Offset: 0x133373C
    void HashCheckForDuplicateAttributes();
    // private System.String XmlDeclValue()
    // Offset: 0x132EDC8
    ::StringW XmlDeclValue();
    // private System.String CDATAValue()
    // Offset: 0x132ECB8
    ::StringW CDATAValue();
    // private System.Void FinishCDATA()
    // Offset: 0x13339A8
    void FinishCDATA();
    // private System.Void FinishEndElement()
    // Offset: 0x1333A50
    void FinishEndElement();
    // private System.Boolean ReadDoc()
    // Offset: 0x1330E5C
    bool ReadDoc();
    // private System.Void ImplReadData(System.Xml.BinXmlToken tokenType)
    // Offset: 0x13345F4
    void ImplReadData(::System::Xml::BinXmlToken tokenType);
    // private System.Void ImplReadElement()
    // Offset: 0x1333AC0
    void ImplReadElement();
    // private System.Void ImplReadEndElement()
    // Offset: 0x1333D3C
    void ImplReadEndElement();
    // private System.Void ImplReadDoctype()
    // Offset: 0x1333E18
    void ImplReadDoctype();
    // private System.Void ImplReadPI()
    // Offset: 0x13340F0
    void ImplReadPI();
    // private System.Void ImplReadComment()
    // Offset: 0x1334160
    void ImplReadComment();
    // private System.Void ImplReadCDATA()
    // Offset: 0x1334198
    void ImplReadCDATA();
    // private System.Void ImplReadNest()
    // Offset: 0x13341D8
    void ImplReadNest();
    // private System.Void ImplReadEndNest()
    // Offset: 0x1334284
    void ImplReadEndNest();
    // private System.Void ImplReadXmlText()
    // Offset: 0x13342B4
    void ImplReadXmlText();
    // private System.Void UpdateFromTextReader()
    // Offset: 0x13347E4
    void UpdateFromTextReader();
    // private System.Boolean UpdateFromTextReader(System.Boolean needUpdate)
    // Offset: 0x132FE88
    bool UpdateFromTextReader(bool needUpdate);
    // private System.Void CheckAllowContent()
    // Offset: 0x1334778
    void CheckAllowContent();
    // private System.Void GenerateTokenTypeMap()
    // Offset: 0x132DEA8
    void GenerateTokenTypeMap();
    // private System.Type GetValueType(System.Xml.BinXmlToken token)
    // Offset: 0x1330488
    ::System::Type* GetValueType(::System::Xml::BinXmlToken token);
    // private System.Void ReScanOverValue(System.Xml.BinXmlToken token)
    // Offset: 0x133047C
    void ReScanOverValue(::System::Xml::BinXmlToken token);
    // private System.Xml.XmlNodeType ScanOverValue(System.Xml.BinXmlToken token, System.Boolean attr, System.Boolean checkChars)
    // Offset: 0x1333408
    ::System::Xml::XmlNodeType ScanOverValue(::System::Xml::BinXmlToken token, bool attr, bool checkChars);
    // private System.Xml.XmlNodeType ScanOverAnyValue(System.Xml.BinXmlToken token, System.Boolean attr, System.Boolean checkChars)
    // Offset: 0x1334B60
    ::System::Xml::XmlNodeType ScanOverAnyValue(::System::Xml::BinXmlToken token, bool attr, bool checkChars);
    // private System.Xml.XmlNodeType CheckText(System.Boolean attr)
    // Offset: 0x1334890
    ::System::Xml::XmlNodeType CheckText(bool attr);
    // private System.Xml.XmlNodeType CheckTextIsWS()
    // Offset: 0x1334AB8
    ::System::Xml::XmlNodeType CheckTextIsWS();
    // private System.Void CheckValueTokenBounds()
    // Offset: 0x1334F80
    void CheckValueTokenBounds();
    // private System.Int32 GetXsdKatmaiTokenLength(System.Xml.BinXmlToken token)
    // Offset: 0x1334E84
    int GetXsdKatmaiTokenLength(::System::Xml::BinXmlToken token);
    // private System.Int32 XsdKatmaiTimeScaleToValueLength(System.Byte scale)
    // Offset: 0x1334FE4
    int XsdKatmaiTimeScaleToValueLength(uint8_t scale);
    // private System.Int64 ValueAsLong()
    // Offset: 0x13350D0
    int64_t ValueAsLong();
    // private System.UInt64 ValueAsULong()
    // Offset: 0x13358FC
    uint64_t ValueAsULong();
    // private System.Decimal ValueAsDecimal()
    // Offset: 0x1335764
    ::System::Decimal ValueAsDecimal();
    // private System.Double ValueAsDouble()
    // Offset: 0x1335628
    double ValueAsDouble();
    // private System.String ValueAsDateTimeString()
    // Offset: 0x1335ABC
    ::StringW ValueAsDateTimeString();
    // private System.String ValueAsString(System.Xml.BinXmlToken token)
    // Offset: 0x132EF1C
    ::StringW ValueAsString(::System::Xml::BinXmlToken token);
    // private System.Int16 GetInt16(System.Int32 pos)
    // Offset: 0x13352D0
    int16_t GetInt16(int pos);
    // private System.UInt16 GetUInt16(System.Int32 pos)
    // Offset: 0x133547C
    uint16_t GetUInt16(int pos);
    // private System.Int32 GetInt32(System.Int32 pos)
    // Offset: 0x1335320
    int GetInt32(int pos);
    // private System.UInt32 GetUInt32(System.Int32 pos)
    // Offset: 0x13354CC
    uint GetUInt32(int pos);
    // private System.Int64 GetInt64(System.Int32 pos)
    // Offset: 0x13353A0
    int64_t GetInt64(int pos);
    // private System.UInt64 GetUInt64(System.Int32 pos)
    // Offset: 0x133554C
    uint64_t GetUInt64(int pos);
    // private System.Single GetSingle(System.Int32 offset)
    // Offset: 0x1335958
    float GetSingle(int offset);
    // private System.Double GetDouble(System.Int32 offset)
    // Offset: 0x13359DC
    double GetDouble(int offset);
    // private System.Exception ThrowUnexpectedToken(System.Xml.BinXmlToken token)
    // Offset: 0x1331738
    ::System::Exception* ThrowUnexpectedToken(::System::Xml::BinXmlToken token);
    // private System.Exception ThrowXmlException(System.String res)
    // Offset: 0x1332174
    ::System::Exception* ThrowXmlException(::StringW res);
    // private System.Exception ThrowXmlException(System.String res, System.String arg1, System.String arg2)
    // Offset: 0x13332F0
    ::System::Exception* ThrowXmlException(::StringW res, ::StringW arg1, ::StringW arg2);
    // private System.Exception ThrowNotSupported(System.String res)
    // Offset: 0x1333548
    ::System::Exception* ThrowNotSupported(::StringW res);
    // public override System.Xml.XmlReaderSettings get_Settings()
    // Offset: 0x132E8F4
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.XmlReaderSettings XmlReader::get_Settings()
    ::System::Xml::XmlReaderSettings* get_Settings();
    // public override System.Xml.XmlNodeType get_NodeType()
    // Offset: 0x132EA18
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.XmlNodeType XmlReader::get_NodeType()
    ::System::Xml::XmlNodeType get_NodeType();
    // public override System.String get_LocalName()
    // Offset: 0x132EA20
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_LocalName()
    ::StringW get_LocalName();
    // public override System.String get_NamespaceURI()
    // Offset: 0x132EA28
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_NamespaceURI()
    ::StringW get_NamespaceURI();
    // public override System.String get_Prefix()
    // Offset: 0x132EA30
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_Prefix()
    ::StringW get_Prefix();
    // public override System.String get_Value()
    // Offset: 0x132EA38
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_Value()
    ::StringW get_Value();
    // public override System.Int32 get_Depth()
    // Offset: 0x132F794
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Int32 XmlReader::get_Depth()
    int get_Depth();
    // public override System.String get_BaseURI()
    // Offset: 0x132F840
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_BaseURI()
    ::StringW get_BaseURI();
    // public override System.Boolean get_IsEmptyElement()
    // Offset: 0x132F848
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::get_IsEmptyElement()
    bool get_IsEmptyElement();
    // public override System.Xml.XmlSpace get_XmlSpace()
    // Offset: 0x132F86C
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.XmlSpace XmlReader::get_XmlSpace()
    ::System::Xml::XmlSpace get_XmlSpace();
    // public override System.String get_XmlLang()
    // Offset: 0x132F8F8
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_XmlLang()
    ::StringW get_XmlLang();
    // public override System.Type get_ValueType()
    // Offset: 0x132F9C4
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Type XmlReader::get_ValueType()
    ::System::Type* get_ValueType();
    // public override System.Int32 get_AttributeCount()
    // Offset: 0x132F9CC
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Int32 XmlReader::get_AttributeCount()
    int get_AttributeCount();
    // public override System.Boolean get_EOF()
    // Offset: 0x1330210
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::get_EOF()
    bool get_EOF();
    // public override System.Xml.XmlNameTable get_NameTable()
    // Offset: 0x1330608
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.XmlNameTable XmlReader::get_NameTable()
    ::System::Xml::XmlNameTable* get_NameTable();
    // public override System.Xml.ReadState get_ReadState()
    // Offset: 0x1330708
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.ReadState XmlReader::get_ReadState()
    ::System::Xml::ReadState get_ReadState();
    // static private System.Void .cctor()
    // Offset: 0x1335E94
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Void XmlReader::.cctor()
    static void _cctor();
    // public override System.String GetAttribute(System.String name, System.String ns)
    // Offset: 0x132FA1C
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::GetAttribute(System.String name, System.String ns)
    ::StringW GetAttribute(::StringW name, ::StringW ns);
    // public override System.String GetAttribute(System.String name)
    // Offset: 0x132FBE8
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::GetAttribute(System.String name)
    ::StringW GetAttribute(::StringW name);
    // public override System.String GetAttribute(System.Int32 i)
    // Offset: 0x132FD60
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::GetAttribute(System.Int32 i)
    ::StringW GetAttribute(int i);
    // public override System.Boolean MoveToAttribute(System.String name)
    // Offset: 0x132FE00
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::MoveToAttribute(System.String name)
    bool MoveToAttribute(::StringW name);
    // public override System.Void MoveToAttribute(System.Int32 i)
    // Offset: 0x132FF8C
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Void XmlReader::MoveToAttribute(System.Int32 i)
    void MoveToAttribute(int i);
    // public override System.Boolean MoveToFirstAttribute()
    // Offset: 0x1330040
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::MoveToFirstAttribute()
    bool MoveToFirstAttribute();
    // public override System.Boolean MoveToNextAttribute()
    // Offset: 0x13300BC
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::MoveToNextAttribute()
    bool MoveToNextAttribute();
    // public override System.Boolean MoveToElement()
    // Offset: 0x133014C
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::MoveToElement()
    bool MoveToElement();
    // public override System.Boolean ReadAttributeValue()
    // Offset: 0x1330220
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::ReadAttributeValue()
    bool ReadAttributeValue();
    // public override System.Void Close()
    // Offset: 0x1330590
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Void XmlReader::Close()
    void Close();
    // public override System.String LookupNamespace(System.String prefix)
    // Offset: 0x1330610
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::LookupNamespace(System.String prefix)
    ::StringW LookupNamespace(::StringW prefix);
    // public override System.Void ResolveEntity()
    // Offset: 0x13306C8
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Void XmlReader::ResolveEntity()
    void ResolveEntity();
    // public override System.Boolean Read()
    // Offset: 0x133079C
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::Read()
    bool Read();
  }; // System.Xml.XmlSqlBinaryReader
  #pragma pack(pop)
  static check_size<sizeof(XmlSqlBinaryReader), 352 + sizeof(uint8_t)> __System_Xml_XmlSqlBinaryReaderSizeCheck;
  static_assert(sizeof(XmlSqlBinaryReader) == 0x161);
  // static public System.Boolean op_Equality(System.Xml.XmlSqlBinaryReader/System.Xml.QName a, System.Xml.XmlSqlBinaryReader/System.Xml.QName b)
  // Offset: 0xC229A8
  bool operator ==(const ::System::Xml::XmlSqlBinaryReader::QName& a, const ::System::Xml::XmlSqlBinaryReader::QName& b);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlSqlBinaryReader::SymbolTables, "System.Xml", "XmlSqlBinaryReader/SymbolTables");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlSqlBinaryReader::AttrInfo, "System.Xml", "XmlSqlBinaryReader/AttrInfo");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlSqlBinaryReader::ElemInfo, "System.Xml", "XmlSqlBinaryReader/ElemInfo");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlSqlBinaryReader::QName, "System.Xml", "XmlSqlBinaryReader/QName");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlSqlBinaryReader::ScanState, "System.Xml", "XmlSqlBinaryReader/ScanState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::System_Xml_IXmlNamespaceResolver_GetNamespacesInScope
// Il2CppName: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* (System::Xml::XmlSqlBinaryReader::*)(::System::Xml::XmlNamespaceScope)>(&System::Xml::XmlSqlBinaryReader::System_Xml_IXmlNamespaceResolver_GetNamespacesInScope)> {
  static const MethodInfo* get() {
    static auto* scope = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamespaceScope")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scope});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::System_Xml_IXmlNamespaceResolver_LookupPrefix
// Il2CppName: System.Xml.IXmlNamespaceResolver.LookupPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)(::StringW)>(&System::Xml::XmlSqlBinaryReader::System_Xml_IXmlNamespaceResolver_LookupPrefix)> {
  static const MethodInfo* get() {
    static auto* namespaceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "System.Xml.IXmlNamespaceResolver.LookupPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{namespaceName});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::VerifyVersion
// Il2CppName: VerifyVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)(int, ::System::Xml::BinXmlToken)>(&System::Xml::XmlSqlBinaryReader::VerifyVersion)> {
  static const MethodInfo* get() {
    static auto* requiredVersion = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* token = &::il2cpp_utils::GetClassFromName("System.Xml", "BinXmlToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "VerifyVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requiredVersion, token});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::AddInitNamespace
// Il2CppName: AddInitNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)(::StringW, ::StringW)>(&System::Xml::XmlSqlBinaryReader::AddInitNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "AddInitNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, uri});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::AddName
// Il2CppName: AddName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::AddName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "AddName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::AddQName
// Il2CppName: AddQName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::AddQName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "AddQName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::NameFlush
// Il2CppName: NameFlush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::NameFlush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "NameFlush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::SkipExtn
// Il2CppName: SkipExtn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::SkipExtn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "SkipExtn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ReadQNameRef
// Il2CppName: ReadQNameRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ReadQNameRef)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ReadQNameRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ReadNameRef
// Il2CppName: ReadNameRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ReadNameRef)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ReadNameRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::FillAllowEOF
// Il2CppName: FillAllowEOF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::FillAllowEOF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "FillAllowEOF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::Fill_
// Il2CppName: Fill_
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)(int)>(&System::Xml::XmlSqlBinaryReader::Fill_)> {
  static const MethodInfo* get() {
    static auto* require = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "Fill_", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{require});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::Fill
// Il2CppName: Fill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)(int)>(&System::Xml::XmlSqlBinaryReader::Fill)> {
  static const MethodInfo* get() {
    static auto* require = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "Fill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{require});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ReadByte
// Il2CppName: ReadByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ReadByte)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ReadByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ReadUShort
// Il2CppName: ReadUShort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ReadUShort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ReadUShort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ParseMB32
// Il2CppName: ParseMB32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ParseMB32)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ParseMB32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ParseMB32_
// Il2CppName: ParseMB32_
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlSqlBinaryReader::*)(uint8_t)>(&System::Xml::XmlSqlBinaryReader::ParseMB32_)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ParseMB32_", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ParseMB32
// Il2CppName: ParseMB32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlSqlBinaryReader::*)(int)>(&System::Xml::XmlSqlBinaryReader::ParseMB32)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ParseMB32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ParseMB64
// Il2CppName: ParseMB64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ParseMB64)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ParseMB64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::PeekToken
// Il2CppName: PeekToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::BinXmlToken (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::PeekToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "PeekToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ReadToken
// Il2CppName: ReadToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::BinXmlToken (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ReadToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ReadToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::NextToken2
// Il2CppName: NextToken2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::BinXmlToken (System::Xml::XmlSqlBinaryReader::*)(::System::Xml::BinXmlToken)>(&System::Xml::XmlSqlBinaryReader::NextToken2)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System.Xml", "BinXmlToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "NextToken2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::NextToken1
// Il2CppName: NextToken1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::BinXmlToken (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::NextToken1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "NextToken1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::NextToken
// Il2CppName: NextToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::BinXmlToken (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::NextToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "NextToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::PeekNextToken
// Il2CppName: PeekNextToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::BinXmlToken (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::PeekNextToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "PeekNextToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::RescanNextToken
// Il2CppName: RescanNextToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::BinXmlToken (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::RescanNextToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "RescanNextToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ParseText
// Il2CppName: ParseText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ParseText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ParseText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ScanText
// Il2CppName: ScanText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlSqlBinaryReader::*)(ByRef<int>)>(&System::Xml::XmlSqlBinaryReader::ScanText)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ScanText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GetString
// Il2CppName: GetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)(int, int)>(&System::Xml::XmlSqlBinaryReader::GetString)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cch = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, cch});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GetStringAligned
// Il2CppName: GetStringAligned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)(::ArrayW<uint8_t>, int, int)>(&System::Xml::XmlSqlBinaryReader::GetStringAligned)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cch = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GetStringAligned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, offset, cch});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GetAttributeText
// Il2CppName: GetAttributeText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)(int)>(&System::Xml::XmlSqlBinaryReader::GetAttributeText)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GetAttributeText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::LocateAttribute
// Il2CppName: LocateAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlSqlBinaryReader::*)(::StringW, ::StringW)>(&System::Xml::XmlSqlBinaryReader::LocateAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "LocateAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::LocateAttribute
// Il2CppName: LocateAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlSqlBinaryReader::*)(::StringW)>(&System::Xml::XmlSqlBinaryReader::LocateAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "LocateAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::PositionOnAttribute
// Il2CppName: PositionOnAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)(int)>(&System::Xml::XmlSqlBinaryReader::PositionOnAttribute)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "PositionOnAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GrowElements
// Il2CppName: GrowElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::GrowElements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GrowElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GrowAttributes
// Il2CppName: GrowAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::GrowAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GrowAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ClearAttributes
// Il2CppName: ClearAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ClearAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ClearAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::PushNamespace
// Il2CppName: PushNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)(::StringW, ::StringW, bool)>(&System::Xml::XmlSqlBinaryReader::PushNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* implied = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "PushNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, ns, implied});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::PopNamespaces
// Il2CppName: PopNamespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)(::System::Xml::XmlSqlBinaryReader::NamespaceDecl*)>(&System::Xml::XmlSqlBinaryReader::PopNamespaces)> {
  static const MethodInfo* get() {
    static auto* firstInScopeChain = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlSqlBinaryReader/NamespaceDecl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "PopNamespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstInScopeChain});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GenerateImpliedXmlnsAttrs
// Il2CppName: GenerateImpliedXmlnsAttrs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::GenerateImpliedXmlnsAttrs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GenerateImpliedXmlnsAttrs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ReadInit
// Il2CppName: ReadInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlSqlBinaryReader::*)(bool)>(&System::Xml::XmlSqlBinaryReader::ReadInit)> {
  static const MethodInfo* get() {
    static auto* skipXmlDecl = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ReadInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{skipXmlDecl});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ScanAttributes
// Il2CppName: ScanAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ScanAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ScanAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::SimpleCheckForDuplicateAttributes
// Il2CppName: SimpleCheckForDuplicateAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::SimpleCheckForDuplicateAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "SimpleCheckForDuplicateAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::HashCheckForDuplicateAttributes
// Il2CppName: HashCheckForDuplicateAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::HashCheckForDuplicateAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "HashCheckForDuplicateAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::XmlDeclValue
// Il2CppName: XmlDeclValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::XmlDeclValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "XmlDeclValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::CDATAValue
// Il2CppName: CDATAValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::CDATAValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "CDATAValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::FinishCDATA
// Il2CppName: FinishCDATA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::FinishCDATA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "FinishCDATA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::FinishEndElement
// Il2CppName: FinishEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::FinishEndElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "FinishEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ReadDoc
// Il2CppName: ReadDoc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ReadDoc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ReadDoc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ImplReadData
// Il2CppName: ImplReadData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)(::System::Xml::BinXmlToken)>(&System::Xml::XmlSqlBinaryReader::ImplReadData)> {
  static const MethodInfo* get() {
    static auto* tokenType = &::il2cpp_utils::GetClassFromName("System.Xml", "BinXmlToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ImplReadData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tokenType});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ImplReadElement
// Il2CppName: ImplReadElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ImplReadElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ImplReadElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ImplReadEndElement
// Il2CppName: ImplReadEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ImplReadEndElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ImplReadEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ImplReadDoctype
// Il2CppName: ImplReadDoctype
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ImplReadDoctype)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ImplReadDoctype", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ImplReadPI
// Il2CppName: ImplReadPI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ImplReadPI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ImplReadPI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ImplReadComment
// Il2CppName: ImplReadComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ImplReadComment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ImplReadComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ImplReadCDATA
// Il2CppName: ImplReadCDATA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ImplReadCDATA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ImplReadCDATA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ImplReadNest
// Il2CppName: ImplReadNest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ImplReadNest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ImplReadNest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ImplReadEndNest
// Il2CppName: ImplReadEndNest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ImplReadEndNest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ImplReadEndNest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ImplReadXmlText
// Il2CppName: ImplReadXmlText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ImplReadXmlText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ImplReadXmlText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::UpdateFromTextReader
// Il2CppName: UpdateFromTextReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::UpdateFromTextReader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "UpdateFromTextReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::UpdateFromTextReader
// Il2CppName: UpdateFromTextReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlSqlBinaryReader::*)(bool)>(&System::Xml::XmlSqlBinaryReader::UpdateFromTextReader)> {
  static const MethodInfo* get() {
    static auto* needUpdate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "UpdateFromTextReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{needUpdate});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::CheckAllowContent
// Il2CppName: CheckAllowContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::CheckAllowContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "CheckAllowContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GenerateTokenTypeMap
// Il2CppName: GenerateTokenTypeMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::GenerateTokenTypeMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GenerateTokenTypeMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GetValueType
// Il2CppName: GetValueType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Xml::XmlSqlBinaryReader::*)(::System::Xml::BinXmlToken)>(&System::Xml::XmlSqlBinaryReader::GetValueType)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System.Xml", "BinXmlToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GetValueType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ReScanOverValue
// Il2CppName: ReScanOverValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)(::System::Xml::BinXmlToken)>(&System::Xml::XmlSqlBinaryReader::ReScanOverValue)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System.Xml", "BinXmlToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ReScanOverValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ScanOverValue
// Il2CppName: ScanOverValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeType (System::Xml::XmlSqlBinaryReader::*)(::System::Xml::BinXmlToken, bool, bool)>(&System::Xml::XmlSqlBinaryReader::ScanOverValue)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System.Xml", "BinXmlToken")->byval_arg;
    static auto* attr = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* checkChars = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ScanOverValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token, attr, checkChars});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ScanOverAnyValue
// Il2CppName: ScanOverAnyValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeType (System::Xml::XmlSqlBinaryReader::*)(::System::Xml::BinXmlToken, bool, bool)>(&System::Xml::XmlSqlBinaryReader::ScanOverAnyValue)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System.Xml", "BinXmlToken")->byval_arg;
    static auto* attr = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* checkChars = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ScanOverAnyValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token, attr, checkChars});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::CheckText
// Il2CppName: CheckText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeType (System::Xml::XmlSqlBinaryReader::*)(bool)>(&System::Xml::XmlSqlBinaryReader::CheckText)> {
  static const MethodInfo* get() {
    static auto* attr = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "CheckText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attr});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::CheckTextIsWS
// Il2CppName: CheckTextIsWS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeType (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::CheckTextIsWS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "CheckTextIsWS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::CheckValueTokenBounds
// Il2CppName: CheckValueTokenBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::CheckValueTokenBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "CheckValueTokenBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GetXsdKatmaiTokenLength
// Il2CppName: GetXsdKatmaiTokenLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlSqlBinaryReader::*)(::System::Xml::BinXmlToken)>(&System::Xml::XmlSqlBinaryReader::GetXsdKatmaiTokenLength)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System.Xml", "BinXmlToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GetXsdKatmaiTokenLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::XsdKatmaiTimeScaleToValueLength
// Il2CppName: XsdKatmaiTimeScaleToValueLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlSqlBinaryReader::*)(uint8_t)>(&System::Xml::XmlSqlBinaryReader::XsdKatmaiTimeScaleToValueLength)> {
  static const MethodInfo* get() {
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "XsdKatmaiTimeScaleToValueLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scale});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ValueAsLong
// Il2CppName: ValueAsLong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ValueAsLong)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ValueAsLong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ValueAsULong
// Il2CppName: ValueAsULong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ValueAsULong)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ValueAsULong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ValueAsDecimal
// Il2CppName: ValueAsDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ValueAsDecimal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ValueAsDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ValueAsDouble
// Il2CppName: ValueAsDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ValueAsDouble)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ValueAsDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ValueAsDateTimeString
// Il2CppName: ValueAsDateTimeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ValueAsDateTimeString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ValueAsDateTimeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ValueAsString
// Il2CppName: ValueAsString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)(::System::Xml::BinXmlToken)>(&System::Xml::XmlSqlBinaryReader::ValueAsString)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System.Xml", "BinXmlToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ValueAsString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GetInt16
// Il2CppName: GetInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (System::Xml::XmlSqlBinaryReader::*)(int)>(&System::Xml::XmlSqlBinaryReader::GetInt16)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GetInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GetUInt16
// Il2CppName: GetUInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (System::Xml::XmlSqlBinaryReader::*)(int)>(&System::Xml::XmlSqlBinaryReader::GetUInt16)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GetUInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GetInt32
// Il2CppName: GetInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlSqlBinaryReader::*)(int)>(&System::Xml::XmlSqlBinaryReader::GetInt32)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GetInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GetUInt32
// Il2CppName: GetUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (System::Xml::XmlSqlBinaryReader::*)(int)>(&System::Xml::XmlSqlBinaryReader::GetUInt32)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GetUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GetInt64
// Il2CppName: GetInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Xml::XmlSqlBinaryReader::*)(int)>(&System::Xml::XmlSqlBinaryReader::GetInt64)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GetInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GetUInt64
// Il2CppName: GetUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (System::Xml::XmlSqlBinaryReader::*)(int)>(&System::Xml::XmlSqlBinaryReader::GetUInt64)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GetUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GetSingle
// Il2CppName: GetSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (System::Xml::XmlSqlBinaryReader::*)(int)>(&System::Xml::XmlSqlBinaryReader::GetSingle)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GetSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GetDouble
// Il2CppName: GetDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (System::Xml::XmlSqlBinaryReader::*)(int)>(&System::Xml::XmlSqlBinaryReader::GetDouble)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GetDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ThrowUnexpectedToken
// Il2CppName: ThrowUnexpectedToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (System::Xml::XmlSqlBinaryReader::*)(::System::Xml::BinXmlToken)>(&System::Xml::XmlSqlBinaryReader::ThrowUnexpectedToken)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System.Xml", "BinXmlToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ThrowUnexpectedToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ThrowXmlException
// Il2CppName: ThrowXmlException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (System::Xml::XmlSqlBinaryReader::*)(::StringW)>(&System::Xml::XmlSqlBinaryReader::ThrowXmlException)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ThrowXmlException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ThrowXmlException
// Il2CppName: ThrowXmlException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (System::Xml::XmlSqlBinaryReader::*)(::StringW, ::StringW, ::StringW)>(&System::Xml::XmlSqlBinaryReader::ThrowXmlException)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ThrowXmlException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res, arg1, arg2});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ThrowNotSupported
// Il2CppName: ThrowNotSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (System::Xml::XmlSqlBinaryReader::*)(::StringW)>(&System::Xml::XmlSqlBinaryReader::ThrowNotSupported)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ThrowNotSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::get_Settings
// Il2CppName: get_Settings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlReaderSettings* (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::get_Settings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "get_Settings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::get_NodeType
// Il2CppName: get_NodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeType (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::get_NodeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "get_NodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::get_LocalName
// Il2CppName: get_LocalName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::get_LocalName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "get_LocalName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::get_NamespaceURI
// Il2CppName: get_NamespaceURI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::get_NamespaceURI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "get_NamespaceURI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::get_Prefix
// Il2CppName: get_Prefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::get_Prefix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "get_Prefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::get_Depth
// Il2CppName: get_Depth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::get_Depth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "get_Depth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::get_BaseURI
// Il2CppName: get_BaseURI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::get_BaseURI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "get_BaseURI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::get_IsEmptyElement
// Il2CppName: get_IsEmptyElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::get_IsEmptyElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "get_IsEmptyElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::get_XmlSpace
// Il2CppName: get_XmlSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlSpace (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::get_XmlSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "get_XmlSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::get_XmlLang
// Il2CppName: get_XmlLang
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::get_XmlLang)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "get_XmlLang", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::get_ValueType
// Il2CppName: get_ValueType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::get_ValueType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "get_ValueType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::get_AttributeCount
// Il2CppName: get_AttributeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::get_AttributeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "get_AttributeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::get_EOF
// Il2CppName: get_EOF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::get_EOF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "get_EOF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::get_NameTable
// Il2CppName: get_NameTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNameTable* (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::get_NameTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "get_NameTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::get_ReadState
// Il2CppName: get_ReadState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::ReadState (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::get_ReadState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "get_ReadState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::XmlSqlBinaryReader::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GetAttribute
// Il2CppName: GetAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)(::StringW, ::StringW)>(&System::Xml::XmlSqlBinaryReader::GetAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GetAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GetAttribute
// Il2CppName: GetAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)(::StringW)>(&System::Xml::XmlSqlBinaryReader::GetAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GetAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::GetAttribute
// Il2CppName: GetAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)(int)>(&System::Xml::XmlSqlBinaryReader::GetAttribute)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "GetAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::MoveToAttribute
// Il2CppName: MoveToAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlSqlBinaryReader::*)(::StringW)>(&System::Xml::XmlSqlBinaryReader::MoveToAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "MoveToAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::MoveToAttribute
// Il2CppName: MoveToAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)(int)>(&System::Xml::XmlSqlBinaryReader::MoveToAttribute)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "MoveToAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::MoveToFirstAttribute
// Il2CppName: MoveToFirstAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::MoveToFirstAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "MoveToFirstAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::MoveToNextAttribute
// Il2CppName: MoveToNextAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::MoveToNextAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "MoveToNextAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::MoveToElement
// Il2CppName: MoveToElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::MoveToElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "MoveToElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ReadAttributeValue
// Il2CppName: ReadAttributeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ReadAttributeValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ReadAttributeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::LookupNamespace
// Il2CppName: LookupNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlSqlBinaryReader::*)(::StringW)>(&System::Xml::XmlSqlBinaryReader::LookupNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "LookupNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::ResolveEntity
// Il2CppName: ResolveEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::ResolveEntity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "ResolveEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlSqlBinaryReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlSqlBinaryReader::*)()>(&System::Xml::XmlSqlBinaryReader::Read)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlSqlBinaryReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
