// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.ICollection
#include "System/Collections/ICollection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: Group
  class Group;
  // Forward declaring type: Capture
  class Capture;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: CaptureCollection
  class CaptureCollection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Text::RegularExpressions::CaptureCollection);
DEFINE_IL2CPP_ARG_TYPE(::System::Text::RegularExpressions::CaptureCollection*, "System.Text.RegularExpressions", "CaptureCollection");
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Text.RegularExpressions.CaptureCollection
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 69C750
  class CaptureCollection : public ::Il2CppObject/*, public ::System::Collections::ICollection*/ {
    public:
    public:
    // System.Text.RegularExpressions.Group _group
    // Size: 0x8
    // Offset: 0x10
    ::System::Text::RegularExpressions::Group* group;
    // Field size check
    static_assert(sizeof(::System::Text::RegularExpressions::Group*) == 0x8);
    // System.Int32 _capcount
    // Size: 0x4
    // Offset: 0x18
    int capcount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: capcount and: captures
    char __padding1[0x4] = {};
    // System.Text.RegularExpressions.Capture[] _captures
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::System::Text::RegularExpressions::Capture*> captures;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Text::RegularExpressions::Capture*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::ICollection
    operator ::System::Collections::ICollection() noexcept {
      return *reinterpret_cast<::System::Collections::ICollection*>(this);
    }
    // Get instance field reference: System.Text.RegularExpressions.Group _group
    [[deprecated("Use field access instead!")]] ::System::Text::RegularExpressions::Group*& dyn__group();
    // Get instance field reference: System.Int32 _capcount
    [[deprecated("Use field access instead!")]] int& dyn__capcount();
    // Get instance field reference: System.Text.RegularExpressions.Capture[] _captures
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Text::RegularExpressions::Capture*>& dyn__captures();
    // public System.Object get_SyncRoot()
    // Offset: 0x10E0858
    ::Il2CppObject* get_SyncRoot();
    // public System.Int32 get_Count()
    // Offset: 0x10E0860
    int get_Count();
    // public System.Text.RegularExpressions.Capture get_Item(System.Int32 i)
    // Offset: 0x10E0868
    ::System::Text::RegularExpressions::Capture* get_Item(int i);
    // System.Void .ctor()
    // Offset: 0x10E0BC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CaptureCollection* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::RegularExpressions::CaptureCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CaptureCollection*, creationType>()));
    }
    // public System.Void CopyTo(System.Array array, System.Int32 arrayIndex)
    // Offset: 0x10E0A60
    void CopyTo(::System::Array* array, int arrayIndex);
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x10E0B24
    ::System::Collections::IEnumerator* GetEnumerator();
    // System.Text.RegularExpressions.Capture GetCapture(System.Int32 i)
    // Offset: 0x10E086C
    ::System::Text::RegularExpressions::Capture* GetCapture(int i);
  }; // System.Text.RegularExpressions.CaptureCollection
  #pragma pack(pop)
  static check_size<sizeof(CaptureCollection), 32 + sizeof(::ArrayW<::System::Text::RegularExpressions::Capture*>)> __System_Text_RegularExpressions_CaptureCollectionSizeCheck;
  static_assert(sizeof(CaptureCollection) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Text::RegularExpressions::CaptureCollection::get_SyncRoot
// Il2CppName: get_SyncRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Text::RegularExpressions::CaptureCollection::*)()>(&System::Text::RegularExpressions::CaptureCollection::get_SyncRoot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::CaptureCollection*), "get_SyncRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::CaptureCollection::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::CaptureCollection::*)()>(&System::Text::RegularExpressions::CaptureCollection::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::CaptureCollection*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::CaptureCollection::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::Capture* (System::Text::RegularExpressions::CaptureCollection::*)(int)>(&System::Text::RegularExpressions::CaptureCollection::get_Item)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::CaptureCollection*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::CaptureCollection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Text::RegularExpressions::CaptureCollection::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::CaptureCollection::*)(::System::Array*, int)>(&System::Text::RegularExpressions::CaptureCollection::CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* arrayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::CaptureCollection*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, arrayIndex});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::CaptureCollection::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (System::Text::RegularExpressions::CaptureCollection::*)()>(&System::Text::RegularExpressions::CaptureCollection::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::CaptureCollection*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::CaptureCollection::GetCapture
// Il2CppName: GetCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::Capture* (System::Text::RegularExpressions::CaptureCollection::*)(int)>(&System::Text::RegularExpressions::CaptureCollection::GetCapture)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::CaptureCollection*), "GetCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
