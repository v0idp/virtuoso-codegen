// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.BitArray
#include "System/Collections/BitArray.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Collections::BitArray::BitArrayEnumeratorSimple);
DEFINE_IL2CPP_ARG_TYPE(::System::Collections::BitArray::BitArrayEnumeratorSimple*, "System.Collections", "BitArray/BitArrayEnumeratorSimple");
// Type namespace: System.Collections
namespace System::Collections {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: System.Collections.BitArray/System.Collections.BitArrayEnumeratorSimple
  // [TokenAttribute] Offset: FFFFFFFF
  class BitArray::BitArrayEnumeratorSimple : public ::Il2CppObject/*, public ::System::ICloneable, public ::System::Collections::IEnumerator*/ {
    public:
    public:
    // private System.Collections.BitArray bitarray
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::BitArray* bitarray;
    // Field size check
    static_assert(sizeof(::System::Collections::BitArray*) == 0x8);
    // private System.Int32 index
    // Size: 0x4
    // Offset: 0x18
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 version
    // Size: 0x4
    // Offset: 0x1C
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean currentElement
    // Size: 0x1
    // Offset: 0x20
    bool currentElement;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::ICloneable
    operator ::System::ICloneable() noexcept {
      return *reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::IEnumerator
    operator ::System::Collections::IEnumerator() noexcept {
      return *reinterpret_cast<::System::Collections::IEnumerator*>(this);
    }
    // Get instance field reference: private System.Collections.BitArray bitarray
    [[deprecated("Use field access instead!")]] ::System::Collections::BitArray*& dyn_bitarray();
    // Get instance field reference: private System.Int32 index
    [[deprecated("Use field access instead!")]] int& dyn_index();
    // Get instance field reference: private System.Int32 version
    [[deprecated("Use field access instead!")]] int& dyn_version();
    // Get instance field reference: private System.Boolean currentElement
    [[deprecated("Use field access instead!")]] bool& dyn_currentElement();
    // public System.Object get_Current()
    // Offset: 0x13A7660
    ::Il2CppObject* get_Current();
    // System.Void .ctor(System.Collections.BitArray bitarray)
    // Offset: 0x13A7550
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BitArray::BitArrayEnumeratorSimple* New_ctor(::System::Collections::BitArray* bitarray) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::BitArray::BitArrayEnumeratorSimple::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BitArray::BitArrayEnumeratorSimple*, creationType>(bitarray)));
    }
    // public System.Object Clone()
    // Offset: 0x13A7594
    ::Il2CppObject* Clone();
    // public System.Boolean MoveNext()
    // Offset: 0x13A759C
    bool MoveNext();
    // public System.Void Reset()
    // Offset: 0x13A7740
    void Reset();
  }; // System.Collections.BitArray/System.Collections.BitArrayEnumeratorSimple
  #pragma pack(pop)
  static check_size<sizeof(BitArray::BitArrayEnumeratorSimple), 32 + sizeof(bool)> __System_Collections_BitArray_BitArrayEnumeratorSimpleSizeCheck;
  static_assert(sizeof(BitArray::BitArrayEnumeratorSimple) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Collections::BitArray::BitArrayEnumeratorSimple::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Collections::BitArray::BitArrayEnumeratorSimple::*)()>(&System::Collections::BitArray::BitArrayEnumeratorSimple::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::BitArray::BitArrayEnumeratorSimple*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::BitArray::BitArrayEnumeratorSimple::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::BitArray::BitArrayEnumeratorSimple::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Collections::BitArray::BitArrayEnumeratorSimple::*)()>(&System::Collections::BitArray::BitArrayEnumeratorSimple::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::BitArray::BitArrayEnumeratorSimple*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::BitArray::BitArrayEnumeratorSimple::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Collections::BitArray::BitArrayEnumeratorSimple::*)()>(&System::Collections::BitArray::BitArrayEnumeratorSimple::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::BitArray::BitArrayEnumeratorSimple*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::BitArray::BitArrayEnumeratorSimple::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::BitArray::BitArrayEnumeratorSimple::*)()>(&System::Collections::BitArray::BitArrayEnumeratorSimple::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::BitArray::BitArrayEnumeratorSimple*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
