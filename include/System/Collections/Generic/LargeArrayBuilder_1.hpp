// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.ArrayBuilder`1
#include "System/Collections/Generic/ArrayBuilder_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: System.Collections.Generic
namespace System::Collections::Generic {
  // Forward declaring type: LargeArrayBuilder`1<T>
  template<typename T>
  struct LargeArrayBuilder_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::System::Collections::Generic::LargeArrayBuilder_1, "System.Collections.Generic", "LargeArrayBuilder`1");
// Type namespace: System.Collections.Generic
namespace System::Collections::Generic {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Collections.Generic.LargeArrayBuilder`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  struct LargeArrayBuilder_1/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.Int32 _maxCapacity
    // Size: 0x4
    // Offset: 0x0
    int maxCapacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private T[] _first
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> first;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    // private System.Collections.Generic.ArrayBuilder`1<T[]> _buffers
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::System::Collections::Generic::ArrayBuilder_1<::ArrayW<T>> buffers;
    // private T[] _current
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> current;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    // private System.Int32 _index
    // Size: 0x4
    // Offset: 0x0
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _count
    // Size: 0x4
    // Offset: 0x0
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: LargeArrayBuilder_1
    constexpr LargeArrayBuilder_1(int maxCapacity_ = {}, ::ArrayW<T> first_ = ::ArrayW<T>(static_cast<void*>(nullptr)), ::System::Collections::Generic::ArrayBuilder_1<::ArrayW<T>> buffers_ = {}, ::ArrayW<T> current_ = ::ArrayW<T>(static_cast<void*>(nullptr)), int index_ = {}, int count_ = {}) noexcept : maxCapacity{maxCapacity_}, first{first_}, buffers{buffers_}, current{current_}, index{index_}, count{count_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Int32 _maxCapacity
    [[deprecated("Use field access instead!")]] int& dyn__maxCapacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LargeArrayBuilder_1::dyn__maxCapacity");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxCapacity"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T[] _first
    [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn__first() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LargeArrayBuilder_1::dyn__first");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_first"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.ArrayBuilder`1<T[]> _buffers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::ArrayBuilder_1<::ArrayW<T>>& dyn__buffers() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LargeArrayBuilder_1::dyn__buffers");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_buffers"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::ArrayBuilder_1<::ArrayW<T>>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T[] _current
    [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn__current() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LargeArrayBuilder_1::dyn__current");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_current"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _index
    [[deprecated("Use field access instead!")]] int& dyn__index() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LargeArrayBuilder_1::dyn__index");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_index"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _count
    [[deprecated("Use field access instead!")]] int& dyn__count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LargeArrayBuilder_1::dyn__count");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_count"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(System.Boolean initialize)
    // Offset: 0xFFFFFFFFFFFFFFFF
    LargeArrayBuilder_1(bool initialize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LargeArrayBuilder_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initialize)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, initialize);
    }
    // public System.Void .ctor(System.Int32 maxCapacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    LargeArrayBuilder_1(int maxCapacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LargeArrayBuilder_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxCapacity)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, maxCapacity);
    }
    // public System.Void AddRange(System.Collections.Generic.IEnumerable`1<T> items)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddRange(::System::Collections::Generic::IEnumerable_1<T>* items) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LargeArrayBuilder_1::AddRange");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AddRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(items)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, items);
    }
    // public System.Void CopyTo(T[] array, System.Int32 arrayIndex, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyTo(::ArrayW<T> array, int arrayIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LargeArrayBuilder_1::CopyTo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(arrayIndex), ::il2cpp_utils::ExtractType(count)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, arrayIndex, count);
    }
    // public T[] GetBuffer(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<T> GetBuffer(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LargeArrayBuilder_1::GetBuffer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(this, ___internal__method, index);
    }
    // public T[] ToArray()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<T> ToArray() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LargeArrayBuilder_1::ToArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(this, ___internal__method);
    }
    // public System.Boolean TryMove(out T[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryMove(ByRef<::ArrayW<T>> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LargeArrayBuilder_1::TryMove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::ArrayW<T>&>()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(array));
    }
    // private System.Void AllocateBuffer()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AllocateBuffer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LargeArrayBuilder_1::AllocateBuffer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AllocateBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // System.Collections.Generic.LargeArrayBuilder`1
  // Could not write size check! Type: System.Collections.Generic.LargeArrayBuilder`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
