// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.Collections.ICollection
#include "System/Collections/ICollection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: System.Collections
namespace System::Collections {
  // Forward declaring type: BitArray
  class BitArray;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Collections::BitArray);
DEFINE_IL2CPP_ARG_TYPE(::System::Collections::BitArray*, "System.Collections", "BitArray");
// Type namespace: System.Collections
namespace System::Collections {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Collections.BitArray
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: 686968
  // [DefaultMemberAttribute] Offset: 686968
  class BitArray : public ::Il2CppObject/*, public ::System::ICloneable, public ::System::Collections::ICollection*/ {
    public:
    // Nested type: ::System::Collections::BitArray::BitArrayEnumeratorSimple
    class BitArrayEnumeratorSimple;
    public:
    // private System.Int32[] m_array
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<int> m_array;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int32 m_length
    // Size: 0x4
    // Offset: 0x18
    int m_length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _version
    // Size: 0x4
    // Offset: 0x1C
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Object _syncRoot
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppObject* syncRoot;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::ICloneable
    operator ::System::ICloneable() noexcept {
      return *reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::ICollection
    operator ::System::Collections::ICollection() noexcept {
      return *reinterpret_cast<::System::Collections::ICollection*>(this);
    }
    // Get instance field reference: private System.Int32[] m_array
    [[deprecated]] ::ArrayW<int>& dyn_m_array();
    // Get instance field reference: private System.Int32 m_length
    [[deprecated]] int& dyn_m_length();
    // Get instance field reference: private System.Int32 _version
    [[deprecated]] int& dyn__version();
    // Get instance field reference: private System.Object _syncRoot
    [[deprecated]] ::Il2CppObject*& dyn__syncRoot();
    // public System.Boolean get_Item(System.Int32 index)
    // Offset: 0xFEB9FC
    bool get_Item(int index);
    // public System.Void set_Item(System.Int32 index, System.Boolean value)
    // Offset: 0xFEBACC
    void set_Item(int index, bool value);
    // public System.Int32 get_Length()
    // Offset: 0xFEBBB8
    int get_Length();
    // public System.Void set_Length(System.Int32 value)
    // Offset: 0xFEBBC0
    void set_Length(int value);
    // public System.Int32 get_Count()
    // Offset: 0xFEC150
    int get_Count();
    // public System.Object get_SyncRoot()
    // Offset: 0xFEC1D8
    ::Il2CppObject* get_SyncRoot();
    // public System.Void .ctor(System.Int32 length)
    // Offset: 0xFEB6E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BitArray* New_ctor(int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::BitArray::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BitArray*, creationType>(length)));
    }
    // public System.Void .ctor(System.Int32 length, System.Boolean defaultValue)
    // Offset: 0xFEB6F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BitArray* New_ctor(int length, bool defaultValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::BitArray::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BitArray*, creationType>(length, defaultValue)));
    }
    // public System.Void .ctor(System.Int32[] values)
    // Offset: 0xFEB850
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BitArray* New_ctor(::ArrayW<int> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::BitArray::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BitArray*, creationType>(values)));
    }
    // public System.Boolean Get(System.Int32 index)
    // Offset: 0xFEBA00
    bool Get(int index);
    // public System.Void Set(System.Int32 index, System.Boolean value)
    // Offset: 0xFEBAD4
    void Set(int index, bool value);
    // public System.Void CopyTo(System.Array array, System.Int32 index)
    // Offset: 0xFEBDA0
    void CopyTo(::System::Array* array, int index);
    // public System.Object Clone()
    // Offset: 0xFEC158
    ::Il2CppObject* Clone();
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0xFEC24C
    ::System::Collections::IEnumerator* GetEnumerator();
    // static private System.Int32 GetArrayLength(System.Int32 n, System.Int32 div)
    // Offset: 0xFEB834
    static int GetArrayLength(int n, int div);
    // private System.Void .ctor()
    // Offset: 0xFEB6E0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BitArray* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::BitArray::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BitArray*, creationType>()));
    }
  }; // System.Collections.BitArray
  #pragma pack(pop)
  static check_size<sizeof(BitArray), 32 + sizeof(::Il2CppObject*)> __System_Collections_BitArraySizeCheck;
  static_assert(sizeof(BitArray) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Collections::BitArray::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Collections::BitArray::*)(int)>(&System::Collections::BitArray::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::BitArray*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Collections::BitArray::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::BitArray::*)(int, bool)>(&System::Collections::BitArray::set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::BitArray*), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: System::Collections::BitArray::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Collections::BitArray::*)()>(&System::Collections::BitArray::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::BitArray*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::BitArray::set_Length
// Il2CppName: set_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::BitArray::*)(int)>(&System::Collections::BitArray::set_Length)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::BitArray*), "set_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Collections::BitArray::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Collections::BitArray::*)()>(&System::Collections::BitArray::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::BitArray*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::BitArray::get_SyncRoot
// Il2CppName: get_SyncRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Collections::BitArray::*)()>(&System::Collections::BitArray::get_SyncRoot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::BitArray*), "get_SyncRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::BitArray::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::BitArray::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::BitArray::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::BitArray::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Collections::BitArray::*)(int)>(&System::Collections::BitArray::Get)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::BitArray*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Collections::BitArray::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::BitArray::*)(int, bool)>(&System::Collections::BitArray::Set)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::BitArray*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: System::Collections::BitArray::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::BitArray::*)(::System::Array*, int)>(&System::Collections::BitArray::CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::BitArray*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, index});
  }
};
// Writing MetadataGetter for method: System::Collections::BitArray::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Collections::BitArray::*)()>(&System::Collections::BitArray::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::BitArray*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::BitArray::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (System::Collections::BitArray::*)()>(&System::Collections::BitArray::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::BitArray*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::BitArray::GetArrayLength
// Il2CppName: GetArrayLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&System::Collections::BitArray::GetArrayLength)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* div = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::BitArray*), "GetArrayLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n, div});
  }
};
// Writing MetadataGetter for method: System::Collections::BitArray::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
