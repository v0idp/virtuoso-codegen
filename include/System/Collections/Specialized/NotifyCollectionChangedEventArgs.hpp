// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.EventArgs
#include "System/EventArgs.hpp"
// Including type: System.Collections.Specialized.NotifyCollectionChangedAction
#include "System/Collections/Specialized/NotifyCollectionChangedAction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IList
  class IList;
}
// Completed forward declares
// Type namespace: System.Collections.Specialized
namespace System::Collections::Specialized {
  // Forward declaring type: NotifyCollectionChangedEventArgs
  class NotifyCollectionChangedEventArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Collections::Specialized::NotifyCollectionChangedEventArgs);
DEFINE_IL2CPP_ARG_TYPE(::System::Collections::Specialized::NotifyCollectionChangedEventArgs*, "System.Collections.Specialized", "NotifyCollectionChangedEventArgs");
// Type namespace: System.Collections.Specialized
namespace System::Collections::Specialized {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  // [TokenAttribute] Offset: FFFFFFFF
  class NotifyCollectionChangedEventArgs : public ::System::EventArgs {
    public:
    public:
    // private System.Collections.Specialized.NotifyCollectionChangedAction _action
    // Size: 0x4
    // Offset: 0x10
    ::System::Collections::Specialized::NotifyCollectionChangedAction action;
    // Field size check
    static_assert(sizeof(::System::Collections::Specialized::NotifyCollectionChangedAction) == 0x4);
    // Padding between fields: action and: newItems
    char __padding0[0x4] = {};
    // private System.Collections.IList _newItems
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::IList* newItems;
    // Field size check
    static_assert(sizeof(::System::Collections::IList*) == 0x8);
    // private System.Collections.IList _oldItems
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::IList* oldItems;
    // Field size check
    static_assert(sizeof(::System::Collections::IList*) == 0x8);
    // private System.Int32 _newStartingIndex
    // Size: 0x4
    // Offset: 0x28
    int newStartingIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _oldStartingIndex
    // Size: 0x4
    // Offset: 0x2C
    int oldStartingIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Collections.Specialized.NotifyCollectionChangedAction _action
    [[deprecated("Use field access instead!")]] ::System::Collections::Specialized::NotifyCollectionChangedAction& dyn__action();
    // Get instance field reference: private System.Collections.IList _newItems
    [[deprecated("Use field access instead!")]] ::System::Collections::IList*& dyn__newItems();
    // Get instance field reference: private System.Collections.IList _oldItems
    [[deprecated("Use field access instead!")]] ::System::Collections::IList*& dyn__oldItems();
    // Get instance field reference: private System.Int32 _newStartingIndex
    [[deprecated("Use field access instead!")]] int& dyn__newStartingIndex();
    // Get instance field reference: private System.Int32 _oldStartingIndex
    [[deprecated("Use field access instead!")]] int& dyn__oldStartingIndex();
    // public System.Void .ctor(System.Collections.Specialized.NotifyCollectionChangedAction action)
    // Offset: 0x1105930
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NotifyCollectionChangedEventArgs* New_ctor(::System::Collections::Specialized::NotifyCollectionChangedAction action) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Specialized::NotifyCollectionChangedEventArgs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NotifyCollectionChangedEventArgs*, creationType>(action)));
    }
    // public System.Void .ctor(System.Collections.Specialized.NotifyCollectionChangedAction action, System.Object changedItem, System.Int32 index)
    // Offset: 0x1105B48
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NotifyCollectionChangedEventArgs* New_ctor(::System::Collections::Specialized::NotifyCollectionChangedAction action, ::Il2CppObject* changedItem, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Specialized::NotifyCollectionChangedEventArgs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NotifyCollectionChangedEventArgs*, creationType>(action, changedItem, index)));
    }
    // public System.Void .ctor(System.Collections.Specialized.NotifyCollectionChangedAction action, System.Object newItem, System.Object oldItem, System.Int32 index)
    // Offset: 0x1105D44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NotifyCollectionChangedEventArgs* New_ctor(::System::Collections::Specialized::NotifyCollectionChangedAction action, ::Il2CppObject* newItem, ::Il2CppObject* oldItem, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Specialized::NotifyCollectionChangedEventArgs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NotifyCollectionChangedEventArgs*, creationType>(action, newItem, oldItem, index)));
    }
    // public System.Void .ctor(System.Collections.Specialized.NotifyCollectionChangedAction action, System.Collections.IList newItems, System.Collections.IList oldItems, System.Int32 startingIndex)
    // Offset: 0x1105FB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NotifyCollectionChangedEventArgs* New_ctor(::System::Collections::Specialized::NotifyCollectionChangedAction action, ::System::Collections::IList* newItems, ::System::Collections::IList* oldItems, int startingIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Specialized::NotifyCollectionChangedEventArgs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NotifyCollectionChangedEventArgs*, creationType>(action, newItems, oldItems, startingIndex)));
    }
    // private System.Void InitializeAddOrRemove(System.Collections.Specialized.NotifyCollectionChangedAction action, System.Collections.IList changedItems, System.Int32 startingIndex)
    // Offset: 0x1105D2C
    void InitializeAddOrRemove(::System::Collections::Specialized::NotifyCollectionChangedAction action, ::System::Collections::IList* changedItems, int startingIndex);
    // private System.Void InitializeAdd(System.Collections.Specialized.NotifyCollectionChangedAction action, System.Collections.IList newItems, System.Int32 newStartingIndex)
    // Offset: 0x1105AAC
    void InitializeAdd(::System::Collections::Specialized::NotifyCollectionChangedAction action, ::System::Collections::IList* newItems, int newStartingIndex);
    // private System.Void InitializeRemove(System.Collections.Specialized.NotifyCollectionChangedAction action, System.Collections.IList oldItems, System.Int32 oldStartingIndex)
    // Offset: 0x11061AC
    void InitializeRemove(::System::Collections::Specialized::NotifyCollectionChangedAction action, ::System::Collections::IList* oldItems, int oldStartingIndex);
    // private System.Void InitializeMoveOrReplace(System.Collections.Specialized.NotifyCollectionChangedAction action, System.Collections.IList newItems, System.Collections.IList oldItems, System.Int32 startingIndex, System.Int32 oldStartingIndex)
    // Offset: 0x1105F6C
    void InitializeMoveOrReplace(::System::Collections::Specialized::NotifyCollectionChangedAction action, ::System::Collections::IList* newItems, ::System::Collections::IList* oldItems, int startingIndex, int oldStartingIndex);
  }; // System.Collections.Specialized.NotifyCollectionChangedEventArgs
  #pragma pack(pop)
  static check_size<sizeof(NotifyCollectionChangedEventArgs), 44 + sizeof(int)> __System_Collections_Specialized_NotifyCollectionChangedEventArgsSizeCheck;
  static_assert(sizeof(NotifyCollectionChangedEventArgs) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Collections::Specialized::NotifyCollectionChangedEventArgs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::Specialized::NotifyCollectionChangedEventArgs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::Specialized::NotifyCollectionChangedEventArgs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::Specialized::NotifyCollectionChangedEventArgs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::Specialized::NotifyCollectionChangedEventArgs::InitializeAddOrRemove
// Il2CppName: InitializeAddOrRemove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Specialized::NotifyCollectionChangedEventArgs::*)(::System::Collections::Specialized::NotifyCollectionChangedAction, ::System::Collections::IList*, int)>(&System::Collections::Specialized::NotifyCollectionChangedEventArgs::InitializeAddOrRemove)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System.Collections.Specialized", "NotifyCollectionChangedAction")->byval_arg;
    static auto* changedItems = &::il2cpp_utils::GetClassFromName("System.Collections", "IList")->byval_arg;
    static auto* startingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Specialized::NotifyCollectionChangedEventArgs*), "InitializeAddOrRemove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action, changedItems, startingIndex});
  }
};
// Writing MetadataGetter for method: System::Collections::Specialized::NotifyCollectionChangedEventArgs::InitializeAdd
// Il2CppName: InitializeAdd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Specialized::NotifyCollectionChangedEventArgs::*)(::System::Collections::Specialized::NotifyCollectionChangedAction, ::System::Collections::IList*, int)>(&System::Collections::Specialized::NotifyCollectionChangedEventArgs::InitializeAdd)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System.Collections.Specialized", "NotifyCollectionChangedAction")->byval_arg;
    static auto* newItems = &::il2cpp_utils::GetClassFromName("System.Collections", "IList")->byval_arg;
    static auto* newStartingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Specialized::NotifyCollectionChangedEventArgs*), "InitializeAdd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action, newItems, newStartingIndex});
  }
};
// Writing MetadataGetter for method: System::Collections::Specialized::NotifyCollectionChangedEventArgs::InitializeRemove
// Il2CppName: InitializeRemove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Specialized::NotifyCollectionChangedEventArgs::*)(::System::Collections::Specialized::NotifyCollectionChangedAction, ::System::Collections::IList*, int)>(&System::Collections::Specialized::NotifyCollectionChangedEventArgs::InitializeRemove)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System.Collections.Specialized", "NotifyCollectionChangedAction")->byval_arg;
    static auto* oldItems = &::il2cpp_utils::GetClassFromName("System.Collections", "IList")->byval_arg;
    static auto* oldStartingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Specialized::NotifyCollectionChangedEventArgs*), "InitializeRemove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action, oldItems, oldStartingIndex});
  }
};
// Writing MetadataGetter for method: System::Collections::Specialized::NotifyCollectionChangedEventArgs::InitializeMoveOrReplace
// Il2CppName: InitializeMoveOrReplace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Specialized::NotifyCollectionChangedEventArgs::*)(::System::Collections::Specialized::NotifyCollectionChangedAction, ::System::Collections::IList*, ::System::Collections::IList*, int, int)>(&System::Collections::Specialized::NotifyCollectionChangedEventArgs::InitializeMoveOrReplace)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System.Collections.Specialized", "NotifyCollectionChangedAction")->byval_arg;
    static auto* newItems = &::il2cpp_utils::GetClassFromName("System.Collections", "IList")->byval_arg;
    static auto* oldItems = &::il2cpp_utils::GetClassFromName("System.Collections", "IList")->byval_arg;
    static auto* startingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* oldStartingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Specialized::NotifyCollectionChangedEventArgs*), "InitializeMoveOrReplace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action, newItems, oldItems, startingIndex, oldStartingIndex});
  }
};
