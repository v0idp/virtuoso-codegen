// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.WebRequest
#include "System/Net/WebRequest.hpp"
// Including type: System.Net.DecompressionMethods
#include "System/Net/DecompressionMethods.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.ValueTuple`5
#include "System/ValueTuple_5.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Skipping declaration: NtlmAuthState because it is already included!
  // Forward declaring type: HttpContinueDelegate
  class HttpContinueDelegate;
  // Forward declaring type: CookieContainer
  class CookieContainer;
  // Forward declaring type: ICredentials
  class ICredentials;
  // Forward declaring type: WebHeaderCollection
  class WebHeaderCollection;
  // Forward declaring type: IWebProxy
  class IWebProxy;
  // Forward declaring type: ServicePoint
  class ServicePoint;
  // Forward declaring type: WebRequestStream
  class WebRequestStream;
  // Forward declaring type: HttpWebResponse
  class HttpWebResponse;
  // Forward declaring type: WebCompletionSource
  class WebCompletionSource;
  // Forward declaring type: WebOperation
  class WebOperation;
  // Forward declaring type: ServerCertValidationCallback
  class ServerCertValidationCallback;
  // Forward declaring type: BufferOffsetSize
  class BufferOffsetSize;
  // Forward declaring type: WebResponseStream
  class WebResponseStream;
  // Forward declaring type: WebException
  class WebException;
  // Forward declaring type: HttpStatusCode
  struct HttpStatusCode;
  // Forward declaring type: WebResponse
  class WebResponse;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: Version
  class Version;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
  // Forward declaring type: ValueTuple`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  struct ValueTuple_4;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
}
// Forward declaring namespace: Mono::Security::Interface
namespace Mono::Security::Interface {
  // Forward declaring type: MonoTlsProvider
  class MonoTlsProvider;
  // Forward declaring type: MonoTlsSettings
  class MonoTlsSettings;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: HttpWebRequest
  class HttpWebRequest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::HttpWebRequest);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::HttpWebRequest*, "System.Net", "HttpWebRequest");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x18F
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.HttpWebRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class HttpWebRequest : public ::System::Net::WebRequest {
    public:
    // Nested type: ::System::Net::HttpWebRequest::NtlmAuthState
    struct NtlmAuthState;
    // Nested type: ::System::Net::HttpWebRequest::AuthorizationState
    struct AuthorizationState;
    // Nested type: ::System::Net::HttpWebRequest::$MyGetRequestStreamAsync$d__229
    struct $MyGetRequestStreamAsync$d__229;
    // Nested type: ::System::Net::HttpWebRequest::$$c__234_1<T>
    template<typename T>
    class $$c__234_1;
    // Nested type: ::System::Net::HttpWebRequest::$RunWithTimeout$d__234_1<T>
    template<typename T>
    struct $RunWithTimeout$d__234_1;
    // Nested type: ::System::Net::HttpWebRequest::$MyGetResponseAsync$d__236
    struct $MyGetResponseAsync$d__236;
    // Nested type: ::System::Net::HttpWebRequest::$GetResponseFromData$d__237
    struct $GetResponseFromData$d__237;
    // Nested type: ::System::Net::HttpWebRequest::$$GetRewriteHandler$b__263_0$d
    struct $$GetRewriteHandler$b__263_0$d;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Net.HttpWebRequest/System.Net.NtlmAuthState
    // [TokenAttribute] Offset: FFFFFFFF
    struct NtlmAuthState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: NtlmAuthState
      constexpr NtlmAuthState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Net.HttpWebRequest/System.Net.NtlmAuthState None
      static constexpr const int None = 0;
      // Get static field: static public System.Net.HttpWebRequest/System.Net.NtlmAuthState None
      static ::System::Net::HttpWebRequest::NtlmAuthState _get_None();
      // Set static field: static public System.Net.HttpWebRequest/System.Net.NtlmAuthState None
      static void _set_None(::System::Net::HttpWebRequest::NtlmAuthState value);
      // static field const value: static public System.Net.HttpWebRequest/System.Net.NtlmAuthState Challenge
      static constexpr const int Challenge = 1;
      // Get static field: static public System.Net.HttpWebRequest/System.Net.NtlmAuthState Challenge
      static ::System::Net::HttpWebRequest::NtlmAuthState _get_Challenge();
      // Set static field: static public System.Net.HttpWebRequest/System.Net.NtlmAuthState Challenge
      static void _set_Challenge(::System::Net::HttpWebRequest::NtlmAuthState value);
      // static field const value: static public System.Net.HttpWebRequest/System.Net.NtlmAuthState Response
      static constexpr const int Response = 2;
      // Get static field: static public System.Net.HttpWebRequest/System.Net.NtlmAuthState Response
      static ::System::Net::HttpWebRequest::NtlmAuthState _get_Response();
      // Set static field: static public System.Net.HttpWebRequest/System.Net.NtlmAuthState Response
      static void _set_Response(::System::Net::HttpWebRequest::NtlmAuthState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Net.HttpWebRequest/System.Net.NtlmAuthState
    #pragma pack(pop)
    static check_size<sizeof(HttpWebRequest::NtlmAuthState), 0 + sizeof(int)> __System_Net_HttpWebRequest_NtlmAuthStateSizeCheck;
    static_assert(sizeof(HttpWebRequest::NtlmAuthState) == 0x4);
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Net.HttpWebRequest/System.Net.AuthorizationState
    // [TokenAttribute] Offset: FFFFFFFF
    struct AuthorizationState/*, public ::System::ValueType*/ {
      public:
      public:
      // private readonly System.Net.HttpWebRequest request
      // Size: 0x8
      // Offset: 0x0
      ::System::Net::HttpWebRequest* request;
      // Field size check
      static_assert(sizeof(::System::Net::HttpWebRequest*) == 0x8);
      // private readonly System.Boolean isProxy
      // Size: 0x1
      // Offset: 0x8
      bool isProxy;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // private System.Boolean isCompleted
      // Size: 0x1
      // Offset: 0x9
      bool isCompleted;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: isCompleted and: ntlm_auth_state
      char __padding2[0x2] = {};
      // private System.Net.HttpWebRequest/System.Net.NtlmAuthState ntlm_auth_state
      // Size: 0x4
      // Offset: 0xC
      ::System::Net::HttpWebRequest::NtlmAuthState ntlm_auth_state;
      // Field size check
      static_assert(sizeof(::System::Net::HttpWebRequest::NtlmAuthState) == 0x4);
      public:
      // Creating value type constructor for type: AuthorizationState
      constexpr AuthorizationState(::System::Net::HttpWebRequest* request_ = {}, bool isProxy_ = {}, bool isCompleted_ = {}, ::System::Net::HttpWebRequest::NtlmAuthState ntlm_auth_state_ = {}) noexcept : request{request_}, isProxy{isProxy_}, isCompleted{isCompleted_}, ntlm_auth_state{ntlm_auth_state_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private readonly System.Net.HttpWebRequest request
      [[deprecated("Use field access instead!")]] ::System::Net::HttpWebRequest*& dyn_request();
      // Get instance field reference: private readonly System.Boolean isProxy
      [[deprecated("Use field access instead!")]] bool& dyn_isProxy();
      // Get instance field reference: private System.Boolean isCompleted
      [[deprecated("Use field access instead!")]] bool& dyn_isCompleted();
      // Get instance field reference: private System.Net.HttpWebRequest/System.Net.NtlmAuthState ntlm_auth_state
      [[deprecated("Use field access instead!")]] ::System::Net::HttpWebRequest::NtlmAuthState& dyn_ntlm_auth_state();
      // public System.Boolean get_IsCompleted()
      // Offset: 0x9F8780
      bool get_IsCompleted();
      // public System.Net.HttpWebRequest/System.Net.NtlmAuthState get_NtlmAuthState()
      // Offset: 0x9F8788
      ::System::Net::HttpWebRequest::NtlmAuthState get_NtlmAuthState();
      // public System.Boolean get_IsNtlmAuthenticated()
      // Offset: 0x9F7108
      bool get_IsNtlmAuthenticated();
      // public System.Void .ctor(System.Net.HttpWebRequest request, System.Boolean isProxy)
      // Offset: 0x9F8790
      AuthorizationState(::System::Net::HttpWebRequest* request, bool isProxy);
      // public System.Boolean CheckAuthorization(System.Net.WebResponse response, System.Net.HttpStatusCode code)
      // Offset: 0x9F87A8
      bool CheckAuthorization(::System::Net::WebResponse* response, ::System::Net::HttpStatusCode code);
      // public System.Void Reset()
      // Offset: 0x9F8AF0
      void Reset();
      // public override System.String ToString()
      // Offset: 0x9F8B78
      // Implemented from: System.ValueType
      // Base method: System.String ValueType::ToString()
      ::StringW ToString();
    }; // System.Net.HttpWebRequest/System.Net.AuthorizationState
    #pragma pack(pop)
    static check_size<sizeof(HttpWebRequest::AuthorizationState), 12 + sizeof(::System::Net::HttpWebRequest::NtlmAuthState)> __System_Net_HttpWebRequest_AuthorizationStateSizeCheck;
    static_assert(sizeof(HttpWebRequest::AuthorizationState) == 0x10);
    public:
    // private System.Uri requestUri
    // Size: 0x8
    // Offset: 0x38
    ::System::Uri* requestUri;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // private System.Uri actualUri
    // Size: 0x8
    // Offset: 0x40
    ::System::Uri* actualUri;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // private System.Boolean hostChanged
    // Size: 0x1
    // Offset: 0x48
    bool hostChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean allowAutoRedirect
    // Size: 0x1
    // Offset: 0x49
    bool allowAutoRedirect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean allowBuffering
    // Size: 0x1
    // Offset: 0x4A
    bool allowBuffering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: allowBuffering and: certificates
    char __padding4[0x5] = {};
    // private System.Security.Cryptography.X509Certificates.X509CertificateCollection certificates
    // Size: 0x8
    // Offset: 0x50
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* certificates;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*) == 0x8);
    // private System.String connectionGroup
    // Size: 0x8
    // Offset: 0x58
    ::StringW connectionGroup;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean haveContentLength
    // Size: 0x1
    // Offset: 0x60
    bool haveContentLength;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: haveContentLength and: contentLength
    char __padding7[0x7] = {};
    // private System.Int64 contentLength
    // Size: 0x8
    // Offset: 0x68
    int64_t contentLength;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Net.HttpContinueDelegate continueDelegate
    // Size: 0x8
    // Offset: 0x70
    ::System::Net::HttpContinueDelegate* continueDelegate;
    // Field size check
    static_assert(sizeof(::System::Net::HttpContinueDelegate*) == 0x8);
    // private System.Net.CookieContainer cookieContainer
    // Size: 0x8
    // Offset: 0x78
    ::System::Net::CookieContainer* cookieContainer;
    // Field size check
    static_assert(sizeof(::System::Net::CookieContainer*) == 0x8);
    // private System.Net.ICredentials credentials
    // Size: 0x8
    // Offset: 0x80
    ::System::Net::ICredentials* credentials;
    // Field size check
    static_assert(sizeof(::System::Net::ICredentials*) == 0x8);
    // private System.Boolean haveResponse
    // Size: 0x1
    // Offset: 0x88
    bool haveResponse;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean requestSent
    // Size: 0x1
    // Offset: 0x89
    bool requestSent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: requestSent and: webHeaders
    char __padding13[0x6] = {};
    // private System.Net.WebHeaderCollection webHeaders
    // Size: 0x8
    // Offset: 0x90
    ::System::Net::WebHeaderCollection* webHeaders;
    // Field size check
    static_assert(sizeof(::System::Net::WebHeaderCollection*) == 0x8);
    // private System.Boolean keepAlive
    // Size: 0x1
    // Offset: 0x98
    bool keepAlive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: keepAlive and: maxAutoRedirect
    char __padding15[0x3] = {};
    // private System.Int32 maxAutoRedirect
    // Size: 0x4
    // Offset: 0x9C
    int maxAutoRedirect;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String mediaType
    // Size: 0x8
    // Offset: 0xA0
    ::StringW mediaType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String method
    // Size: 0x8
    // Offset: 0xA8
    ::StringW method;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String initialMethod
    // Size: 0x8
    // Offset: 0xB0
    ::StringW initialMethod;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean pipelined
    // Size: 0x1
    // Offset: 0xB8
    bool pipelined;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean preAuthenticate
    // Size: 0x1
    // Offset: 0xB9
    bool preAuthenticate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean usedPreAuth
    // Size: 0x1
    // Offset: 0xBA
    bool usedPreAuth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: usedPreAuth and: version
    char __padding22[0x5] = {};
    // private System.Version version
    // Size: 0x8
    // Offset: 0xC0
    ::System::Version* version;
    // Field size check
    static_assert(sizeof(::System::Version*) == 0x8);
    // private System.Boolean force_version
    // Size: 0x1
    // Offset: 0xC8
    bool force_version;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: force_version and: actualVersion
    char __padding24[0x7] = {};
    // private System.Version actualVersion
    // Size: 0x8
    // Offset: 0xD0
    ::System::Version* actualVersion;
    // Field size check
    static_assert(sizeof(::System::Version*) == 0x8);
    // private System.Net.IWebProxy proxy
    // Size: 0x8
    // Offset: 0xD8
    ::System::Net::IWebProxy* proxy;
    // Field size check
    static_assert(sizeof(::System::Net::IWebProxy*) == 0x8);
    // private System.Boolean sendChunked
    // Size: 0x1
    // Offset: 0xE0
    bool sendChunked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sendChunked and: servicePoint
    char __padding27[0x7] = {};
    // private System.Net.ServicePoint servicePoint
    // Size: 0x8
    // Offset: 0xE8
    ::System::Net::ServicePoint* servicePoint;
    // Field size check
    static_assert(sizeof(::System::Net::ServicePoint*) == 0x8);
    // private System.Int32 timeout
    // Size: 0x4
    // Offset: 0xF0
    int timeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: timeout and: writeStream
    char __padding29[0x4] = {};
    // private System.Net.WebRequestStream writeStream
    // Size: 0x8
    // Offset: 0xF8
    ::System::Net::WebRequestStream* writeStream;
    // Field size check
    static_assert(sizeof(::System::Net::WebRequestStream*) == 0x8);
    // private System.Net.HttpWebResponse webResponse
    // Size: 0x8
    // Offset: 0x100
    ::System::Net::HttpWebResponse* webResponse;
    // Field size check
    static_assert(sizeof(::System::Net::HttpWebResponse*) == 0x8);
    // private System.Net.WebCompletionSource responseTask
    // Size: 0x8
    // Offset: 0x108
    ::System::Net::WebCompletionSource* responseTask;
    // Field size check
    static_assert(sizeof(::System::Net::WebCompletionSource*) == 0x8);
    // private System.Net.WebOperation currentOperation
    // Size: 0x8
    // Offset: 0x110
    ::System::Net::WebOperation* currentOperation;
    // Field size check
    static_assert(sizeof(::System::Net::WebOperation*) == 0x8);
    // private System.Int32 aborted
    // Size: 0x4
    // Offset: 0x118
    int aborted;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean gotRequestStream
    // Size: 0x1
    // Offset: 0x11C
    bool gotRequestStream;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: gotRequestStream and: redirects
    char __padding35[0x3] = {};
    // private System.Int32 redirects
    // Size: 0x4
    // Offset: 0x120
    int redirects;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean expectContinue
    // Size: 0x1
    // Offset: 0x124
    bool expectContinue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean getResponseCalled
    // Size: 0x1
    // Offset: 0x125
    bool getResponseCalled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: getResponseCalled and: locker
    char __padding38[0x2] = {};
    // private System.Object locker
    // Size: 0x8
    // Offset: 0x128
    ::Il2CppObject* locker;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Boolean finished_reading
    // Size: 0x1
    // Offset: 0x130
    bool finished_reading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: finished_reading and: auto_decomp
    char __padding40[0x3] = {};
    // private System.Net.DecompressionMethods auto_decomp
    // Size: 0x4
    // Offset: 0x134
    ::System::Net::DecompressionMethods auto_decomp;
    // Field size check
    static_assert(sizeof(::System::Net::DecompressionMethods) == 0x4);
    // private System.Int32 maxResponseHeadersLength
    // Size: 0x4
    // Offset: 0x138
    int maxResponseHeadersLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 readWriteTimeout
    // Size: 0x4
    // Offset: 0x13C
    int readWriteTimeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Mono.Security.Interface.MonoTlsProvider tlsProvider
    // Size: 0x8
    // Offset: 0x140
    ::Mono::Security::Interface::MonoTlsProvider* tlsProvider;
    // Field size check
    static_assert(sizeof(::Mono::Security::Interface::MonoTlsProvider*) == 0x8);
    // private Mono.Security.Interface.MonoTlsSettings tlsSettings
    // Size: 0x8
    // Offset: 0x148
    ::Mono::Security::Interface::MonoTlsSettings* tlsSettings;
    // Field size check
    static_assert(sizeof(::Mono::Security::Interface::MonoTlsSettings*) == 0x8);
    // private System.Net.ServerCertValidationCallback certValidationCallback
    // Size: 0x8
    // Offset: 0x150
    ::System::Net::ServerCertValidationCallback* certValidationCallback;
    // Field size check
    static_assert(sizeof(::System::Net::ServerCertValidationCallback*) == 0x8);
    // private System.Net.HttpWebRequest/System.Net.AuthorizationState auth_state
    // Size: 0x10
    // Offset: 0x158
    ::System::Net::HttpWebRequest::AuthorizationState auth_state;
    // Field size check
    static_assert(sizeof(::System::Net::HttpWebRequest::AuthorizationState) == 0x10);
    // private System.Net.HttpWebRequest/System.Net.AuthorizationState proxy_auth_state
    // Size: 0x10
    // Offset: 0x168
    ::System::Net::HttpWebRequest::AuthorizationState proxy_auth_state;
    // Field size check
    static_assert(sizeof(::System::Net::HttpWebRequest::AuthorizationState) == 0x10);
    // private System.String host
    // Size: 0x8
    // Offset: 0x178
    ::StringW host;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Func`2<System.IO.Stream,System.Threading.Tasks.Task> ResendContentFactory
    // Size: 0x8
    // Offset: 0x180
    ::System::Func_2<::System::IO::Stream*, ::System::Threading::Tasks::Task*>* ResendContentFactory;
    // Field size check
    static_assert(sizeof(::System::Func_2<::System::IO::Stream*, ::System::Threading::Tasks::Task*>*) == 0x8);
    // readonly System.Int32 ID
    // Size: 0x4
    // Offset: 0x188
    int _ID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <ThrowOnError>k__BackingField
    // Size: 0x1
    // Offset: 0x18C
    bool ThrowOnError;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean unsafe_auth_blah
    // Size: 0x1
    // Offset: 0x18D
    bool unsafe_auth_blah;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <ReuseConnection>k__BackingField
    // Size: 0x1
    // Offset: 0x18E
    bool ReuseConnection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private System.Int32 defaultMaxResponseHeadersLength
    static int _get_defaultMaxResponseHeadersLength();
    // Set static field: static private System.Int32 defaultMaxResponseHeadersLength
    static void _set_defaultMaxResponseHeadersLength(int value);
    // Get instance field reference: private System.Uri requestUri
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn_requestUri();
    // Get instance field reference: private System.Uri actualUri
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn_actualUri();
    // Get instance field reference: private System.Boolean hostChanged
    [[deprecated("Use field access instead!")]] bool& dyn_hostChanged();
    // Get instance field reference: private System.Boolean allowAutoRedirect
    [[deprecated("Use field access instead!")]] bool& dyn_allowAutoRedirect();
    // Get instance field reference: private System.Boolean allowBuffering
    [[deprecated("Use field access instead!")]] bool& dyn_allowBuffering();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509CertificateCollection certificates
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509CertificateCollection*& dyn_certificates();
    // Get instance field reference: private System.String connectionGroup
    [[deprecated("Use field access instead!")]] ::StringW& dyn_connectionGroup();
    // Get instance field reference: private System.Boolean haveContentLength
    [[deprecated("Use field access instead!")]] bool& dyn_haveContentLength();
    // Get instance field reference: private System.Int64 contentLength
    [[deprecated("Use field access instead!")]] int64_t& dyn_contentLength();
    // Get instance field reference: private System.Net.HttpContinueDelegate continueDelegate
    [[deprecated("Use field access instead!")]] ::System::Net::HttpContinueDelegate*& dyn_continueDelegate();
    // Get instance field reference: private System.Net.CookieContainer cookieContainer
    [[deprecated("Use field access instead!")]] ::System::Net::CookieContainer*& dyn_cookieContainer();
    // Get instance field reference: private System.Net.ICredentials credentials
    [[deprecated("Use field access instead!")]] ::System::Net::ICredentials*& dyn_credentials();
    // Get instance field reference: private System.Boolean haveResponse
    [[deprecated("Use field access instead!")]] bool& dyn_haveResponse();
    // Get instance field reference: private System.Boolean requestSent
    [[deprecated("Use field access instead!")]] bool& dyn_requestSent();
    // Get instance field reference: private System.Net.WebHeaderCollection webHeaders
    [[deprecated("Use field access instead!")]] ::System::Net::WebHeaderCollection*& dyn_webHeaders();
    // Get instance field reference: private System.Boolean keepAlive
    [[deprecated("Use field access instead!")]] bool& dyn_keepAlive();
    // Get instance field reference: private System.Int32 maxAutoRedirect
    [[deprecated("Use field access instead!")]] int& dyn_maxAutoRedirect();
    // Get instance field reference: private System.String mediaType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_mediaType();
    // Get instance field reference: private System.String method
    [[deprecated("Use field access instead!")]] ::StringW& dyn_method();
    // Get instance field reference: private System.String initialMethod
    [[deprecated("Use field access instead!")]] ::StringW& dyn_initialMethod();
    // Get instance field reference: private System.Boolean pipelined
    [[deprecated("Use field access instead!")]] bool& dyn_pipelined();
    // Get instance field reference: private System.Boolean preAuthenticate
    [[deprecated("Use field access instead!")]] bool& dyn_preAuthenticate();
    // Get instance field reference: private System.Boolean usedPreAuth
    [[deprecated("Use field access instead!")]] bool& dyn_usedPreAuth();
    // Get instance field reference: private System.Version version
    [[deprecated("Use field access instead!")]] ::System::Version*& dyn_version();
    // Get instance field reference: private System.Boolean force_version
    [[deprecated("Use field access instead!")]] bool& dyn_force_version();
    // Get instance field reference: private System.Version actualVersion
    [[deprecated("Use field access instead!")]] ::System::Version*& dyn_actualVersion();
    // Get instance field reference: private System.Net.IWebProxy proxy
    [[deprecated("Use field access instead!")]] ::System::Net::IWebProxy*& dyn_proxy();
    // Get instance field reference: private System.Boolean sendChunked
    [[deprecated("Use field access instead!")]] bool& dyn_sendChunked();
    // Get instance field reference: private System.Net.ServicePoint servicePoint
    [[deprecated("Use field access instead!")]] ::System::Net::ServicePoint*& dyn_servicePoint();
    // Get instance field reference: private System.Int32 timeout
    [[deprecated("Use field access instead!")]] int& dyn_timeout();
    // Get instance field reference: private System.Net.WebRequestStream writeStream
    [[deprecated("Use field access instead!")]] ::System::Net::WebRequestStream*& dyn_writeStream();
    // Get instance field reference: private System.Net.HttpWebResponse webResponse
    [[deprecated("Use field access instead!")]] ::System::Net::HttpWebResponse*& dyn_webResponse();
    // Get instance field reference: private System.Net.WebCompletionSource responseTask
    [[deprecated("Use field access instead!")]] ::System::Net::WebCompletionSource*& dyn_responseTask();
    // Get instance field reference: private System.Net.WebOperation currentOperation
    [[deprecated("Use field access instead!")]] ::System::Net::WebOperation*& dyn_currentOperation();
    // Get instance field reference: private System.Int32 aborted
    [[deprecated("Use field access instead!")]] int& dyn_aborted();
    // Get instance field reference: private System.Boolean gotRequestStream
    [[deprecated("Use field access instead!")]] bool& dyn_gotRequestStream();
    // Get instance field reference: private System.Int32 redirects
    [[deprecated("Use field access instead!")]] int& dyn_redirects();
    // Get instance field reference: private System.Boolean expectContinue
    [[deprecated("Use field access instead!")]] bool& dyn_expectContinue();
    // Get instance field reference: private System.Boolean getResponseCalled
    [[deprecated("Use field access instead!")]] bool& dyn_getResponseCalled();
    // Get instance field reference: private System.Object locker
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_locker();
    // Get instance field reference: private System.Boolean finished_reading
    [[deprecated("Use field access instead!")]] bool& dyn_finished_reading();
    // Get instance field reference: private System.Net.DecompressionMethods auto_decomp
    [[deprecated("Use field access instead!")]] ::System::Net::DecompressionMethods& dyn_auto_decomp();
    // Get instance field reference: private System.Int32 maxResponseHeadersLength
    [[deprecated("Use field access instead!")]] int& dyn_maxResponseHeadersLength();
    // Get instance field reference: private System.Int32 readWriteTimeout
    [[deprecated("Use field access instead!")]] int& dyn_readWriteTimeout();
    // Get instance field reference: private Mono.Security.Interface.MonoTlsProvider tlsProvider
    [[deprecated("Use field access instead!")]] ::Mono::Security::Interface::MonoTlsProvider*& dyn_tlsProvider();
    // Get instance field reference: private Mono.Security.Interface.MonoTlsSettings tlsSettings
    [[deprecated("Use field access instead!")]] ::Mono::Security::Interface::MonoTlsSettings*& dyn_tlsSettings();
    // Get instance field reference: private System.Net.ServerCertValidationCallback certValidationCallback
    [[deprecated("Use field access instead!")]] ::System::Net::ServerCertValidationCallback*& dyn_certValidationCallback();
    // Get instance field reference: private System.Net.HttpWebRequest/System.Net.AuthorizationState auth_state
    [[deprecated("Use field access instead!")]] ::System::Net::HttpWebRequest::AuthorizationState& dyn_auth_state();
    // Get instance field reference: private System.Net.HttpWebRequest/System.Net.AuthorizationState proxy_auth_state
    [[deprecated("Use field access instead!")]] ::System::Net::HttpWebRequest::AuthorizationState& dyn_proxy_auth_state();
    // Get instance field reference: private System.String host
    [[deprecated("Use field access instead!")]] ::StringW& dyn_host();
    // Get instance field reference: System.Func`2<System.IO.Stream,System.Threading.Tasks.Task> ResendContentFactory
    [[deprecated("Use field access instead!")]] ::System::Func_2<::System::IO::Stream*, ::System::Threading::Tasks::Task*>*& dyn_ResendContentFactory();
    // Get instance field reference: readonly System.Int32 ID
    [[deprecated("Use field access instead!")]] int& dyn_ID();
    // Get instance field reference: private System.Boolean <ThrowOnError>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ThrowOnError$k__BackingField();
    // Get instance field reference: private System.Boolean unsafe_auth_blah
    [[deprecated("Use field access instead!")]] bool& dyn_unsafe_auth_blah();
    // Get instance field reference: private System.Boolean <ReuseConnection>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ReuseConnection$k__BackingField();
    // public System.Uri get_Address()
    // Offset: 0xF0F1DC
    ::System::Uri* get_Address();
    // System.Void set_Address(System.Uri value)
    // Offset: 0xF0F1E4
    void set_Address(::System::Uri* value);
    // public System.Boolean get_AllowWriteStreamBuffering()
    // Offset: 0xF0F1EC
    bool get_AllowWriteStreamBuffering();
    // public System.Net.DecompressionMethods get_AutomaticDecompression()
    // Offset: 0xF0F1F4
    ::System::Net::DecompressionMethods get_AutomaticDecompression();
    // System.Boolean get_InternalAllowBuffering()
    // Offset: 0xF0F1FC
    bool get_InternalAllowBuffering();
    // private System.Boolean get_MethodWithBuffer()
    // Offset: 0xF0F210
    bool get_MethodWithBuffer();
    // Mono.Security.Interface.MonoTlsProvider get_TlsProvider()
    // Offset: 0xF0F310
    ::Mono::Security::Interface::MonoTlsProvider* get_TlsProvider();
    // Mono.Security.Interface.MonoTlsSettings get_TlsSettings()
    // Offset: 0xF0F318
    ::Mono::Security::Interface::MonoTlsSettings* get_TlsSettings();
    // public System.Security.Cryptography.X509Certificates.X509CertificateCollection get_ClientCertificates()
    // Offset: 0xF0F320
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* get_ClientCertificates();
    // System.Void set_InternalContentLength(System.Int64 value)
    // Offset: 0xF0F480
    void set_InternalContentLength(int64_t value);
    // System.Boolean get_ThrowOnError()
    // Offset: 0xF0F488
    bool get_ThrowOnError();
    // System.Void set_ThrowOnError(System.Boolean value)
    // Offset: 0xF0F490
    void set_ThrowOnError(bool value);
    // public System.String get_Host()
    // Offset: 0xF0F510
    ::StringW get_Host();
    // public System.Boolean get_KeepAlive()
    // Offset: 0xF0F53C
    bool get_KeepAlive();
    // public System.Int32 get_ReadWriteTimeout()
    // Offset: 0xF0F544
    int get_ReadWriteTimeout();
    // public System.Version get_ProtocolVersion()
    // Offset: 0xF0F75C
    ::System::Version* get_ProtocolVersion();
    // public System.Boolean get_SendChunked()
    // Offset: 0xF0F8E0
    bool get_SendChunked();
    // public System.Void set_SendChunked(System.Boolean value)
    // Offset: 0xF0F8E8
    void set_SendChunked(bool value);
    // public System.Net.ServicePoint get_ServicePoint()
    // Offset: 0xF0F914
    ::System::Net::ServicePoint* get_ServicePoint();
    // System.Net.ServicePoint get_ServicePointNoLock()
    // Offset: 0xF0F918
    ::System::Net::ServicePoint* get_ServicePointNoLock();
    // public System.String get_TransferEncoding()
    // Offset: 0xF0F928
    ::StringW get_TransferEncoding();
    // public System.String get_UserAgent()
    // Offset: 0xF0FA04
    ::StringW get_UserAgent();
    // public System.Void set_UserAgent(System.String value)
    // Offset: 0xF0FA5C
    void set_UserAgent(::StringW value);
    // public System.Boolean get_UnsafeAuthenticatedConnectionSharing()
    // Offset: 0xF0FAC4
    bool get_UnsafeAuthenticatedConnectionSharing();
    // System.Boolean get_ExpectContinue()
    // Offset: 0xF0FACC
    bool get_ExpectContinue();
    // System.Void set_ExpectContinue(System.Boolean value)
    // Offset: 0xF0FAD4
    void set_ExpectContinue(bool value);
    // System.Uri get_AuthUri()
    // Offset: 0xF0FAE0
    ::System::Uri* get_AuthUri();
    // System.Boolean get_ProxyQuery()
    // Offset: 0xF0FAE8
    bool get_ProxyQuery();
    // System.Net.ServerCertValidationCallback get_ServerCertValidationCallback()
    // Offset: 0xF0FB1C
    ::System::Net::ServerCertValidationCallback* get_ServerCertValidationCallback();
    // System.Void set_FinishedReading(System.Boolean value)
    // Offset: 0xF10AF0
    void set_FinishedReading(bool value);
    // System.Boolean get_Aborted()
    // Offset: 0xF0FFB4
    bool get_Aborted();
    // public System.Void .ctor(System.Uri uri)
    // Offset: 0xF0E1CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpWebRequest* New_ctor(::System::Uri* uri) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HttpWebRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpWebRequest*, creationType>(uri)));
    }
    // private System.Void ResetAuthorization()
    // Offset: 0xF0E9B8
    void ResetAuthorization();
    // private System.Void SetSpecialHeaders(System.String HeaderName, System.String value)
    // Offset: 0xF0F110
    void SetSpecialHeaders(::StringW HeaderName, ::StringW value);
    // System.Net.ServicePoint GetServicePoint()
    // Offset: 0xF0F79C
    ::System::Net::ServicePoint* GetServicePoint();
    // private System.Net.WebOperation SendRequest(System.Boolean redirecting, System.Net.BufferOffsetSize writeBuffer, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xF0FB24
    ::System::Net::WebOperation* SendRequest(bool redirecting, ::System::Net::BufferOffsetSize* writeBuffer, ::System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task`1<System.IO.Stream> MyGetRequestStreamAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0xF0FD4C
    ::System::Threading::Tasks::Task_1<::System::IO::Stream*>* MyGetRequestStreamAsync(::System::Threading::CancellationToken cancellationToken);
    // static System.Threading.Tasks.Task`1<T> RunWithTimeout(System.Func`2<System.Threading.CancellationToken,System.Threading.Tasks.Task`1<T>> func, System.Int32 timeout, System.Action abort)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Threading::Tasks::Task_1<T>* RunWithTimeout(::System::Func_2<::System::Threading::CancellationToken, ::System::Threading::Tasks::Task_1<T>*>* func, int timeout, ::System::Action* abort) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HttpWebRequest::RunWithTimeout");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net", "HttpWebRequest", "RunWithTimeout", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(func), ::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(abort)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, func, timeout, abort);
    }
    // private System.Threading.Tasks.Task`1<T> RunWithTimeout(System.Func`2<System.Threading.CancellationToken,System.Threading.Tasks.Task`1<T>> func)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<T>* RunWithTimeout(::System::Func_2<::System::Threading::CancellationToken, ::System::Threading::Tasks::Task_1<T>*>* func) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HttpWebRequest::RunWithTimeout");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunWithTimeout", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(func)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<T>*, false>(this, ___generic__method, func);
    }
    // private System.Threading.Tasks.Task`1<System.Net.HttpWebResponse> MyGetResponseAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0xF102B8
    ::System::Threading::Tasks::Task_1<::System::Net::HttpWebResponse*>* MyGetResponseAsync(::System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task`1<System.ValueTuple`5<System.Net.HttpWebResponse,System.Boolean,System.Boolean,System.Net.BufferOffsetSize,System.Net.WebOperation>> GetResponseFromData(System.Net.WebResponseStream stream, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xF103F4
    ::System::Threading::Tasks::Task_1<::System::ValueTuple_5<::System::Net::HttpWebResponse*, bool, bool, ::System::Net::BufferOffsetSize*, ::System::Net::WebOperation*>>* GetResponseFromData(::System::Net::WebResponseStream* stream, ::System::Threading::CancellationToken cancellationToken);
    // static System.Exception FlattenException(System.Exception e)
    // Offset: 0xF101F4
    static ::System::Exception* FlattenException(::System::Exception* e);
    // private System.Net.WebException GetWebException(System.Exception e)
    // Offset: 0xF10538
    ::System::Net::WebException* GetWebException(::System::Exception* e);
    // static System.Net.WebException CreateRequestAbortedException()
    // Offset: 0xF0FFE0
    static ::System::Net::WebException* CreateRequestAbortedException();
    // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0xF10BE8
    void System_Runtime_Serialization_ISerializable_GetObjectData(::System::Runtime::Serialization::SerializationInfo* serializationInfo, ::System::Runtime::Serialization::StreamingContext streamingContext);
    // private System.Void CheckRequestStarted()
    // Offset: 0xF0F420
    void CheckRequestStarted();
    // System.Void DoContinueDelegate(System.Int32 statusCode, System.Net.WebHeaderCollection headers)
    // Offset: 0xF11068
    void DoContinueDelegate(int statusCode, ::System::Net::WebHeaderCollection* headers);
    // private System.Void RewriteRedirectToGet()
    // Offset: 0xF11078
    void RewriteRedirectToGet();
    // private System.Boolean Redirect(System.Net.HttpStatusCode code, System.Net.WebResponse response)
    // Offset: 0xF110F4
    bool Redirect(::System::Net::HttpStatusCode code, ::System::Net::WebResponse* response);
    // private System.String GetHeaders()
    // Offset: 0xF115CC
    ::StringW GetHeaders();
    // private System.Void DoPreAuthenticate()
    // Offset: 0xF11CD0
    void DoPreAuthenticate();
    // System.Byte[] GetRequestHeaders()
    // Offset: 0xF11EF4
    ::ArrayW<uint8_t> GetRequestHeaders();
    // private System.ValueTuple`2<System.Net.WebOperation,System.Boolean> HandleNtlmAuth(System.Net.WebResponseStream stream, System.Net.HttpWebResponse response, System.Net.BufferOffsetSize writeBuffer, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xF12278
    ::System::ValueTuple_2<::System::Net::WebOperation*, bool> HandleNtlmAuth(::System::Net::WebResponseStream* stream, ::System::Net::HttpWebResponse* response, ::System::Net::BufferOffsetSize* writeBuffer, ::System::Threading::CancellationToken cancellationToken);
    // private System.Boolean CheckAuthorization(System.Net.WebResponse response, System.Net.HttpStatusCode code)
    // Offset: 0xF12520
    bool CheckAuthorization(::System::Net::WebResponse* response, ::System::Net::HttpStatusCode code);
    // private System.ValueTuple`2<System.Threading.Tasks.Task`1<System.Net.BufferOffsetSize>,System.Net.WebException> GetRewriteHandler(System.Net.HttpWebResponse response, System.Boolean redirect)
    // Offset: 0xF12540
    ::System::ValueTuple_2<::System::Threading::Tasks::Task_1<::System::Net::BufferOffsetSize*>*, ::System::Net::WebException*> GetRewriteHandler(::System::Net::HttpWebResponse* response, bool redirect);
    // private System.ValueTuple`4<System.Boolean,System.Boolean,System.Threading.Tasks.Task`1<System.Net.BufferOffsetSize>,System.Net.WebException> CheckFinalStatus(System.Net.HttpWebResponse response)
    // Offset: 0xF12770
    ::System::ValueTuple_4<bool, bool, ::System::Threading::Tasks::Task_1<::System::Net::BufferOffsetSize*>*, ::System::Net::WebException*> CheckFinalStatus(::System::Net::HttpWebResponse* response);
    // private System.Threading.Tasks.Task`1<System.Net.BufferOffsetSize> <GetRewriteHandler>b__263_0()
    // Offset: 0xF12C40
    ::System::Threading::Tasks::Task_1<::System::Net::BufferOffsetSize*>* $GetRewriteHandler$b__263_0();
    // public override System.Int64 get_ContentLength()
    // Offset: 0xF0F388
    // Implemented from: System.Net.WebRequest
    // Base method: System.Int64 WebRequest::get_ContentLength()
    int64_t get_ContentLength();
    // public override System.Void set_ContentLength(System.Int64 value)
    // Offset: 0xF0F390
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_ContentLength(System.Int64 value)
    void set_ContentLength(int64_t value);
    // public override System.Void set_ContentType(System.String value)
    // Offset: 0xF0F49C
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_ContentType(System.String value)
    void set_ContentType(::StringW value);
    // public override System.Net.ICredentials get_Credentials()
    // Offset: 0xF0F4F8
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.ICredentials WebRequest::get_Credentials()
    ::System::Net::ICredentials* get_Credentials();
    // public override System.Void set_Credentials(System.Net.ICredentials value)
    // Offset: 0xF0F500
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Credentials(System.Net.ICredentials value)
    void set_Credentials(::System::Net::ICredentials* value);
    // public override System.Net.WebHeaderCollection get_Headers()
    // Offset: 0xF0F508
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.WebHeaderCollection WebRequest::get_Headers()
    ::System::Net::WebHeaderCollection* get_Headers();
    // public override System.String get_Method()
    // Offset: 0xF0F54C
    // Implemented from: System.Net.WebRequest
    // Base method: System.String WebRequest::get_Method()
    ::StringW get_Method();
    // public override System.Void set_Method(System.String value)
    // Offset: 0xF0F554
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Method(System.String value)
    void set_Method(::StringW value);
    // public override System.Net.IWebProxy get_Proxy()
    // Offset: 0xF0F764
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.IWebProxy WebRequest::get_Proxy()
    ::System::Net::IWebProxy* get_Proxy();
    // public override System.Void set_Proxy(System.Net.IWebProxy value)
    // Offset: 0xF0F76C
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Proxy(System.Net.IWebProxy value)
    void set_Proxy(::System::Net::IWebProxy* value);
    // public override System.Uri get_RequestUri()
    // Offset: 0xF0F8D8
    // Implemented from: System.Net.WebRequest
    // Base method: System.Uri WebRequest::get_RequestUri()
    ::System::Uri* get_RequestUri();
    // public override System.Int32 get_Timeout()
    // Offset: 0xF0F920
    // Implemented from: System.Net.WebRequest
    // Base method: System.Int32 WebRequest::get_Timeout()
    int get_Timeout();
    // public override System.Boolean get_UseDefaultCredentials()
    // Offset: 0xF0F980
    // Implemented from: System.Net.WebRequest
    // Base method: System.Boolean WebRequest::get_UseDefaultCredentials()
    bool get_UseDefaultCredentials();
    // static private System.Void .cctor()
    // Offset: 0xF0E968
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::.cctor()
    static void _cctor();
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0xF0EA24
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::.ctor(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpWebRequest* New_ctor(::System::Runtime::Serialization::SerializationInfo* serializationInfo, ::System::Runtime::Serialization::StreamingContext streamingContext) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HttpWebRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpWebRequest*, creationType>(serializationInfo, streamingContext)));
    }
    // public System.Void .ctor()
    // Offset: 0xF12D60
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpWebRequest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HttpWebRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpWebRequest*, creationType>()));
    }
    // public override System.IAsyncResult BeginGetRequestStream(System.AsyncCallback callback, System.Object state)
    // Offset: 0xF0FE78
    // Implemented from: System.Net.WebRequest
    // Base method: System.IAsyncResult WebRequest::BeginGetRequestStream(System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginGetRequestStream(::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.IO.Stream EndGetRequestStream(System.IAsyncResult asyncResult)
    // Offset: 0xF100A0
    // Implemented from: System.Net.WebRequest
    // Base method: System.IO.Stream WebRequest::EndGetRequestStream(System.IAsyncResult asyncResult)
    ::System::IO::Stream* EndGetRequestStream(::System::IAsyncResult* asyncResult);
    // public override System.IAsyncResult BeginGetResponse(System.AsyncCallback callback, System.Object state)
    // Offset: 0xF10728
    // Implemented from: System.Net.WebRequest
    // Base method: System.IAsyncResult WebRequest::BeginGetResponse(System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginGetResponse(::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.Net.WebResponse EndGetResponse(System.IAsyncResult asyncResult)
    // Offset: 0xF10864
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.WebResponse WebRequest::EndGetResponse(System.IAsyncResult asyncResult)
    ::System::Net::WebResponse* EndGetResponse(::System::IAsyncResult* asyncResult);
    // public override System.Net.WebResponse GetResponse()
    // Offset: 0xF109B8
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.WebResponse WebRequest::GetResponse()
    ::System::Net::WebResponse* GetResponse();
    // public override System.Void Abort()
    // Offset: 0xF10AFC
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::Abort()
    void Abort();
    // protected override System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0xF10BF4
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* serializationInfo, ::System::Runtime::Serialization::StreamingContext streamingContext);
  }; // System.Net.HttpWebRequest
  #pragma pack(pop)
  static check_size<sizeof(HttpWebRequest), 398 + sizeof(bool)> __System_Net_HttpWebRequestSizeCheck;
  static_assert(sizeof(HttpWebRequest) == 0x18F);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::HttpWebRequest::AuthorizationState, "System.Net", "HttpWebRequest/AuthorizationState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::HttpWebRequest::NtlmAuthState, "System.Net", "HttpWebRequest/NtlmAuthState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Address
// Il2CppName: get_Address
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Address)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Address", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Address
// Il2CppName: set_Address
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Uri*)>(&System::Net::HttpWebRequest::set_Address)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Address", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_AllowWriteStreamBuffering
// Il2CppName: get_AllowWriteStreamBuffering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_AllowWriteStreamBuffering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_AllowWriteStreamBuffering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_AutomaticDecompression
// Il2CppName: get_AutomaticDecompression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::DecompressionMethods (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_AutomaticDecompression)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_AutomaticDecompression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_InternalAllowBuffering
// Il2CppName: get_InternalAllowBuffering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_InternalAllowBuffering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_InternalAllowBuffering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_MethodWithBuffer
// Il2CppName: get_MethodWithBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_MethodWithBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_MethodWithBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_TlsProvider
// Il2CppName: get_TlsProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Interface::MonoTlsProvider* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_TlsProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_TlsProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_TlsSettings
// Il2CppName: get_TlsSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Interface::MonoTlsSettings* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_TlsSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_TlsSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ClientCertificates
// Il2CppName: get_ClientCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509CertificateCollection* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ClientCertificates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ClientCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_InternalContentLength
// Il2CppName: set_InternalContentLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int64_t)>(&System::Net::HttpWebRequest::set_InternalContentLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_InternalContentLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ThrowOnError
// Il2CppName: get_ThrowOnError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ThrowOnError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ThrowOnError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ThrowOnError
// Il2CppName: set_ThrowOnError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_ThrowOnError)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ThrowOnError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Host
// Il2CppName: get_Host
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Host)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Host", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_KeepAlive
// Il2CppName: get_KeepAlive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_KeepAlive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_KeepAlive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ReadWriteTimeout
// Il2CppName: get_ReadWriteTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ReadWriteTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ReadWriteTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ProtocolVersion
// Il2CppName: get_ProtocolVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Version* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ProtocolVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ProtocolVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_SendChunked
// Il2CppName: get_SendChunked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_SendChunked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_SendChunked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_SendChunked
// Il2CppName: set_SendChunked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_SendChunked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_SendChunked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ServicePoint
// Il2CppName: get_ServicePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ServicePoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ServicePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ServicePointNoLock
// Il2CppName: get_ServicePointNoLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ServicePointNoLock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ServicePointNoLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_TransferEncoding
// Il2CppName: get_TransferEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_TransferEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_TransferEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_UserAgent
// Il2CppName: get_UserAgent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_UserAgent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_UserAgent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_UserAgent
// Il2CppName: set_UserAgent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW)>(&System::Net::HttpWebRequest::set_UserAgent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_UserAgent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_UnsafeAuthenticatedConnectionSharing
// Il2CppName: get_UnsafeAuthenticatedConnectionSharing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_UnsafeAuthenticatedConnectionSharing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_UnsafeAuthenticatedConnectionSharing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ExpectContinue
// Il2CppName: get_ExpectContinue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ExpectContinue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ExpectContinue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ExpectContinue
// Il2CppName: set_ExpectContinue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_ExpectContinue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ExpectContinue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_AuthUri
// Il2CppName: get_AuthUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_AuthUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_AuthUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ProxyQuery
// Il2CppName: get_ProxyQuery
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ProxyQuery)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ProxyQuery", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ServerCertValidationCallback
// Il2CppName: get_ServerCertValidationCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServerCertValidationCallback* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ServerCertValidationCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ServerCertValidationCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_FinishedReading
// Il2CppName: set_FinishedReading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_FinishedReading)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_FinishedReading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Aborted
// Il2CppName: get_Aborted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Aborted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Aborted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::HttpWebRequest::ResetAuthorization
// Il2CppName: ResetAuthorization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::ResetAuthorization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "ResetAuthorization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::SetSpecialHeaders
// Il2CppName: SetSpecialHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW, ::StringW)>(&System::Net::HttpWebRequest::SetSpecialHeaders)> {
  static const MethodInfo* get() {
    static auto* HeaderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "SetSpecialHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HeaderName, value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetServicePoint
// Il2CppName: GetServicePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::GetServicePoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetServicePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::SendRequest
// Il2CppName: SendRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebOperation* (System::Net::HttpWebRequest::*)(bool, ::System::Net::BufferOffsetSize*, ::System::Threading::CancellationToken)>(&System::Net::HttpWebRequest::SendRequest)> {
  static const MethodInfo* get() {
    static auto* redirecting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* writeBuffer = &::il2cpp_utils::GetClassFromName("System.Net", "BufferOffsetSize")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "SendRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{redirecting, writeBuffer, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::MyGetRequestStreamAsync
// Il2CppName: MyGetRequestStreamAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::IO::Stream*>* (System::Net::HttpWebRequest::*)(::System::Threading::CancellationToken)>(&System::Net::HttpWebRequest::MyGetRequestStreamAsync)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "MyGetRequestStreamAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::RunWithTimeout
// Il2CppName: RunWithTimeout
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Net::HttpWebRequest::RunWithTimeout
// Il2CppName: RunWithTimeout
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Net::HttpWebRequest::MyGetResponseAsync
// Il2CppName: MyGetResponseAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::Net::HttpWebResponse*>* (System::Net::HttpWebRequest::*)(::System::Threading::CancellationToken)>(&System::Net::HttpWebRequest::MyGetResponseAsync)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "MyGetResponseAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetResponseFromData
// Il2CppName: GetResponseFromData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::ValueTuple_5<::System::Net::HttpWebResponse*, bool, bool, ::System::Net::BufferOffsetSize*, ::System::Net::WebOperation*>>* (System::Net::HttpWebRequest::*)(::System::Net::WebResponseStream*, ::System::Threading::CancellationToken)>(&System::Net::HttpWebRequest::GetResponseFromData)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.Net", "WebResponseStream")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetResponseFromData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::FlattenException
// Il2CppName: FlattenException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Exception*)>(&System::Net::HttpWebRequest::FlattenException)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "FlattenException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetWebException
// Il2CppName: GetWebException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebException* (System::Net::HttpWebRequest::*)(::System::Exception*)>(&System::Net::HttpWebRequest::GetWebException)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetWebException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::CreateRequestAbortedException
// Il2CppName: CreateRequestAbortedException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebException* (*)()>(&System::Net::HttpWebRequest::CreateRequestAbortedException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "CreateRequestAbortedException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::System_Runtime_Serialization_ISerializable_GetObjectData
// Il2CppName: System.Runtime.Serialization.ISerializable.GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Net::HttpWebRequest::System_Runtime_Serialization_ISerializable_GetObjectData)> {
  static const MethodInfo* get() {
    static auto* serializationInfo = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* streamingContext = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "System.Runtime.Serialization.ISerializable.GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializationInfo, streamingContext});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::CheckRequestStarted
// Il2CppName: CheckRequestStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::CheckRequestStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "CheckRequestStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::DoContinueDelegate
// Il2CppName: DoContinueDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int, ::System::Net::WebHeaderCollection*)>(&System::Net::HttpWebRequest::DoContinueDelegate)> {
  static const MethodInfo* get() {
    static auto* statusCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* headers = &::il2cpp_utils::GetClassFromName("System.Net", "WebHeaderCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "DoContinueDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statusCode, headers});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::RewriteRedirectToGet
// Il2CppName: RewriteRedirectToGet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::RewriteRedirectToGet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "RewriteRedirectToGet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::Redirect
// Il2CppName: Redirect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)(::System::Net::HttpStatusCode, ::System::Net::WebResponse*)>(&System::Net::HttpWebRequest::Redirect)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System.Net", "HttpStatusCode")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("System.Net", "WebResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "Redirect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, response});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetHeaders
// Il2CppName: GetHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::GetHeaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::DoPreAuthenticate
// Il2CppName: DoPreAuthenticate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::DoPreAuthenticate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "DoPreAuthenticate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetRequestHeaders
// Il2CppName: GetRequestHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::GetRequestHeaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetRequestHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::HandleNtlmAuth
// Il2CppName: HandleNtlmAuth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::System::Net::WebOperation*, bool> (System::Net::HttpWebRequest::*)(::System::Net::WebResponseStream*, ::System::Net::HttpWebResponse*, ::System::Net::BufferOffsetSize*, ::System::Threading::CancellationToken)>(&System::Net::HttpWebRequest::HandleNtlmAuth)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.Net", "WebResponseStream")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebResponse")->byval_arg;
    static auto* writeBuffer = &::il2cpp_utils::GetClassFromName("System.Net", "BufferOffsetSize")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "HandleNtlmAuth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, response, writeBuffer, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::CheckAuthorization
// Il2CppName: CheckAuthorization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)(::System::Net::WebResponse*, ::System::Net::HttpStatusCode)>(&System::Net::HttpWebRequest::CheckAuthorization)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("System.Net", "WebResponse")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System.Net", "HttpStatusCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "CheckAuthorization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, code});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetRewriteHandler
// Il2CppName: GetRewriteHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::System::Threading::Tasks::Task_1<::System::Net::BufferOffsetSize*>*, ::System::Net::WebException*> (System::Net::HttpWebRequest::*)(::System::Net::HttpWebResponse*, bool)>(&System::Net::HttpWebRequest::GetRewriteHandler)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebResponse")->byval_arg;
    static auto* redirect = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetRewriteHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, redirect});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::CheckFinalStatus
// Il2CppName: CheckFinalStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_4<bool, bool, ::System::Threading::Tasks::Task_1<::System::Net::BufferOffsetSize*>*, ::System::Net::WebException*> (System::Net::HttpWebRequest::*)(::System::Net::HttpWebResponse*)>(&System::Net::HttpWebRequest::CheckFinalStatus)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "CheckFinalStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::$GetRewriteHandler$b__263_0
// Il2CppName: <GetRewriteHandler>b__263_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::Net::BufferOffsetSize*>* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::$GetRewriteHandler$b__263_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "<GetRewriteHandler>b__263_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ContentLength
// Il2CppName: get_ContentLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ContentLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ContentLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ContentLength
// Il2CppName: set_ContentLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int64_t)>(&System::Net::HttpWebRequest::set_ContentLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ContentLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ContentType
// Il2CppName: set_ContentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW)>(&System::Net::HttpWebRequest::set_ContentType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ContentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Credentials
// Il2CppName: get_Credentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ICredentials* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Credentials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Credentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Credentials
// Il2CppName: set_Credentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::ICredentials*)>(&System::Net::HttpWebRequest::set_Credentials)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "ICredentials")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Credentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Headers
// Il2CppName: get_Headers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebHeaderCollection* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Headers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Headers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Method
// Il2CppName: get_Method
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Method)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Method", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Method
// Il2CppName: set_Method
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW)>(&System::Net::HttpWebRequest::set_Method)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Method", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Proxy
// Il2CppName: get_Proxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IWebProxy* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Proxy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Proxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Proxy
// Il2CppName: set_Proxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::IWebProxy*)>(&System::Net::HttpWebRequest::set_Proxy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "IWebProxy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Proxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_RequestUri
// Il2CppName: get_RequestUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_RequestUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_RequestUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Timeout
// Il2CppName: get_Timeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Timeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Timeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_UseDefaultCredentials
// Il2CppName: get_UseDefaultCredentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_UseDefaultCredentials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_UseDefaultCredentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::HttpWebRequest::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::HttpWebRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::HttpWebRequest::BeginGetRequestStream
// Il2CppName: BeginGetRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::HttpWebRequest::*)(::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::HttpWebRequest::BeginGetRequestStream)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "BeginGetRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::EndGetRequestStream
// Il2CppName: EndGetRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Net::HttpWebRequest::*)(::System::IAsyncResult*)>(&System::Net::HttpWebRequest::EndGetRequestStream)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "EndGetRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::BeginGetResponse
// Il2CppName: BeginGetResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::HttpWebRequest::*)(::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::HttpWebRequest::BeginGetResponse)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "BeginGetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::EndGetResponse
// Il2CppName: EndGetResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebResponse* (System::Net::HttpWebRequest::*)(::System::IAsyncResult*)>(&System::Net::HttpWebRequest::EndGetResponse)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "EndGetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetResponse
// Il2CppName: GetResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebResponse* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::GetResponse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::Abort
// Il2CppName: Abort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::Abort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "Abort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Net::HttpWebRequest::GetObjectData)> {
  static const MethodInfo* get() {
    static auto* serializationInfo = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* streamingContext = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializationInfo, streamingContext});
  }
};
