// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: TaskCompletionSource`1<TResult>
  template<typename TResult>
  class TaskCompletionSource_1;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: WebCompletionSource
  class WebCompletionSource;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::WebCompletionSource);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::WebCompletionSource*, "System.Net", "WebCompletionSource");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.WebCompletionSource
  // [TokenAttribute] Offset: FFFFFFFF
  class WebCompletionSource : public ::Il2CppObject {
    public:
    // Nested type: ::System::Net::WebCompletionSource::State
    struct State;
    // Nested type: ::System::Net::WebCompletionSource::Result
    class Result;
    // Nested type: ::System::Net::WebCompletionSource::$WaitForCompletion$d__8
    struct $WaitForCompletion$d__8;
    public:
    // private System.Threading.Tasks.TaskCompletionSource`1<System.Net.WebCompletionSource/System.Net.Result> completion
    // Size: 0x8
    // Offset: 0x10
    ::System::Threading::Tasks::TaskCompletionSource_1<::System::Net::WebCompletionSource::Result*>* completion;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::TaskCompletionSource_1<::System::Net::WebCompletionSource::Result*>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Threading::Tasks::TaskCompletionSource_1<::System::Net::WebCompletionSource::Result*>*
    constexpr operator ::System::Threading::Tasks::TaskCompletionSource_1<::System::Net::WebCompletionSource::Result*>*() const noexcept {
      return completion;
    }
    // Get instance field reference: private System.Threading.Tasks.TaskCompletionSource`1<System.Net.WebCompletionSource/System.Net.Result> completion
    [[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskCompletionSource_1<::System::Net::WebCompletionSource::Result*>*& dyn_completion();
    // public System.Boolean get_IsCompleted()
    // Offset: 0xC40FA0
    bool get_IsCompleted();
    // public System.Void .ctor()
    // Offset: 0xC40D24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebCompletionSource* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebCompletionSource*, creationType>()));
    }
    // public System.Boolean TrySetCompleted()
    // Offset: 0xC40DA0
    bool TrySetCompleted();
    // public System.Boolean TrySetCanceled()
    // Offset: 0xC40E2C
    bool TrySetCanceled();
    // public System.Boolean TrySetException(System.Exception error)
    // Offset: 0xC40EF8
    bool TrySetException(::System::Exception* error);
    // public System.Void ThrowOnError()
    // Offset: 0xC40FF4
    void ThrowOnError();
    // public System.Threading.Tasks.Task`1<System.Boolean> WaitForCompletion(System.Boolean throwOnError)
    // Offset: 0xC41098
    ::System::Threading::Tasks::Task_1<bool>* WaitForCompletion(bool throwOnError);
  }; // System.Net.WebCompletionSource
  #pragma pack(pop)
  static check_size<sizeof(WebCompletionSource), 16 + sizeof(::System::Threading::Tasks::TaskCompletionSource_1<::System::Net::WebCompletionSource::Result*>*)> __System_Net_WebCompletionSourceSizeCheck;
  static_assert(sizeof(WebCompletionSource) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::WebCompletionSource::get_IsCompleted
// Il2CppName: get_IsCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebCompletionSource::*)()>(&System::Net::WebCompletionSource::get_IsCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebCompletionSource*), "get_IsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebCompletionSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::WebCompletionSource::TrySetCompleted
// Il2CppName: TrySetCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebCompletionSource::*)()>(&System::Net::WebCompletionSource::TrySetCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebCompletionSource*), "TrySetCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebCompletionSource::TrySetCanceled
// Il2CppName: TrySetCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebCompletionSource::*)()>(&System::Net::WebCompletionSource::TrySetCanceled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebCompletionSource*), "TrySetCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebCompletionSource::TrySetException
// Il2CppName: TrySetException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebCompletionSource::*)(::System::Exception*)>(&System::Net::WebCompletionSource::TrySetException)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebCompletionSource*), "TrySetException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::Net::WebCompletionSource::ThrowOnError
// Il2CppName: ThrowOnError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebCompletionSource::*)()>(&System::Net::WebCompletionSource::ThrowOnError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebCompletionSource*), "ThrowOnError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebCompletionSource::WaitForCompletion
// Il2CppName: WaitForCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<bool>* (System::Net::WebCompletionSource::*)(bool)>(&System::Net::WebCompletionSource::WaitForCompletion)> {
  static const MethodInfo* get() {
    static auto* throwOnError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebCompletionSource*), "WaitForCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{throwOnError});
  }
};
