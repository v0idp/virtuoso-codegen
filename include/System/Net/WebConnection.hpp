// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: NetworkCredential
  class NetworkCredential;
  // Forward declaring type: WebConnectionTunnel
  class WebConnectionTunnel;
  // Forward declaring type: ServicePoint
  class ServicePoint;
  // Forward declaring type: WebOperation
  class WebOperation;
  // Forward declaring type: WebRequestStream
  class WebRequestStream;
  // Forward declaring type: WebException
  class WebException;
  // Forward declaring type: WebExceptionStatus
  struct WebExceptionStatus;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: Socket
  class Socket;
}
// Forward declaring namespace: Mono::Net::Security
namespace Mono::Net::Security {
  // Forward declaring type: MonoTlsStream
  class MonoTlsStream;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: WebConnection
  class WebConnection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::WebConnection);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::WebConnection*, "System.Net", "WebConnection");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.WebConnection
  // [TokenAttribute] Offset: FFFFFFFF
  class WebConnection : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::System::Net::WebConnection::$Connect$d__16
    struct $Connect$d__16;
    // Nested type: ::System::Net::WebConnection::$CreateStream$d__18
    struct $CreateStream$d__18;
    // Nested type: ::System::Net::WebConnection::$InitConnection$d__19
    struct $InitConnection$d__19;
    public:
    // private System.Net.NetworkCredential ntlm_credentials
    // Size: 0x8
    // Offset: 0x10
    ::System::Net::NetworkCredential* ntlm_credentials;
    // Field size check
    static_assert(sizeof(::System::Net::NetworkCredential*) == 0x8);
    // private System.Boolean ntlm_authenticated
    // Size: 0x1
    // Offset: 0x18
    bool ntlm_authenticated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean unsafe_sharing
    // Size: 0x1
    // Offset: 0x19
    bool unsafe_sharing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: unsafe_sharing and: networkStream
    char __padding2[0x6] = {};
    // private System.IO.Stream networkStream
    // Size: 0x8
    // Offset: 0x20
    ::System::IO::Stream* networkStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.Net.Sockets.Socket socket
    // Size: 0x8
    // Offset: 0x28
    ::System::Net::Sockets::Socket* socket;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::Socket*) == 0x8);
    // private Mono.Net.Security.MonoTlsStream monoTlsStream
    // Size: 0x8
    // Offset: 0x30
    ::Mono::Net::Security::MonoTlsStream* monoTlsStream;
    // Field size check
    static_assert(sizeof(::Mono::Net::Security::MonoTlsStream*) == 0x8);
    // private System.Net.WebConnectionTunnel tunnel
    // Size: 0x8
    // Offset: 0x38
    ::System::Net::WebConnectionTunnel* tunnel;
    // Field size check
    static_assert(sizeof(::System::Net::WebConnectionTunnel*) == 0x8);
    // private System.Int32 disposed
    // Size: 0x4
    // Offset: 0x40
    int disposed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: disposed and: ServicePoint
    char __padding7[0x4] = {};
    // private readonly System.Net.ServicePoint <ServicePoint>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::System::Net::ServicePoint* ServicePoint;
    // Field size check
    static_assert(sizeof(::System::Net::ServicePoint*) == 0x8);
    // readonly System.Int32 ID
    // Size: 0x4
    // Offset: 0x50
    int _ID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: _ID and: idleSince
    char __padding9[0x4] = {};
    // private System.DateTime idleSince
    // Size: 0x8
    // Offset: 0x58
    ::System::DateTime idleSince;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.Net.WebOperation currentOperation
    // Size: 0x8
    // Offset: 0x60
    ::System::Net::WebOperation* currentOperation;
    // Field size check
    static_assert(sizeof(::System::Net::WebOperation*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Net.NetworkCredential ntlm_credentials
    [[deprecated]] ::System::Net::NetworkCredential*& dyn_ntlm_credentials();
    // Get instance field reference: private System.Boolean ntlm_authenticated
    [[deprecated]] bool& dyn_ntlm_authenticated();
    // Get instance field reference: private System.Boolean unsafe_sharing
    [[deprecated]] bool& dyn_unsafe_sharing();
    // Get instance field reference: private System.IO.Stream networkStream
    [[deprecated]] ::System::IO::Stream*& dyn_networkStream();
    // Get instance field reference: private System.Net.Sockets.Socket socket
    [[deprecated]] ::System::Net::Sockets::Socket*& dyn_socket();
    // Get instance field reference: private Mono.Net.Security.MonoTlsStream monoTlsStream
    [[deprecated]] ::Mono::Net::Security::MonoTlsStream*& dyn_monoTlsStream();
    // Get instance field reference: private System.Net.WebConnectionTunnel tunnel
    [[deprecated]] ::System::Net::WebConnectionTunnel*& dyn_tunnel();
    // Get instance field reference: private System.Int32 disposed
    [[deprecated]] int& dyn_disposed();
    // Get instance field reference: private readonly System.Net.ServicePoint <ServicePoint>k__BackingField
    [[deprecated]] ::System::Net::ServicePoint*& dyn_$ServicePoint$k__BackingField();
    // Get instance field reference: readonly System.Int32 ID
    [[deprecated]] int& dyn_ID();
    // Get instance field reference: private System.DateTime idleSince
    [[deprecated]] ::System::DateTime& dyn_idleSince();
    // Get instance field reference: private System.Net.WebOperation currentOperation
    [[deprecated]] ::System::Net::WebOperation*& dyn_currentOperation();
    // public System.Net.ServicePoint get_ServicePoint()
    // Offset: 0xC411D8
    ::System::Net::ServicePoint* get_ServicePoint();
    // public System.Boolean get_Closed()
    // Offset: 0xC41EE8
    bool get_Closed();
    // public System.DateTime get_IdleSince()
    // Offset: 0xC425EC
    ::System::DateTime get_IdleSince();
    // System.Boolean get_NtlmAuthenticated()
    // Offset: 0xC42CBC
    bool get_NtlmAuthenticated();
    // System.Void set_NtlmAuthenticated(System.Boolean value)
    // Offset: 0xC42CC4
    void set_NtlmAuthenticated(bool value);
    // System.Net.NetworkCredential get_NtlmCredential()
    // Offset: 0xC42CD0
    ::System::Net::NetworkCredential* get_NtlmCredential();
    // System.Void set_NtlmCredential(System.Net.NetworkCredential value)
    // Offset: 0xC42CD8
    void set_NtlmCredential(::System::Net::NetworkCredential* value);
    // System.Boolean get_UnsafeAuthenticatedConnectionSharing()
    // Offset: 0xC42CE0
    bool get_UnsafeAuthenticatedConnectionSharing();
    // System.Void set_UnsafeAuthenticatedConnectionSharing(System.Boolean value)
    // Offset: 0xC42CE8
    void set_UnsafeAuthenticatedConnectionSharing(bool value);
    // public System.Void .ctor(System.Net.ServicePoint sPoint)
    // Offset: 0xC411E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebConnection* New_ctor(::System::Net::ServicePoint* sPoint) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebConnection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebConnection*, creationType>(sPoint)));
    }
    // private System.Boolean CanReuse()
    // Offset: 0xC4120C
    bool CanReuse();
    // private System.Boolean CheckReusable()
    // Offset: 0xC41240
    bool CheckReusable();
    // private System.Threading.Tasks.Task Connect(System.Net.WebOperation operation, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xC412E8
    ::System::Threading::Tasks::Task* Connect(::System::Net::WebOperation* operation, ::System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task`1<System.Boolean> CreateStream(System.Net.WebOperation operation, System.Boolean reused, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xC4140C
    ::System::Threading::Tasks::Task_1<bool>* CreateStream(::System::Net::WebOperation* operation, bool reused, ::System::Threading::CancellationToken cancellationToken);
    // System.Threading.Tasks.Task`1<System.Net.WebRequestStream> InitConnection(System.Net.WebOperation operation, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xC41570
    ::System::Threading::Tasks::Task_1<::System::Net::WebRequestStream*>* InitConnection(::System::Net::WebOperation* operation, ::System::Threading::CancellationToken cancellationToken);
    // static System.Net.WebException GetException(System.Net.WebExceptionStatus status, System.Exception error)
    // Offset: 0xC416B0
    static ::System::Net::WebException* GetException(::System::Net::WebExceptionStatus status, ::System::Exception* error);
    // static System.Boolean ReadLine(System.Byte[] buffer, ref System.Int32 start, System.Int32 max, ref System.String output)
    // Offset: 0xC41880
    static bool ReadLine(::ArrayW<uint8_t> buffer, ByRef<int> start, int max, ByRef<::StringW> output);
    // System.Boolean CanReuseConnection(System.Net.WebOperation operation)
    // Offset: 0xC41A84
    bool CanReuseConnection(::System::Net::WebOperation* operation);
    // private System.Boolean PrepareSharingNtlm(System.Net.WebOperation operation)
    // Offset: 0xC41EF8
    bool PrepareSharingNtlm(::System::Net::WebOperation* operation);
    // private System.Void Reset()
    // Offset: 0xC42230
    void Reset();
    // private System.Void Close(System.Boolean reset)
    // Offset: 0xC422FC
    void Close(bool reset);
    // private System.Void CloseSocket()
    // Offset: 0xC423CC
    void CloseSocket();
    // public System.Boolean StartOperation(System.Net.WebOperation operation, System.Boolean reused)
    // Offset: 0xC425F4
    bool StartOperation(::System::Net::WebOperation* operation, bool reused);
    // public System.Boolean Continue(System.Net.WebOperation next)
    // Offset: 0xC42AE4
    bool Continue(::System::Net::WebOperation* next);
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0xC42C6C
    void Dispose(bool disposing);
    // public System.Void Dispose()
    // Offset: 0xC42CB4
    void Dispose();
    // private System.Void ResetNtlm()
    // Offset: 0xC422F0
    void ResetNtlm();
  }; // System.Net.WebConnection
  #pragma pack(pop)
  static check_size<sizeof(WebConnection), 96 + sizeof(::System::Net::WebOperation*)> __System_Net_WebConnectionSizeCheck;
  static_assert(sizeof(WebConnection) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::WebConnection::get_ServicePoint
// Il2CppName: get_ServicePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (System::Net::WebConnection::*)()>(&System::Net::WebConnection::get_ServicePoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "get_ServicePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::get_Closed
// Il2CppName: get_Closed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnection::*)()>(&System::Net::WebConnection::get_Closed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "get_Closed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::get_IdleSince
// Il2CppName: get_IdleSince
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::Net::WebConnection::*)()>(&System::Net::WebConnection::get_IdleSince)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "get_IdleSince", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::get_NtlmAuthenticated
// Il2CppName: get_NtlmAuthenticated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnection::*)()>(&System::Net::WebConnection::get_NtlmAuthenticated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "get_NtlmAuthenticated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::set_NtlmAuthenticated
// Il2CppName: set_NtlmAuthenticated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)(bool)>(&System::Net::WebConnection::set_NtlmAuthenticated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "set_NtlmAuthenticated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::get_NtlmCredential
// Il2CppName: get_NtlmCredential
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::NetworkCredential* (System::Net::WebConnection::*)()>(&System::Net::WebConnection::get_NtlmCredential)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "get_NtlmCredential", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::set_NtlmCredential
// Il2CppName: set_NtlmCredential
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)(::System::Net::NetworkCredential*)>(&System::Net::WebConnection::set_NtlmCredential)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "NetworkCredential")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "set_NtlmCredential", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::get_UnsafeAuthenticatedConnectionSharing
// Il2CppName: get_UnsafeAuthenticatedConnectionSharing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnection::*)()>(&System::Net::WebConnection::get_UnsafeAuthenticatedConnectionSharing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "get_UnsafeAuthenticatedConnectionSharing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::set_UnsafeAuthenticatedConnectionSharing
// Il2CppName: set_UnsafeAuthenticatedConnectionSharing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)(bool)>(&System::Net::WebConnection::set_UnsafeAuthenticatedConnectionSharing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "set_UnsafeAuthenticatedConnectionSharing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::WebConnection::CanReuse
// Il2CppName: CanReuse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnection::*)()>(&System::Net::WebConnection::CanReuse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "CanReuse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::CheckReusable
// Il2CppName: CheckReusable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnection::*)()>(&System::Net::WebConnection::CheckReusable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "CheckReusable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::WebConnection::*)(::System::Net::WebOperation*, ::System::Threading::CancellationToken)>(&System::Net::WebConnection::Connect)> {
  static const MethodInfo* get() {
    static auto* operation = &::il2cpp_utils::GetClassFromName("System.Net", "WebOperation")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operation, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::CreateStream
// Il2CppName: CreateStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<bool>* (System::Net::WebConnection::*)(::System::Net::WebOperation*, bool, ::System::Threading::CancellationToken)>(&System::Net::WebConnection::CreateStream)> {
  static const MethodInfo* get() {
    static auto* operation = &::il2cpp_utils::GetClassFromName("System.Net", "WebOperation")->byval_arg;
    static auto* reused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "CreateStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operation, reused, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::InitConnection
// Il2CppName: InitConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::Net::WebRequestStream*>* (System::Net::WebConnection::*)(::System::Net::WebOperation*, ::System::Threading::CancellationToken)>(&System::Net::WebConnection::InitConnection)> {
  static const MethodInfo* get() {
    static auto* operation = &::il2cpp_utils::GetClassFromName("System.Net", "WebOperation")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "InitConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operation, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::GetException
// Il2CppName: GetException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebException* (*)(::System::Net::WebExceptionStatus, ::System::Exception*)>(&System::Net::WebConnection::GetException)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("System.Net", "WebExceptionStatus")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "GetException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status, error});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::ReadLine
// Il2CppName: ReadLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<uint8_t>, ByRef<int>, int, ByRef<::StringW>)>(&System::Net::WebConnection::ReadLine)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "ReadLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, start, max, output});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::CanReuseConnection
// Il2CppName: CanReuseConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnection::*)(::System::Net::WebOperation*)>(&System::Net::WebConnection::CanReuseConnection)> {
  static const MethodInfo* get() {
    static auto* operation = &::il2cpp_utils::GetClassFromName("System.Net", "WebOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "CanReuseConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operation});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::PrepareSharingNtlm
// Il2CppName: PrepareSharingNtlm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnection::*)(::System::Net::WebOperation*)>(&System::Net::WebConnection::PrepareSharingNtlm)> {
  static const MethodInfo* get() {
    static auto* operation = &::il2cpp_utils::GetClassFromName("System.Net", "WebOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "PrepareSharingNtlm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operation});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)()>(&System::Net::WebConnection::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)(bool)>(&System::Net::WebConnection::Close)> {
  static const MethodInfo* get() {
    static auto* reset = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reset});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::CloseSocket
// Il2CppName: CloseSocket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)()>(&System::Net::WebConnection::CloseSocket)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "CloseSocket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::StartOperation
// Il2CppName: StartOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnection::*)(::System::Net::WebOperation*, bool)>(&System::Net::WebConnection::StartOperation)> {
  static const MethodInfo* get() {
    static auto* operation = &::il2cpp_utils::GetClassFromName("System.Net", "WebOperation")->byval_arg;
    static auto* reused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "StartOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operation, reused});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::Continue
// Il2CppName: Continue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnection::*)(::System::Net::WebOperation*)>(&System::Net::WebConnection::Continue)> {
  static const MethodInfo* get() {
    static auto* next = &::il2cpp_utils::GetClassFromName("System.Net", "WebOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "Continue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{next});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)(bool)>(&System::Net::WebConnection::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)()>(&System::Net::WebConnection::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::ResetNtlm
// Il2CppName: ResetNtlm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)()>(&System::Net::WebConnection::ResetNtlm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "ResetNtlm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
