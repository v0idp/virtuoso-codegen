// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.WebCompletionSource
#include "System/Net/WebCompletionSource.hpp"
// Including type: System.Net.WebCompletionSource/System.Net.State
#include "System/Net/WebCompletionSource_State.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::ExceptionServices
namespace System::Runtime::ExceptionServices {
  // Forward declaring type: ExceptionDispatchInfo
  class ExceptionDispatchInfo;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::WebCompletionSource::Result);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::WebCompletionSource::Result*, "System.Net", "WebCompletionSource/Result");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.WebCompletionSource/System.Net.Result
  // [TokenAttribute] Offset: FFFFFFFF
  class WebCompletionSource::Result : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.Net.WebCompletionSource/System.Net.State <State>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::System::Net::WebCompletionSource::State State;
    // Field size check
    static_assert(sizeof(::System::Net::WebCompletionSource::State) == 0x4);
    // Padding between fields: State and: Error
    char __padding0[0x4] = {};
    // private readonly System.Runtime.ExceptionServices.ExceptionDispatchInfo <Error>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Runtime::ExceptionServices::ExceptionDispatchInfo* Error;
    // Field size check
    static_assert(sizeof(::System::Runtime::ExceptionServices::ExceptionDispatchInfo*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Net.WebCompletionSource/System.Net.State <State>k__BackingField
    ::System::Net::WebCompletionSource::State& dyn_$State$k__BackingField();
    // Get instance field reference: private readonly System.Runtime.ExceptionServices.ExceptionDispatchInfo <Error>k__BackingField
    ::System::Runtime::ExceptionServices::ExceptionDispatchInfo*& dyn_$Error$k__BackingField();
    // public System.Net.WebCompletionSource/System.Net.State get_State()
    // Offset: 0x8E7D7C
    ::System::Net::WebCompletionSource::State get_State();
    // public System.Runtime.ExceptionServices.ExceptionDispatchInfo get_Error()
    // Offset: 0x8E7D84
    ::System::Runtime::ExceptionServices::ExceptionDispatchInfo* get_Error();
    // public System.Void .ctor(System.Net.WebCompletionSource/System.Net.State state, System.Runtime.ExceptionServices.ExceptionDispatchInfo error)
    // Offset: 0x8E7D8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebCompletionSource::Result* New_ctor(::System::Net::WebCompletionSource::State state, ::System::Runtime::ExceptionServices::ExceptionDispatchInfo* error) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource::Result::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebCompletionSource::Result*, creationType>(state, error)));
    }
  }; // System.Net.WebCompletionSource/System.Net.Result
  #pragma pack(pop)
  static check_size<sizeof(WebCompletionSource::Result), 24 + sizeof(::System::Runtime::ExceptionServices::ExceptionDispatchInfo*)> __System_Net_WebCompletionSource_ResultSizeCheck;
  static_assert(sizeof(WebCompletionSource::Result) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::WebCompletionSource::Result::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebCompletionSource::State (System::Net::WebCompletionSource::Result::*)()>(&System::Net::WebCompletionSource::Result::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebCompletionSource::Result*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebCompletionSource::Result::get_Error
// Il2CppName: get_Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::ExceptionServices::ExceptionDispatchInfo* (System::Net::WebCompletionSource::Result::*)()>(&System::Net::WebCompletionSource::Result::get_Error)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebCompletionSource::Result*), "get_Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebCompletionSource::Result::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
